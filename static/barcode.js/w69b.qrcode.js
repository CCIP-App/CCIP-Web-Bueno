self.CLOSURE_NO_DEPS = true;
// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Bootstrap for the Google JS Library (Closure).
 *
 * In uncompiled mode base.js will write out Closure's deps file, unless the
 * global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects to
 * include their own deps file(s) from different locations.
 *
 * @author arv@google.com (Erik Arvidsson)
 *
 * @provideGoog
 */


/**
 * @define {boolean} Overridden to true by the compiler when
 *     --process_closure_primitives is specified.
 */
var COMPILED = false;


/**
 * Base namespace for the Closure library.  Checks to see goog is already
 * defined in the current scope before assigning to prevent clobbering if
 * base.js is loaded more than once.
 *
 * @const
 */
var goog = goog || {};


/**
 * Reference to the global context.  In most cases this will be 'window'.
 */
goog.global = this;


/**
 * A hook for overriding the define values in uncompiled mode.
 *
 * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before
 * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},
 * {@code goog.define} will use the value instead of the default value.  This
 * allows flags to be overwritten without compilation (this is normally
 * accomplished with the compiler's "define" flag).
 *
 * Example:
 * <pre>
 *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};
 * </pre>
 *
 * @type {Object<string, (string|number|boolean)>|undefined}
 */
goog.global.CLOSURE_UNCOMPILED_DEFINES;


/**
 * A hook for overriding the define values in uncompiled or compiled mode,
 * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In
 * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.
 *
 * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or
 * string literals or the compiler will emit an error.
 *
 * While any @define value may be set, only those set with goog.define will be
 * effective for uncompiled code.
 *
 * Example:
 * <pre>
 *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;
 * </pre>
 *
 * @type {Object<string, (string|number|boolean)>|undefined}
 */
goog.global.CLOSURE_DEFINES;


/**
 * Returns true if the specified value is not undefined.
 * WARNING: Do not use this to test if an object has a property. Use the in
 * operator instead.
 *
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is defined.
 */
goog.isDef = function(val) {
  // void 0 always evaluates to undefined and hence we do not need to depend on
  // the definition of the global variable named 'undefined'.
  return val !== void 0;
};


/**
 * Builds an object structure for the provided namespace path, ensuring that
 * names that already exist are not overwritten. For example:
 * "a.b.c" -> a = {};a.b={};a.b.c={};
 * Used by goog.provide and goog.exportSymbol.
 * @param {string} name name of the object that this file defines.
 * @param {*=} opt_object the object to expose at the end of the path.
 * @param {Object=} opt_objectToExportTo The object to add the path to; default
 *     is |goog.global|.
 * @private
 */
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split('.');
  var cur = opt_objectToExportTo || goog.global;

  // Internet Explorer exhibits strange behavior when throwing errors from
  // methods externed in this manner.  See the testExportSymbolExceptions in
  // base_test.html for an example.
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript('var ' + parts[0]);
  }

  // Certain browsers cannot parse code in the form for((a in b); c;);
  // This pattern is produced by the JSCompiler when it collapses the
  // statement above into the conditional loop below. To prevent this from
  // happening, use a for-loop and reserve the init logic as below.

  // Parentheses added to eliminate strict JS warning in Firefox.
  for (var part; parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      // last part and we have an object; use it
      cur[part] = opt_object;
    } else if (cur[part]) {
      cur = cur[part];
    } else {
      cur = cur[part] = {};
    }
  }
};


/**
 * Defines a named value. In uncompiled mode, the value is retrieved from
 * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and
 * has the property specified, and otherwise used the defined defaultValue.
 * When compiled the default can be overridden using the compiler
 * options or the value set in the CLOSURE_DEFINES object.
 *
 * @param {string} name The distinguished name to provide.
 * @param {string|number|boolean} defaultValue
 */
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&
        Object.prototype.hasOwnProperty.call(
            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else if (goog.global.CLOSURE_DEFINES &&
        Object.prototype.hasOwnProperty.call(
            goog.global.CLOSURE_DEFINES, name)) {
      value = goog.global.CLOSURE_DEFINES[name];
    }
  }
  goog.exportPath_(name, value);
};


/**
 * @define {boolean} DEBUG is provided as a convenience so that debugging code
 * that should not be included in a production js_binary can be easily stripped
 * by specifying --define goog.DEBUG=false to the JSCompiler. For example, most
 * toString() methods should be declared inside an "if (goog.DEBUG)" conditional
 * because they are generally used for debugging purposes and it is difficult
 * for the JSCompiler to statically determine whether they are used.
 */
goog.define('goog.DEBUG', true);


/**
 * @define {string} LOCALE defines the locale being used for compilation. It is
 * used to select locale specific data to be compiled in js binary. BUILD rule
 * can specify this value by "--define goog.LOCALE=<locale_name>" as JSCompiler
 * option.
 *
 * Take into account that the locale code format is important. You should use
 * the canonical Unicode format with hyphen as a delimiter. Language must be
 * lowercase, Language Script - Capitalized, Region - UPPERCASE.
 * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.
 *
 * See more info about locale codes here:
 * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers
 *
 * For language codes you should use values defined by ISO 693-1. See it here
 * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from
 * this rule: the Hebrew language. For legacy reasons the old code (iw) should
 * be used instead of the new code (he), see http://wiki/Main/IIISynonyms.
 */
goog.define('goog.LOCALE', 'en');  // default to en


/**
 * @define {boolean} Whether this code is running on trusted sites.
 *
 * On untrusted sites, several native functions can be defined or overridden by
 * external libraries like Prototype, Datejs, and JQuery and setting this flag
 * to false forces closure to use its own implementations when possible.
 *
 * If your JavaScript can be loaded by a third party site and you are wary about
 * relying on non-standard implementations, specify
 * "--define goog.TRUSTED_SITE=false" to the JSCompiler.
 */
goog.define('goog.TRUSTED_SITE', true);


/**
 * @define {boolean} Whether a project is expected to be running in strict mode.
 *
 * This define can be used to trigger alternate implementations compatible with
 * running in EcmaScript Strict mode or warn about unavailable functionality.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode
 *
 */
goog.define('goog.STRICT_MODE_COMPATIBLE', false);


/**
 * @define {boolean} Whether code that calls {@link goog.setTestOnly} should
 *     be disallowed in the compilation unit.
 */
goog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);


/**
 * @define {boolean} Whether to use a Chrome app CSP-compliant method for
 *     loading scripts via goog.require. @see appendScriptSrcNode_.
 */
goog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);


/**
 * Defines a namespace in Closure.
 *
 * A namespace may only be defined once in a codebase. It may be defined using
 * goog.provide() or goog.module().
 *
 * The presence of one or more goog.provide() calls in a file indicates
 * that the file defines the given objects/namespaces.
 * Provided symbols must not be null or undefined.
 *
 * In addition, goog.provide() creates the object stubs for a namespace
 * (for example, goog.provide("goog.foo.bar") will create the object
 * goog.foo.bar if it does not already exist).
 *
 * Build tools also scan for provide/require/module statements
 * to discern dependencies, build dependency files (see deps.js), etc.
 *
 * @see goog.require
 * @see goog.module
 * @param {string} name Namespace provided by this file in the form
 *     "goog.package.part".
 */
goog.provide = function(name) {
  if (!COMPILED) {
    // Ensure that the same namespace isn't provided twice.
    // A goog.module/goog.provide maps a goog.require to a specific file
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }

  goog.constructNamespace_(name);
};


/**
 * @param {string} name Namespace provided by this file in the form
 *     "goog.package.part".
 * @param {Object=} opt_obj The object to embed in the namespace.
 * @private
 */
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];

    var namespace = name;
    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }

  goog.exportPath_(name, opt_obj);
};


/**
 * Module identifier validation regexp.
 * Note: This is a conservative check, it is very possible to be more lenient,
 *   the primary exclusion here is "/" and "\" and a leading ".", these
 *   restrictions are intended to leave the door open for using goog.require
 *   with relative file paths rather than module identifiers.
 * @private
 */
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;


/**
 * Defines a module in Closure.
 *
 * Marks that this file must be loaded as a module and claims the namespace.
 *
 * A namespace may only be defined once in a codebase. It may be defined using
 * goog.provide() or goog.module().
 *
 * goog.module() has three requirements:
 * - goog.module may not be used in the same file as goog.provide.
 * - goog.module must be the first statement in the file.
 * - only one goog.module is allowed per file.
 *
 * When a goog.module annotated file is loaded, it is enclosed in
 * a strict function closure. This means that:
 * - any variables declared in a goog.module file are private to the file
 * (not global), though the compiler is expected to inline the module.
 * - The code must obey all the rules of "strict" JavaScript.
 * - the file will be marked as "use strict"
 *
 * NOTE: unlike goog.provide, goog.module does not declare any symbols by
 * itself. If declared symbols are desired, use
 * goog.module.declareLegacyNamespace().
 *
 *
 * See the public goog.module proposal: http://goo.gl/Va1hin
 *
 * @param {string} name Namespace provided by this file in the form
 *     "goog.package.part", is expected but not required.
 */
goog.module = function(name) {
  if (!goog.isString(name) ||
      !name ||
      name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error('Invalid module identifier');
  }
  if (!goog.isInModuleLoader_()) {
    throw Error('Module ' + name + ' has been loaded incorrectly.');
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error('goog.module may only be called once per module.');
  }

  // Store the module name for the loader.
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    // Ensure that the same namespace isn't provided twice.
    // A goog.module/goog.provide maps a goog.require to a specific file
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};


/**
 * @param {string} name The module identifier.
 * @return {?} The module exports for an already loaded module or null.
 *
 * Note: This is not an alternative to goog.require, it does not
 * indicate a hard dependency, instead it is used to indicate
 * an optional dependency or to access the exports of a module
 * that has already been loaded.
 * @suppress {missingProvide}
 */
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};


/**
 * @param {string} name The module identifier.
 * @return {?} The module exports for an already loaded module or null.
 * @private
 */
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      // goog.require only return a value with-in goog.module files.
      return name in goog.loadedModules_ ?
          goog.loadedModules_[name] :
          goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};


/**
 * @private {?{moduleName: (string|undefined)}}
 */
goog.moduleLoaderState_ = null;


/**
 * @private
 * @return {boolean} Whether a goog.module is currently being initialized.
 */
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};


/**
 * Provide the module's exports as a globally accessible object under the
 * module's declared name.  This is intended to ease migration to goog.module
 * for files that have existing usages.
 * @suppress {missingProvide}
 */
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error('goog.module.declareLegacyNamespace must be called from ' +
        'within a goog.module');
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error('goog.module must be called prior to ' +
        'goog.module.declareLegacyNamespace.');
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};


/**
 * Marks that the current file should only be used for testing, and never for
 * live code in production.
 *
 * In the case of unit tests, the message may optionally be an exact namespace
 * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra
 * provide (if not explicitly defined in the code).
 *
 * @param {string=} opt_message Optional message to add to the error that's
 *     raised when used in production code.
 */
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || '';
    throw Error('Importing test-only code into non-debug environment' +
                (opt_message ? ': ' + opt_message : '.'));
  }
};


/**
 * Forward declares a symbol. This is an indication to the compiler that the
 * symbol may be used in the source yet is not required and may not be provided
 * in compilation.
 *
 * The most common usage of forward declaration is code that takes a type as a
 * function parameter but does not need to require it. By forward declaring
 * instead of requiring, no hard dependency is made, and (if not required
 * elsewhere) the namespace may never be required and thus, not be pulled
 * into the JavaScript binary. If it is required elsewhere, it will be type
 * checked as normal.
 *
 *
 * @param {string} name The namespace to forward declare in the form of
 *     "goog.package.part".
 */
goog.forwardDeclare = function(name) {};


/**
 * Forward declare type information. Used to assign types to goog.global
 * referenced object that would otherwise result in unknown type references
 * and thus block property disambiguation.
 */
goog.forwardDeclare('Document');
goog.forwardDeclare('XMLHttpRequest');


if (!COMPILED) {

  /**
   * Check if the given name has been goog.provided. This will return false for
   * names that are available only as implicit namespaces.
   * @param {string} name name of the object to look for.
   * @return {boolean} Whether the name has been provided.
   * @private
   */
  goog.isProvided_ = function(name) {
    return (name in goog.loadedModules_) ||
        (!goog.implicitNamespaces_[name] &&
            goog.isDefAndNotNull(goog.getObjectByName(name)));
  };

  /**
   * Namespaces implicitly defined by goog.provide. For example,
   * goog.provide('goog.events.Event') implicitly declares that 'goog' and
   * 'goog.events' must be namespaces.
   *
   * @type {!Object<string, (boolean|undefined)>}
   * @private
   */
  goog.implicitNamespaces_ = {'goog.module': true};

  // NOTE: We add goog.module as an implicit namespace as goog.module is defined
  // here and because the existing module package has not been moved yet out of
  // the goog.module namespace. This satisifies both the debug loader and
  // ahead-of-time dependency management.
}


/**
 * Returns an object based on its fully qualified external name.  The object
 * is not found if null or undefined.  If you are using a compilation pass that
 * renames property names beware that using this function will not find renamed
 * properties.
 *
 * @param {string} name The fully qualified name.
 * @param {Object=} opt_obj The object within which to look; default is
 *     |goog.global|.
 * @return {?} The value (object or primitive) or, if not found, null.
 */
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split('.');
  var cur = opt_obj || goog.global;
  for (var part; part = parts.shift(); ) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};


/**
 * Globalizes a whole namespace, such as goog or goog.lang.
 *
 * @param {!Object} obj The namespace to globalize.
 * @param {Object=} opt_global The object to add the properties to.
 * @deprecated Properties may be explicitly exported to the global scope, but
 *     this should no longer be done in bulk.
 */
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};


/**
 * Adds a dependency from a file to the files it requires.
 * @param {string} relPath The path to the js file.
 * @param {!Array<string>} provides An array of strings with
 *     the names of the objects this file provides.
 * @param {!Array<string>} requires An array of strings with
 *     the names of the objects this file requires.
 * @param {boolean=} opt_isModule Whether this dependency must be loaded as
 *     a module as declared by goog.module.
 */
goog.addDependency = function(relPath, provides, requires, opt_isModule) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, '/');
    var deps = goog.dependencies_;
    for (var i = 0; provide = provides[i]; i++) {
      deps.nameToPath[provide] = path;
      deps.pathIsModule[path] = !!opt_isModule;
    }
    for (var j = 0; require = requires[j]; j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};




// NOTE(nnaze): The debug DOM loader was included in base.js as an original way
// to do "debug-mode" development.  The dependency system can sometimes be
// confusing, as can the debug DOM loader's asynchronous nature.
//
// With the DOM loader, a call to goog.require() is not blocking -- the script
// will not load until some point after the current script.  If a namespace is
// needed at runtime, it needs to be defined in a previous script, or loaded via
// require() with its registered dependencies.
// User-defined namespaces may need their own deps file.  See http://go/js_deps,
// http://go/genjsdeps, or, externally, DepsWriter.
// https://developers.google.com/closure/library/docs/depswriter
//
// Because of legacy clients, the DOM loader can't be easily removed from
// base.js.  Work is being done to make it disableable or replaceable for
// different environments (DOM-less JavaScript interpreters like Rhino or V8,
// for example). See bootstrap/ for more information.


/**
 * @define {boolean} Whether to enable the debug loader.
 *
 * If enabled, a call to goog.require() will attempt to load the namespace by
 * appending a script tag to the DOM (if the namespace has been registered).
 *
 * If disabled, goog.require() will simply assert that the namespace has been
 * provided (and depend on the fact that some outside tool correctly ordered
 * the script).
 */
goog.define('goog.ENABLE_DEBUG_LOADER', true);


/**
 * @param {string} msg
 * @private
 */
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console['error'](msg);
  }
};


/**
 * Implements a system for the dynamic resolution of dependencies that works in
 * parallel with the BUILD system. Note that all calls to goog.require will be
 * stripped by the JSCompiler when the --process_closure_primitives option is
 * used.
 * @see goog.provide
 * @param {string} name Namespace to include (as was given in goog.provide()) in
 *     the form "goog.package.part".
 * @return {?} If called within a goog.module file, the associated namespace or
 *     module otherwise null.
 */
goog.require = function(name) {
  // If the object already exists we do not need do do anything.
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }

    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }

    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.writeScripts_(path);
        return null;
      }
    }

    var errorMessage = 'goog.require could not find: ' + name;
    goog.logToConsole_(errorMessage);

    throw Error(errorMessage);
  }
};


/**
 * Path for included scripts.
 * @type {string}
 */
goog.basePath = '';


/**
 * A hook for overriding the base path.
 * @type {string|undefined}
 */
goog.global.CLOSURE_BASE_PATH;


/**
 * Whether to write out Closure's deps file. By default, the deps are written.
 * @type {boolean|undefined}
 */
goog.global.CLOSURE_NO_DEPS;


/**
 * A function to import a single script. This is meant to be overridden when
 * Closure is being run in non-HTML contexts, such as web workers. It's defined
 * in the global scope so that it can be set before base.js is loaded, which
 * allows deps.js to be imported properly.
 *
 * The function is passed the script source, which is a relative URI. It should
 * return true if the script was imported, false otherwise.
 * @type {(function(string): boolean)|undefined}
 */
goog.global.CLOSURE_IMPORT_SCRIPT;


/**
 * Null function used for default values of callbacks, etc.
 * @return {void} Nothing.
 */
goog.nullFunction = function() {};


/**
 * When defining a class Foo with an abstract method bar(), you can do:
 * Foo.prototype.bar = goog.abstractMethod
 *
 * Now if a subclass of Foo fails to override bar(), an error will be thrown
 * when bar() is invoked.
 *
 * Note: This does not take the name of the function to override as an argument
 * because that would make it more difficult to obfuscate our JavaScript code.
 *
 * @type {!Function}
 * @throws {Error} when invoked to indicate the method should be overridden.
 */
goog.abstractMethod = function() {
  throw Error('unimplemented abstract method');
};


/**
 * Adds a {@code getInstance} static method that always returns the same
 * instance object.
 * @param {!Function} ctor The constructor for the class to add the static
 *     method to.
 */
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      // NOTE: JSCompiler can't optimize away Array#push.
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};


/**
 * All singleton classes that have been instantiated, for testing. Don't read
 * it directly, use the {@code goog.testing.singleton} module. The compiler
 * removes this variable if unused.
 * @type {!Array<!Function>}
 * @private
 */
goog.instantiatedSingletons_ = [];


/**
 * @define {boolean} Whether to load goog.modules using {@code eval} when using
 * the debug loader.  This provides a better debugging experience as the
 * source is unmodified and can be edited using Chrome Workspaces or similar.
 * However in some environments the use of {@code eval} is banned
 * so we provide an alternative.
 */
goog.define('goog.LOAD_MODULE_USING_EVAL', true);


/**
 * @define {boolean} Whether the exports of goog.modules should be sealed when
 * possible.
 */
goog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);


/**
 * The registry of initialized modules:
 * the module identifier to module exports map.
 * @private @const {!Object<string, ?>}
 */
goog.loadedModules_ = {};


/**
 * True if goog.dependencies_ is available.
 * @const {boolean}
 */
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;


if (goog.DEPENDENCIES_ENABLED) {

  /**
   * This object is used to keep track of dependencies and other data that is
   * used for loading scripts.
   * @private
   * @type {{
   *   pathIsModule: !Object<string, boolean>,
   *   nameToPath: !Object<string, string>,
   *   requires: !Object<string, !Object<string, boolean>>,
   *   visited: !Object<string, boolean>,
   *   written: !Object<string, boolean>,
   *   deferred: !Object<string, string>
   * }}
   */
  goog.dependencies_ = {
    pathIsModule: {}, // 1 to 1

    nameToPath: {}, // 1 to 1

    requires: {}, // 1 to many

    // Used when resolving dependencies to prevent us from visiting file twice.
    visited: {},

    written: {}, // Used to keep track of script files we have written.

    deferred: {} // Used to track deferred module evaluations in old IEs
  };


  /**
   * Tries to detect whether is in the context of an HTML document.
   * @return {boolean} True if it looks like HTML document.
   * @private
   */
  goog.inHtmlDocument_ = function() {
    /** @type {Document} */
    var doc = goog.global.document;
    return typeof doc != 'undefined' &&
           'write' in doc;  // XULDocument misses write.
  };


  /**
   * Tries to detect the base path of base.js script that bootstraps Closure.
   * @private
   */
  goog.findBasePath_ = function() {
    if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else if (!goog.inHtmlDocument_()) {
      return;
    }
    /** @type {Document} */
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName('SCRIPT');
    // Search backwards since the current script is in almost all cases the one
    // that has base.js.
    for (var i = scripts.length - 1; i >= 0; --i) {
      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf('?');
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == 'base.js') {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };


  /**
   * Imports a script if, and only if, that script hasn't already been imported.
   * (Must be called at execution time)
   * @param {string} src Script source.
   * @param {string=} opt_sourceText The optionally source text to evaluate
   * @private
   */
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||
        goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };


  /** @const @private {boolean} */
  goog.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document &&
      goog.global.document.all);


  /**
   * Given a URL initiate retrieval and execution of the module.
   * @param {string} src Script source URL.
   * @private
   */
  goog.importModule_ = function(src) {
    // In an attempt to keep browsers from timing out loading scripts using
    // synchronous XHRs, put each load in its own script block.
    var bootstrap = 'goog.retrieveAndExecModule_("' + src + '");';

    if (goog.importScript_('', bootstrap)) {
      goog.dependencies_.written[src] = true;
    }
  };


  /** @private {!Array<string>} */
  goog.queuedModules_ = [];


  /**
   * Return an appropriate module text. Suitable to insert into
   * a script tag (that is unescaped).
   * @param {string} srcUrl
   * @param {string} scriptText
   * @return {string}
   * @private
   */
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return '' +
          'goog.loadModule(function(exports) {' +
          '"use strict";' +
          scriptText +
          '\n' + // terminate any trailing single line comment.
          ';return exports' +
          '});' +
          '\n//# sourceURL=' + srcUrl + '\n';
    } else {
      return '' +
          'goog.loadModule(' +
          goog.global.JSON.stringify(
              scriptText + '\n//# sourceURL=' + srcUrl + '\n') +
          ');';
    }
  };

  // On IE9 and earlier, it is necessary to handle
  // deferred module loads. In later browsers, the
  // code to be evaluated is simply inserted as a script
  // block in the correct order. To eval deferred
  // code at the right time, we piggy back on goog.require to call
  // goog.maybeProcessDeferredDep_.
  //
  // The goog.requires are used both to bootstrap
  // the loading process (when no deps are available) and
  // declare that they should be available.
  //
  // Here we eval the sources, if all the deps are available
  // either already eval'd or goog.require'd.  This will
  // be the case when all the dependencies have already
  // been loaded, and the dependent module is loaded.
  //
  // But this alone isn't sufficient because it is also
  // necessary to handle the case where there is no root
  // that is not deferred.  For that there we register for an event
  // and trigger goog.loadQueuedModules_ handle any remaining deferred
  // evaluations.

  /**
   * Handle any remaining deferred goog.module evals.
   * @private
   */
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0; i < count; i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };


  /**
   * Eval the named module if its dependencies are
   * available.
   * @param {string} name The module to load.
   * @private
   */
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) &&
        goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };

  /**
   * @param {string} name The module to check.
   * @return {boolean} Whether the name represents a
   *     module whose evaluation has been deferred.
   * @private
   */
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && goog.dependencies_.pathIsModule[path]) {
      var abspath = goog.basePath + path;
      return (abspath) in goog.dependencies_.deferred;
    }
    return false;
  };

  /**
   * @param {string} name The module to check.
   * @return {boolean} Whether the name represents a
   *     module whose declared dependencies have all been loaded
   *     (eval'd or a deferred module load)
   * @private
   */
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && (path in goog.dependencies_.requires)) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) &&
            !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };


  /**
   * @param {string} abspath
   * @private
   */
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };


  /**
   * @param {function(?):?|string} moduleDef The module definition.
   */
  goog.loadModule = function(moduleDef) {
    // NOTE: we allow function definitions to be either in the from
    // of a string to eval (which keeps the original source intact) or
    // in a eval forbidden environment (CSP) we allow a function definition
    // which in its body must call {@code goog.module}, and return the exports
    // of the module.
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName: undefined};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else if (goog.isString(moduleDef)) {
        exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
      } else {
        throw Error('Invalid module definition');
      }

      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name \"' + moduleName + '\"');
      }

      // Don't seal legacy namespaces as they may be uses as a parent of
      // another namespace
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
        Object.seal(exports);
      }

      goog.loadedModules_[moduleName] = exports;
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };


  /**
   * @private @const {function(string):?}
   * @suppress {newCheckTypes}
   */
  goog.loadModuleFromSource_ = function() {
    // NOTE: we avoid declaring parameters or local variables here to avoid
    // masking globals or leaking values into the module definition.
    'use strict';
    var exports = {};
    eval(arguments[0]);
    return exports;
  };


  /**
   * Writes a new script pointing to {@code src} directly into the DOM.
   *
   * NOTE: This method is not CSP-compliant. @see goog.appendScriptSrcNode_ for
   * the fallback mechanism.
   *
   * @param {string} src The script URL.
   * @private
   */
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write(
        '<script type="text/javascript" src="' + src + '"></' + 'script>');
  };


  /**
   * Appends a new script node to the DOM using a CSP-compliant mechanism. This
   * method exists as a fallback for document.write (which is not allowed in a
   * strict CSP context, e.g., Chrome apps).
   *
   * NOTE: This method is not analogous to using document.write to insert a
   * <script> tag; specifically, the user agent will execute a script added by
   * document.write immediately after the current script block finishes
   * executing, whereas the DOM-appended script node will not be executed until
   * the entire document is parsed and executed. That is to say, this script is
   * added to the end of the script execution queue.
   *
   * The page must not attempt to call goog.required entities until after the
   * document has loaded, e.g., in or after the window.onload callback.
   *
   * @param {string} src The script URL.
   * @private
   */
  goog.appendScriptSrcNode_ = function(src) {
    /** @type {Document} */
    var doc = goog.global.document;
    var scriptEl = doc.createElement('script');
    scriptEl.type = 'text/javascript';
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };


  /**
   * The default implementation of the import function. Writes a script tag to
   * import the script.
   *
   * @param {string} src The script url.
   * @param {string=} opt_sourceText The optionally source text to evaluate
   * @return {boolean} True if the script was imported, false otherwise.
   * @private
   */
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      /** @type {Document} */
      var doc = goog.global.document;

      // If the user tries to require a new symbol after document load,
      // something has gone terribly wrong. Doing a document.write would
      // wipe out the page. This does not apply to the CSP-compliant method
      // of writing script tags.
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&
          doc.readyState == 'complete') {
        // Certain test frameworks load base.js multiple times, which tries
        // to write deps.js each time. If that happens, just fail silently.
        // These frameworks wipe the page between each load of base.js, so this
        // is OK.
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }

      var isOldIE = goog.IS_OLD_IE_;

      if (opt_sourceText === undefined) {
        if (!isOldIE) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange='goog.onScriptLoad_(this, " +
              ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write(
              '<script type="text/javascript" src="' +
                  src + '"' + state + '></' + 'script>');
        }
      } else {
        doc.write(
            '<script type="text/javascript">' +
            opt_sourceText +
            '</' + 'script>');
      }
      return true;
    } else {
      return false;
    }
  };


  /** @private {number} */
  goog.lastNonModuleScriptIndex_ = 0;


  /**
   * A readystatechange handler for legacy IE
   * @param {!HTMLScriptElement} script
   * @param {number} scriptIndex
   * @return {boolean}
   * @private
   */
  goog.onScriptLoad_ = function(script, scriptIndex) {
    // for now load the modules when we reach the last script,
    // later allow more inter-mingling.
    if (script.readyState == 'complete' &&
        goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };

  /**
   * Resolves dependencies based on the dependencies added using addDependency
   * and calls importScript_ in the correct order.
   * @param {string} pathToLoad The path from which to start discovering
   *     dependencies.
   * @private
   */
  goog.writeScripts_ = function(pathToLoad) {
    /** @type {!Array<string>} The scripts we need to write this time. */
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;

    /** @param {string} path */
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }

      // We have already visited this one. We can get here if we have cyclic
      // dependencies.
      if (path in deps.visited) {
        return;
      }

      deps.visited[path] = true;

      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          // If the required name is defined, we assume that it was already
          // bootstrapped by other means.
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error('Undefined nameToPath for ' + requireName);
            }
          }
        }
      }

      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }

    visitNode(pathToLoad);

    // record that we are going to load all these scripts.
    for (var i = 0; i < scripts.length; i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }

    // If a module is loaded synchronously then we need to
    // clear the current inModuleLoader value, and restore it when we are
    // done loading the current "requires".
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;

    for (var i = 0; i < scripts.length; i++) {
      var path = scripts[i];
      if (path) {
        if (!deps.pathIsModule[path]) {
          goog.importScript_(goog.basePath + path);
        } else {
          goog.importModule_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error('Undefined script input');
      }
    }

    // restore the current "module loading state"
    goog.moduleLoaderState_ = moduleState;
  };


  /**
   * Looks at the dependency rules and tries to determine the script file that
   * fulfills a particular rule.
   * @param {string} rule In the form goog.namespace.Class or project.script.
   * @return {?string} Url corresponding to the rule, or null.
   * @private
   */
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };

  goog.findBasePath_();

  // Allow projects to manage the deps files themselves.
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + 'deps.js');
  }
}


/**
 * Normalize a file path by removing redundant ".." and extraneous "." file
 * path components.
 * @param {string} path
 * @return {string}
 * @private
 */
goog.normalizePath_ = function(path) {
  var components = path.split('/');
  var i = 0;
  while (i < components.length) {
    if (components[i] == '.') {
      components.splice(i, 1);
    } else if (i && components[i] == '..' &&
        components[i - 1] && components[i - 1] != '..') {
      components.splice(--i, 2);
    } else {
      i++;
    }
  }
  return components.join('/');
};


/**
 * Loads file by synchronous XHR. Should not be used in production environments.
 * @param {string} src Source URL.
 * @return {string} File contents.
 * @private
 */
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    /** @type {XMLHttpRequest} */
    var xhr = new goog.global['XMLHttpRequest']();
    xhr.open('get', src, false);
    xhr.send();
    return xhr.responseText;
  }
};


/**
 * Retrieve and execute a module.
 * @param {string} src Script source URL.
 * @private
 */
goog.retrieveAndExecModule_ = function(src) {
  if (!COMPILED) {
    // The full but non-canonicalized URL for later use.
    var originalPath = src;
    // Canonicalize the path, removing any /./ or /../ since Chrome's debugging
    // console doesn't auto-canonicalize XHR loads as it does <script> srcs.
    src = goog.normalizePath_(src);

    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||
        goog.writeScriptTag_;

    var scriptText = goog.loadFileSync_(src);

    if (scriptText != null) {
      var execModuleScript = goog.wrapModule_(src, scriptText);
      var isOldIE = goog.IS_OLD_IE_;
      if (isOldIE) {
        goog.dependencies_.deferred[originalPath] = execModuleScript;
        goog.queuedModules_.push(originalPath);
      } else {
        importScript(src, execModuleScript);
      }
    } else {
      throw new Error('load of ' + src + 'failed');
    }
  }
};


//==============================================================================
// Language Enhancements
//==============================================================================


/**
 * This is a "fixed" version of the typeof operator.  It differs from the typeof
 * operator in such a way that null returns 'null' and arrays return 'array'.
 * @param {*} value The value to get the type of.
 * @return {string} The name of the type.
 */
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == 'object') {
    if (value) {
      // Check these first, so we can avoid calling Object.prototype.toString if
      // possible.
      //
      // IE improperly marshals tyepof across execution contexts, but a
      // cross-context object will still return false for "instanceof Object".
      if (value instanceof Array) {
        return 'array';
      } else if (value instanceof Object) {
        return s;
      }

      // HACK: In order to use an Object prototype method on the arbitrary
      //   value, the compiler requires the value be cast to type Object,
      //   even though the ECMA spec explicitly allows it.
      var className = Object.prototype.toString.call(
          /** @type {Object} */ (value));
      // In Firefox 3.6, attempting to access iframe window objects' length
      // property throws an NS_ERROR_FAILURE, so we need to special-case it
      // here.
      if (className == '[object Window]') {
        return 'object';
      }

      // We cannot always use constructor == Array or instanceof Array because
      // different frames have different Array objects. In IE6, if the iframe
      // where the array was created is destroyed, the array loses its
      // prototype. Then dereferencing val.splice here throws an exception, so
      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'
      // so that will work. In this case, this function will return false and
      // most array functions will still work because the array is still
      // array-like (supports length and []) even though it has lost its
      // prototype.
      // Mark Miller noticed that Object.prototype.toString
      // allows access to the unforgeable [[Class]] property.
      //  15.2.4.2 Object.prototype.toString ( )
      //  When the toString method is called, the following steps are taken:
      //      1. Get the [[Class]] property of this object.
      //      2. Compute a string value by concatenating the three strings
      //         "[object ", Result(1), and "]".
      //      3. Return Result(2).
      // and this behavior survives the destruction of the execution context.
      if ((className == '[object Array]' ||
           // In IE all non value types are wrapped as objects across window
           // boundaries (not iframe though) so we have to do object detection
           // for this edge case.
           typeof value.length == 'number' &&
           typeof value.splice != 'undefined' &&
           typeof value.propertyIsEnumerable != 'undefined' &&
           !value.propertyIsEnumerable('splice')

          )) {
        return 'array';
      }
      // HACK: There is still an array case that fails.
      //     function ArrayImpostor() {}
      //     ArrayImpostor.prototype = [];
      //     var impostor = new ArrayImpostor;
      // this can be fixed by getting rid of the fast path
      // (value instanceof Array) and solely relying on
      // (value && Object.prototype.toString.vall(value) === '[object Array]')
      // but that would require many more function calls and is not warranted
      // unless closure code is receiving objects from untrusted sources.

      // IE in cross-window calls does not correctly marshal the function type
      // (it appears just as an object) so we cannot use just typeof val ==
      // 'function'. However, if the object has a call property, it is a
      // function.
      if ((className == '[object Function]' ||
          typeof value.call != 'undefined' &&
          typeof value.propertyIsEnumerable != 'undefined' &&
          !value.propertyIsEnumerable('call'))) {
        return 'function';
      }

    } else {
      return 'null';
    }

  } else if (s == 'function' && typeof value.call == 'undefined') {
    // In Safari typeof nodeList returns 'function', and on Firefox typeof
    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We
    // would like to return object for those and we can detect an invalid
    // function by making sure that the function object has a call method.
    return 'object';
  }
  return s;
};


/**
 * Returns true if the specified value is null.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is null.
 */
goog.isNull = function(val) {
  return val === null;
};


/**
 * Returns true if the specified value is defined and not null.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is defined and not null.
 */
goog.isDefAndNotNull = function(val) {
  // Note that undefined == null.
  return val != null;
};


/**
 * Returns true if the specified value is an array.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is an array.
 */
goog.isArray = function(val) {
  return goog.typeOf(val) == 'array';
};


/**
 * Returns true if the object looks like an array. To qualify as array like
 * the value needs to be either a NodeList or an object with a Number length
 * property. As a special case, a function value is not array like, because its
 * length property is fixed to correspond to the number of expected arguments.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is an array.
 */
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  // We do not use goog.isObject here in order to exclude function values.
  return type == 'array' || type == 'object' && typeof val.length == 'number';
};


/**
 * Returns true if the object looks like a Date. To qualify as Date-like the
 * value needs to be an object and have a getFullYear() function.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is a like a Date.
 */
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == 'function';
};


/**
 * Returns true if the specified value is a string.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is a string.
 */
goog.isString = function(val) {
  return typeof val == 'string';
};


/**
 * Returns true if the specified value is a boolean.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is boolean.
 */
goog.isBoolean = function(val) {
  return typeof val == 'boolean';
};


/**
 * Returns true if the specified value is a number.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is a number.
 */
goog.isNumber = function(val) {
  return typeof val == 'number';
};


/**
 * Returns true if the specified value is a function.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is a function.
 */
goog.isFunction = function(val) {
  return goog.typeOf(val) == 'function';
};


/**
 * Returns true if the specified value is an object.  This includes arrays and
 * functions.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is an object.
 */
goog.isObject = function(val) {
  var type = typeof val;
  return type == 'object' && val != null || type == 'function';
  // return Object(val) === val also works, but is slower, especially if val is
  // not an object.
};


/**
 * Gets a unique ID for an object. This mutates the object so that further calls
 * with the same object as a parameter returns the same value. The unique ID is
 * guaranteed to be unique across the current session amongst objects that are
 * passed into {@code getUid}. There is no guarantee that the ID is unique or
 * consistent across sessions. It is unsafe to generate unique ID for function
 * prototypes.
 *
 * @param {Object} obj The object to get the unique ID for.
 * @return {number} The unique ID for the object.
 */
goog.getUid = function(obj) {
  // TODO(arv): Make the type stricter, do not accept null.

  // In Opera window.hasOwnProperty exists but always returns false so we avoid
  // using it. As a consequence the unique ID generated for BaseClass.prototype
  // and SubClass.prototype will be the same.
  return obj[goog.UID_PROPERTY_] ||
      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};


/**
 * Whether the given object is already assigned a unique ID.
 *
 * This does not modify the object.
 *
 * @param {!Object} obj The object to check.
 * @return {boolean} Whether there is an assigned unique id for the object.
 */
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};


/**
 * Removes the unique ID from an object. This is useful if the object was
 * previously mutated using {@code goog.getUid} in which case the mutation is
 * undone.
 * @param {Object} obj The object to remove the unique ID field from.
 */
goog.removeUid = function(obj) {
  // TODO(arv): Make the type stricter, do not accept null.

  // In IE, DOM nodes are not instances of Object and throw an exception if we
  // try to delete.  Instead we try to use removeAttribute.
  if ('removeAttribute' in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  /** @preserveTry */
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};


/**
 * Name for unique ID property. Initialized in a way to help avoid collisions
 * with other closure JavaScript on the same page.
 * @type {string}
 * @private
 */
goog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);


/**
 * Counter for UID.
 * @type {number}
 * @private
 */
goog.uidCounter_ = 0;


/**
 * Adds a hash code field to an object. The hash code is unique for the
 * given object.
 * @param {Object} obj The object to get the hash code for.
 * @return {number} The hash code for the object.
 * @deprecated Use goog.getUid instead.
 */
goog.getHashCode = goog.getUid;


/**
 * Removes the hash code field from an object.
 * @param {Object} obj The object to remove the field from.
 * @deprecated Use goog.removeUid instead.
 */
goog.removeHashCode = goog.removeUid;


/**
 * Clones a value. The input may be an Object, Array, or basic type. Objects and
 * arrays will be cloned recursively.
 *
 * WARNINGS:
 * <code>goog.cloneObject</code> does not detect reference loops. Objects that
 * refer to themselves will cause infinite recursion.
 *
 * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies
 * UIDs created by <code>getUid</code> into cloned results.
 *
 * @param {*} obj The value to clone.
 * @return {*} A clone of the input value.
 * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.
 */
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == 'object' || type == 'array') {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == 'array' ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }

  return obj;
};


/**
 * A native implementation of goog.bind.
 * @param {Function} fn A function to partially apply.
 * @param {Object|undefined} selfObj Specifies the object which this should
 *     point to when the function is run.
 * @param {...*} var_args Additional arguments that are partially applied to the
 *     function.
 * @return {!Function} A partially-applied form of the function bind() was
 *     invoked as a method of.
 * @private
 * @suppress {deprecated} The compiler thinks that Function.prototype.bind is
 *     deprecated because some people have declared a pure-JS version.
 *     Only the pure-JS version is truly deprecated.
 */
goog.bindNative_ = function(fn, selfObj, var_args) {
  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));
};


/**
 * A pure-JS implementation of goog.bind.
 * @param {Function} fn A function to partially apply.
 * @param {Object|undefined} selfObj Specifies the object which this should
 *     point to when the function is run.
 * @param {...*} var_args Additional arguments that are partially applied to the
 *     function.
 * @return {!Function} A partially-applied form of the function bind() was
 *     invoked as a method of.
 * @private
 */
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error();
  }

  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      // Prepend the bound arguments to the current arguments.
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };

  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};


/**
 * Partially applies this function to a particular 'this object' and zero or
 * more arguments. The result is a new function with some arguments of the first
 * function pre-filled and the value of this 'pre-specified'.
 *
 * Remaining arguments specified at call-time are appended to the pre-specified
 * ones.
 *
 * Also see: {@link #partial}.
 *
 * Usage:
 * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');
 * barMethBound('arg3', 'arg4');</pre>
 *
 * @param {?function(this:T, ...)} fn A function to partially apply.
 * @param {T} selfObj Specifies the object which this should point to when the
 *     function is run.
 * @param {...*} var_args Additional arguments that are partially applied to the
 *     function.
 * @return {!Function} A partially-applied form of the function goog.bind() was
 *     invoked as a method of.
 * @template T
 * @suppress {deprecated} See above.
 */
goog.bind = function(fn, selfObj, var_args) {
  // TODO(nicksantos): narrow the type signature.
  if (Function.prototype.bind &&
      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome
      // extension environment. This means that for Chrome extensions, they get
      // the implementation of Function.prototype.bind that calls goog.bind
      // instead of the native one. Even worse, we don't want to introduce a
      // circular dependency between goog.bind and Function.prototype.bind, so
      // we have to hack this to make sure it works correctly.
      Function.prototype.bind.toString().indexOf('native code') != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};


/**
 * Like goog.bind(), except that a 'this object' is not required. Useful when
 * the target function is already bound.
 *
 * Usage:
 * var g = goog.partial(f, arg1, arg2);
 * g(arg3, arg4);
 *
 * @param {Function} fn A function to partially apply.
 * @param {...*} var_args Additional arguments that are partially applied to fn.
 * @return {!Function} A partially-applied form of the function goog.partial()
 *     was invoked as a method of.
 */
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    // Clone the array (with slice()) and append additional arguments
    // to the existing arguments.
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};


/**
 * Copies all the members of a source object to a target object. This method
 * does not work on all browsers for all objects that contain keys such as
 * toString or hasOwnProperty. Use goog.object.extend for this purpose.
 * @param {Object} target Target.
 * @param {Object} source Source.
 */
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }

  // For IE7 or lower, the for-in-loop does not contain any properties that are
  // not enumerable on the prototype object (for example, isPrototypeOf from
  // Object.prototype) but also it will not include 'replace' on objects that
  // extend String and change 'replace' (not that it is common for anyone to
  // extend anything except Object).
};


/**
 * @return {number} An integer value representing the number of milliseconds
 *     between midnight, January 1, 1970 and the current time.
 */
goog.now = (goog.TRUSTED_SITE && Date.now) || (function() {
  // Unary plus operator converts its operand to a number which in the case of
  // a date is done by calling getTime().
  return +new Date();
});


/**
 * Evals JavaScript in the global scope.  In IE this uses execScript, other
 * browsers use goog.global.eval. If goog.global.eval does not evaluate in the
 * global scope (for example, in Safari), appends a script tag instead.
 * Throws an exception if neither execScript or eval is defined.
 * @param {string} script JavaScript string.
 */
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, 'JavaScript');
  } else if (goog.global.eval) {
    // Test to see if eval works
    if (goog.evalWorksForGlobals_ == null) {
      goog.global.eval('var _evalTest_ = 1;');
      if (typeof goog.global['_evalTest_'] != 'undefined') {
        try {
          delete goog.global['_evalTest_'];
        } catch (ignore) {
          // Microsoft edge fails the deletion above in strict mode.
        }
        goog.evalWorksForGlobals_ = true;
      } else {
        goog.evalWorksForGlobals_ = false;
      }
    }

    if (goog.evalWorksForGlobals_) {
      goog.global.eval(script);
    } else {
      /** @type {Document} */
      var doc = goog.global.document;
      var scriptElt = doc.createElement('SCRIPT');
      scriptElt.type = 'text/javascript';
      scriptElt.defer = false;
      // Note(user): can't use .innerHTML since "t('<test>')" will fail and
      // .text doesn't work in Safari 2.  Therefore we append a text node.
      scriptElt.appendChild(doc.createTextNode(script));
      doc.body.appendChild(scriptElt);
      doc.body.removeChild(scriptElt);
    }
  } else {
    throw Error('goog.globalEval not available');
  }
};


/**
 * Indicates whether or not we can call 'eval' directly to eval code in the
 * global scope. Set to a Boolean by the first call to goog.globalEval (which
 * empirically tests whether eval works for globals). @see goog.globalEval
 * @type {?boolean}
 * @private
 */
goog.evalWorksForGlobals_ = null;


/**
 * Optional map of CSS class names to obfuscated names used with
 * goog.getCssName().
 * @private {!Object<string, string>|undefined}
 * @see goog.setCssNameMapping
 */
goog.cssNameMapping_;


/**
 * Optional obfuscation style for CSS class names. Should be set to either
 * 'BY_WHOLE' or 'BY_PART' if defined.
 * @type {string|undefined}
 * @private
 * @see goog.setCssNameMapping
 */
goog.cssNameMappingStyle_;


/**
 * Handles strings that are intended to be used as CSS class names.
 *
 * This function works in tandem with @see goog.setCssNameMapping.
 *
 * Without any mapping set, the arguments are simple joined with a hyphen and
 * passed through unaltered.
 *
 * When there is a mapping, there are two possible styles in which these
 * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)
 * of the passed in css name is rewritten according to the map. In the BY_WHOLE
 * style, the full css name is looked up in the map directly. If a rewrite is
 * not specified by the map, the compiler will output a warning.
 *
 * When the mapping is passed to the compiler, it will replace calls to
 * goog.getCssName with the strings from the mapping, e.g.
 *     var x = goog.getCssName('foo');
 *     var y = goog.getCssName(this.baseClass, 'active');
 *  becomes:
 *     var x= 'foo';
 *     var y = this.baseClass + '-active';
 *
 * If one argument is passed it will be processed, if two are passed only the
 * modifier will be processed, as it is assumed the first argument was generated
 * as a result of calling goog.getCssName.
 *
 * @param {string} className The class name.
 * @param {string=} opt_modifier A modifier to be appended to the class name.
 * @return {string} The class name or the concatenation of the class name and
 *     the modifier.
 */
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };

  var renameByParts = function(cssName) {
    // Remap all the parts individually.
    var parts = cssName.split('-');
    var mapped = [];
    for (var i = 0; i < parts.length; i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join('-');
  };

  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == 'BY_WHOLE' ?
        getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }

  if (opt_modifier) {
    return className + '-' + rename(opt_modifier);
  } else {
    return rename(className);
  }
};


/**
 * Sets the map to check when returning a value from goog.getCssName(). Example:
 * <pre>
 * goog.setCssNameMapping({
 *   "goog": "a",
 *   "disabled": "b",
 * });
 *
 * var x = goog.getCssName('goog');
 * // The following evaluates to: "a a-b".
 * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')
 * </pre>
 * When declared as a map of string literals to string literals, the JSCompiler
 * will replace all calls to goog.getCssName() using the supplied map if the
 * --process_closure_primitives flag is set.
 *
 * @param {!Object} mapping A map of strings to strings where keys are possible
 *     arguments to goog.getCssName() and values are the corresponding values
 *     that should be returned.
 * @param {string=} opt_style The style of css name mapping. There are two valid
 *     options: 'BY_PART', and 'BY_WHOLE'.
 * @see goog.getCssName for a description.
 */
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};


/**
 * To use CSS renaming in compiled mode, one of the input files should have a
 * call to goog.setCssNameMapping() with an object literal that the JSCompiler
 * can extract and use to replace all calls to goog.getCssName(). In uncompiled
 * mode, JavaScript code should be loaded before this base.js file that declares
 * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is
 * to ensure that the mapping is loaded before any calls to goog.getCssName()
 * are made in uncompiled mode.
 *
 * A hook for overriding the CSS name mapping.
 * @type {!Object<string, string>|undefined}
 */
goog.global.CLOSURE_CSS_NAME_MAPPING;


if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  // This does not call goog.setCssNameMapping() because the JSCompiler
  // requires that goog.setCssNameMapping() be called with an object literal.
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}


/**
 * Gets a localized message.
 *
 * This function is a compiler primitive. If you give the compiler a localized
 * message bundle, it will replace the string at compile-time with a localized
 * version, and expand goog.getMsg call to a concatenated string.
 *
 * Messages must be initialized in the form:
 * <code>
 * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});
 * </code>
 *
 * @param {string} str Translatable string, places holders in the form {$foo}.
 * @param {Object<string, string>=} opt_values Maps place holder name to value.
 * @return {string} message with placeholders filled.
 */
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};


/**
 * Gets a localized message. If the message does not have a translation, gives a
 * fallback message.
 *
 * This is useful when introducing a new message that has not yet been
 * translated into all languages.
 *
 * This function is a compiler primitive. Must be used in the form:
 * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>
 * where MSG_A and MSG_B were initialized with goog.getMsg.
 *
 * @param {string} a The preferred message.
 * @param {string} b The fallback message.
 * @return {string} The best translated message.
 */
goog.getMsgWithFallback = function(a, b) {
  return a;
};


/**
 * Exposes an unobfuscated global namespace path for the given object.
 * Note that fields of the exported object *will* be obfuscated, unless they are
 * exported in turn via this function or goog.exportProperty.
 *
 * Also handy for making public items that are defined in anonymous closures.
 *
 * ex. goog.exportSymbol('public.path.Foo', Foo);
 *
 * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);
 *     public.path.Foo.staticFunction();
 *
 * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',
 *                       Foo.prototype.myMethod);
 *     new public.path.Foo().myMethod();
 *
 * @param {string} publicPath Unobfuscated name to export.
 * @param {*} object Object the name should point to.
 * @param {Object=} opt_objectToExportTo The object to add the path to; default
 *     is goog.global.
 */
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};


/**
 * Exports a property unobfuscated into the object's namespace.
 * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);
 * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);
 * @param {Object} object Object whose static property is being exported.
 * @param {string} publicName Unobfuscated name to export.
 * @param {*} symbol Object the name should point to.
 */
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * Usage:
 * <pre>
 * function ParentClass(a, b) { }
 * ParentClass.prototype.foo = function(a) { };
 *
 * function ChildClass(a, b, c) {
 *   ChildClass.base(this, 'constructor', a, b);
 * }
 * goog.inherits(ChildClass, ParentClass);
 *
 * var child = new ChildClass('a', 'b', 'see');
 * child.foo(); // This works.
 * </pre>
 *
 * @param {!Function} childCtor Child class.
 * @param {!Function} parentCtor Parent class.
 */
goog.inherits = function(childCtor, parentCtor) {
  /** @constructor */
  function tempCtor() {};
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor();
  /** @override */
  childCtor.prototype.constructor = childCtor;

  /**
   * Calls superclass constructor/method.
   *
   * This function is only available if you use goog.inherits to
   * express inheritance relationships between classes.
   *
   * NOTE: This is a replacement for goog.base and for superClass_
   * property defined in childCtor.
   *
   * @param {!Object} me Should always be "this".
   * @param {string} methodName The method name to call. Calling
   *     superclass constructor can be done with the special string
   *     'constructor'.
   * @param {...*} var_args The arguments to pass to superclass
   *     method/constructor.
   * @return {*} The return value of the superclass method/constructor.
   */
  childCtor.base = function(me, methodName, var_args) {
    // Copying using loop to avoid deop due to passing arguments object to
    // function. This is faster in many JS engines as of late 2014.
    var args = new Array(arguments.length - 2);
    for (var i = 2; i < arguments.length; i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};


/**
 * Call up to the superclass.
 *
 * If this is called from a constructor, then this calls the superclass
 * constructor with arguments 1-N.
 *
 * If this is called from a prototype method, then you must pass the name of the
 * method as the second argument to this function. If you do not, you will get a
 * runtime error. This calls the superclass' method with arguments 2-N.
 *
 * This function only works if you use goog.inherits to express inheritance
 * relationships between your classes.
 *
 * This function is a compiler primitive. At compile-time, the compiler will do
 * macro expansion to remove a lot of the extra overhead that this function
 * introduces. The compiler will also enforce a lot of the assumptions that this
 * function makes, and treat it as a compiler error if you break them.
 *
 * @param {!Object} me Should always be "this".
 * @param {*=} opt_methodName The method name if calling a super method.
 * @param {...*} var_args The rest of the arguments.
 * @return {*} The return value of the superclass method.
 * @suppress {es5Strict} This method can not be used in strict mode, but
 *     all Closure Library consumers must depend on this file.
 */
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;

  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {
    throw Error('arguments.caller not defined.  goog.base() cannot be used ' +
                'with strict mode code. See ' +
                'http://www.ecma-international.org/ecma-262/5.1/#sec-C');
  }

  if (caller.superClass_) {
    // Copying using loop to avoid deop due to passing arguments object to
    // function. This is faster in many JS engines as of late 2014.
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1; i < arguments.length; i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    // This is a constructor. Call the superclass constructor.
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }

  // Copying using loop to avoid deop due to passing arguments object to
  // function. This is faster in many JS engines as of late 2014.
  var args = new Array(arguments.length - 2);
  for (var i = 2; i < arguments.length; i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;
       ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else if (foundCaller) {
      return ctor.prototype[opt_methodName].apply(me, args);
    }
  }

  // If we did not find the caller in the prototype chain, then one of two
  // things happened:
  // 1) The caller is an instance method.
  // 2) This method was not called by the right caller.
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error(
        'goog.base called from a method of one name ' +
        'to a method of a different name');
  }
};


/**
 * Allow for aliasing within scope functions.  This function exists for
 * uncompiled code - in compiled code the calls will be inlined and the aliases
 * applied.  In uncompiled code the function is simply run since the aliases as
 * written are valid JavaScript.
 *
 *
 * @param {function()} fn Function to call.  This function can contain aliases
 *     to namespaces (e.g. "var dom = goog.dom") or classes
 *     (e.g. "var Timer = goog.Timer").
 */
goog.scope = function(fn) {
  fn.call(goog.global);
};


/*
 * To support uncompiled, strict mode bundles that use eval to divide source
 * like so:
 *    eval('someSource;//# sourceUrl sourcefile.js');
 * We need to export the globally defined symbols "goog" and "COMPILED".
 * Exporting "goog" breaks the compiler optimizations, so we required that
 * be defined externally.
 * NOTE: We don't use goog.exportSymbol here because we don't want to trigger
 * extern generation when that compiler option is enabled.
 */
if (!COMPILED) {
  goog.global['COMPILED'] = COMPILED;
}



//==============================================================================
// goog.defineClass implementation
//==============================================================================


/**
 * Creates a restricted form of a Closure "class":
 *   - from the compiler's perspective, the instance returned from the
 *     constructor is sealed (no new properties may be added).  This enables
 *     better checks.
 *   - the compiler will rewrite this definition to a form that is optimal
 *     for type checking and optimization (initially this will be a more
 *     traditional form).
 *
 * @param {Function} superClass The superclass, Object or null.
 * @param {goog.defineClass.ClassDescriptor} def
 *     An object literal describing
 *     the class.  It may have the following properties:
 *     "constructor": the constructor function
 *     "statics": an object literal containing methods to add to the constructor
 *        as "static" methods or a function that will receive the constructor
 *        function as its only parameter to which static properties can
 *        be added.
 *     all other properties are added to the prototype.
 * @return {!Function} The class constructor.
 */
goog.defineClass = function(superClass, def) {
  // TODO(johnlenz): consider making the superClass an optional parameter.
  var constructor = def.constructor;
  var statics = def.statics;
  // Wrap the constructor prior to setting up the prototype and static methods.
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error('cannot instantiate an interface (no constructor defined).');
    };
  }

  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }

  // Remove all the properties that should not be copied to the prototype.
  delete def.constructor;
  delete def.statics;

  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }

  return cls;
};


/**
 * @typedef {
 *     !Object|
 *     {constructor:!Function}|
 *     {constructor:!Function, statics:(Object|function(Function):void)}}
 * @suppress {missingProvide}
 */
goog.defineClass.ClassDescriptor;


/**
 * @define {boolean} Whether the instances returned by
 * goog.defineClass should be sealed when possible.
 */
goog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);


/**
 * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is
 * defined, this function will wrap the constructor in a function that seals the
 * results of the provided constructor function.
 *
 * @param {!Function} ctr The constructor whose results maybe be sealed.
 * @param {Function} superClass The superclass constructor.
 * @return {!Function} The replacement constructor.
 * @private
 */
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES &&
      Object.seal instanceof Function) {
    // Don't seal subclasses of unsealable-tagged legacy classes.
    if (superClass && superClass.prototype &&
        superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    /**
     * @this {Object}
     * @return {?}
     */
    var wrappedCtr = function() {
      // Don't seal an instance of a subclass when it calls the constructor of
      // its super class as there is most likely still setup to do.
      var instance = ctr.apply(this, arguments) || this;
      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};


// TODO(johnlenz): share these values with the goog.object
/**
 * The names of the fields that are defined on Object.prototype.
 * @type {!Array<string>}
 * @private
 * @const
 */
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


// TODO(johnlenz): share this function with the goog.object
/**
 * @param {!Object} target The object to add properties to.
 * @param {!Object} source The object to copy properties from.
 * @private
 */
goog.defineClass.applyProperties_ = function(target, source) {
  // TODO(johnlenz): update this to support ES5 getters/setters

  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }

  // For IE the for-in-loop does not contain any properties that are not
  // enumerable on the prototype object (for example isPrototypeOf from
  // Object.prototype) and it will also not include 'replace' on objects that
  // extend String and change 'replace' (not that it is common for anyone to
  // extend anything except Object).
  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};


/**
 * Sealing classes breaks the older idiom of assigning properties on the
 * prototype rather than in the constructor.  As such, goog.defineClass
 * must not seal subclasses of these old-style classes until they are fixed.
 * Until then, this marks a class as "broken", instructing defineClass
 * not to seal subclasses.
 * @param {!Function} ctr The legacy constructor to tag as unsealable.
 */
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};


/**
 * Name for unsealable tag property.
 * @const @private {string}
 */
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Definition of the disposable interface.  A disposable object
 * has a dispose method to to clean up references and resources.
 * @author nnaze@google.com (Nathan Naze)
 */


goog.provide('goog.disposable.IDisposable');



/**
 * Interface for a disposable object.  If a instance requires cleanup
 * (references COM objects, DOM notes, or other disposable objects), it should
 * implement this interface (it may subclass goog.Disposable).
 * @interface
 */
goog.disposable.IDisposable = function() {};


/**
 * Disposes of the object and its resources.
 * @return {void} Nothing.
 */
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;


/**
 * @return {boolean} Whether the object has been disposed of.
 */
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implements the disposable interface. The dispose method is used
 * to clean up references and resources.
 * @author arv@google.com (Erik Arvidsson)
 */


goog.provide('goog.Disposable');
/** @suppress {extraProvide} */
goog.provide('goog.dispose');
/** @suppress {extraProvide} */
goog.provide('goog.disposeAll');

goog.require('goog.disposable.IDisposable');



/**
 * Class that provides the basic implementation for disposable objects. If your
 * class holds one or more references to COM objects, DOM nodes, or other
 * disposable objects, it should extend this class or implement the disposable
 * interface (defined in goog.disposable.IDisposable).
 * @constructor
 * @implements {goog.disposable.IDisposable}
 */
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = new Error().stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
  // Support sealing
  this.disposed_ = this.disposed_;
  this.onDisposeCallbacks_ = this.onDisposeCallbacks_;
};


/**
 * @enum {number} Different monitoring modes for Disposable.
 */
goog.Disposable.MonitoringMode = {
  /**
   * No monitoring.
   */
  OFF: 0,
  /**
   * Creating and disposing the goog.Disposable instances is monitored. All
   * disposable objects need to call the {@code goog.Disposable} base
   * constructor. The PERMANENT mode must be switched on before creating any
   * goog.Disposable instances.
   */
  PERMANENT: 1,
  /**
   * INTERACTIVE mode can be switched on and off on the fly without producing
   * errors. It also doesn't warn if the disposable objects don't call the
   * {@code goog.Disposable} base constructor.
   */
  INTERACTIVE: 2
};


/**
 * @define {number} The monitoring mode of the goog.Disposable
 *     instances. Default is OFF. Switching on the monitoring is only
 *     recommended for debugging because it has a significant impact on
 *     performance and memory usage. If switched off, the monitoring code
 *     compiles down to 0 bytes.
 */
goog.define('goog.Disposable.MONITORING_MODE', 0);


/**
 * @define {boolean} Whether to attach creation stack to each created disposable
 *     instance; This is only relevant for when MonitoringMode != OFF.
 */
goog.define('goog.Disposable.INCLUDE_STACK_ON_CREATION', true);


/**
 * Maps the unique ID of every undisposed {@code goog.Disposable} object to
 * the object itself.
 * @type {!Object<number, !goog.Disposable>}
 * @private
 */
goog.Disposable.instances_ = {};


/**
 * @return {!Array<!goog.Disposable>} All {@code goog.Disposable} objects that
 *     haven't been disposed of.
 */
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};


/**
 * Clears the registry of undisposed objects but doesn't dispose of them.
 */
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};


/**
 * Whether the object has been disposed of.
 * @type {boolean}
 * @private
 */
goog.Disposable.prototype.disposed_ = false;


/**
 * Callbacks to invoke when this object is disposed.
 * @type {Array<!Function>}
 * @private
 */
goog.Disposable.prototype.onDisposeCallbacks_;


/**
 * If monitoring the goog.Disposable instances is enabled, stores the creation
 * stack trace of the Disposable instance.
 * @const {string}
 */
goog.Disposable.prototype.creationStack;


/**
 * @return {boolean} Whether the object has been disposed of.
 * @override
 */
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};


/**
 * @return {boolean} Whether the object has been disposed of.
 * @deprecated Use {@link #isDisposed} instead.
 */
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;


/**
 * Disposes of the object. If the object hasn't already been disposed of, calls
 * {@link #disposeInternal}. Classes that extend {@code goog.Disposable} should
 * override {@link #disposeInternal} in order to delete references to COM
 * objects, DOM nodes, and other disposable objects. Reentrant.
 *
 * @return {void} Nothing.
 * @override
 */
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    // Set disposed_ to true first, in case during the chain of disposal this
    // gets disposed recursively.
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE ==
          goog.Disposable.MonitoringMode.PERMANENT &&
          !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + ' did not call the goog.Disposable base ' +
            'constructor or was disposed of after a clearUndisposedObjects ' +
            'call');
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};


/**
 * Associates a disposable object with this object so that they will be disposed
 * together.
 * @param {goog.disposable.IDisposable} disposable that will be disposed when
 *     this object is disposed.
 */
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};


/**
 * Invokes a callback function when this object is disposed. Callbacks are
 * invoked in the order in which they were added. If a callback is added to
 * an already disposed Disposable, it will be called immediately.
 * @param {function(this:T):?} callback The callback function.
 * @param {T=} opt_scope An optional scope to call the callback in.
 * @template T
 */
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (this.disposed_) {
    callback.call(opt_scope);
    return;
  }
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }

  this.onDisposeCallbacks_.push(
      goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};


/**
 * Deletes or nulls out any references to COM objects, DOM nodes, or other
 * disposable objects. Classes that extend {@code goog.Disposable} should
 * override this method.
 * Not reentrant. To avoid calling it twice, it must only be called from the
 * subclass' {@code disposeInternal} method. Everywhere else the public
 * {@code dispose} method must be used.
 * For example:
 * <pre>
 *   mypackage.MyClass = function() {
 *     mypackage.MyClass.base(this, 'constructor');
 *     // Constructor logic specific to MyClass.
 *     ...
 *   };
 *   goog.inherits(mypackage.MyClass, goog.Disposable);
 *
 *   mypackage.MyClass.prototype.disposeInternal = function() {
 *     // Dispose logic specific to MyClass.
 *     ...
 *     // Call superclass's disposeInternal at the end of the subclass's, like
 *     // in C++, to avoid hard-to-catch issues.
 *     mypackage.MyClass.base(this, 'disposeInternal');
 *   };
 * </pre>
 * @protected
 */
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};


/**
 * Returns True if we can verify the object is disposed.
 * Calls {@code isDisposed} on the argument if it supports it.  If obj
 * is not an object with an isDisposed() method, return false.
 * @param {*} obj The object to investigate.
 * @return {boolean} True if we can verify the object is disposed.
 */
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == 'function') {
    return obj.isDisposed();
  }
  return false;
};


/**
 * Calls {@code dispose} on the argument if it supports it. If obj is not an
 *     object with a dispose() method, this is a no-op.
 * @param {*} obj The object to dispose of.
 */
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == 'function') {
    obj.dispose();
  }
};


/**
 * Calls {@code dispose} on each member of the list that supports it. (If the
 * member is an ArrayLike, then {@code goog.disposeAll()} will be called
 * recursively on each of its members.) If the member is not an object with a
 * {@code dispose()} method, then it is ignored.
 * @param {...*} var_args The list.
 */
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length; i < len; ++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.FileSaver');
goog.require('goog.Disposable');

goog.scope(function() {
  /**
   * @param {!Blob} blob to save.
   * @param {string} name filename.
   * @constructor
   * @extends {goog.Disposable}
   */
  w69b.FileSaver = function(blob, name) {
    // First try a.download, then web filesystem, then object URLs
    this.blob = blob;
    this.name = name;
    this.objectUrl_ = null;
  };
  var FileSaver = w69b.FileSaver;
  goog.inherits(FileSaver, goog.Disposable);
  var pro = w69b.FileSaver.prototype;

  /**
   * @param {!Blob} blob to save.
   * @param {string} name filename.
   * @export
   */
  FileSaver.saveAs = function(blob, name) {
    var saveBlob = navigator['msSaveBlob'];
    if (saveBlob) {
      saveBlob.call(navigator, blob, name);
    } else {
      var saver = new FileSaver(blob, name);
      saver.save();
      window.setTimeout(function() {
        saver.dispose();
      }, 1000);
    }
  };


  /**
   * @return {boolean} weather saveAs is supported.
  */
  FileSaver.checkSupport_ = function() {
    var a = document.createElement('a');
    return navigator['msSaveBlob'] || ('download' in a);
  };
  FileSaver.SUPPORTED_ = FileSaver.checkSupport_();

  /**
   * @return {boolean} weather saveAs is supported.
   * @export
  */
  FileSaver.isSupported = function() {
    return FileSaver.SUPPORTED_;
  };

  /**
   * Simulate mouse click on node.
   */
  FileSaver.click = function(node) {
    var event = document.createEvent('MouseEvents');
    event.initMouseEvent('click', true, true, window,
      0, 0, 0, 0, 0, false, false, false, false, 0, null);
    return node.dispatchEvent(event); // false if event was cancelled
  };


  /**
   * Creates link and fires clickevent on it.
   */
  pro.save = function() {
    var a = document.createElement('a');
    if (!('download' in a))
      return false;

    if (!this.objectUrl_)
      this.objectUrl_ = window.URL.createObjectURL(this.blob);
    a.href = this.objectUrl_;
    a['download'] = this.name;
    return FileSaver.click(a);
  };

  /**
   * @override
   */
  pro.disposeInternal = function() {
    if (this.objectUrl_)
      window.URL.revokeObjectURL(this.objectUrl_);
  };

});


// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Provides a base class for custom Error objects such that the
 * stack is correctly maintained.
 *
 * You should never need to throw goog.debug.Error(msg) directly, Error(msg) is
 * sufficient.
 *
 */

goog.provide('goog.debug.Error');



/**
 * Base class for custom error objects.
 * @param {*=} opt_msg The message associated with the error.
 * @constructor
 * @extends {Error}
 */
goog.debug.Error = function(opt_msg) {

  // Attempt to ensure there is a stack trace.
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = new Error().stack;
    if (stack) {
      this.stack = stack;
    }
  }

  if (opt_msg) {
    this.message = String(opt_msg);
  }

  /**
   * Whether to report this error to the server. Setting this to false will
   * cause the error reporter to not report the error back to the server,
   * which can be useful if the client knows that the error has already been
   * logged on the server.
   * @type {boolean}
   */
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);


/** @override */
goog.debug.Error.prototype.name = 'CustomError';

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Definition of goog.dom.NodeType.
 */

goog.provide('goog.dom.NodeType');


/**
 * Constants for the nodeType attribute in the Node interface.
 *
 * These constants match those specified in the Node interface. These are
 * usually present on the Node object in recent browsers, but not in older
 * browsers (specifically, early IEs) and thus are given here.
 *
 * In some browsers (early IEs), these are not defined on the Node object,
 * so they are provided here.
 *
 * See http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1950641247
 * @enum {number}
 */
goog.dom.NodeType = {
  ELEMENT: 1,
  ATTRIBUTE: 2,
  TEXT: 3,
  CDATA_SECTION: 4,
  ENTITY_REFERENCE: 5,
  ENTITY: 6,
  PROCESSING_INSTRUCTION: 7,
  COMMENT: 8,
  DOCUMENT: 9,
  DOCUMENT_TYPE: 10,
  DOCUMENT_FRAGMENT: 11,
  NOTATION: 12
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities for string manipulation.
 * @author arv@google.com (Erik Arvidsson)
 */


/**
 * Namespace for string utilities
 */
goog.provide('goog.string');
goog.provide('goog.string.Unicode');


/**
 * @define {boolean} Enables HTML escaping of lowercase letter "e" which helps
 * with detection of double-escaping as this letter is frequently used.
 */
goog.define('goog.string.DETECT_DOUBLE_ESCAPING', false);


/**
 * @define {boolean} Whether to force non-dom html unescaping.
 */
goog.define('goog.string.FORCE_NON_DOM_HTML_UNESCAPING', false);


/**
 * Common Unicode string characters.
 * @enum {string}
 */
goog.string.Unicode = {
  NBSP: '\xa0'
};


/**
 * Fast prefix-checker.
 * @param {string} str The string to check.
 * @param {string} prefix A string to look for at the start of {@code str}.
 * @return {boolean} True if {@code str} begins with {@code prefix}.
 */
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};


/**
 * Fast suffix-checker.
 * @param {string} str The string to check.
 * @param {string} suffix A string to look for at the end of {@code str}.
 * @return {boolean} True if {@code str} ends with {@code suffix}.
 */
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};


/**
 * Case-insensitive prefix-checker.
 * @param {string} str The string to check.
 * @param {string} prefix  A string to look for at the end of {@code str}.
 * @return {boolean} True if {@code str} begins with {@code prefix} (ignoring
 *     case).
 */
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(
      prefix, str.substr(0, prefix.length)) == 0;
};


/**
 * Case-insensitive suffix-checker.
 * @param {string} str The string to check.
 * @param {string} suffix A string to look for at the end of {@code str}.
 * @return {boolean} True if {@code str} ends with {@code suffix} (ignoring
 *     case).
 */
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(
      suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};


/**
 * Case-insensitive equality checker.
 * @param {string} str1 First string to check.
 * @param {string} str2 Second string to check.
 * @return {boolean} True if {@code str1} and {@code str2} are the same string,
 *     ignoring case.
 */
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};


/**
 * Does simple python-style string substitution.
 * subs("foo%s hot%s", "bar", "dog") becomes "foobar hotdog".
 * @param {string} str The string containing the pattern.
 * @param {...*} var_args The items to substitute into the pattern.
 * @return {string} A copy of {@code str} in which each occurrence of
 *     {@code %s} has been replaced an argument from {@code var_args}.
 */
goog.string.subs = function(str, var_args) {
  var splitParts = str.split('%s');
  var returnString = '';

  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length &&
         // Replace up to the last split part. We are inserting in the
         // positions between split parts.
         splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }

  return returnString + splitParts.join('%s'); // Join unused '%s'
};


/**
 * Converts multiple whitespace chars (spaces, non-breaking-spaces, new lines
 * and tabs) to a single space, and strips leading and trailing whitespace.
 * @param {string} str Input string.
 * @return {string} A copy of {@code str} with collapsed whitespace.
 */
goog.string.collapseWhitespace = function(str) {
  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
  // include it in the regexp to enforce consistent cross-browser behavior.
  return str.replace(/[\s\xa0]+/g, ' ').replace(/^\s+|\s+$/g, '');
};


/**
 * Checks if a string is empty or contains only whitespaces.
 * @param {string} str The string to check.
 * @return {boolean} Whether {@code str} is empty or whitespace only.
 */
goog.string.isEmptyOrWhitespace = function(str) {
  // testing length == 0 first is actually slower in all browsers (about the
  // same in Opera).
  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
  // include it in the regexp to enforce consistent cross-browser behavior.
  return /^[\s\xa0]*$/.test(str);
};


/**
 * Checks if a string is empty.
 * @param {string} str The string to check.
 * @return {boolean} Whether {@code str} is empty.
 */
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};


/**
 * Checks if a string is empty or contains only whitespaces.
 *
 * TODO(user): Deprecate this when clients have been switched over to
 * goog.string.isEmptyOrWhitespace.
 *
 * @param {string} str The string to check.
 * @return {boolean} Whether {@code str} is empty or whitespace only.
 */
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;


/**
 * Checks if a string is null, undefined, empty or contains only whitespaces.
 * @param {*} str The string to check.
 * @return {boolean} Whether {@code str} is null, undefined, empty, or
 *     whitespace only.
 * @deprecated Use goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str))
 *     instead.
 */
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};


/**
 * Checks if a string is null, undefined, empty or contains only whitespaces.
 *
 * TODO(user): Deprecate this when clients have been switched over to
 * goog.string.isEmptyOrWhitespaceSafe.
 *
 * @param {*} str The string to check.
 * @return {boolean} Whether {@code str} is null, undefined, empty, or
 *     whitespace only.
 */
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;


/**
 * Checks if a string is all breaking whitespace.
 * @param {string} str The string to check.
 * @return {boolean} Whether the string is all breaking whitespace.
 */
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};


/**
 * Checks if a string contains all letters.
 * @param {string} str string to check.
 * @return {boolean} True if {@code str} consists entirely of letters.
 */
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};


/**
 * Checks if a string contains only numbers.
 * @param {*} str string to check. If not a string, it will be
 *     casted to one.
 * @return {boolean} True if {@code str} is numeric.
 */
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};


/**
 * Checks if a string contains only numbers or letters.
 * @param {string} str string to check.
 * @return {boolean} True if {@code str} is alphanumeric.
 */
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};


/**
 * Checks if a character is a space character.
 * @param {string} ch Character to check.
 * @return {boolean} True if {@code ch} is a space.
 */
goog.string.isSpace = function(ch) {
  return ch == ' ';
};


/**
 * Checks if a character is a valid unicode character.
 * @param {string} ch Character to check.
 * @return {boolean} True if {@code ch} is a valid unicode character.
 */
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= ' ' && ch <= '~' ||
         ch >= '\u0080' && ch <= '\uFFFD';
};


/**
 * Takes a string and replaces newlines with a space. Multiple lines are
 * replaced with a single space.
 * @param {string} str The string from which to strip newlines.
 * @return {string} A copy of {@code str} stripped of newlines.
 */
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, ' ');
};


/**
 * Replaces Windows and Mac new lines with unix style: \r or \r\n with \n.
 * @param {string} str The string to in which to canonicalize newlines.
 * @return {string} {@code str} A copy of {@code} with canonicalized newlines.
 */
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, '\n');
};


/**
 * Normalizes whitespace in a string, replacing all whitespace chars with
 * a space.
 * @param {string} str The string in which to normalize whitespace.
 * @return {string} A copy of {@code str} with all whitespace normalized.
 */
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, ' ');
};


/**
 * Normalizes spaces in a string, replacing all consecutive spaces and tabs
 * with a single space. Replaces non-breaking space with a space.
 * @param {string} str The string in which to normalize spaces.
 * @return {string} A copy of {@code str} with all consecutive spaces and tabs
 *    replaced with a single space.
 */
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, ' ');
};


/**
 * Removes the breaking spaces from the left and right of the string and
 * collapses the sequences of breaking spaces in the middle into single spaces.
 * The original and the result strings render the same way in HTML.
 * @param {string} str A string in which to collapse spaces.
 * @return {string} Copy of the string with normalized breaking spaces.
 */
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, ' ').replace(
      /^[\t\r\n ]+|[\t\r\n ]+$/g, '');
};


/**
 * Trims white spaces to the left and right of a string.
 * @param {string} str The string to trim.
 * @return {string} A trimmed copy of {@code str}.
 */
goog.string.trim = (goog.TRUSTED_SITE && String.prototype.trim) ?
    function(str) {
      return str.trim();
    } :
    function(str) {
      // Since IE doesn't include non-breaking-space (0xa0) in their \s
      // character class (as required by section 7.2 of the ECMAScript spec),
      // we explicitly include it in the regexp to enforce consistent
      // cross-browser behavior.
      return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, '');
    };


/**
 * Trims whitespaces at the left end of a string.
 * @param {string} str The string to left trim.
 * @return {string} A trimmed copy of {@code str}.
 */
goog.string.trimLeft = function(str) {
  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
  // include it in the regexp to enforce consistent cross-browser behavior.
  return str.replace(/^[\s\xa0]+/, '');
};


/**
 * Trims whitespaces at the right end of a string.
 * @param {string} str The string to right trim.
 * @return {string} A trimmed copy of {@code str}.
 */
goog.string.trimRight = function(str) {
  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
  // include it in the regexp to enforce consistent cross-browser behavior.
  return str.replace(/[\s\xa0]+$/, '');
};


/**
 * A string comparator that ignores case.
 * -1 = str1 less than str2
 *  0 = str1 equals str2
 *  1 = str1 greater than str2
 *
 * @param {string} str1 The string to compare.
 * @param {string} str2 The string to compare {@code str1} to.
 * @return {number} The comparator result, as described above.
 */
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();

  if (test1 < test2) {
    return -1;
  } else if (test1 == test2) {
    return 0;
  } else {
    return 1;
  }
};


/**
 * Regular expression used for splitting a string into substrings of fractional
 * numbers, integers, and non-numeric characters.
 * @type {RegExp}
 * @private
 */
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;


/**
 * String comparison function that handles numbers in a way humans might expect.
 * Using this function, the string "File 2.jpg" sorts before "File 10.jpg". The
 * comparison is mostly case-insensitive, though strings that are identical
 * except for case are sorted with the upper-case strings before lower-case.
 *
 * This comparison function is significantly slower (about 500x) than either
 * the default or the case-insensitive compare. It should not be used in
 * time-critical code, but should be fast enough to sort several hundred short
 * strings (like filenames) with a reasonable delay.
 *
 * @param {string} str1 The string to compare in a numerically sensitive way.
 * @param {string} str2 The string to compare {@code str1} to.
 * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than
 *     0 if str1 > str2.
 */
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }

  // Using match to split the entire string ahead of time turns out to be faster
  // for most inputs than using RegExp.exec or iterating over each character.
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);

  var count = Math.min(tokens1.length, tokens2.length);

  for (var i = 0; i < count; i++) {
    var a = tokens1[i];
    var b = tokens2[i];

    // Compare pairs of tokens, returning if one token sorts before the other.
    if (a != b) {

      // Only if both tokens are integers is a special comparison required.
      // Decimal numbers are sorted as strings (e.g., '.09' < '.1').
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }

  // If one string is a substring of the other, the shorter string sorts first.
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }

  // The two strings must be equivalent except for case (perfect equality is
  // tested at the head of the function.) Revert to default ASCII-betical string
  // comparison to stablize the sort.
  return str1 < str2 ? -1 : 1;
};


/**
 * URL-encodes a string
 * @param {*} str The string to url-encode.
 * @return {string} An encoded copy of {@code str} that is safe for urls.
 *     Note that '#', ':', and other characters used to delimit portions
 *     of URLs *will* be encoded.
 */
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};


/**
 * URL-decodes the string. We need to specially handle '+'s because
 * the javascript library doesn't convert them to spaces.
 * @param {string} str The string to url decode.
 * @return {string} The decoded {@code str}.
 */
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, ' '));
};


/**
 * Converts \n to <br>s or <br />s.
 * @param {string} str The string in which to convert newlines.
 * @param {boolean=} opt_xml Whether to use XML compatible tags.
 * @return {string} A copy of {@code str} with converted newlines.
 */
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? '<br />' : '<br>');
};


/**
 * Escapes double quote '"' and single quote '\'' characters in addition to
 * '&', '<', and '>' so that a string can be included in an HTML tag attribute
 * value within double or single quotes.
 *
 * It should be noted that > doesn't need to be escaped for the HTML or XML to
 * be valid, but it has been decided to escape it for consistency with other
 * implementations.
 *
 * With goog.string.DETECT_DOUBLE_ESCAPING, this function escapes also the
 * lowercase letter "e".
 *
 * NOTE(user):
 * HtmlEscape is often called during the generation of large blocks of HTML.
 * Using statics for the regular expressions and strings is an optimization
 * that can more than half the amount of time IE spends in this function for
 * large apps, since strings and regexes both contribute to GC allocations.
 *
 * Testing for the presence of a character before escaping increases the number
 * of function calls, but actually provides a speed increase for the average
 * case -- since the average case often doesn't require the escaping of all 4
 * characters and indexOf() is much cheaper than replace().
 * The worst case does suffer slightly from the additional calls, therefore the
 * opt_isLikelyToContainHtmlChars option has been included for situations
 * where all 4 HTML entities are very likely to be present and need escaping.
 *
 * Some benchmarks (times tended to fluctuate +-0.05ms):
 *                                     FireFox                     IE6
 * (no chars / average (mix of cases) / all 4 chars)
 * no checks                     0.13 / 0.22 / 0.22         0.23 / 0.53 / 0.80
 * indexOf                       0.08 / 0.17 / 0.26         0.22 / 0.54 / 0.84
 * indexOf + re test             0.07 / 0.17 / 0.28         0.19 / 0.50 / 0.85
 *
 * An additional advantage of checking if replace actually needs to be called
 * is a reduction in the number of object allocations, so as the size of the
 * application grows the difference between the various methods would increase.
 *
 * @param {string} str string to be escaped.
 * @param {boolean=} opt_isLikelyToContainHtmlChars Don't perform a check to see
 *     if the character needs replacing - use this option if you expect each of
 *     the characters to appear often. Leave false if you expect few html
 *     characters to occur in your strings, such as if you are escaping HTML.
 * @return {string} An escaped copy of {@code str}.
 */
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {

  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, '&amp;')
          .replace(goog.string.LT_RE_, '&lt;')
          .replace(goog.string.GT_RE_, '&gt;')
          .replace(goog.string.QUOT_RE_, '&quot;')
          .replace(goog.string.SINGLE_QUOTE_RE_, '&#39;')
          .replace(goog.string.NULL_RE_, '&#0;');
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, '&#101;');
    }
    return str;

  } else {
    // quick test helps in the case when there are no chars to replace, in
    // worst case this makes barely a difference to the time taken
    if (!goog.string.ALL_RE_.test(str)) return str;

    // str.indexOf is faster than regex.test in this case
    if (str.indexOf('&') != -1) {
      str = str.replace(goog.string.AMP_RE_, '&amp;');
    }
    if (str.indexOf('<') != -1) {
      str = str.replace(goog.string.LT_RE_, '&lt;');
    }
    if (str.indexOf('>') != -1) {
      str = str.replace(goog.string.GT_RE_, '&gt;');
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, '&quot;');
    }
    if (str.indexOf('\'') != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, '&#39;');
    }
    if (str.indexOf('\x00') != -1) {
      str = str.replace(goog.string.NULL_RE_, '&#0;');
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf('e') != -1) {
      str = str.replace(goog.string.E_RE_, '&#101;');
    }
    return str;
  }
};


/**
 * Regular expression that matches an ampersand, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.AMP_RE_ = /&/g;


/**
 * Regular expression that matches a less than sign, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.LT_RE_ = /</g;


/**
 * Regular expression that matches a greater than sign, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.GT_RE_ = />/g;


/**
 * Regular expression that matches a double quote, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.QUOT_RE_ = /"/g;


/**
 * Regular expression that matches a single quote, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.SINGLE_QUOTE_RE_ = /'/g;


/**
 * Regular expression that matches null character, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.NULL_RE_ = /\x00/g;


/**
 * Regular expression that matches a lowercase letter "e", for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.E_RE_ = /e/g;


/**
 * Regular expression that matches any character that needs to be escaped.
 * @const {!RegExp}
 * @private
 */
goog.string.ALL_RE_ = (goog.string.DETECT_DOUBLE_ESCAPING ?
    /[\x00&<>"'e]/ :
    /[\x00&<>"']/);


/**
 * Unescapes an HTML string.
 *
 * @param {string} str The string to unescape.
 * @return {string} An unescaped copy of {@code str}.
 */
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, '&')) {
    // We are careful not to use a DOM if we do not have one or we explicitly
    // requested non-DOM html unescaping.
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING &&
        'document' in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      // Fall back on pure XML entities
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};


/**
 * Unescapes a HTML string using the provided document.
 *
 * @param {string} str The string to unescape.
 * @param {!Document} document A document to use in escaping the string.
 * @return {string} An unescaped copy of {@code str}.
 */
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, '&')) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};


/**
 * Unescapes an HTML string using a DOM to resolve non-XML, non-numeric
 * entities. This function is XSS-safe and whitespace-preserving.
 * @private
 * @param {string} str The string to unescape.
 * @param {Document=} opt_document An optional document to use for creating
 *     elements. If this is not specified then the default window.document
 *     will be used.
 * @return {string} The unescaped {@code str} string.
 */
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  /** @type {!Object<string, string>} */
  var seen = {'&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement('div');
  } else {
    div = goog.global.document.createElement('div');
  }
  // Match as many valid entity characters as possible. If the actual entity
  // happens to be shorter, it will still work as innerHTML will return the
  // trailing characters unchanged. Since the entity characters do not include
  // open angle bracket, there is no chance of XSS from the innerHTML use.
  // Since no whitespace is passed to innerHTML, whitespace is preserved.
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    // Check for cached entity.
    var value = seen[s];
    if (value) {
      return value;
    }
    // Check for numeric entity.
    if (entity.charAt(0) == '#') {
      // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex numbers.
      var n = Number('0' + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    // Fall back to innerHTML otherwise.
    if (!value) {
      // Append a non-entity character to avoid a bug in Webkit that parses
      // an invalid entity at the end of innerHTML text as the empty string.
      div.innerHTML = s + ' ';
      // Then remove the trailing character from the result.
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    // Cache and return.
    return seen[s] = value;
  });
};


/**
 * Unescapes XML entities.
 * @private
 * @param {string} str The string to unescape.
 * @return {string} An unescaped copy of {@code str}.
 */
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch (entity) {
      case 'amp':
        return '&';
      case 'lt':
        return '<';
      case 'gt':
        return '>';
      case 'quot':
        return '"';
      default:
        if (entity.charAt(0) == '#') {
          // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex.
          var n = Number('0' + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        // For invalid entities we just return the entity
        return s;
    }
  });
};


/**
 * Regular expression that matches an HTML entity.
 * See also HTML5: Tokenization / Tokenizing character references.
 * @private
 * @type {!RegExp}
 */
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;


/**
 * Do escaping of whitespace to preserve spatial formatting. We use character
 * entity #160 to make it safer for xml.
 * @param {string} str The string in which to escape whitespace.
 * @param {boolean=} opt_xml Whether to use XML compatible tags.
 * @return {string} An escaped copy of {@code str}.
 */
goog.string.whitespaceEscape = function(str, opt_xml) {
  // This doesn't use goog.string.preserveSpaces for backwards compatibility.
  return goog.string.newLineToBr(str.replace(/  /g, ' &#160;'), opt_xml);
};


/**
 * Preserve spaces that would be otherwise collapsed in HTML by replacing them
 * with non-breaking space Unicode characters.
 * @param {string} str The string in which to preserve whitespace.
 * @return {string} A copy of {@code str} with preserved whitespace.
 */
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, '$1' + goog.string.Unicode.NBSP);
};


/**
 * Strip quote characters around a string.  The second argument is a string of
 * characters to treat as quotes.  This can be a single character or a string of
 * multiple character and in that case each of those are treated as possible
 * quote characters. For example:
 *
 * <pre>
 * goog.string.stripQuotes('"abc"', '"`') --> 'abc'
 * goog.string.stripQuotes('`abc`', '"`') --> 'abc'
 * </pre>
 *
 * @param {string} str The string to strip.
 * @param {string} quoteChars The quote characters to strip.
 * @return {string} A copy of {@code str} without the quotes.
 */
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0; i < length; i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};


/**
 * Truncates a string to a certain length and adds '...' if necessary.  The
 * length also accounts for the ellipsis, so a maximum length of 10 and a string
 * 'Hello World!' produces 'Hello W...'.
 * @param {string} str The string to truncate.
 * @param {number} chars Max number of characters.
 * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped
 *     characters from being cut off in the middle.
 * @return {string} The truncated {@code str} string.
 */
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }

  if (str.length > chars) {
    str = str.substring(0, chars - 3) + '...';
  }

  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }

  return str;
};


/**
 * Truncate a string in the middle, adding "..." if necessary,
 * and favoring the beginning of the string.
 * @param {string} str The string to truncate the middle of.
 * @param {number} chars Max number of characters.
 * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped
 *     characters from being cutoff in the middle.
 * @param {number=} opt_trailingChars Optional number of trailing characters to
 *     leave at the end of the string, instead of truncating as close to the
 *     middle as possible.
 * @return {string} A truncated copy of {@code str}.
 */
goog.string.truncateMiddle = function(str, chars,
    opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }

  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + '...' + str.substring(endPoint);
  } else if (str.length > chars) {
    // Favor the beginning of the string:
    var half = Math.floor(chars / 2);
    var endPos = str.length - half;
    half += chars % 2;
    str = str.substring(0, half) + '...' + str.substring(endPos);
  }

  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }

  return str;
};


/**
 * Special chars that need to be escaped for goog.string.quote.
 * @private {!Object<string, string>}
 */
goog.string.specialEscapeChars_ = {
  '\0': '\\0',
  '\b': '\\b',
  '\f': '\\f',
  '\n': '\\n',
  '\r': '\\r',
  '\t': '\\t',
  '\x0B': '\\x0B', // '\v' is not supported in JScript
  '"': '\\"',
  '\\': '\\\\'
};


/**
 * Character mappings used internally for goog.string.escapeChar.
 * @private {!Object<string, string>}
 */
goog.string.jsEscapeCache_ = {
  '\'': '\\\''
};


/**
 * Encloses a string in double quotes and escapes characters so that the
 * string is a valid JS string.
 * @param {string} s The string to quote.
 * @return {string} A copy of {@code s} surrounded by double quotes.
 */
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0; i < s.length; i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] ||
          ((cc > 31 && cc < 127) ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join('');
  }
};


/**
 * Takes a string and returns the escaped string for that character.
 * @param {string} str The string to escape.
 * @return {string} An escaped string representing {@code str}.
 */
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0; i < str.length; i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join('');
};


/**
 * Takes a character and returns the escaped string for that character. For
 * example escapeChar(String.fromCharCode(15)) -> "\\x0E".
 * @param {string} c The character to escape.
 * @return {string} An escaped string representing {@code c}.
 */
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }

  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }

  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    // tab is 9 but handled above
    if (cc < 256) {
      rv = '\\x';
      if (cc < 16 || cc > 256) {
        rv += '0';
      }
    } else {
      rv = '\\u';
      if (cc < 4096) { // \u1000
        rv += '0';
      }
    }
    rv += cc.toString(16).toUpperCase();
  }

  return goog.string.jsEscapeCache_[c] = rv;
};


/**
 * Determines whether a string contains a substring.
 * @param {string} str The string to search.
 * @param {string} subString The substring to search for.
 * @return {boolean} Whether {@code str} contains {@code subString}.
 */
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};


/**
 * Determines whether a string contains a substring, ignoring case.
 * @param {string} str The string to search.
 * @param {string} subString The substring to search for.
 * @return {boolean} Whether {@code str} contains {@code subString}.
 */
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};


/**
 * Returns the non-overlapping occurrences of ss in s.
 * If either s or ss evalutes to false, then returns zero.
 * @param {string} s The string to look in.
 * @param {string} ss The string to look for.
 * @return {number} Number of occurrences of ss in s.
 */
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};


/**
 * Removes a substring of a specified length at a specific
 * index in a string.
 * @param {string} s The base string from which to remove.
 * @param {number} index The index at which to remove the substring.
 * @param {number} stringLength The length of the substring to remove.
 * @return {string} A copy of {@code s} with the substring removed or the full
 *     string if nothing is removed or the input is invalid.
 */
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  // If the index is greater or equal to 0 then remove substring
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) +
        s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};


/**
 *  Removes the first occurrence of a substring from a string.
 *  @param {string} s The base string from which to remove.
 *  @param {string} ss The string to remove.
 *  @return {string} A copy of {@code s} with {@code ss} removed or the full
 *      string if nothing is removed.
 */
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), '');
  return s.replace(re, '');
};


/**
 *  Removes all occurrences of a substring from a string.
 *  @param {string} s The base string from which to remove.
 *  @param {string} ss The string to remove.
 *  @return {string} A copy of {@code s} with {@code ss} removed or the full
 *      string if nothing is removed.
 */
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), 'g');
  return s.replace(re, '');
};


/**
 * Escapes characters in the string that are not safe to use in a RegExp.
 * @param {*} s The string to escape. If not a string, it will be casted
 *     to one.
 * @return {string} A RegExp safe, escaped copy of {@code s}.
 */
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
      replace(/\x08/g, '\\x08');
};


/**
 * Repeats a string n times.
 * @param {string} string The string to repeat.
 * @param {number} length The number of times to repeat.
 * @return {string} A string containing {@code length} repetitions of
 *     {@code string}.
 */
goog.string.repeat = (String.prototype.repeat) ?
    function(string, length) {
      // The native method is over 100 times faster than the alternative.
      return string.repeat(length);
    } :
    function(string, length) {
      return new Array(length + 1).join(string);
    };


/**
 * Pads number to given length and optionally rounds it to a given precision.
 * For example:
 * <pre>padNumber(1.25, 2, 3) -> '01.250'
 * padNumber(1.25, 2) -> '01.25'
 * padNumber(1.25, 2, 1) -> '01.3'
 * padNumber(1.25, 0) -> '1.25'</pre>
 *
 * @param {number} num The number to pad.
 * @param {number} length The desired length.
 * @param {number=} opt_precision The desired precision.
 * @return {string} {@code num} as a string with the given options.
 */
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf('.');
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat('0', Math.max(0, length - index)) + s;
};


/**
 * Returns a string representation of the given object, with
 * null and undefined being returned as the empty string.
 *
 * @param {*} obj The object to convert.
 * @return {string} A string representation of the {@code obj}.
 */
goog.string.makeSafe = function(obj) {
  return obj == null ? '' : String(obj);
};


/**
 * Concatenates string expressions. This is useful
 * since some browsers are very inefficient when it comes to using plus to
 * concat strings. Be careful when using null and undefined here since
 * these will not be included in the result. If you need to represent these
 * be sure to cast the argument to a String first.
 * For example:
 * <pre>buildString('a', 'b', 'c', 'd') -> 'abcd'
 * buildString(null, undefined) -> ''
 * </pre>
 * @param {...*} var_args A list of strings to concatenate. If not a string,
 *     it will be casted to one.
 * @return {string} The concatenation of {@code var_args}.
 */
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, '');
};


/**
 * Returns a string with at least 64-bits of randomness.
 *
 * Doesn't trust Javascript's random function entirely. Uses a combination of
 * random and current timestamp, and then encodes the string in base-36 to
 * make it shorter.
 *
 * @return {string} A random string, e.g. sn1s7vb4gcic.
 */
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) +
         Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};


/**
 * Compares two version numbers.
 *
 * @param {string|number} version1 Version of first item.
 * @param {string|number} version2 Version of second item.
 *
 * @return {number}  1 if {@code version1} is higher.
 *                   0 if arguments are equal.
 *                  -1 if {@code version2} is higher.
 */
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  // Trim leading and trailing whitespace and split the versions into
  // subversions.
  var v1Subs = goog.string.trim(String(version1)).split('.');
  var v2Subs = goog.string.trim(String(version2)).split('.');
  var subCount = Math.max(v1Subs.length, v2Subs.length);

  // Iterate over the subversions, as long as they appear to be equivalent.
  for (var subIdx = 0; order == 0 && subIdx < subCount; subIdx++) {
    var v1Sub = v1Subs[subIdx] || '';
    var v2Sub = v2Subs[subIdx] || '';

    // Split the subversions into pairs of numbers and qualifiers (like 'b').
    // Two different RegExp objects are needed because they are both using
    // the 'g' flag.
    var v1CompParser = new RegExp('(\\d*)(\\D*)', 'g');
    var v2CompParser = new RegExp('(\\d*)(\\D*)', 'g');
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ['', '', ''];
      var v2Comp = v2CompParser.exec(v2Sub) || ['', '', ''];
      // Break if there are no more matches.
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }

      // Parse the numeric part of the subversion. A missing number is
      // equivalent to 0.
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);

      // Compare the subversion components. The number has the highest
      // precedence. Next, if the numbers are equal, a subversion without any
      // qualifier is always higher than a subversion with any qualifier. Next,
      // the qualifiers are compared as strings.
      order = goog.string.compareElements_(v1CompNum, v2CompNum) ||
          goog.string.compareElements_(v1Comp[2].length == 0,
              v2Comp[2].length == 0) ||
          goog.string.compareElements_(v1Comp[2], v2Comp[2]);
      // Stop as soon as an inequality is discovered.
    } while (order == 0);
  }

  return order;
};


/**
 * Compares elements of a version number.
 *
 * @param {string|number|boolean} left An element from a version number.
 * @param {string|number|boolean} right An element from a version number.
 *
 * @return {number}  1 if {@code left} is higher.
 *                   0 if arguments are equal.
 *                  -1 if {@code right} is higher.
 * @private
 */
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else if (left > right) {
    return 1;
  }
  return 0;
};


/**
 * String hash function similar to java.lang.String.hashCode().
 * The hash code for a string is computed as
 * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
 * where s[i] is the ith character of the string and n is the length of
 * the string. We mod the result to make it between 0 (inclusive) and 2^32
 * (exclusive).
 * @param {string} str A string.
 * @return {number} Hash value for {@code str}, between 0 (inclusive) and 2^32
 *  (exclusive). The empty string returns 0.
 */
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0; i < str.length; ++i) {
    // Normalize to 4 byte range, 0 ... 2^32.
    result = (31 * result + str.charCodeAt(i)) >>> 0;
  }
  return result;
};


/**
 * The most recent unique ID. |0 is equivalent to Math.floor in this case.
 * @type {number}
 * @private
 */
goog.string.uniqueStringCounter_ = Math.random() * 0x80000000 | 0;


/**
 * Generates and returns a string which is unique in the current document.
 * This is useful, for example, to create unique IDs for DOM elements.
 * @return {string} A unique id.
 */
goog.string.createUniqueString = function() {
  return 'goog_' + goog.string.uniqueStringCounter_++;
};


/**
 * Converts the supplied string to a number, which may be Infinity or NaN.
 * This function strips whitespace: (toNumber(' 123') === 123)
 * This function accepts scientific notation: (toNumber('1e1') === 10)
 *
 * This is better than Javascript's built-in conversions because, sadly:
 *     (Number(' ') === 0) and (parseFloat('123a') === 123)
 *
 * @param {string} str The string to convert.
 * @return {number} The number the supplied string represents, or NaN.
 */
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};


/**
 * Returns whether the given string is lower camel case (e.g. "isFooBar").
 *
 * Note that this assumes the string is entirely letters.
 * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms
 *
 * @param {string} str String to test.
 * @return {boolean} Whether the string is lower camel case.
 */
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};


/**
 * Returns whether the given string is upper camel case (e.g. "FooBarBaz").
 *
 * Note that this assumes the string is entirely letters.
 * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms
 *
 * @param {string} str String to test.
 * @return {boolean} Whether the string is upper camel case.
 */
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};


/**
 * Converts a string from selector-case to camelCase (e.g. from
 * "multi-part-string" to "multiPartString"), useful for converting
 * CSS selectors and HTML dataset keys to their equivalent JS properties.
 * @param {string} str The string in selector-case form.
 * @return {string} The string in camelCase form.
 */
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};


/**
 * Converts a string from camelCase to selector-case (e.g. from
 * "multiPartString" to "multi-part-string"), useful for converting JS
 * style and dataset properties to equivalent CSS selectors and HTML keys.
 * @param {string} str The string in camelCase form.
 * @return {string} The string in selector-case form.
 */
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, '-$1').toLowerCase();
};


/**
 * Converts a string into TitleCase. First character of the string is always
 * capitalized in addition to the first letter of every subsequent word.
 * Words are delimited by one or more whitespaces by default. Custom delimiters
 * can optionally be specified to replace the default, which doesn't preserve
 * whitespace delimiters and instead must be explicitly included if needed.
 *
 * Default delimiter => " ":
 *    goog.string.toTitleCase('oneTwoThree')    => 'OneTwoThree'
 *    goog.string.toTitleCase('one two three')  => 'One Two Three'
 *    goog.string.toTitleCase('  one   two   ') => '  One   Two   '
 *    goog.string.toTitleCase('one_two_three')  => 'One_two_three'
 *    goog.string.toTitleCase('one-two-three')  => 'One-two-three'
 *
 * Custom delimiter => "_-.":
 *    goog.string.toTitleCase('oneTwoThree', '_-.')       => 'OneTwoThree'
 *    goog.string.toTitleCase('one two three', '_-.')     => 'One two three'
 *    goog.string.toTitleCase('  one   two   ', '_-.')    => '  one   two   '
 *    goog.string.toTitleCase('one_two_three', '_-.')     => 'One_Two_Three'
 *    goog.string.toTitleCase('one-two-three', '_-.')     => 'One-Two-Three'
 *    goog.string.toTitleCase('one...two...three', '_-.') => 'One...Two...Three'
 *    goog.string.toTitleCase('one. two. three', '_-.')   => 'One. two. three'
 *    goog.string.toTitleCase('one-two.three', '_-.')     => 'One-Two.Three'
 *
 * @param {string} str String value in camelCase form.
 * @param {string=} opt_delimiters Custom delimiter character set used to
 *      distinguish words in the string value. Each character represents a
 *      single delimiter. When provided, default whitespace delimiter is
 *      overridden and must be explicitly included if needed.
 * @return {string} String value in TitleCase form.
 */
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ?
      goog.string.regExpEscape(opt_delimiters) : '\\s';

  // For IE8, we need to prevent using an empty character set. Otherwise,
  // incorrect matching will occur.
  delimiters = delimiters ? '|[' + delimiters + ']+' : '';

  var regexp = new RegExp('(^' + delimiters + ')([a-z])', 'g');
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};


/**
 * Capitalizes a string, i.e. converts the first letter to uppercase
 * and all other letters to lowercase, e.g.:
 *
 * goog.string.capitalize('one')     => 'One'
 * goog.string.capitalize('ONE')     => 'One'
 * goog.string.capitalize('one two') => 'One two'
 *
 * Note that this function does not trim initial whitespace.
 *
 * @param {string} str String value to capitalize.
 * @return {string} String value with first letter in uppercase.
 */
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() +
      String(str.substr(1)).toLowerCase();
};


/**
 * Parse a string in decimal or hexidecimal ('0xFFFF') form.
 *
 * To parse a particular radix, please use parseInt(string, radix) directly. See
 * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt
 *
 * This is a wrapper for the built-in parseInt function that will only parse
 * numbers as base 10 or base 16.  Some JS implementations assume strings
 * starting with "0" are intended to be octal. ES3 allowed but discouraged
 * this behavior. ES5 forbids it.  This function emulates the ES5 behavior.
 *
 * For more information, see Mozilla JS Reference: http://goo.gl/8RiFj
 *
 * @param {string|number|null|undefined} value The value to be parsed.
 * @return {number} The number, parsed. If the string failed to parse, this
 *     will be NaN.
 */
goog.string.parseInt = function(value) {
  // Force finite numbers to strings.
  if (isFinite(value)) {
    value = String(value);
  }

  if (goog.isString(value)) {
    // If the string starts with '0x' or '-0x', parse as hex.
    return /^\s*-?0x/i.test(value) ?
        parseInt(value, 16) : parseInt(value, 10);
  }

  return NaN;
};


/**
 * Splits a string on a separator a limited number of times.
 *
 * This implementation is more similar to Python or Java, where the limit
 * parameter specifies the maximum number of splits rather than truncating
 * the number of results.
 *
 * See http://docs.python.org/2/library/stdtypes.html#str.split
 * See JavaDoc: http://goo.gl/F2AsY
 * See Mozilla reference: http://goo.gl/dZdZs
 *
 * @param {string} str String to split.
 * @param {string} separator The separator.
 * @param {number} limit The limit to the number of splits. The resulting array
 *     will have a maximum length of limit+1.  Negative numbers are the same
 *     as zero.
 * @return {!Array<string>} The string, split.
 */

goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];

  // Only continue doing this while we haven't hit the limit and we have
  // parts left.
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }

  // If there are remaining parts, append them to the end.
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }

  return returnVal;
};


/**
 * Computes the Levenshtein edit distance between two strings.
 * @param {string} a
 * @param {string} b
 * @return {number} The edit distance between the two strings.
 */
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];

  if (a == b) {
    return 0;
  }

  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }

  for (var i = 0; i < b.length + 1; i++) {
    v0[i] = i;
  }

  for (var i = 0; i < a.length; i++) {
    v1[0] = i + 1;

    for (var j = 0; j < b.length; j++) {
      var cost = a[i] != b[j];
      // Cost for the substring is the minimum of adding one character, removing
      // one character, or a swap.
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }

    for (var j = 0; j < v0.length; j++) {
      v0[j] = v1[j];
    }
  }

  return v1[b.length];
};

// Copyright 2008 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities to check the preconditions, postconditions and
 * invariants runtime.
 *
 * Methods in this package should be given special treatment by the compiler
 * for type-inference. For example, <code>goog.asserts.assert(foo)</code>
 * will restrict <code>foo</code> to a truthy value.
 *
 * The compiler has an option to disable asserts. So code like:
 * <code>
 * var x = goog.asserts.assert(foo()); goog.asserts.assert(bar());
 * </code>
 * will be transformed into:
 * <code>
 * var x = foo();
 * </code>
 * The compiler will leave in foo() (because its return value is used),
 * but it will remove bar() because it assumes it does not have side-effects.
 *
 * @author agrieve@google.com (Andrew Grieve)
 */

goog.provide('goog.asserts');
goog.provide('goog.asserts.AssertionError');

goog.require('goog.debug.Error');
goog.require('goog.dom.NodeType');
goog.require('goog.string');


/**
 * @define {boolean} Whether to strip out asserts or to leave them in.
 */
goog.define('goog.asserts.ENABLE_ASSERTS', goog.DEBUG);



/**
 * Error object for failed assertions.
 * @param {string} messagePattern The pattern that was used to form message.
 * @param {!Array<*>} messageArgs The items to substitute into the pattern.
 * @constructor
 * @extends {goog.debug.Error}
 * @final
 */
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  // Remove the messagePattern afterwards to avoid permanently modifying the
  // passed in array.
  messageArgs.shift();

  /**
   * The message pattern used to format the error message. Error handlers can
   * use this to uniquely identify the assertion.
   * @type {string}
   */
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);


/** @override */
goog.asserts.AssertionError.prototype.name = 'AssertionError';


/**
 * The default error handler.
 * @param {!goog.asserts.AssertionError} e The exception to be handled.
 */
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) { throw e; };


/**
 * The handler responsible for throwing or logging assertion errors.
 * @private {function(!goog.asserts.AssertionError)}
 */
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;


/**
 * Throws an exception with the given message and "Assertion failed" prefixed
 * onto it.
 * @param {string} defaultMessage The message to use if givenMessage is empty.
 * @param {Array<*>} defaultArgs The substitution arguments for defaultMessage.
 * @param {string|undefined} givenMessage Message supplied by the caller.
 * @param {Array<*>} givenArgs The substitution arguments for givenMessage.
 * @throws {goog.asserts.AssertionError} When the value is not a number.
 * @private
 */
goog.asserts.doAssertFailure_ =
    function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = 'Assertion failed';
  if (givenMessage) {
    message += ': ' + givenMessage;
    var args = givenArgs;
  } else if (defaultMessage) {
    message += ': ' + defaultMessage;
    args = defaultArgs;
  }
  // The '' + works around an Opera 10 bug in the unit tests. Without it,
  // a stack trace is added to var message above. With this, a stack trace is
  // not added until this line (it causes the extra garbage to be added after
  // the assertion message instead of in the middle of it).
  var e = new goog.asserts.AssertionError('' + message, args || []);
  goog.asserts.errorHandler_(e);
};


/**
 * Sets a custom error handler that can be used to customize the behavior of
 * assertion failures, for example by turning all assertion failures into log
 * messages.
 * @param {function(!goog.asserts.AssertionError)} errorHandler
 */
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};


/**
 * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is
 * true.
 * @template T
 * @param {T} condition The condition to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {T} The value of the condition.
 * @throws {goog.asserts.AssertionError} When the condition evaluates to false.
 */
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_('', null, opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};


/**
 * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case
 * when we want to add a check in the unreachable area like switch-case
 * statement:
 *
 * <pre>
 *  switch(type) {
 *    case FOO: doSomething(); break;
 *    case BAR: doSomethingElse(); break;
 *    default: goog.assert.fail('Unrecognized type: ' + type);
 *      // We have only 2 types - "default:" section is unreachable code.
 *  }
 * </pre>
 *
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @throws {goog.asserts.AssertionError} Failure.
 */
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError(
        'Failure' + (opt_message ? ': ' + opt_message : ''),
        Array.prototype.slice.call(arguments, 1)));
  }
};


/**
 * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {number} The value, guaranteed to be a number when asserts enabled.
 * @throws {goog.asserts.AssertionError} When the value is not a number.
 */
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_('Expected number but got %s: %s.',
        [goog.typeOf(value), value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {number} */ (value);
};


/**
 * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {string} The value, guaranteed to be a string when asserts enabled.
 * @throws {goog.asserts.AssertionError} When the value is not a string.
 */
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_('Expected string but got %s: %s.',
        [goog.typeOf(value), value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {string} */ (value);
};


/**
 * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!Function} The value, guaranteed to be a function when asserts
 *     enabled.
 * @throws {goog.asserts.AssertionError} When the value is not a function.
 */
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_('Expected function but got %s: %s.',
        [goog.typeOf(value), value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {!Function} */ (value);
};


/**
 * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!Object} The value, guaranteed to be a non-null object.
 * @throws {goog.asserts.AssertionError} When the value is not an object.
 */
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_('Expected object but got %s: %s.',
        [goog.typeOf(value), value],
        opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {!Object} */ (value);
};


/**
 * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!Array<?>} The value, guaranteed to be a non-null array.
 * @throws {goog.asserts.AssertionError} When the value is not an array.
 */
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_('Expected array but got %s: %s.',
        [goog.typeOf(value), value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {!Array<?>} */ (value);
};


/**
 * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {boolean} The value, guaranteed to be a boolean when asserts are
 *     enabled.
 * @throws {goog.asserts.AssertionError} When the value is not a boolean.
 */
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_('Expected boolean but got %s: %s.',
        [goog.typeOf(value), value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {boolean} */ (value);
};


/**
 * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!Element} The value, likely to be a DOM Element when asserts are
 *     enabled.
 * @throws {goog.asserts.AssertionError} When the value is not an Element.
 */
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) ||
      value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_('Expected Element but got %s: %s.',
        [goog.typeOf(value), value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {!Element} */ (value);
};


/**
 * Checks if the value is an instance of the user-defined type if
 * goog.asserts.ENABLE_ASSERTS is true.
 *
 * The compiler may tighten the type returned by this function.
 *
 * @param {*} value The value to check.
 * @param {function(new: T, ...)} type A user-defined constructor.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @throws {goog.asserts.AssertionError} When the value is not an instance of
 *     type.
 * @return {T}
 * @template T
 */
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_('Expected instanceof %s but got %s.',
        [goog.asserts.getType_(type), goog.asserts.getType_(value)],
        opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};


/**
 * Checks that no enumerable keys are present in Object.prototype. Such keys
 * would break most code that use {@code for (var ... in ...)} loops.
 */
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + ' should not be enumerable in Object.prototype.');
  }
};


/**
 * Returns the type of a value. If a constructor is passed, and a suitable
 * string cannot be found, 'unknown type name' will be returned.
 * @param {*} value A constructor, object, or primitive.
 * @return {string} The best display name for the value, or 'unknown type name'.
 * @private
 */
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || 'unknown type name';
  } else if (value instanceof Object) {
    return value.constructor.displayName || value.constructor.name ||
        Object.prototype.toString.call(value);
  } else {
    return value === null ? 'null' : typeof value;
  }
};

// Copyright 2010 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A global registry for entry points into a program,
 * so that they can be instrumented. Each module should register their
 * entry points with this registry. Designed to be compiled out
 * if no instrumentation is requested.
 *
 * Entry points may be registered before or after a call to
 * goog.debug.entryPointRegistry.monitorAll. If an entry point is registered
 * later, the existing monitor will instrument the new entry point.
 *
 * @author nicksantos@google.com (Nick Santos)
 */

goog.provide('goog.debug.EntryPointMonitor');
goog.provide('goog.debug.entryPointRegistry');

goog.require('goog.asserts');



/**
 * @interface
 */
goog.debug.EntryPointMonitor = function() {};


/**
 * Instruments a function.
 *
 * @param {!Function} fn A function to instrument.
 * @return {!Function} The instrumented function.
 */
goog.debug.EntryPointMonitor.prototype.wrap;


/**
 * Try to remove an instrumentation wrapper created by this monitor.
 * If the function passed to unwrap is not a wrapper created by this
 * monitor, then we will do nothing.
 *
 * Notice that some wrappers may not be unwrappable. For example, if other
 * monitors have applied their own wrappers, then it will be impossible to
 * unwrap them because their wrappers will have captured our wrapper.
 *
 * So it is important that entry points are unwrapped in the reverse
 * order that they were wrapped.
 *
 * @param {!Function} fn A function to unwrap.
 * @return {!Function} The unwrapped function, or {@code fn} if it was not
 *     a wrapped function created by this monitor.
 */
goog.debug.EntryPointMonitor.prototype.unwrap;


/**
 * An array of entry point callbacks.
 * @type {!Array<function(!Function)>}
 * @private
 */
goog.debug.entryPointRegistry.refList_ = [];


/**
 * Monitors that should wrap all the entry points.
 * @type {!Array<!goog.debug.EntryPointMonitor>}
 * @private
 */
goog.debug.entryPointRegistry.monitors_ = [];


/**
 * Whether goog.debug.entryPointRegistry.monitorAll has ever been called.
 * Checking this allows the compiler to optimize out the registrations.
 * @type {boolean}
 * @private
 */
goog.debug.entryPointRegistry.monitorsMayExist_ = false;


/**
 * Register an entry point with this module.
 *
 * The entry point will be instrumented when a monitor is passed to
 * goog.debug.entryPointRegistry.monitorAll. If this has already occurred, the
 * entry point is instrumented immediately.
 *
 * @param {function(!Function)} callback A callback function which is called
 *     with a transforming function to instrument the entry point. The callback
 *     is responsible for wrapping the relevant entry point with the
 *     transforming function.
 */
goog.debug.entryPointRegistry.register = function(callback) {
  // Don't use push(), so that this can be compiled out.
  goog.debug.entryPointRegistry.refList_[
      goog.debug.entryPointRegistry.refList_.length] = callback;
  // If no one calls monitorAll, this can be compiled out.
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0; i < monitors.length; i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};


/**
 * Configures a monitor to wrap all entry points.
 *
 * Entry points that have already been registered are immediately wrapped by
 * the monitor. When an entry point is registered in the future, it will also
 * be wrapped by the monitor when it is registered.
 *
 * @param {!goog.debug.EntryPointMonitor} monitor An entry point monitor.
 */
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0; i < goog.debug.entryPointRegistry.refList_.length; i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};


/**
 * Try to unmonitor all the entry points that have already been registered. If
 * an entry point is registered in the future, it will not be wrapped by the
 * monitor when it is registered. Note that this may fail if the entry points
 * have additional wrapping.
 *
 * @param {!goog.debug.EntryPointMonitor} monitor The last monitor to wrap
 *     the entry points.
 * @throws {Error} If the monitor is not the most recently configured monitor.
 */
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1],
      'Only the most recent monitor can be unwrapped.');
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0; i < goog.debug.entryPointRegistry.refList_.length; i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities for manipulating arrays.
 *
 * @author arv@google.com (Erik Arvidsson)
 */


goog.provide('goog.array');
goog.provide('goog.array.ArrayLike');

goog.require('goog.asserts');


/**
 * @define {boolean} NATIVE_ARRAY_PROTOTYPES indicates whether the code should
 * rely on Array.prototype functions, if available.
 *
 * The Array.prototype functions can be defined by external libraries like
 * Prototype and setting this flag to false forces closure to use its own
 * goog.array implementation.
 *
 * If your javascript can be loaded by a third party site and you are wary about
 * relying on the prototype functions, specify
 * "--define goog.NATIVE_ARRAY_PROTOTYPES=false" to the JSCompiler.
 *
 * Setting goog.TRUSTED_SITE to false will automatically set
 * NATIVE_ARRAY_PROTOTYPES to false.
 */
goog.define('goog.NATIVE_ARRAY_PROTOTYPES', goog.TRUSTED_SITE);


/**
 * @define {boolean} If true, JSCompiler will use the native implementation of
 * array functions where appropriate (e.g., {@code Array#filter}) and remove the
 * unused pure JS implementation.
 */
goog.define('goog.array.ASSUME_NATIVE_FUNCTIONS', false);


/**
 * @typedef {Array|NodeList|Arguments|{length: number}}
 */
goog.array.ArrayLike;


/**
 * Returns the last element in an array without removing it.
 * Same as goog.array.last.
 * @param {Array<T>|goog.array.ArrayLike} array The array.
 * @return {T} Last item in array.
 * @template T
 */
goog.array.peek = function(array) {
  return array[array.length - 1];
};


/**
 * Returns the last element in an array without removing it.
 * Same as goog.array.peek.
 * @param {Array<T>|goog.array.ArrayLike} array The array.
 * @return {T} Last item in array.
 * @template T
 */
goog.array.last = goog.array.peek;


/**
 * Reference to the original {@code Array.prototype}.
 * @private
 */
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;


// NOTE(arv): Since most of the array functions are generic it allows you to
// pass an array-like object. Strings have a length and are considered array-
// like. However, the 'in' operator does not work on strings so we cannot just
// use the array path even if the browser supports indexing into strings. We
// therefore end up splitting the string.


/**
 * Returns the index of the first element of an array with a specified value, or
 * -1 if the element is not present in the array.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-indexof}
 *
 * @param {Array<T>|goog.array.ArrayLike} arr The array to be searched.
 * @param {T} obj The object for which we are searching.
 * @param {number=} opt_fromIndex The index at which to start the search. If
 *     omitted the search starts at index 0.
 * @return {number} The index of the first matching array element.
 * @template T
 */
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES &&
                     (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                      goog.array.ARRAY_PROTOTYPE_.indexOf) ?
    function(arr, obj, opt_fromIndex) {
      goog.asserts.assert(arr.length != null);

      return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
    } :
    function(arr, obj, opt_fromIndex) {
      var fromIndex = opt_fromIndex == null ?
          0 : (opt_fromIndex < 0 ?
               Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex);

      if (goog.isString(arr)) {
        // Array.prototype.indexOf uses === so only strings should be found.
        if (!goog.isString(obj) || obj.length != 1) {
          return -1;
        }
        return arr.indexOf(obj, fromIndex);
      }

      for (var i = fromIndex; i < arr.length; i++) {
        if (i in arr && arr[i] === obj)
          return i;
      }
      return -1;
    };


/**
 * Returns the index of the last element of an array with a specified value, or
 * -1 if the element is not present in the array.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-lastindexof}
 *
 * @param {!Array<T>|!goog.array.ArrayLike} arr The array to be searched.
 * @param {T} obj The object for which we are searching.
 * @param {?number=} opt_fromIndex The index at which to start the search. If
 *     omitted the search starts at the end of the array.
 * @return {number} The index of the last matching array element.
 * @template T
 */
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES &&
                         (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                          goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ?
    function(arr, obj, opt_fromIndex) {
      goog.asserts.assert(arr.length != null);

      // Firefox treats undefined and null as 0 in the fromIndex argument which
      // leads it to always return -1
      var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
      return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
    } :
    function(arr, obj, opt_fromIndex) {
      var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;

      if (fromIndex < 0) {
        fromIndex = Math.max(0, arr.length + fromIndex);
      }

      if (goog.isString(arr)) {
        // Array.prototype.lastIndexOf uses === so only strings should be found.
        if (!goog.isString(obj) || obj.length != 1) {
          return -1;
        }
        return arr.lastIndexOf(obj, fromIndex);
      }

      for (var i = fromIndex; i >= 0; i--) {
        if (i in arr && arr[i] === obj)
          return i;
      }
      return -1;
    };


/**
 * Calls a function for each element in an array. Skips holes in the array.
 * See {@link http://tinyurl.com/developer-mozilla-org-array-foreach}
 *
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array like object over
 *     which to iterate.
 * @param {?function(this: S, T, number, ?): ?} f The function to call for every
 *     element. This function takes 3 arguments (the element, the index and the
 *     array). The return value is ignored.
 * @param {S=} opt_obj The object to be used as the value of 'this' within f.
 * @template T,S
 */
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES &&
                     (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                      goog.array.ARRAY_PROTOTYPE_.forEach) ?
    function(arr, f, opt_obj) {
      goog.asserts.assert(arr.length != null);

      goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      var l = arr.length;  // must be fixed during loop... see docs
      var arr2 = goog.isString(arr) ? arr.split('') : arr;
      for (var i = 0; i < l; i++) {
        if (i in arr2) {
          f.call(opt_obj, arr2[i], i, arr);
        }
      }
    };


/**
 * Calls a function for each element in an array, starting from the last
 * element rather than the first.
 *
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this: S, T, number, ?): ?} f The function to call for every
 *     element. This function
 *     takes 3 arguments (the element, the index and the array). The return
 *     value is ignored.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within f.
 * @template T,S
 */
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;  // must be fixed during loop... see docs
  var arr2 = goog.isString(arr) ? arr.split('') : arr;
  for (var i = l - 1; i >= 0; --i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};


/**
 * Calls a function for each element in an array, and if the function returns
 * true adds the element to a new array.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-filter}
 *
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?):boolean} f The function to call for
 *     every element. This function
 *     takes 3 arguments (the element, the index and the array) and must
 *     return a Boolean. If the return value is true the element is added to the
 *     result array. If it is false the element is not included.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within f.
 * @return {!Array<T>} a new array in which only elements that passed the test
 *     are present.
 * @template T,S
 */
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES &&
                    (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                     goog.array.ARRAY_PROTOTYPE_.filter) ?
    function(arr, f, opt_obj) {
      goog.asserts.assert(arr.length != null);

      return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      var l = arr.length;  // must be fixed during loop... see docs
      var res = [];
      var resLength = 0;
      var arr2 = goog.isString(arr) ? arr.split('') : arr;
      for (var i = 0; i < l; i++) {
        if (i in arr2) {
          var val = arr2[i];  // in case f mutates arr2
          if (f.call(opt_obj, val, i, arr)) {
            res[resLength++] = val;
          }
        }
      }
      return res;
    };


/**
 * Calls a function for each element in an array and inserts the result into a
 * new array.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-map}
 *
 * @param {Array<VALUE>|goog.array.ArrayLike} arr Array or array like object
 *     over which to iterate.
 * @param {function(this:THIS, VALUE, number, ?): RESULT} f The function to call
 *     for every element. This function takes 3 arguments (the element,
 *     the index and the array) and should return something. The result will be
 *     inserted into a new array.
 * @param {THIS=} opt_obj The object to be used as the value of 'this' within f.
 * @return {!Array<RESULT>} a new array with the results from f.
 * @template THIS, VALUE, RESULT
 */
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES &&
                 (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                  goog.array.ARRAY_PROTOTYPE_.map) ?
    function(arr, f, opt_obj) {
      goog.asserts.assert(arr.length != null);

      return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      var l = arr.length;  // must be fixed during loop... see docs
      var res = new Array(l);
      var arr2 = goog.isString(arr) ? arr.split('') : arr;
      for (var i = 0; i < l; i++) {
        if (i in arr2) {
          res[i] = f.call(opt_obj, arr2[i], i, arr);
        }
      }
      return res;
    };


/**
 * Passes every element of an array into a function and accumulates the result.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-reduce}
 *
 * For example:
 * var a = [1, 2, 3, 4];
 * goog.array.reduce(a, function(r, v, i, arr) {return r + v;}, 0);
 * returns 10
 *
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {function(this:S, R, T, number, ?) : R} f The function to call for
 *     every element. This function
 *     takes 4 arguments (the function's previous result or the initial value,
 *     the value of the current array element, the current array index, and the
 *     array itself)
 *     function(previousValue, currentValue, index, array).
 * @param {?} val The initial value to pass into the function on the first call.
 * @param {S=} opt_obj  The object to be used as the value of 'this'
 *     within f.
 * @return {R} Result of evaluating f repeatedly across the values of the array.
 * @template T,S,R
 */
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES &&
                    (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                     goog.array.ARRAY_PROTOTYPE_.reduce) ?
    function(arr, f, val, opt_obj) {
      goog.asserts.assert(arr.length != null);
      if (opt_obj) {
        f = goog.bind(f, opt_obj);
      }
      return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
    } :
    function(arr, f, val, opt_obj) {
      var rval = val;
      goog.array.forEach(arr, function(val, index) {
        rval = f.call(opt_obj, rval, val, index, arr);
      });
      return rval;
    };


/**
 * Passes every element of an array into a function and accumulates the result,
 * starting from the last element and working towards the first.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-reduceright}
 *
 * For example:
 * var a = ['a', 'b', 'c'];
 * goog.array.reduceRight(a, function(r, v, i, arr) {return r + v;}, '');
 * returns 'cba'
 *
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, R, T, number, ?) : R} f The function to call for
 *     every element. This function
 *     takes 4 arguments (the function's previous result or the initial value,
 *     the value of the current array element, the current array index, and the
 *     array itself)
 *     function(previousValue, currentValue, index, array).
 * @param {?} val The initial value to pass into the function on the first call.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within f.
 * @return {R} Object returned as a result of evaluating f repeatedly across the
 *     values of the array.
 * @template T,S,R
 */
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES &&
                         (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                          goog.array.ARRAY_PROTOTYPE_.reduceRight) ?
    function(arr, f, val, opt_obj) {
      goog.asserts.assert(arr.length != null);
      if (opt_obj) {
        f = goog.bind(f, opt_obj);
      }
      return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
    } :
    function(arr, f, val, opt_obj) {
      var rval = val;
      goog.array.forEachRight(arr, function(val, index) {
        rval = f.call(opt_obj, rval, val, index, arr);
      });
      return rval;
    };


/**
 * Calls f for each element of an array. If any call returns true, some()
 * returns true (without checking the remaining elements). If all calls
 * return false, some() returns false.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-some}
 *
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call for
 *     for every element. This function takes 3 arguments (the element, the
 *     index and the array) and should return a boolean.
 * @param {S=} opt_obj  The object to be used as the value of 'this'
 *     within f.
 * @return {boolean} true if any element passes the test.
 * @template T,S
 */
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES &&
                  (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                   goog.array.ARRAY_PROTOTYPE_.some) ?
    function(arr, f, opt_obj) {
      goog.asserts.assert(arr.length != null);

      return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      var l = arr.length;  // must be fixed during loop... see docs
      var arr2 = goog.isString(arr) ? arr.split('') : arr;
      for (var i = 0; i < l; i++) {
        if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
          return true;
        }
      }
      return false;
    };


/**
 * Call f for each element of an array. If all calls return true, every()
 * returns true. If any call returns false, every() returns false and
 * does not continue to check the remaining elements.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-every}
 *
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call for
 *     for every element. This function takes 3 arguments (the element, the
 *     index and the array) and should return a boolean.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within f.
 * @return {boolean} false if any element fails the test.
 * @template T,S
 */
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES &&
                   (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                    goog.array.ARRAY_PROTOTYPE_.every) ?
    function(arr, f, opt_obj) {
      goog.asserts.assert(arr.length != null);

      return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      var l = arr.length;  // must be fixed during loop... see docs
      var arr2 = goog.isString(arr) ? arr.split('') : arr;
      for (var i = 0; i < l; i++) {
        if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
          return false;
        }
      }
      return true;
    };


/**
 * Counts the array elements that fulfill the predicate, i.e. for which the
 * callback function returns true. Skips holes in the array.
 *
 * @param {!(Array<T>|goog.array.ArrayLike)} arr Array or array like object
 *     over which to iterate.
 * @param {function(this: S, T, number, ?): boolean} f The function to call for
 *     every element. Takes 3 arguments (the element, the index and the array).
 * @param {S=} opt_obj The object to be used as the value of 'this' within f.
 * @return {number} The number of the matching elements.
 * @template T,S
 */
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};


/**
 * Search an array for the first element that satisfies a given condition and
 * return that element.
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function takes 3 arguments (the element, the
 *     index and the array) and should return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {T|null} The first array element that passes the test, or null if no
 *     element is found.
 * @template T,S
 */
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};


/**
 * Search an array for the first element that satisfies a given condition and
 * return its index.
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call for
 *     every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {number} The index of the first array element that passes the test,
 *     or -1 if no element is found.
 * @template T,S
 */
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;  // must be fixed during loop... see docs
  var arr2 = goog.isString(arr) ? arr.split('') : arr;
  for (var i = 0; i < l; i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};


/**
 * Search an array (in reverse order) for the last element that satisfies a
 * given condition and return that element.
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {T|null} The last array element that passes the test, or null if no
 *     element is found.
 * @template T,S
 */
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};


/**
 * Search an array (in reverse order) for the last element that satisfies a
 * given condition and return its index.
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {number} The index of the last array element that passes the test,
 *     or -1 if no element is found.
 * @template T,S
 */
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;  // must be fixed during loop... see docs
  var arr2 = goog.isString(arr) ? arr.split('') : arr;
  for (var i = l - 1; i >= 0; i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};


/**
 * Whether the array contains the given object.
 * @param {goog.array.ArrayLike} arr The array to test for the presence of the
 *     element.
 * @param {*} obj The object for which to test.
 * @return {boolean} true if obj is present.
 */
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};


/**
 * Whether the array is empty.
 * @param {goog.array.ArrayLike} arr The array to test.
 * @return {boolean} true if empty.
 */
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};


/**
 * Clears the array.
 * @param {goog.array.ArrayLike} arr Array or array like object to clear.
 */
goog.array.clear = function(arr) {
  // For non real arrays we don't have the magic length so we delete the
  // indices.
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1; i >= 0; i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};


/**
 * Pushes an item into an array, if it's not already in the array.
 * @param {Array<T>} arr Array into which to insert the item.
 * @param {T} obj Value to add.
 * @template T
 */
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};


/**
 * Inserts an object at the given index of the array.
 * @param {goog.array.ArrayLike} arr The array to modify.
 * @param {*} obj The object to insert.
 * @param {number=} opt_i The index at which to insert the object. If omitted,
 *      treated as 0. A negative index is counted from the end of the array.
 */
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};


/**
 * Inserts at the given index of the array, all elements of another array.
 * @param {goog.array.ArrayLike} arr The array to modify.
 * @param {goog.array.ArrayLike} elementsToAdd The array of elements to add.
 * @param {number=} opt_i The index at which to insert the object. If omitted,
 *      treated as 0. A negative index is counted from the end of the array.
 */
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};


/**
 * Inserts an object into an array before a specified object.
 * @param {Array<T>} arr The array to modify.
 * @param {T} obj The object to insert.
 * @param {T=} opt_obj2 The object before which obj should be inserted. If obj2
 *     is omitted or not found, obj is inserted at the end of the array.
 * @template T
 */
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};


/**
 * Removes the first occurrence of a particular value from an array.
 * @param {Array<T>|goog.array.ArrayLike} arr Array from which to remove
 *     value.
 * @param {T} obj Object to remove.
 * @return {boolean} True if an element was removed.
 * @template T
 */
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if ((rv = i >= 0)) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};


/**
 * Removes from an array the element at index i
 * @param {goog.array.ArrayLike} arr Array or array like object from which to
 *     remove value.
 * @param {number} i The index to remove.
 * @return {boolean} True if an element was removed.
 */
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);

  // use generic form of splice
  // splice returns the removed items and if successful the length of that
  // will be 1
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};


/**
 * Removes the first value that satisfies the given condition.
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {boolean} True if an element was removed.
 * @template T,S
 */
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};


/**
 * Removes all values that satisfy the given condition.
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {number} The number of items removed
 * @template T,S
 */
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};


/**
 * Returns a new array that is the result of joining the arguments.  If arrays
 * are passed then their items are added, however, if non-arrays are passed they
 * will be added to the return array as is.
 *
 * Note that ArrayLike objects will be added as is, rather than having their
 * items added.
 *
 * goog.array.concat([1, 2], [3, 4]) -> [1, 2, 3, 4]
 * goog.array.concat(0, [1, 2]) -> [0, 1, 2]
 * goog.array.concat([1, 2], null) -> [1, 2, null]
 *
 * There is bug in all current versions of IE (6, 7 and 8) where arrays created
 * in an iframe become corrupted soon (not immediately) after the iframe is
 * destroyed. This is common if loading data via goog.net.IframeIo, for example.
 * This corruption only affects the concat method which will start throwing
 * Catastrophic Errors (#-2147418113).
 *
 * See http://endoflow.com/scratch/corrupted-arrays.html for a test case.
 *
 * Internally goog.array should use this, so that all methods will continue to
 * work on these broken array objects.
 *
 * @param {...*} var_args Items to concatenate.  Arrays will have each item
 *     added, while primitives and objects will be added as is.
 * @return {!Array<?>} The new resultant array.
 */
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(
      goog.array.ARRAY_PROTOTYPE_, arguments);
};


/**
 * Returns a new array that contains the contents of all the arrays passed.
 * @param {...!Array<T>} var_args
 * @return {!Array<T>}
 * @template T
 */
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(
      goog.array.ARRAY_PROTOTYPE_, arguments);
};


/**
 * Converts an object to an array.
 * @param {Array<T>|goog.array.ArrayLike} object  The object to convert to an
 *     array.
 * @return {!Array<T>} The object converted into an array. If object has a
 *     length property, every property indexed with a non-negative number
 *     less than length will be included in the result. If object does not
 *     have a length property, an empty array will be returned.
 * @template T
 */
goog.array.toArray = function(object) {
  var length = object.length;

  // If length is not a number the following it false. This case is kept for
  // backwards compatibility since there are callers that pass objects that are
  // not array like.
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0; i < length; i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};


/**
 * Does a shallow copy of an array.
 * @param {Array<T>|goog.array.ArrayLike} arr  Array or array-like object to
 *     clone.
 * @return {!Array<T>} Clone of the input array.
 * @template T
 */
goog.array.clone = goog.array.toArray;


/**
 * Extends an array with another array, element, or "array like" object.
 * This function operates 'in-place', it does not create a new Array.
 *
 * Example:
 * var a = [];
 * goog.array.extend(a, [0, 1]);
 * a; // [0, 1]
 * goog.array.extend(a, 2);
 * a; // [0, 1, 2]
 *
 * @param {Array<VALUE>} arr1  The array to modify.
 * @param {...(Array<VALUE>|VALUE)} var_args The elements or arrays of elements
 *     to add to arr1.
 * @template VALUE
 */
goog.array.extend = function(arr1, var_args) {
  for (var i = 1; i < arguments.length; i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0; j < len2; j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};


/**
 * Adds or removes elements from an array. This is a generic version of Array
 * splice. This means that it might work on other objects similar to arrays,
 * such as the arguments object.
 *
 * @param {Array<T>|goog.array.ArrayLike} arr The array to modify.
 * @param {number|undefined} index The index at which to start changing the
 *     array. If not defined, treated as 0.
 * @param {number} howMany How many elements to remove (0 means no removal. A
 *     value below 0 is treated as zero and so is any other non number. Numbers
 *     are floored).
 * @param {...T} var_args Optional, additional elements to insert into the
 *     array.
 * @return {!Array<T>} the removed elements.
 * @template T
 */
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);

  return goog.array.ARRAY_PROTOTYPE_.splice.apply(
      arr, goog.array.slice(arguments, 1));
};


/**
 * Returns a new array from a segment of an array. This is a generic version of
 * Array slice. This means that it might work on other objects similar to
 * arrays, such as the arguments object.
 *
 * @param {Array<T>|goog.array.ArrayLike} arr The array from
 * which to copy a segment.
 * @param {number} start The index of the first element to copy.
 * @param {number=} opt_end The index after the last element to copy.
 * @return {!Array<T>} A new array containing the specified segment of the
 *     original array.
 * @template T
 */
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);

  // passing 1 arg to slice is not the same as passing 2 where the second is
  // null or undefined (in that case the second argument is treated as 0).
  // we could use slice on the arguments object and then use apply instead of
  // testing the length
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};


/**
 * Removes all duplicates from an array (retaining only the first
 * occurrence of each array element).  This function modifies the
 * array in place and doesn't change the order of the non-duplicate items.
 *
 * For objects, duplicates are identified as having the same unique ID as
 * defined by {@link goog.getUid}.
 *
 * Alternatively you can specify a custom hash function that returns a unique
 * value for each item in the array it should consider unique.
 *
 * Runtime: N,
 * Worstcase space: 2N (no dupes)
 *
 * @param {Array<T>|goog.array.ArrayLike} arr The array from which to remove
 *     duplicates.
 * @param {Array=} opt_rv An optional array in which to return the results,
 *     instead of performing the removal inplace.  If specified, the original
 *     array will remain unchanged.
 * @param {function(T):string=} opt_hashFn An optional function to use to
 *     apply to every item in the array. This function should return a unique
 *     value for each item in the array it should consider unique.
 * @template T
 */
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    // Prefix each type with a single character representing the type to
    // prevent conflicting keys (e.g. true and 'true').
    return goog.isObject(item) ? 'o' + goog.getUid(item) :
        (typeof item).charAt(0) + item;
  };
  var hashFn = opt_hashFn || defaultHashFn;

  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};


/**
 * Searches the specified array for the specified target using the binary
 * search algorithm.  If no opt_compareFn is specified, elements are compared
 * using <code>goog.array.defaultCompare</code>, which compares the elements
 * using the built in < and > operators.  This will produce the expected
 * behavior for homogeneous arrays of String(s) and Number(s). The array
 * specified <b>must</b> be sorted in ascending order (as defined by the
 * comparison function).  If the array is not sorted, results are undefined.
 * If the array contains multiple instances of the specified target value, any
 * of these instances may be found.
 *
 * Runtime: O(log n)
 *
 * @param {Array<VALUE>|goog.array.ArrayLike} arr The array to be searched.
 * @param {TARGET} target The sought value.
 * @param {function(TARGET, VALUE): number=} opt_compareFn Optional comparison
 *     function by which the array is ordered. Should take 2 arguments to
 *     compare, and return a negative number, zero, or a positive number
 *     depending on whether the first argument is less than, equal to, or
 *     greater than the second.
 * @return {number} Lowest index of the target value if found, otherwise
 *     (-(insertion point) - 1). The insertion point is where the value should
 *     be inserted into arr to preserve the sorted property.  Return value >= 0
 *     iff target is found.
 * @template TARGET, VALUE
 */
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr,
      opt_compareFn || goog.array.defaultCompare, false /* isEvaluator */,
      target);
};


/**
 * Selects an index in the specified array using the binary search algorithm.
 * The evaluator receives an element and determines whether the desired index
 * is before, at, or after it.  The evaluator must be consistent (formally,
 * goog.array.map(goog.array.map(arr, evaluator, opt_obj), goog.math.sign)
 * must be monotonically non-increasing).
 *
 * Runtime: O(log n)
 *
 * @param {Array<VALUE>|goog.array.ArrayLike} arr The array to be searched.
 * @param {function(this:THIS, VALUE, number, ?): number} evaluator
 *     Evaluator function that receives 3 arguments (the element, the index and
 *     the array). Should return a negative number, zero, or a positive number
 *     depending on whether the desired index is before, at, or after the
 *     element passed to it.
 * @param {THIS=} opt_obj The object to be used as the value of 'this'
 *     within evaluator.
 * @return {number} Index of the leftmost element matched by the evaluator, if
 *     such exists; otherwise (-(insertion point) - 1). The insertion point is
 *     the index of the first element for which the evaluator returns negative,
 *     or arr.length if no such element exists. The return value is non-negative
 *     iff a match is found.
 * @template THIS, VALUE
 */
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true /* isEvaluator */,
      undefined /* opt_target */, opt_obj);
};


/**
 * Implementation of a binary search algorithm which knows how to use both
 * comparison functions and evaluators. If an evaluator is provided, will call
 * the evaluator with the given optional data object, conforming to the
 * interface defined in binarySelect. Otherwise, if a comparison function is
 * provided, will call the comparison function against the given data object.
 *
 * This implementation purposefully does not use goog.bind or goog.partial for
 * performance reasons.
 *
 * Runtime: O(log n)
 *
 * @param {Array<VALUE>|goog.array.ArrayLike} arr The array to be searched.
 * @param {function(TARGET, VALUE): number|
 *         function(this:THIS, VALUE, number, ?): number} compareFn Either an
 *     evaluator or a comparison function, as defined by binarySearch
 *     and binarySelect above.
 * @param {boolean} isEvaluator Whether the function is an evaluator or a
 *     comparison function.
 * @param {TARGET=} opt_target If the function is a comparison function, then
 *     this is the target to binary search for.
 * @param {THIS=} opt_selfObj If the function is an evaluator, this is an
  *    optional this object for the evaluator.
 * @return {number} Lowest index of the target value if found, otherwise
 *     (-(insertion point) - 1). The insertion point is where the value should
 *     be inserted into arr to preserve the sorted property.  Return value >= 0
 *     iff target is found.
 * @template THIS, VALUE, TARGET
 * @private
 */
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target,
    opt_selfObj) {
  var left = 0;  // inclusive
  var right = arr.length;  // exclusive
  var found;
  while (left < right) {
    var middle = (left + right) >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      // We are looking for the lowest index so we can't return immediately.
      found = !compareResult;
    }
  }
  // left is the index if found, or the insertion point otherwise.
  // ~left is a shorthand for -left - 1.
  return found ? left : ~left;
};


/**
 * Sorts the specified array into ascending order.  If no opt_compareFn is
 * specified, elements are compared using
 * <code>goog.array.defaultCompare</code>, which compares the elements using
 * the built in < and > operators.  This will produce the expected behavior
 * for homogeneous arrays of String(s) and Number(s), unlike the native sort,
 * but will give unpredictable results for heterogenous lists of strings and
 * numbers with different numbers of digits.
 *
 * This sort is not guaranteed to be stable.
 *
 * Runtime: Same as <code>Array.prototype.sort</code>
 *
 * @param {Array<T>} arr The array to be sorted.
 * @param {?function(T,T):number=} opt_compareFn Optional comparison
 *     function by which the
 *     array is to be ordered. Should take 2 arguments to compare, and return a
 *     negative number, zero, or a positive number depending on whether the
 *     first argument is less than, equal to, or greater than the second.
 * @template T
 */
goog.array.sort = function(arr, opt_compareFn) {
  // TODO(arv): Update type annotation since null is not accepted.
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};


/**
 * Sorts the specified array into ascending order in a stable way.  If no
 * opt_compareFn is specified, elements are compared using
 * <code>goog.array.defaultCompare</code>, which compares the elements using
 * the built in < and > operators.  This will produce the expected behavior
 * for homogeneous arrays of String(s) and Number(s).
 *
 * Runtime: Same as <code>Array.prototype.sort</code>, plus an additional
 * O(n) overhead of copying the array twice.
 *
 * @param {Array<T>} arr The array to be sorted.
 * @param {?function(T, T): number=} opt_compareFn Optional comparison function
 *     by which the array is to be ordered. Should take 2 arguments to compare,
 *     and return a negative number, zero, or a positive number depending on
 *     whether the first argument is less than, equal to, or greater than the
 *     second.
 * @template T
 */
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0; i < arr.length; i++) {
    arr[i] = {index: i, value: arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  };
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0; i < arr.length; i++) {
    arr[i] = arr[i].value;
  }
};


/**
 * Sort the specified array into ascending order based on item keys
 * returned by the specified key function.
 * If no opt_compareFn is specified, the keys are compared in ascending order
 * using <code>goog.array.defaultCompare</code>.
 *
 * Runtime: O(S(f(n)), where S is runtime of <code>goog.array.sort</code>
 * and f(n) is runtime of the key function.
 *
 * @param {Array<T>} arr The array to be sorted.
 * @param {function(T): K} keyFn Function taking array element and returning
 *     a key used for sorting this element.
 * @param {?function(K, K): number=} opt_compareFn Optional comparison function
 *     by which the keys are to be ordered. Should take 2 arguments to compare,
 *     and return a negative number, zero, or a positive number depending on
 *     whether the first argument is less than, equal to, or greater than the
 *     second.
 * @template T,K
 */
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};


/**
 * Sorts an array of objects by the specified object key and compare
 * function. If no compare function is provided, the key values are
 * compared in ascending order using <code>goog.array.defaultCompare</code>.
 * This won't work for keys that get renamed by the compiler. So use
 * {'foo': 1, 'bar': 2} rather than {foo: 1, bar: 2}.
 * @param {Array<Object>} arr An array of objects to sort.
 * @param {string} key The object key to sort by.
 * @param {Function=} opt_compareFn The function to use to compare key
 *     values.
 */
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr,
      function(obj) { return obj[key]; },
      opt_compareFn);
};


/**
 * Tells if the array is sorted.
 * @param {!Array<T>} arr The array.
 * @param {?function(T,T):number=} opt_compareFn Function to compare the
 *     array elements.
 *     Should take 2 arguments to compare, and return a negative number, zero,
 *     or a positive number depending on whether the first argument is less
 *     than, equal to, or greater than the second.
 * @param {boolean=} opt_strict If true no equal elements are allowed.
 * @return {boolean} Whether the array is sorted.
 * @template T
 */
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1; i < arr.length; i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};


/**
 * Compares two arrays for equality. Two arrays are considered equal if they
 * have the same length and their corresponding elements are equal according to
 * the comparison function.
 *
 * @param {goog.array.ArrayLike} arr1 The first array to compare.
 * @param {goog.array.ArrayLike} arr2 The second array to compare.
 * @param {Function=} opt_equalsFn Optional comparison function.
 *     Should take 2 arguments to compare, and return true if the arguments
 *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which
 *     compares the elements using the built-in '===' operator.
 * @return {boolean} Whether the two arrays are equal.
 */
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) ||
      arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0; i < l; i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};


/**
 * 3-way array compare function.
 * @param {!Array<VALUE>|!goog.array.ArrayLike} arr1 The first array to
 *     compare.
 * @param {!Array<VALUE>|!goog.array.ArrayLike} arr2 The second array to
 *     compare.
 * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison
 *     function by which the array is to be ordered. Should take 2 arguments to
 *     compare, and return a negative number, zero, or a positive number
 *     depending on whether the first argument is less than, equal to, or
 *     greater than the second.
 * @return {number} Negative number, zero, or a positive number depending on
 *     whether the first argument is less than, equal to, or greater than the
 *     second.
 * @template VALUE
 */
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0; i < l; i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};


/**
 * Compares its two arguments for order, using the built in < and >
 * operators.
 * @param {VALUE} a The first object to be compared.
 * @param {VALUE} b The second object to be compared.
 * @return {number} A negative number, zero, or a positive number as the first
 *     argument is less than, equal to, or greater than the second,
 *     respectively.
 * @template VALUE
 */
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};


/**
 * Compares its two arguments for inverse order, using the built in < and >
 * operators.
 * @param {VALUE} a The first object to be compared.
 * @param {VALUE} b The second object to be compared.
 * @return {number} A negative number, zero, or a positive number as the first
 *     argument is greater than, equal to, or less than the second,
 *     respectively.
 * @template VALUE
 */
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};


/**
 * Compares its two arguments for equality, using the built in === operator.
 * @param {*} a The first object to compare.
 * @param {*} b The second object to compare.
 * @return {boolean} True if the two arguments are equal, false otherwise.
 */
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};


/**
 * Inserts a value into a sorted array. The array is not modified if the
 * value is already present.
 * @param {Array<VALUE>|goog.array.ArrayLike} array The array to modify.
 * @param {VALUE} value The object to insert.
 * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison
 *     function by which the array is ordered. Should take 2 arguments to
 *     compare, and return a negative number, zero, or a positive number
 *     depending on whether the first argument is less than, equal to, or
 *     greater than the second.
 * @return {boolean} True if an element was inserted.
 * @template VALUE
 */
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};


/**
 * Removes a value from a sorted array.
 * @param {!Array<VALUE>|!goog.array.ArrayLike} array The array to modify.
 * @param {VALUE} value The object to remove.
 * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison
 *     function by which the array is ordered. Should take 2 arguments to
 *     compare, and return a negative number, zero, or a positive number
 *     depending on whether the first argument is less than, equal to, or
 *     greater than the second.
 * @return {boolean} True if an element was removed.
 * @template VALUE
 */
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return (index >= 0) ? goog.array.removeAt(array, index) : false;
};


/**
 * Splits an array into disjoint buckets according to a splitting function.
 * @param {Array<T>} array The array.
 * @param {function(this:S, T,number,Array<T>):?} sorter Function to call for
 *     every element.  This takes 3 arguments (the element, the index and the
 *     array) and must return a valid object key (a string, number, etc), or
 *     undefined, if that object should not be placed in a bucket.
 * @param {S=} opt_obj The object to be used as the value of 'this' within
 *     sorter.
 * @return {!Object} An object, with keys being all of the unique return values
 *     of sorter, and values being arrays containing the items for
 *     which the splitter returned that key.
 * @template T,S
 */
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};

  for (var i = 0; i < array.length; i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      // Push the value to the right bucket, creating it if necessary.
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }

  return buckets;
};


/**
 * Creates a new object built from the provided array and the key-generation
 * function.
 * @param {Array<T>|goog.array.ArrayLike} arr Array or array like object over
 *     which to iterate whose elements will be the values in the new object.
 * @param {?function(this:S, T, number, ?) : string} keyFunc The function to
 *     call for every element. This function takes 3 arguments (the element, the
 *     index and the array) and should return a string that will be used as the
 *     key for the element in the new object. If the function returns the same
 *     key for more than one element, the value for that key is
 *     implementation-defined.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within keyFunc.
 * @return {!Object<T>} The new object.
 * @template T,S
 */
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};


/**
 * Creates a range of numbers in an arithmetic progression.
 *
 * Range takes 1, 2, or 3 arguments:
 * <pre>
 * range(5) is the same as range(0, 5, 1) and produces [0, 1, 2, 3, 4]
 * range(2, 5) is the same as range(2, 5, 1) and produces [2, 3, 4]
 * range(-2, -5, -1) produces [-2, -3, -4]
 * range(-2, -5, 1) produces [], since stepping by 1 wouldn't ever reach -5.
 * </pre>
 *
 * @param {number} startOrEnd The starting value of the range if an end argument
 *     is provided. Otherwise, the start value is 0, and this is the end value.
 * @param {number=} opt_end The optional end value of the range.
 * @param {number=} opt_step The step size between range values. Defaults to 1
 *     if opt_step is undefined or 0.
 * @return {!Array<number>} An array of numbers for the requested range. May be
 *     an empty array if adding the step would not converge toward the end
 *     value.
 */
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }

  if (step * (end - start) < 0) {
    // Sign mismatch: start + step will never reach the end value.
    return [];
  }

  if (step > 0) {
    for (var i = start; i < end; i += step) {
      array.push(i);
    }
  } else {
    for (var i = start; i > end; i += step) {
      array.push(i);
    }
  }
  return array;
};


/**
 * Returns an array consisting of the given value repeated N times.
 *
 * @param {VALUE} value The value to repeat.
 * @param {number} n The repeat count.
 * @return {!Array<VALUE>} An array with the repeated value.
 * @template VALUE
 */
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0; i < n; i++) {
    array[i] = value;
  }
  return array;
};


/**
 * Returns an array consisting of every argument with all arrays
 * expanded in-place recursively.
 *
 * @param {...*} var_args The values to flatten.
 * @return {!Array<?>} An array containing the flattened values.
 */
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;

  var result = [];
  for (var i = 0; i < arguments.length; i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0; c < element.length; c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0; r < recurseResult.length; r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};


/**
 * Rotates an array in-place. After calling this method, the element at
 * index i will be the element previously at index (i - n) %
 * array.length, for all values of i between 0 and array.length - 1,
 * inclusive.
 *
 * For example, suppose list comprises [t, a, n, k, s]. After invoking
 * rotate(array, 1) (or rotate(array, -4)), array will comprise [s, t, a, n, k].
 *
 * @param {!Array<T>} array The array to rotate.
 * @param {number} n The amount to rotate.
 * @return {!Array<T>} The array.
 * @template T
 */
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);

  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else if (n < 0) {
      goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
    }
  }
  return array;
};


/**
 * Moves one item of an array to a new position keeping the order of the rest
 * of the items. Example use case: keeping a list of JavaScript objects
 * synchronized with the corresponding list of DOM elements after one of the
 * elements has been dragged to a new position.
 * @param {!(Array|Arguments|{length:number})} arr The array to modify.
 * @param {number} fromIndex Index of the item to move between 0 and
 *     {@code arr.length - 1}.
 * @param {number} toIndex Target index between 0 and {@code arr.length - 1}.
 */
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  // Remove 1 item at fromIndex.
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  // Insert the removed item at toIndex.
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
  // We don't use goog.array.insertAt and goog.array.removeAt, because they're
  // significantly slower than splice.
};


/**
 * Creates a new array for which the element at position i is an array of the
 * ith element of the provided arrays.  The returned array will only be as long
 * as the shortest array provided; additional values are ignored.  For example,
 * the result of zipping [1, 2] and [3, 4, 5] is [[1,3], [2, 4]].
 *
 * This is similar to the zip() function in Python.  See {@link
 * http://docs.python.org/library/functions.html#zip}
 *
 * @param {...!goog.array.ArrayLike} var_args Arrays to be combined.
 * @return {!Array<!Array<?>>} A new array of arrays created from
 *     provided arrays.
 */
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  for (var i = 0; true; i++) {
    var value = [];
    for (var j = 0; j < arguments.length; j++) {
      var arr = arguments[j];
      // If i is larger than the array length, this is the shortest array.
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};


/**
 * Shuffles the values in the specified array using the Fisher-Yates in-place
 * shuffle (also known as the Knuth Shuffle). By default, calls Math.random()
 * and so resets the state of that random number generator. Similarly, may reset
 * the state of the any other specified random number generator.
 *
 * Runtime: O(n)
 *
 * @param {!Array<?>} arr The array to be shuffled.
 * @param {function():number=} opt_randFn Optional random function to use for
 *     shuffling.
 *     Takes no arguments, and returns a random number on the interval [0, 1).
 *     Defaults to Math.random() using JavaScript's built-in Math library.
 */
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;

  for (var i = arr.length - 1; i > 0; i--) {
    // Choose a random array index in [0, i] (inclusive with i).
    var j = Math.floor(randFn() * (i + 1));

    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};


/**
 * Returns a new array of elements from arr, based on the indexes of elements
 * provided by index_arr. For example, the result of index copying
 * ['a', 'b', 'c'] with index_arr [1,0,0,2] is ['b', 'a', 'a', 'c'].
 *
 * @param {!Array<T>} arr The array to get a indexed copy from.
 * @param {!Array<number>} index_arr An array of indexes to get from arr.
 * @return {!Array<T>} A new array of elements from arr in index_arr order.
 * @template T
 */
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities used by goog.labs.userAgent tools. These functions
 * should not be used outside of goog.labs.userAgent.*.
 *
 *
 * @author nnaze@google.com (Nathan Naze)
 */

goog.provide('goog.labs.userAgent.util');

goog.require('goog.string');


/**
 * Gets the native userAgent string from navigator if it exists.
 * If navigator or navigator.userAgent string is missing, returns an empty
 * string.
 * @return {string}
 * @private
 */
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return '';
};


/**
 * Getter for the native navigator.
 * This is a separate function so it can be stubbed out in testing.
 * @return {Navigator}
 * @private
 */
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};


/**
 * A possible override for applications which wish to not check
 * navigator.userAgent but use a specified value for detection instead.
 * @private {string}
 */
goog.labs.userAgent.util.userAgent_ =
    goog.labs.userAgent.util.getNativeUserAgentString_();


/**
 * Applications may override browser detection on the built in
 * navigator.userAgent object by setting this string. Set to null to use the
 * browser object instead.
 * @param {?string=} opt_userAgent The User-Agent override.
 */
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent ||
      goog.labs.userAgent.util.getNativeUserAgentString_();
};


/**
 * @return {string} The user agent string.
 */
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};


/**
 * @param {string} str
 * @return {boolean} Whether the user agent contains the given string, ignoring
 *     case.
 */
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};


/**
 * @param {string} str
 * @return {boolean} Whether the user agent contains the given string.
 */
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};


/**
 * Parses the user agent into tuples for each section.
 * @param {string} userAgent
 * @return {!Array<!Array<string>>} Tuples of key, version, and the contents
 *     of the parenthetical.
 */
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  // Matches each section of a user agent string.
  // Example UA:
  // Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us)
  // AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405
  // This has three version tuples: Mozilla, AppleWebKit, and Mobile.

  var versionRegExp = new RegExp(
      // Key. Note that a key may have a space.
      // (i.e. 'Mobile Safari' in 'Mobile Safari/5.0')
      '(\\w[\\w ]+)' +

      '/' +                // slash
      '([^\\s]+)' +        // version (i.e. '5.0b')
      '\\s*' +             // whitespace
      '(?:\\((.*?)\\))?',  // parenthetical info. parentheses not matched.
      'g');

  var data = [];
  var match;

  // Iterate and collect the version tuples.  Each iteration will be the
  // next regex match.
  while (match = versionRegExp.exec(userAgent)) {
    data.push([
      match[1],  // key
      match[2],  // value
      // || undefined as this is not undefined in IE7 and IE8
      match[3] || undefined  // info
    ]);
  }

  return data;
};


// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities for manipulating objects/maps/hashes.
 * @author arv@google.com (Erik Arvidsson)
 */

goog.provide('goog.object');


/**
 * Calls a function for each element in an object/map/hash.
 *
 * @param {Object<K,V>} obj The object over which to iterate.
 * @param {function(this:T,V,?,Object<K,V>):?} f The function to call
 *     for every element. This function takes 3 arguments (the value, the
 *     key and the object) and the return value is ignored.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @template T,K,V
 */
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};


/**
 * Calls a function for each element in an object/map/hash. If that call returns
 * true, adds the element to a new object.
 *
 * @param {Object<K,V>} obj The object over which to iterate.
 * @param {function(this:T,V,?,Object<K,V>):boolean} f The function to call
 *     for every element. This
 *     function takes 3 arguments (the value, the key and the object)
 *     and should return a boolean. If the return value is true the
 *     element is added to the result object. If it is false the
 *     element is not included.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {!Object<K,V>} a new object in which only elements that passed the
 *     test are present.
 * @template T,K,V
 */
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};


/**
 * For every element in an object/map/hash calls a function and inserts the
 * result into a new object.
 *
 * @param {Object<K,V>} obj The object over which to iterate.
 * @param {function(this:T,V,?,Object<K,V>):R} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the value, the key and the object)
 *     and should return something. The result will be inserted
 *     into a new object.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {!Object<K,R>} a new object with the results from f.
 * @template T,K,V,R
 */
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};


/**
 * Calls a function for each element in an object/map/hash. If any
 * call returns true, returns true (without checking the rest). If
 * all calls return false, returns false.
 *
 * @param {Object<K,V>} obj The object to check.
 * @param {function(this:T,V,?,Object<K,V>):boolean} f The function to
 *     call for every element. This function
 *     takes 3 arguments (the value, the key and the object) and should
 *     return a boolean.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {boolean} true if any element passes the test.
 * @template T,K,V
 */
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};


/**
 * Calls a function for each element in an object/map/hash. If
 * all calls return true, returns true. If any call returns false, returns
 * false at this point and does not continue to check the remaining elements.
 *
 * @param {Object<K,V>} obj The object to check.
 * @param {?function(this:T,V,?,Object<K,V>):boolean} f The function to
 *     call for every element. This function
 *     takes 3 arguments (the value, the key and the object) and should
 *     return a boolean.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {boolean} false if any element fails the test.
 * @template T,K,V
 */
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};


/**
 * Returns the number of key-value pairs in the object map.
 *
 * @param {Object} obj The object for which to get the number of key-value
 *     pairs.
 * @return {number} The number of key-value pairs in the object map.
 */
goog.object.getCount = function(obj) {
  // JS1.5 has __count__ but it has been deprecated so it raises a warning...
  // in other words do not use. Also __count__ only includes the fields on the
  // actual object and not in the prototype chain.
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};


/**
 * Returns one key from the object map, if any exists.
 * For map literals the returned key will be the first one in most of the
 * browsers (a know exception is Konqueror).
 *
 * @param {Object} obj The object to pick a key from.
 * @return {string|undefined} The key or undefined if the object is empty.
 */
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};


/**
 * Returns one value from the object map, if any exists.
 * For map literals the returned value will be the first one in most of the
 * browsers (a know exception is Konqueror).
 *
 * @param {Object<K,V>} obj The object to pick a value from.
 * @return {V|undefined} The value or undefined if the object is empty.
 * @template K,V
 */
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};


/**
 * Whether the object/hash/map contains the given object as a value.
 * An alias for goog.object.containsValue(obj, val).
 *
 * @param {Object<K,V>} obj The object in which to look for val.
 * @param {V} val The object for which to check.
 * @return {boolean} true if val is present.
 * @template K,V
 */
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};


/**
 * Returns the values of the object/map/hash.
 *
 * @param {Object<K,V>} obj The object from which to get the values.
 * @return {!Array<V>} The values in the object/map/hash.
 * @template K,V
 */
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};


/**
 * Returns the keys of the object/map/hash.
 *
 * @param {Object} obj The object from which to get the keys.
 * @return {!Array<string>} Array of property keys.
 */
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};


/**
 * Get a value from an object multiple levels deep.  This is useful for
 * pulling values from deeply nested objects, such as JSON responses.
 * Example usage: getValueByKeys(jsonObj, 'foo', 'entries', 3)
 *
 * @param {!Object} obj An object to get the value from.  Can be array-like.
 * @param {...(string|number|!Array<number|string>)} var_args A number of keys
 *     (as strings, or numbers, for array-like objects).  Can also be
 *     specified as a single array of keys.
 * @return {*} The resulting value.  If, at any point, the value for a key
 *     is undefined, returns undefined.
 */
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;

  // Start with the 2nd parameter for the variable parameters syntax.
  for (var i = isArrayLike ? 0 : 1; i < keys.length; i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }

  return obj;
};


/**
 * Whether the object/map/hash contains the given key.
 *
 * @param {Object} obj The object in which to look for key.
 * @param {*} key The key for which to check.
 * @return {boolean} true If the map contains the key.
 */
goog.object.containsKey = function(obj, key) {
  return key in obj;
};


/**
 * Whether the object/map/hash contains the given value. This is O(n).
 *
 * @param {Object<K,V>} obj The object in which to look for val.
 * @param {V} val The value for which to check.
 * @return {boolean} true If the map contains the value.
 * @template K,V
 */
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};


/**
 * Searches an object for an element that satisfies the given condition and
 * returns its key.
 * @param {Object<K,V>} obj The object to search in.
 * @param {function(this:T,V,string,Object<K,V>):boolean} f The
 *      function to call for every element. Takes 3 arguments (the value,
 *     the key and the object) and should return a boolean.
 * @param {T=} opt_this An optional "this" context for the function.
 * @return {string|undefined} The key of an element for which the function
 *     returns true or undefined if no such element is found.
 * @template T,K,V
 */
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};


/**
 * Searches an object for an element that satisfies the given condition and
 * returns its value.
 * @param {Object<K,V>} obj The object to search in.
 * @param {function(this:T,V,string,Object<K,V>):boolean} f The function
 *     to call for every element. Takes 3 arguments (the value, the key
 *     and the object) and should return a boolean.
 * @param {T=} opt_this An optional "this" context for the function.
 * @return {V} The value of an element for which the function returns true or
 *     undefined if no such element is found.
 * @template T,K,V
 */
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};


/**
 * Whether the object/map/hash is empty.
 *
 * @param {Object} obj The object to test.
 * @return {boolean} true if obj is empty.
 */
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};


/**
 * Removes all key value pairs from the object/map/hash.
 *
 * @param {Object} obj The object to clear.
 */
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};


/**
 * Removes a key-value pair based on the key.
 *
 * @param {Object} obj The object from which to remove the key.
 * @param {*} key The key to remove.
 * @return {boolean} Whether an element was removed.
 */
goog.object.remove = function(obj, key) {
  var rv;
  if ((rv = key in obj)) {
    delete obj[key];
  }
  return rv;
};


/**
 * Adds a key-value pair to the object. Throws an exception if the key is
 * already in use. Use set if you want to change an existing pair.
 *
 * @param {Object<K,V>} obj The object to which to add the key-value pair.
 * @param {string} key The key to add.
 * @param {V} val The value to add.
 * @template K,V
 */
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};


/**
 * Returns the value for the given key.
 *
 * @param {Object<K,V>} obj The object from which to get the value.
 * @param {string} key The key for which to get the value.
 * @param {R=} opt_val The value to return if no item is found for the given
 *     key (default is undefined).
 * @return {V|R|undefined} The value for the given key.
 * @template K,V,R
 */
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};


/**
 * Adds a key-value pair to the object/map/hash.
 *
 * @param {Object<K,V>} obj The object to which to add the key-value pair.
 * @param {string} key The key to add.
 * @param {V} value The value to add.
 * @template K,V
 */
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};


/**
 * Adds a key-value pair to the object/map/hash if it doesn't exist yet.
 *
 * @param {Object<K,V>} obj The object to which to add the key-value pair.
 * @param {string} key The key to add.
 * @param {V} value The value to add if the key wasn't present.
 * @return {V} The value of the entry at the end of the function.
 * @template K,V
 */
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : (obj[key] = value);
};


/**
 * Sets a key and value to an object if the key is not set. The value will be
 * the return value of the given function. If the key already exists, the
 * object will not be changed and the function will not be called (the function
 * will be lazily evaluated -- only called if necessary).
 *
 * This function is particularly useful for use with a map used a as a cache.
 *
 * @param {!Object<K,V>} obj The object to which to add the key-value pair.
 * @param {string} key The key to add.
 * @param {function():V} f The value to add if the key wasn't present.
 * @return {V} The value of the entry at the end of the function.
 * @template K,V
 */
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }

  var val = f();
  obj[key] = val;
  return val;
};


/**
 * Compares two objects for equality using === on the values.
 *
 * @param {!Object<K,V>} a
 * @param {!Object<K,V>} b
 * @return {boolean}
 * @template K,V
 */
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};


/**
 * Does a flat clone of the object.
 *
 * @param {Object<K,V>} obj Object to clone.
 * @return {!Object<K,V>} Clone of the input object.
 * @template K,V
 */
goog.object.clone = function(obj) {
  // We cannot use the prototype trick because a lot of methods depend on where
  // the actual key is set.

  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
  // We could also use goog.mixin but I wanted this to be independent from that.
};


/**
 * Clones a value. The input may be an Object, Array, or basic type. Objects and
 * arrays will be cloned recursively.
 *
 * WARNINGS:
 * <code>goog.object.unsafeClone</code> does not detect reference loops. Objects
 * that refer to themselves will cause infinite recursion.
 *
 * <code>goog.object.unsafeClone</code> is unaware of unique identifiers, and
 * copies UIDs created by <code>getUid</code> into cloned results.
 *
 * @param {*} obj The value to clone.
 * @return {*} A clone of the input value.
 */
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == 'object' || type == 'array') {
    if (goog.isFunction(obj.clone)) {
      return obj.clone();
    }
    var clone = type == 'array' ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }

  return obj;
};


/**
 * Returns a new object in which all the keys and values are interchanged
 * (keys become values and values become keys). If multiple keys map to the
 * same value, the chosen transposed value is implementation-dependent.
 *
 * @param {Object} obj The object to transpose.
 * @return {!Object} The transposed object.
 */
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};


/**
 * The names of the fields that are defined on Object.prototype.
 * @type {Array<string>}
 * @private
 */
goog.object.PROTOTYPE_FIELDS_ = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/**
 * Extends an object with another object.
 * This operates 'in-place'; it does not create a new Object.
 *
 * Example:
 * var o = {};
 * goog.object.extend(o, {a: 0, b: 1});
 * o; // {a: 0, b: 1}
 * goog.object.extend(o, {b: 2, c: 3});
 * o; // {a: 0, b: 2, c: 3}
 *
 * @param {Object} target The object to modify. Existing properties will be
 *     overwritten if they are also present in one of the objects in
 *     {@code var_args}.
 * @param {...Object} var_args The objects from which values will be copied.
 */
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1; i < arguments.length; i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }

    // For IE the for-in-loop does not contain any properties that are not
    // enumerable on the prototype object (for example isPrototypeOf from
    // Object.prototype) and it will also not include 'replace' on objects that
    // extend String and change 'replace' (not that it is common for anyone to
    // extend anything except Object).

    for (var j = 0; j < goog.object.PROTOTYPE_FIELDS_.length; j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};


/**
 * Creates a new object built from the key-value pairs provided as arguments.
 * @param {...*} var_args If only one argument is provided and it is an array
 *     then this is used as the arguments,  otherwise even arguments are used as
 *     the property names and odd arguments are used as the property values.
 * @return {!Object} The new object.
 * @throws {Error} If there are uneven number of arguments or there is only one
 *     non array argument.
 */
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }

  if (argLength % 2) {
    throw Error('Uneven number of arguments');
  }

  var rv = {};
  for (var i = 0; i < argLength; i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};


/**
 * Creates a new object where the property names come from the arguments but
 * the value is always set to true
 * @param {...*} var_args If only one argument is provided and it is an array
 *     then this is used as the arguments,  otherwise the arguments are used
 *     as the property names.
 * @return {!Object} The new object.
 */
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }

  var rv = {};
  for (var i = 0; i < argLength; i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};


/**
 * Creates an immutable view of the underlying object, if the browser
 * supports immutable objects.
 *
 * In default mode, writes to this view will fail silently. In strict mode,
 * they will throw an error.
 *
 * @param {!Object<K,V>} obj An object.
 * @return {!Object<K,V>} An immutable view of that object, or the
 *     original object if this browser does not support immutables.
 * @template K,V
 */
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};


/**
 * @param {!Object} obj An object.
 * @return {boolean} Whether this is an immutable view of the object.
 */
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Closure user agent detection (Browser).
 * @see <a href="http://www.useragentstring.com/">User agent strings</a>
 * For more information on rendering engine, platform, or device see the other
 * sub-namespaces in goog.labs.userAgent, goog.labs.userAgent.platform,
 * goog.labs.userAgent.device respectively.)
 *
 * @author martone@google.com (Andy Martone)
 */

goog.provide('goog.labs.userAgent.browser');

goog.require('goog.array');
goog.require('goog.labs.userAgent.util');
goog.require('goog.object');
goog.require('goog.string');


// TODO(nnaze): Refactor to remove excessive exclusion logic in matching
// functions.


/**
 * @return {boolean} Whether the user's browser is Opera.
 * @private
 */
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent('Opera') ||
      goog.labs.userAgent.util.matchUserAgent('OPR');
};


/**
 * @return {boolean} Whether the user's browser is IE.
 * @private
 */
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent('Trident') ||
      goog.labs.userAgent.util.matchUserAgent('MSIE');
};


/**
 * @return {boolean} Whether the user's browser is Edge.
 * @private
 */
goog.labs.userAgent.browser.matchEdge_ = function() {
  return goog.labs.userAgent.util.matchUserAgent('Edge');
};


/**
 * @return {boolean} Whether the user's browser is Firefox.
 * @private
 */
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent('Firefox');
};


/**
 * @return {boolean} Whether the user's browser is Safari.
 * @private
 */
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent('Safari') &&
      !(goog.labs.userAgent.browser.matchChrome_() ||
        goog.labs.userAgent.browser.matchCoast_() ||
        goog.labs.userAgent.browser.matchOpera_() ||
        goog.labs.userAgent.browser.matchEdge_() ||
        goog.labs.userAgent.browser.isSilk() ||
        goog.labs.userAgent.util.matchUserAgent('Android'));
};


/**
 * @return {boolean} Whether the user's browser is Coast (Opera's Webkit-based
 *     iOS browser).
 * @private
 */
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent('Coast');
};


/**
 * @return {boolean} Whether the user's browser is iOS Webview.
 * @private
 */
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  // iOS Webview does not show up as Chrome or Safari. Also check for Opera's
  // WebKit-based iOS browser, Coast.
  return (goog.labs.userAgent.util.matchUserAgent('iPad') ||
          goog.labs.userAgent.util.matchUserAgent('iPhone')) &&
      !goog.labs.userAgent.browser.matchSafari_() &&
      !goog.labs.userAgent.browser.matchChrome_() &&
      !goog.labs.userAgent.browser.matchCoast_() &&
      goog.labs.userAgent.util.matchUserAgent('AppleWebKit');
};


/**
 * @return {boolean} Whether the user's browser is Chrome.
 * @private
 */
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent('Chrome') ||
      goog.labs.userAgent.util.matchUserAgent('CriOS')) &&
      !goog.labs.userAgent.browser.matchOpera_() &&
      !goog.labs.userAgent.browser.matchEdge_();
};


/**
 * @return {boolean} Whether the user's browser is the Android browser.
 * @private
 */
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  // Android can appear in the user agent string for Chrome on Android.
  // This is not the Android standalone browser if it does.
  return goog.labs.userAgent.util.matchUserAgent('Android') &&
      !(goog.labs.userAgent.browser.isChrome() ||
        goog.labs.userAgent.browser.isFirefox() ||
        goog.labs.userAgent.browser.isOpera() ||
        goog.labs.userAgent.browser.isSilk());
};


/**
 * @return {boolean} Whether the user's browser is Opera.
 */
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;


/**
 * @return {boolean} Whether the user's browser is IE.
 */
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;


/**
 * @return {boolean} Whether the user's browser is Edge.
 */
goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_;


/**
 * @return {boolean} Whether the user's browser is Firefox.
 */
goog.labs.userAgent.browser.isFirefox =
    goog.labs.userAgent.browser.matchFirefox_;


/**
 * @return {boolean} Whether the user's browser is Safari.
 */
goog.labs.userAgent.browser.isSafari =
    goog.labs.userAgent.browser.matchSafari_;


/**
 * @return {boolean} Whether the user's browser is Coast (Opera's Webkit-based
 *     iOS browser).
 */
goog.labs.userAgent.browser.isCoast =
    goog.labs.userAgent.browser.matchCoast_;


/**
 * @return {boolean} Whether the user's browser is iOS Webview.
 */
goog.labs.userAgent.browser.isIosWebview =
    goog.labs.userAgent.browser.matchIosWebview_;


/**
 * @return {boolean} Whether the user's browser is Chrome.
 */
goog.labs.userAgent.browser.isChrome =
    goog.labs.userAgent.browser.matchChrome_;


/**
 * @return {boolean} Whether the user's browser is the Android browser.
 */
goog.labs.userAgent.browser.isAndroidBrowser =
    goog.labs.userAgent.browser.matchAndroidBrowser_;


/**
 * For more information, see:
 * http://docs.aws.amazon.com/silk/latest/developerguide/user-agent.html
 * @return {boolean} Whether the user's browser is Silk.
 */
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent('Silk');
};


/**
 * @return {string} The browser version or empty string if version cannot be
 *     determined. Note that for Internet Explorer, this returns the version of
 *     the browser, not the version of the rendering engine. (IE 8 in
 *     compatibility mode will return 8.0 rather than 7.0. To determine the
 *     rendering engine version, look at document.documentMode instead. See
 *     http://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx for more
 *     details.)
 */
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  // Special case IE since IE's version is inside the parenthesis and
  // without the '/'.
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }

  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(
      userAgentString);

  // Construct a map for easy lookup.
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    // Note that the tuple is of length three, but we only care about the
    // first two.
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });

  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);

  // Gives the value with the first key it finds, otherwise empty string.
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || '';
  }

  // Check Opera before Chrome since Opera 15+ has "Chrome" in the string.
  // See
  // http://my.opera.com/ODIN/blog/2013/07/15/opera-user-agent-strings-opera-15-and-beyond
  if (goog.labs.userAgent.browser.isOpera()) {
    // Opera 10 has Version/10.0 but Opera/9.8, so look for "Version" first.
    // Opera uses 'OPR' for more recent UAs.
    return lookUpValueWithKeys(['Version', 'Opera', 'OPR']);
  }

  // Check Edge before Chrome since it has Chrome in the string.
  if (goog.labs.userAgent.browser.isEdge()) {
    return lookUpValueWithKeys(['Edge']);
  }

  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(['Chrome', 'CriOS']);
  }

  // Usually products browser versions are in the third tuple after "Mozilla"
  // and the engine.
  var tuple = versionTuples[2];
  return tuple && tuple[1] || '';
};


/**
 * @param {string|number} version The version to check.
 * @return {boolean} Whether the browser version is higher or the same as the
 *     given version.
 */
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(),
                                     version) >= 0;
};


/**
 * Determines IE version. More information:
 * http://msdn.microsoft.com/en-us/library/ie/bg182625(v=vs.85).aspx#uaString
 * http://msdn.microsoft.com/en-us/library/hh869301(v=vs.85).aspx
 * http://blogs.msdn.com/b/ie/archive/2010/03/23/introducing-ie9-s-user-agent-string.aspx
 * http://blogs.msdn.com/b/ie/archive/2009/01/09/the-internet-explorer-8-user-agent-string-updated-edition.aspx
 *
 * @param {string} userAgent the User-Agent.
 * @return {string}
 * @private
 */
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  // IE11 may identify itself as MSIE 9.0 or MSIE 10.0 due to an IE 11 upgrade
  // bug. Example UA:
  // Mozilla/5.0 (MSIE 9.0; Windows NT 6.1; WOW64; Trident/7.0; rv:11.0)
  // like Gecko.
  // See http://www.whatismybrowser.com/developers/unknown-user-agent-fragments.
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }

  var version = '';
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    // IE in compatibility mode usually identifies itself as MSIE 7.0; in this
    // case, use the Trident version to determine the version of IE. For more
    // details, see the links above.
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == '7.0') {
      if (tridentVersion && tridentVersion[1]) {
        switch (tridentVersion[1]) {
          case '4.0':
            version = '8.0';
            break;
          case '5.0':
            version = '9.0';
            break;
          case '6.0':
            version = '10.0';
            break;
          case '7.0':
            version = '11.0';
            break;
        }
      } else {
        version = '7.0';
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Closure user agent detection.
 * @see http://en.wikipedia.org/wiki/User_agent
 * For more information on browser brand, platform, or device see the other
 * sub-namespaces in goog.labs.userAgent (browser, platform, and device).
 *
 */

goog.provide('goog.labs.userAgent.engine');

goog.require('goog.array');
goog.require('goog.labs.userAgent.util');
goog.require('goog.string');


/**
 * @return {boolean} Whether the rendering engine is Presto.
 */
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent('Presto');
};


/**
 * @return {boolean} Whether the rendering engine is Trident.
 */
goog.labs.userAgent.engine.isTrident = function() {
  // IE only started including the Trident token in IE8.
  return goog.labs.userAgent.util.matchUserAgent('Trident') ||
      goog.labs.userAgent.util.matchUserAgent('MSIE');
};


/**
 * @return {boolean} Whether the rendering engine is Edge.
 */
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent('Edge');
};


/**
 * @return {boolean} Whether the rendering engine is WebKit.
 */
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase('WebKit') &&
      !goog.labs.userAgent.engine.isEdge();
};


/**
 * @return {boolean} Whether the rendering engine is Gecko.
 */
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent('Gecko') &&
      !goog.labs.userAgent.engine.isWebKit() &&
      !goog.labs.userAgent.engine.isTrident() &&
      !goog.labs.userAgent.engine.isEdge();
};


/**
 * @return {string} The rendering engine's version or empty string if version
 *     can't be determined.
 */
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(
        userAgentString);

    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      // In Gecko, the version string is either in the browser info or the
      // Firefox version.  See Gecko user agent string reference:
      // http://goo.gl/mULqa
      if (engineTuple[0] == 'Gecko') {
        return goog.labs.userAgent.engine.getVersionForKey_(
            tuples, 'Firefox');
      }

      return engineTuple[1];
    }

    // MSIE has only one version identifier, and the Trident version is
    // specified in the parenthetical. IE Edge is covered in the engine tuple
    // detection.
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return '';
};


/**
 * @param {!Array<!Array<string>>} tuples Extracted version tuples.
 * @return {!Array<string>|undefined} The engine tuple or undefined if not
 *     found.
 * @private
 */
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0; i < tuples.length; i++) {
    var tuple = tuples[i];
    if (tuple[0] == 'Edge') {
      return tuple;
    }
  }
};


/**
 * @param {string|number} version The version to check.
 * @return {boolean} Whether the rendering engine version is higher or the same
 *     as the given version.
 */
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),
                                     version) >= 0;
};


/**
 * @param {!Array<!Array<string>>} tuples Version tuples.
 * @param {string} key The key to look for.
 * @return {string} The version string of the given key, if present.
 *     Otherwise, the empty string.
 * @private
 */
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  // TODO(nnaze): Move to util if useful elsewhere.

  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });

  return pair && pair[1] || '';
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Closure user agent platform detection.
 * @see <a href="http://www.useragentstring.com/">User agent strings</a>
 * For more information on browser brand, rendering engine, or device see the
 * other sub-namespaces in goog.labs.userAgent (browser, engine, and device
 * respectively).
 *
 */

goog.provide('goog.labs.userAgent.platform');

goog.require('goog.labs.userAgent.util');
goog.require('goog.string');


/**
 * @return {boolean} Whether the platform is Android.
 */
goog.labs.userAgent.platform.isAndroid = function() {
  return goog.labs.userAgent.util.matchUserAgent('Android');
};


/**
 * @return {boolean} Whether the platform is iPod.
 */
goog.labs.userAgent.platform.isIpod = function() {
  return goog.labs.userAgent.util.matchUserAgent('iPod');
};


/**
 * @return {boolean} Whether the platform is iPhone.
 */
goog.labs.userAgent.platform.isIphone = function() {
  return goog.labs.userAgent.util.matchUserAgent('iPhone') &&
      !goog.labs.userAgent.util.matchUserAgent('iPod') &&
      !goog.labs.userAgent.util.matchUserAgent('iPad');
};


/**
 * @return {boolean} Whether the platform is iPad.
 */
goog.labs.userAgent.platform.isIpad = function() {
  return goog.labs.userAgent.util.matchUserAgent('iPad');
};


/**
 * @return {boolean} Whether the platform is iOS.
 */
goog.labs.userAgent.platform.isIos = function() {
  return goog.labs.userAgent.platform.isIphone() ||
      goog.labs.userAgent.platform.isIpad() ||
      goog.labs.userAgent.platform.isIpod();
};


/**
 * @return {boolean} Whether the platform is Mac.
 */
goog.labs.userAgent.platform.isMacintosh = function() {
  return goog.labs.userAgent.util.matchUserAgent('Macintosh');
};


/**
 * Note: ChromeOS is not considered to be Linux as it does not report itself
 * as Linux in the user agent string.
 * @return {boolean} Whether the platform is Linux.
 */
goog.labs.userAgent.platform.isLinux = function() {
  return goog.labs.userAgent.util.matchUserAgent('Linux');
};


/**
 * @return {boolean} Whether the platform is Windows.
 */
goog.labs.userAgent.platform.isWindows = function() {
  return goog.labs.userAgent.util.matchUserAgent('Windows');
};


/**
 * @return {boolean} Whether the platform is ChromeOS.
 */
goog.labs.userAgent.platform.isChromeOS = function() {
  return goog.labs.userAgent.util.matchUserAgent('CrOS');
};


/**
 * The version of the platform. We only determine the version for Windows,
 * Mac, and Chrome OS. It doesn't make much sense on Linux. For Windows, we only
 * look at the NT version. Non-NT-based versions (e.g. 95, 98, etc.) are given
 * version 0.0.
 *
 * @return {string} The platform version or empty string if version cannot be
 *     determined.
 */
goog.labs.userAgent.platform.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  var version = '', re;
  if (goog.labs.userAgent.platform.isWindows()) {
    re = /Windows (?:NT|Phone) ([0-9.]+)/;
    var match = re.exec(userAgentString);
    if (match) {
      version = match[1];
    } else {
      version = '0.0';
    }
  } else if (goog.labs.userAgent.platform.isIos()) {
    re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
    var match = re.exec(userAgentString);
    // Report the version as x.y.z and not x_y_z
    version = match && match[1].replace(/_/g, '.');
  } else if (goog.labs.userAgent.platform.isMacintosh()) {
    re = /Mac OS X ([0-9_.]+)/;
    var match = re.exec(userAgentString);
    // Note: some old versions of Camino do not report an OSX version.
    // Default to 10.
    version = match ? match[1].replace(/_/g, '.') : '10';
  } else if (goog.labs.userAgent.platform.isAndroid()) {
    re = /Android\s+([^\);]+)(\)|;)/;
    var match = re.exec(userAgentString);
    version = match && match[1];
  } else if (goog.labs.userAgent.platform.isChromeOS()) {
    re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
    var match = re.exec(userAgentString);
    version = match && match[1];
  }
  return version || '';
};


/**
 * @param {string|number} version The version to check.
 * @return {boolean} Whether the browser version is higher or the same as the
 *     given version.
 */
goog.labs.userAgent.platform.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),
                                     version) >= 0;
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Rendering engine detection.
 * @see <a href="http://www.useragentstring.com/">User agent strings</a>
 * For information on the browser brand (such as Safari versus Chrome), see
 * goog.userAgent.product.
 * @author arv@google.com (Erik Arvidsson)
 * @see ../demos/useragent.html
 */

goog.provide('goog.userAgent');

goog.require('goog.labs.userAgent.browser');
goog.require('goog.labs.userAgent.engine');
goog.require('goog.labs.userAgent.platform');
goog.require('goog.labs.userAgent.util');
goog.require('goog.string');


/**
 * @define {boolean} Whether we know at compile-time that the browser is IE.
 */
goog.define('goog.userAgent.ASSUME_IE', false);


/**
 * @define {boolean} Whether we know at compile-time that the browser is EDGE.
 */
goog.define('goog.userAgent.ASSUME_EDGE', false);


/**
 * @define {boolean} Whether we know at compile-time that the browser is GECKO.
 */
goog.define('goog.userAgent.ASSUME_GECKO', false);


/**
 * @define {boolean} Whether we know at compile-time that the browser is WEBKIT.
 */
goog.define('goog.userAgent.ASSUME_WEBKIT', false);


/**
 * @define {boolean} Whether we know at compile-time that the browser is a
 *     mobile device running WebKit e.g. iPhone or Android.
 */
goog.define('goog.userAgent.ASSUME_MOBILE_WEBKIT', false);


/**
 * @define {boolean} Whether we know at compile-time that the browser is OPERA.
 */
goog.define('goog.userAgent.ASSUME_OPERA', false);


/**
 * @define {boolean} Whether the
 *     {@code goog.userAgent.isVersionOrHigher}
 *     function will return true for any version.
 */
goog.define('goog.userAgent.ASSUME_ANY_VERSION', false);


/**
 * Whether we know the browser engine at compile-time.
 * @type {boolean}
 * @private
 */
goog.userAgent.BROWSER_KNOWN_ =
    goog.userAgent.ASSUME_IE ||
    goog.userAgent.ASSUME_EDGE ||
    goog.userAgent.ASSUME_GECKO ||
    goog.userAgent.ASSUME_MOBILE_WEBKIT ||
    goog.userAgent.ASSUME_WEBKIT ||
    goog.userAgent.ASSUME_OPERA;


/**
 * Returns the userAgent string for the current browser.
 *
 * @return {string} The userAgent string.
 */
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};


/**
 * TODO(nnaze): Change type to "Navigator" and update compilation targets.
 * @return {Object} The native navigator object.
 */
goog.userAgent.getNavigator = function() {
  // Need a local navigator reference instead of using the global one,
  // to avoid the rare case where they reference different objects.
  // (in a WorkerPool, for example).
  return goog.global['navigator'] || null;
};


/**
 * Whether the user agent is Opera.
 * @type {boolean}
 */
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_OPERA :
    goog.labs.userAgent.browser.isOpera();


/**
 * Whether the user agent is Internet Explorer.
 * @type {boolean}
 */
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_IE :
    goog.labs.userAgent.browser.isIE();


/**
 * Whether the user agent is Microsoft Edge.
 * @type {boolean}
 */
goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_EDGE :
    goog.labs.userAgent.engine.isEdge();


/**
 * Whether the user agent is MS Internet Explorer or MS Edge.
 * @type {boolean}
 */
goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;


/**
 * Whether the user agent is Gecko. Gecko is the rendering engine used by
 * Mozilla, Firefox, and others.
 * @type {boolean}
 */
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_GECKO :
    goog.labs.userAgent.engine.isGecko();


/**
 * Whether the user agent is WebKit. WebKit is the rendering engine that
 * Safari, Android and others use.
 * @type {boolean}
 */
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT :
    goog.labs.userAgent.engine.isWebKit();


/**
 * Whether the user agent is running on a mobile device.
 *
 * This is a separate function so that the logic can be tested.
 *
 * TODO(nnaze): Investigate swapping in goog.labs.userAgent.device.isMobile().
 *
 * @return {boolean} Whether the user agent is running on a mobile device.
 * @private
 */
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT &&
         goog.labs.userAgent.util.matchUserAgent('Mobile');
};


/**
 * Whether the user agent is running on a mobile device.
 *
 * TODO(nnaze): Consider deprecating MOBILE when labs.userAgent
 *   is promoted as the gecko/webkit logic is likely inaccurate.
 *
 * @type {boolean}
 */
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT ||
                        goog.userAgent.isMobile_();


/**
 * Used while transitioning code to use WEBKIT instead.
 * @type {boolean}
 * @deprecated Use {@link goog.userAgent.product.SAFARI} instead.
 * TODO(nicksantos): Delete this from goog.userAgent.
 */
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;


/**
 * @return {string} the platform (operating system) the user agent is running
 *     on. Default to empty string because navigator.platform may not be defined
 *     (on Rhino, for example).
 * @private
 */
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || '';
};


/**
 * The platform (operating system) the user agent is running on. Default to
 * empty string because navigator.platform may not be defined (on Rhino, for
 * example).
 * @type {string}
 */
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();


/**
 * @define {boolean} Whether the user agent is running on a Macintosh operating
 *     system.
 */
goog.define('goog.userAgent.ASSUME_MAC', false);


/**
 * @define {boolean} Whether the user agent is running on a Windows operating
 *     system.
 */
goog.define('goog.userAgent.ASSUME_WINDOWS', false);


/**
 * @define {boolean} Whether the user agent is running on a Linux operating
 *     system.
 */
goog.define('goog.userAgent.ASSUME_LINUX', false);


/**
 * @define {boolean} Whether the user agent is running on a X11 windowing
 *     system.
 */
goog.define('goog.userAgent.ASSUME_X11', false);


/**
 * @define {boolean} Whether the user agent is running on Android.
 */
goog.define('goog.userAgent.ASSUME_ANDROID', false);


/**
 * @define {boolean} Whether the user agent is running on an iPhone.
 */
goog.define('goog.userAgent.ASSUME_IPHONE', false);


/**
 * @define {boolean} Whether the user agent is running on an iPad.
 */
goog.define('goog.userAgent.ASSUME_IPAD', false);


/**
 * @type {boolean}
 * @private
 */
goog.userAgent.PLATFORM_KNOWN_ =
    goog.userAgent.ASSUME_MAC ||
    goog.userAgent.ASSUME_WINDOWS ||
    goog.userAgent.ASSUME_LINUX ||
    goog.userAgent.ASSUME_X11 ||
    goog.userAgent.ASSUME_ANDROID ||
    goog.userAgent.ASSUME_IPHONE ||
    goog.userAgent.ASSUME_IPAD;


/**
 * Whether the user agent is running on a Macintosh operating system.
 * @type {boolean}
 */
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();


/**
 * Whether the user agent is running on a Windows operating system.
 * @type {boolean}
 */
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_WINDOWS :
    goog.labs.userAgent.platform.isWindows();


/**
 * Whether the user agent is Linux per the legacy behavior of
 * goog.userAgent.LINUX, which considered ChromeOS to also be
 * Linux.
 * @return {boolean}
 * @private
 */
goog.userAgent.isLegacyLinux_ = function() {
  return goog.labs.userAgent.platform.isLinux() ||
      goog.labs.userAgent.platform.isChromeOS();
};


/**
 * Whether the user agent is running on a Linux operating system.
 *
 * Note that goog.userAgent.LINUX considers ChromeOS to be Linux,
 * while goog.labs.userAgent.platform considers ChromeOS and
 * Linux to be different OSes.
 *
 * @type {boolean}
 */
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_LINUX :
    goog.userAgent.isLegacyLinux_();


/**
 * @return {boolean} Whether the user agent is an X11 windowing system.
 * @private
 */
goog.userAgent.isX11_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return !!navigator &&
      goog.string.contains(navigator['appVersion'] || '', 'X11');
};


/**
 * Whether the user agent is running on a X11 windowing system.
 * @type {boolean}
 */
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_X11 :
    goog.userAgent.isX11_();


/**
 * Whether the user agent is running on Android.
 * @type {boolean}
 */
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_ANDROID :
    goog.labs.userAgent.platform.isAndroid();


/**
 * Whether the user agent is running on an iPhone.
 * @type {boolean}
 */
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_IPHONE :
    goog.labs.userAgent.platform.isIphone();


/**
 * Whether the user agent is running on an iPad.
 * @type {boolean}
 */
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_IPAD :
    goog.labs.userAgent.platform.isIpad();


/**
 * @return {string} The string that describes the version number of the user
 *     agent.
 * Assumes user agent is opera.
 * @private
 */
goog.userAgent.operaVersion_ = function() {
  var version = goog.global.opera.version;
  try {
    return version();
  } catch (e) {
    return version;
  }
};


/**
 * @return {string} The string that describes the version number of the user
 *     agent.
 * @private
 */
goog.userAgent.determineVersion_ = function() {
  // All browsers have different ways to detect the version and they all have
  // different naming schemes.

  if (goog.userAgent.OPERA && goog.global['opera']) {
    return goog.userAgent.operaVersion_();
  }

  // version is a string rather than a number because it may contain 'b', 'a',
  // and so on.
  var version = '';
  var arr = goog.userAgent.getVersionRegexResult_();
  if (arr) {
    version = arr ? arr[1] : '';
  }

  if (goog.userAgent.IE) {
    // IE9 can be in document mode 9 but be reporting an inconsistent user agent
    // version.  If it is identifying as a version lower than 9 we take the
    // documentMode as the version instead.  IE8 has similar behavior.
    // It is recommended to set the X-UA-Compatible header to ensure that IE9
    // uses documentMode 9.
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }

  return version;
};


/**
 * @return {Array|undefined} The version regex matches from parsing the user
 *     agent string. These regex statements must be executed inline so they can
 *     be compiled out by the closure compiler with the rest of the useragent
 *     detection logic when ASSUME_* is specified.
 * @private
 */
goog.userAgent.getVersionRegexResult_ = function() {
  var userAgent = goog.userAgent.getUserAgentString();
  if (goog.userAgent.GECKO) {
    return /rv\:([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.EDGE) {
    return /Edge\/([\d\.]+)/.exec(userAgent);
  }
  if (goog.userAgent.IE) {
    return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.WEBKIT) {
    // WebKit/125.4
    return /WebKit\/(\S+)/.exec(userAgent);
  }
};


/**
 * @return {number|undefined} Returns the document mode (for testing).
 * @private
 */
goog.userAgent.getDocumentMode_ = function() {
  // NOTE(user): goog.userAgent may be used in context where there is no DOM.
  var doc = goog.global['document'];
  return doc ? doc['documentMode'] : undefined;
};


/**
 * The version of the user agent. This is a string because it might contain
 * 'b' (as in beta) as well as multiple dots.
 * @type {string}
 */
goog.userAgent.VERSION = goog.userAgent.determineVersion_();


/**
 * Compares two version numbers.
 *
 * @param {string} v1 Version of first item.
 * @param {string} v2 Version of second item.
 *
 * @return {number}  1 if first argument is higher
 *                   0 if arguments are equal
 *                  -1 if second argument is higher.
 * @deprecated Use goog.string.compareVersions.
 */
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};


/**
 * Cache for {@link goog.userAgent.isVersionOrHigher}.
 * Calls to compareVersions are surprisingly expensive and, as a browser's
 * version number is unlikely to change during a session, we cache the results.
 * @const
 * @private
 */
goog.userAgent.isVersionOrHigherCache_ = {};


/**
 * Whether the user agent version is higher or the same as the given version.
 * NOTE: When checking the version numbers for Firefox and Safari, be sure to
 * use the engine's version, not the browser's version number.  For example,
 * Firefox 3.0 corresponds to Gecko 1.9 and Safari 3.0 to Webkit 522.11.
 * Opera and Internet Explorer versions match the product release number.<br>
 * @see <a href="http://en.wikipedia.org/wiki/Safari_version_history">
 *     Webkit</a>
 * @see <a href="http://en.wikipedia.org/wiki/Gecko_engine">Gecko</a>
 *
 * @param {string|number} version The version to check.
 * @return {boolean} Whether the user agent version is higher or the same as
 *     the given version.
 */
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION ||
      goog.userAgent.isVersionOrHigherCache_[version] ||
      (goog.userAgent.isVersionOrHigherCache_[version] =
          goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};


/**
 * Deprecated alias to {@code goog.userAgent.isVersionOrHigher}.
 * @param {string|number} version The version to check.
 * @return {boolean} Whether the user agent version is higher or the same as
 *     the given version.
 * @deprecated Use goog.userAgent.isVersionOrHigher().
 */
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;


/**
 * Whether the IE effective document mode is higher or the same as the given
 * document mode version.
 * NOTE: Only for IE, return false for another browser.
 *
 * @param {number} documentMode The document mode version to check.
 * @return {boolean} Whether the IE effective document mode is higher or the
 *     same as the given version.
 */
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.DOCUMENT_MODE >= documentMode;
};


/**
 * Deprecated alias to {@code goog.userAgent.isDocumentModeOrHigher}.
 * @param {number} version The version to check.
 * @return {boolean} Whether the IE effective document mode is higher or the
 *      same as the given version.
 * @deprecated Use goog.userAgent.isDocumentModeOrHigher().
 */
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;


/**
 * For IE version < 7, documentMode is undefined, so attempt to use the
 * CSS1Compat property to see if we are in standards mode. If we are in
 * standards mode, treat the browser version as the document mode. Otherwise,
 * IE is emulating version 5.
 * @type {number|undefined}
 * @const
 */
goog.userAgent.DOCUMENT_MODE = (function() {
  var doc = goog.global['document'];
  var mode = goog.userAgent.getDocumentMode_();
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  return mode || (doc['compatMode'] == 'CSS1Compat' ?
      parseInt(goog.userAgent.VERSION, 10) : 5);
})();

// Copyright 2010 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Browser capability checks for the events package.
 *
 */


goog.provide('goog.events.BrowserFeature');

goog.require('goog.userAgent');


/**
 * Enum of browser capabilities.
 * @enum {boolean}
 */
goog.events.BrowserFeature = {
  /**
   * Whether the button attribute of the event is W3C compliant.  False in
   * Internet Explorer prior to version 9; document-version dependent.
   */
  HAS_W3C_BUTTON: !goog.userAgent.IE ||
      goog.userAgent.isDocumentModeOrHigher(9),

  /**
   * Whether the browser supports full W3C event model.
   */
  HAS_W3C_EVENT_SUPPORT: !goog.userAgent.IE ||
      goog.userAgent.isDocumentModeOrHigher(9),

  /**
   * To prevent default in IE7-8 for certain keydown events we need set the
   * keyCode to -1.
   */
  SET_KEY_CODE_TO_PREVENT_DEFAULT: goog.userAgent.IE &&
      !goog.userAgent.isVersionOrHigher('9'),

  /**
   * Whether the {@code navigator.onLine} property is supported.
   */
  HAS_NAVIGATOR_ONLINE_PROPERTY: !goog.userAgent.WEBKIT ||
      goog.userAgent.isVersionOrHigher('528'),

  /**
   * Whether HTML5 network online/offline events are supported.
   */
  HAS_HTML5_NETWORK_EVENT_SUPPORT:
      goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher('1.9b') ||
      goog.userAgent.IE && goog.userAgent.isVersionOrHigher('8') ||
      goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher('9.5') ||
      goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher('528'),

  /**
   * Whether HTML5 network events fire on document.body, or otherwise the
   * window.
   */
  HTML5_NETWORK_EVENTS_FIRE_ON_BODY:
      goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher('8') ||
      goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('9'),

  /**
   * Whether touch is enabled in the browser.
   */
  TOUCH_ENABLED:
      ('ontouchstart' in goog.global ||
          !!(goog.global['document'] &&
             document.documentElement &&
             'ontouchstart' in document.documentElement) ||
          // IE10 uses non-standard touch events, so it has a different check.
          !!(goog.global['navigator'] &&
              goog.global['navigator']['msMaxTouchPoints']))
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.events.EventId');



/**
 * A templated class that is used when registering for events. Typical usage:
 * <code>
 *   /** @type {goog.events.EventId<MyEventObj>}
 *   var myEventId = new goog.events.EventId(
 *       goog.events.getUniqueId(('someEvent'));
 *
 *   // No need to cast or declare here since the compiler knows the correct
 *   // type of 'evt' (MyEventObj).
 *   something.listen(myEventId, function(evt) {});
 * </code>
 *
 * @param {string} eventId
 * @template T
 * @constructor
 * @struct
 * @final
 */
goog.events.EventId = function(eventId) {
  /** @const */ this.id = eventId;
};


/**
 * @override
 */
goog.events.EventId.prototype.toString = function() {
  return this.id;
};

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A base class for event objects.
 *
 */


goog.provide('goog.events.Event');
goog.provide('goog.events.EventLike');

/**
 * goog.events.Event no longer depends on goog.Disposable. Keep requiring
 * goog.Disposable here to not break projects which assume this dependency.
 * @suppress {extraRequire}
 */
goog.require('goog.Disposable');
goog.require('goog.events.EventId');


/**
 * A typedef for event like objects that are dispatchable via the
 * goog.events.dispatchEvent function. strings are treated as the type for a
 * goog.events.Event. Objects are treated as an extension of a new
 * goog.events.Event with the type property of the object being used as the type
 * of the Event.
 * @typedef {string|Object|goog.events.Event|goog.events.EventId}
 */
goog.events.EventLike;



/**
 * A base class for event objects, so that they can support preventDefault and
 * stopPropagation.
 *
 * @param {string|!goog.events.EventId} type Event Type.
 * @param {Object=} opt_target Reference to the object that is the target of
 *     this event. It has to implement the {@code EventTarget} interface
 *     declared at {@link http://developer.mozilla.org/en/DOM/EventTarget}.
 * @constructor
 */
goog.events.Event = function(type, opt_target) {
  /**
   * Event type.
   * @type {string}
   */
  this.type = type instanceof goog.events.EventId ? String(type) : type;

  /**
   * TODO(tbreisacher): The type should probably be
   * EventTarget|goog.events.EventTarget.
   *
   * Target of the event.
   * @type {Object|undefined}
   */
  this.target = opt_target;

  /**
   * Object that had the listener attached.
   * @type {Object|undefined}
   */
  this.currentTarget = this.target;

  /**
   * Whether to cancel the event in internal capture/bubble processing for IE.
   * @type {boolean}
   * @public
   * @suppress {underscore|visibility} Technically public, but referencing this
   *     outside this package is strongly discouraged.
   */
  this.propagationStopped_ = false;

  /**
   * Whether the default action has been prevented.
   * This is a property to match the W3C specification at
   * {@link http://www.w3.org/TR/DOM-Level-3-Events/
   * #events-event-type-defaultPrevented}.
   * Must be treated as read-only outside the class.
   * @type {boolean}
   */
  this.defaultPrevented = false;

  /**
   * Return value for in internal capture/bubble processing for IE.
   * @type {boolean}
   * @public
   * @suppress {underscore|visibility} Technically public, but referencing this
   *     outside this package is strongly discouraged.
   */
  this.returnValue_ = true;
};


/**
 * Stops event propagation.
 */
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};


/**
 * Prevents the default action, for example a link redirecting to a url.
 */
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};


/**
 * Stops the propagation of the event. It is equivalent to
 * {@code e.stopPropagation()}, but can be used as the callback argument of
 * {@link goog.events.listen} without declaring another function.
 * @param {!goog.events.Event} e An event.
 */
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};


/**
 * Prevents the default action. It is equivalent to
 * {@code e.preventDefault()}, but can be used as the callback argument of
 * {@link goog.events.listen} without declaring another function.
 * @param {!goog.events.Event} e An event.
 */
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};

// Copyright 2010 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Event Types.
 *
 * @author arv@google.com (Erik Arvidsson)
 */


goog.provide('goog.events.EventType');

goog.require('goog.userAgent');


/**
 * Returns a prefixed event name for the current browser.
 * @param {string} eventName The name of the event.
 * @return {string} The prefixed event name.
 * @suppress {missingRequire|missingProvide}
 * @private
 */
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? 'webkit' + eventName :
      (goog.userAgent.OPERA ? 'o' + eventName.toLowerCase() :
          eventName.toLowerCase());
};


/**
 * Constants for event names.
 * @enum {string}
 */
goog.events.EventType = {
  // Mouse events
  CLICK: 'click',
  RIGHTCLICK: 'rightclick',
  DBLCLICK: 'dblclick',
  MOUSEDOWN: 'mousedown',
  MOUSEUP: 'mouseup',
  MOUSEOVER: 'mouseover',
  MOUSEOUT: 'mouseout',
  MOUSEMOVE: 'mousemove',
  MOUSEENTER: 'mouseenter',
  MOUSELEAVE: 'mouseleave',
  // Select start is non-standard.
  // See http://msdn.microsoft.com/en-us/library/ie/ms536969(v=vs.85).aspx.
  SELECTSTART: 'selectstart', // IE, Safari, Chrome

  // Wheel events
  // http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
  WHEEL: 'wheel',

  // Key events
  KEYPRESS: 'keypress',
  KEYDOWN: 'keydown',
  KEYUP: 'keyup',

  // Focus
  BLUR: 'blur',
  FOCUS: 'focus',
  DEACTIVATE: 'deactivate', // IE only
  // NOTE: The following two events are not stable in cross-browser usage.
  //     WebKit and Opera implement DOMFocusIn/Out.
  //     IE implements focusin/out.
  //     Gecko implements neither see bug at
  //     https://bugzilla.mozilla.org/show_bug.cgi?id=396927.
  // The DOM Events Level 3 Draft deprecates DOMFocusIn in favor of focusin:
  //     http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html
  // You can use FOCUS in Capture phase until implementations converge.
  FOCUSIN: goog.userAgent.IE ? 'focusin' : 'DOMFocusIn',
  FOCUSOUT: goog.userAgent.IE ? 'focusout' : 'DOMFocusOut',

  // Forms
  CHANGE: 'change',
  RESET: 'reset',
  SELECT: 'select',
  SUBMIT: 'submit',
  INPUT: 'input',
  PROPERTYCHANGE: 'propertychange', // IE only

  // Drag and drop
  DRAGSTART: 'dragstart',
  DRAG: 'drag',
  DRAGENTER: 'dragenter',
  DRAGOVER: 'dragover',
  DRAGLEAVE: 'dragleave',
  DROP: 'drop',
  DRAGEND: 'dragend',

  // Touch events
  // Note that other touch events exist, but we should follow the W3C list here.
  // http://www.w3.org/TR/touch-events/#list-of-touchevent-types
  TOUCHSTART: 'touchstart',
  TOUCHMOVE: 'touchmove',
  TOUCHEND: 'touchend',
  TOUCHCANCEL: 'touchcancel',

  // Misc
  BEFOREUNLOAD: 'beforeunload',
  CONSOLEMESSAGE: 'consolemessage',
  CONTEXTMENU: 'contextmenu',
  DOMCONTENTLOADED: 'DOMContentLoaded',
  ERROR: 'error',
  HELP: 'help',
  LOAD: 'load',
  LOSECAPTURE: 'losecapture',
  ORIENTATIONCHANGE: 'orientationchange',
  READYSTATECHANGE: 'readystatechange',
  RESIZE: 'resize',
  SCROLL: 'scroll',
  UNLOAD: 'unload',

  // HTML 5 History events
  // See http://www.w3.org/TR/html5/browsers.html#event-definitions-0
  HASHCHANGE: 'hashchange',
  PAGEHIDE: 'pagehide',
  PAGESHOW: 'pageshow',
  POPSTATE: 'popstate',

  // Copy and Paste
  // Support is limited. Make sure it works on your favorite browser
  // before using.
  // http://www.quirksmode.org/dom/events/cutcopypaste.html
  COPY: 'copy',
  PASTE: 'paste',
  CUT: 'cut',
  BEFORECOPY: 'beforecopy',
  BEFORECUT: 'beforecut',
  BEFOREPASTE: 'beforepaste',

  // HTML5 online/offline events.
  // http://www.w3.org/TR/offline-webapps/#related
  ONLINE: 'online',
  OFFLINE: 'offline',

  // HTML 5 worker events
  MESSAGE: 'message',
  CONNECT: 'connect',

  // CSS animation events.
  /** @suppress {missingRequire} */
  ANIMATIONSTART: goog.events.getVendorPrefixedName_('AnimationStart'),
  /** @suppress {missingRequire} */
  ANIMATIONEND: goog.events.getVendorPrefixedName_('AnimationEnd'),
  /** @suppress {missingRequire} */
  ANIMATIONITERATION: goog.events.getVendorPrefixedName_('AnimationIteration'),

  // CSS transition events. Based on the browser support described at:
  // https://developer.mozilla.org/en/css/css_transitions#Browser_compatibility
  /** @suppress {missingRequire} */
  TRANSITIONEND: goog.events.getVendorPrefixedName_('TransitionEnd'),

  // W3C Pointer Events
  // http://www.w3.org/TR/pointerevents/
  POINTERDOWN: 'pointerdown',
  POINTERUP: 'pointerup',
  POINTERCANCEL: 'pointercancel',
  POINTERMOVE: 'pointermove',
  POINTEROVER: 'pointerover',
  POINTEROUT: 'pointerout',
  POINTERENTER: 'pointerenter',
  POINTERLEAVE: 'pointerleave',
  GOTPOINTERCAPTURE: 'gotpointercapture',
  LOSTPOINTERCAPTURE: 'lostpointercapture',

  // IE specific events.
  // See http://msdn.microsoft.com/en-us/library/ie/hh772103(v=vs.85).aspx
  // Note: these events will be supplanted in IE11.
  MSGESTURECHANGE: 'MSGestureChange',
  MSGESTUREEND: 'MSGestureEnd',
  MSGESTUREHOLD: 'MSGestureHold',
  MSGESTURESTART: 'MSGestureStart',
  MSGESTURETAP: 'MSGestureTap',
  MSGOTPOINTERCAPTURE: 'MSGotPointerCapture',
  MSINERTIASTART: 'MSInertiaStart',
  MSLOSTPOINTERCAPTURE: 'MSLostPointerCapture',
  MSPOINTERCANCEL: 'MSPointerCancel',
  MSPOINTERDOWN: 'MSPointerDown',
  MSPOINTERENTER: 'MSPointerEnter',
  MSPOINTERHOVER: 'MSPointerHover',
  MSPOINTERLEAVE: 'MSPointerLeave',
  MSPOINTERMOVE: 'MSPointerMove',
  MSPOINTEROUT: 'MSPointerOut',
  MSPOINTEROVER: 'MSPointerOver',
  MSPOINTERUP: 'MSPointerUp',

  // Native IMEs/input tools events.
  TEXT: 'text',
  TEXTINPUT: 'textInput',
  COMPOSITIONSTART: 'compositionstart',
  COMPOSITIONUPDATE: 'compositionupdate',
  COMPOSITIONEND: 'compositionend',

  // Webview tag events
  // See http://developer.chrome.com/dev/apps/webview_tag.html
  EXIT: 'exit',
  LOADABORT: 'loadabort',
  LOADCOMMIT: 'loadcommit',
  LOADREDIRECT: 'loadredirect',
  LOADSTART: 'loadstart',
  LOADSTOP: 'loadstop',
  RESPONSIVE: 'responsive',
  SIZECHANGED: 'sizechanged',
  UNRESPONSIVE: 'unresponsive',

  // HTML5 Page Visibility API.  See details at
  // {@code goog.labs.dom.PageVisibilityMonitor}.
  VISIBILITYCHANGE: 'visibilitychange',

  // LocalStorage event.
  STORAGE: 'storage',

  // DOM Level 2 mutation events (deprecated).
  DOMSUBTREEMODIFIED: 'DOMSubtreeModified',
  DOMNODEINSERTED: 'DOMNodeInserted',
  DOMNODEREMOVED: 'DOMNodeRemoved',
  DOMNODEREMOVEDFROMDOCUMENT: 'DOMNodeRemovedFromDocument',
  DOMNODEINSERTEDINTODOCUMENT: 'DOMNodeInsertedIntoDocument',
  DOMATTRMODIFIED: 'DOMAttrModified',
  DOMCHARACTERDATAMODIFIED: 'DOMCharacterDataModified',

  // Print events.
  BEFOREPRINT: 'beforeprint',
  AFTERPRINT: 'afterprint'
};

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Useful compiler idioms.
 *
 * @author johnlenz@google.com (John Lenz)
 */

goog.provide('goog.reflect');


/**
 * Syntax for object literal casts.
 * @see http://go/jscompiler-renaming
 * @see https://github.com/google/closure-compiler/wiki/Type-Based-Property-Renaming
 *
 * Use this if you have an object literal whose keys need to have the same names
 * as the properties of some class even after they are renamed by the compiler.
 *
 * @param {!Function} type Type to cast to.
 * @param {Object} object Object literal to cast.
 * @return {Object} The object literal.
 */
goog.reflect.object = function(type, object) {
  return object;
};


/**
 * To assert to the compiler that an operation is needed when it would
 * otherwise be stripped. For example:
 * <code>
 *     // Force a layout
 *     goog.reflect.sinkValue(dialog.offsetHeight);
 * </code>
 * @type {!Function}
 */
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[' '](x);
  return x;
};


/**
 * The compiler should optimize this function away iff no one ever uses
 * goog.reflect.sinkValue.
 */
goog.reflect.sinkValue[' '] = goog.nullFunction;


/**
 * Check if a property can be accessed without throwing an exception.
 * @param {Object} obj The owner of the property.
 * @param {string} prop The property name.
 * @return {boolean} Whether the property is accessible. Will also return true
 *     if obj is null.
 */
goog.reflect.canAccessProperty = function(obj, prop) {
  /** @preserveTry */
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {}
  return false;
};

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A patched, standardized event object for browser events.
 *
 * <pre>
 * The patched event object contains the following members:
 * - type           {string}    Event type, e.g. 'click'
 * - target         {Object}    The element that actually triggered the event
 * - currentTarget  {Object}    The element the listener is attached to
 * - relatedTarget  {Object}    For mouseover and mouseout, the previous object
 * - offsetX        {number}    X-coordinate relative to target
 * - offsetY        {number}    Y-coordinate relative to target
 * - clientX        {number}    X-coordinate relative to viewport
 * - clientY        {number}    Y-coordinate relative to viewport
 * - screenX        {number}    X-coordinate relative to the edge of the screen
 * - screenY        {number}    Y-coordinate relative to the edge of the screen
 * - button         {number}    Mouse button. Use isButton() to test.
 * - keyCode        {number}    Key-code
 * - ctrlKey        {boolean}   Was ctrl key depressed
 * - altKey         {boolean}   Was alt key depressed
 * - shiftKey       {boolean}   Was shift key depressed
 * - metaKey        {boolean}   Was meta key depressed
 * - defaultPrevented {boolean} Whether the default action has been prevented
 * - state          {Object}    History state object
 *
 * NOTE: The keyCode member contains the raw browser keyCode. For normalized
 * key and character code use {@link goog.events.KeyHandler}.
 * </pre>
 *
 * @author arv@google.com (Erik Arvidsson)
 */

goog.provide('goog.events.BrowserEvent');
goog.provide('goog.events.BrowserEvent.MouseButton');

goog.require('goog.events.BrowserFeature');
goog.require('goog.events.Event');
goog.require('goog.events.EventType');
goog.require('goog.reflect');
goog.require('goog.userAgent');



/**
 * Accepts a browser event object and creates a patched, cross browser event
 * object.
 * The content of this object will not be initialized if no event object is
 * provided. If this is the case, init() needs to be invoked separately.
 * @param {Event=} opt_e Browser event object.
 * @param {EventTarget=} opt_currentTarget Current target for event.
 * @constructor
 * @extends {goog.events.Event}
 */
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, 'constructor', opt_e ? opt_e.type : '');

  /**
   * Target that fired the event.
   * @override
   * @type {Node}
   */
  this.target = null;

  /**
   * Node that had the listener attached.
   * @override
   * @type {Node|undefined}
   */
  this.currentTarget = null;

  /**
   * For mouseover and mouseout events, the related object for the event.
   * @type {Node}
   */
  this.relatedTarget = null;

  /**
   * X-coordinate relative to target.
   * @type {number}
   */
  this.offsetX = 0;

  /**
   * Y-coordinate relative to target.
   * @type {number}
   */
  this.offsetY = 0;

  /**
   * X-coordinate relative to the window.
   * @type {number}
   */
  this.clientX = 0;

  /**
   * Y-coordinate relative to the window.
   * @type {number}
   */
  this.clientY = 0;

  /**
   * X-coordinate relative to the monitor.
   * @type {number}
   */
  this.screenX = 0;

  /**
   * Y-coordinate relative to the monitor.
   * @type {number}
   */
  this.screenY = 0;

  /**
   * Which mouse button was pressed.
   * @type {number}
   */
  this.button = 0;

  /**
   * Keycode of key press.
   * @type {number}
   */
  this.keyCode = 0;

  /**
   * Keycode of key press.
   * @type {number}
   */
  this.charCode = 0;

  /**
   * Whether control was pressed at time of event.
   * @type {boolean}
   */
  this.ctrlKey = false;

  /**
   * Whether alt was pressed at time of event.
   * @type {boolean}
   */
  this.altKey = false;

  /**
   * Whether shift was pressed at time of event.
   * @type {boolean}
   */
  this.shiftKey = false;

  /**
   * Whether the meta key was pressed at time of event.
   * @type {boolean}
   */
  this.metaKey = false;

  /**
   * History state object, only set for PopState events where it's a copy of the
   * state object provided to pushState or replaceState.
   * @type {Object}
   */
  this.state = null;

  /**
   * Whether the default platform modifier key was pressed at time of event.
   * (This is control for all platforms except Mac, where it's Meta.)
   * @type {boolean}
   */
  this.platformModifierKey = false;

  /**
   * The browser event object.
   * @private {Event}
   */
  this.event_ = null;

  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);


/**
 * Normalized button constants for the mouse.
 * @enum {number}
 */
goog.events.BrowserEvent.MouseButton = {
  LEFT: 0,
  MIDDLE: 1,
  RIGHT: 2
};


/**
 * Static data for mapping mouse buttons.
 * @type {!Array<number>}
 */
goog.events.BrowserEvent.IEButtonMap = [
  1, // LEFT
  4, // MIDDLE
  2  // RIGHT
];


/**
 * Accepts a browser event object and creates a patched, cross browser event
 * object.
 * @param {Event} e Browser event object.
 * @param {EventTarget=} opt_currentTarget Current target for event.
 */
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;

  /**
   * On touch devices use the first "changed touch" as the relevant touch.
   * @type {Touch}
   */
  var relevantTouch = e.changedTouches ? e.changedTouches[0] : null;

  // TODO(nicksantos): Change this.target to type EventTarget.
  this.target = /** @type {Node} */ (e.target) || e.srcElement;

  // TODO(nicksantos): Change this.currentTarget to type EventTarget.
  this.currentTarget = /** @type {Node} */ (opt_currentTarget);

  var relatedTarget = /** @type {Node} */ (e.relatedTarget);
  if (relatedTarget) {
    // There's a bug in FireFox where sometimes, relatedTarget will be a
    // chrome element, and accessing any property of it will get a permission
    // denied exception. See:
    // https://bugzilla.mozilla.org/show_bug.cgi?id=497780
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, 'nodeName')) {
        relatedTarget = null;
      }
    }
    // TODO(arv): Use goog.events.EventType when it has been refactored into its
    // own file.
  } else if (type == goog.events.EventType.MOUSEOVER) {
    relatedTarget = e.fromElement;
  } else if (type == goog.events.EventType.MOUSEOUT) {
    relatedTarget = e.toElement;
  }

  this.relatedTarget = relatedTarget;

  if (!goog.isNull(relevantTouch)) {
    this.clientX = relevantTouch.clientX !== undefined ?
        relevantTouch.clientX : relevantTouch.pageX;
    this.clientY = relevantTouch.clientY !== undefined ?
        relevantTouch.clientY : relevantTouch.pageY;
    this.screenX = relevantTouch.screenX || 0;
    this.screenY = relevantTouch.screenY || 0;
  } else {
    // Webkit emits a lame warning whenever layerX/layerY is accessed.
    // http://code.google.com/p/chromium/issues/detail?id=101733
    this.offsetX = (goog.userAgent.WEBKIT || e.offsetX !== undefined) ?
        e.offsetX : e.layerX;
    this.offsetY = (goog.userAgent.WEBKIT || e.offsetY !== undefined) ?
        e.offsetY : e.layerY;
    this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
    this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
    this.screenX = e.screenX || 0;
    this.screenY = e.screenY || 0;
  }

  this.button = e.button;

  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == 'keypress' ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};


/**
 * Tests to see which button was pressed during the event. This is really only
 * useful in IE and Gecko browsers. And in IE, it's only useful for
 * mousedown/mouseup events, because click only fires for the left mouse button.
 *
 * Safari 2 only reports the left button being clicked, and uses the value '1'
 * instead of 0. Opera only reports a mousedown event for the middle button, and
 * no mouse events for the right button. Opera has default behavior for left and
 * middle click that can only be overridden via a configuration setting.
 *
 * There's a nice table of this mess at http://www.unixpapa.com/js/mouse.html.
 *
 * @param {goog.events.BrowserEvent.MouseButton} button The button
 *     to test for.
 * @return {boolean} True if button was pressed.
 */
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == 'click') {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return !!(this.event_.button &
          goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};


/**
 * Whether this has an "action"-producing mouse button.
 *
 * By definition, this includes left-click on windows/linux, and left-click
 * without the ctrl key on Macs.
 *
 * @return {boolean} The result.
 */
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  // Webkit does not ctrl+click to be a right-click, so we
  // normalize it to behave like Gecko and Opera.
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) &&
      !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};


/**
 * @override
 */
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};


/**
 * @override
 */
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      /** @preserveTry */
      try {
        // Most keys can be prevented using returnValue. Some special keys
        // require setting the keyCode to -1 as well:
        //
        // In IE7:
        // F3, F5, F10, F11, Ctrl+P, Crtl+O, Ctrl+F (these are taken from IE6)
        //
        // In IE8:
        // Ctrl+P, Crtl+O, Ctrl+F (F1-F12 cannot be stopped through the event)
        //
        // We therefore do this for all function keys as well as when Ctrl key
        // is pressed.
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
        // IE throws an 'access denied' exception when trying to change
        // keyCode in some situations (e.g. srcElement is input[type=file],
        // or srcElement is an anchor tag rewritten by parent's innerHTML).
        // Do nothing in this case.
      }
    }
  } else {
    be.preventDefault();
  }
};


/**
 * @return {Event} The underlying browser event object.
 */
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};

// Copyright 2012 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview An interface for a listenable JavaScript object.
 * @author chrishenry@google.com (Chris Henry)
 */

goog.provide('goog.events.Listenable');
goog.provide('goog.events.ListenableKey');

/** @suppress {extraRequire} */
goog.require('goog.events.EventId');



/**
 * A listenable interface. A listenable is an object with the ability
 * to dispatch/broadcast events to "event listeners" registered via
 * listen/listenOnce.
 *
 * The interface allows for an event propagation mechanism similar
 * to one offered by native browser event targets, such as
 * capture/bubble mechanism, stopping propagation, and preventing
 * default actions. Capture/bubble mechanism depends on the ancestor
 * tree constructed via {@code #getParentEventTarget}; this tree
 * must be directed acyclic graph. The meaning of default action(s)
 * in preventDefault is specific to a particular use case.
 *
 * Implementations that do not support capture/bubble or can not have
 * a parent listenable can simply not implement any ability to set the
 * parent listenable (and have {@code #getParentEventTarget} return
 * null).
 *
 * Implementation of this class can be used with or independently from
 * goog.events.
 *
 * Implementation must call {@code #addImplementation(implClass)}.
 *
 * @interface
 * @see goog.events
 * @see http://www.w3.org/TR/DOM-Level-2-Events/events.html
 */
goog.events.Listenable = function() {};


/**
 * An expando property to indicate that an object implements
 * goog.events.Listenable.
 *
 * See addImplementation/isImplementedBy.
 *
 * @type {string}
 * @const
 */
goog.events.Listenable.IMPLEMENTED_BY_PROP =
    'closure_listenable_' + ((Math.random() * 1e6) | 0);


/**
 * Marks a given class (constructor) as an implementation of
 * Listenable, do that we can query that fact at runtime. The class
 * must have already implemented the interface.
 * @param {!Function} cls The class constructor. The corresponding
 *     class must have already implemented the interface.
 */
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};


/**
 * @param {Object} obj The object to check.
 * @return {boolean} Whether a given instance implements Listenable. The
 *     class/superclass of the instance must call addImplementation.
 */
goog.events.Listenable.isImplementedBy = function(obj) {
  return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};


/**
 * Adds an event listener. A listener can only be added once to an
 * object and if it is added again the key for the listener is
 * returned. Note that if the existing listener is a one-off listener
 * (registered via listenOnce), it will no longer be a one-off
 * listener after a call to listen().
 *
 * @param {string|!goog.events.EventId<EVENTOBJ>} type The event type id.
 * @param {function(this:SCOPE, EVENTOBJ):(boolean|undefined)} listener Callback
 *     method.
 * @param {boolean=} opt_useCapture Whether to fire in capture phase
 *     (defaults to false).
 * @param {SCOPE=} opt_listenerScope Object in whose scope to call the
 *     listener.
 * @return {goog.events.ListenableKey} Unique key for the listener.
 * @template SCOPE,EVENTOBJ
 */
goog.events.Listenable.prototype.listen;


/**
 * Adds an event listener that is removed automatically after the
 * listener fired once.
 *
 * If an existing listener already exists, listenOnce will do
 * nothing. In particular, if the listener was previously registered
 * via listen(), listenOnce() will not turn the listener into a
 * one-off listener. Similarly, if there is already an existing
 * one-off listener, listenOnce does not modify the listeners (it is
 * still a once listener).
 *
 * @param {string|!goog.events.EventId<EVENTOBJ>} type The event type id.
 * @param {function(this:SCOPE, EVENTOBJ):(boolean|undefined)} listener Callback
 *     method.
 * @param {boolean=} opt_useCapture Whether to fire in capture phase
 *     (defaults to false).
 * @param {SCOPE=} opt_listenerScope Object in whose scope to call the
 *     listener.
 * @return {goog.events.ListenableKey} Unique key for the listener.
 * @template SCOPE,EVENTOBJ
 */
goog.events.Listenable.prototype.listenOnce;


/**
 * Removes an event listener which was added with listen() or listenOnce().
 *
 * @param {string|!goog.events.EventId<EVENTOBJ>} type The event type id.
 * @param {function(this:SCOPE, EVENTOBJ):(boolean|undefined)} listener Callback
 *     method.
 * @param {boolean=} opt_useCapture Whether to fire in capture phase
 *     (defaults to false).
 * @param {SCOPE=} opt_listenerScope Object in whose scope to call
 *     the listener.
 * @return {boolean} Whether any listener was removed.
 * @template SCOPE,EVENTOBJ
 */
goog.events.Listenable.prototype.unlisten;


/**
 * Removes an event listener which was added with listen() by the key
 * returned by listen().
 *
 * @param {goog.events.ListenableKey} key The key returned by
 *     listen() or listenOnce().
 * @return {boolean} Whether any listener was removed.
 */
goog.events.Listenable.prototype.unlistenByKey;


/**
 * Dispatches an event (or event like object) and calls all listeners
 * listening for events of this type. The type of the event is decided by the
 * type property on the event object.
 *
 * If any of the listeners returns false OR calls preventDefault then this
 * function will return false.  If one of the capture listeners calls
 * stopPropagation, then the bubble listeners won't fire.
 *
 * @param {goog.events.EventLike} e Event object.
 * @return {boolean} If anyone called preventDefault on the event object (or
 *     if any of the listeners returns false) this will also return false.
 */
goog.events.Listenable.prototype.dispatchEvent;


/**
 * Removes all listeners from this listenable. If type is specified,
 * it will only remove listeners of the particular type. otherwise all
 * registered listeners will be removed.
 *
 * @param {string=} opt_type Type of event to remove, default is to
 *     remove all types.
 * @return {number} Number of listeners removed.
 */
goog.events.Listenable.prototype.removeAllListeners;


/**
 * Returns the parent of this event target to use for capture/bubble
 * mechanism.
 *
 * NOTE(chrishenry): The name reflects the original implementation of
 * custom event target ({@code goog.events.EventTarget}). We decided
 * that changing the name is not worth it.
 *
 * @return {goog.events.Listenable} The parent EventTarget or null if
 *     there is no parent.
 */
goog.events.Listenable.prototype.getParentEventTarget;


/**
 * Fires all registered listeners in this listenable for the given
 * type and capture mode, passing them the given eventObject. This
 * does not perform actual capture/bubble. Only implementors of the
 * interface should be using this.
 *
 * @param {string|!goog.events.EventId<EVENTOBJ>} type The type of the
 *     listeners to fire.
 * @param {boolean} capture The capture mode of the listeners to fire.
 * @param {EVENTOBJ} eventObject The event object to fire.
 * @return {boolean} Whether all listeners succeeded without
 *     attempting to prevent default behavior. If any listener returns
 *     false or called goog.events.Event#preventDefault, this returns
 *     false.
 * @template EVENTOBJ
 */
goog.events.Listenable.prototype.fireListeners;


/**
 * Gets all listeners in this listenable for the given type and
 * capture mode.
 *
 * @param {string|!goog.events.EventId} type The type of the listeners to fire.
 * @param {boolean} capture The capture mode of the listeners to fire.
 * @return {!Array<goog.events.ListenableKey>} An array of registered
 *     listeners.
 * @template EVENTOBJ
 */
goog.events.Listenable.prototype.getListeners;


/**
 * Gets the goog.events.ListenableKey for the event or null if no such
 * listener is in use.
 *
 * @param {string|!goog.events.EventId<EVENTOBJ>} type The name of the event
 *     without the 'on' prefix.
 * @param {function(this:SCOPE, EVENTOBJ):(boolean|undefined)} listener The
 *     listener function to get.
 * @param {boolean} capture Whether the listener is a capturing listener.
 * @param {SCOPE=} opt_listenerScope Object in whose scope to call the
 *     listener.
 * @return {goog.events.ListenableKey} the found listener or null if not found.
 * @template SCOPE,EVENTOBJ
 */
goog.events.Listenable.prototype.getListener;


/**
 * Whether there is any active listeners matching the specified
 * signature. If either the type or capture parameters are
 * unspecified, the function will match on the remaining criteria.
 *
 * @param {string|!goog.events.EventId<EVENTOBJ>=} opt_type Event type.
 * @param {boolean=} opt_capture Whether to check for capture or bubble
 *     listeners.
 * @return {boolean} Whether there is any active listeners matching
 *     the requested type and/or capture phase.
 * @template EVENTOBJ
 */
goog.events.Listenable.prototype.hasListener;



/**
 * An interface that describes a single registered listener.
 * @interface
 */
goog.events.ListenableKey = function() {};


/**
 * Counter used to create a unique key
 * @type {number}
 * @private
 */
goog.events.ListenableKey.counter_ = 0;


/**
 * Reserves a key to be used for ListenableKey#key field.
 * @return {number} A number to be used to fill ListenableKey#key
 *     field.
 */
goog.events.ListenableKey.reserveKey = function() {
  return ++goog.events.ListenableKey.counter_;
};


/**
 * The source event target.
 * @type {!(Object|goog.events.Listenable|goog.events.EventTarget)}
 */
goog.events.ListenableKey.prototype.src;


/**
 * The event type the listener is listening to.
 * @type {string}
 */
goog.events.ListenableKey.prototype.type;


/**
 * The listener function.
 * @type {function(?):?|{handleEvent:function(?):?}|null}
 */
goog.events.ListenableKey.prototype.listener;


/**
 * Whether the listener works on capture phase.
 * @type {boolean}
 */
goog.events.ListenableKey.prototype.capture;


/**
 * The 'this' object for the listener function's scope.
 * @type {Object}
 */
goog.events.ListenableKey.prototype.handler;


/**
 * A globally unique number to identify the key.
 * @type {number}
 */
goog.events.ListenableKey.prototype.key;

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Listener object.
 * @see ../demos/events.html
 */

goog.provide('goog.events.Listener');

goog.require('goog.events.ListenableKey');



/**
 * Simple class that stores information about a listener
 * @param {!Function} listener Callback function.
 * @param {Function} proxy Wrapper for the listener that patches the event.
 * @param {EventTarget|goog.events.Listenable} src Source object for
 *     the event.
 * @param {string} type Event type.
 * @param {boolean} capture Whether in capture or bubble phase.
 * @param {Object=} opt_handler Object in whose context to execute the callback.
 * @implements {goog.events.ListenableKey}
 * @constructor
 */
goog.events.Listener = function(
    listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = new Error().stack;
  }

  /**
   * Callback function.
   * @type {Function}
   */
  this.listener = listener;

  /**
   * A wrapper over the original listener. This is used solely to
   * handle native browser events (it is used to simulate the capture
   * phase and to patch the event object).
   * @type {Function}
   */
  this.proxy = proxy;

  /**
   * Object or node that callback is listening to
   * @type {EventTarget|goog.events.Listenable}
   */
  this.src = src;

  /**
   * The event type.
   * @const {string}
   */
  this.type = type;

  /**
   * Whether the listener is being called in the capture or bubble phase
   * @const {boolean}
   */
  this.capture = !!capture;

  /**
   * Optional object whose context to execute the listener in
   * @type {Object|undefined}
   */
  this.handler = opt_handler;

  /**
   * The key of the listener.
   * @const {number}
   * @override
   */
  this.key = goog.events.ListenableKey.reserveKey();

  /**
   * Whether to remove the listener after it has been called.
   * @type {boolean}
   */
  this.callOnce = false;

  /**
   * Whether the listener has been removed.
   * @type {boolean}
   */
  this.removed = false;
};


/**
 * @define {boolean} Whether to enable the monitoring of the
 *     goog.events.Listener instances. Switching on the monitoring is only
 *     recommended for debugging because it has a significant impact on
 *     performance and memory usage. If switched off, the monitoring code
 *     compiles down to 0 bytes.
 */
goog.define('goog.events.Listener.ENABLE_MONITORING', false);


/**
 * If monitoring the goog.events.Listener instances is enabled, stores the
 * creation stack trace of the Disposable instance.
 * @type {string}
 */
goog.events.Listener.prototype.creationStack;


/**
 * Marks this listener as removed. This also remove references held by
 * this listener object (such as listener and event source).
 */
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A map of listeners that provides utility functions to
 * deal with listeners on an event target. Used by
 * {@code goog.events.EventTarget}.
 *
 * WARNING: Do not use this class from outside goog.events package.
 *
 * @visibility {//closure/goog/bin/sizetests:__pkg__}
 * @visibility {//closure/goog/events:__pkg__}
 * @visibility {//closure/goog/labs/events:__pkg__}
 */

goog.provide('goog.events.ListenerMap');

goog.require('goog.array');
goog.require('goog.events.Listener');
goog.require('goog.object');



/**
 * Creates a new listener map.
 * @param {EventTarget|goog.events.Listenable} src The src object.
 * @constructor
 * @final
 */
goog.events.ListenerMap = function(src) {
  /** @type {EventTarget|goog.events.Listenable} */
  this.src = src;

  /**
   * Maps of event type to an array of listeners.
   * @type {Object<string, !Array<!goog.events.Listener>>}
   */
  this.listeners = {};

  /**
   * The count of types in this map that have registered listeners.
   * @private {number}
   */
  this.typeCount_ = 0;
};


/**
 * @return {number} The count of event types in this map that actually
 *     have registered listeners.
 */
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};


/**
 * @return {number} Total number of registered listeners.
 */
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};


/**
 * Adds an event listener. A listener can only be added once to an
 * object and if it is added again the key for the listener is
 * returned.
 *
 * Note that a one-off listener will not change an existing listener,
 * if any. On the other hand a normal listener will change existing
 * one-off listener to become a normal listener.
 *
 * @param {string|!goog.events.EventId} type The listener event type.
 * @param {!Function} listener This listener callback method.
 * @param {boolean} callOnce Whether the listener is a one-off
 *     listener.
 * @param {boolean=} opt_useCapture The capture mode of the listener.
 * @param {Object=} opt_listenerScope Object in whose scope to call the
 *     listener.
 * @return {goog.events.ListenableKey} Unique key for the listener.
 */
goog.events.ListenerMap.prototype.add = function(
    type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }

  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(
      listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      // Ensure that, if there is an existing callOnce listener, it is no
      // longer a callOnce listener.
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(
        listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};


/**
 * Removes a matching listener.
 * @param {string|!goog.events.EventId} type The listener event type.
 * @param {!Function} listener This listener callback method.
 * @param {boolean=} opt_useCapture The capture mode of the listener.
 * @param {Object=} opt_listenerScope Object in whose scope to call the
 *     listener.
 * @return {boolean} Whether any listener was removed.
 */
goog.events.ListenerMap.prototype.remove = function(
    type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }

  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(
      listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};


/**
 * Removes the given listener object.
 * @param {goog.events.ListenableKey} listener The listener to remove.
 * @return {boolean} Whether the listener is removed.
 */
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }

  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};


/**
 * Removes all listeners from this map. If opt_type is provided, only
 * listeners that match the given type are removed.
 * @param {string|!goog.events.EventId=} opt_type Type of event to remove.
 * @return {number} Number of listeners removed.
 */
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0; i < listenerArray.length; i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};


/**
 * Gets all listeners that match the given type and capture mode. The
 * returned array is a copy (but the listener objects are not).
 * @param {string|!goog.events.EventId} type The type of the listeners
 *     to retrieve.
 * @param {boolean} capture The capture mode of the listeners to retrieve.
 * @return {!Array<goog.events.ListenableKey>} An array of matching
 *     listeners.
 */
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0; i < listenerArray.length; ++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};


/**
 * Gets the goog.events.ListenableKey for the event or null if no such
 * listener is in use.
 *
 * @param {string|!goog.events.EventId} type The type of the listener
 *     to retrieve.
 * @param {!Function} listener The listener function to get.
 * @param {boolean} capture Whether the listener is a capturing listener.
 * @param {Object=} opt_listenerScope Object in whose scope to call the
 *     listener.
 * @return {goog.events.ListenableKey} the found listener or null if not found.
 */
goog.events.ListenerMap.prototype.getListener = function(
    type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(
        listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};


/**
 * Whether there is a matching listener. If either the type or capture
 * parameters are unspecified, the function will match on the
 * remaining criteria.
 *
 * @param {string|!goog.events.EventId=} opt_type The type of the listener.
 * @param {boolean=} opt_capture The capture mode of the listener.
 * @return {boolean} Whether there is an active listener matching
 *     the requested type and/or capture phase.
 */
goog.events.ListenerMap.prototype.hasListener = function(
    opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : '';
  var hasCapture = goog.isDef(opt_capture);

  return goog.object.some(
      this.listeners, function(listenerArray, type) {
        for (var i = 0; i < listenerArray.length; ++i) {
          if ((!hasType || listenerArray[i].type == typeStr) &&
              (!hasCapture || listenerArray[i].capture == opt_capture)) {
            return true;
          }
        }

        return false;
      });
};


/**
 * Finds the index of a matching goog.events.Listener in the given
 * listenerArray.
 * @param {!Array<!goog.events.Listener>} listenerArray Array of listener.
 * @param {!Function} listener The listener function.
 * @param {boolean=} opt_useCapture The capture flag for the listener.
 * @param {Object=} opt_listenerScope The listener scope.
 * @return {number} The index of the matching listener within the
 *     listenerArray.
 * @private
 */
goog.events.ListenerMap.findListenerIndex_ = function(
    listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0; i < listenerArray.length; ++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed &&
        listenerObj.listener == listener &&
        listenerObj.capture == !!opt_useCapture &&
        listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return -1;
};

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview An event manager for both native browser event
 * targets and custom JavaScript event targets
 * ({@code goog.events.Listenable}). This provides an abstraction
 * over browsers' event systems.
 *
 * It also provides a simulation of W3C event model's capture phase in
 * Internet Explorer (IE 8 and below). Caveat: the simulation does not
 * interact well with listeners registered directly on the elements
 * (bypassing goog.events) or even with listeners registered via
 * goog.events in a separate JS binary. In these cases, we provide
 * no ordering guarantees.
 *
 * The listeners will receive a "patched" event object. Such event object
 * contains normalized values for certain event properties that differs in
 * different browsers.
 *
 * Example usage:
 * <pre>
 * goog.events.listen(myNode, 'click', function(e) { alert('woo') });
 * goog.events.listen(myNode, 'mouseover', mouseHandler, true);
 * goog.events.unlisten(myNode, 'mouseover', mouseHandler, true);
 * goog.events.removeAll(myNode);
 * </pre>
 *
 *                                            in IE and event object patching]
 * @author arv@google.com (Erik Arvidsson)
 *
 * @see ../demos/events.html
 * @see ../demos/event-propagation.html
 * @see ../demos/stopevent.html
 */

// IMPLEMENTATION NOTES:
// goog.events stores an auxiliary data structure on each EventTarget
// source being listened on. This allows us to take advantage of GC,
// having the data structure GC'd when the EventTarget is GC'd. This
// GC behavior is equivalent to using W3C DOM Events directly.

goog.provide('goog.events');
goog.provide('goog.events.CaptureSimulationMode');
goog.provide('goog.events.Key');
goog.provide('goog.events.ListenableType');

goog.require('goog.asserts');
goog.require('goog.debug.entryPointRegistry');
goog.require('goog.events.BrowserEvent');
goog.require('goog.events.BrowserFeature');
goog.require('goog.events.Listenable');
goog.require('goog.events.ListenerMap');

goog.forwardDeclare('goog.debug.ErrorHandler');
goog.forwardDeclare('goog.events.EventWrapper');


/**
 * @typedef {number|goog.events.ListenableKey}
 */
goog.events.Key;


/**
 * @typedef {EventTarget|goog.events.Listenable}
 */
goog.events.ListenableType;


/**
 * Property name on a native event target for the listener map
 * associated with the event target.
 * @private @const {string}
 */
goog.events.LISTENER_MAP_PROP_ = 'closure_lm_' + ((Math.random() * 1e6) | 0);


/**
 * String used to prepend to IE event types.
 * @const
 * @private
 */
goog.events.onString_ = 'on';


/**
 * Map of computed "on<eventname>" strings for IE event types. Caching
 * this removes an extra object allocation in goog.events.listen which
 * improves IE6 performance.
 * @const
 * @dict
 * @private
 */
goog.events.onStringMap_ = {};


/**
 * @enum {number} Different capture simulation mode for IE8-.
 */
goog.events.CaptureSimulationMode = {
  /**
   * Does not perform capture simulation. Will asserts in IE8- when you
   * add capture listeners.
   */
  OFF_AND_FAIL: 0,

  /**
   * Does not perform capture simulation, silently ignore capture
   * listeners.
   */
  OFF_AND_SILENT: 1,

  /**
   * Performs capture simulation.
   */
  ON: 2
};


/**
 * @define {number} The capture simulation mode for IE8-. By default,
 *     this is ON.
 */
goog.define('goog.events.CAPTURE_SIMULATION_MODE', 2);


/**
 * Estimated count of total native listeners.
 * @private {number}
 */
goog.events.listenerCountEstimate_ = 0;


/**
 * Adds an event listener for a specific event on a native event
 * target (such as a DOM element) or an object that has implemented
 * {@link goog.events.Listenable}. A listener can only be added once
 * to an object and if it is added again the key for the listener is
 * returned. Note that if the existing listener is a one-off listener
 * (registered via listenOnce), it will no longer be a one-off
 * listener after a call to listen().
 *
 * @param {EventTarget|goog.events.Listenable} src The node to listen
 *     to events on.
 * @param {string|Array<string>|
 *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}
 *     type Event type or array of event types.
 * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(?):?}|null}
 *     listener Callback method, or an object with a handleEvent function.
 *     WARNING: passing an Object is now softly deprecated.
 * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to
 *     false).
 * @param {T=} opt_handler Element in whose scope to call the listener.
 * @return {goog.events.Key} Unique key for the listener.
 * @template T,EVENTOBJ
 */
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }

  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen(
        /** @type {string|!goog.events.EventId} */ (type),
        listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_(
        /** @type {!EventTarget} */ (src),
        /** @type {string|!goog.events.EventId} */ (type),
        listener, /* callOnce */ false, opt_capt, opt_handler);
  }
};


/**
 * Adds an event listener for a specific event on a native event
 * target. A listener can only be added once to an object and if it
 * is added again the key for the listener is returned.
 *
 * Note that a one-off listener will not change an existing listener,
 * if any. On the other hand a normal listener will change existing
 * one-off listener to become a normal listener.
 *
 * @param {EventTarget} src The node to listen to events on.
 * @param {string|!goog.events.EventId} type Event type.
 * @param {!Function} listener Callback function.
 * @param {boolean} callOnce Whether the listener is a one-off
 *     listener or otherwise.
 * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to
 *     false).
 * @param {Object=} opt_handler Element in whose scope to call the listener.
 * @return {goog.events.ListenableKey} Unique key for the listener.
 * @private
 */
goog.events.listen_ = function(
    src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error('Invalid event type');
  }

  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE ==
        goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail('Can not register capture listener in IE8-.');
      return null;
    } else if (goog.events.CAPTURE_SIMULATION_MODE ==
        goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
      return null;
    }
  }

  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap =
        new goog.events.ListenerMap(src);
  }

  var listenerObj = listenerMap.add(
      type, listener, callOnce, opt_capt, opt_handler);

  // If the listenerObj already has a proxy, it has been set up
  // previously. We simply return.
  if (listenerObj.proxy) {
    return listenerObj;
  }

  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;

  proxy.src = src;
  proxy.listener = listenerObj;

  // Attach the proxy through the browser's API
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else if (src.attachEvent) {
    // The else if above used to be an unconditional else. It would call
    // exception on IE11, spoiling the day of some callers. The previous
    // incarnation of this code, from 2007, indicates that it replaced an
    // earlier still version that caused excess allocations on IE6.
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  } else {
    throw Error('addEventListener and attachEvent are unavailable.');
  }

  goog.events.listenerCountEstimate_++;
  return listenerObj;
};


/**
 * Helper function for returning a proxy function.
 * @return {!Function} A new or reused function object.
 */
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  // Use a local var f to prevent one allocation.
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ?
      function(eventObject) {
        return proxyCallbackFunction.call(f.src, f.listener, eventObject);
      } :
      function(eventObject) {
        var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
        // NOTE(chrishenry): In IE, we hack in a capture phase. However, if
        // there is inline event handler which tries to prevent default (for
        // example <a href="..." onclick="return false">...</a>) in a
        // descendant element, the prevent default will be overridden
        // by this listener if this listener were to return true. Hence, we
        // return undefined.
        if (!v) return v;
      };
  return f;
};


/**
 * Adds an event listener for a specific event on a native event
 * target (such as a DOM element) or an object that has implemented
 * {@link goog.events.Listenable}. After the event has fired the event
 * listener is removed from the target.
 *
 * If an existing listener already exists, listenOnce will do
 * nothing. In particular, if the listener was previously registered
 * via listen(), listenOnce() will not turn the listener into a
 * one-off listener. Similarly, if there is already an existing
 * one-off listener, listenOnce does not modify the listeners (it is
 * still a once listener).
 *
 * @param {EventTarget|goog.events.Listenable} src The node to listen
 *     to events on.
 * @param {string|Array<string>|
 *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}
 *     type Event type or array of event types.
 * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(?):?}|null}
 *     listener Callback method.
 * @param {boolean=} opt_capt Fire in capture phase?.
 * @param {T=} opt_handler Element in whose scope to call the listener.
 * @return {goog.events.Key} Unique key for the listener.
 * @template T,EVENTOBJ
 */
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }

  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce(
        /** @type {string|!goog.events.EventId} */ (type),
        listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_(
        /** @type {!EventTarget} */ (src),
        /** @type {string|!goog.events.EventId} */ (type),
        listener, /* callOnce */ true, opt_capt, opt_handler);
  }
};


/**
 * Adds an event listener with a specific event wrapper on a DOM Node or an
 * object that has implemented {@link goog.events.Listenable}. A listener can
 * only be added once to an object.
 *
 * @param {EventTarget|goog.events.Listenable} src The target to
 *     listen to events on.
 * @param {goog.events.EventWrapper} wrapper Event wrapper to use.
 * @param {function(this:T, ?):?|{handleEvent:function(?):?}|null} listener
 *     Callback method, or an object with a handleEvent function.
 * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to
 *     false).
 * @param {T=} opt_handler Element in whose scope to call the listener.
 * @template T
 */
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt,
    opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};


/**
 * Removes an event listener which was added with listen().
 *
 * @param {EventTarget|goog.events.Listenable} src The target to stop
 *     listening to events on.
 * @param {string|Array<string>|
 *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}
 *     type Event type or array of event types to unlisten to.
 * @param {function(?):?|{handleEvent:function(?):?}|null} listener The
 *     listener function to remove.
 * @param {boolean=} opt_capt In DOM-compliant browsers, this determines
 *     whether the listener is fired during the capture or bubble phase of the
 *     event.
 * @param {Object=} opt_handler Element in whose scope to call the listener.
 * @return {?boolean} indicating whether the listener was there to remove.
 * @template EVENTOBJ
 */
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }

  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten(
        /** @type {string|!goog.events.EventId} */ (type),
        listener, opt_capt, opt_handler);
  }

  if (!src) {
    // TODO(chrishenry): We should tighten the API to only accept
    // non-null objects, or add an assertion here.
    return false;
  }

  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_(
      /** @type {!EventTarget} */ (src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener(
        /** @type {string|!goog.events.EventId} */ (type),
        listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }

  return false;
};


/**
 * Removes an event listener which was added with listen() by the key
 * returned by listen().
 *
 * @param {goog.events.Key} key The key returned by listen() for this
 *     event listener.
 * @return {boolean} indicating whether the listener was there to remove.
 */
goog.events.unlistenByKey = function(key) {
  // TODO(chrishenry): Remove this check when tests that rely on this
  // are fixed.
  if (goog.isNumber(key)) {
    return false;
  }

  var listener = key;
  if (!listener || listener.removed) {
    return false;
  }

  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }

  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else if (src.detachEvent) {
    src.detachEvent(goog.events.getOnString_(type), proxy);
  }
  goog.events.listenerCountEstimate_--;

  var listenerMap = goog.events.getListenerMap_(
      /** @type {!EventTarget} */ (src));
  // TODO(chrishenry): Try to remove this conditional and execute the
  // first branch always. This should be safe.
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      // Null the src, just because this is simple to do (and useful
      // for IE <= 7).
      listenerMap.src = null;
      // We don't use delete here because IE does not allow delete
      // on a window object.
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }

  return true;
};


/**
 * Removes an event listener which was added with listenWithWrapper().
 *
 * @param {EventTarget|goog.events.Listenable} src The target to stop
 *     listening to events on.
 * @param {goog.events.EventWrapper} wrapper Event wrapper to use.
 * @param {function(?):?|{handleEvent:function(?):?}|null} listener The
 *     listener function to remove.
 * @param {boolean=} opt_capt In DOM-compliant browsers, this determines
 *     whether the listener is fired during the capture or bubble phase of the
 *     event.
 * @param {Object=} opt_handler Element in whose scope to call the listener.
 */
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt,
    opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};


/**
 * Removes all listeners from an object. You can also optionally
 * remove listeners of a particular type.
 *
 * @param {Object|undefined} obj Object to remove listeners from. Must be an
 *     EventTarget or a goog.events.Listenable.
 * @param {string|!goog.events.EventId=} opt_type Type of event to remove.
 *     Default is all types.
 * @return {number} Number of listeners removed.
 */
goog.events.removeAll = function(obj, opt_type) {
  // TODO(chrishenry): Change the type of obj to
  // (!EventTarget|!goog.events.Listenable).

  if (!obj) {
    return 0;
  }

  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }

  var listenerMap = goog.events.getListenerMap_(
      /** @type {!EventTarget} */ (obj));
  if (!listenerMap) {
    return 0;
  }

  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      // Clone so that we don't need to worry about unlistenByKey
      // changing the content of the ListenerMap.
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0; i < listeners.length; ++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};


/**
 * Gets the listeners for a given object, type and capture phase.
 *
 * @param {Object} obj Object to get listeners for.
 * @param {string|!goog.events.EventId} type Event type.
 * @param {boolean} capture Capture phase?.
 * @return {Array<goog.events.Listener>} Array of listener objects.
 */
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      // TODO(chrishenry): We should tighten the API to accept
      // !EventTarget|goog.events.Listenable, and add an assertion here.
      return [];
    }

    var listenerMap = goog.events.getListenerMap_(
        /** @type {!EventTarget} */ (obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};


/**
 * Gets the goog.events.Listener for the event or null if no such listener is
 * in use.
 *
 * @param {EventTarget|goog.events.Listenable} src The target from
 *     which to get listeners.
 * @param {?string|!goog.events.EventId<EVENTOBJ>} type The type of the event.
 * @param {function(EVENTOBJ):?|{handleEvent:function(?):?}|null} listener The
 *     listener function to get.
 * @param {boolean=} opt_capt In DOM-compliant browsers, this determines
 *                            whether the listener is fired during the
 *                            capture or bubble phase of the event.
 * @param {Object=} opt_handler Element in whose scope to call the listener.
 * @return {goog.events.ListenableKey} the found listener or null if not found.
 * @template EVENTOBJ
 */
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  // TODO(chrishenry): Change type from ?string to string, or add assertion.
  type = /** @type {string} */ (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }

  if (!src) {
    // TODO(chrishenry): We should tighten the API to only accept
    // non-null objects, or add an assertion here.
    return null;
  }

  var listenerMap = goog.events.getListenerMap_(
      /** @type {!EventTarget} */ (src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};


/**
 * Returns whether an event target has any active listeners matching the
 * specified signature. If either the type or capture parameters are
 * unspecified, the function will match on the remaining criteria.
 *
 * @param {EventTarget|goog.events.Listenable} obj Target to get
 *     listeners for.
 * @param {string|!goog.events.EventId=} opt_type Event type.
 * @param {boolean=} opt_capture Whether to check for capture or bubble-phase
 *     listeners.
 * @return {boolean} Whether an event target has one or more listeners matching
 *     the requested type and/or capture phase.
 */
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }

  var listenerMap = goog.events.getListenerMap_(
      /** @type {!EventTarget} */ (obj));
  return !!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};


/**
 * Provides a nice string showing the normalized event objects public members
 * @param {Object} e Event Object.
 * @return {string} String of the public members of the normalized event object.
 */
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + ' = ' + e[key] + ' (' + e[key].id + ')');
    } else {
      str.push(key + ' = ' + e[key]);
    }
  }
  return str.join('\n');
};


/**
 * Returns a string with on prepended to the specified type. This is used for IE
 * which expects "on" to be prepended. This function caches the string in order
 * to avoid extra allocations in steady state.
 * @param {string} type Event type.
 * @return {string} The type string with 'on' prepended.
 * @private
 */
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};


/**
 * Fires an object's listeners of a particular type and phase
 *
 * @param {Object} obj Object whose listeners to call.
 * @param {string|!goog.events.EventId} type Event type.
 * @param {boolean} capture Which event phase.
 * @param {Object} eventObject Event object to be passed to listener.
 * @return {boolean} True if all listeners returned true else false.
 */
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }

  return goog.events.fireListeners_(obj, type, capture, eventObject);
};


/**
 * Fires an object's listeners of a particular type and phase.
 * @param {Object} obj Object whose listeners to call.
 * @param {string|!goog.events.EventId} type Event type.
 * @param {boolean} capture Which event phase.
 * @param {Object} eventObject Event object to be passed to listener.
 * @return {boolean} True if all listeners returned true else false.
 * @private
 */
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  /** @type {boolean} */
  var retval = true;

  var listenerMap = goog.events.getListenerMap_(
      /** @type {EventTarget} */ (obj));
  if (listenerMap) {
    // TODO(chrishenry): Original code avoids array creation when there
    // is no listener, so we do the same. If this optimization turns
    // out to be not required, we can replace this with
    // listenerMap.getListeners(type, capture) instead, which is simpler.
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0; i < listenerArray.length; i++) {
        var listener = listenerArray[i];
        // We might not have a listener if the listener was removed.
        if (listener && listener.capture == capture && !listener.removed) {
          var result = goog.events.fireListener(listener, eventObject);
          retval = retval && (result !== false);
        }
      }
    }
  }
  return retval;
};


/**
 * Fires a listener with a set of arguments
 *
 * @param {goog.events.Listener} listener The listener object to call.
 * @param {Object} eventObject The event object to pass to the listener.
 * @return {boolean} Result of listener.
 */
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;

  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};


/**
 * Gets the total number of listeners currently in the system.
 * @return {number} Number of listeners.
 * @deprecated This returns estimated count, now that Closure no longer
 * stores a central listener registry. We still return an estimation
 * to keep existing listener-related tests passing. In the near future,
 * this function will be removed.
 */
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};


/**
 * Dispatches an event (or event like object) and calls all listeners
 * listening for events of this type. The type of the event is decided by the
 * type property on the event object.
 *
 * If any of the listeners returns false OR calls preventDefault then this
 * function will return false.  If one of the capture listeners calls
 * stopPropagation, then the bubble listeners won't fire.
 *
 * @param {goog.events.Listenable} src The event target.
 * @param {goog.events.EventLike} e Event object.
 * @return {boolean} If anyone called preventDefault on the event object (or
 *     if any of the handlers returns false) this will also return false.
 *     If there are no handlers, or if all handlers return true, this returns
 *     true.
 */
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(
      goog.events.Listenable.isImplementedBy(src),
      'Can not use goog.events.dispatchEvent with ' +
      'non-goog.events.Listenable instance.');
  return src.dispatchEvent(e);
};


/**
 * Installs exception protection for the browser event entry point using the
 * given error handler.
 *
 * @param {goog.debug.ErrorHandler} errorHandler Error handler with which to
 *     protect the entry point.
 */
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(
      goog.events.handleBrowserEvent_);
};


/**
 * Handles an event and dispatches it to the correct listeners. This
 * function is a proxy for the real listener the user specified.
 *
 * @param {goog.events.Listener} listener The listener object.
 * @param {Event=} opt_evt Optional event object that gets passed in via the
 *     native event handlers.
 * @return {boolean} Result of the event handler.
 * @this {EventTarget} The object or Element that fired the event.
 * @private
 */
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }

  // Synthesize event propagation if the browser does not support W3C
  // event model.
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt ||
        /** @type {Event} */ (goog.getObjectByName('window.event'));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    /** @type {boolean} */
    var retval = true;

    if (goog.events.CAPTURE_SIMULATION_MODE ==
            goog.events.CaptureSimulationMode.ON) {
      // If we have not marked this event yet, we should perform capture
      // simulation.
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);

        var ancestors = [];
        for (var parent = evt.currentTarget; parent;
             parent = parent.parentNode) {
          ancestors.push(parent);
        }

        // Fire capture listeners.
        var type = listener.type;
        for (var i = ancestors.length - 1; !evt.propagationStopped_ && i >= 0;
             i--) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, true, evt);
          retval = retval && result;
        }

        // Fire bubble listeners.
        //
        // We can technically rely on IE to perform bubble event
        // propagation. However, it turns out that IE fires events in
        // opposite order of attachEvent registration, which broke
        // some code and tests that rely on the order. (While W3C DOM
        // Level 2 Events TR leaves the event ordering unspecified,
        // modern browsers and W3C DOM Level 3 Events Working Draft
        // actually specify the order as the registration order.)
        for (var i = 0; !evt.propagationStopped_ && i < ancestors.length; i++) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, false, evt);
          retval = retval && result;
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }

  // Otherwise, simply fire the listener.
  return goog.events.fireListener(
      listener, new goog.events.BrowserEvent(opt_evt, this));
};


/**
 * This is used to mark the IE event object so we do not do the Closure pass
 * twice for a bubbling event.
 * @param {Event} e The IE browser event.
 * @private
 */
goog.events.markIeEvent_ = function(e) {
  // Only the keyCode and the returnValue can be changed. We use keyCode for
  // non keyboard events.
  // event.returnValue is a bit more tricky. It is undefined by default. A
  // boolean false prevents the default action. In a window.onbeforeunload and
  // the returnValue is non undefined it will be alerted. However, we will only
  // modify the returnValue for keyboard events. We can get a problem if non
  // closure events sets the keyCode or the returnValue

  var useReturnValue = false;

  if (e.keyCode == 0) {
    // We cannot change the keyCode in case that srcElement is input[type=file].
    // We could test that that is the case but that would allocate 3 objects.
    // If we use try/catch we will only allocate extra objects in the case of a
    // failure.
    /** @preserveTry */
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }

  if (useReturnValue ||
      /** @type {boolean|undefined} */ (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};


/**
 * This is used to check if an IE event has already been handled by the Closure
 * system so we do not do the Closure pass twice for a bubbling event.
 * @param {Event} e  The IE browser event.
 * @return {boolean} True if the event object has been marked.
 * @private
 */
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};


/**
 * Counter to create unique event ids.
 * @private {number}
 */
goog.events.uniqueIdCounter_ = 0;


/**
 * Creates a unique event id.
 *
 * @param {string} identifier The identifier.
 * @return {string} A unique identifier.
 * @idGenerator
 */
goog.events.getUniqueId = function(identifier) {
  return identifier + '_' + goog.events.uniqueIdCounter_++;
};


/**
 * @param {EventTarget} src The source object.
 * @return {goog.events.ListenerMap} A listener map for the given
 *     source object, or null if none exists.
 * @private
 */
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  // IE serializes the property as well (e.g. when serializing outer
  // HTML). So we must check that the value is of the correct type.
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};


/**
 * Expando property for listener function wrapper for Object with
 * handleEvent.
 * @private @const {string}
 */
goog.events.LISTENER_WRAPPER_PROP_ = '__closure_events_fn_' +
    ((Math.random() * 1e9) >>> 0);


/**
 * @param {Object|Function} listener The listener function or an
 *     object that contains handleEvent method.
 * @return {!Function} Either the original function or a function that
 *     calls obj.handleEvent. If the same listener is passed to this
 *     function more than once, the same function is guaranteed to be
 *     returned.
 */
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, 'Listener can not be null.');

  if (goog.isFunction(listener)) {
    return listener;
  }

  goog.asserts.assert(
      listener.handleEvent, 'An object listener must have handleEvent method.');
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] =
        function(e) { return listener.handleEvent(e); };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};


// Register the browser event handler as an entry point, so that
// it can be monitored for exception handling, etc.
goog.debug.entryPointRegistry.register(
    /**
     * @param {function(!Function): !Function} transformer The transforming
     *     function.
     */
    function(transformer) {
      goog.events.handleBrowserEvent_ = transformer(
          goog.events.handleBrowserEvent_);
    });

// Copyright 2007 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A utility class for representing two-dimensional sizes.
 * @author brenneman@google.com (Shawn Brenneman)
 */


goog.provide('goog.math.Size');



/**
 * Class for representing sizes consisting of a width and height. Undefined
 * width and height support is deprecated and results in compiler warning.
 * @param {number} width Width.
 * @param {number} height Height.
 * @struct
 * @constructor
 */
goog.math.Size = function(width, height) {
  /**
   * Width
   * @type {number}
   */
  this.width = width;

  /**
   * Height
   * @type {number}
   */
  this.height = height;
};


/**
 * Compares sizes for equality.
 * @param {goog.math.Size} a A Size.
 * @param {goog.math.Size} b A Size.
 * @return {boolean} True iff the sizes have equal widths and equal
 *     heights, or if both are null.
 */
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};


/**
 * @return {!goog.math.Size} A new copy of the Size.
 */
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};


if (goog.DEBUG) {
  /**
   * Returns a nice string representing size.
   * @return {string} In the form (50 x 73).
   * @override
   */
  goog.math.Size.prototype.toString = function() {
    return '(' + this.width + ' x ' + this.height + ')';
  };
}


/**
 * @return {number} The longer of the two dimensions in the size.
 */
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};


/**
 * @return {number} The shorter of the two dimensions in the size.
 */
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};


/**
 * @return {number} The area of the size (width * height).
 */
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};


/**
 * @return {number} The perimeter of the size (width + height) * 2.
 */
goog.math.Size.prototype.perimeter = function() {
  return (this.width + this.height) * 2;
};


/**
 * @return {number} The ratio of the size's width to its height.
 */
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};


/**
 * @return {boolean} True if the size has zero area, false if both dimensions
 *     are non-zero numbers.
 */
goog.math.Size.prototype.isEmpty = function() {
  return !this.area();
};


/**
 * Clamps the width and height parameters upward to integer values.
 * @return {!goog.math.Size} This size with ceil'd components.
 */
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};


/**
 * @param {!goog.math.Size} target The target size.
 * @return {boolean} True if this Size is the same size or smaller than the
 *     target size in both dimensions.
 */
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};


/**
 * Clamps the width and height parameters downward to integer values.
 * @return {!goog.math.Size} This size with floored components.
 */
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};


/**
 * Rounds the width and height parameters to integer values.
 * @return {!goog.math.Size} This size with rounded components.
 */
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};


/**
 * Scales this size by the given scale factors. The width and height are scaled
 * by {@code sx} and {@code opt_sy} respectively.  If {@code opt_sy} is not
 * given, then {@code sx} is used for both the width and height.
 * @param {number} sx The scale factor to use for the width.
 * @param {number=} opt_sy The scale factor to use for the height.
 * @return {!goog.math.Size} This Size object after scaling.
 */
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};


/**
 * Uniformly scales the size to perfectly cover the dimensions of a given size.
 * If the size is already larger than the target, it will be scaled down to the
 * minimum size at which it still covers the entire target. The original aspect
 * ratio will be preserved.
 *
 * This function assumes that both Sizes contain strictly positive dimensions.
 * @param {!goog.math.Size} target The target size.
 * @return {!goog.math.Size} This Size object, after optional scaling.
 */
goog.math.Size.prototype.scaleToCover = function(target) {
  var s = this.aspectRatio() <= target.aspectRatio() ?
      target.width / this.width :
      target.height / this.height;

  return this.scale(s);
};


/**
 * Uniformly scales the size to fit inside the dimensions of a given size. The
 * original aspect ratio will be preserved.
 *
 * This function assumes that both Sizes contain strictly positive dimensions.
 * @param {!goog.math.Size} target The target size.
 * @return {!goog.math.Size} This Size object, after optional scaling.
 */
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ?
      target.width / this.width :
      target.height / this.height;

  return this.scale(s);
};

// Copyright 2008 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Namespace with crypto related helper functions.
 */

goog.provide('goog.crypt');

goog.require('goog.array');
goog.require('goog.asserts');


/**
 * Turns a string into an array of bytes; a "byte" being a JS number in the
 * range 0-255.
 * @param {string} str String value to arrify.
 * @return {!Array<number>} Array of numbers corresponding to the
 *     UCS character codes of each character in str.
 */
goog.crypt.stringToByteArray = function(str) {
  var output = [], p = 0;
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    while (c > 0xff) {
      output[p++] = c & 0xff;
      c >>= 8;
    }
    output[p++] = c;
  }
  return output;
};


/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param {Array<number>} bytes Array of numbers representing characters.
 * @return {string} Stringification of the array.
 */
goog.crypt.byteArrayToString = function(bytes) {
  var CHUNK_SIZE = 8192;

  // Special-case the simple case for speed's sake.
  if (bytes.length <= CHUNK_SIZE) {
    return String.fromCharCode.apply(null, bytes);
  }

  // The remaining logic splits conversion by chunks since
  // Function#apply() has a maximum parameter count.
  // See discussion: http://goo.gl/LrWmZ9

  var str = '';
  for (var i = 0; i < bytes.length; i += CHUNK_SIZE) {
    var chunk = goog.array.slice(bytes, i, i + CHUNK_SIZE);
    str += String.fromCharCode.apply(null, chunk);
  }
  return str;
};


/**
 * Turns an array of numbers into the hex string given by the concatenation of
 * the hex values to which the numbers correspond.
 * @param {Uint8Array|Array<number>} array Array of numbers representing
 *     characters.
 * @return {string} Hex string.
 */
goog.crypt.byteArrayToHex = function(array) {
  return goog.array.map(array, function(numByte) {
    var hexByte = numByte.toString(16);
    return hexByte.length > 1 ? hexByte : '0' + hexByte;
  }).join('');
};


/**
 * Converts a hex string into an integer array.
 * @param {string} hexString Hex string of 16-bit integers (two characters
 *     per integer).
 * @return {!Array<number>} Array of {0,255} integers for the given string.
 */
goog.crypt.hexToByteArray = function(hexString) {
  goog.asserts.assert(hexString.length % 2 == 0,
                      'Key string length must be multiple of 2');
  var arr = [];
  for (var i = 0; i < hexString.length; i += 2) {
    arr.push(parseInt(hexString.substring(i, i + 2), 16));
  }
  return arr;
};


/**
 * Converts a JS string to a UTF-8 "byte" array.
 * @param {string} str 16-bit unicode string.
 * @return {!Array<number>} UTF-8 byte array.
 */
goog.crypt.stringToUtf8ByteArray = function(str) {
  // TODO(user): Use native implementations if/when available
  var out = [], p = 0;
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = (c >> 6) | 192;
      out[p++] = (c & 63) | 128;
    } else {
      out[p++] = (c >> 12) | 224;
      out[p++] = ((c >> 6) & 63) | 128;
      out[p++] = (c & 63) | 128;
    }
  }
  return out;
};


/**
 * Converts a UTF-8 byte array to JavaScript's 16-bit Unicode.
 * @param {Uint8Array|Array<number>} bytes UTF-8 byte array.
 * @return {string} 16-bit Unicode string.
 */
goog.crypt.utf8ByteArrayToString = function(bytes) {
  // TODO(user): Use native implementations if/when available
  var out = [], pos = 0, c = 0;
  while (pos < bytes.length) {
    var c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else if (c1 > 191 && c1 < 224) {
      var c2 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
    } else {
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      out[c++] = String.fromCharCode(
          (c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
    }
  }
  return out.join('');
};


/**
 * XOR two byte arrays.
 * @param {!ArrayBufferView|!Array<number>} bytes1 Byte array 1.
 * @param {!ArrayBufferView|!Array<number>} bytes2 Byte array 2.
 * @return {!Array<number>} Resulting XOR of the two byte arrays.
 */
goog.crypt.xorByteArray = function(bytes1, bytes2) {
  goog.asserts.assert(
      bytes1.length == bytes2.length,
      'XOR array lengths must match');

  var result = [];
  for (var i = 0; i < bytes1.length; i++) {
    result.push(bytes1[i] ^ bytes2[i]);
  }
  return result;
};

// Copyright 2007 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Base64 en/decoding. Not much to say here except that we
 * work with decoded values in arrays of bytes. By "byte" I mean a number
 * in [0, 255].
 *
 * @author doughtie@google.com (Gavin Doughtie)
 */

goog.provide('goog.crypt.base64');

goog.require('goog.asserts');
goog.require('goog.crypt');
goog.require('goog.userAgent');

// Static lookup maps, lazily populated by init_()


/**
 * Maps bytes to characters.
 * @type {Object}
 * @private
 */
goog.crypt.base64.byteToCharMap_ = null;


/**
 * Maps characters to bytes.
 * @type {Object}
 * @private
 */
goog.crypt.base64.charToByteMap_ = null;


/**
 * Maps bytes to websafe characters.
 * @type {Object}
 * @private
 */
goog.crypt.base64.byteToCharMapWebSafe_ = null;


/**
 * Maps websafe characters to bytes.
 * @type {Object}
 * @private
 */
goog.crypt.base64.charToByteMapWebSafe_ = null;


/**
 * Our default alphabet, shared between
 * ENCODED_VALS and ENCODED_VALS_WEBSAFE
 * @type {string}
 */
goog.crypt.base64.ENCODED_VALS_BASE =
    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +
    'abcdefghijklmnopqrstuvwxyz' +
    '0123456789';


/**
 * Our default alphabet. Value 64 (=) is special; it means "nothing."
 * @type {string}
 */
goog.crypt.base64.ENCODED_VALS =
    goog.crypt.base64.ENCODED_VALS_BASE + '+/=';


/**
 * Our websafe alphabet.
 * @type {string}
 */
goog.crypt.base64.ENCODED_VALS_WEBSAFE =
    goog.crypt.base64.ENCODED_VALS_BASE + '-_.';


/**
 * Whether this browser supports the atob and btoa functions. This extension
 * started at Mozilla but is now implemented by many browsers. We use the
 * ASSUME_* variables to avoid pulling in the full useragent detection library
 * but still allowing the standard per-browser compilations.
 *
 * @type {boolean}
 */
goog.crypt.base64.HAS_NATIVE_SUPPORT = goog.userAgent.GECKO ||
                                       goog.userAgent.WEBKIT ||
                                       goog.userAgent.OPERA ||
                                       typeof(goog.global.atob) == 'function';


/**
 * Base64-encode an array of bytes.
 *
 * @param {Array<number>|Uint8Array} input An array of bytes (numbers with
 *     value in [0, 255]) to encode.
 * @param {boolean=} opt_webSafe Boolean indicating we should use the
 *     alternative alphabet.
 * @return {string} The base64 encoded string.
 */
goog.crypt.base64.encodeByteArray = function(input, opt_webSafe) {
  // Assert avoids runtime dependency on goog.isArrayLike, which helps reduce
  // size of jscompiler output, and which yields slight performance increase.
  goog.asserts.assert(goog.isArrayLike(input),
                      'encodeByteArray takes an array as a parameter');

  goog.crypt.base64.init_();

  var byteToCharMap = opt_webSafe ?
                      goog.crypt.base64.byteToCharMapWebSafe_ :
                      goog.crypt.base64.byteToCharMap_;

  var output = [];

  for (var i = 0; i < input.length; i += 3) {
    var byte1 = input[i];
    var haveByte2 = i + 1 < input.length;
    var byte2 = haveByte2 ? input[i + 1] : 0;
    var haveByte3 = i + 2 < input.length;
    var byte3 = haveByte3 ? input[i + 2] : 0;

    var outByte1 = byte1 >> 2;
    var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
    var outByte3 = ((byte2 & 0x0F) << 2) | (byte3 >> 6);
    var outByte4 = byte3 & 0x3F;

    if (!haveByte3) {
      outByte4 = 64;

      if (!haveByte2) {
        outByte3 = 64;
      }
    }

    output.push(byteToCharMap[outByte1],
                byteToCharMap[outByte2],
                byteToCharMap[outByte3],
                byteToCharMap[outByte4]);
  }

  return output.join('');
};


/**
 * Base64-encode a string.
 *
 * @param {string} input A string to encode.
 * @param {boolean=} opt_webSafe If true, we should use the
 *     alternative alphabet.
 * @return {string} The base64 encoded string.
 */
goog.crypt.base64.encodeString = function(input, opt_webSafe) {
  // Shortcut for Mozilla browsers that implement
  // a native base64 encoder in the form of "btoa/atob"
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.btoa(input);
  }
  return goog.crypt.base64.encodeByteArray(
      goog.crypt.stringToByteArray(input), opt_webSafe);
};


/**
 * Base64-decode a string.
 *
 * @param {string} input to decode.
 * @param {boolean=} opt_webSafe True if we should use the
 *     alternative alphabet.
 * @return {string} string representing the decoded value.
 */
goog.crypt.base64.decodeString = function(input, opt_webSafe) {
  // Shortcut for Mozilla browsers that implement
  // a native base64 encoder in the form of "btoa/atob"
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.atob(input);
  }
  return goog.crypt.byteArrayToString(
      goog.crypt.base64.decodeStringToByteArray(input, opt_webSafe));
};


/**
 * Base64-decode a string.
 *
 * In base-64 decoding, groups of four characters are converted into three
 * bytes.  If the encoder did not apply padding, the input length may not
 * be a multiple of 4.
 *
 * In this case, the last group will have fewer than 4 characters, and
 * padding will be inferred.  If the group has one or two characters, it decodes
 * to one byte.  If the group has three characters, it decodes to two bytes.
 *
 * @param {string} input Input to decode.
 * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.
 * @return {!Array<number>} bytes representing the decoded value.
 */
goog.crypt.base64.decodeStringToByteArray = function(input, opt_webSafe) {
  goog.crypt.base64.init_();

  var charToByteMap = opt_webSafe ?
                      goog.crypt.base64.charToByteMapWebSafe_ :
                      goog.crypt.base64.charToByteMap_;

  var output = [];

  for (var i = 0; i < input.length; ) {
    var byte1 = charToByteMap[input.charAt(i++)];

    var haveByte2 = i < input.length;
    var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
    ++i;

    var haveByte3 = i < input.length;
    var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
    ++i;

    var haveByte4 = i < input.length;
    var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
    ++i;

    if (byte1 == null || byte2 == null ||
        byte3 == null || byte4 == null) {
      throw Error();
    }

    var outByte1 = (byte1 << 2) | (byte2 >> 4);
    output.push(outByte1);

    if (byte3 != 64) {
      var outByte2 = ((byte2 << 4) & 0xF0) | (byte3 >> 2);
      output.push(outByte2);

      if (byte4 != 64) {
        var outByte3 = ((byte3 << 6) & 0xC0) | byte4;
        output.push(outByte3);
      }
    }
  }

  return output;
};


/**
 * Lazy static initialization function. Called before
 * accessing any of the static map variables.
 * @private
 */
goog.crypt.base64.init_ = function() {
  if (!goog.crypt.base64.byteToCharMap_) {
    goog.crypt.base64.byteToCharMap_ = {};
    goog.crypt.base64.charToByteMap_ = {};
    goog.crypt.base64.byteToCharMapWebSafe_ = {};
    goog.crypt.base64.charToByteMapWebSafe_ = {};

    // We want quick mappings back and forth, so we precompute two maps.
    for (var i = 0; i < goog.crypt.base64.ENCODED_VALS.length; i++) {
      goog.crypt.base64.byteToCharMap_[i] =
          goog.crypt.base64.ENCODED_VALS.charAt(i);
      goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[i]] = i;
      goog.crypt.base64.byteToCharMapWebSafe_[i] =
          goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i);
      goog.crypt.base64.charToByteMapWebSafe_[
          goog.crypt.base64.byteToCharMapWebSafe_[i]] = i;

      // Be forgiving when decoding and correctly decode both encodings.
      if (i >= goog.crypt.base64.ENCODED_VALS_BASE.length) {
        goog.crypt.base64.charToByteMap_[
            goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
        goog.crypt.base64.charToByteMapWebSafe_[
            goog.crypt.base64.ENCODED_VALS.charAt(i)] = i;
      }
    }
  }
};

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.imgtools');
goog.require('goog.asserts');
goog.require('goog.crypt.base64');
goog.require('goog.math.Size');

goog.scope(function() {
  var _ = w69b.imgtools;
  var Size = goog.math.Size;
  var base64 = goog.crypt.base64;

  /**
   * Get content of canvas as png stored in a blob.
   * @param {HTMLCanvasElement} canvas canvas element.
   * @param {function(Blob)} callback called with blob data.
   */
  _.getCanvasAsBlob = function(canvas, callback) {
    if (canvas['toBlob']) {
      // toBlob supported
      canvas['toBlob'](callback);
    } else if (canvas.toDataURL) {
      var url = canvas.toDataURL();
      var prefix = 'data:image/png;base64,';
      if (!goog.string.startsWith(url, prefix))
        throw Error();
      var data = url.substring(prefix.length);
      data = new Uint8Array(base64.decodeStringToByteArray(data));
      var blob = new Blob([data], {'type': 'image/png'});
      callback(blob);
    } else {
      throw Error();
    }
  };

  /**
   * Get Image data of given Image object. Same origin policy applies to
   * image src. Image has to be loaded. Image is scaled down to opt_maxSize
   * if its width or height is larger.
   * @param {Image|HTMLVideoElement} img image.
   * @param {(number|Size)=} opt_maxSize max size of any dimension in pixels or Size object
   * that img data should cover (cropping bottom-right corners).
   * @return {!ImageData} image data.
   */
  _.getImageData = function(img, opt_maxSize) {
    var size = new Size(
      /** @type {number} */ (img.width || img.videoWidth),
      /** @type {number} */ (img.height || img.videoHeight));

    goog.asserts.assert(size.width > 0 && size.height > 0);
    var canvas = document.createElement('canvas');
    if (opt_maxSize) {
      if (goog.isNumber(opt_maxSize)) {
        opt_maxSize = new Size(opt_maxSize, opt_maxSize);
        if (!size.fitsInside(opt_maxSize))
          size = size.scaleToFit(opt_maxSize);
      } else {
        if (!size.fitsInside(opt_maxSize))
          size = size.scaleToCover(opt_maxSize);
      }
      size.floor();
    }
    canvas.width = size.width;
    canvas.height = size.height;
    var context = canvas.getContext('2d');
    context.drawImage(img, 0, 0, size.width, size.height);
    return context.getImageData(0, 0, size.width, size.height);
  };

  /**
   * Scales size in-place to fit max if larger keeping the aspect ratio.
   * @param {Size} size original size.
   * @param {number} max size in pixels.
   */
  _.scaleIfLarger = function(size, max) {
    var s = Math.min(max / size.width, max / size.height);
    if (s <= 1) {
      size.scale(s).round();
    }
  };

  goog.exportSymbol('w69b.imgtools.getImageData', _.getImageData);
  goog.exportSymbol('w69b.imgtools.getCanvasAsBlob', _.getCanvasAsBlob);
});

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.LocalVideoCapturer');
goog.require('goog.Disposable');
goog.require('goog.asserts');
goog.require('goog.events');
goog.require('goog.math.Size');
goog.require('w69b.imgtools');

goog.scope(function() {
  var Size = goog.math.Size;
  var imgtools = w69b.imgtools;
  /**
   * TODO: add start/stop methods and ready/error events.
   * @constructor
   * @extends {goog.Disposable}
   */
  w69b.LocalVideoCapturer = function() {
    goog.base(this);
    this.backCanvas_ = /** @type {HTMLCanvasElement} */ (
      document.createElement('canvas'));
    this.mediaVideo_ = /** @type {HTMLVideoElement} */ (
      document.createElement('video'));
    this.mediaVideo_.setAttribute('autoplay', 'true');
    this.backContext_ = /** @type {CanvasRenderingContext2D} */ (
      this.backCanvas_.getContext('2d'));
  };
  var LocalVideoCapturer = w69b.LocalVideoCapturer;
  goog.inherits(LocalVideoCapturer, goog.Disposable);
  var pro = LocalVideoCapturer.prototype;

  /**
   * Alias to getUserMedia functions.
   * @type {Function}
   */
  LocalVideoCapturer.getMedia = 
    (navigator.mediaDevices)? navigator.mediaDevices.getUserMedia : undefined;

  if (LocalVideoCapturer.getMedia)
    LocalVideoCapturer.getMedia =
      LocalVideoCapturer.getMedia.bind(navigator.mediaDevices);

  /**
   * Canvas uses to call getImageData on.
   * @type {HTMLCanvasElement}
   * @private
   */
  pro.backCanvas_ = null;
  /**
   * Rendering context of back canvas.
   * @type {CanvasRenderingContext2D}
   * @private
   */
  pro.backContext_ = null;
  /**
   * Video element used to render the getUserMedia stream.
   * @type {HTMLVideoElement}
   * @private
   */
  pro.mediaVideo_ = null;

  pro.stream_ = null;

  /**
   * @return {HTMLVideoElement} video element.
   */
  pro.getVideo = function() {
    return this.mediaVideo_;
  };

  /**
   * Start capturing video.
   */
  pro.start = function(ready) {
    goog.events.listenOnce(this.mediaVideo_, 'canplay', function() {
      this.waitForVideoSize_(ready);
    }, false, this);
    this.getUserMedia();
  };

  /**
   * Calls ready when videoSize gets greater than 0.
   * Sometimes the video size is 0 in FireFox even after canplay has been
   * triggered. This works arround this by polling the video with.
   * @private
   */
  pro.waitForVideoSize_ = function(ready) {
    if (this.mediaVideo_.videoWidth > 0 && this.mediaVideo_.videoHeight > 0) {
      ready();
    } else {
      window.setTimeout(this.waitForVideoSize_.bind(this, ready), 100);
    }
  };


  /**
   * Get Image data of current frame from local video stream.
   * Image is scaled down to opt_maxSize if its width or height is larger.
   * @param {Size} size desired size of image.
   * @return {ImageData} image data.
   */
  pro.getImageData = function(size) {
    this.drawAndGetCanvas(size);
    return this.backContext_.getImageData(0, 0, size.width, size.height);
  };

  /**
   * Get canvas with current frame from local video stream.
   * Image is scaled down to opt_maxSize if its width or height is larger.
   * @param {Size} size desired size of image.
   * @return {HTMLCanvasElement} canvas.
   */
  pro.drawAndGetCanvas = function(size) {
    var video = this.mediaVideo_;
    var canvas = this.backCanvas_;
    goog.asserts.assert(video.videoWidth > 0 && video.videoWidth > 0);

    // Rescale canvas if needed.
    if (canvas.width != size.width || canvas.height != size.height) {
      canvas.width = size.width;
      canvas.height = size.height;
    }
    var context = this.backContext_;
    this.drawOnCanvas(canvas, context);
    return canvas;
  };

  /**
   * Draws video on canvas, scaling to to fit into canvas.
   * @param {HTMLCanvasElement} canvas canvas to draw on.
   * @param {CanvasRenderingContext2D} context context of canvas.
   */
  pro.drawOnCanvas = function(canvas, context) {
    var video = this.getVideo();
    var width = canvas.width;
    var height = canvas.height;

    // Smallest scale that scales video to desired size.
    var scale = Math.max(height / video.videoHeight, width / video.videoWidth);
    // draw image cropping what does not fit on the right/bottom edges.
    context.drawImage(video, 0, 0,
      video.videoWidth * scale, video.videoHeight * scale);

  };

  /**
   * video stream.
   * @protected
   */
  pro.onGetMediaSuccess = function(stream) {
    // If disposed since, dont do anything.
    if (this.mediaVideo_ === null)
      return;
    this.mediaVideo_.src = window.URL.createObjectURL(stream);
    this.mediaVideo_.play();
    this.stream_ = stream;
  };

  /**
   * code error code.
   */
  pro.onGetMediaError = function(code) {
    window.console.log('error code:');
    window.console.log(code);
  };

  /**
   * Starts get user media.
   * @protected
   */
  pro.getUserMedia = function() {
    var self = this;
    function gotSources(sources) {
      var constraint = { audio: false, video:  { facingMode :"environment"}   };
      LocalVideoCapturer.getMedia(constraint).then(self.onGetMediaSuccess.bind(self))
      .catch(self.onGetMediaError.bind(self));
    }
    if (window['MediaStreamTrack'] && window['MediaStreamTrack']['getSources'])
      window['MediaStreamTrack']['getSources'](gotSources);
    else
      gotSources([]);
  };

  /**
   * @override
   */
  pro.disposeInternal = function() {
    var url = this.mediaVideo_.src;
    this.mediaVideo_.pause();
    this.mediaVideo_.src = '';
    if (window.URL && window.URL.revokeObjectURL)
      window.URL.revokeObjectURL(url);
    this.mediaVideo_ = null;
    if (this.stream_) {
      if (this.stream_.stop)
        this.stream_.stop();
      if (this.stream_['getTracks']) {
        this.stream_['getTracks']().forEach(function(track) {
          track.stop();
        });
      }
    }
  };
});

// (c) 2013 Manuel Braun (mb@w69b.com)

goog.provide('w69b.img.BitMatrixLike');

goog.scope(function() {
  /**
   * Interface for readable bitmatrix.
   * @interface
   */
  w69b.img.BitMatrixLike = function() {
  };

  /**
   * @return {number} The width of the matrix.
   */
  w69b.img.BitMatrixLike.prototype.getWidth = function() {
  };

  /**
   * @return {number} The height of the matrix.
   */
  w69b.img.BitMatrixLike.prototype.getHeight = function() {
  };

  /**
   * @param {number} x x pos.
   * @param {number} y y pos.
   * @return {boolean} bit at given position.
   */
  w69b.img.BitMatrixLike.prototype.get = function(x, y) {
  };
});

// (c) 2013 Manuel Braun (mb@w69b.com)

goog.provide('w69b.img.RGBABitMatrix');
goog.require('w69b.img.BitMatrixLike');

goog.scope(function() {
  /**
   * Wraps rgba image data in an read-only BitMatix-like interface.
   * @param {number} width in pixels.
   * @param {number} height in pixels.
   * @param {(Uint8Array|Uint8ClampedArray)} data image data with
   * values 255 = white, 0 = black.
   * array.
   * @constructor
   * @implements {w69b.img.BitMatrixLike}
   */
  w69b.img.RGBABitMatrix = function(width, height, data) {
    this.data = data;
    this.width = width;
    this.height = height;
  };
  var pro = w69b.img.RGBABitMatrix.prototype;

  /**
   * @return {number} The width of the matrix.
   */
  pro.getWidth = function() {
    return this.width;
  };

  /**
   * @return {number} The height of the matrix.
   */
  pro.getHeight = function() {
    return this.height;
  };


  /**
   * @param {number} x x pos.
   * @param {number} y y pos.
   * @return {boolean} bit at given position.
   */
  pro.get = function(x, y) {
    var pos = 4 * (y * this.width + x);
    if (this.data[pos] > 0)
      return false;
    else
      return true;
  };


});

// (c) 2013 Manuel Braun (mb@w69b.com)

goog.provide('w69b.img.RGBAImageData');

goog.scope(function() {
  /**
   * @param {number} width in pixels.
   * @param {number} height in pixels.
   * @param {Uint8Array=} opt_data optional image data. Defaults to empty
   * array.
   * @constructor
   */
  w69b.img.RGBAImageData = function(width, height, opt_data) {
    this.data = opt_data || new Uint8Array(4 * width * height);
    this.width = width;
    this.height = height;
  };
  var pro = w69b.img.RGBAImageData.prototype;

  pro.set = function(x, y, red, green, blue, opt_alpha) {
    var pos = 4 * (y * this.width + x);
    this.data[pos] = red;
    this.data[pos + 1] = green;
    this.data[pos + 2] = blue;
    this.data[pos + 3] = opt_alpha || 255;
  };

  pro.setGray = function(x, y, gray) {
    this.set(x, y, gray, gray, gray, 255);
  };

  /**
   * @param {number} x pos.
   * @param {number} y pos.
   * @return {Array} [red, green, blue, alpha] values.
   */
  pro.get = function(x, y) {
    var pos = 4 * (y * this.width + x);
    return [this.data[pos], this.data[pos + 1],
      this.data[pos + 2], this.data[pos + 3]];
  };
});

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.img.WebGLParams');
goog.require('goog.object');

goog.scope(function() {
  /**
   * Helps to apply parameters to a webgl programm.
   * @constructor
   * @param {Object=} opt_config initial config, see set().
   */
  w69b.img.WebGLParams = function(opt_config) {
    this.data_ = {};
    if (opt_config)
      this.set(opt_config);
  };
  var pro = w69b.img.WebGLParams.prototype;

  /**
   * @return {w69b.img.WebGLParams} params object.
   */
  pro.clone = function() {
    var params = new w69b.img.WebGLParams();
    params.data_ = goog.object.clone(this.data_);
    return params;
  };

  /**
   * Sets parameters. Example:
   * {'width': 12.4,
   * 'dimensions': [1024.0, 718.0]
   * 'imageId': ['i', 1]
   * }
   *
   * @param {Object} config mapping of names to either:
     *  one or multiple float values,
     * ['i', 21, 45, 6] one or multiple integers with a preceeding 'i'.
   * @return {w69b.img.WebGLParams} this for chaining.
   */
  pro.set = function(config) {
    goog.object.forEach(config, function(value, key) {
      if (value.length > 0 && value[0] == 'i')
        this.setInt(key, value.slice(1));
      else
        this.setFloat(key, value);
    }, this);
    return this;
  };

  /**
   * @param {string} name parameter name.
   * @param {string} type param type.
   * @param {(number|Array.<number>)} value to set.
   * @private
   */
  pro.setInternal_ = function(name, type, value) {
    this.data_[name] = [type, value];
  };

  /**
   * @param {string} name as passed to shader.
   * @param {(number|Array.<number>)} value integer.
   * @return {w69b.img.WebGLParams} this for chaining.
   */
  pro.setInt = function(name, value) {
    var len = value.length || 1;
    this.setInternal_(name, len + 'i', value);
    return this;
  };

  /**
   * @param {string} name as passed to shader.
   * @param {(number|Array.<number>)} value float.
   * @return {w69b.img.WebGLParams} this for chaining.
   */
  pro.setFloat = function(name, value) {
    var len = value.length || 1;
    this.setInternal_(name, len + 'f', value);
    return this;
  };


  /**
   * @param {string} name parameter name.
   * @return {?number} value or null.
   */
  pro.getValue = function(name) {
    var tuple = this.data_[name];
    if (tuple)
      return tuple[1];
    else
      return null;
  };

  /**
   * Apply parameters to program. You need to call program.use() and
   * program.initCommonAttributes() yourself.
   * @param {w69b.img.WebGLProgram} program webgl program.
   */
  pro.apply = function(program) {
    var setters = program.getNamedSetterFunctions();
    goog.object.forEach(this.data_, function(value, name) {
      var type = value[0];
      var valueArgs = value[1];
      setters[type].apply(program, [name].concat(valueArgs));
    }, this);
  };

  /**
   * Same as apply() but takes care of calling program.use() and
   * initCommonAttribtues()
   * @param {w69b.img.WebGLProgram} program webgl program.
   */
  pro.useAndApply = function(program) {
    program.use();
    program.initCommonAttributes();
    this.apply(program);
  };
});

// (c) 2013 Manuel Braun (mb@w69b.com)

goog.provide('w69b.img.WebGLPipeline');

goog.scope(function() {
  /**
   * Helps to execute multipass webgl programms by applying multiple programs
   * and parameter successively.
   * @param {w69b.img.WebGLFilter} filter webgl filter.
   * @constructor
   */
  w69b.img.WebGLPipeline = function(filter) {
    this.passes_ = [];
    this.filter_ = filter;
  };
  var pro = w69b.img.WebGLPipeline.prototype;

  /**
   *
   * @param {w69b.img.WebGLProgram} program to run.
   * @param {w69b.img.WebGLParams} parameters to apply.
   */
  pro.addPass = function(program, parameters) {
    this.passes_.push([program, parameters]);
  };

  /**
   * Add custom pass.
   * @param {function(number, number, number)} callback that takes three
   * paramters:
   * - input texture id.
   * - out texture id
   * - working texture id (for intermediate results).
   */
  pro.addCustomPass = function(callback) {
    this.passes_.push(callback);
  };


  pro.render = function(inTextureId, outTextureId, workTextureId,
                        opt_resultOnScreen) {
    var prevProgarm = null;
    var filter = this.filter_;
    var numPasses = this.passes_.length;
    var pingPongTextureIds;
    // Ensures last pass goes on outTextureId.
    if (numPasses % 2 == 0)
      pingPongTextureIds = [workTextureId, outTextureId];
    else
      pingPongTextureIds = [outTextureId, workTextureId];

    var prevTextureId = inTextureId;
    for (var i = 0; i < numPasses; ++i) {
      var pass = this.passes_[i];
      if (pass.length) {
        var program = pass[0];
        var params = pass[1];
        if (program != prevProgarm) {
          program.use();
          program.initCommonAttributes();
          prevProgarm = program;
        }
        program.setUniform1i('imageIn', prevTextureId);
        params.apply(program);
        if (i == numPasses - 1 && opt_resultOnScreen) {
          filter.unbindFramebuffer();
        } else {
          var texId = pingPongTextureIds[i % 2];
          filter.attachTextureToFB(texId);
          prevTextureId = texId;
        }
        var offset = params.getValue('outOffset');
        filter.setViewport(
          offset ? offset[0] : 0,
          offset ? offset[1] : 0,
          params.getValue('width'),
          params.getValue('height'));
        program.drawRect();

      } else {
        // custom pass
        var outTex = pingPongTextureIds[i % 2];
        var workTex = pingPongTextureIds[(i + 1) % 2];
        pass(prevTextureId, outTex, workTex);
        prevTextureId = outTex;
      }

    }
  };


});

goog.provide('w69b.shaders.rectVertex');
w69b.shaders.rectVertex = 'attribute vec2 position;\n' +
  'void main(void) {\n' +
  'gl_Position = vec4(position, 0, 1);\n' +
  '}';
goog.provide('w69b.shaders.scale');
w69b.shaders.scale = 'precision mediump float;\n' +
  'uniform float width;\n' +
  'uniform float height;\n' +
  'uniform float inwidth;\n' +
  'uniform float inheight;\n' +
  'uniform float texwidth;\n' +
  'uniform float texheight;\n' +
  'uniform vec2 fragCoordOffset;\n' +
  'uniform sampler2D imageIn;\n' +
  'vec2 dim = vec2(width, height);\n' +
  'vec2 texdim = vec2(texwidth, texheight);\n' +
  'vec2 indim = vec2(inwidth, inheight);\n' +
  'vec2 texscale = indim / texdim;\n' +
  'vec2 getNormalizedFragCoord() {\n' +
  'return (gl_FragCoord.xy - fragCoordOffset) + 0.5;\n' +
  '}\n' +
  'uniform float outOffsetX;\n' +
  'uniform float inOffsetX;\n' +
  'vec2 outOffset = vec2(outOffsetX, 0);\n' +
  'vec2 inOffset = vec2(inOffsetX, 0) / texdim;\n' +
  'vec2 stepX = vec2(0.7, 0) / indim;\n' +
  'vec2 stepY = vec2(0, 0.7) / indim;\n' +
  'vec2 scale = indim / dim;\n' +
  'vec3 combine(vec3 color1, vec3 color2) {\n' +
  'return vec3(\n' +
  'min(color1.x, color2.x),\n' +
  'max(color1.y, color2.y),\n' +
  'color1.z + color2.z);\n' +
  '}\n' +
  'vec3 sample(vec2 p, vec2 offset) {\n' +
  'vec2 pos = (p + offset);\n' +
  'pos = min(vec2(1.0, 1.0), pos);\n' +
  'pos = max(vec2(0.0, 0.0), pos);\n' +
  'pos = inOffset + texscale * pos;\n' +
  'return texture2D(imageIn, pos).xyz;\n' +
  '}\n' +
  'void main() {\n' +
  'vec2 p = (getNormalizedFragCoord() - outOffset) / dim;\n' +
  'vec3 result = sample(p, - stepX - stepY);\n' +
  'result = combine(result, sample(p, stepX + stepY));\n' +
  'result = combine(result, sample(p, stepX - stepY));\n' +
  'result = combine(result, sample(p, -stepX + stepY));\n' +
  'result.z /= 4.0;\n' +
  'gl_FragColor = vec4(result, 1.0);\n' +
  '}';
goog.provide('w69b.shaders.threshold');
w69b.shaders.threshold = 'precision mediump float;\n' +
  'uniform float width;\n' +
  'uniform float height;\n' +
  'uniform float inwidth;\n' +
  'uniform float inheight;\n' +
  'uniform float texwidth;\n' +
  'uniform float texheight;\n' +
  'uniform vec2 fragCoordOffset;\n' +
  'uniform sampler2D imageIn;\n' +
  'vec2 dim = vec2(width, height);\n' +
  'vec2 texdim = vec2(texwidth, texheight);\n' +
  'vec2 indim = vec2(inwidth, inheight);\n' +
  'vec2 texscale = indim / texdim;\n' +
  'vec2 getNormalizedFragCoord() {\n' +
  'return (gl_FragCoord.xy - fragCoordOffset) + 0.5;\n' +
  '}\n' +
  'uniform sampler2D origImage;\n' +
  'vec2 texscaleBlackLevels = indim / texdim;\n' +
  'void main() {\n' +
  'vec2 p = getNormalizedFragCoord() / dim;\n' +
  'vec4 color = texture2D(origImage, p);\n' +
  'float gray = (color.r + color.g + color.b) / 3.0;\n' +
  'float black = texture2D(imageIn, p * texscaleBlackLevels).z;\n' +
  'float binary = gray > black ? 1.0 : 0.0;\n' +
  'gl_FragColor = vec4(binary, binary, binary, 1.0);\n' +
  '}';
goog.provide('w69b.shaders.binarizeAvg1');
w69b.shaders.binarizeAvg1 = 'precision mediump float;\n' +
  'uniform float width;\n' +
  'uniform float height;\n' +
  'uniform float inwidth;\n' +
  'uniform float inheight;\n' +
  'uniform float texwidth;\n' +
  'uniform float texheight;\n' +
  'uniform vec2 fragCoordOffset;\n' +
  'uniform sampler2D imageIn;\n' +
  'vec2 dim = vec2(width, height);\n' +
  'vec2 texdim = vec2(texwidth, texheight);\n' +
  'vec2 indim = vec2(inwidth, inheight);\n' +
  'vec2 texscale = indim / texdim;\n' +
  'vec2 getNormalizedFragCoord() {\n' +
  'return (gl_FragCoord.xy - fragCoordOffset) + 0.5;\n' +
  '}\n' +
  'vec2 mirrorMargin = 1.0 / indim;\n' +
  'vec2 mirrorBorder = 1.0 - mirrorMargin;\n' +
  'void mirror(inout vec2 pos) {\n' +
  'pos = pos - step(mirrorBorder, pos) * (pos - mirrorBorder);\n' +
  'pos *= 2.0 * (0.5 - step(0.0, -pos));\n' +
  '}\n' +
  'uniform vec2 sampleDirection;\n' +
  'vec2 sampleStep = sampleDirection / indim;\n' +
  'void addSample(inout vec4 result, vec2 p, float offset, float weight) {\n' +
  'vec2 pos = (p + offset * sampleStep);\n' +
  'mirror(pos);\n' +
  'pos *= texscale;\n' +
  'vec4 color = texture2D(imageIn, pos);\n' +
  'float gray = (color.r + color.g + color.b) / 3.0;\n' +
  'result.r = min(result.r, gray);\n' +
  'result.g = max(result.g, gray);\n' +
  'result.b += gray * weight;\n' +
  '}\n' +
  'void gauss9(inout vec4 result, vec2 p) {\n' +
  'addSample(result, p, -4.0, 0.0459);\n' +
  'addSample(result, p, -3.0, 0.0822);\n' +
  'addSample(result, p, -2.0, 0.1247);\n' +
  'addSample(result, p, -1.0, 0.1601);\n' +
  'addSample(result, p, 0.0, 0.1741);\n' +
  'addSample(result, p, 1.0, 0.1601);\n' +
  'addSample(result, p, 2.0, 0.1247);\n' +
  'addSample(result, p, 3.0, 0.0822);\n' +
  'addSample(result, p, 4.0, 0.0459);\n' +
  '}\n' +
  'void main() {\n' +
  'vec2 p = getNormalizedFragCoord() / dim;\n' +
  'vec4 result  = vec4(1.0, 0.0, 0.0, 1.0);\n' +
  'gauss9(result, p);\n' +
  'gl_FragColor = result;\n' +
  '}';
goog.provide('w69b.shaders.binarizeGroup');
w69b.shaders.binarizeGroup = 'precision mediump float;\n' +
  'uniform float width;\n' +
  'uniform float height;\n' +
  'uniform float inwidth;\n' +
  'uniform float inheight;\n' +
  'uniform float texwidth;\n' +
  'uniform float texheight;\n' +
  'uniform vec2 fragCoordOffset;\n' +
  'uniform sampler2D imageIn;\n' +
  'vec2 dim = vec2(width, height);\n' +
  'vec2 texdim = vec2(texwidth, texheight);\n' +
  'vec2 indim = vec2(inwidth, inheight);\n' +
  'vec2 texscale = indim / texdim;\n' +
  'vec2 getNormalizedFragCoord() {\n' +
  'return (gl_FragCoord.xy - fragCoordOffset) + 0.5;\n' +
  '}\n' +
  'vec2 mirrorMargin = 1.0 / indim;\n' +
  'vec2 mirrorBorder = 1.0 - mirrorMargin;\n' +
  'void mirror(inout vec2 pos) {\n' +
  'pos = pos - step(mirrorBorder, pos) * (pos - mirrorBorder);\n' +
  'pos *= 2.0 * (0.5 - step(0.0, -pos));\n' +
  '}\n' +
  'uniform vec2 sampleDirection;\n' +
  'uniform vec2 outOffset;\n' +
  'uniform vec2 inOffset;\n' +
  'vec2 inOffsetNormalized = inOffset / texdim;\n' +
  'vec2 sampleStep = sampleDirection / indim;\n' +
  'void addSample(inout vec4 result, vec2 p, float offset, float weight) {\n' +
  'vec2 pos = (p + offset * sampleStep);\n' +
  'mirror(pos);\n' +
  'pos *= texscale;\n' +
  'pos += inOffsetNormalized;\n' +
  'vec4 color = texture2D(imageIn, pos);\n' +
  'result.r = min(result.r, color.r);\n' +
  'result.g = max(result.g, color.g);\n' +
  'result.b += color.b * weight;\n' +
  '}\n' +
  'void gauss9(inout vec4 result, vec2 p) {\n' +
  'addSample(result, p, -4.0, 0.0459);\n' +
  'addSample(result, p, -3.0, 0.0822);\n' +
  'addSample(result, p, -2.0, 0.1247);\n' +
  'addSample(result, p, -1.0, 0.1601);\n' +
  'addSample(result, p, 0.0, 0.1741);\n' +
  'addSample(result, p, 1.0, 0.1601);\n' +
  'addSample(result, p, 2.0, 0.1247);\n' +
  'addSample(result, p, 3.0, 0.0822);\n' +
  'addSample(result, p, 4.0, 0.0459);\n' +
  '}\n' +
  'void main() {\n' +
  'vec2 p = (getNormalizedFragCoord() - outOffset) / dim;\n' +
  'vec4 result  = vec4(0.0, 0.0, 0.0, 1.0);\n' +
  'gauss9(result, p);\n' +
  '// //\n' +
  'gl_FragColor = result;\n' +
  '//\n' +
  '}';
goog.provide('w69b.shaders.debug');
w69b.shaders.debug = 'precision mediump float;\n' +
  'uniform float width;\n' +
  'uniform float height;\n' +
  'uniform float inwidth;\n' +
  'uniform float inheight;\n' +
  'uniform float texwidth;\n' +
  'uniform float texheight;\n' +
  'uniform vec2 fragCoordOffset;\n' +
  'uniform sampler2D imageIn;\n' +
  'vec2 dim = vec2(width, height);\n' +
  'vec2 texdim = vec2(texwidth, texheight);\n' +
  'vec2 indim = vec2(inwidth, inheight);\n' +
  'vec2 texscale = indim / texdim;\n' +
  'vec2 getNormalizedFragCoord() {\n' +
  'return (gl_FragCoord.xy - fragCoordOffset) + 0.5;\n' +
  '}\n' +
  'uniform vec2 outOffset;\n' +
  'void main() {\n' +
  'vec2 p = (getNormalizedFragCoord() - outOffset) / dim;\n' +
  'vec4 color = vec4(1.0);\n' +
  'color.rg = p;\n' +
  'gl_FragColor = color;\n' +
  '}';
goog.provide('w69b.shaders.dummy');
w69b.shaders.dummy = 'precision mediump float;\n' +
  'uniform float width;\n' +
  'uniform float height;\n' +
  'uniform float inwidth;\n' +
  'uniform float inheight;\n' +
  'uniform float texwidth;\n' +
  'uniform float texheight;\n' +
  'uniform vec2 fragCoordOffset;\n' +
  'uniform sampler2D imageIn;\n' +
  'vec2 dim = vec2(width, height);\n' +
  'vec2 texdim = vec2(texwidth, texheight);\n' +
  'vec2 indim = vec2(inwidth, inheight);\n' +
  'vec2 texscale = indim / texdim;\n' +
  'vec2 getNormalizedFragCoord() {\n' +
  'return (gl_FragCoord.xy - fragCoordOffset) + 0.5;\n' +
  '}\n' +
  'vec2 mirrorMargin = 1.0 / indim;\n' +
  'vec2 mirrorBorder = 1.0 - mirrorMargin;\n' +
  'void mirror(inout vec2 pos) {\n' +
  'pos = pos - step(mirrorBorder, pos) * (pos - mirrorBorder);\n' +
  'pos *= 2.0 * (0.5 - step(0.0, -pos));\n' +
  '}\n' +
  'void main() {\n' +
  'vec2 p = (getNormalizedFragCoord() / dim);\n' +
  'mirror(p);\n' +
  'p *= texscale;\n' +
  'gl_FragColor = texture2D(imageIn, p);\n' +
  '}';
goog.provide('w69b.shaders.estimateBlack');
w69b.shaders.estimateBlack = 'precision mediump float;\n' +
  'uniform float width;\n' +
  'uniform float height;\n' +
  'uniform float inwidth;\n' +
  'uniform float inheight;\n' +
  'uniform float texwidth;\n' +
  'uniform float texheight;\n' +
  'uniform vec2 fragCoordOffset;\n' +
  'uniform sampler2D imageIn;\n' +
  'vec2 dim = vec2(width, height);\n' +
  'vec2 texdim = vec2(texwidth, texheight);\n' +
  'vec2 indim = vec2(inwidth, inheight);\n' +
  'vec2 texscale = indim / texdim;\n' +
  'vec2 getNormalizedFragCoord() {\n' +
  'return (gl_FragCoord.xy - fragCoordOffset) + 0.5;\n' +
  '}\n' +
  'vec2 mirrorMargin = 1.0 / indim;\n' +
  'vec2 mirrorBorder = 1.0 - mirrorMargin;\n' +
  'void mirror(inout vec2 pos) {\n' +
  'pos = pos - step(mirrorBorder, pos) * (pos - mirrorBorder);\n' +
  'pos *= 2.0 * (0.5 - step(0.0, -pos));\n' +
  '}\n' +
  'vec4 sampleAt(vec2 pos, float scale) {\n' +
  'mirror(pos);\n' +
  'vec2 offset = scale * vec2(indim.x, 0) / texdim;\n' +
  'pos = pos * texscale + offset;\n' +
  'return texture2D(imageIn, pos);\n' +
  '}\n' +
  'float getDynRange(vec4 color) {\n' +
  'return color.g - color.r;\n' +
  '}\n' +
  'void main() {\n' +
  'vec2 p = getNormalizedFragCoord() / dim;\n' +
  'vec4 color;\n' +
  'float minDynRange = 0.3;\n' +
  'color = sampleAt(p, 0.0);\n' +
  'if (getDynRange(color) < minDynRange) {\n' +
  'color = sampleAt(p, 1.0);\n' +
  'if (getDynRange(color) < minDynRange) {\n' +
  'color = sampleAt(p, 2.0);\n' +
  '}\n' +
  '}\n' +
  'color.z -= 0.02;\n' +
  'gl_FragColor = color;\n' +
  '}';
goog.provide('w69b.shaders.extractChannel');
w69b.shaders.extractChannel = 'precision mediump float;\n' +
  'uniform float width;\n' +
  'uniform float height;\n' +
  'uniform float inwidth;\n' +
  'uniform float inheight;\n' +
  'uniform float texwidth;\n' +
  'uniform float texheight;\n' +
  'uniform vec2 fragCoordOffset;\n' +
  'uniform sampler2D imageIn;\n' +
  'vec2 dim = vec2(width, height);\n' +
  'vec2 texdim = vec2(texwidth, texheight);\n' +
  'vec2 indim = vec2(inwidth, inheight);\n' +
  'vec2 texscale = indim / texdim;\n' +
  'vec2 getNormalizedFragCoord() {\n' +
  'return (gl_FragCoord.xy - fragCoordOffset) + 0.5;\n' +
  '}\n' +
  'uniform int channel;\n' +
  'void main() {\n' +
  'vec2 p = (getNormalizedFragCoord() / dim);\n' +
  'p *= texscale;\n' +
  'vec4 color = texture2D(imageIn, p);\n' +
  'float gray = color.b;\n' +
  'gl_FragColor = vec4(gray, gray, gray, 1.0);\n' +
  '}';
goog.provide('w69b.shaders.fragCoordTest');
w69b.shaders.fragCoordTest = 'precision mediump float;\n' +
  'void main() {\n' +
  'vec4 result = vec4(1.0);\n' +
  'result.rg = gl_FragCoord.xy / 10.0;\n' +
  'gl_FragColor = result;\n' +
  '}';
goog.provide('w69b.shaders.gaussBlur');
w69b.shaders.gaussBlur = 'precision mediump float;\n' +
  'uniform float width;\n' +
  'uniform float height;\n' +
  'uniform float inwidth;\n' +
  'uniform float inheight;\n' +
  'uniform float texwidth;\n' +
  'uniform float texheight;\n' +
  'uniform vec2 fragCoordOffset;\n' +
  'uniform sampler2D imageIn;\n' +
  'vec2 dim = vec2(width, height);\n' +
  'vec2 texdim = vec2(texwidth, texheight);\n' +
  'vec2 indim = vec2(inwidth, inheight);\n' +
  'vec2 texscale = indim / texdim;\n' +
  'vec2 getNormalizedFragCoord() {\n' +
  'return (gl_FragCoord.xy - fragCoordOffset) + 0.5;\n' +
  '}\n' +
  'vec2 mirrorMargin = 1.0 / indim;\n' +
  'vec2 mirrorBorder = 1.0 - mirrorMargin;\n' +
  'void mirror(inout vec2 pos) {\n' +
  'pos = pos - step(mirrorBorder, pos) * (pos - mirrorBorder);\n' +
  'pos *= 2.0 * (0.5 - step(0.0, -pos));\n' +
  '}\n' +
  'uniform vec2 sampleDirection;\n' +
  'uniform vec2 outOffset;\n' +
  'uniform vec2 inOffset;\n' +
  'vec2 sampleStep = sampleDirection / texdim;\n' +
  'vec2 inOffsetNormalized = inOffset / texdim;\n' +
  'void addSample(inout vec4 result, vec2 p, float offset, float weight) {\n' +
  'vec2 pos = (p + (offset * sampleStep));\n' +
  'mirror(pos);\n' +
  'pos *= texscale;\n' +
  'pos += inOffsetNormalized;\n' +
  'vec4 color = texture2D(imageIn, pos);\n' +
  'result.rgb += color.rgb * weight;\n' +
  '}\n' +
  'void gauss9(inout vec4 result, vec2 p) {\n' +
  'addSample(result, p, -4.0, 0.0459);\n' +
  'addSample(result, p, -3.0, 0.0822);\n' +
  'addSample(result, p, -2.0, 0.1247);\n' +
  'addSample(result, p, -1.0, 0.1601);\n' +
  'addSample(result, p, 0.0, 0.1741);\n' +
  'addSample(result, p, 1.0, 0.1601);\n' +
  'addSample(result, p, 2.0, 0.1247);\n' +
  'addSample(result, p, 3.0, 0.0822);\n' +
  'addSample(result, p, 4.0, 0.0459);\n' +
  '}\n' +
  'void main() {\n' +
  'vec2 p = (getNormalizedFragCoord() - outOffset) / dim;\n' +
  'vec4 result  = vec4(0.0, 0.0, 0.0, 1.0);\n' +
  'gauss9(result, p);\n' +
  'gl_FragColor = result;\n' +
  '}';
goog.provide('w69b.shaders.grayscale');
w69b.shaders.grayscale = 'precision mediump float;\n' +
  'uniform float width;\n' +
  'uniform float height;\n' +
  'uniform float inwidth;\n' +
  'uniform float inheight;\n' +
  'uniform float texwidth;\n' +
  'uniform float texheight;\n' +
  'uniform vec2 fragCoordOffset;\n' +
  'uniform sampler2D imageIn;\n' +
  'vec2 dim = vec2(width, height);\n' +
  'vec2 texdim = vec2(texwidth, texheight);\n' +
  'vec2 indim = vec2(inwidth, inheight);\n' +
  'vec2 texscale = indim / texdim;\n' +
  'vec2 getNormalizedFragCoord() {\n' +
  'return (gl_FragCoord.xy - fragCoordOffset) + 0.5;\n' +
  '}\n' +
  'void main() {\n' +
  'vec2 p = (getNormalizedFragCoord() / dim);\n' +
  'p *= texscale;\n' +
  'vec4 color = texture2D(imageIn, p);\n' +
  'float gray = (color.r + color.g + color.b) / 3.0;\n' +
  'gl_FragColor = vec4(gray, gray, gray, 1.0);\n' +
  '}';
// (c) 2013 Manuel Braun (mb@w69b.com)

goog.provide('w69b.img.WebGLProgram');
goog.require('w69b.shaders.rectVertex');

goog.scope(function() {
  /**
   * Filters images using webgl shaders.
   * @param {WebGLRenderingContext} gl rendering context.
   * @param {string} fragmentSource fragmentSource.
   * @param {string=} opt_vertexSource vertex shader.
   * @constructor
   */
  w69b.img.WebGLProgram = function(gl, fragmentSource, opt_vertexSource) {
    this.context_ = gl;
    var vertexShader = this.buildShader_(
      opt_vertexSource || w69b.shaders.rectVertex, true);
    var fragmentShader = this.buildShader_(fragmentSource, false);
    var shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
      throw Error('Could not link shader program: ' +
        gl.getProgramInfoLog(shaderProgram));
    }
    this.glProgram = shaderProgram;
  };
  var pro = w69b.img.WebGLProgram.prototype;

  /**
   * Linked shader program.
   */
  pro.glProgram = null;

  /**
   * @type {WebGLRenderingContext} gl rendering context.
   */
  pro.contex_ = null;



  /**
   * Initialize common shader attributes.
   */
  pro.initCommonAttributes = function() {
    var gl = this.context_;
    var program = this.glProgram;
    var positionLocation = gl.getAttribLocation(program, 'position');
    var buffer = gl.createBuffer();
    var vertices = [-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1];

    //set position attribute data
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
  };

  /**
   * Activates this program.
   */
  pro.use = function() {
    this.context_.useProgram(this.glProgram);
  };

  /**
   * Draws rectangele. InitCommonAttributes needs to have been called first.
   */
  pro.drawRect = function() {
    var gl = this.context_;
    gl.drawArrays(gl.TRIANGLES, 0, 6);
  };

  /**
   * @param {string} name variable name.
   * @param {number} value float value.
   */
  pro.setUniform1f = function(name, value) {
    var location = this.context_.getUniformLocation(this.glProgram, name);
    this.context_.uniform1f(location, value);
  };

  /**
   * For vec2.
   * @param {string} name variable name.
   * @param {number} x float value.
   * @param {number} y float value.
   */
  pro.setUniform2f = function(name, x, y) {
    var location = this.context_.getUniformLocation(this.glProgram, name);
    this.context_.uniform2f(location, x, y);
  };

  /**
   * @param {string} name variable name.
   * @param {(Array.<number>|Float32Array)} value float value.
   */
  pro.setUniform1fv = function(name, value) {
    var location = this.context_.getUniformLocation(this.glProgram, name);
    this.context_.uniform1fv(location, value);
  };

  /**
   * @param {string} name variable name.
   * @param {number} value int value.
   */
  pro.setUniform1i = function(name, value) {
    var location = this.context_.getUniformLocation(this.glProgram, name);
    this.context_.uniform1i(location, value);
  };


  /**
   * @return {Object} mapping of type names to unbound setter functions.
   */
  pro.getNamedSetterFunctions = function() {
    return this.namedSetterFns_;
  };

  /**
   * @type {Object} mapping type names to setter functions.
   * @private
   */
  pro.namedSetterFns_ = {
    '1i': pro.setUniform1i,
    '1f': pro.setUniform1f,
    '2f': pro.setUniform2f
  };

  /**
   * @param {string} source shader source.
   * @param {boolean} isVertex true for vertex shader, false for fragment
   * shader.
   * @return {WebGLShader} shader.
   */
  pro.buildShader_ = function(source, isVertex) {
    var gl = this.context_;
    var shader = gl.createShader(
      isVertex ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      throw Error('Could not compile shader: ' +
        gl.getShaderInfoLog(shader));
    }
    return shader;
  };

});


// (c) 2013 Manuel Braun (mb@w69b.com)

goog.provide('w69b.img.NotSupportedError');
goog.provide('w69b.img.WebGLFilter');
goog.require('goog.debug.Error');
goog.require('w69b.img.RGBAImageData');
goog.require('w69b.img.WebGLParams');
goog.require('w69b.img.WebGLPipeline');
goog.require('w69b.img.WebGLProgram');
goog.require('w69b.shaders.fragCoordTest');


goog.scope(function() {
  var WebGLProgram = w69b.img.WebGLProgram;
  var RGBAImageData = w69b.img.RGBAImageData;
  /**
   * Thrown when webgl is not supported.
   * @constructor
   * @extends {goog.debug.Error}
   */
  w69b.img.NotSupportedError = function() {
    goog.base(this);
  };
  goog.inherits(w69b.img.NotSupportedError, goog.debug.Error);
  /** @override */
  w69b.img.NotSupportedError.prototype.name = 'NotSupported';

  /**
   * Filters images using webgl shaders.
   * @param {HTMLCanvasElement=} opt_canvas canvas to use.
   * @constructor
   */
  w69b.img.WebGLFilter = function(opt_canvas) {
    this.textures = [];
    /**
     * @private
     * @type {HTMLCanvasElement}
     */
    this.canvas_ = /** @type {HTMLCanvasElement} */ (
      opt_canvas || document.createElement('canvas'));
    try {
      this.context_ = /** @type {WebGLRenderingContext} */ (
        this.canvas_.getContext('webgl') ||
          this.canvas_.getContext('experimental-webgl'));
    } catch (ignored) {
    }
    if (!this.context_)
      throw new w69b.img.NotSupportedError();
    w69b.img.WebGLFilter.testFragCoordOffset();

    this.framebuffer_ = this.context_.createFramebuffer();
  };
  var _ = w69b.img.WebGLFilter;
  /**
   * @type {Array.<number>}
   * @private
   */
  _.fragCoordOffset_ = null;
  // Simple vertex shader.

  var pro = w69b.img.WebGLFilter.prototype;


  /**
   * Rendering context of back canvas.
   * @type {WebGLRenderingContext}
   * @private
   */
  pro.context_ = null;


  /**
   * @param {number} width canvas width.
   * @param {number} height canvas height.
   */
  pro.setSize = function(width, height) {
    this.canvas_.width = width;
    this.canvas_.height = height;
  };

  /**
   * @return {number} width.
   */
  pro.getWidth = function() {
    return this.canvas_.width;
  };

  /**
   * @return {number} height.
   */
  pro.getHeight = function() {
    return this.canvas_.height;
  };

  /**
   * Set viewport for next rendering call.
   * @param {number} x left offset.
   * @param {number} y bottom offset.
   * @param {number} width size.
   * @param {number} height size.
   */
  pro.setViewport = function(x, y, width, height) {
    this.context_.viewport(x, y, width, height);
  };

  /**
   * Unbind framebuffer.
   */
  pro.unbindFramebuffer = function() {
    var gl = this.context_;
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };

  /**
   * @return {WebGLRenderingContext} webgl context.
   */
  pro.getContext = function() {
    return this.context_;
  };

  /**
   * @param {number} id texture id.
   * @return {WebGLTexture} texture.
   */
  pro.getTexture = function(id) {
    return this.textures[id];
  };

  /**
   * Creates num textures. The first texture is
   */
  pro.createTextures = function(num) {
    var width = this.getWidth();
    var height = this.getHeight();
    for (var i = 0; i < num; ++i)
      this.textures[i] = this.createTexture(i, width, height);
  };

  /**
   * Sets UNPACK_FLIP_Y_WEBGL parameter on given texture.
   * @param {number} id texture id.
   */
  pro.setTextureFlipped = function(id) {
    var gl = this.context_;
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, this.textures[id]);
    // flipped coordinates
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);
    gl.bindTexture(gl.TEXTURE_2D, null);
  };


  /**
   * Create texture with default parameters.
   * @param {number} id texture unit id.
   * @param {number=} opt_width in pixels.
   * @param {number=} opt_height in pixsels.
   * @return {WebGLTexture} texture.
   */
  pro.createTexture = function(id, opt_width, opt_height) {
    var gl = this.context_;
    var texture = gl.createTexture();
    gl.activeTexture(gl.TEXTURE0 + id);
    //set properties for the texture
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

    if (opt_width && opt_height)
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, opt_width, opt_height, 0,
        gl.RGBA, gl.UNSIGNED_BYTE, null);

    // gl.bindTexture(gl.TEXTURE_2D, null);

    return texture;
  };

  /**
   * Attach texture to framebuffer.
   * @param {number} textureId texture id.
   * @param {WebGLFramebuffer=} opt_framebuffer defaults to this.framebuffer.
   */
  pro.attachTextureToFB = function(textureId, opt_framebuffer) {
    var gl = this.context_;
    var texture = this.textures[textureId];
    gl.bindFramebuffer(gl.FRAMEBUFFER, opt_framebuffer || this.framebuffer_);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
      gl.TEXTURE_2D, texture, 0);
  };

  /**
   * Returns offset for normalizing gl_FragCoord.
   * @return {Array.<number>} offset.
   */
  pro.getFragCoordOffset = function() {
    return _.fragCoordOffset_;
  };

  /**
   * Get image data of canvas.
   * @return {RGBAImageData} image data.
   */
  pro.getImageData = function() {
    var gl = this.context_;
    var width = this.getWidth();
    var height = this.getHeight();
    var imgdata = new Uint8Array(4 * width * height);
    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, imgdata);
    return new RGBAImageData(width, height, imgdata);
  };


  /**
   * WebGL implementation supply different offsets for gl_FragCoord to
   * fragment shaders. For the first pixel this can be (0,0), (0.5, 0.5)
   * or (1.0, 1.0). We need to take this into account in our shaders.
   */
  _.testFragCoordOffset = function() {
    if (_.fragCoordOffset_)
      return;
    var canvas = document.createElement('canvas');
    var gl = canvas.getContext('webgl') ||
      canvas.getContext('experimental-webgl');
    canvas.width = 20;
    canvas.height = 20;
    canvas.imageSmoothingEnabled = false;
    var program = new WebGLProgram(gl, w69b.shaders.fragCoordTest);

    program.use();
    program.initCommonAttributes();


    program.drawRect();
    var imgdata = new Uint8Array(4 * canvas.width * canvas.height);
    gl.readPixels(0, 0, canvas.width, canvas.height, gl.RGBA,
      gl.UNSIGNED_BYTE, imgdata);

    function round(val) {
      return Math.round(100 * val / 255) / 10;
    }

    var xOffset = imgdata[0];
    var yOffset = imgdata[1];
    // assume 0.1 steps.
    xOffset = round(xOffset);
    yOffset = round(yOffset);
    _.fragCoordOffset_ = [xOffset, yOffset];
    // window.console.log('detected fragment coord offset: (' +
    //   xOffset + ' ' + yOffset + ')');
  };


});

// (c) 2013 Manuel Braun (mb@w69b.com)

goog.require('goog.math.Size');
goog.provide('w69b.img.WebGLBinarizer');
goog.require('w69b.img.RGBABitMatrix');
goog.require('w69b.img.RGBAImageData');
goog.require('w69b.img.WebGLFilter');
goog.require('w69b.img.WebGLParams');
goog.require('w69b.img.WebGLPipeline');
goog.require('w69b.img.WebGLProgram');
goog.require('w69b.shaders.binarizeAvg1');
goog.require('w69b.shaders.binarizeGroup');
goog.require('w69b.shaders.debug');
goog.require('w69b.shaders.estimateBlack');
goog.require('w69b.shaders.extractChannel');
goog.require('w69b.shaders.fragCoordTest');
goog.require('w69b.shaders.gaussBlur');
goog.require('w69b.shaders.grayscale');
goog.require('w69b.shaders.rectVertex');
goog.require('w69b.shaders.scale');


goog.scope(function() {
  var WebGLFilter = w69b.img.WebGLFilter;
  var WebGLProgram = w69b.img.WebGLProgram;
  var WebGLParams = w69b.img.WebGLParams;
  var WebGLPipeline = w69b.img.WebGLPipeline;
  var RGBAImageData = w69b.img.RGBAImageData;
  var RGBABitMatrix = w69b.img.RGBABitMatrix;
  /**
   * WebGL shader based image binarizer.
   * The basic idea is to estimate an average black level for each pixel by looking at
   * neighbouring pixels, while choosing the neighbourhood large enough to cover a sufficently
   * large dynamic range.
   * Then simply apply thresholding based on that value.
   *
   * In detail:
   * - Successively apply shaders to compute a scale space and the dynamic range
   * (gaussBlur, binarizeAvg1, binarizeGroup).
   * - Run estimateBlack shader to pick a gray level estimation. It just chooses the
   * gray level from the smallest scale that still satisfies a dynamic range constraint.
   * - Run thresholding shader to apply thresholding on input image gray values with
   * black level estimations.
   *
   * @constructor
   * @param {HTMLCanvasElement=} opt_canvas canvas to use.
   */
  w69b.img.WebGLBinarizer = function(opt_canvas) {
    this.filter_ = new WebGLFilter(opt_canvas);
  };
  var pro = w69b.img.WebGLBinarizer.prototype;
  var _ = w69b.img.WebGLBinarizer;
  /**
   * @type {?boolean}
   */
  _.isSupported_ = null;

  pro.pipeline_ = null;
  pro.setupCalled_ = false;
  /**
   * If canvas is displayed directly, input data needs to be flipped around
   * y axis.
   * @type {boolean}
   * @private
   */
  pro.flipInput_ = false;


  /**
   * Size of native input image/video.
   * @type {?goog.math.Size}
   * @private
   */
  pro.inSize_ = null;

  /**
   * @param {string} source fragment source.
   * @return {w69b.img.WebGLProgram} compiled program.
   */
  pro.getProgram = function(source) {
    return new WebGLProgram(this.filter_.getContext(), source);
  };

  /**
   * @param {boolean} flip whether to flip input arround y axis.
   */
  pro.setFlipInput = function(flip) {
    this.flipInput_ = flip;
  };

  /**
   * Setup binarizer for given image dimensions.
   * Only call this once.
   * @param {number} width in pixels.
   * @param {number} height in pixels.
   * @param {number=} opt_inWidth in pixels.
   * @param {number=} opt_inHeight in pixels.
   */
  pro.setup = function(width, height, opt_inWidth, opt_inHeight) {
    if (!opt_inHeight)
      opt_inHeight = height;
    if (!opt_inWidth)
      opt_inWidth = width;
    if (!this.setupCalled_) {
      // compile shaders
      this.programDynRange1 = this.getProgram(w69b.shaders.binarizeAvg1);
      this.programDynRange2 = this.getProgram(w69b.shaders.binarizeGroup);
      this.programEstimateBlack = this.getProgram(w69b.shaders.estimateBlack);
      this.programThreshold = this.getProgram(w69b.shaders.threshold);
      this.programGauss = this.getProgram(w69b.shaders.gaussBlur);
    }

    if (!this.setupCalled_ ||
      this.filter_.getWidth() != width ||
      this.filter_.getHeight() != height ||
      this.inSize_.width != opt_inWidth ||
      this.inSize_.height != opt_inHeight) {
      this.filter_.setSize(width, height);
      this.inSize_ = new goog.math.Size(opt_inWidth, opt_inHeight);
      this.filter_.createTextures(3);
      if (this.flipInput_)
        this.filter_.setTextureFlipped(0);
      this.pipeline_ = this.createPipeline();
    }
    this.setupCalled_ = true;
  };

  pro.createPipeline = function() {
    var width = this.filter_.getWidth();
    var height = this.filter_.getHeight();
    var inSize = this.inSize_;

    var pipeline = new WebGLPipeline(this.filter_);
    // Some shaders that are useful for debugging.
    // var grayscale = new WebGLProgram(gl, w69b.shaders.grayscale);
    // var dummy = this.getProgram(w69b.shaders.dummy);
    // var extractChannel = this.getProgram(w69b.shaders.extractChannel);
    // var debug = new WebGLProgram(gl, w69b.shaders.debug);
    var baseParams = new WebGLParams(
      {
        'width': width,
        'height': height,
        'inwidth': width,
        'inheight': height,
        'texwidth': width,
        'texheight': height,
        'inOffset': [0, 0],
        'outOffset': [0, 0],
        'fragCoordOffset': this.filter_.getFragCoordOffset()
      });
    var downScalePower = 3;
    var scaledWith = Math.max(1, width >> downScalePower);
    var scaledHeight = Math.max(1, height >> downScalePower);
    var smallImgParams = baseParams.clone().set({
      'width': scaledWith,
      'height': scaledHeight,
      'inwidth': scaledWith,
      'inheight': scaledHeight
    });

    // Apply gauss and downsample to scaledWidth/Height
    pipeline.addPass(this.programGauss,
      baseParams.clone().set({
        'width': scaledWith,
        'sampleDirection': [0, 1],
        'texwidth': inSize.width,
        'texheight': inSize.height
      }));

    pipeline.addPass(this.programGauss,
      smallImgParams.clone().set({
        'inheight': height,
        'sampleDirection': [1, 0]
      }));

    // Compute more dynamic ranges and two more scales on gray
    // level image, in a layout next to each other. Kernel size increases
    // from left to right.
    pipeline.addPass(this.programDynRange1, smallImgParams.clone().set({
      'sampleDirection': [0, 1]
    }));
    pipeline.addPass(this.programDynRange2, smallImgParams.clone().set({
      'sampleDirection': [1, 0]
    }));

    pipeline.addPass(this.programDynRange2, smallImgParams.clone().set({
      'sampleDirection': [0, 2]
    }));
    pipeline.addPass(this.programDynRange2, smallImgParams.clone().set({
      'sampleDirection': [2, 0],
      'outOffset': [scaledWith, 0]
    }));

    pipeline.addPass(this.programDynRange2, smallImgParams.clone().set({
      'sampleDirection': [0, 2],
      'inOffset': [scaledWith, 0]
    }));
    pipeline.addPass(this.programDynRange2, smallImgParams.clone().set({
      'sampleDirection': [2, 0],
      'outOffset': [scaledWith * 2, 0]
    }));
    // Use scale space and dynamic range estimations to estimate black level.
    pipeline.addPass(this.programEstimateBlack, smallImgParams);
    // pipeline.addPass(extractChannel,
    //  smallImgParams.clone().setInt('channel', 2));

    pipeline.addPass(this.programThreshold, smallImgParams.clone()
      .setInt('origImage', 0)
      .set({
        'width': inSize.width, 'height': inSize.height,
        'inwidth': scaledWith, 'inheight': scaledHeight
      }));
    return pipeline;
  };


  /**
   * @return {w69b.img.RGBAImageData} image data.
   */
  pro.getImageData = function() {
    return this.filter_.getImageData();
  };

  /**
   * @return {w69b.img.RGBABitMatrix} image data wrapped in RGBABitmatrix.
   */
  pro.getBitMatrix = function() {
    var imgdata = this.filter_.getImageData();
    return new RGBABitMatrix(imgdata.width, imgdata.height, imgdata.data);
  };

  /**
   * @param {(Image|HTMLVideoElement|RGBAImageData|ImageData)} image image
   * to render.
   */
  pro.render = function(image) {
    if (!this.setupCalled_) {
      throw new Error();
    }
    var gl = this.filter_.getContext();
    // bind input image to texture 0.
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, this.filter_.getTexture(0));
    if (image instanceof RGBAImageData) {
      // custom image data
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, image.width, image.height, 0,
        gl.RGBA, gl.UNSIGNED_BYTE, image.data);

    } else {
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,
        image);
    }

    this.pipeline_.render(0, 1, 2, true);
  };

  /**
   * @param {number} width in pixels.
   * @param {number} height in pixels.
   * @return {w69b.img.RGBAImageData} test image.
   */
  _.createSupportCheckImage = function(width, height) {
    var imgdata = new Uint8Array(4 * width * height);
    // build gradient
    for (var y = 0; y < height; ++y) {
      for (var x = 0; x < width; ++x) {
        var pos = 4 * (width * y + x);
        var gray = x;
        imgdata[pos] = gray;
        imgdata[pos + 1] = gray;
        imgdata[pos + 2] = gray;
        imgdata[pos + 3] = 255;
      }
    }
    return new RGBAImageData(width, height, imgdata);
  };

  /**
   *
   */
  _.isSupported = function() {
    // create test image
    if (_.isSupported_ === null) {
      var width = 100;
      var height = 20;
      var img = _.createSupportCheckImage(width, height);
      // set contrast on some pixels.
      img.setGray(30, 4, 18);
      img.setGray(90, 4, 50);
      try {
        var binarizer = new w69b.img.WebGLBinarizer();
        binarizer.setFlipInput(false);
        binarizer.setup(width, height);
        binarizer.render(img);
      } catch (err) {
        console.debug('No webgl binarizer support:', err);
        _.isSupported_ = false;
        return false;
      }
      var binary = binarizer.getImageData();
      // Check some black and white values.
      _.isSupported_ = (binary.get(30, 4)[0] == 0 &&
      binary.get(90, 4)[0] == 0 &&
      binary.get(31, 4)[0] == 255 &&
      binary.get(29, 4)[0] == 255);
    }
    return _.isSupported_;
  };

});

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.Thenable');



/**
 * Provides a more strict interface for Thenables in terms of
 * http://promisesaplus.com for interop with {@see goog.Promise}.
 *
 * @interface
 * @extends {IThenable<TYPE>}
 * @template TYPE
 */
goog.Thenable = function() {};


/**
 * Adds callbacks that will operate on the result of the Thenable, returning a
 * new child Promise.
 *
 * If the Thenable is fulfilled, the {@code onFulfilled} callback will be
 * invoked with the fulfillment value as argument, and the child Promise will
 * be fulfilled with the return value of the callback. If the callback throws
 * an exception, the child Promise will be rejected with the thrown value
 * instead.
 *
 * If the Thenable is rejected, the {@code onRejected} callback will be invoked
 * with the rejection reason as argument, and the child Promise will be rejected
 * with the return value of the callback or thrown value.
 *
 * @param {?(function(this:THIS, TYPE): VALUE)=} opt_onFulfilled A
 *     function that will be invoked with the fulfillment value if the Promise
 *     is fullfilled.
 * @param {?(function(this:THIS, *): *)=} opt_onRejected A function that will
 *     be invoked with the rejection reason if the Promise is rejected.
 * @param {THIS=} opt_context An optional context object that will be the
 *     execution context for the callbacks. By default, functions are executed
 *     with the default this.
 *
 * @return {RESULT} A new Promise that will receive the result
 *     of the fulfillment or rejection callback.
 * @template VALUE
 * @template THIS
 *
 * When a Promise (or thenable) is returned from the fulfilled callback,
 * the result is the payload of that promise, not the promise itself.
 *
 * @template RESULT := type('goog.Promise',
 *     cond(isUnknown(VALUE), unknown(),
 *       mapunion(VALUE, (V) =>
 *         cond(isTemplatized(V) && sub(rawTypeOf(V), 'IThenable'),
 *           templateTypeOf(V, 0),
 *           cond(sub(V, 'Thenable'),
 *              unknown(),
 *              V)))))
 *  =:
 *
 */
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected,
    opt_context) {};


/**
 * An expando property to indicate that an object implements
 * {@code goog.Thenable}.
 *
 * {@see addImplementation}.
 *
 * @const
 */
goog.Thenable.IMPLEMENTED_BY_PROP = '$goog_Thenable';


/**
 * Marks a given class (constructor) as an implementation of Thenable, so
 * that we can query that fact at runtime. The class must have already
 * implemented the interface.
 * Exports a 'then' method on the constructor prototype, so that the objects
 * also implement the extern {@see goog.Thenable} interface for interop with
 * other Promise implementations.
 * @param {function(new:goog.Thenable,...?)} ctor The class constructor. The
 *     corresponding class must have already implemented the interface.
 */
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, 'then', ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    // Avoids dictionary access in uncompiled mode.
    ctor.prototype.$goog_Thenable = true;
  }
};


/**
 * @param {*} object
 * @return {boolean} Whether a given instance implements {@code goog.Thenable}.
 *     The class/superclass of the instance must call {@code addImplementation}.
 */
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return !!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return !!object.$goog_Thenable;
  } catch (e) {
    // Property access seems to be forbidden.
    return false;
  }
};

// Copyright 2015 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Simple freelist.
 *
 * An anterative to goog.structs.SimplePool, it imposes the requirement that the
 * objects in the list contain a "next" property that can be used to maintain
 * the pool.
 */

goog.provide('goog.async.FreeList');


/**
 * @template ITEM
 */
goog.async.FreeList = goog.defineClass(null, {
  /**
   * @param {function():ITEM} create
   * @param {function(ITEM):void} reset
   * @param {number} limit
   */
  constructor: function(create, reset, limit) {
    /** @const {number} */
    this.limit_ = limit;
    /** @const {function()} */
    this.create_ = create;
    /** @const {function(ITEM):void} */
    this.reset_ = reset;

    /** @type {number} */
    this.occupants_ = 0;
    /** @type {ITEM} */
    this.head_ = null;
  },

  /**
   * @return {ITEM}
   */
  get: function() {
    var item;
    if (this.occupants_ > 0) {
      this.occupants_--;
      item = this.head_;
      this.head_ = item.next;
      item.next = null;
    } else {
      item = this.create_();
    }
    return item;
  },

  /**
   * @param {ITEM} item An item available for possible future reuse.
   */
  put: function(item) {
    this.reset_(item);
    if (this.occupants_ < this.limit_) {
      this.occupants_++;
      item.next = this.head_;
      this.head_ = item;
    }
  },

  /**
   * Visible for testing.
   * @package
   * @return {number}
   */
  occupants: function() {
    return this.occupants_;
  }
});




// Copyright 2015 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.async.WorkItem');
goog.provide('goog.async.WorkQueue');

goog.require('goog.asserts');
goog.require('goog.async.FreeList');


// TODO(johnlenz): generalize the WorkQueue if this is used by more
// than goog.async.run.



/**
 * A low GC workqueue. The key elements of this design:
 *   - avoids the need for goog.bind or equivalent by carrying scope
 *   - avoids the need for array reallocation by using a linked list
 *   - minimizes work entry objects allocation by recycling objects
 * @constructor
 * @final
 * @struct
 */
goog.async.WorkQueue = function() {
  this.workHead_ = null;
  this.workTail_ = null;
};


/** @define {number} The maximum number of entries to keep for recycling. */
goog.define('goog.async.WorkQueue.DEFAULT_MAX_UNUSED', 100);


/** @const @private {goog.async.FreeList<goog.async.WorkItem>} */
goog.async.WorkQueue.freelist_ = new goog.async.FreeList(
    function() {return new goog.async.WorkItem(); },
    function(item) {item.reset()},
    goog.async.WorkQueue.DEFAULT_MAX_UNUSED);


/**
 * @param {function()} fn
 * @param {Object|null|undefined} scope
 */
goog.async.WorkQueue.prototype.add = function(fn, scope) {
  var item = this.getUnusedItem_();
  item.set(fn, scope);

  if (this.workTail_) {
    this.workTail_.next = item;
    this.workTail_ = item;
  } else {
    goog.asserts.assert(!this.workHead_);
    this.workHead_ = item;
    this.workTail_ = item;
  }
};


/**
 * @return {goog.async.WorkItem}
 */
goog.async.WorkQueue.prototype.remove = function() {
  var item = null;

  if (this.workHead_) {
    item = this.workHead_;
    this.workHead_ = this.workHead_.next;
    if (!this.workHead_) {
      this.workTail_ = null;
    }
    item.next = null;
  }
  return item;
};


/**
 * @param {goog.async.WorkItem} item
 */
goog.async.WorkQueue.prototype.returnUnused = function(item) {
  goog.async.WorkQueue.freelist_.put(item);
};


/**
 * @return {goog.async.WorkItem}
 * @private
 */
goog.async.WorkQueue.prototype.getUnusedItem_ = function() {
  return goog.async.WorkQueue.freelist_.get();
};



/**
 * @constructor
 * @final
 * @struct
 */
goog.async.WorkItem = function() {
  /** @type {?function()} */
  this.fn = null;
  /** @type {Object|null|undefined} */
  this.scope = null;
  /** @type {?goog.async.WorkItem} */
  this.next = null;
};


/**
 * @param {function()} fn
 * @param {Object|null|undefined} scope
 */
goog.async.WorkItem.prototype.set = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
  this.next = null;
};


/** Reset the work item so they don't prevent GC before reuse */
goog.async.WorkItem.prototype.reset = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};

// Copyright 2007 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines the goog.dom.TagName enum.  This enumerates
 * all HTML tag names specified in either the the W3C HTML 4.01 index of
 * elements or the HTML5 draft specification.
 *
 * References:
 * http://www.w3.org/TR/html401/index/elements.html
 * http://dev.w3.org/html5/spec/section-index.html
 *
 */
goog.provide('goog.dom.TagName');


/**
 * Enum of all html tag names specified by the W3C HTML4.01 and HTML5
 * specifications.
 * @enum {string}
 */
goog.dom.TagName = {
  A: 'A',
  ABBR: 'ABBR',
  ACRONYM: 'ACRONYM',
  ADDRESS: 'ADDRESS',
  APPLET: 'APPLET',
  AREA: 'AREA',
  ARTICLE: 'ARTICLE',
  ASIDE: 'ASIDE',
  AUDIO: 'AUDIO',
  B: 'B',
  BASE: 'BASE',
  BASEFONT: 'BASEFONT',
  BDI: 'BDI',
  BDO: 'BDO',
  BIG: 'BIG',
  BLOCKQUOTE: 'BLOCKQUOTE',
  BODY: 'BODY',
  BR: 'BR',
  BUTTON: 'BUTTON',
  CANVAS: 'CANVAS',
  CAPTION: 'CAPTION',
  CENTER: 'CENTER',
  CITE: 'CITE',
  CODE: 'CODE',
  COL: 'COL',
  COLGROUP: 'COLGROUP',
  COMMAND: 'COMMAND',
  DATA: 'DATA',
  DATALIST: 'DATALIST',
  DD: 'DD',
  DEL: 'DEL',
  DETAILS: 'DETAILS',
  DFN: 'DFN',
  DIALOG: 'DIALOG',
  DIR: 'DIR',
  DIV: 'DIV',
  DL: 'DL',
  DT: 'DT',
  EM: 'EM',
  EMBED: 'EMBED',
  FIELDSET: 'FIELDSET',
  FIGCAPTION: 'FIGCAPTION',
  FIGURE: 'FIGURE',
  FONT: 'FONT',
  FOOTER: 'FOOTER',
  FORM: 'FORM',
  FRAME: 'FRAME',
  FRAMESET: 'FRAMESET',
  H1: 'H1',
  H2: 'H2',
  H3: 'H3',
  H4: 'H4',
  H5: 'H5',
  H6: 'H6',
  HEAD: 'HEAD',
  HEADER: 'HEADER',
  HGROUP: 'HGROUP',
  HR: 'HR',
  HTML: 'HTML',
  I: 'I',
  IFRAME: 'IFRAME',
  IMG: 'IMG',
  INPUT: 'INPUT',
  INS: 'INS',
  ISINDEX: 'ISINDEX',
  KBD: 'KBD',
  KEYGEN: 'KEYGEN',
  LABEL: 'LABEL',
  LEGEND: 'LEGEND',
  LI: 'LI',
  LINK: 'LINK',
  MAP: 'MAP',
  MARK: 'MARK',
  MATH: 'MATH',
  MENU: 'MENU',
  META: 'META',
  METER: 'METER',
  NAV: 'NAV',
  NOFRAMES: 'NOFRAMES',
  NOSCRIPT: 'NOSCRIPT',
  OBJECT: 'OBJECT',
  OL: 'OL',
  OPTGROUP: 'OPTGROUP',
  OPTION: 'OPTION',
  OUTPUT: 'OUTPUT',
  P: 'P',
  PARAM: 'PARAM',
  PRE: 'PRE',
  PROGRESS: 'PROGRESS',
  Q: 'Q',
  RP: 'RP',
  RT: 'RT',
  RUBY: 'RUBY',
  S: 'S',
  SAMP: 'SAMP',
  SCRIPT: 'SCRIPT',
  SECTION: 'SECTION',
  SELECT: 'SELECT',
  SMALL: 'SMALL',
  SOURCE: 'SOURCE',
  SPAN: 'SPAN',
  STRIKE: 'STRIKE',
  STRONG: 'STRONG',
  STYLE: 'STYLE',
  SUB: 'SUB',
  SUMMARY: 'SUMMARY',
  SUP: 'SUP',
  SVG: 'SVG',
  TABLE: 'TABLE',
  TBODY: 'TBODY',
  TD: 'TD',
  TEMPLATE: 'TEMPLATE',
  TEXTAREA: 'TEXTAREA',
  TFOOT: 'TFOOT',
  TH: 'TH',
  THEAD: 'THEAD',
  TIME: 'TIME',
  TITLE: 'TITLE',
  TR: 'TR',
  TRACK: 'TRACK',
  TT: 'TT',
  U: 'U',
  UL: 'UL',
  VAR: 'VAR',
  VIDEO: 'VIDEO',
  WBR: 'WBR'
};

// Copyright 2008 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities for creating functions. Loosely inspired by the
 * java classes: http://goo.gl/GM0Hmu and http://goo.gl/6k7nI8.
 *
 * @author nicksantos@google.com (Nick Santos)
 */


goog.provide('goog.functions');


/**
 * Creates a function that always returns the same value.
 * @param {T} retValue The value to return.
 * @return {function():T} The new function.
 * @template T
 */
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};


/**
 * Always returns false.
 * @type {function(...): boolean}
 */
goog.functions.FALSE = goog.functions.constant(false);


/**
 * Always returns true.
 * @type {function(...): boolean}
 */
goog.functions.TRUE = goog.functions.constant(true);


/**
 * Always returns NULL.
 * @type {function(...): null}
 */
goog.functions.NULL = goog.functions.constant(null);


/**
 * A simple function that returns the first argument of whatever is passed
 * into it.
 * @param {T=} opt_returnValue The single value that will be returned.
 * @param {...*} var_args Optional trailing arguments. These are ignored.
 * @return {T} The first argument passed in, or undefined if nothing was passed.
 * @template T
 */
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};


/**
 * Creates a function that always throws an error with the given message.
 * @param {string} message The error message.
 * @return {!Function} The error-throwing function.
 */
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};


/**
 * Creates a function that throws the given object.
 * @param {*} err An object to be thrown.
 * @return {!Function} The error-throwing function.
 */
goog.functions.fail = function(err) {
  return function() {
    throw err;
  }
};


/**
 * Given a function, create a function that keeps opt_numArgs arguments and
 * silently discards all additional arguments.
 * @param {Function} f The original function.
 * @param {number=} opt_numArgs The number of arguments to keep. Defaults to 0.
 * @return {!Function} A version of f that only keeps the first opt_numArgs
 *     arguments.
 */
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};


/**
 * Creates a function that returns its nth argument.
 * @param {number} n The position of the return argument.
 * @return {!Function} A new function.
 */
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};


/**
 * Given a function, create a new function that swallows its return value
 * and replaces it with a new one.
 * @param {Function} f A function.
 * @param {T} retValue A new return value.
 * @return {function(...?):T} A new function.
 * @template T
 */
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};


/**
 * Creates a function that returns whether its arguement equals the given value.
 *
 * Example:
 * var key = goog.object.findKey(obj, goog.functions.equalTo('needle'));
 *
 * @param {*} value The value to compare to.
 * @param {boolean=} opt_useLooseComparison Whether to use a loose (==)
 *     comparison rather than a strict (===) one. Defaults to false.
 * @return {function(*):boolean} The new function.
 */
goog.functions.equalTo = function(value, opt_useLooseComparison) {
  return function(other) {
    return opt_useLooseComparison ? (value == other) : (value === other);
  };
};


/**
 * Creates the composition of the functions passed in.
 * For example, (goog.functions.compose(f, g))(a) is equivalent to f(g(a)).
 * @param {function(...?):T} fn The final function.
 * @param {...Function} var_args A list of functions.
 * @return {function(...?):T} The composition of all inputs.
 * @template T
 */
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }

    for (var i = length - 2; i >= 0; i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};


/**
 * Creates a function that calls the functions passed in in sequence, and
 * returns the value of the last function. For example,
 * (goog.functions.sequence(f, g))(x) is equivalent to f(x),g(x).
 * @param {...Function} var_args A list of functions.
 * @return {!Function} A function that calls all inputs in sequence.
 */
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0; i < length; i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};


/**
 * Creates a function that returns true if each of its components evaluates
 * to true. The components are evaluated in order, and the evaluation will be
 * short-circuited as soon as a function returns false.
 * For example, (goog.functions.and(f, g))(x) is equivalent to f(x) && g(x).
 * @param {...Function} var_args A list of functions.
 * @return {function(...?):boolean} A function that ANDs its component
 *      functions.
 */
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0; i < length; i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};


/**
 * Creates a function that returns true if any of its components evaluates
 * to true. The components are evaluated in order, and the evaluation will be
 * short-circuited as soon as a function returns true.
 * For example, (goog.functions.or(f, g))(x) is equivalent to f(x) || g(x).
 * @param {...Function} var_args A list of functions.
 * @return {function(...?):boolean} A function that ORs its component
 *    functions.
 */
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0; i < length; i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};


/**
 * Creates a function that returns the Boolean opposite of a provided function.
 * For example, (goog.functions.not(f))(x) is equivalent to !f(x).
 * @param {!Function} f The original function.
 * @return {function(...?):boolean} A function that delegates to f and returns
 * opposite.
 */
goog.functions.not = function(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};


/**
 * Generic factory function to construct an object given the constructor
 * and the arguments. Intended to be bound to create object factories.
 *
 * Example:
 *
 * var factory = goog.partial(goog.functions.create, Class);
 *
 * @param {function(new:T, ...)} constructor The constructor for the Object.
 * @param {...*} var_args The arguments to be passed to the constructor.
 * @return {T} A new instance of the class given in {@code constructor}.
 * @template T
 */
goog.functions.create = function(constructor, var_args) {
  /**
   * @constructor
   * @final
   */
  var temp = function() {};
  temp.prototype = constructor.prototype;

  // obj will have constructor's prototype in its chain and
  // 'obj instanceof constructor' will be true.
  var obj = new temp();

  // obj is initialized by constructor.
  // arguments is only array-like so lacks shift(), but can be used with
  // the Array prototype function.
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};


/**
 * @define {boolean} Whether the return value cache should be used.
 *    This should only be used to disable caches when testing.
 */
goog.define('goog.functions.CACHE_RETURN_VALUE', true);


/**
 * Gives a wrapper function that caches the return value of a parameterless
 * function when first called.
 *
 * When called for the first time, the given function is called and its
 * return value is cached (thus this is only appropriate for idempotent
 * functions).  Subsequent calls will return the cached return value. This
 * allows the evaluation of expensive functions to be delayed until first used.
 *
 * To cache the return values of functions with parameters, see goog.memoize.
 *
 * @param {!function():T} fn A function to lazily evaluate.
 * @return {!function():T} A wrapped version the function.
 * @template T
 */
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;

  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }

    if (!called) {
      value = fn();
      called = true;
    }

    return value;
  }
};


/**
 * Wraps a function to allow it to be called, at most, once. All
 * additional calls are no-ops.
 *
 * This is particularly useful for initialization functions
 * that should be called, at most, once.
 *
 * @param {function():*} f Function to call.
 * @return {function():undefined} Wrapped function.
 */
goog.functions.once = function(f) {
  // Keep a reference to the function that we null out when we're done with
  // it -- that way, the function can be GC'd when we're done with it.
  var inner = f;
  return function() {
    if (inner) {
      var tmp = inner;
      inner = null;
      tmp();
    }
  };
};


/**
 * Wraps a function to allow it to be called, at most, once for each sequence of
 * calls fired repeatedly so long as they are fired less than a specified
 * interval apart (in milliseconds). Whether it receives one signal or multiple,
 * it will always wait until a full interval has elapsed since the last signal
 * before performing the action.
 *
 * This is particularly useful for bulking up repeated user actions (e.g. only
 * refreshing a view once a user finishes typing rather than updating with every
 * keystroke). For more stateful debouncing with support for pausing, resuming,
 * and canceling debounced actions, use {@code goog.async.Debouncer}.
 *
 * @param {function(this:SCOPE):*} f Function to call.
 * @param {number} interval Interval over which to debounce. The function will
 *     only be called after the full interval has elapsed since the last call.
 * @param {SCOPE=} opt_scope Object in whose scope to call the function.
 * @return {function():undefined} Wrapped function.
 * @template SCOPE
 */
goog.functions.debounce = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  return function() {
    goog.global.clearTimeout(timeout);
    timeout = goog.global.setTimeout(f, interval);
  };
};


/**
 * Wraps a function to allow it to be called, at most, once per interval
 * (specified in milliseconds). If it is called multiple times while it is
 * waiting, it will only perform the action once at the end of the interval.
 *
 * This is particularly useful for limiting repeated user requests (e.g.
 * preventing a user from spamming a server with frequent view refreshes). For
 * more stateful throttling with support for pausing, resuming, and canceling
 * throttled actions, use {@code goog.async.Throttle}.
 *
 * @param {function(this:SCOPE):*} f Function to call.
 * @param {number} interval Interval over which to throttle. The function can
 *     only be called once per interval.
 * @param {SCOPE=} opt_scope Object in whose scope to call the function.
 * @return {function():undefined} Wrapped function.
 * @template SCOPE
 */
goog.functions.throttle = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  var shouldFire = false;
  var fire = function() {
    timeout = goog.global.setTimeout(handleTimeout, interval);
    f();
  };
  var handleTimeout = function() {
    timeout = null;
    if (shouldFire) {
      shouldFire = false;
      fire();
    }
  };

  return function() {
    if (!timeout) {
      fire();
    } else {
      shouldFire = true;
    }
  };
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Provides a function to schedule running a function as soon
 * as possible after the current JS execution stops and yields to the event
 * loop.
 *
 */

goog.provide('goog.async.nextTick');
goog.provide('goog.async.throwException');

goog.require('goog.debug.entryPointRegistry');
goog.require('goog.dom.TagName');
goog.require('goog.functions');
goog.require('goog.labs.userAgent.browser');
goog.require('goog.labs.userAgent.engine');


/**
 * Throw an item without interrupting the current execution context.  For
 * example, if processing a group of items in a loop, sometimes it is useful
 * to report an error while still allowing the rest of the batch to be
 * processed.
 * @param {*} exception
 */
goog.async.throwException = function(exception) {
  // Each throw needs to be in its own context.
  goog.global.setTimeout(function() { throw exception; }, 0);
};


/**
 * Fires the provided callbacks as soon as possible after the current JS
 * execution context. setTimeout(…, 0) takes at least 4ms when called from
 * within another setTimeout(…, 0) for legacy reasons.
 *
 * This will not schedule the callback as a microtask (i.e. a task that can
 * preempt user input or networking callbacks). It is meant to emulate what
 * setTimeout(_, 0) would do if it were not throttled. If you desire microtask
 * behavior, use {@see goog.Promise} instead.
 *
 * @param {function(this:SCOPE)} callback Callback function to fire as soon as
 *     possible.
 * @param {SCOPE=} opt_context Object in whose scope to call the listener.
 * @param {boolean=} opt_useSetImmediate Avoid the IE workaround that
 *     ensures correctness at the cost of speed. See comments for details.
 * @template SCOPE
 */
goog.async.nextTick = function(callback, opt_context, opt_useSetImmediate) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  // window.setImmediate was introduced and currently only supported by IE10+,
  // but due to a bug in the implementation it is not guaranteed that
  // setImmediate is faster than setTimeout nor that setImmediate N is before
  // setImmediate N+1. That is why we do not use the native version if
  // available. We do, however, call setImmediate if it is a normal function
  // because that indicates that it has been replaced by goog.testing.MockClock
  // which we do want to support.
  // See
  // http://connect.microsoft.com/IE/feedback/details/801823/setimmediate-and-messagechannel-are-broken-in-ie10
  //
  // Note we do allow callers to also request setImmediate if they are willing
  // to accept the possible tradeoffs of incorrectness in exchange for speed.
  // The IE fallback of readystate change is much slower.
  if (goog.isFunction(goog.global.setImmediate) &&
      // Opt in.
      (opt_useSetImmediate ||
      // or it isn't a browser or the environment is weird
      !goog.global.Window || !goog.global.Window.prototype ||
      // or something redefined setImmediate in which case we (YOLO) decide
      // to use it (This is so that we use the mockClock setImmediate. sigh).
      goog.global.Window.prototype.setImmediate != goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }

  // Look for and cache the custom fallback version of setImmediate.
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ =
        goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};


/**
 * Cache for the setImmediate implementation.
 * @type {function(function())}
 * @private
 */
goog.async.nextTick.setImmediate_;


/**
 * Determines the best possible implementation to run a function as soon as
 * the JS event loop is idle.
 * @return {function(function())} The "setImmediate" implementation.
 * @private
 */
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  // Create a private message channel and use it to postMessage empty messages
  // to ourselves.
  var Channel = goog.global['MessageChannel'];
  // If MessageChannel is not available and we are in a browser, implement
  // an iframe based polyfill in browsers that have postMessage and
  // document.addEventListener. The latter excludes IE8 because it has a
  // synchronous postMessage implementation.
  if (typeof Channel === 'undefined' && typeof window !== 'undefined' &&
      window.postMessage && window.addEventListener &&
      // Presto (The old pre-blink Opera engine) has problems with iframes
      // and contentWindow.
      !goog.labs.userAgent.engine.isPresto()) {
    /** @constructor */
    Channel = function() {
      // Make an empty, invisible iframe.
      var iframe = document.createElement(goog.dom.TagName.IFRAME);
      iframe.style.display = 'none';
      iframe.src = '';
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write('');
      doc.close();
      // Do not post anything sensitive over this channel, as the workaround for
      // pages with file: origin could allow that information to be modified or
      // intercepted.
      var message = 'callImmediate' + Math.random();
      // The same origin policy rejects attempts to postMessage from file: urls
      // unless the origin is '*'.
      // TODO(b/16335441): Use '*' origin for data: and other similar protocols.
      var origin = win.location.protocol == 'file:' ?
          '*' : win.location.protocol + '//' + win.location.host;
      var onmessage = goog.bind(function(e) {
        // Validate origin and message to make sure that this message was
        // intended for us. If the origin is set to '*' (see above) only the
        // message needs to match since, for example, '*' != 'file://'. Allowing
        // the wildcard is ok, as we are not concerned with security here.
        if ((origin != '*' && e.origin != origin) || e.data != message) {
          return;
        }
        this['port1'].onmessage();
      }, this);
      win.addEventListener('message', onmessage, false);
      this['port1'] = {};
      this['port2'] = {
        postMessage: function() {
          win.postMessage(message, origin);
        }
      };
    };
  }
  if (typeof Channel !== 'undefined' &&
      (!goog.labs.userAgent.browser.isIE())) {
    // Exclude all of IE due to
    // http://codeforhire.com/2013/09/21/setimmediate-and-messagechannel-broken-on-internet-explorer-10/
    // which allows starving postMessage with a busy setTimeout loop.
    // This currently affects IE10 and IE11 which would otherwise be able
    // to use the postMessage based fallbacks.
    var channel = new Channel();
    // Use a fifo linked list to call callbacks in the right order.
    var head = {};
    var tail = head;
    channel['port1'].onmessage = function() {
      if (goog.isDef(head.next)) {
        head = head.next;
        var cb = head.cb;
        head.cb = null;
        cb();
      }
    };
    return function(cb) {
      tail.next = {
        cb: cb
      };
      tail = tail.next;
      channel['port2'].postMessage(0);
    };
  }
  // Implementation for IE6+: Script elements fire an asynchronous
  // onreadystatechange event when inserted into the DOM.
  if (typeof document !== 'undefined' && 'onreadystatechange' in
      document.createElement(goog.dom.TagName.SCRIPT)) {
    return function(cb) {
      var script = document.createElement(goog.dom.TagName.SCRIPT);
      script.onreadystatechange = function() {
        // Clean up and call the callback.
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  // Fall back to setTimeout with 0. In browsers this creates a delay of 5ms
  // or more.
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};


/**
 * Helper function that is overrided to protect callbacks with entry point
 * monitor if the application monitors entry points.
 * @param {function()} callback Callback function to fire as soon as possible.
 * @return {function()} The wrapped callback.
 * @private
 */
goog.async.nextTick.wrapCallback_ = goog.functions.identity;


// Register the callback function as an entry point, so that it can be
// monitored for exception handling, etc. This has to be done in this file
// since it requires special code to handle all browsers.
goog.debug.entryPointRegistry.register(
    /**
     * @param {function(!Function): !Function} transformer The transforming
     *     function.
     */
    function(transformer) {
      goog.async.nextTick.wrapCallback_ = transformer;
    });

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Simple notifiers for the Closure testing framework.
 *
 * @author johnlenz@google.com (John Lenz)
 */

goog.provide('goog.testing.watchers');


/** @private {!Array<function()>} */
goog.testing.watchers.resetWatchers_ = [];


/**
 * Fires clock reset watching functions.
 */
goog.testing.watchers.signalClockReset = function() {
  var watchers = goog.testing.watchers.resetWatchers_;
  for (var i = 0; i < watchers.length; i++) {
    goog.testing.watchers.resetWatchers_[i]();
  }
};


/**
 * Enqueues a function to be called when the clock used for setTimeout is reset.
 * @param {function()} fn
 */
goog.testing.watchers.watchClockReset = function(fn) {
  goog.testing.watchers.resetWatchers_.push(fn);
};


// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.async.run');

goog.require('goog.async.WorkQueue');
goog.require('goog.async.nextTick');
goog.require('goog.async.throwException');
goog.require('goog.testing.watchers');


/**
 * Fires the provided callback just before the current callstack unwinds, or as
 * soon as possible after the current JS execution context.
 * @param {function(this:THIS)} callback
 * @param {THIS=} opt_context Object to use as the "this value" when calling
 *     the provided function.
 * @template THIS
 */
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    // Nothing is currently scheduled, schedule it now.
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }

  goog.async.run.workQueue_.add(callback, opt_context);
};


/**
 * Initializes the function to use to process the work queue.
 * @private
 */
goog.async.run.initializeRunner_ = function() {
  // If native Promises are available in the browser, just schedule the callback
  // on a fulfilled promise, which is specified to be async, but as fast as
  // possible.
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve(undefined);
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};


/**
 * Forces goog.async.run to use nextTick instead of Promise.
 *
 * This should only be done in unit tests. It's useful because MockClock
 * replaces nextTick, but not the browser Promise implementation, so it allows
 * Promise-based code to be tested with MockClock.
 *
 * However, we also want to run promises if the MockClock is no longer in
 * control so we schedule a backup "setTimeout" to the unmocked timeout if
 * provided.
 *
 * @param {function(function())=} opt_realSetTimeout
 */
goog.async.run.forceNextTick = function(opt_realSetTimeout) {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
    if (opt_realSetTimeout) {
      opt_realSetTimeout(goog.async.run.processWorkQueue);
    }
  };
};


/**
 * The function used to schedule work asynchronousely.
 * @private {function()}
 */
goog.async.run.schedule_;


/** @private {boolean} */
goog.async.run.workQueueScheduled_ = false;


/** @private {!goog.async.WorkQueue} */
goog.async.run.workQueue_ = new goog.async.WorkQueue();


if (goog.DEBUG) {
  /**
   * Reset the work queue.
   * @private
   */
  goog.async.run.resetQueue_ = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = new goog.async.WorkQueue();
  };

  // If there is a clock implemenation in use for testing
  // and it is reset, reset the queue.
  goog.testing.watchers.watchClockReset(goog.async.run.resetQueue_);
}


/**
 * Run any pending goog.async.run work items. This function is not intended
 * for general use, but for use by entry point handlers to run items ahead of
 * goog.async.nextTick.
 */
goog.async.run.processWorkQueue = function() {
  // NOTE: additional work queue items may be added while processing.
  var item = null;
  while (item = goog.async.run.workQueue_.remove()) {
    try {
      item.fn.call(item.scope);
    } catch (e) {
      goog.async.throwException(e);
    }
    goog.async.run.workQueue_.returnUnused(item);
  }

  // There are no more work items, allow processing to be scheduled again.
  goog.async.run.workQueueScheduled_ = false;
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.promise.Resolver');



/**
 * Resolver interface for promises. The resolver is a convenience interface that
 * bundles the promise and its associated resolve and reject functions together,
 * for cases where the resolver needs to be persisted internally.
 *
 * @interface
 * @template TYPE
 */
goog.promise.Resolver = function() {};


/**
 * The promise that created this resolver.
 * @type {!goog.Promise<TYPE>}
 */
goog.promise.Resolver.prototype.promise;


/**
 * Resolves this resolver with the specified value.
 * @type {function((TYPE|goog.Promise<TYPE>|Thenable)=)}
 */
goog.promise.Resolver.prototype.resolve;


/**
 * Rejects this resolver with the specified reason.
 * @type {function(*=): void}
 */
goog.promise.Resolver.prototype.reject;

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.Promise');

goog.require('goog.Thenable');
goog.require('goog.asserts');
goog.require('goog.async.FreeList');
goog.require('goog.async.run');
goog.require('goog.async.throwException');
goog.require('goog.debug.Error');
goog.require('goog.promise.Resolver');



/**
 * Promises provide a result that may be resolved asynchronously. A Promise may
 * be resolved by being fulfilled with a fulfillment value, rejected with a
 * rejection reason, or blocked by another Promise. A Promise is said to be
 * settled if it is either fulfilled or rejected. Once settled, the Promise
 * result is immutable.
 *
 * Promises may represent results of any type, including undefined. Rejection
 * reasons are typically Errors, but may also be of any type. Closure Promises
 * allow for optional type annotations that enforce that fulfillment values are
 * of the appropriate types at compile time.
 *
 * The result of a Promise is accessible by calling {@code then} and registering
 * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise
 * is settled, the relevant callbacks are invoked with the fulfillment value or
 * rejection reason as argument. Callbacks are always invoked in the order they
 * were registered, even when additional {@code then} calls are made from inside
 * another callback. A callback is always run asynchronously sometime after the
 * scope containing the registering {@code then} invocation has returned.
 *
 * If a Promise is resolved with another Promise, the first Promise will block
 * until the second is settled, and then assumes the same result as the second
 * Promise. This allows Promises to depend on the results of other Promises,
 * linking together multiple asynchronous operations.
 *
 * This implementation is compatible with the Promises/A+ specification and
 * passes that specification's conformance test suite. A Closure Promise may be
 * resolved with a Promise instance (or sufficiently compatible Promise-like
 * object) created by other Promise implementations. From the specification,
 * Promise-like objects are known as "Thenables".
 *
 * @see http://promisesaplus.com/
 *
 * @param {function(
 *             this:RESOLVER_CONTEXT,
 *             function((TYPE|IThenable<TYPE>|Thenable)=),
 *             function(*=)): void} resolver
 *     Initialization function that is invoked immediately with {@code resolve}
 *     and {@code reject} functions as arguments. The Promise is resolved or
 *     rejected with the first argument passed to either function.
 * @param {RESOLVER_CONTEXT=} opt_context An optional context for executing the
 *     resolver function. If unspecified, the resolver function will be executed
 *     in the default scope.
 * @constructor
 * @struct
 * @final
 * @implements {goog.Thenable<TYPE>}
 * @template TYPE,RESOLVER_CONTEXT
 */
goog.Promise = function(resolver, opt_context) {
  /**
   * The internal state of this Promise. Either PENDING, FULFILLED, REJECTED, or
   * BLOCKED.
   * @private {goog.Promise.State_}
   */
  this.state_ = goog.Promise.State_.PENDING;

  /**
   * The settled result of the Promise. Immutable once set with either a
   * fulfillment value or rejection reason.
   * @private {*}
   */
  this.result_ = undefined;

  /**
   * For Promises created by calling {@code then()}, the originating parent.
   * @private {goog.Promise}
   */
  this.parent_ = null;

  /**
   * The linked list of {@code onFulfilled} and {@code onRejected} callbacks
   * added to this Promise by calls to {@code then()}.
   * @private {?goog.Promise.CallbackEntry_}
   */
  this.callbackEntries_ = null;

  /**
   * The tail of the linked list of {@code onFulfilled} and {@code onRejected}
   * callbacks added to this Promise by calls to {@code then()}.
   * @private {?goog.Promise.CallbackEntry_}
   */
  this.callbackEntriesTail_ = null;

  /**
   * Whether the Promise is in the queue of Promises to execute.
   * @private {boolean}
   */
  this.executing_ = false;

  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    /**
     * A timeout ID used when the {@code UNHANDLED_REJECTION_DELAY} is greater
     * than 0 milliseconds. The ID is set when the Promise is rejected, and
     * cleared only if an {@code onRejected} callback is invoked for the
     * Promise (or one of its descendants) before the delay is exceeded.
     *
     * If the rejection is not handled before the timeout completes, the
     * rejection reason is passed to the unhandled rejection handler.
     * @private {number}
     */
    this.unhandledRejectionId_ = 0;
  } else if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
    /**
     * When the {@code UNHANDLED_REJECTION_DELAY} is set to 0 milliseconds, a
     * boolean that is set if the Promise is rejected, and reset to false if an
     * {@code onRejected} callback is invoked for the Promise (or one of its
     * descendants). If the rejection is not handled before the next timestep,
     * the rejection reason is passed to the unhandled rejection handler.
     * @private {boolean}
     */
    this.hadUnhandledRejection_ = false;
  }

  if (goog.Promise.LONG_STACK_TRACES) {
    /**
     * A list of stack trace frames pointing to the locations where this Promise
     * was created or had callbacks added to it. Saved to add additional context
     * to stack traces when an exception is thrown.
     * @private {!Array<string>}
     */
    this.stack_ = [];
    this.addStackTrace_(new Error('created'));

    /**
     * Index of the most recently executed stack frame entry.
     * @private {number}
     */
    this.currentStep_ = 0;
  }

  // As an optimization, we can skip this if resolver is goog.nullFunction.
  // This value is passed internally when creating a promise which will be
  // resolved through a more optimized path.
  if (resolver != goog.nullFunction) {
    try {
      var self = this;
      resolver.call(
          opt_context,
          function(value) {
            self.resolve_(goog.Promise.State_.FULFILLED, value);
          },
          function(reason) {
            if (goog.DEBUG &&
                !(reason instanceof goog.Promise.CancellationError)) {
              try {
                // Promise was rejected. Step up one call frame to see why.
                if (reason instanceof Error) {
                  throw reason;
                } else {
                  throw new Error('Promise rejected.');
                }
              } catch (e) {
                // Only thrown so browser dev tools can catch rejections of
                // promises when the option to break on caught exceptions is
                // activated.
              }
            }
            self.resolve_(goog.Promise.State_.REJECTED, reason);
          });
    } catch (e) {
      this.resolve_(goog.Promise.State_.REJECTED, e);
    }
  }
};


/**
 * @define {boolean} Whether traces of {@code then} calls should be included in
 * exceptions thrown
 */
goog.define('goog.Promise.LONG_STACK_TRACES', false);


/**
 * @define {number} The delay in milliseconds before a rejected Promise's reason
 * is passed to the rejection handler. By default, the rejection handler
 * rethrows the rejection reason so that it appears in the developer console or
 * {@code window.onerror} handler.
 *
 * Rejections are rethrown as quickly as possible by default. A negative value
 * disables rejection handling entirely.
 */
goog.define('goog.Promise.UNHANDLED_REJECTION_DELAY', 0);


/**
 * The possible internal states for a Promise. These states are not directly
 * observable to external callers.
 * @enum {number}
 * @private
 */
goog.Promise.State_ = {
  /** The Promise is waiting for resolution. */
  PENDING: 0,

  /** The Promise is blocked waiting for the result of another Thenable. */
  BLOCKED: 1,

  /** The Promise has been resolved with a fulfillment value. */
  FULFILLED: 2,

  /** The Promise has been resolved with a rejection reason. */
  REJECTED: 3
};



/**
 * Entries in the callback chain. Each call to {@code then},
 * {@code thenCatch}, or {@code thenAlways} creates an entry containing the
 * functions that may be invoked once the Promise is settled.
 *
 * @private @final @struct @constructor
 */
goog.Promise.CallbackEntry_ = function() {
  /** @type {?goog.Promise} */
  this.child = null;
  /** @type {Function} */
  this.onFulfilled = null;
  /** @type {Function} */
  this.onRejected = null;
  /** @type {?} */
  this.context = null;
  /** @type {?goog.Promise.CallbackEntry_} */
  this.next = null;

  /**
   * A boolean value to indicate this is a "thenAlways" callback entry.
   * Unlike a normal "then/thenVoid" a "thenAlways doesn't participate
   * in "cancel" considerations but is simply an observer and requires
   * special handling.
   * @type {boolean}
   */
  this.always = false;
};


/** clear the object prior to reuse */
goog.Promise.CallbackEntry_.prototype.reset = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.always = false;
};


/**
 * @define {number} The number of currently unused objects to keep around for
 *    reuse.
 */
goog.define('goog.Promise.DEFAULT_MAX_UNUSED', 100);


/** @const @private {goog.async.FreeList<!goog.Promise.CallbackEntry_>} */
goog.Promise.freelist_ = new goog.async.FreeList(
    function() {
      return new goog.Promise.CallbackEntry_();
    },
    function(item) {
      item.reset();
    },
    goog.Promise.DEFAULT_MAX_UNUSED);


/**
 * @param {Function} onFulfilled
 * @param {Function} onRejected
 * @param {?} context
 * @return {!goog.Promise.CallbackEntry_}
 * @private
 */
goog.Promise.getCallbackEntry_ = function(onFulfilled, onRejected, context) {
  var entry = goog.Promise.freelist_.get();
  entry.onFulfilled = onFulfilled;
  entry.onRejected = onRejected;
  entry.context = context;
  return entry;
};


/**
 * @param {!goog.Promise.CallbackEntry_} entry
 * @private
 */
goog.Promise.returnEntry_ = function(entry) {
  goog.Promise.freelist_.put(entry);
};


// NOTE: this is the same template expression as is used for
// goog.IThenable.prototype.then


/**
 * @param {VALUE=} opt_value
 * @return {RESULT} A new Promise that is immediately resolved
 *     with the given value. If the input value is already a goog.Promise, it
 *     will be returned immediately without creating a new instance.
 * @template VALUE
 * @template RESULT := type('goog.Promise',
 *     cond(isUnknown(VALUE), unknown(),
 *       mapunion(VALUE, (V) =>
 *         cond(isTemplatized(V) && sub(rawTypeOf(V), 'IThenable'),
 *           templateTypeOf(V, 0),
 *           cond(sub(V, 'Thenable'),
 *              unknown(),
 *              V)))))
 * =:
 */
goog.Promise.resolve = function(opt_value) {
  if (opt_value instanceof goog.Promise) {
    // Avoid creating a new object if we already have a promise object
    // of the correct type.
    return opt_value;
  }

  // Passing goog.nullFunction will cause the constructor to take an optimized
  // path that skips calling the resolver function.
  var promise = new goog.Promise(goog.nullFunction);
  promise.resolve_(goog.Promise.State_.FULFILLED, opt_value);
  return promise;
};


/**
 * @param {*=} opt_reason
 * @return {!goog.Promise} A new Promise that is immediately rejected with the
 *     given reason.
 */
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};


/**
 * This is identical to
 * {@code goog.Promise.resolve(value).then(onFulfilled, onRejected)}, but it
 * avoids creating an unnecessary wrapper Promise when {@code value} is already
 * thenable.
 *
 * @param {?(goog.Thenable<TYPE>|Thenable|TYPE)} value
 * @param {function(TYPE): ?} onFulfilled
 * @param {function(*): *} onRejected
 * @template TYPE
 * @private
 */
goog.Promise.resolveThen_ = function(value, onFulfilled, onRejected) {
  var isThenable = goog.Promise.maybeThen_(
      value, onFulfilled, onRejected, null);
  if (!isThenable) {
    goog.async.run(goog.partial(onFulfilled, value));
  }
};


/**
 * @param {!Array<?(goog.Promise<TYPE>|goog.Thenable<TYPE>|Thenable|*)>}
 *     promises
 * @return {!goog.Promise<TYPE>} A Promise that receives the result of the
 *     first Promise (or Promise-like) input to settle immediately after it
 *     settles.
 * @template TYPE
 */
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise; i < promises.length; i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, resolve, reject);
    }
  });
};


/**
 * @param {!Array<?(goog.Promise<TYPE>|goog.Thenable<TYPE>|Thenable|*)>}
 *     promises
 * @return {!goog.Promise<!Array<TYPE>>} A Promise that receives a list of
 *     every fulfilled value once every input Promise (or Promise-like) is
 *     successfully fulfilled, or is rejected with the first rejection reason
 *     immediately after it is rejected.
 * @template TYPE
 */
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];

    if (!toFulfill) {
      resolve(values);
      return;
    }

    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };

    var onReject = function(reason) {
      reject(reason);
    };

    for (var i = 0, promise; i < promises.length; i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(
          promise, goog.partial(onFulfill, i), onReject);
    }
  });
};


/**
 * @param {!Array<?(goog.Promise<TYPE>|goog.Thenable<TYPE>|Thenable|*)>}
 *     promises
 * @return {!goog.Promise<!Array<{
 *     fulfilled: boolean,
 *     value: (TYPE|undefined),
 *     reason: (*|undefined)}>>} A Promise that resolves with a list of
 *         result objects once all input Promises (or Promise-like) have
 *         settled. Each result object contains a 'fulfilled' boolean indicating
 *         whether an input Promise was fulfilled or rejected. For fulfilled
 *         Promises, the resulting value is stored in the 'value' field. For
 *         rejected Promises, the rejection reason is stored in the 'reason'
 *         field.
 * @template TYPE
 */
goog.Promise.allSettled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toSettle = promises.length;
    var results = [];

    if (!toSettle) {
      resolve(results);
      return;
    }

    var onSettled = function(index, fulfilled, result) {
      toSettle--;
      results[index] = fulfilled ?
          {fulfilled: true, value: result} :
          {fulfilled: false, reason: result};
      if (toSettle == 0) {
        resolve(results);
      }
    };

    for (var i = 0, promise; i < promises.length; i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise,
          goog.partial(onSettled, i, true /* fulfilled */),
          goog.partial(onSettled, i, false /* fulfilled */));
    }
  });
};


/**
 * @param {!Array<?(goog.Promise<TYPE>|goog.Thenable<TYPE>|Thenable|*)>}
 *     promises
 * @return {!goog.Promise<TYPE>} A Promise that receives the value of the first
 *     input to be fulfilled, or is rejected with a list of every rejection
 *     reason if all inputs are rejected.
 * @template TYPE
 */
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];

    if (!toReject) {
      resolve(undefined);
      return;
    }

    var onFulfill = function(value) {
      resolve(value);
    };

    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };

    for (var i = 0, promise; i < promises.length; i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(
          promise, onFulfill, goog.partial(onReject, i));
    }
  });
};


/**
 * @return {!goog.promise.Resolver<TYPE>} Resolver wrapping the promise and its
 *     resolve / reject functions. Resolving or rejecting the resolver
 *     resolves or rejects the promise.
 * @template TYPE
 */
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};


/**
 * Adds callbacks that will operate on the result of the Promise, returning a
 * new child Promise.
 *
 * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked
 * with the fulfillment value as argument, and the child Promise will be
 * fulfilled with the return value of the callback. If the callback throws an
 * exception, the child Promise will be rejected with the thrown value instead.
 *
 * If the Promise is rejected, the {@code onRejected} callback will be invoked
 * with the rejection reason as argument, and the child Promise will be resolved
 * with the return value or rejected with the thrown value of the callback.
 *
 * @override
 */
goog.Promise.prototype.then = function(
    opt_onFulfilled, opt_onRejected, opt_context) {

  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled,
        'opt_onFulfilled should be a function.');
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected,
        'opt_onRejected should be a function. Did you pass opt_context ' +
        'as the second argument instead of the third?');
  }

  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error('then'));
  }

  return this.addChildPromise_(
      goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null,
      goog.isFunction(opt_onRejected) ? opt_onRejected : null,
      opt_context);
};
goog.Thenable.addImplementation(goog.Promise);


/**
 * Adds callbacks that will operate on the result of the Promise without
 * returning a child Promise (unlike "then").
 *
 * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked
 * with the fulfillment value as argument.
 *
 * If the Promise is rejected, the {@code onRejected} callback will be invoked
 * with the rejection reason as argument.
 *
 * @param {?(function(this:THIS, TYPE):?)=} opt_onFulfilled A
 *     function that will be invoked with the fulfillment value if the Promise
 *     is fulfilled.
 * @param {?(function(this:THIS, *): *)=} opt_onRejected A function that will
 *     be invoked with the rejection reason if the Promise is rejected.
 * @param {THIS=} opt_context An optional context object that will be the
 *     execution context for the callbacks. By default, functions are executed
 *     with the default this.
 * @package
 * @template THIS
 */
goog.Promise.prototype.thenVoid = function(
    opt_onFulfilled, opt_onRejected, opt_context) {

  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled,
        'opt_onFulfilled should be a function.');
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected,
        'opt_onRejected should be a function. Did you pass opt_context ' +
        'as the second argument instead of the third?');
  }

  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error('then'));
  }

  // Note: no default rejection handler is provided here as we need to
  // distinguish unhandled rejections.
  this.addCallbackEntry_(goog.Promise.getCallbackEntry_(
      opt_onFulfilled || goog.nullFunction,
      opt_onRejected || null,
      opt_context));
};


/**
 * Adds a callback that will be invoked when the Promise is settled (fulfilled
 * or rejected). The callback receives no argument, and no new child Promise is
 * created. This is useful for ensuring that cleanup takes place after certain
 * asynchronous operations. Callbacks added with {@code thenAlways} will be
 * executed in the same order with other calls to {@code then},
 * {@code thenAlways}, or {@code thenCatch}.
 *
 * Since it does not produce a new child Promise, cancellation propagation is
 * not prevented by adding callbacks with {@code thenAlways}. A Promise that has
 * a cleanup handler added with {@code thenAlways} will be canceled if all of
 * its children created by {@code then} (or {@code thenCatch}) are canceled.
 * Additionally, since any rejections are not passed to the callback, it does
 * not stop the unhandled rejection handler from running.
 *
 * @param {function(this:THIS): void} onSettled A function that will be invoked
 *     when the Promise is settled (fulfilled or rejected).
 * @param {THIS=} opt_context An optional context object that will be the
 *     execution context for the callbacks. By default, functions are executed
 *     in the global scope.
 * @return {!goog.Promise<TYPE>} This Promise, for chaining additional calls.
 * @template THIS
 */
goog.Promise.prototype.thenAlways = function(onSettled, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error('thenAlways'));
  }

  var entry = goog.Promise.getCallbackEntry_(onSettled, onSettled, opt_context);
  entry.always = true;
  this.addCallbackEntry_(entry);
  return this;
};


/**
 * Adds a callback that will be invoked only if the Promise is rejected. This
 * is equivalent to {@code then(null, onRejected)}.
 *
 * @param {!function(this:THIS, *): *} onRejected A function that will be
 *     invoked with the rejection reason if the Promise is rejected.
 * @param {THIS=} opt_context An optional context object that will be the
 *     execution context for the callbacks. By default, functions are executed
 *     in the global scope.
 * @return {!goog.Promise} A new Promise that will receive the result of the
 *     callback.
 * @template THIS
 */
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error('thenCatch'));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};


/**
 * Cancels the Promise if it is still pending by rejecting it with a cancel
 * Error. No action is performed if the Promise is already resolved.
 *
 * All child Promises of the canceled Promise will be rejected with the same
 * cancel error, as with normal Promise rejection. If the Promise to be canceled
 * is the only child of a pending Promise, the parent Promise will also be
 * canceled. Cancellation may propagate upward through multiple generations.
 *
 * @param {string=} opt_message An optional debugging message for describing the
 *     cancellation reason.
 */
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};


/**
 * Cancels this Promise with the given error.
 *
 * @param {!Error} err The cancellation error.
 * @private
 */
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      // Cancel the Promise and remove it from the parent's child list.
      this.parent_.cancelChild_(this, err);
      this.parent_ = null;
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};


/**
 * Cancels a child Promise from the list of callback entries. If the Promise has
 * not already been resolved, reject it with a cancel error. If there are no
 * other children in the list of callback entries, propagate the cancellation
 * by canceling this Promise as well.
 *
 * @param {!goog.Promise} childPromise The Promise to cancel.
 * @param {!Error} err The cancel error to use for rejecting the Promise.
 * @private
 */
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childEntry = null;
  var beforeChildEntry = null;

  // Find the callback entry for the childPromise, and count whether there are
  // additional child Promises.
  for (var entry = this.callbackEntries_; entry; entry = entry.next) {
    if (!entry.always) {
      childCount++;
      if (entry.child == childPromise) {
        childEntry = entry;
      }
      if (childEntry && childCount > 1) {
        break;
      }
    }
    if (!childEntry) {
      beforeChildEntry = entry;
    }
  }

  // Can a child entry be missing?

  // If the child Promise was the only child, cancel this Promise as well.
  // Otherwise, reject only the child Promise with the cancel error.
  if (childEntry) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      if (beforeChildEntry) {
        this.removeEntryAfter_(beforeChildEntry);
      } else {
        this.popEntry_();
      }

      this.executeCallback_(
          childEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};


/**
 * Adds a callback entry to the current Promise, and schedules callback
 * execution if the Promise has already been settled.
 *
 * @param {goog.Promise.CallbackEntry_} callbackEntry Record containing
 *     {@code onFulfilled} and {@code onRejected} callbacks to execute after
 *     the Promise is settled.
 * @private
 */
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if (!this.hasEntry_() &&
      (this.state_ == goog.Promise.State_.FULFILLED ||
       this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  this.queueEntry_(callbackEntry);
};


/**
 * Creates a child Promise and adds it to the callback entry list. The result of
 * the child Promise is determined by the state of the parent Promise and the
 * result of the {@code onFulfilled} or {@code onRejected} callbacks as
 * specified in the Promise resolution procedure.
 *
 * @see http://promisesaplus.com/#the__method
 *
 * @param {?function(this:THIS, TYPE):
 *          (RESULT|goog.Promise<RESULT>|Thenable)} onFulfilled A callback that
 *     will be invoked if the Promise is fullfilled, or null.
 * @param {?function(this:THIS, *): *} onRejected A callback that will be
 *     invoked if the Promise is rejected, or null.
 * @param {THIS=} opt_context An optional execution context for the callbacks.
 *     in the default calling context.
 * @return {!goog.Promise} The child Promise.
 * @template RESULT,THIS
 * @private
 */
goog.Promise.prototype.addChildPromise_ = function(
    onFulfilled, onRejected, opt_context) {

  /** @type {goog.Promise.CallbackEntry_} */
  var callbackEntry = goog.Promise.getCallbackEntry_(null, null, null);

  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    // Invoke onFulfilled, or resolve with the parent's value if absent.
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;

    // Invoke onRejected, or reject with the parent's reason if absent.
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) &&
            reason instanceof goog.Promise.CancellationError) {
          // Propagate cancellation to children if no other result is returned.
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });

  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_(callbackEntry);
  return callbackEntry.child;
};


/**
 * Unblocks the Promise and fulfills it with the given value.
 *
 * @param {TYPE} value
 * @private
 */
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};


/**
 * Unblocks the Promise and rejects it with the given rejection reason.
 *
 * @param {*} reason
 * @private
 */
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};


/**
 * Attempts to resolve a Promise with a given resolution state and value. This
 * is a no-op if the given Promise has already been resolved.
 *
 * If the given result is a Thenable (such as another Promise), the Promise will
 * be settled with the same state and result as the Thenable once it is itself
 * settled.
 *
 * If the given result is not a Thenable, the Promise will be settled (fulfilled
 * or rejected) with that result based on the given state.
 *
 * @see http://promisesaplus.com/#the_promise_resolution_procedure
 *
 * @param {goog.Promise.State_} state
 * @param {*} x The result to apply to the Promise.
 * @private
 */
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }

  if (this == x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError('Promise cannot resolve to itself');
  }

  this.state_ = goog.Promise.State_.BLOCKED;
  var isThenable = goog.Promise.maybeThen_(
      x, this.unblockAndFulfill_, this.unblockAndReject_, this);
  if (isThenable) {
    return;
  }

  this.result_ = x;
  this.state_ = state;
  // Since we can no longer be canceled, remove link to parent, so that the
  // child promise does not keep the parent promise alive.
  this.parent_ = null;
  this.scheduleCallbacks_();

  if (state == goog.Promise.State_.REJECTED &&
      !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};


/**
 * Invokes the "then" method of an input value if that value is a Thenable. This
 * is a no-op if the value is not thenable.
 *
 * @param {*} value A potentially thenable value.
 * @param {!Function} onFulfilled
 * @param {!Function} onRejected
 * @param {*} context
 * @return {boolean} Whether the input value was thenable.
 * @private
 */
goog.Promise.maybeThen_ = function(value, onFulfilled, onRejected, context) {
  if (value instanceof goog.Promise) {
    value.thenVoid(onFulfilled, onRejected, context);
    return true;
  } else if (goog.Thenable.isImplementedBy(value)) {
    value = /** @type {!goog.Thenable} */ (value);
    value.then(onFulfilled, onRejected, context);
    return true;
  } else if (goog.isObject(value)) {
    try {
      var then = value['then'];
      if (goog.isFunction(then)) {
        goog.Promise.tryThen_(
            value, then, onFulfilled, onRejected, context);
        return true;
      }
    } catch (e) {
      onRejected.call(context, e);
      return true;
    }
  }

  return false;
};


/**
 * Attempts to call the {@code then} method on an object in the hopes that it is
 * a Promise-compatible instance. This allows interoperation between different
 * Promise implementations, however a non-compliant object may cause a Promise
 * to hang indefinitely. If the {@code then} method throws an exception, the
 * dependent Promise will be rejected with the thrown value.
 *
 * @see http://promisesaplus.com/#point-70
 *
 * @param {Thenable} thenable An object with a {@code then} method that may be
 *     compatible with the Promise/A+ specification.
 * @param {!Function} then The {@code then} method of the Thenable object.
 * @param {!Function} onFulfilled
 * @param {!Function} onRejected
 * @param {*} context
 * @private
 */
goog.Promise.tryThen_ = function(
    thenable, then, onFulfilled, onRejected, context) {

  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      onFulfilled.call(context, value);
    }
  };

  var reject = function(reason) {
    if (!called) {
      called = true;
      onRejected.call(context, reason);
    }
  };

  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};


/**
 * Executes the pending callbacks of a settled Promise after a timeout.
 *
 * Section 2.2.4 of the Promises/A+ specification requires that Promise
 * callbacks must only be invoked from a call stack that only contains Promise
 * implementation code, which we accomplish by invoking callback execution after
 * a timeout. If {@code startExecution_} is called multiple times for the same
 * Promise, the callback chain will be evaluated only once. Additional callbacks
 * may be added during the evaluation phase, and will be executed in the same
 * event loop.
 *
 * All Promises added to the waiting list during the same browser event loop
 * will be executed in one batch to avoid using a separate timeout per Promise.
 *
 * @private
 */
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};


/**
 * @return {boolean} Whether there are any pending callbacks queued.
 * @private
 */
goog.Promise.prototype.hasEntry_ = function() {
  return !!this.callbackEntries_;
};


/**
 * @param {goog.Promise.CallbackEntry_} entry
 * @private
 */
goog.Promise.prototype.queueEntry_ = function(entry) {
  goog.asserts.assert(entry.onFulfilled != null);

  if (this.callbackEntriesTail_) {
    this.callbackEntriesTail_.next = entry;
    this.callbackEntriesTail_ = entry;
  } else {
    // It the work queue was empty set the head too.
    this.callbackEntries_ = entry;
    this.callbackEntriesTail_ = entry;
  }
};


/**
 * @return {goog.Promise.CallbackEntry_} entry
 * @private
 */
goog.Promise.prototype.popEntry_ = function() {
  var entry = null;
  if (this.callbackEntries_) {
    entry = this.callbackEntries_;
    this.callbackEntries_ = entry.next;
    entry.next = null;
  }
  // It the work queue is empty clear the tail too.
  if (!this.callbackEntries_) {
    this.callbackEntriesTail_ = null;
  }

  if (entry != null) {
    goog.asserts.assert(entry.onFulfilled != null);
  }
  return entry;
};


/**
 * @param {goog.Promise.CallbackEntry_} previous
 * @private
 */
goog.Promise.prototype.removeEntryAfter_ = function(previous) {
  goog.asserts.assert(this.callbackEntries_);
  goog.asserts.assert(previous != null);
  // If the last entry is being removed, update the tail
  if (previous.next == this.callbackEntriesTail_) {
    this.callbackEntriesTail_ = previous;
  }

  previous.next = previous.next.next;
};


/**
 * Executes all pending callbacks for this Promise.
 *
 * @private
 */
goog.Promise.prototype.executeCallbacks_ = function() {
  var entry = null;
  while (entry = this.popEntry_()) {
    if (goog.Promise.LONG_STACK_TRACES) {
      this.currentStep_++;
    }
    this.executeCallback_(entry, this.state_, this.result_);
  }
  this.executing_ = false;
};


/**
 * Executes a pending callback for this Promise. Invokes an {@code onFulfilled}
 * or {@code onRejected} callback based on the settled state of the Promise.
 *
 * @param {!goog.Promise.CallbackEntry_} callbackEntry An entry containing the
 *     onFulfilled and/or onRejected callbacks for this step.
 * @param {goog.Promise.State_} state The resolution status of the Promise,
 *     either FULFILLED or REJECTED.
 * @param {*} result The settled result of the Promise.
 * @private
 */
goog.Promise.prototype.executeCallback_ = function(
    callbackEntry, state, result) {
  // Cancel an unhandled rejection if the then/thenVoid call had an onRejected.
  if (state == goog.Promise.State_.REJECTED &&
      callbackEntry.onRejected && !callbackEntry.always) {
    this.removeUnhandledRejection_();
  }

  if (callbackEntry.child) {
    // When the parent is settled, the child no longer needs to hold on to it,
    // as the parent can no longer be canceled.
    callbackEntry.child.parent_ = null;
    goog.Promise.invokeCallback_(callbackEntry, state, result);
  } else {
    // Callbacks created with thenAlways or thenVoid do not have the rejection
    // handling code normally set up in the child Promise.
    try {
      callbackEntry.always ?
          callbackEntry.onFulfilled.call(callbackEntry.context) :
          goog.Promise.invokeCallback_(callbackEntry, state, result);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  }
  goog.Promise.returnEntry_(callbackEntry);
};


/**
 * Executes the onFulfilled or onRejected callback for a callbackEntry.
 *
 * @param {!goog.Promise.CallbackEntry_} callbackEntry
 * @param {goog.Promise.State_} state
 * @param {*} result
 * @private
 */
goog.Promise.invokeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled.call(callbackEntry.context, result);
  } else if (callbackEntry.onRejected) {
    callbackEntry.onRejected.call(callbackEntry.context, result);
  }
};


/**
 * Records a stack trace entry for functions that call {@code then} or the
 * Promise constructor. May be disabled by unsetting {@code LONG_STACK_TRACES}.
 *
 * @param {!Error} err An Error object created by the calling function for
 *     providing a stack trace.
 * @private
 */
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    // Extract the third line of the stack trace, which is the entry for the
    // user function that called into Promise code.
    var trace = err.stack.split('\n', 4)[3];
    var message = err.message;

    // Pad the message to align the traces.
    message += Array(11 - message.length).join(' ');
    this.stack_.push(message + trace);
  }
};


/**
 * Adds extra stack trace information to an exception for the list of
 * asynchronous {@code then} calls that have been run for this Promise. Stack
 * trace information is recorded in {@see #addStackTrace_}, and appended to
 * rethrown errors when {@code LONG_STACK_TRACES} is enabled.
 *
 * @param {*} err An unhandled exception captured during callback execution.
 * @private
 */
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES &&
      err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ['Promise trace:'];

    for (var promise = this; promise; promise = promise.parent_) {
      for (var i = this.currentStep_; i >= 0; i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push('Value: ' +
          '[' + (promise.state_ == goog.Promise.State_.REJECTED ?
              'REJECTED' : 'FULFILLED') + '] ' +
          '<' + String(promise.result_) + '>');
    }
    err.stack += '\n\n' + longTrace.join('\n');
  }
};


/**
 * Marks this rejected Promise as having being handled. Also marks any parent
 * Promises in the rejected state as handled. The rejection handler will no
 * longer be invoked for this Promise (if it has not been called already).
 *
 * @private
 */
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this; p && p.unhandledRejectionId_; p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
    for (var p = this; p && p.hadUnhandledRejection_; p = p.parent_) {
      p.hadUnhandledRejection_ = false;
    }
  }
};


/**
 * Marks this rejected Promise as unhandled. If no {@code onRejected} callback
 * is called for this Promise before the {@code UNHANDLED_REJECTION_DELAY}
 * expires, the reason will be passed to the unhandled rejection handler. The
 * handler typically rethrows the rejection reason so that it becomes visible in
 * the developer console.
 *
 * @param {!goog.Promise} promise The rejected Promise.
 * @param {*} reason The Promise rejection reason.
 * @private
 */
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);

  } else if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
    promise.hadUnhandledRejection_ = true;
    goog.async.run(function() {
      if (promise.hadUnhandledRejection_) {
        promise.appendLongStack_(reason);
        goog.Promise.handleRejection_.call(null, reason);
      }
    });
  }
};


/**
 * A method that is invoked with the rejection reasons for Promises that are
 * rejected but have no {@code onRejected} callbacks registered yet.
 * @type {function(*)}
 * @private
 */
goog.Promise.handleRejection_ = goog.async.throwException;


/**
 * Sets a handler that will be called with reasons from unhandled rejected
 * Promises. If the rejected Promise (or one of its descendants) has an
 * {@code onRejected} callback registered, the rejection will be considered
 * handled, and the rejection handler will not be called.
 *
 * By default, unhandled rejections are rethrown so that the error may be
 * captured by the developer console or a {@code window.onerror} handler.
 *
 * @param {function(*)} handler A function that will be called with reasons from
 *     rejected Promises. Defaults to {@code goog.async.throwException}.
 */
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};



/**
 * Error used as a rejection reason for canceled Promises.
 *
 * @param {string=} opt_message
 * @constructor
 * @extends {goog.debug.Error}
 * @final
 */
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, 'constructor', opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);


/** @override */
goog.Promise.CancellationError.prototype.name = 'cancel';



/**
 * Internal implementation of the resolver interface.
 *
 * @param {!goog.Promise<TYPE>} promise
 * @param {function((TYPE|goog.Promise<TYPE>|Thenable)=)} resolve
 * @param {function(*=): void} reject
 * @implements {goog.promise.Resolver<TYPE>}
 * @final @struct
 * @constructor
 * @private
 * @template TYPE
 */
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  /** @const */
  this.promise = promise;

  /** @const */
  this.resolve = resolve;

  /** @const */
  this.reject = reject;
};

// Copyright 2007 Bob Ippolito. All Rights Reserved.
// Modifications Copyright 2009 The Closure Library Authors. All Rights
// Reserved.

/**
 * @license Portions of this code are from MochiKit, received by
 * The Closure Authors under the MIT license. All other code is Copyright
 * 2005-2009 The Closure Authors. All Rights Reserved.
 */

/**
 * @fileoverview Classes for tracking asynchronous operations and handling the
 * results. The Deferred object here is patterned after the Deferred object in
 * the Twisted python networking framework.
 *
 * See: http://twistedmatrix.com/projects/core/documentation/howto/defer.html
 *
 * Based on the Dojo code which in turn is based on the MochiKit code.
 *
 * @author arv@google.com (Erik Arvidsson)
 * @author brenneman@google.com (Shawn Brenneman)
 */

goog.provide('goog.async.Deferred');
goog.provide('goog.async.Deferred.AlreadyCalledError');
goog.provide('goog.async.Deferred.CanceledError');

goog.require('goog.Promise');
goog.require('goog.Thenable');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.debug.Error');



/**
 * A Deferred represents the result of an asynchronous operation. A Deferred
 * instance has no result when it is created, and is "fired" (given an initial
 * result) by calling {@code callback} or {@code errback}.
 *
 * Once fired, the result is passed through a sequence of callback functions
 * registered with {@code addCallback} or {@code addErrback}. The functions may
 * mutate the result before it is passed to the next function in the sequence.
 *
 * Callbacks and errbacks may be added at any time, including after the Deferred
 * has been "fired". If there are no pending actions in the execution sequence
 * of a fired Deferred, any new callback functions will be called with the last
 * computed result. Adding a callback function is the only way to access the
 * result of the Deferred.
 *
 * If a Deferred operation is canceled, an optional user-provided cancellation
 * function is invoked which may perform any special cleanup, followed by firing
 * the Deferred's errback sequence with a {@code CanceledError}. If the
 * Deferred has already fired, cancellation is ignored.
 *
 * Deferreds may be templated to a specific type they produce using generics
 * with syntax such as:
 * <code>
 *   /** @type {goog.async.Deferred<string>} *&#47;
 *   var d = new goog.async.Deferred();
 *   // Compiler can infer that foo is a string.
 *   d.addCallback(function(foo) {...});
 *   d.callback('string');  // Checked to be passed a string
 * </code>
 * Since deferreds are often used to produce different values across a chain,
 * the type information is not propagated across chains, but rather only
 * associated with specifically cast objects.
 *
 * @param {Function=} opt_onCancelFunction A function that will be called if the
 *     Deferred is canceled. If provided, this function runs before the
 *     Deferred is fired with a {@code CanceledError}.
 * @param {Object=} opt_defaultScope The default object context to call
 *     callbacks and errbacks in.
 * @constructor
 * @implements {goog.Thenable<VALUE>}
 * @template VALUE
 */
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  /**
   * Entries in the sequence are arrays containing a callback, an errback, and
   * an optional scope. The callback or errback in an entry may be null.
   * @type {!Array<!Array>}
   * @private
   */
  this.sequence_ = [];

  /**
   * Optional function that will be called if the Deferred is canceled.
   * @type {Function|undefined}
   * @private
   */
  this.onCancelFunction_ = opt_onCancelFunction;

  /**
   * The default scope to execute callbacks and errbacks in.
   * @type {Object}
   * @private
   */
  this.defaultScope_ = opt_defaultScope || null;

  /**
   * Whether the Deferred has been fired.
   * @type {boolean}
   * @private
   */
  this.fired_ = false;

  /**
   * Whether the last result in the execution sequence was an error.
   * @type {boolean}
   * @private
   */
  this.hadError_ = false;

  /**
   * The current Deferred result, updated as callbacks and errbacks are
   * executed.
   * @type {*}
   * @private
   */
  this.result_ = undefined;

  /**
   * Whether the Deferred is blocked waiting on another Deferred to fire. If a
   * callback or errback returns a Deferred as a result, the execution sequence
   * is blocked until that Deferred result becomes available.
   * @type {boolean}
   * @private
   */
  this.blocked_ = false;

  /**
   * Whether this Deferred is blocking execution of another Deferred. If this
   * instance was returned as a result in another Deferred's execution
   * sequence,that other Deferred becomes blocked until this instance's
   * execution sequence completes. No additional callbacks may be added to a
   * Deferred once it is blocking another instance.
   * @type {boolean}
   * @private
   */
  this.blocking_ = false;

  /**
   * Whether the Deferred has been canceled without having a custom cancel
   * function.
   * @type {boolean}
   * @private
   */
  this.silentlyCanceled_ = false;

  /**
   * If an error is thrown during Deferred execution with no errback to catch
   * it, the error is rethrown after a timeout. Reporting the error after a
   * timeout allows execution to continue in the calling context (empty when
   * no error is scheduled).
   * @type {number}
   * @private
   */
  this.unhandledErrorId_ = 0;

  /**
   * If this Deferred was created by branch(), this will be the "parent"
   * Deferred.
   * @type {goog.async.Deferred}
   * @private
   */
  this.parent_ = null;

  /**
   * The number of Deferred objects that have been branched off this one. This
   * will be decremented whenever a branch is fired or canceled.
   * @type {number}
   * @private
   */
  this.branches_ = 0;

  if (goog.async.Deferred.LONG_STACK_TRACES) {
    /**
     * Holds the stack trace at time of deferred creation if the JS engine
     * provides the Error.captureStackTrace API.
     * @private {?string}
     */
    this.constructorStack_ = null;
    if (Error.captureStackTrace) {
      var target = { stack: '' };
      Error.captureStackTrace(target, goog.async.Deferred);
      // Check if Error.captureStackTrace worked. It fails in gjstest.
      if (typeof target.stack == 'string') {
        // Remove first line and force stringify to prevent memory leak due to
        // holding on to actual stack frames.
        this.constructorStack_ = target.stack.replace(/^[^\n]*\n/, '');
      }
    }
  }
};


/**
 * @define {boolean} Whether unhandled errors should always get rethrown to the
 * global scope. Defaults to the value of goog.DEBUG.
 */
goog.define('goog.async.Deferred.STRICT_ERRORS', false);


/**
 * @define {boolean} Whether to attempt to make stack traces long.  Defaults to
 * the value of goog.DEBUG.
 */
goog.define('goog.async.Deferred.LONG_STACK_TRACES', false);


/**
 * Cancels a Deferred that has not yet been fired, or is blocked on another
 * deferred operation. If this Deferred is waiting for a blocking Deferred to
 * fire, the blocking Deferred will also be canceled.
 *
 * If this Deferred was created by calling branch() on a parent Deferred with
 * opt_propagateCancel set to true, the parent may also be canceled. If
 * opt_deepCancel is set, cancel() will be called on the parent (as well as any
 * other ancestors if the parent is also a branch). If one or more branches were
 * created with opt_propagateCancel set to true, the parent will be canceled if
 * cancel() is called on all of those branches.
 *
 * @param {boolean=} opt_deepCancel If true, cancels this Deferred's parent even
 *     if cancel() hasn't been called on some of the parent's branches. Has no
 *     effect on a branch without opt_propagateCancel set to true.
 */
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      // Get rid of the parent reference before potentially running the parent's
      // canceler function to ensure that this cancellation isn't
      // double-counted.
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }

    if (this.onCancelFunction_) {
      // Call in user-specified scope.
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCanceled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CanceledError(this));
    }
  } else if (this.result_ instanceof goog.async.Deferred) {
    this.result_.cancel();
  }
};


/**
 * Handle a single branch being canceled. Once all branches are canceled, this
 * Deferred will be canceled as well.
 *
 * @private
 */
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};


/**
 * Called after a blocking Deferred fires. Unblocks this Deferred and resumes
 * its execution sequence.
 *
 * @param {boolean} isSuccess Whether the result is a success or an error.
 * @param {*} res The result of the blocking Deferred.
 * @private
 */
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};


/**
 * Updates the current result based on the success or failure of the last action
 * in the execution sequence.
 *
 * @param {boolean} isSuccess Whether the new result is a success or an error.
 * @param {*} res The result.
 * @private
 */
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};


/**
 * Verifies that the Deferred has not yet been fired.
 *
 * @private
 * @throws {Error} If this has already been fired.
 */
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCanceled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCanceled_ = false;
  }
};


/**
 * Fire the execution sequence for this Deferred by passing the starting result
 * to the first registered callback.
 * @param {VALUE=} opt_result The starting result.
 */
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true /* isSuccess */, opt_result);
};


/**
 * Fire the execution sequence for this Deferred by passing the starting error
 * result to the first registered errback.
 * @param {*=} opt_result The starting error.
 */
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.makeStackTraceLong_(opt_result);
  this.updateResult_(false /* isSuccess */, opt_result);
};


/**
 * Attempt to make the error's stack trace be long in that it contains the
 * stack trace from the point where the deferred was created on top of the
 * current stack trace to give additional context.
 * @param {*} error
 * @private
 */
goog.async.Deferred.prototype.makeStackTraceLong_ = function(error) {
  if (!goog.async.Deferred.LONG_STACK_TRACES) {
    return;
  }
  if (this.constructorStack_ && goog.isObject(error) && error.stack &&
      // Stack looks like it was system generated. See
      // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi
      (/^[^\n]+(\n   [^\n]+)+/).test(error.stack)) {
    error.stack = error.stack + '\nDEFERRED OPERATION:\n' +
        this.constructorStack_;
  }
};


/**
 * Asserts that an object is not a Deferred.
 * @param {*} obj The object to test.
 * @throws {Error} Throws an exception if the object is a Deferred.
 * @private
 */
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(
      !(obj instanceof goog.async.Deferred),
      'An execution sequence may not be initiated with a blocking Deferred.');
};


/**
 * Register a callback function to be called with a successful result. If no
 * value is returned by the callback function, the result value is unchanged. If
 * a new value is returned, it becomes the Deferred result and will be passed to
 * the next callback in the execution sequence.
 *
 * If the function throws an error, the error becomes the new result and will be
 * passed to the next errback in the execution chain.
 *
 * If the function returns a Deferred, the execution sequence will be blocked
 * until that Deferred fires. Its result will be passed to the next callback (or
 * errback if it is an error result) in this Deferred's execution sequence.
 *
 * @param {!function(this:T,VALUE):?} cb The function to be called with a
 *     successful result.
 * @param {T=} opt_scope An optional scope to call the callback in.
 * @return {!goog.async.Deferred} This Deferred.
 * @template T
 */
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};


/**
 * Register a callback function to be called with an error result. If no value
 * is returned by the function, the error result is unchanged. If a new error
 * value is returned or thrown, that error becomes the Deferred result and will
 * be passed to the next errback in the execution sequence.
 *
 * If the errback function handles the error by returning a non-error value,
 * that result will be passed to the next normal callback in the sequence.
 *
 * If the function returns a Deferred, the execution sequence will be blocked
 * until that Deferred fires. Its result will be passed to the next callback (or
 * errback if it is an error result) in this Deferred's execution sequence.
 *
 * @param {!function(this:T,?):?} eb The function to be called on an
 *     unsuccessful result.
 * @param {T=} opt_scope An optional scope to call the errback in.
 * @return {!goog.async.Deferred<VALUE>} This Deferred.
 * @template T
 */
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};


/**
 * Registers one function as both a callback and errback.
 *
 * @param {!function(this:T,?):?} f The function to be called on any result.
 * @param {T=} opt_scope An optional scope to call the function in.
 * @return {!goog.async.Deferred} This Deferred.
 * @template T
 */
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};


/**
 * Like addBoth, but propagates uncaught exceptions in the errback.
 *
 * @param {function(this:T,?):?} f The function to be called on any result.
 * @param {T=} opt_scope An optional scope to call the function in.
 * @return {!goog.async.Deferred<VALUE>} This Deferred.
 * @template T
 */
goog.async.Deferred.prototype.addFinally = function(f, opt_scope) {
  var self = this;
  return this.addCallbacks(f, function(err) {
    var result = f.call(self, err);
    if (!goog.isDef(result)) {
      throw err;
    }
    return result;
  }, opt_scope);
};


/**
 * Registers a callback function and an errback function at the same position
 * in the execution sequence. Only one of these functions will execute,
 * depending on the error state during the execution sequence.
 *
 * NOTE: This is not equivalent to {@code def.addCallback().addErrback()}! If
 * the callback is invoked, the errback will be skipped, and vice versa.
 *
 * @param {?(function(this:T,VALUE):?)} cb The function to be called on a
 *     successful result.
 * @param {?(function(this:T,?):?)} eb The function to be called on an
 *     unsuccessful result.
 * @param {T=} opt_scope An optional scope to call the functions in.
 * @return {!goog.async.Deferred} This Deferred.
 * @template T
 */
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, 'Blocking Deferreds can not be re-used');
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};


/**
 * Implements {@see goog.Thenable} for seamless integration with
 * {@see goog.Promise}.
 * Deferred results are mutable and may represent multiple values over
 * their lifetime. Calling {@code then} on a Deferred returns a Promise
 * with the result of the Deferred at that point in its callback chain.
 * Note that if the Deferred result is never mutated, and only
 * {@code then} calls are made, the Deferred will behave like a Promise.
 *
 * @override
 */
goog.async.Deferred.prototype.then = function(opt_onFulfilled, opt_onRejected,
    opt_context) {
  var resolve, reject;
  var promise = new goog.Promise(function(res, rej) {
    // Copying resolvers to outer scope, so that they are available when the
    // deferred callback fires (which may be synchronous).
    resolve = res;
    reject = rej;
  });
  this.addCallbacks(resolve, function(reason) {
    if (reason instanceof goog.async.Deferred.CanceledError) {
      promise.cancel();
    } else {
      reject(reason);
    }
  });
  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);
};
goog.Thenable.addImplementation(goog.async.Deferred);


/**
 * Links another Deferred to the end of this Deferred's execution sequence. The
 * result of this execution sequence will be passed as the starting result for
 * the chained Deferred, invoking either its first callback or errback.
 *
 * @param {!goog.async.Deferred} otherDeferred The Deferred to chain.
 * @return {!goog.async.Deferred} This Deferred.
 */
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(
      otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};


/**
 * Makes this Deferred wait for another Deferred's execution sequence to
 * complete before continuing.
 *
 * This is equivalent to adding a callback that returns {@code otherDeferred},
 * but doesn't prevent additional callbacks from being added to
 * {@code otherDeferred}.
 *
 * @param {!goog.async.Deferred|!goog.Thenable} otherDeferred The Deferred
 *     to wait for.
 * @return {!goog.async.Deferred} This Deferred.
 */
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  if (!(otherDeferred instanceof goog.async.Deferred)) {
    // The Thenable case.
    return this.addCallback(function() {
      return otherDeferred;
    });
  }
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};


/**
 * Creates a branch off this Deferred's execution sequence, and returns it as a
 * new Deferred. The branched Deferred's starting result will be shared with the
 * parent at the point of the branch, even if further callbacks are added to the
 * parent.
 *
 * All branches at the same stage in the execution sequence will receive the
 * same starting value.
 *
 * @param {boolean=} opt_propagateCancel If cancel() is called on every child
 *     branch created with opt_propagateCancel, the parent will be canceled as
 *     well.
 * @return {!goog.async.Deferred<VALUE>} A Deferred that will be started with
 *     the computed result from this stage in the execution sequence.
 */
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred();
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};


/**
 * @return {boolean} Whether the execution sequence has been started on this
 *     Deferred by invoking {@code callback} or {@code errback}.
 */
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};


/**
 * @param {*} res The latest result in the execution sequence.
 * @return {boolean} Whether the current result is an error that should cause
 *     the next errback to fire. May be overridden by subclasses to handle
 *     special error types.
 * @protected
 */
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};


/**
 * @return {boolean} Whether an errback exists in the remaining sequence.
 * @private
 */
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    // The errback is the second element in the array.
    return goog.isFunction(sequenceRow[1]);
  });
};


/**
 * Exhausts the execution sequence while a result is available. The result may
 * be modified by callbacks or errbacks, and execution will block if the
 * returned result is an incomplete Deferred.
 *
 * @private
 */
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledErrorId_ && this.hasFired() && this.hasErrback_()) {
    // It is possible to add errbacks after the Deferred has fired. If a new
    // errback is added immediately after the Deferred encountered an unhandled
    // error, but before that error is rethrown, the error is unscheduled.
    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);
    this.unhandledErrorId_ = 0;
  }

  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }

  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;

  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();

    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];

    var f = this.hadError_ ? errback : callback;
    if (f) {
      /** @preserveTry */
      try {
        var ret = f.call(scope || this.defaultScope_, res);

        // If no result, then use previous result.
        if (goog.isDef(ret)) {
          // Bubble up the error as long as the return value hasn't changed.
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }

        if (goog.Thenable.isImplementedBy(res) ||
            (typeof goog.global['Promise'] === 'function' &&
            res instanceof goog.global['Promise'])) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }

      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        this.makeStackTraceLong_(res);

        if (!this.hasErrback_()) {
          // If an error is thrown with no additional errbacks in the queue,
          // prepare to rethrow the error.
          unhandledException = true;
        }
      }
    }
  }

  this.result_ = res;

  if (isNewlyBlocked) {
    var onCallback = goog.bind(this.continue_, this, true /* isSuccess */);
    var onErrback = goog.bind(this.continue_, this, false /* isSuccess */);

    if (res instanceof goog.async.Deferred) {
      res.addCallbacks(onCallback, onErrback);
      res.blocking_ = true;
    } else {
      res.then(onCallback, onErrback);
    }
  } else if (goog.async.Deferred.STRICT_ERRORS && this.isError(res) &&
      !(res instanceof goog.async.Deferred.CanceledError)) {
    this.hadError_ = true;
    unhandledException = true;
  }

  if (unhandledException) {
    // Rethrow the unhandled error after a timeout. Execution will continue, but
    // the error will be seen by global handlers and the user. The throw will
    // be canceled if another errback is appended before the timeout executes.
    // The error's original stack trace is preserved where available.
    this.unhandledErrorId_ = goog.async.Deferred.scheduleError_(res);
  }
};


/**
 * Creates a Deferred that has an initial result.
 *
 * @param {*=} opt_result The result.
 * @return {!goog.async.Deferred} The new Deferred.
 */
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred();
  d.callback(opt_result);
  return d;
};


/**
 * Creates a Deferred that fires when the given promise resolves.
 * Use only during migration to Promises.
 *
 * @param {!goog.Promise<T>} promise
 * @return {!goog.async.Deferred<T>} The new Deferred.
 * @template T
 */
goog.async.Deferred.fromPromise = function(promise) {
  var d = new goog.async.Deferred();
  d.callback();
  d.addCallback(function() {
    return promise;
  });
  return d;
};


/**
 * Creates a Deferred that has an initial error result.
 *
 * @param {*} res The error result.
 * @return {!goog.async.Deferred} The new Deferred.
 */
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred();
  d.errback(res);
  return d;
};


/**
 * Creates a Deferred that has already been canceled.
 *
 * @return {!goog.async.Deferred} The new Deferred.
 */
goog.async.Deferred.canceled = function() {
  var d = new goog.async.Deferred();
  d.cancel();
  return d;
};


/**
 * Normalizes values that may or may not be Deferreds.
 *
 * If the input value is a Deferred, the Deferred is branched (so the original
 * execution sequence is not modified) and the input callback added to the new
 * branch. The branch is returned to the caller.
 *
 * If the input value is not a Deferred, the callback will be executed
 * immediately and an already firing Deferred will be returned to the caller.
 *
 * In the following (contrived) example, if <code>isImmediate</code> is true
 * then 3 is alerted immediately, otherwise 6 is alerted after a 2-second delay.
 *
 * <pre>
 * var value;
 * if (isImmediate) {
 *   value = 3;
 * } else {
 *   value = new goog.async.Deferred();
 *   setTimeout(function() { value.callback(6); }, 2000);
 * }
 *
 * var d = goog.async.Deferred.when(value, alert);
 * </pre>
 *
 * @param {*} value Deferred or normal value to pass to the callback.
 * @param {!function(this:T, ?):?} callback The callback to execute.
 * @param {T=} opt_scope An optional scope to call the callback in.
 * @return {!goog.async.Deferred} A new Deferred that will call the input
 *     callback with the input value.
 * @template T
 */
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};



/**
 * An error sub class that is used when a Deferred has already been called.
 * @param {!goog.async.Deferred} deferred The Deferred.
 *
 * @constructor
 * @extends {goog.debug.Error}
 */
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);

  /**
   * The Deferred that raised this error.
   * @type {goog.async.Deferred}
   */
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);


/** @override */
goog.async.Deferred.AlreadyCalledError.prototype.message =
    'Deferred has already fired';


/** @override */
goog.async.Deferred.AlreadyCalledError.prototype.name = 'AlreadyCalledError';



/**
 * An error sub class that is used when a Deferred is canceled.
 *
 * @param {!goog.async.Deferred} deferred The Deferred object.
 * @constructor
 * @extends {goog.debug.Error}
 */
goog.async.Deferred.CanceledError = function(deferred) {
  goog.debug.Error.call(this);

  /**
   * The Deferred that raised this error.
   * @type {goog.async.Deferred}
   */
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);


/** @override */
goog.async.Deferred.CanceledError.prototype.message = 'Deferred was canceled';


/** @override */
goog.async.Deferred.CanceledError.prototype.name = 'CanceledError';



/**
 * Wrapper around errors that are scheduled to be thrown by failing deferreds
 * after a timeout.
 *
 * @param {*} error Error from a failing deferred.
 * @constructor
 * @final
 * @private
 * @struct
 */
goog.async.Deferred.Error_ = function(error) {
  /** @const @private {number} */
  this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);

  /** @const @private {*} */
  this.error_ = error;
};


/**
 * Actually throws the error and removes it from the list of pending
 * deferred errors.
 */
goog.async.Deferred.Error_.prototype.throwError = function() {
  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_],
      'Cannot throw an error that is not scheduled.');
  delete goog.async.Deferred.errorMap_[this.id_];
  throw this.error_;
};


/**
 * Resets the error throw timer.
 */
goog.async.Deferred.Error_.prototype.resetTimer = function() {
  goog.global.clearTimeout(this.id_);
};


/**
 * Map of unhandled errors scheduled to be rethrown in a future timestep.
 * @private {!Object<number|string, goog.async.Deferred.Error_>}
 */
goog.async.Deferred.errorMap_ = {};


/**
 * Schedules an error to be thrown after a delay.
 * @param {*} error Error from a failing deferred.
 * @return {number} Id of the error.
 * @private
 */
goog.async.Deferred.scheduleError_ = function(error) {
  var deferredError = new goog.async.Deferred.Error_(error);
  goog.async.Deferred.errorMap_[deferredError.id_] = deferredError;
  return deferredError.id_;
};


/**
 * Unschedules an error from being thrown.
 * @param {number} id Id of the deferred error to unschedule.
 * @private
 */
goog.async.Deferred.unscheduleError_ = function(id) {
  var error = goog.async.Deferred.errorMap_[id];
  if (error) {
    error.resetTimer();
    delete goog.async.Deferred.errorMap_[id];
  }
};


/**
 * Asserts that there are no pending deferred errors. If there are any
 * scheduled errors, one will be thrown immediately to make this function fail.
 */
goog.async.Deferred.assertNoErrors = function() {
  var map = goog.async.Deferred.errorMap_;
  for (var key in map) {
    var error = map[key];
    error.resetTimer();
    error.throwError();
  }
};

// Copyright 2010 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Browser capability checks for the dom package.
 *
 */


goog.provide('goog.dom.BrowserFeature');

goog.require('goog.userAgent');


/**
 * Enum of browser capabilities.
 * @enum {boolean}
 */
goog.dom.BrowserFeature = {
  /**
   * Whether attributes 'name' and 'type' can be added to an element after it's
   * created. False in Internet Explorer prior to version 9.
   */
  CAN_ADD_NAME_OR_TYPE_ATTRIBUTES: !goog.userAgent.IE ||
      goog.userAgent.isDocumentModeOrHigher(9),

  /**
   * Whether we can use element.children to access an element's Element
   * children. Available since Gecko 1.9.1, IE 9. (IE<9 also includes comment
   * nodes in the collection.)
   */
  CAN_USE_CHILDREN_ATTRIBUTE: !goog.userAgent.GECKO && !goog.userAgent.IE ||
      goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) ||
      goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher('1.9.1'),

  /**
   * Opera, Safari 3, and Internet Explorer 9 all support innerText but they
   * include text nodes in script and style tags. Not document-mode-dependent.
   */
  CAN_USE_INNER_TEXT: (
      goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('9')),

  /**
   * MSIE, Opera, and Safari>=4 support element.parentElement to access an
   * element's parent if it is an Element.
   */
  CAN_USE_PARENT_ELEMENT_PROPERTY: goog.userAgent.IE || goog.userAgent.OPERA ||
      goog.userAgent.WEBKIT,

  /**
   * Whether NoScope elements need a scoped element written before them in
   * innerHTML.
   * MSDN: http://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx#1
   */
  INNER_HTML_NEEDS_SCOPED_ELEMENT: goog.userAgent.IE,

  /**
   * Whether we use legacy IE range API.
   */
  LEGACY_IE_RANGES: goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)
};

// Copyright 2014 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities for HTML element tag names.
 */
goog.provide('goog.dom.tags');

goog.require('goog.object');


/**
 * The void elements specified by
 * http://www.w3.org/TR/html-markup/syntax.html#void-elements.
 * @const @private {!Object<string, boolean>}
 */
goog.dom.tags.VOID_TAGS_ = goog.object.createSet(
    'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input',
    'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr');


/**
 * Checks whether the tag is void (with no contents allowed and no legal end
 * tag), for example 'br'.
 * @param {string} tagName The tag name in lower case.
 * @return {boolean}
 */
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.string.TypedString');



/**
 * Wrapper for strings that conform to a data type or language.
 *
 * Implementations of this interface are wrappers for strings, and typically
 * associate a type contract with the wrapped string.  Concrete implementations
 * of this interface may choose to implement additional run-time type checking,
 * see for example {@code goog.html.SafeHtml}. If available, client code that
 * needs to ensure type membership of an object should use the type's function
 * to assert type membership, such as {@code goog.html.SafeHtml.unwrap}.
 * @interface
 */
goog.string.TypedString = function() {};


/**
 * Interface marker of the TypedString interface.
 *
 * This property can be used to determine at runtime whether or not an object
 * implements this interface.  All implementations of this interface set this
 * property to {@code true}.
 * @type {boolean}
 */
goog.string.TypedString.prototype.implementsGoogStringTypedString;


/**
 * Retrieves this wrapped string's value.
 * @return {!string} The wrapped string's value.
 */
goog.string.TypedString.prototype.getTypedStringValue;

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.string.Const');

goog.require('goog.asserts');
goog.require('goog.string.TypedString');



/**
 * Wrapper for compile-time-constant strings.
 *
 * Const is a wrapper for strings that can only be created from program
 * constants (i.e., string literals).  This property relies on a custom Closure
 * compiler check that {@code goog.string.Const.from} is only invoked on
 * compile-time-constant expressions.
 *
 * Const is useful in APIs whose correct and secure use requires that certain
 * arguments are not attacker controlled: Compile-time constants are inherently
 * under the control of the application and not under control of external
 * attackers, and hence are safe to use in such contexts.
 *
 * Instances of this type must be created via its factory method
 * {@code goog.string.Const.from} and not by invoking its constructor.  The
 * constructor intentionally takes no parameters and the type is immutable;
 * hence only a default instance corresponding to the empty string can be
 * obtained via constructor invocation.
 *
 * @see goog.string.Const#from
 * @constructor
 * @final
 * @struct
 * @implements {goog.string.TypedString}
 */
goog.string.Const = function() {
  /**
   * The wrapped value of this Const object.  The field has a purposely ugly
   * name to make (non-compiled) code that attempts to directly access this
   * field stand out.
   * @private {string}
   */
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = '';

  /**
   * A type marker used to implement additional run-time type checking.
   * @see goog.string.Const#unwrap
   * @const
   * @private
   */
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ =
      goog.string.Const.TYPE_MARKER_;
};


/**
 * @override
 * @const
 */
goog.string.Const.prototype.implementsGoogStringTypedString = true;


/**
 * Returns this Const's value a string.
 *
 * IMPORTANT: In code where it is security-relevant that an object's type is
 * indeed {@code goog.string.Const}, use {@code goog.string.Const.unwrap}
 * instead of this method.
 *
 * @see goog.string.Const#unwrap
 * @override
 */
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};


/**
 * Returns a debug-string representation of this value.
 *
 * To obtain the actual string value wrapped inside an object of this type,
 * use {@code goog.string.Const.unwrap}.
 *
 * @see goog.string.Const#unwrap
 * @override
 */
goog.string.Const.prototype.toString = function() {
  return 'Const{' +
         this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ +
         '}';
};


/**
 * Performs a runtime check that the provided object is indeed an instance
 * of {@code goog.string.Const}, and returns its value.
 * @param {!goog.string.Const} stringConst The object to extract from.
 * @return {string} The Const object's contained string, unless the run-time
 *     type check fails. In that case, {@code unwrap} returns an innocuous
 *     string, or, if assertions are enabled, throws
 *     {@code goog.asserts.AssertionError}.
 */
goog.string.Const.unwrap = function(stringConst) {
  // Perform additional run-time type-checking to ensure that stringConst is
  // indeed an instance of the expected type.  This provides some additional
  // protection against security bugs due to application code that disables type
  // checks.
  if (stringConst instanceof goog.string.Const &&
      stringConst.constructor === goog.string.Const &&
      stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ ===
          goog.string.Const.TYPE_MARKER_) {
    return stringConst.
        stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail('expected object of type Const, got \'' +
                      stringConst + '\'');
    return 'type_error:Const';
  }
};


/**
 * Creates a Const object from a compile-time constant string.
 *
 * It is illegal to invoke this function on an expression whose
 * compile-time-contant value cannot be determined by the Closure compiler.
 *
 * Correct invocations include,
 * <pre>
 *   var s = goog.string.Const.from('hello');
 *   var t = goog.string.Const.from('hello' + 'world');
 * </pre>
 *
 * In contrast, the following are illegal:
 * <pre>
 *   var s = goog.string.Const.from(getHello());
 *   var t = goog.string.Const.from('hello' + world);
 * </pre>
 *
 * TODO(xtof): Compile-time checks that this function is only called
 * with compile-time constant expressions.
 *
 * @param {string} s A constant string from which to create a Const.
 * @return {!goog.string.Const} A Const object initialized to stringConst.
 */
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};


/**
 * Type marker for the Const type, used to implement additional run-time
 * type checking.
 * @const {!Object}
 * @private
 */
goog.string.Const.TYPE_MARKER_ = {};


/**
 * Utility method to create Const instances.
 * @param {string} s The string to initialize the Const object with.
 * @return {!goog.string.Const} The initialized Const object.
 * @private
 */
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const();
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ =
      s;
  return stringConst;
};

// Copyright 2014 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview The SafeStyle type and its builders.
 *
 * TODO(xtof): Link to document stating type contract.
 */

goog.provide('goog.html.SafeStyle');

goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.string');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');



/**
 * A string-like object which represents a sequence of CSS declarations
 * ({@code propertyName1: propertyvalue1; propertyName2: propertyValue2; ...})
 * and that carries the security type contract that its value, as a string,
 * will not cause untrusted script execution (XSS) when evaluated as CSS in a
 * browser.
 *
 * Instances of this type must be created via the factory methods
 * ({@code goog.html.SafeStyle.create} or
 * {@code goog.html.SafeStyle.fromConstant}) and not by invoking its
 * constructor. The constructor intentionally takes no parameters and the type
 * is immutable; hence only a default instance corresponding to the empty string
 * can be obtained via constructor invocation.
 *
 * A SafeStyle's string representation ({@link #getTypedStringValue()}) can
 * safely:
 * <ul>
 *   <li>Be interpolated as the entire content of a *quoted* HTML style
 *       attribute, or before already existing properties. The SafeStyle string
 *       *must be HTML-attribute-escaped* (where " and ' are escaped) before
 *       interpolation.
 *   <li>Be interpolated as the entire content of a {}-wrapped block within a
 *       stylesheet, or before already existing properties. The SafeStyle string
 *       should not be escaped before interpolation. SafeStyle's contract also
 *       guarantees that the string will not be able to introduce new properties
 *       or elide existing ones.
 *   <li>Be assigned to the style property of a DOM node. The SafeStyle string
 *       should not be escaped before being assigned to the property.
 * </ul>
 *
 * A SafeStyle may never contain literal angle brackets. Otherwise, it could
 * be unsafe to place a SafeStyle into a &lt;style&gt; tag (where it can't
 * be HTML escaped). For example, if the SafeStyle containing
 * "{@code font: 'foo &lt;style/&gt;&lt;script&gt;evil&lt;/script&gt;'}" were
 * interpolated within a &lt;style&gt; tag, this would then break out of the
 * style context into HTML.
 *
 * A SafeStyle may contain literal single or double quotes, and as such the
 * entire style string must be escaped when used in a style attribute (if
 * this were not the case, the string could contain a matching quote that
 * would escape from the style attribute).
 *
 * Values of this type must be composable, i.e. for any two values
 * {@code style1} and {@code style2} of this type,
 * {@code goog.html.SafeStyle.unwrap(style1) +
 * goog.html.SafeStyle.unwrap(style2)} must itself be a value that satisfies
 * the SafeStyle type constraint. This requirement implies that for any value
 * {@code style} of this type, {@code goog.html.SafeStyle.unwrap(style)} must
 * not end in a "property value" or "property name" context. For example,
 * a value of {@code background:url("} or {@code font-} would not satisfy the
 * SafeStyle contract. This is because concatenating such strings with a
 * second value that itself does not contain unsafe CSS can result in an
 * overall string that does. For example, if {@code javascript:evil())"} is
 * appended to {@code background:url("}, the resulting string may result in
 * the execution of a malicious script.
 *
 * TODO(user): Consider whether we should implement UTF-8 interchange
 * validity checks and blacklisting of newlines (including Unicode ones) and
 * other whitespace characters (\t, \f). Document here if so and also update
 * SafeStyle.fromConstant().
 *
 * The following example values comply with this type's contract:
 * <ul>
 *   <li><pre>width: 1em;</pre>
 *   <li><pre>height:1em;</pre>
 *   <li><pre>width: 1em;height: 1em;</pre>
 *   <li><pre>background:url('http://url');</pre>
 * </ul>
 * In addition, the empty string is safe for use in a CSS attribute.
 *
 * The following example values do NOT comply with this type's contract:
 * <ul>
 *   <li><pre>background: red</pre> (missing a trailing semi-colon)
 *   <li><pre>background:</pre> (missing a value and a trailing semi-colon)
 *   <li><pre>1em</pre> (missing an attribute name, which provides context for
 *       the value)
 * </ul>
 *
 * @see goog.html.SafeStyle#create
 * @see goog.html.SafeStyle#fromConstant
 * @see http://www.w3.org/TR/css3-syntax/
 * @constructor
 * @final
 * @struct
 * @implements {goog.string.TypedString}
 */
goog.html.SafeStyle = function() {
  /**
   * The contained value of this SafeStyle.  The field has a purposely
   * ugly name to make (non-compiled) code that attempts to directly access this
   * field stand out.
   * @private {string}
   */
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = '';

  /**
   * A type marker used to implement additional run-time type checking.
   * @see goog.html.SafeStyle#unwrap
   * @const
   * @private
   */
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =
      goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};


/**
 * @override
 * @const
 */
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;


/**
 * Type marker for the SafeStyle type, used to implement additional
 * run-time type checking.
 * @const {!Object}
 * @private
 */
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};


/**
 * Creates a SafeStyle object from a compile-time constant string.
 *
 * {@code style} should be in the format
 * {@code name: value; [name: value; ...]} and must not have any < or >
 * characters in it. This is so that SafeStyle's contract is preserved,
 * allowing the SafeStyle to correctly be interpreted as a sequence of CSS
 * declarations and without affecting the syntactic structure of any
 * surrounding CSS and HTML.
 *
 * This method performs basic sanity checks on the format of {@code style}
 * but does not constrain the format of {@code name} and {@code value}, except
 * for disallowing tag characters.
 *
 * @param {!goog.string.Const} style A compile-time-constant string from which
 *     to create a SafeStyle.
 * @return {!goog.html.SafeStyle} A SafeStyle object initialized to
 *     {@code style}.
 */
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ';'),
      'Last character of style string is not \';\': ' + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ':'),
      'Style string must contain at least one \':\', to ' +
      'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(
      styleString);
};


/**
 * Checks if the style definition is valid.
 * @param {string} style
 * @private
 */
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style),
      'Forbidden characters in style string: ' + style);
};


/**
 * Returns this SafeStyle's value as a string.
 *
 * IMPORTANT: In code where it is security relevant that an object's type is
 * indeed {@code SafeStyle}, use {@code goog.html.SafeStyle.unwrap} instead of
 * this method. If in doubt, assume that it's security relevant. In particular,
 * note that goog.html functions which return a goog.html type do not guarantee
 * the returned instance is of the right type. For example:
 *
 * <pre>
 * var fakeSafeHtml = new String('fake');
 * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
 * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
 * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
 * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
 * // instanceof goog.html.SafeHtml.
 * </pre>
 *
 * @see goog.html.SafeStyle#unwrap
 * @override
 */
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};


if (goog.DEBUG) {
  /**
   * Returns a debug string-representation of this value.
   *
   * To obtain the actual string value wrapped in a SafeStyle, use
   * {@code goog.html.SafeStyle.unwrap}.
   *
   * @see goog.html.SafeStyle#unwrap
   * @override
   */
  goog.html.SafeStyle.prototype.toString = function() {
    return 'SafeStyle{' +
        this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + '}';
  };
}


/**
 * Performs a runtime check that the provided object is indeed a
 * SafeStyle object, and returns its value.
 *
 * @param {!goog.html.SafeStyle} safeStyle The object to extract from.
 * @return {string} The safeStyle object's contained string, unless
 *     the run-time type check fails. In that case, {@code unwrap} returns an
 *     innocuous string, or, if assertions are enabled, throws
 *     {@code goog.asserts.AssertionError}.
 */
goog.html.SafeStyle.unwrap = function(safeStyle) {
  // Perform additional Run-time type-checking to ensure that
  // safeStyle is indeed an instance of the expected type.  This
  // provides some additional protection against security bugs due to
  // application code that disables type checks.
  // Specifically, the following checks are performed:
  // 1. The object is an instance of the expected type.
  // 2. The object is not an instance of a subclass.
  // 3. The object carries a type marker for the expected type. "Faking" an
  // object requires a reference to the type marker, which has names intended
  // to stand out in code reviews.
  if (safeStyle instanceof goog.html.SafeStyle &&
      safeStyle.constructor === goog.html.SafeStyle &&
      safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===
          goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail(
        'expected object of type SafeStyle, got \'' + safeStyle + '\'');
    return 'type_error:SafeStyle';
  }
};


/**
 * Package-internal utility method to create SafeStyle instances.
 *
 * @param {string} style The string to initialize the SafeStyle object with.
 * @return {!goog.html.SafeStyle} The initialized SafeStyle object.
 * @package
 */
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse =
    function(style) {
  return new goog.html.SafeStyle().initSecurityPrivateDoNotAccessOrElse_(style);
};


/**
 * Called from createSafeStyleSecurityPrivateDoNotAccessOrElse(). This
 * method exists only so that the compiler can dead code eliminate static
 * fields (like EMPTY) when they're not accessed.
 * @param {string} style
 * @return {!goog.html.SafeStyle}
 * @private
 */
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(
    style) {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return this;
};


/**
 * A SafeStyle instance corresponding to the empty string.
 * @const {!goog.html.SafeStyle}
 */
goog.html.SafeStyle.EMPTY =
    goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse('');


/**
 * The innocuous string generated by goog.html.SafeUrl.create when passed
 * an unsafe value.
 * @const {string}
 */
goog.html.SafeStyle.INNOCUOUS_STRING = 'zClosurez';


/**
 * Mapping of property names to their values.
 * @typedef {!Object<string, goog.string.Const|string>}
 */
goog.html.SafeStyle.PropertyMap;


/**
 * Creates a new SafeStyle object from the properties specified in the map.
 * @param {goog.html.SafeStyle.PropertyMap} map Mapping of property names to
 *     their values, for example {'margin': '1px'}. Names must consist of
 *     [-_a-zA-Z0-9]. Values might be strings consisting of
 *     [-,.'"%_!# a-zA-Z0-9], where " and ' must be properly balanced.
 *     Other values must be wrapped in goog.string.Const. Null value causes
 *     skipping the property.
 * @return {!goog.html.SafeStyle}
 * @throws {Error} If invalid name is provided.
 * @throws {goog.asserts.AssertionError} If invalid value is provided. With
 *     disabled assertions, invalid value is replaced by
 *     goog.html.SafeStyle.INNOCUOUS_STRING.
 */
goog.html.SafeStyle.create = function(map) {
  var style = '';
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error('Name allows only [-_a-zA-Z0-9], got: ' + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      // These characters can be used to change context and we don't want that
      // even with const values.
      goog.asserts.assert(!/[{;}]/.test(value), 'Value does not allow [{;}].');
    } else if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
      goog.asserts.fail(
          'String value allows only [-,."\'%_!# a-zA-Z0-9], got: ' + value);
      value = goog.html.SafeStyle.INNOCUOUS_STRING;
    } else if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {
      goog.asserts.fail('String value requires balanced quotes, got: ' + value);
      value = goog.html.SafeStyle.INNOCUOUS_STRING;
    }
    style += name + ':' + value + ';';
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(
      style);
};


/**
 * Checks that quotes (" and ') are properly balanced inside a string. Assumes
 * that neither escape (\) nor any other character that could result in
 * breaking out of a string parsing context are allowed;
 * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
 * @param {string} value Untrusted CSS property value.
 * @return {boolean} True if property value is safe with respect to quote
 *     balancedness.
 * @private
 */
goog.html.SafeStyle.hasBalancedQuotes_ = function(value) {
  var outsideSingle = true;
  var outsideDouble = true;
  for (var i = 0; i < value.length; i++) {
    var c = value.charAt(i);
    if (c == "'" && outsideDouble) {
      outsideSingle = !outsideSingle;
    } else if (c == '"' && outsideSingle) {
      outsideDouble = !outsideDouble;
    }
  }
  return outsideSingle && outsideDouble;
};


// Keep in sync with the error string in create().
/**
 * Regular expression for safe values.
 *
 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure
 * they're balanced.
 *
 * ',' allows multiple values to be assigned to the same property
 * (e.g. background-attachment or font-family) and hence could allow
 * multiple values to get injected, but that should pose no risk of XSS.
 * @const {!RegExp}
 * @private
 */
goog.html.SafeStyle.VALUE_RE_ = /^[-,."'%_!# a-zA-Z0-9]+$/;


/**
 * Creates a new SafeStyle object by concatenating the values.
 * @param {...(!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>)} var_args
 *     SafeStyles to concatenate.
 * @return {!goog.html.SafeStyle}
 */
goog.html.SafeStyle.concat = function(var_args) {
  var style = '';

  /**
   * @param {!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>} argument
   */
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };

  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(
      style);
};

// Copyright 2014 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview The SafeStyleSheet type and its builders.
 *
 * TODO(xtof): Link to document stating type contract.
 */

goog.provide('goog.html.SafeStyleSheet');

goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.string');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');



/**
 * A string-like object which represents a CSS style sheet and that carries the
 * security type contract that its value, as a string, will not cause untrusted
 * script execution (XSS) when evaluated as CSS in a browser.
 *
 * Instances of this type must be created via the factory method
 * {@code goog.html.SafeStyleSheet.fromConstant} and not by invoking its
 * constructor. The constructor intentionally takes no parameters and the type
 * is immutable; hence only a default instance corresponding to the empty string
 * can be obtained via constructor invocation.
 *
 * A SafeStyleSheet's string representation can safely be interpolated as the
 * content of a style element within HTML. The SafeStyleSheet string should
 * not be escaped before interpolation.
 *
 * Values of this type must be composable, i.e. for any two values
 * {@code styleSheet1} and {@code styleSheet2} of this type,
 * {@code goog.html.SafeStyleSheet.unwrap(styleSheet1) +
 * goog.html.SafeStyleSheet.unwrap(styleSheet2)} must itself be a value that
 * satisfies the SafeStyleSheet type constraint. This requirement implies that
 * for any value {@code styleSheet} of this type,
 * {@code goog.html.SafeStyleSheet.unwrap(styleSheet1)} must end in
 * "beginning of rule" context.

 * A SafeStyleSheet can be constructed via security-reviewed unchecked
 * conversions. In this case producers of SafeStyleSheet must ensure themselves
 * that the SafeStyleSheet does not contain unsafe script. Note in particular
 * that {@code &lt;} is dangerous, even when inside CSS strings, and so should
 * always be forbidden or CSS-escaped in user controlled input. For example, if
 * {@code &lt;/style&gt;&lt;script&gt;evil&lt;/script&gt;"} were interpolated
 * inside a CSS string, it would break out of the context of the original
 * style element and {@code evil} would execute. Also note that within an HTML
 * style (raw text) element, HTML character references, such as
 * {@code &amp;lt;}, are not allowed. See
 * http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements
 * (similar considerations apply to the style element).
 *
 * @see goog.html.SafeStyleSheet#fromConstant
 * @constructor
 * @final
 * @struct
 * @implements {goog.string.TypedString}
 */
goog.html.SafeStyleSheet = function() {
  /**
   * The contained value of this SafeStyleSheet.  The field has a purposely
   * ugly name to make (non-compiled) code that attempts to directly access this
   * field stand out.
   * @private {string}
   */
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = '';

  /**
   * A type marker used to implement additional run-time type checking.
   * @see goog.html.SafeStyleSheet#unwrap
   * @const
   * @private
   */
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =
      goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};


/**
 * @override
 * @const
 */
goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;


/**
 * Type marker for the SafeStyleSheet type, used to implement additional
 * run-time type checking.
 * @const {!Object}
 * @private
 */
goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};


/**
 * Creates a new SafeStyleSheet object by concatenating values.
 * @param {...(!goog.html.SafeStyleSheet|!Array<!goog.html.SafeStyleSheet>)}
 *     var_args Values to concatenate.
 * @return {!goog.html.SafeStyleSheet}
 */
goog.html.SafeStyleSheet.concat = function(var_args) {
  var result = '';

  /**
   * @param {!goog.html.SafeStyleSheet|!Array<!goog.html.SafeStyleSheet>}
   *     argument
   */
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      result += goog.html.SafeStyleSheet.unwrap(argument);
    }
  };

  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeStyleSheet
      .createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(result);
};


/**
 * Creates a SafeStyleSheet object from a compile-time constant string.
 *
 * {@code styleSheet} must not have any &lt; characters in it, so that
 * the syntactic structure of the surrounding HTML is not affected.
 *
 * @param {!goog.string.Const} styleSheet A compile-time-constant string from
 *     which to create a SafeStyleSheet.
 * @return {!goog.html.SafeStyleSheet} A SafeStyleSheet object initialized to
 *     {@code styleSheet}.
 */
goog.html.SafeStyleSheet.fromConstant = function(styleSheet) {
  var styleSheetString = goog.string.Const.unwrap(styleSheet);
  if (styleSheetString.length === 0) {
    return goog.html.SafeStyleSheet.EMPTY;
  }
  // > is a valid character in CSS selectors and there's no strict need to
  // block it if we already block <.
  goog.asserts.assert(!goog.string.contains(styleSheetString, '<'),
      "Forbidden '<' character in style sheet string: " + styleSheetString);
  return goog.html.SafeStyleSheet.
      createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheetString);
};


/**
 * Returns this SafeStyleSheet's value as a string.
 *
 * IMPORTANT: In code where it is security relevant that an object's type is
 * indeed {@code SafeStyleSheet}, use {@code goog.html.SafeStyleSheet.unwrap}
 * instead of this method. If in doubt, assume that it's security relevant. In
 * particular, note that goog.html functions which return a goog.html type do
 * not guarantee the returned instance is of the right type. For example:
 *
 * <pre>
 * var fakeSafeHtml = new String('fake');
 * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
 * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
 * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
 * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
 * // instanceof goog.html.SafeHtml.
 * </pre>
 *
 * @see goog.html.SafeStyleSheet#unwrap
 * @override
 */
goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
};


if (goog.DEBUG) {
  /**
   * Returns a debug string-representation of this value.
   *
   * To obtain the actual string value wrapped in a SafeStyleSheet, use
   * {@code goog.html.SafeStyleSheet.unwrap}.
   *
   * @see goog.html.SafeStyleSheet#unwrap
   * @override
   */
  goog.html.SafeStyleSheet.prototype.toString = function() {
    return 'SafeStyleSheet{' +
        this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + '}';
  };
}


/**
 * Performs a runtime check that the provided object is indeed a
 * SafeStyleSheet object, and returns its value.
 *
 * @param {!goog.html.SafeStyleSheet} safeStyleSheet The object to extract from.
 * @return {string} The safeStyleSheet object's contained string, unless
 *     the run-time type check fails. In that case, {@code unwrap} returns an
 *     innocuous string, or, if assertions are enabled, throws
 *     {@code goog.asserts.AssertionError}.
 */
goog.html.SafeStyleSheet.unwrap = function(safeStyleSheet) {
  // Perform additional Run-time type-checking to ensure that
  // safeStyleSheet is indeed an instance of the expected type.  This
  // provides some additional protection against security bugs due to
  // application code that disables type checks.
  // Specifically, the following checks are performed:
  // 1. The object is an instance of the expected type.
  // 2. The object is not an instance of a subclass.
  // 3. The object carries a type marker for the expected type. "Faking" an
  // object requires a reference to the type marker, which has names intended
  // to stand out in code reviews.
  if (safeStyleSheet instanceof goog.html.SafeStyleSheet &&
      safeStyleSheet.constructor === goog.html.SafeStyleSheet &&
      safeStyleSheet.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===
          goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
  } else {
    goog.asserts.fail(
        "expected object of type SafeStyleSheet, got '" + safeStyleSheet +
        "'");
    return 'type_error:SafeStyleSheet';
  }
};


/**
 * Package-internal utility method to create SafeStyleSheet instances.
 *
 * @param {string} styleSheet The string to initialize the SafeStyleSheet
 *     object with.
 * @return {!goog.html.SafeStyleSheet} The initialized SafeStyleSheet object.
 * @package
 */
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse =
    function(styleSheet) {
  return new goog.html.SafeStyleSheet().initSecurityPrivateDoNotAccessOrElse_(
      styleSheet);
};


/**
 * Called from createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(). This
 * method exists only so that the compiler can dead code eliminate static
 * fields (like EMPTY) when they're not accessed.
 * @param {string} styleSheet
 * @return {!goog.html.SafeStyleSheet}
 * @private
 */
goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ =
    function(styleSheet) {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = styleSheet;
  return this;
};


/**
 * A SafeStyleSheet instance corresponding to the empty string.
 * @const {!goog.html.SafeStyleSheet}
 */
goog.html.SafeStyleSheet.EMPTY =
    goog.html.SafeStyleSheet.
        createSafeStyleSheetSecurityPrivateDoNotAccessOrElse('');

// Copyright 2015 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Wrapper for URL and its createObjectUrl and revokeObjectUrl
 * methods that are part of the HTML5 File API.
 */

goog.provide('goog.fs.url');


/**
 * Creates a blob URL for a blob object.
 * Throws an error if the browser does not support Object Urls.
 *
 * @param {!Blob} blob The object for which to create the URL.
 * @return {string} The URL for the object.
 */
goog.fs.url.createObjectUrl = function(blob) {
  return goog.fs.url.getUrlObject_().createObjectURL(blob);
};


/**
 * Revokes a URL created by {@link goog.fs.url.createObjectUrl}.
 * Throws an error if the browser does not support Object Urls.
 *
 * @param {string} url The URL to revoke.
 */
goog.fs.url.revokeObjectUrl = function(url) {
  goog.fs.url.getUrlObject_().revokeObjectURL(url);
};


/**
 * @typedef {{createObjectURL: (function(!Blob): string),
 *            revokeObjectURL: function(string): void}}
 */
goog.fs.url.UrlObject_;


/**
 * Get the object that has the createObjectURL and revokeObjectURL functions for
 * this browser.
 *
 * @return {goog.fs.url.UrlObject_} The object for this browser.
 * @private
 */
goog.fs.url.getUrlObject_ = function() {
  var urlObject = goog.fs.url.findUrlObject_();
  if (urlObject != null) {
    return urlObject;
  } else {
    throw Error('This browser doesn\'t seem to support blob URLs');
  }
};


/**
 * Finds the object that has the createObjectURL and revokeObjectURL functions
 * for this browser.
 *
 * @return {?goog.fs.url.UrlObject_} The object for this browser or null if the
 *     browser does not support Object Urls.
 * @suppress {unnecessaryCasts} Depending on how the code is compiled, casting
 *     goog.global to UrlObject_ may result in unnecessary cast warning.
 *     However, the cast cannot be removed because with different set of
 *     compiler flags, the cast is indeed necessary.  As such, silencing it.
 * @private
 */
goog.fs.url.findUrlObject_ = function() {
  // This is what the spec says to do
  // http://dev.w3.org/2006/webapi/FileAPI/#dfn-createObjectURL
  if (goog.isDef(goog.global.URL) &&
      goog.isDef(goog.global.URL.createObjectURL)) {
    return /** @type {goog.fs.url.UrlObject_} */ (goog.global.URL);
  // This is what Chrome does (as of 10.0.648.6 dev)
  } else if (goog.isDef(goog.global.webkitURL) &&
             goog.isDef(goog.global.webkitURL.createObjectURL)) {
    return /** @type {goog.fs.url.UrlObject_} */ (goog.global.webkitURL);
  // This is what the spec used to say to do
  } else if (goog.isDef(goog.global.createObjectURL)) {
    return /** @type {goog.fs.url.UrlObject_} */ (goog.global);
  } else {
    return null;
  }
};


/**
 * Checks whether this browser supports Object Urls. If not, calls to
 * createObjectUrl and revokeObjectUrl will result in an error.
 *
 * @return {boolean} True if this browser supports Object Urls.
 */
goog.fs.url.browserSupportsObjectUrls = function() {
  return goog.fs.url.findUrlObject_() != null;
};

// Copyright 2007 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utility functions for supporting Bidi issues.
 */


/**
 * Namespace for bidi supporting functions.
 */
goog.provide('goog.i18n.bidi');
goog.provide('goog.i18n.bidi.Dir');
goog.provide('goog.i18n.bidi.DirectionalString');
goog.provide('goog.i18n.bidi.Format');


/**
 * @define {boolean} FORCE_RTL forces the {@link goog.i18n.bidi.IS_RTL} constant
 * to say that the current locale is a RTL locale.  This should only be used
 * if you want to override the default behavior for deciding whether the
 * current locale is RTL or not.
 *
 * {@see goog.i18n.bidi.IS_RTL}
 */
goog.define('goog.i18n.bidi.FORCE_RTL', false);


/**
 * Constant that defines whether or not the current locale is a RTL locale.
 * If {@link goog.i18n.bidi.FORCE_RTL} is not true, this constant will default
 * to check that {@link goog.LOCALE} is one of a few major RTL locales.
 *
 * <p>This is designed to be a maximally efficient compile-time constant. For
 * example, for the default goog.LOCALE, compiling
 * "if (goog.i18n.bidi.IS_RTL) alert('rtl') else {}" should produce no code. It
 * is this design consideration that limits the implementation to only
 * supporting a few major RTL locales, as opposed to the broader repertoire of
 * something like goog.i18n.bidi.isRtlLanguage.
 *
 * <p>Since this constant refers to the directionality of the locale, it is up
 * to the caller to determine if this constant should also be used for the
 * direction of the UI.
 *
 * {@see goog.LOCALE}
 *
 * @type {boolean}
 *
 * TODO(user): write a test that checks that this is a compile-time constant.
 */
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL ||
    (
        (goog.LOCALE.substring(0, 2).toLowerCase() == 'ar' ||
         goog.LOCALE.substring(0, 2).toLowerCase() == 'fa' ||
         goog.LOCALE.substring(0, 2).toLowerCase() == 'he' ||
         goog.LOCALE.substring(0, 2).toLowerCase() == 'iw' ||
         goog.LOCALE.substring(0, 2).toLowerCase() == 'ps' ||
         goog.LOCALE.substring(0, 2).toLowerCase() == 'sd' ||
         goog.LOCALE.substring(0, 2).toLowerCase() == 'ug' ||
         goog.LOCALE.substring(0, 2).toLowerCase() == 'ur' ||
         goog.LOCALE.substring(0, 2).toLowerCase() == 'yi') &&
        (goog.LOCALE.length == 2 ||
         goog.LOCALE.substring(2, 3) == '-' ||
         goog.LOCALE.substring(2, 3) == '_')
    ) || (
        goog.LOCALE.length >= 3 &&
        goog.LOCALE.substring(0, 3).toLowerCase() == 'ckb' &&
        (goog.LOCALE.length == 3 ||
         goog.LOCALE.substring(3, 4) == '-' ||
         goog.LOCALE.substring(3, 4) == '_')
    );


/**
 * Unicode formatting characters and directionality string constants.
 * @enum {string}
 */
goog.i18n.bidi.Format = {
  /** Unicode "Left-To-Right Embedding" (LRE) character. */
  LRE: '\u202A',
  /** Unicode "Right-To-Left Embedding" (RLE) character. */
  RLE: '\u202B',
  /** Unicode "Pop Directional Formatting" (PDF) character. */
  PDF: '\u202C',
  /** Unicode "Left-To-Right Mark" (LRM) character. */
  LRM: '\u200E',
  /** Unicode "Right-To-Left Mark" (RLM) character. */
  RLM: '\u200F'
};


/**
 * Directionality enum.
 * @enum {number}
 */
goog.i18n.bidi.Dir = {
  /**
   * Left-to-right.
   */
  LTR: 1,

  /**
   * Right-to-left.
   */
  RTL: -1,

  /**
   * Neither left-to-right nor right-to-left.
   */
  NEUTRAL: 0
};


/**
 * 'right' string constant.
 * @type {string}
 */
goog.i18n.bidi.RIGHT = 'right';


/**
 * 'left' string constant.
 * @type {string}
 */
goog.i18n.bidi.LEFT = 'left';


/**
 * 'left' if locale is RTL, 'right' if not.
 * @type {string}
 */
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT :
    goog.i18n.bidi.RIGHT;


/**
 * 'right' if locale is RTL, 'left' if not.
 * @type {string}
 */
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT :
    goog.i18n.bidi.LEFT;


/**
 * Convert a directionality given in various formats to a goog.i18n.bidi.Dir
 * constant. Useful for interaction with different standards of directionality
 * representation.
 *
 * @param {goog.i18n.bidi.Dir|number|boolean|null} givenDir Directionality given
 *     in one of the following formats:
 *     1. A goog.i18n.bidi.Dir constant.
 *     2. A number (positive = LTR, negative = RTL, 0 = neutral).
 *     3. A boolean (true = RTL, false = LTR).
 *     4. A null for unknown directionality.
 * @param {boolean=} opt_noNeutral Whether a givenDir of zero or
 *     goog.i18n.bidi.Dir.NEUTRAL should be treated as null, i.e. unknown, in
 *     order to preserve legacy behavior.
 * @return {?goog.i18n.bidi.Dir} A goog.i18n.bidi.Dir constant matching the
 *     given directionality. If given null, returns null (i.e. unknown).
 */
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == 'number') {
    // This includes the non-null goog.i18n.bidi.Dir case.
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR :
        givenDir < 0 ? goog.i18n.bidi.Dir.RTL :
        opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else if (givenDir == null) {
    return null;
  } else {
    // Must be typeof givenDir == 'boolean'.
    return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
  }
};


/**
 * A practical pattern to identify strong LTR characters. This pattern is not
 * theoretically correct according to the Unicode standard. It is simplified for
 * performance and small code size.
 * @type {string}
 * @private
 */
goog.i18n.bidi.ltrChars_ =
    'A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02B8\u0300-\u0590\u0800-\u1FFF' +
    '\u200E\u2C00-\uFB1C\uFE00-\uFE6F\uFEFD-\uFFFF';


/**
 * A practical pattern to identify strong RTL character. This pattern is not
 * theoretically correct according to the Unicode standard. It is simplified
 * for performance and small code size.
 * @type {string}
 * @private
 */
goog.i18n.bidi.rtlChars_ =
    '\u0591-\u06EF\u06FA-\u07FF\u200F\uFB1D-\uFDFF\uFE70-\uFEFC';


/**
 * Simplified regular expression for an HTML tag (opening or closing) or an HTML
 * escape. We might want to skip over such expressions when estimating the text
 * directionality.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;


/**
 * Returns the input text with spaces instead of HTML tags or HTML escapes, if
 * opt_isStripNeeded is true. Else returns the input as is.
 * Useful for text directionality estimation.
 * Note: the function should not be used in other contexts; it is not 100%
 * correct, but rather a good-enough implementation for directionality
 * estimation purposes.
 * @param {string} str The given string.
 * @param {boolean=} opt_isStripNeeded Whether to perform the stripping.
 *     Default: false (to retain consistency with calling functions).
 * @return {string} The given string cleaned of HTML tags / escapes.
 * @private
 */
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, '') :
      str;
};


/**
 * Regular expression to check for RTL characters.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.rtlCharReg_ = new RegExp('[' + goog.i18n.bidi.rtlChars_ + ']');


/**
 * Regular expression to check for LTR characters.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.ltrCharReg_ = new RegExp('[' + goog.i18n.bidi.ltrChars_ + ']');


/**
 * Test whether the given string has any RTL characters in it.
 * @param {string} str The given string that need to be tested.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether the string contains RTL characters.
 */
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(
      str, opt_isHtml));
};


/**
 * Test whether the given string has any RTL characters in it.
 * @param {string} str The given string that need to be tested.
 * @return {boolean} Whether the string contains RTL characters.
 * @deprecated Use hasAnyRtl.
 */
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;


/**
 * Test whether the given string has any LTR characters in it.
 * @param {string} str The given string that need to be tested.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether the string contains LTR characters.
 */
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(
      str, opt_isHtml));
};


/**
 * Regular expression pattern to check if the first character in the string
 * is LTR.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.ltrRe_ = new RegExp('^[' + goog.i18n.bidi.ltrChars_ + ']');


/**
 * Regular expression pattern to check if the first character in the string
 * is RTL.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.rtlRe_ = new RegExp('^[' + goog.i18n.bidi.rtlChars_ + ']');


/**
 * Check if the first character in the string is RTL or not.
 * @param {string} str The given string that need to be tested.
 * @return {boolean} Whether the first character in str is an RTL char.
 */
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};


/**
 * Check if the first character in the string is LTR or not.
 * @param {string} str The given string that need to be tested.
 * @return {boolean} Whether the first character in str is an LTR char.
 */
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};


/**
 * Check if the first character in the string is neutral or not.
 * @param {string} str The given string that need to be tested.
 * @return {boolean} Whether the first character in str is a neutral char.
 */
goog.i18n.bidi.isNeutralChar = function(str) {
  return !goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};


/**
 * Regular expressions to check if a piece of text is of LTR directionality
 * on first character with strong directionality.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp(
    '^[^' + goog.i18n.bidi.rtlChars_ + ']*[' + goog.i18n.bidi.ltrChars_ + ']');


/**
 * Regular expressions to check if a piece of text is of RTL directionality
 * on first character with strong directionality.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp(
    '^[^' + goog.i18n.bidi.ltrChars_ + ']*[' + goog.i18n.bidi.rtlChars_ + ']');


/**
 * Check whether the first strongly directional character (if any) is RTL.
 * @param {string} str String being checked.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether RTL directionality is detected using the first
 *     strongly-directional character method.
 */
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(
      str, opt_isHtml));
};


/**
 * Check whether the first strongly directional character (if any) is RTL.
 * @param {string} str String being checked.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether RTL directionality is detected using the first
 *     strongly-directional character method.
 * @deprecated Use startsWithRtl.
 */
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;


/**
 * Check whether the first strongly directional character (if any) is LTR.
 * @param {string} str String being checked.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether LTR directionality is detected using the first
 *     strongly-directional character method.
 */
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(
      str, opt_isHtml));
};


/**
 * Check whether the first strongly directional character (if any) is LTR.
 * @param {string} str String being checked.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether LTR directionality is detected using the first
 *     strongly-directional character method.
 * @deprecated Use startsWithLtr.
 */
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;


/**
 * Regular expression to check if a string looks like something that must
 * always be LTR even in RTL text, e.g. a URL. When estimating the
 * directionality of text containing these, we treat these as weakly LTR,
 * like numbers.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;


/**
 * Check whether the input string either contains no strongly directional
 * characters or looks like a url.
 * @param {string} str String being checked.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether neutral directionality is detected.
 */
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) ||
      !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};


/**
 * Regular expressions to check if the last strongly-directional character in a
 * piece of text is LTR.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp(
    '[' + goog.i18n.bidi.ltrChars_ + '][^' + goog.i18n.bidi.rtlChars_ + ']*$');


/**
 * Regular expressions to check if the last strongly-directional character in a
 * piece of text is RTL.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp(
    '[' + goog.i18n.bidi.rtlChars_ + '][^' + goog.i18n.bidi.ltrChars_ + ']*$');


/**
 * Check if the exit directionality a piece of text is LTR, i.e. if the last
 * strongly-directional character in the string is LTR.
 * @param {string} str String being checked.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether LTR exit directionality was detected.
 */
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(
      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};


/**
 * Check if the exit directionality a piece of text is LTR, i.e. if the last
 * strongly-directional character in the string is LTR.
 * @param {string} str String being checked.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether LTR exit directionality was detected.
 * @deprecated Use endsWithLtr.
 */
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;


/**
 * Check if the exit directionality a piece of text is RTL, i.e. if the last
 * strongly-directional character in the string is RTL.
 * @param {string} str String being checked.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether RTL exit directionality was detected.
 */
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(
      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};


/**
 * Check if the exit directionality a piece of text is RTL, i.e. if the last
 * strongly-directional character in the string is RTL.
 * @param {string} str String being checked.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether RTL exit directionality was detected.
 * @deprecated Use endsWithRtl.
 */
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;


/**
 * A regular expression for matching right-to-left language codes.
 * See {@link #isRtlLanguage} for the design.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.rtlLocalesRe_ = new RegExp(
    '^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|' +
    '.*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))' +
    '(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)',
    'i');


/**
 * Check if a BCP 47 / III language code indicates an RTL language, i.e. either:
 * - a language code explicitly specifying one of the right-to-left scripts,
 *   e.g. "az-Arab", or<p>
 * - a language code specifying one of the languages normally written in a
 *   right-to-left script, e.g. "fa" (Farsi), except ones explicitly specifying
 *   Latin or Cyrillic script (which are the usual LTR alternatives).<p>
 * The list of right-to-left scripts appears in the 100-199 range in
 * http://www.unicode.org/iso15924/iso15924-num.html, of which Arabic and
 * Hebrew are by far the most widely used. We also recognize Thaana, N'Ko, and
 * Tifinagh, which also have significant modern usage. The rest (Syriac,
 * Samaritan, Mandaic, etc.) seem to have extremely limited or no modern usage
 * and are not recognized to save on code size.
 * The languages usually written in a right-to-left script are taken as those
 * with Suppress-Script: Hebr|Arab|Thaa|Nkoo|Tfng  in
 * http://www.iana.org/assignments/language-subtag-registry,
 * as well as Central (or Sorani) Kurdish (ckb), Sindhi (sd) and Uyghur (ug).
 * Other subtags of the language code, e.g. regions like EG (Egypt), are
 * ignored.
 * @param {string} lang BCP 47 (a.k.a III) language code.
 * @return {boolean} Whether the language code is an RTL language.
 */
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};


/**
 * Regular expression for bracket guard replacement in html.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.bracketGuardHtmlRe_ =
    /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(&lt;.*?(&gt;)+)/g;


/**
 * Regular expression for bracket guard replacement in text.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.bracketGuardTextRe_ =
    /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;


/**
 * Apply bracket guard using html span tag. This is to address the problem of
 * messy bracket display frequently happens in RTL layout.
 * @param {string} s The string that need to be processed.
 * @param {boolean=} opt_isRtlContext specifies default direction (usually
 *     direction of the UI).
 * @return {string} The processed string, with all bracket guarded.
 */
goog.i18n.bidi.guardBracketInHtml = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ?
      goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  if (useRtl) {
    return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_,
        '<span dir=rtl>$&</span>');
  }
  return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_,
      '<span dir=ltr>$&</span>');
};


/**
 * Apply bracket guard using LRM and RLM. This is to address the problem of
 * messy bracket display frequently happens in RTL layout.
 * This version works for both plain text and html. But it does not work as
 * good as guardBracketInHtml in some cases.
 * @param {string} s The string that need to be processed.
 * @param {boolean=} opt_isRtlContext specifies default direction (usually
 *     direction of the UI).
 * @return {string} The processed string, with all bracket guarded.
 */
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ?
      goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + '$&' + mark);
};


/**
 * Enforce the html snippet in RTL directionality regardless overall context.
 * If the html piece was enclosed by tag, dir will be applied to existing
 * tag, otherwise a span tag will be added as wrapper. For this reason, if
 * html snippet start with with tag, this tag must enclose the whole piece. If
 * the tag already has a dir specified, this new one will override existing
 * one in behavior (tested on FF and IE).
 * @param {string} html The string that need to be processed.
 * @return {string} The processed string, with directionality enforced to RTL.
 */
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == '<') {
    return html.replace(/<\w+/, '$& dir=rtl');
  }
  // '\n' is important for FF so that it won't incorrectly merge span groups
  return '\n<span dir=rtl>' + html + '</span>';
};


/**
 * Enforce RTL on both end of the given text piece using unicode BiDi formatting
 * characters RLE and PDF.
 * @param {string} text The piece of text that need to be wrapped.
 * @return {string} The wrapped string after process.
 */
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};


/**
 * Enforce the html snippet in RTL directionality regardless overall context.
 * If the html piece was enclosed by tag, dir will be applied to existing
 * tag, otherwise a span tag will be added as wrapper. For this reason, if
 * html snippet start with with tag, this tag must enclose the whole piece. If
 * the tag already has a dir specified, this new one will override existing
 * one in behavior (tested on FF and IE).
 * @param {string} html The string that need to be processed.
 * @return {string} The processed string, with directionality enforced to RTL.
 */
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == '<') {
    return html.replace(/<\w+/, '$& dir=ltr');
  }
  // '\n' is important for FF so that it won't incorrectly merge span groups
  return '\n<span dir=ltr>' + html + '</span>';
};


/**
 * Enforce LTR on both end of the given text piece using unicode BiDi formatting
 * characters LRE and PDF.
 * @param {string} text The piece of text that need to be wrapped.
 * @return {string} The wrapped string after process.
 */
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};


/**
 * Regular expression to find dimensions such as "padding: .3 0.4ex 5px 6;"
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.dimensionsRe_ =
    /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;


/**
 * Regular expression for left.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.leftRe_ = /left/gi;


/**
 * Regular expression for right.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.rightRe_ = /right/gi;


/**
 * Placeholder regular expression for swapping.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.tempRe_ = /%%%%/g;


/**
 * Swap location parameters and 'left'/'right' in CSS specification. The
 * processed string will be suited for RTL layout. Though this function can
 * cover most cases, there are always exceptions. It is suggested to put
 * those exceptions in separate group of CSS string.
 * @param {string} cssStr CSS spefication string.
 * @return {string} Processed CSS specification string.
 */
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.
      // reverse dimensions
      replace(goog.i18n.bidi.dimensionsRe_, ':$1 $4 $3 $2').
      replace(goog.i18n.bidi.leftRe_, '%%%%').          // swap left and right
      replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).
      replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};


/**
 * Regular expression for hebrew double quote substitution, finding quote
 * directly after hebrew characters.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;


/**
 * Regular expression for hebrew single quote substitution, finding quote
 * directly after hebrew characters.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;


/**
 * Replace the double and single quote directly after a Hebrew character with
 * GERESH and GERSHAYIM. In such case, most likely that's user intention.
 * @param {string} str String that need to be processed.
 * @return {string} Processed string with double/single quote replaced.
 */
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.
      replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, '$1\u05f4').
      replace(goog.i18n.bidi.singleQuoteSubstituteRe_, '$1\u05f3');
};


/**
 * Regular expression to split a string into "words" for directionality
 * estimation based on relative word counts.
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;


/**
 * Regular expression to check if a string contains any numerals. Used to
 * differentiate between completely neutral strings and those containing
 * numbers, which are weakly LTR.
 *
 * Native Arabic digits (\u0660 - \u0669) are not included because although they
 * do flow left-to-right inside a number, this is the case even if the  overall
 * directionality is RTL, and a mathematical expression using these digits is
 * supposed to flow right-to-left overall, including unary plus and minus
 * appearing to the right of a number, and this does depend on the overall
 * directionality being RTL. The digits used in Farsi (\u06F0 - \u06F9), on the
 * other hand, are included, since Farsi math (including unary plus and minus)
 * does flow left-to-right.
 *
 * @type {RegExp}
 * @private
 */
goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;


/**
 * This constant controls threshold of RTL directionality.
 * @type {number}
 * @private
 */
goog.i18n.bidi.rtlDetectionThreshold_ = 0.40;


/**
 * Estimates the directionality of a string based on relative word counts.
 * If the number of RTL words is above a certain percentage of the total number
 * of strongly directional words, returns RTL.
 * Otherwise, if any words are strongly or weakly LTR, returns LTR.
 * Otherwise, returns UNKNOWN, which is used to mean "neutral".
 * Numbers are counted as weakly LTR.
 * @param {string} str The string to be checked.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {goog.i18n.bidi.Dir} Estimated overall directionality of {@code str}.
 */
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).
      split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
      hasWeaklyLtr = true;
    } else if (goog.i18n.bidi.hasAnyLtr(token)) {
      totalCount++;
    } else if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
      hasWeaklyLtr = true;
    }
  }

  return totalCount == 0 ?
      (hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL) :
      (rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ?
          goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR);
};


/**
 * Check the directionality of a piece of text, return true if the piece of
 * text should be laid out in RTL direction.
 * @param {string} str The piece of text that need to be detected.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether this piece of text should be laid out in RTL.
 */
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) ==
      goog.i18n.bidi.Dir.RTL;
};


/**
 * Sets text input element's directionality and text alignment based on a
 * given directionality. Does nothing if the given directionality is unknown or
 * neutral.
 * @param {Element} element Input field element to set directionality to.
 * @param {goog.i18n.bidi.Dir|number|boolean|null} dir Desired directionality,
 *     given in one of the following formats:
 *     1. A goog.i18n.bidi.Dir constant.
 *     2. A number (positive = LRT, negative = RTL, 0 = neutral).
 *     3. A boolean (true = RTL, false = LTR).
 *     4. A null for unknown directionality.
 */
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign =
          dir == goog.i18n.bidi.Dir.RTL ?
          goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? 'rtl' : 'ltr';
    }
  }
};


/**
 * Sets element dir based on estimated directionality of the given text.
 * @param {!Element} element
 * @param {string} text
 */
goog.i18n.bidi.setElementDirByTextDirectionality = function(element, text) {
  switch (goog.i18n.bidi.estimateDirection(text)) {
    case (goog.i18n.bidi.Dir.LTR):
      element.dir = 'ltr';
      break;
    case (goog.i18n.bidi.Dir.RTL):
      element.dir = 'rtl';
      break;
    default:
      // Default for no direction, inherit from document.
      element.removeAttribute('dir');
  }
};



/**
 * Strings that have an (optional) known direction.
 *
 * Implementations of this interface are string-like objects that carry an
 * attached direction, if known.
 * @interface
 */
goog.i18n.bidi.DirectionalString = function() {};


/**
 * Interface marker of the DirectionalString interface.
 *
 * This property can be used to determine at runtime whether or not an object
 * implements this interface.  All implementations of this interface set this
 * property to {@code true}.
 * @type {boolean}
 */
goog.i18n.bidi.DirectionalString.prototype.
    implementsGoogI18nBidiDirectionalString;


/**
 * Retrieves this object's known direction (if any).
 * @return {?goog.i18n.bidi.Dir} The known direction. Null if unknown.
 */
goog.i18n.bidi.DirectionalString.prototype.getDirection;

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview The SafeUrl type and its builders.
 *
 * TODO(xtof): Link to document stating type contract.
 */

goog.provide('goog.html.SafeUrl');

goog.require('goog.asserts');
goog.require('goog.fs.url');
goog.require('goog.i18n.bidi.Dir');
goog.require('goog.i18n.bidi.DirectionalString');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');



/**
 * A string that is safe to use in URL context in DOM APIs and HTML documents.
 *
 * A SafeUrl is a string-like object that carries the security type contract
 * that its value as a string will not cause untrusted script execution
 * when evaluated as a hyperlink URL in a browser.
 *
 * Values of this type are guaranteed to be safe to use in URL/hyperlink
 * contexts, such as, assignment to URL-valued DOM properties, or
 * interpolation into a HTML template in URL context (e.g., inside a href
 * attribute), in the sense that the use will not result in a
 * Cross-Site-Scripting vulnerability.
 *
 * Note that, as documented in {@code goog.html.SafeUrl.unwrap}, this type's
 * contract does not guarantee that instances are safe to interpolate into HTML
 * without appropriate escaping.
 *
 * Note also that this type's contract does not imply any guarantees regarding
 * the resource the URL refers to.  In particular, SafeUrls are <b>not</b>
 * safe to use in a context where the referred-to resource is interpreted as
 * trusted code, e.g., as the src of a script tag.
 *
 * Instances of this type must be created via the factory methods
 * ({@code goog.html.SafeUrl.fromConstant}, {@code goog.html.SafeUrl.sanitize}),
 * etc and not by invoking its constructor.  The constructor intentionally
 * takes no parameters and the type is immutable; hence only a default instance
 * corresponding to the empty string can be obtained via constructor invocation.
 *
 * @see goog.html.SafeUrl#fromConstant
 * @see goog.html.SafeUrl#from
 * @see goog.html.SafeUrl#sanitize
 * @constructor
 * @final
 * @struct
 * @implements {goog.i18n.bidi.DirectionalString}
 * @implements {goog.string.TypedString}
 */
goog.html.SafeUrl = function() {
  /**
   * The contained value of this SafeUrl.  The field has a purposely ugly
   * name to make (non-compiled) code that attempts to directly access this
   * field stand out.
   * @private {string}
   */
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = '';

  /**
   * A type marker used to implement additional run-time type checking.
   * @see goog.html.SafeUrl#unwrap
   * @const
   * @private
   */
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =
      goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};


/**
 * The innocuous string generated by goog.html.SafeUrl.sanitize when passed
 * an unsafe URL.
 *
 * about:invalid is registered in
 * http://www.w3.org/TR/css3-values/#about-invalid.
 * http://tools.ietf.org/html/rfc6694#section-2.2.1 permits about URLs to
 * contain a fragment, which is not to be considered when determining if an
 * about URL is well-known.
 *
 * Using about:invalid seems preferable to using a fixed data URL, since
 * browsers might choose to not report CSP violations on it, as legitimate
 * CSS function calls to attr() can result in this URL being produced. It is
 * also a standard URL which matches exactly the semantics we need:
 * "The about:invalid URI references a non-existent document with a generic
 * error condition. It can be used when a URI is necessary, but the default
 * value shouldn't be resolveable as any type of document".
 *
 * @const {string}
 */
goog.html.SafeUrl.INNOCUOUS_STRING = 'about:invalid#zClosurez';


/**
 * @override
 * @const
 */
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;


/**
 * Returns this SafeUrl's value a string.
 *
 * IMPORTANT: In code where it is security relevant that an object's type is
 * indeed {@code SafeUrl}, use {@code goog.html.SafeUrl.unwrap} instead of this
 * method. If in doubt, assume that it's security relevant. In particular, note
 * that goog.html functions which return a goog.html type do not guarantee that
 * the returned instance is of the right type. For example:
 *
 * <pre>
 * var fakeSafeHtml = new String('fake');
 * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
 * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
 * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
 * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof
 * // goog.html.SafeHtml.
 * </pre>
 *
 * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the
 * behavior of browsers when interpreting URLs. Values of SafeUrl objects MUST
 * be appropriately escaped before embedding in a HTML document. Note that the
 * required escaping is context-sensitive (e.g. a different escaping is
 * required for embedding a URL in a style property within a style
 * attribute, as opposed to embedding in a href attribute).
 *
 * @see goog.html.SafeUrl#unwrap
 * @override
 */
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};


/**
 * @override
 * @const
 */
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;


/**
 * Returns this URLs directionality, which is always {@code LTR}.
 * @override
 */
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};


if (goog.DEBUG) {
  /**
   * Returns a debug string-representation of this value.
   *
   * To obtain the actual string value wrapped in a SafeUrl, use
   * {@code goog.html.SafeUrl.unwrap}.
   *
   * @see goog.html.SafeUrl#unwrap
   * @override
   */
  goog.html.SafeUrl.prototype.toString = function() {
    return 'SafeUrl{' + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ +
        '}';
  };
}


/**
 * Performs a runtime check that the provided object is indeed a SafeUrl
 * object, and returns its value.
 *
 * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the
 * behavior of  browsers when interpreting URLs. Values of SafeUrl objects MUST
 * be appropriately escaped before embedding in a HTML document. Note that the
 * required escaping is context-sensitive (e.g. a different escaping is
 * required for embedding a URL in a style property within a style
 * attribute, as opposed to embedding in a href attribute).
 *
 * @param {!goog.html.SafeUrl} safeUrl The object to extract from.
 * @return {string} The SafeUrl object's contained string, unless the run-time
 *     type check fails. In that case, {@code unwrap} returns an innocuous
 *     string, or, if assertions are enabled, throws
 *     {@code goog.asserts.AssertionError}.
 */
goog.html.SafeUrl.unwrap = function(safeUrl) {
  // Perform additional Run-time type-checking to ensure that safeUrl is indeed
  // an instance of the expected type.  This provides some additional protection
  // against security bugs due to application code that disables type checks.
  // Specifically, the following checks are performed:
  // 1. The object is an instance of the expected type.
  // 2. The object is not an instance of a subclass.
  // 3. The object carries a type marker for the expected type. "Faking" an
  // object requires a reference to the type marker, which has names intended
  // to stand out in code reviews.
  if (safeUrl instanceof goog.html.SafeUrl &&
      safeUrl.constructor === goog.html.SafeUrl &&
      safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===
          goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail('expected object of type SafeUrl, got \'' +
                      safeUrl + '\'');
    return 'type_error:SafeUrl';

  }
};


/**
 * Creates a SafeUrl object from a compile-time constant string.
 *
 * Compile-time constant strings are inherently program-controlled and hence
 * trusted.
 *
 * @param {!goog.string.Const} url A compile-time-constant string from which to
 *         create a SafeUrl.
 * @return {!goog.html.SafeUrl} A SafeUrl object initialized to {@code url}.
 */
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
      goog.string.Const.unwrap(url));
};


/**
 * A pattern that matches Blob or data types that can have SafeUrls created
 * from URL.createObjectURL(blob) or via a data: URI.  Only matches image and
 * video types, currently.
 * @const
 * @private
 */
goog.html.SAFE_MIME_TYPE_PATTERN_ =
    /^(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm))$/i;


/**
 * Creates a SafeUrl wrapping a blob URL for the given {@code blob}.
 *
 * The blob URL is created with {@code URL.createObjectURL}. If the MIME type
 * for {@code blob} is not of a known safe image or video MIME type, then the
 * SafeUrl will wrap {@link #INNOCUOUS_STRING}.
 *
 * @see http://www.w3.org/TR/FileAPI/#url
 * @param {!Blob} blob
 * @return {!goog.html.SafeUrl} The blob URL, or an innocuous string wrapped
 *   as a SafeUrl.
 */
goog.html.SafeUrl.fromBlob = function(blob) {
  var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ?
      goog.fs.url.createObjectUrl(blob) : goog.html.SafeUrl.INNOCUOUS_STRING;
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};


/**
 * Matches a base-64 data URL, with the first match group being the MIME type.
 * @const
 * @private
 */
goog.html.DATA_URL_PATTERN_ = /^data:([^;,]*);base64,[a-z0-9+\/]+=*$/i;


/**
 * Creates a SafeUrl wrapping a data: URL, after validating it matches a
 * known-safe image or video MIME type.
 *
 * @param {string} dataUrl A valid base64 data URL with one of the whitelisted
 *     image or video MIME types.
 * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
 *     wrapped as a SafeUrl if it does not pass.
 */
goog.html.SafeUrl.fromDataUrl = function(dataUrl) {
  // There's a slight risk here that a browser sniffs the content type if it
  // doesn't know the MIME type and executes HTML within the data: URL. For this
  // to cause XSS it would also have to execute the HTML in the same origin
  // of the page with the link. It seems unlikely that both of these will
  // happen, particularly in not really old IEs.
  var match = dataUrl.match(goog.html.DATA_URL_PATTERN_);
  var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
      valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);
};


/**
 * A pattern that recognizes a commonly useful subset of URLs that satisfy
 * the SafeUrl contract.
 *
 * This regular expression matches a subset of URLs that will not cause script
 * execution if used in URL context within a HTML document. Specifically, this
 * regular expression matches if (comment from here on and regex copied from
 * Soy's EscapingConventions):
 * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
 * (2) or no protocol.  A protocol must be followed by a colon. The below
 *     allows that by allowing colons only after one of the characters [/?#].
 *     A colon after a hash (#) must be in the fragment.
 *     Otherwise, a colon after a (?) must be in a query.
 *     Otherwise, a colon after a single solidus (/) must be in a path.
 *     Otherwise, a colon after a double solidus (//) must be in the authority
 *     (before port).
 *
 * The pattern disallows &, used in HTML entity declarations before
 * one of the characters in [/?#]. This disallows HTML entities used in the
 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
 * It also disallows HTML entities in the first path part of a relative path,
 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
 * that. More importantly, it disallows masking of a colon,
 * e.g. "javascript&#58;...".
 *
 * @private
 * @const {!RegExp}
 */
goog.html.SAFE_URL_PATTERN_ =
    /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i;


/**
 * Creates a SafeUrl object from {@code url}. If {@code url} is a
 * goog.html.SafeUrl then it is simply returned. Otherwise the input string is
 * validated to match a pattern of commonly used safe URLs. The string is
 * converted to UTF-8 and non-whitelisted characters are percent-encoded. The
 * string wrapped by the created SafeUrl will thus contain only ASCII printable
 * characters.
 *
 * {@code url} may be a URL with the http, https, mailto or ftp scheme,
 * or a relative URL (i.e., a URL without a scheme; specifically, a
 * scheme-relative, absolute-path-relative, or path-relative URL).
 *
 * {@code url} is converted to UTF-8 and non-whitelisted characters are
 * percent-encoded. Whitelisted characters are '%' and, from RFC 3986,
 * unreserved characters and reserved characters, with the exception of '\'',
 * '(' and ')'. This ensures the the SafeUrl contains only ASCII-printable
 * characters and reduces the chance of security bugs were it to be
 * interpolated into a specific context without the necessary escaping.
 *
 * If {@code url} fails validation or does not UTF-16 decode correctly
 * (JavaScript strings are UTF-16 encoded), this function returns a SafeUrl
 * object containing an innocuous string, goog.html.SafeUrl.INNOCUOUS_STRING.
 *
 * @see http://url.spec.whatwg.org/#concept-relative-url
 * @param {string|!goog.string.TypedString} url The URL to validate.
 * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.
 */
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  }
  else if (url.implementsGoogStringTypedString) {
    url = url.getTypedStringValue();
  } else {
    url = String(url);
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};


/**
 * Type marker for the SafeUrl type, used to implement additional run-time
 * type checking.
 * @const {!Object}
 * @private
 */
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};


/**
 * Package-internal utility method to create SafeUrl instances.
 *
 * @param {string} url The string to initialize the SafeUrl object with.
 * @return {!goog.html.SafeUrl} The initialized SafeUrl object.
 * @package
 */
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(
    url) {
  var safeUrl = new goog.html.SafeUrl();
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview The TrustedResourceUrl type and its builders.
 *
 * TODO(xtof): Link to document stating type contract.
 */

goog.provide('goog.html.TrustedResourceUrl');

goog.require('goog.asserts');
goog.require('goog.i18n.bidi.Dir');
goog.require('goog.i18n.bidi.DirectionalString');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');



/**
 * A URL which is under application control and from which script, CSS, and
 * other resources that represent executable code, can be fetched.
 *
 * Given that the URL can only be constructed from strings under application
 * control and is used to load resources, bugs resulting in a malformed URL
 * should not have a security impact and are likely to be easily detectable
 * during testing. Given the wide number of non-RFC compliant URLs in use,
 * stricter validation could prevent some applications from being able to use
 * this type.
 *
 * Instances of this type must be created via the factory method,
 * ({@code goog.html.TrustedResourceUrl.fromConstant}), and not by invoking its
 * constructor. The constructor intentionally takes no parameters and the type
 * is immutable; hence only a default instance corresponding to the empty
 * string can be obtained via constructor invocation.
 *
 * @see goog.html.TrustedResourceUrl#fromConstant
 * @constructor
 * @final
 * @struct
 * @implements {goog.i18n.bidi.DirectionalString}
 * @implements {goog.string.TypedString}
 */
goog.html.TrustedResourceUrl = function() {
  /**
   * The contained value of this TrustedResourceUrl.  The field has a purposely
   * ugly name to make (non-compiled) code that attempts to directly access this
   * field stand out.
   * @private {string}
   */
  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = '';

  /**
   * A type marker used to implement additional run-time type checking.
   * @see goog.html.TrustedResourceUrl#unwrap
   * @const
   * @private
   */
  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =
      goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};


/**
 * @override
 * @const
 */
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;


/**
 * Returns this TrustedResourceUrl's value as a string.
 *
 * IMPORTANT: In code where it is security relevant that an object's type is
 * indeed {@code TrustedResourceUrl}, use
 * {@code goog.html.TrustedResourceUrl.unwrap} instead of this method. If in
 * doubt, assume that it's security relevant. In particular, note that
 * goog.html functions which return a goog.html type do not guarantee that
 * the returned instance is of the right type. For example:
 *
 * <pre>
 * var fakeSafeHtml = new String('fake');
 * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
 * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
 * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
 * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof
 * // goog.html.SafeHtml.
 * </pre>
 *
 * @see goog.html.TrustedResourceUrl#unwrap
 * @override
 */
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
};


/**
 * @override
 * @const
 */
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString =
    true;


/**
 * Returns this URLs directionality, which is always {@code LTR}.
 * @override
 */
goog.html.TrustedResourceUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};


if (goog.DEBUG) {
  /**
   * Returns a debug string-representation of this value.
   *
   * To obtain the actual string value wrapped in a TrustedResourceUrl, use
   * {@code goog.html.TrustedResourceUrl.unwrap}.
   *
   * @see goog.html.TrustedResourceUrl#unwrap
   * @override
   */
  goog.html.TrustedResourceUrl.prototype.toString = function() {
    return 'TrustedResourceUrl{' +
        this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + '}';
  };
}


/**
 * Performs a runtime check that the provided object is indeed a
 * TrustedResourceUrl object, and returns its value.
 *
 * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl The object to
 *     extract from.
 * @return {string} The trustedResourceUrl object's contained string, unless
 *     the run-time type check fails. In that case, {@code unwrap} returns an
 *     innocuous string, or, if assertions are enabled, throws
 *     {@code goog.asserts.AssertionError}.
 */
goog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {
  // Perform additional Run-time type-checking to ensure that
  // trustedResourceUrl is indeed an instance of the expected type.  This
  // provides some additional protection against security bugs due to
  // application code that disables type checks.
  // Specifically, the following checks are performed:
  // 1. The object is an instance of the expected type.
  // 2. The object is not an instance of a subclass.
  // 3. The object carries a type marker for the expected type. "Faking" an
  // object requires a reference to the type marker, which has names intended
  // to stand out in code reviews.
  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl &&
      trustedResourceUrl.constructor === goog.html.TrustedResourceUrl &&
      trustedResourceUrl
          .TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===
              goog.html.TrustedResourceUrl
                  .TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return trustedResourceUrl
        .privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
  } else {
    goog.asserts.fail('expected object of type TrustedResourceUrl, got \'' +
                      trustedResourceUrl + '\'');
    return 'type_error:TrustedResourceUrl';

  }
};


/**
 * Creates a TrustedResourceUrl object from a compile-time constant string.
 *
 * Compile-time constant strings are inherently program-controlled and hence
 * trusted.
 *
 * @param {!goog.string.Const} url A compile-time-constant string from which to
 *     create a TrustedResourceUrl.
 * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object
 *     initialized to {@code url}.
 */
goog.html.TrustedResourceUrl.fromConstant = function(url) {
  return goog.html.TrustedResourceUrl
      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(
          goog.string.Const.unwrap(url));
};


/**
 * Type marker for the TrustedResourceUrl type, used to implement additional
 * run-time type checking.
 * @const {!Object}
 * @private
 */
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};


/**
 * Package-internal utility method to create TrustedResourceUrl instances.
 *
 * @param {string} url The string to initialize the TrustedResourceUrl object
 *     with.
 * @return {!goog.html.TrustedResourceUrl} The initialized TrustedResourceUrl
 *     object.
 * @package
 */
goog.html.TrustedResourceUrl.
    createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var trustedResourceUrl = new goog.html.TrustedResourceUrl();
  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ =
      url;
  return trustedResourceUrl;
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/**
 * @fileoverview The SafeHtml type and its builders.
 *
 * TODO(xtof): Link to document stating type contract.
 */

goog.provide('goog.html.SafeHtml');

goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom.TagName');
goog.require('goog.dom.tags');
goog.require('goog.html.SafeStyle');
goog.require('goog.html.SafeStyleSheet');
goog.require('goog.html.SafeUrl');
goog.require('goog.html.TrustedResourceUrl');
goog.require('goog.i18n.bidi.Dir');
goog.require('goog.i18n.bidi.DirectionalString');
goog.require('goog.object');
goog.require('goog.string');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');



/**
 * A string that is safe to use in HTML context in DOM APIs and HTML documents.
 *
 * A SafeHtml is a string-like object that carries the security type contract
 * that its value as a string will not cause untrusted script execution when
 * evaluated as HTML in a browser.
 *
 * Values of this type are guaranteed to be safe to use in HTML contexts,
 * such as, assignment to the innerHTML DOM property, or interpolation into
 * a HTML template in HTML PC_DATA context, in the sense that the use will not
 * result in a Cross-Site-Scripting vulnerability.
 *
 * Instances of this type must be created via the factory methods
 * ({@code goog.html.SafeHtml.create}, {@code goog.html.SafeHtml.htmlEscape}),
 * etc and not by invoking its constructor.  The constructor intentionally
 * takes no parameters and the type is immutable; hence only a default instance
 * corresponding to the empty string can be obtained via constructor invocation.
 *
 * @see goog.html.SafeHtml#create
 * @see goog.html.SafeHtml#htmlEscape
 * @constructor
 * @final
 * @struct
 * @implements {goog.i18n.bidi.DirectionalString}
 * @implements {goog.string.TypedString}
 */
goog.html.SafeHtml = function() {
  /**
   * The contained value of this SafeHtml.  The field has a purposely ugly
   * name to make (non-compiled) code that attempts to directly access this
   * field stand out.
   * @private {string}
   */
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = '';

  /**
   * A type marker used to implement additional run-time type checking.
   * @see goog.html.SafeHtml#unwrap
   * @const
   * @private
   */
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =
      goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;

  /**
   * This SafeHtml's directionality, or null if unknown.
   * @private {?goog.i18n.bidi.Dir}
   */
  this.dir_ = null;
};


/**
 * @override
 * @const
 */
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;


/** @override */
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};


/**
 * @override
 * @const
 */
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;


/**
 * Returns this SafeHtml's value a string.
 *
 * IMPORTANT: In code where it is security relevant that an object's type is
 * indeed {@code SafeHtml}, use {@code goog.html.SafeHtml.unwrap} instead of
 * this method. If in doubt, assume that it's security relevant. In particular,
 * note that goog.html functions which return a goog.html type do not guarantee
 * that the returned instance is of the right type. For example:
 *
 * <pre>
 * var fakeSafeHtml = new String('fake');
 * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
 * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
 * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
 * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
 * // instanceof goog.html.SafeHtml.
 * </pre>
 *
 * @see goog.html.SafeHtml#unwrap
 * @override
 */
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};


if (goog.DEBUG) {
  /**
   * Returns a debug string-representation of this value.
   *
   * To obtain the actual string value wrapped in a SafeHtml, use
   * {@code goog.html.SafeHtml.unwrap}.
   *
   * @see goog.html.SafeHtml#unwrap
   * @override
   */
  goog.html.SafeHtml.prototype.toString = function() {
    return 'SafeHtml{' + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ +
        '}';
  };
}


/**
 * Performs a runtime check that the provided object is indeed a SafeHtml
 * object, and returns its value.
 * @param {!goog.html.SafeHtml} safeHtml The object to extract from.
 * @return {string} The SafeHtml object's contained string, unless the run-time
 *     type check fails. In that case, {@code unwrap} returns an innocuous
 *     string, or, if assertions are enabled, throws
 *     {@code goog.asserts.AssertionError}.
 */
goog.html.SafeHtml.unwrap = function(safeHtml) {
  // Perform additional run-time type-checking to ensure that safeHtml is indeed
  // an instance of the expected type.  This provides some additional protection
  // against security bugs due to application code that disables type checks.
  // Specifically, the following checks are performed:
  // 1. The object is an instance of the expected type.
  // 2. The object is not an instance of a subclass.
  // 3. The object carries a type marker for the expected type. "Faking" an
  // object requires a reference to the type marker, which has names intended
  // to stand out in code reviews.
  if (safeHtml instanceof goog.html.SafeHtml &&
      safeHtml.constructor === goog.html.SafeHtml &&
      safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===
          goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail('expected object of type SafeHtml, got \'' +
                      safeHtml + '\'');
    return 'type_error:SafeHtml';
  }
};


/**
 * Shorthand for union of types that can sensibly be converted to strings
 * or might already be SafeHtml (as SafeHtml is a goog.string.TypedString).
 * @private
 * @typedef {string|number|boolean|!goog.string.TypedString|
 *           !goog.i18n.bidi.DirectionalString}
 */
goog.html.SafeHtml.TextOrHtml_;


/**
 * Returns HTML-escaped text as a SafeHtml object.
 *
 * If text is of a type that implements
 * {@code goog.i18n.bidi.DirectionalString}, the directionality of the new
 * {@code SafeHtml} object is set to {@code text}'s directionality, if known.
 * Otherwise, the directionality of the resulting SafeHtml is unknown (i.e.,
 * {@code null}).
 *
 * @param {!goog.html.SafeHtml.TextOrHtml_} textOrHtml The text to escape. If
 *     the parameter is of type SafeHtml it is returned directly (no escaping
 *     is done).
 * @return {!goog.html.SafeHtml} The escaped text, wrapped as a SafeHtml.
 */
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
      goog.string.htmlEscape(textAsString), dir);
};


/**
 * Returns HTML-escaped text as a SafeHtml object, with newlines changed to
 * &lt;br&gt;.
 * @param {!goog.html.SafeHtml.TextOrHtml_} textOrHtml The text to escape. If
 *     the parameter is of type SafeHtml it is returned directly (no escaping
 *     is done).
 * @return {!goog.html.SafeHtml} The escaped text, wrapped as a SafeHtml.
 */
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
      goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)),
      html.getDirection());
};


/**
 * Returns HTML-escaped text as a SafeHtml object, with newlines changed to
 * &lt;br&gt; and escaping whitespace to preserve spatial formatting. Character
 * entity #160 is used to make it safer for XML.
 * @param {!goog.html.SafeHtml.TextOrHtml_} textOrHtml The text to escape. If
 *     the parameter is of type SafeHtml it is returned directly (no escaping
 *     is done).
 * @return {!goog.html.SafeHtml} The escaped text, wrapped as a SafeHtml.
 */
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(
    textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
      goog.string.whitespaceEscape(goog.html.SafeHtml.unwrap(html)),
      html.getDirection());
};


/**
 * Coerces an arbitrary object into a SafeHtml object.
 *
 * If {@code textOrHtml} is already of type {@code goog.html.SafeHtml}, the same
 * object is returned. Otherwise, {@code textOrHtml} is coerced to string, and
 * HTML-escaped. If {@code textOrHtml} is of a type that implements
 * {@code goog.i18n.bidi.DirectionalString}, its directionality, if known, is
 * preserved.
 *
 * @param {!goog.html.SafeHtml.TextOrHtml_} textOrHtml The text or SafeHtml to
 *     coerce.
 * @return {!goog.html.SafeHtml} The resulting SafeHtml object.
 * @deprecated Use goog.html.SafeHtml.htmlEscape.
 */
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;


/**
 * @const
 * @private
 */
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;


/**
 * Set of attributes containing URL as defined at
 * http://www.w3.org/TR/html5/index.html#attributes-1.
 * @private @const {!Object<string,boolean>}
 */
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet('action', 'cite',
    'data', 'formaction', 'href', 'manifest', 'poster', 'src');


/**
 * Tags which are unsupported via create(). They might be supported via a
 * tag-specific create method. These are tags which might require a
 * TrustedResourceUrl in one of their attributes or a restricted type for
 * their content.
 * @private @const {!Object<string,boolean>}
 */
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet(
    goog.dom.TagName.EMBED, goog.dom.TagName.IFRAME, goog.dom.TagName.LINK,
    goog.dom.TagName.OBJECT, goog.dom.TagName.SCRIPT, goog.dom.TagName.STYLE,
    goog.dom.TagName.TEMPLATE);


/**
 * @typedef {string|number|goog.string.TypedString|
 *     goog.html.SafeStyle.PropertyMap}
 * @private
 */
goog.html.SafeHtml.AttributeValue_;


/**
 * Creates a SafeHtml content consisting of a tag with optional attributes and
 * optional content.
 *
 * For convenience tag names and attribute names are accepted as regular
 * strings, instead of goog.string.Const. Nevertheless, you should not pass
 * user-controlled values to these parameters. Note that these parameters are
 * syntactically validated at runtime, and invalid values will result in
 * an exception.
 *
 * Example usage:
 *
 * goog.html.SafeHtml.create('br');
 * goog.html.SafeHtml.create('div', {'class': 'a'});
 * goog.html.SafeHtml.create('p', {}, 'a');
 * goog.html.SafeHtml.create('p', {}, goog.html.SafeHtml.create('br'));
 *
 * goog.html.SafeHtml.create('span', {
 *   'style': {'margin': '0'}
 * });
 *
 * To guarantee SafeHtml's type contract is upheld there are restrictions on
 * attribute values and tag names.
 *
 * - For attributes which contain script code (on*), a goog.string.Const is
 *   required.
 * - For attributes which contain style (style), a goog.html.SafeStyle or a
 *   goog.html.SafeStyle.PropertyMap is required.
 * - For attributes which are interpreted as URLs (e.g. src, href) a
 *   goog.html.SafeUrl, goog.string.Const or string is required. If a string
 *   is passed, it will be sanitized with SafeUrl.sanitize().
 * - For tags which can load code, more specific goog.html.SafeHtml.create*()
 *   functions must be used. Tags which can load code and are not supported by
 *   this function are embed, iframe, link, object, script, style, and template.
 *
 * @param {string} tagName The name of the tag. Only tag names consisting of
 *     [a-zA-Z0-9-] are allowed. Tag names documented above are disallowed.
 * @param {!Object<string, goog.html.SafeHtml.AttributeValue_>=}
 *     opt_attributes Mapping from attribute names to their values. Only
 *     attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or
 *     undefined causes the attribute to be omitted.
 * @param {!goog.html.SafeHtml.TextOrHtml_|
 *     !Array<!goog.html.SafeHtml.TextOrHtml_>=} opt_content Content to
 *     HTML-escape and put inside the tag. This must be empty for void tags
 *     like <br>. Array elements are concatenated.
 * @return {!goog.html.SafeHtml} The SafeHtml content with the tag.
 * @throws {Error} If invalid tag name, attribute name, or attribute value is
 *     provided.
 * @throws {goog.asserts.AssertionError} If content for void tag is provided.
 */
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error('Invalid tag name <' + tagName + '>.');
  }
  if (tagName.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error('Tag name <' + tagName + '> is not allowed for SafeHtml.');
  }
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(
      tagName, opt_attributes, opt_content);
};


/**
 * Creates a SafeHtml representing an iframe tag.
 *
 * By default the sandbox attribute is set to an empty value, which is the most
 * secure option, as it confers the iframe the least privileges. If this
 * is too restrictive then granting individual privileges is the preferable
 * option. Unsetting the attribute entirely is the least secure option and
 * should never be done unless it's stricly necessary.
 *
 * @param {goog.html.TrustedResourceUrl=} opt_src The value of the src
 *     attribute. If null or undefined src will not be set.
 * @param {goog.html.SafeHtml=} opt_srcdoc The value of the srcdoc attribute.
 *     If null or undefined srcdoc will not be set.
 * @param {!Object<string, goog.html.SafeHtml.AttributeValue_>=}
 *     opt_attributes Mapping from attribute names to their values. Only
 *     attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or
 *     undefined causes the attribute to be omitted.
 * @param {!goog.html.SafeHtml.TextOrHtml_|
 *     !Array<!goog.html.SafeHtml.TextOrHtml_>=} opt_content Content to
 *     HTML-escape and put inside the tag. Array elements are concatenated.
 * @return {!goog.html.SafeHtml} The SafeHtml content with the tag.
 * @throws {Error} If invalid tag name, attribute name, or attribute value is
 *     provided. If opt_attributes contains the src or srcdoc attributes.
 */
goog.html.SafeHtml.createIframe = function(
    opt_src, opt_srcdoc, opt_attributes, opt_content) {
  var fixedAttributes = {};
  fixedAttributes['src'] = opt_src || null;
  fixedAttributes['srcdoc'] = opt_srcdoc || null;
  var defaultAttributes = {'sandbox': ''};
  var attributes = goog.html.SafeHtml.combineAttributes(
      fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(
      'iframe', attributes, opt_content);
};


/**
 * Creates a SafeHtml representing a style tag. The type attribute is set
 * to "text/css".
 * @param {!goog.html.SafeStyleSheet|!Array<!goog.html.SafeStyleSheet>}
 *     styleSheet Content to put inside the tag. Array elements are
 *     concatenated.
 * @param {!Object<string, goog.html.SafeHtml.AttributeValue_>=}
 *     opt_attributes Mapping from attribute names to their values. Only
 *     attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or
 *     undefined causes the attribute to be omitted.
 * @return {!goog.html.SafeHtml} The SafeHtml content with the tag.
 * @throws {Error} If invalid attribute name or attribute value is provided. If
 *     opt_attributes contains the type attribute.
 */
goog.html.SafeHtml.createStyle = function(styleSheet, opt_attributes) {
  var fixedAttributes = {'type': 'text/css'};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(
      fixedAttributes, defaultAttributes, opt_attributes);

  var content = '';
  styleSheet = goog.array.concat(styleSheet);
  for (var i = 0; i < styleSheet.length; i++) {
    content += goog.html.SafeStyleSheet.unwrap(styleSheet[i]);
  }
  // Convert to SafeHtml so that it's not HTML-escaped.
  var htmlContent = goog.html.SafeHtml
      .createSafeHtmlSecurityPrivateDoNotAccessOrElse(
          content, goog.i18n.bidi.Dir.NEUTRAL);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(
      'style', attributes, htmlContent);
};


/**
 * @param {string} tagName The tag name.
 * @param {string} name The attribute name.
 * @param {!goog.html.SafeHtml.AttributeValue_} value The attribute value.
 * @return {string} A "name=value" string.
 * @throws {Error} If attribute value is unsafe for the given tag and attribute.
 * @private
 */
goog.html.SafeHtml.getAttrNameAndValue_ = function(tagName, name, value) {
  // If it's goog.string.Const, allow any valid attribute name.
  if (value instanceof goog.string.Const) {
    value = goog.string.Const.unwrap(value);
  } else if (name.toLowerCase() == 'style') {
    value = goog.html.SafeHtml.getStyleValue_(value);
  } else if (/^on/i.test(name)) {
    // TODO(jakubvrana): Disallow more attributes with a special meaning.
    throw Error('Attribute "' + name +
        '" requires goog.string.Const value, "' + value + '" given.');
  // URL attributes handled differently accroding to tag.
  } else if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
    if (value instanceof goog.html.TrustedResourceUrl) {
      value = goog.html.TrustedResourceUrl.unwrap(value);
    } else if (value instanceof goog.html.SafeUrl) {
      value = goog.html.SafeUrl.unwrap(value);
    } else if (goog.isString(value)) {
      value = goog.html.SafeUrl.sanitize(value).getTypedStringValue();
    } else {
      throw Error('Attribute "' + name + '" on tag "' + tagName +
          '" requires goog.html.SafeUrl, goog.string.Const, or string,' +
          ' value "' + value + '" given.');
    }
  }

  // Accept SafeUrl, TrustedResourceUrl, etc. for attributes which only require
  // HTML-escaping.
  if (value.implementsGoogStringTypedString) {
    // Ok to call getTypedStringValue() since there's no reliance on the type
    // contract for security here.
    value = value.getTypedStringValue();
  }

  goog.asserts.assert(goog.isString(value) || goog.isNumber(value),
      'String or number value expected, got ' +
      (typeof value) + ' with value: ' + value);
  return name + '="' + goog.string.htmlEscape(String(value)) + '"';
};


/**
 * Gets value allowed in "style" attribute.
 * @param {goog.html.SafeHtml.AttributeValue_} value It could be SafeStyle or a
 *     map which will be passed to goog.html.SafeStyle.create.
 * @return {string} Unwrapped value.
 * @throws {Error} If string value is given.
 * @private
 */
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' +
        'of style properties, ' + (typeof value) + ' given: ' + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    // Process the property bag into a style object.
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};


/**
 * Creates a SafeHtml content with known directionality consisting of a tag with
 * optional attributes and optional content.
 * @param {!goog.i18n.bidi.Dir} dir Directionality.
 * @param {string} tagName
 * @param {!Object<string, goog.html.SafeHtml.AttributeValue_>=} opt_attributes
 * @param {!goog.html.SafeHtml.TextOrHtml_|
 *     !Array<!goog.html.SafeHtml.TextOrHtml_>=} opt_content
 * @return {!goog.html.SafeHtml} The SafeHtml content with the tag.
 */
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes,
    opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};


/**
 * Creates a new SafeHtml object by concatenating values.
 * @param {...(!goog.html.SafeHtml.TextOrHtml_|
 *     !Array<!goog.html.SafeHtml.TextOrHtml_>)} var_args Values to concatenate.
 * @return {!goog.html.SafeHtml}
 */
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = '';

  /**
   * @param {!goog.html.SafeHtml.TextOrHtml_|
   *     !Array<!goog.html.SafeHtml.TextOrHtml_>} argument
   */
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
        dir = null;
      }
    }
  };

  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
      content, dir);
};


/**
 * Creates a new SafeHtml object with known directionality by concatenating the
 * values.
 * @param {!goog.i18n.bidi.Dir} dir Directionality.
 * @param {...(!goog.html.SafeHtml.TextOrHtml_|
 *     !Array<!goog.html.SafeHtml.TextOrHtml_>)} var_args Elements of array
 *     arguments would be processed recursively.
 * @return {!goog.html.SafeHtml}
 */
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};


/**
 * Type marker for the SafeHtml type, used to implement additional run-time
 * type checking.
 * @const {!Object}
 * @private
 */
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};


/**
 * Package-internal utility method to create SafeHtml instances.
 *
 * @param {string} html The string to initialize the SafeHtml object with.
 * @param {?goog.i18n.bidi.Dir} dir The directionality of the SafeHtml to be
 *     constructed, or null if unknown.
 * @return {!goog.html.SafeHtml} The initialized SafeHtml object.
 * @package
 */
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(
    html, dir) {
  return new goog.html.SafeHtml().initSecurityPrivateDoNotAccessOrElse_(
      html, dir);
};


/**
 * Called from createSafeHtmlSecurityPrivateDoNotAccessOrElse(). This
 * method exists only so that the compiler can dead code eliminate static
 * fields (like EMPTY) when they're not accessed.
 * @param {string} html
 * @param {?goog.i18n.bidi.Dir} dir
 * @return {!goog.html.SafeHtml}
 * @private
 */
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(
    html, dir) {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  this.dir_ = dir;
  return this;
};


/**
 * Like create() but does not restrict which tags can be constructed.
 *
 * @param {string} tagName Tag name. Set or validated by caller.
 * @param {!Object<string, goog.html.SafeHtml.AttributeValue_>=} opt_attributes
 * @param {(!goog.html.SafeHtml.TextOrHtml_|
 *     !Array<!goog.html.SafeHtml.TextOrHtml_>)=} opt_content
 * @return {!goog.html.SafeHtml}
 * @throws {Error} If invalid or unsafe attribute name or value is provided.
 * @throws {goog.asserts.AssertionError} If content for void tag is provided.
 * @package
 */
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse =
    function(tagName, opt_attributes, opt_content) {
  var dir = null;
  var result = '<' + tagName;

  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (!goog.isDefAndNotNull(value)) {
        continue;
      }
      result += ' ' +
          goog.html.SafeHtml.getAttrNameAndValue_(tagName, name, value);
    }
  }

  var content = opt_content;
  if (!goog.isDefAndNotNull(content)) {
    content = [];
  } else if (!goog.isArray(content)) {
    content = [content];
  }

  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length,
        'Void tag <' + tagName + '> does not allow content.');
    result += '>';
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += '>' + goog.html.SafeHtml.unwrap(html) + '</' + tagName + '>';
    dir = html.getDirection();
  }

  var dirAttribute = opt_attributes && opt_attributes['dir'];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      // If the tag has the "dir" attribute specified then its direction is
      // neutral because it can be safely used in any context.
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }

  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
      result, dir);
};


/**
 * @param {!Object<string, string>} fixedAttributes
 * @param {!Object<string, string>} defaultAttributes
 * @param {!Object<string, goog.html.SafeHtml.AttributeValue_>=}
 *     opt_attributes Optional attributes passed to create*().
 * @return {!Object<string, goog.html.SafeHtml.AttributeValue_>}
 * @throws {Error} If opt_attributes contains an attribute with the same name
 *     as an attribute in fixedAttributes.
 * @package
 */
goog.html.SafeHtml.combineAttributes = function(
    fixedAttributes, defaultAttributes, opt_attributes) {
  var combinedAttributes = {};
  var name;

  for (name in fixedAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, 'Must be lower case');
    combinedAttributes[name] = fixedAttributes[name];
  }
  for (name in defaultAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, 'Must be lower case');
    combinedAttributes[name] = defaultAttributes[name];
  }

  for (name in opt_attributes) {
    var nameLower = name.toLowerCase();
    if (nameLower in fixedAttributes) {
      throw Error('Cannot override "' + nameLower + '" attribute, got "' +
          name + '" with value "' + opt_attributes[name] + '"');
    }
    if (nameLower in defaultAttributes) {
      delete combinedAttributes[nameLower];
    }
    combinedAttributes[name] = opt_attributes[name];
  }

  return combinedAttributes;
};


/**
 * A SafeHtml instance corresponding to the HTML doctype: "<!DOCTYPE html>".
 * @const {!goog.html.SafeHtml}
 */
goog.html.SafeHtml.DOCTYPE_HTML =
    goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
        '<!DOCTYPE html>', goog.i18n.bidi.Dir.NEUTRAL);


/**
 * A SafeHtml instance corresponding to the empty string.
 * @const {!goog.html.SafeHtml}
 */
goog.html.SafeHtml.EMPTY =
    goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
        '', goog.i18n.bidi.Dir.NEUTRAL);

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Type-safe wrappers for unsafe DOM APIs.
 *
 * This file provides type-safe wrappers for DOM APIs that can result in
 * cross-site scripting (XSS) vulnerabilities, if the API is supplied with
 * untrusted (attacker-controlled) input.  Instead of plain strings, the type
 * safe wrappers consume values of types from the goog.html package whose
 * contract promises that values are safe to use in the corresponding context.
 *
 * Hence, a program that exclusively uses the wrappers in this file (i.e., whose
 * only reference to security-sensitive raw DOM APIs are in this file) is
 * guaranteed to be free of XSS due to incorrect use of such DOM APIs (modulo
 * correctness of code that produces values of the respective goog.html types,
 * and absent code that violates type safety).
 *
 * For example, assigning to an element's .innerHTML property a string that is
 * derived (even partially) from untrusted input typically results in an XSS
 * vulnerability. The type-safe wrapper goog.html.setInnerHtml consumes a value
 * of type goog.html.SafeHtml, whose contract states that using its values in a
 * HTML context will not result in XSS. Hence a program that is free of direct
 * assignments to any element's innerHTML property (with the exception of the
 * assignment to .innerHTML in this file) is guaranteed to be free of XSS due to
 * assignment of untrusted strings to the innerHTML property.
 */

goog.provide('goog.dom.safe');
goog.provide('goog.dom.safe.InsertAdjacentHtmlPosition');

goog.require('goog.asserts');
goog.require('goog.html.SafeHtml');
goog.require('goog.html.SafeUrl');
goog.require('goog.html.TrustedResourceUrl');
goog.require('goog.string');
goog.require('goog.string.Const');


/** @enum {string} */
goog.dom.safe.InsertAdjacentHtmlPosition = {
  AFTERBEGIN: 'afterbegin',
  AFTEREND: 'afterend',
  BEFOREBEGIN: 'beforebegin',
  BEFOREEND: 'beforeend'
};


/**
 * Inserts known-safe HTML into a Node, at the specified position.
 * @param {!Node} node The node on which to call insertAdjacentHTML.
 * @param {!goog.dom.safe.InsertAdjacentHtmlPosition} position Position where
 *     to insert the HTML.
 * @param {!goog.html.SafeHtml} html The known-safe HTML to insert.
 */
goog.dom.safe.insertAdjacentHtml = function(node, position, html) {
  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));
};


/**
 * Assigns known-safe HTML to an element's innerHTML property.
 * @param {!Element} elem The element whose innerHTML is to be assigned to.
 * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.
 */
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};


/**
 * Assigns known-safe HTML to an element's outerHTML property.
 * @param {!Element} elem The element whose outerHTML is to be assigned to.
 * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.
 */
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};


/**
 * Writes known-safe HTML to a document.
 * @param {!Document} doc The document to be written to.
 * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.
 */
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};


/**
 * Safely assigns a URL to an anchor element's href property.
 *
 * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to
 * anchor's href property.  If url is of type string however, it is first
 * sanitized using goog.html.SafeUrl.sanitize.
 *
 * Example usage:
 *   goog.dom.safe.setAnchorHref(anchorEl, url);
 * which is a safe alternative to
 *   anchorEl.href = url;
 * The latter can result in XSS vulnerabilities if url is a
 * user-/attacker-controlled value.
 *
 * @param {!HTMLAnchorElement} anchor The anchor element whose href property
 *     is to be assigned to.
 * @param {string|!goog.html.SafeUrl} url The URL to assign.
 * @see goog.html.SafeUrl#sanitize
 */
goog.dom.safe.setAnchorHref = function(anchor, url) {
  /** @type {!goog.html.SafeUrl} */
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};


/**
 * Safely assigns a URL to an embed element's src property.
 *
 * Example usage:
 *   goog.dom.safe.setEmbedSrc(embedEl, url);
 * which is a safe alternative to
 *   embedEl.src = url;
 * The latter can result in loading untrusted code unless it is ensured that
 * the URL refers to a trustworthy resource.
 *
 * @param {!HTMLEmbedElement} embed The embed element whose src property
 *     is to be assigned to.
 * @param {!goog.html.TrustedResourceUrl} url The URL to assign.
 */
goog.dom.safe.setEmbedSrc = function(embed, url) {
  embed.src = goog.html.TrustedResourceUrl.unwrap(url);
};


/**
 * Safely assigns a URL to a frame element's src property.
 *
 * Example usage:
 *   goog.dom.safe.setFrameSrc(frameEl, url);
 * which is a safe alternative to
 *   frameEl.src = url;
 * The latter can result in loading untrusted code unless it is ensured that
 * the URL refers to a trustworthy resource.
 *
 * @param {!HTMLFrameElement} frame The frame element whose src property
 *     is to be assigned to.
 * @param {!goog.html.TrustedResourceUrl} url The URL to assign.
 */
goog.dom.safe.setFrameSrc = function(frame, url) {
  frame.src = goog.html.TrustedResourceUrl.unwrap(url);
};


/**
 * Safely assigns a URL to an iframe element's src property.
 *
 * Example usage:
 *   goog.dom.safe.setIframeSrc(iframeEl, url);
 * which is a safe alternative to
 *   iframeEl.src = url;
 * The latter can result in loading untrusted code unless it is ensured that
 * the URL refers to a trustworthy resource.
 *
 * @param {!HTMLIFrameElement} iframe The iframe element whose src property
 *     is to be assigned to.
 * @param {!goog.html.TrustedResourceUrl} url The URL to assign.
 */
goog.dom.safe.setIframeSrc = function(iframe, url) {
  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);
};


/**
 * Safely sets a link element's href and rel properties. Whether or not
 * the URL assigned to href has to be a goog.html.TrustedResourceUrl
 * depends on the value of the rel property. If rel contains "stylesheet"
 * then a TrustedResourceUrl is required.
 *
 * Example usage:
 *   goog.dom.safe.setLinkHrefAndRel(linkEl, url, 'stylesheet');
 * which is a safe alternative to
 *   linkEl.rel = 'stylesheet';
 *   linkEl.href = url;
 * The latter can result in loading untrusted code unless it is ensured that
 * the URL refers to a trustworthy resource.
 *
 * @param {!HTMLLinkElement} link The link element whose href property
 *     is to be assigned to.
 * @param {string|!goog.html.SafeUrl|!goog.html.TrustedResourceUrl} url The URL
 *     to assign to the href property. Must be a TrustedResourceUrl if the
 *     value assigned to rel contains "stylesheet". A string value is
 *     sanitized with goog.html.SafeUrl.sanitize.
 * @param {string} rel The value to assign to the rel property.
 * @throws {Error} if rel contains "stylesheet" and url is not a
 *     TrustedResourceUrl
 * @see goog.html.SafeUrl#sanitize
 */
goog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {
  link.rel = rel;
  if (goog.string.caseInsensitiveContains(rel, 'stylesheet')) {
    goog.asserts.assert(
        url instanceof goog.html.TrustedResourceUrl,
        'URL must be TrustedResourceUrl because "rel" contains "stylesheet"');
    link.href = goog.html.TrustedResourceUrl.unwrap(url);
  } else if (url instanceof goog.html.TrustedResourceUrl) {
    link.href = goog.html.TrustedResourceUrl.unwrap(url);
  } else if (url instanceof goog.html.SafeUrl) {
    link.href = goog.html.SafeUrl.unwrap(url);
  } else {  // string
    // SafeUrl.sanitize must return legitimate SafeUrl when passed a string.
    link.href = goog.html.SafeUrl.sanitize(url).getTypedStringValue();
  }
};


/**
 * Safely assigns a URL to an object element's data property.
 *
 * Example usage:
 *   goog.dom.safe.setObjectData(objectEl, url);
 * which is a safe alternative to
 *   objectEl.data = url;
 * The latter can result in loading untrusted code unless setit is ensured that
 * the URL refers to a trustworthy resource.
 *
 * @param {!HTMLObjectElement} object The object element whose data property
 *     is to be assigned to.
 * @param {!goog.html.TrustedResourceUrl} url The URL to assign.
 */
goog.dom.safe.setObjectData = function(object, url) {
  object.data = goog.html.TrustedResourceUrl.unwrap(url);
};


/**
 * Safely assigns a URL to an iframe element's src property.
 *
 * Example usage:
 *   goog.dom.safe.setScriptSrc(scriptEl, url);
 * which is a safe alternative to
 *   scriptEl.src = url;
 * The latter can result in loading untrusted code unless it is ensured that
 * the URL refers to a trustworthy resource.
 *
 * @param {!HTMLScriptElement} script The script element whose src property
 *     is to be assigned to.
 * @param {!goog.html.TrustedResourceUrl} url The URL to assign.
 */
goog.dom.safe.setScriptSrc = function(script, url) {
  script.src = goog.html.TrustedResourceUrl.unwrap(url);
};


/**
 * Safely assigns a URL to a Location object's href property.
 *
 * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to
 * loc's href property.  If url is of type string however, it is first sanitized
 * using goog.html.SafeUrl.sanitize.
 *
 * Example usage:
 *   goog.dom.safe.setLocationHref(document.location, redirectUrl);
 * which is a safe alternative to
 *   document.location.href = redirectUrl;
 * The latter can result in XSS vulnerabilities if redirectUrl is a
 * user-/attacker-controlled value.
 *
 * @param {!Location} loc The Location object whose href property is to be
 *     assigned to.
 * @param {string|!goog.html.SafeUrl} url The URL to assign.
 * @see goog.html.SafeUrl#sanitize
 */
goog.dom.safe.setLocationHref = function(loc, url) {
  /** @type {!goog.html.SafeUrl} */
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};


/**
 * Safely opens a URL in a new window (via window.open).
 *
 * If url is of type goog.html.SafeUrl, its value is unwrapped and passed in to
 * window.open.  If url is of type string however, it is first sanitized
 * using goog.html.SafeUrl.sanitize.
 *
 * Note that this function does not prevent leakages via the referer that is
 * sent by window.open. It is advised to only use this to open 1st party URLs.
 *
 * Example usage:
 *   goog.dom.safe.openInWindow(url);
 * which is a safe alternative to
 *   window.open(url);
 * The latter can result in XSS vulnerabilities if redirectUrl is a
 * user-/attacker-controlled value.
 *
 * @param {string|!goog.html.SafeUrl} url The URL to open.
 * @param {Window=} opt_openerWin Window of which to call the .open() method.
 *     Defaults to the global window.
 * @param {!goog.string.Const=} opt_name Name of the window to open in. Can be
 *     _top, etc as allowed by window.open().
 * @param {string=} opt_specs Comma-separated list of specifications, same as
 *     in window.open().
 * @param {boolean=} opt_replace Whether to replace the current entry in browser
 *     history, same as in window.open().
 * @return {Window} Window the url was opened in.
 */
goog.dom.safe.openInWindow = function(
    url, opt_openerWin, opt_name, opt_specs, opt_replace) {
  /** @type {!goog.html.SafeUrl} */
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  var win = opt_openerWin || window;
  return win.open(goog.html.SafeUrl.unwrap(safeUrl),
      // If opt_name is undefined, simply passing that in to open() causes IE to
      // reuse the current window instead of opening a new one. Thus we pass ''
      // in instead, which according to spec opens a new window. See
      // https://html.spec.whatwg.org/multipage/browsers.html#dom-open .
      opt_name ? goog.string.Const.unwrap(opt_name) : '',
      opt_specs, opt_replace);
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Additional mathematical functions.
 */

goog.provide('goog.math');

goog.require('goog.array');
goog.require('goog.asserts');


/**
 * Returns a random integer greater than or equal to 0 and less than {@code a}.
 * @param {number} a  The upper bound for the random integer (exclusive).
 * @return {number} A random integer N such that 0 <= N < a.
 */
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};


/**
 * Returns a random number greater than or equal to {@code a} and less than
 * {@code b}.
 * @param {number} a  The lower bound for the random number (inclusive).
 * @param {number} b  The upper bound for the random number (exclusive).
 * @return {number} A random number N such that a <= N < b.
 */
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};


/**
 * Takes a number and clamps it to within the provided bounds.
 * @param {number} value The input number.
 * @param {number} min The minimum value to return.
 * @param {number} max The maximum value to return.
 * @return {number} The input number if it is within bounds, or the nearest
 *     number within the bounds.
 */
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};


/**
 * The % operator in JavaScript returns the remainder of a / b, but differs from
 * some other languages in that the result will have the same sign as the
 * dividend. For example, -1 % 8 == -1, whereas in some other languages
 * (such as Python) the result would be 7. This function emulates the more
 * correct modulo behavior, which is useful for certain applications such as
 * calculating an offset index in a circular list.
 *
 * @param {number} a The dividend.
 * @param {number} b The divisor.
 * @return {number} a % b where the result is between 0 and b (either 0 <= x < b
 *     or b < x <= 0, depending on the sign of b).
 */
goog.math.modulo = function(a, b) {
  var r = a % b;
  // If r and b differ in sign, add b to wrap the result to the correct sign.
  return (r * b < 0) ? r + b : r;
};


/**
 * Performs linear interpolation between values a and b. Returns the value
 * between a and b proportional to x (when x is between 0 and 1. When x is
 * outside this range, the return value is a linear extrapolation).
 * @param {number} a A number.
 * @param {number} b A number.
 * @param {number} x The proportion between a and b.
 * @return {number} The interpolated value between a and b.
 */
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};


/**
 * Tests whether the two values are equal to each other, within a certain
 * tolerance to adjust for floating point errors.
 * @param {number} a A number.
 * @param {number} b A number.
 * @param {number=} opt_tolerance Optional tolerance range. Defaults
 *     to 0.000001. If specified, should be greater than 0.
 * @return {boolean} Whether {@code a} and {@code b} are nearly equal.
 */
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 0.000001);
};


// TODO(user): Rename to normalizeAngle, retaining old name as deprecated
// alias.
/**
 * Normalizes an angle to be in range [0-360). Angles outside this range will
 * be normalized to be the equivalent angle with that range.
 * @param {number} angle Angle in degrees.
 * @return {number} Standardized angle.
 */
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};


/**
 * Normalizes an angle to be in range [0-2*PI). Angles outside this range will
 * be normalized to be the equivalent angle with that range.
 * @param {number} angle Angle in radians.
 * @return {number} Standardized angle.
 */
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};


/**
 * Converts degrees to radians.
 * @param {number} angleDegrees Angle in degrees.
 * @return {number} Angle in radians.
 */
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};


/**
 * Converts radians to degrees.
 * @param {number} angleRadians Angle in radians.
 * @return {number} Angle in degrees.
 */
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};


/**
 * For a given angle and radius, finds the X portion of the offset.
 * @param {number} degrees Angle in degrees (zero points in +X direction).
 * @param {number} radius Radius.
 * @return {number} The x-distance for the angle and radius.
 */
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};


/**
 * For a given angle and radius, finds the Y portion of the offset.
 * @param {number} degrees Angle in degrees (zero points in +X direction).
 * @param {number} radius Radius.
 * @return {number} The y-distance for the angle and radius.
 */
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};


/**
 * Computes the angle between two points (x1,y1) and (x2,y2).
 * Angle zero points in the +X direction, 90 degrees points in the +Y
 * direction (down) and from there we grow clockwise towards 360 degrees.
 * @param {number} x1 x of first point.
 * @param {number} y1 y of first point.
 * @param {number} x2 x of second point.
 * @param {number} y2 y of second point.
 * @return {number} Standardized angle in degrees of the vector from
 *     x1,y1 to x2,y2.
 */
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1,
                                                                x2 - x1)));
};


/**
 * Computes the difference between startAngle and endAngle (angles in degrees).
 * @param {number} startAngle  Start angle in degrees.
 * @param {number} endAngle  End angle in degrees.
 * @return {number} The number of degrees that when added to
 *     startAngle will result in endAngle. Positive numbers mean that the
 *     direction is clockwise. Negative numbers indicate a counter-clockwise
 *     direction.
 *     The shortest route (clockwise vs counter-clockwise) between the angles
 *     is used.
 *     When the difference is 180 degrees, the function returns 180 (not -180)
 *     angleDifference(30, 40) is 10, and angleDifference(40, 30) is -10.
 *     angleDifference(350, 10) is 20, and angleDifference(10, 350) is -20.
 */
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) -
          goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else if (d <= -180) {
    d = 360 + d;
  }
  return d;
};


/**
 * Returns the sign of a number as per the "sign" or "signum" function.
 * @param {number} x The number to take the sign of.
 * @return {number} -1 when negative, 1 when positive, 0 when 0. Preserves
 *     signed zeros and NaN.
 */
goog.math.sign = Math.sign || function(x) {
  if (x > 0) {
    return 1;
  }
  if (x < 0) {
    return -1;
  }
  return x;  // Preserves signed zeros and NaN.
};


/**
 * JavaScript implementation of Longest Common Subsequence problem.
 * http://en.wikipedia.org/wiki/Longest_common_subsequence
 *
 * Returns the longest possible array that is subarray of both of given arrays.
 *
 * @param {Array<Object>} array1 First array of objects.
 * @param {Array<Object>} array2 Second array of objects.
 * @param {Function=} opt_compareFn Function that acts as a custom comparator
 *     for the array ojects. Function should return true if objects are equal,
 *     otherwise false.
 * @param {Function=} opt_collectorFn Function used to decide what to return
 *     as a result subsequence. It accepts 2 arguments: index of common element
 *     in the first array and index in the second. The default function returns
 *     element from the first array.
 * @return {!Array<Object>} A list of objects that are common to both arrays
 *     such that there is no common subsequence with size greater than the
 *     length of the list.
 */
goog.math.longestCommonSubsequence = function(
    array1, array2, opt_compareFn, opt_collectorFn) {

  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };

  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };

  var length1 = array1.length;
  var length2 = array2.length;

  var arr = [];
  for (var i = 0; i < length1 + 1; i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }

  for (var j = 0; j < length2 + 1; j++) {
    arr[0][j] = 0;
  }

  for (i = 1; i <= length1; i++) {
    for (j = 1; j <= length2; j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }

  // Backtracking
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }

  return result;
};


/**
 * Returns the sum of the arguments.
 * @param {...number} var_args Numbers to add.
 * @return {number} The sum of the arguments (0 if no arguments were provided,
 *     {@code NaN} if any of the arguments is not a valid number).
 */
goog.math.sum = function(var_args) {
  return /** @type {number} */ (goog.array.reduce(arguments,
      function(sum, value) {
        return sum + value;
      }, 0));
};


/**
 * Returns the arithmetic mean of the arguments.
 * @param {...number} var_args Numbers to average.
 * @return {number} The average of the arguments ({@code NaN} if no arguments
 *     were provided or any of the arguments is not a valid number).
 */
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};


/**
 * Returns the unbiased sample variance of the arguments. For a definition,
 * see e.g. http://en.wikipedia.org/wiki/Variance
 * @param {...number} var_args Number samples to analyze.
 * @return {number} The unbiased sample variance of the arguments (0 if fewer
 *     than two samples were provided, or {@code NaN} if any of the samples is
 *     not a valid number).
 */
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }

  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments,
      function(val) {
        return Math.pow(val - mean, 2);
      })) / (sampleSize - 1);

  return variance;
};


/**
 * Returns the sample standard deviation of the arguments.  For a definition of
 * sample standard deviation, see e.g.
 * http://en.wikipedia.org/wiki/Standard_deviation
 * @param {...number} var_args Number samples to analyze.
 * @return {number} The sample standard deviation of the arguments (0 if fewer
 *     than two samples were provided, or {@code NaN} if any of the samples is
 *     not a valid number).
 */
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};


/**
 * Returns whether the supplied number represents an integer, i.e. that is has
 * no fractional component.  No range-checking is performed on the number.
 * @param {number} num The number to test.
 * @return {boolean} Whether {@code num} is an integer.
 */
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};


/**
 * Returns whether the supplied number is finite and not NaN.
 * @param {number} num The number to test.
 * @return {boolean} Whether {@code num} is a finite number.
 */
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};


/**
 * @param {number} num The number to test.
 * @return {boolean} Whether it is negative zero.
 */
goog.math.isNegativeZero = function(num) {
  return num == 0 && 1 / num < 0;
};


/**
 * Returns the precise value of floor(log10(num)).
 * Simpler implementations didn't work because of floating point rounding
 * errors. For example
 * <ul>
 * <li>Math.floor(Math.log(num) / Math.LN10) is off by one for num == 1e+3.
 * <li>Math.floor(Math.log(num) * Math.LOG10E) is off by one for num == 1e+15.
 * <li>Math.floor(Math.log10(num)) is off by one for num == 1e+15 - 1.
 * </ul>
 * @param {number} num A floating point number.
 * @return {number} Its logarithm to base 10 rounded down to the nearest
 *     integer if num > 0. -Infinity if num == 0. NaN if num < 0.
 */
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat('1e' + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};


/**
 * A tweaked variant of {@code Math.floor} which tolerates if the passed number
 * is infinitesimally smaller than the closest integer. It often happens with
 * the results of floating point calculations because of the finite precision
 * of the intermediate results. For example {@code Math.floor(Math.log(1000) /
 * Math.LN10) == 2}, not 3 as one would expect.
 * @param {number} num A number.
 * @param {number=} opt_epsilon An infinitesimally small positive number, the
 *     rounding error to tolerate.
 * @return {number} The largest integer less than or equal to {@code num}.
 */
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2e-15));
};


/**
 * A tweaked variant of {@code Math.ceil}. See {@code goog.math.safeFloor} for
 * details.
 * @param {number} num A number.
 * @param {number=} opt_epsilon An infinitesimally small positive number, the
 *     rounding error to tolerate.
 * @return {number} The smallest integer greater than or equal to {@code num}.
 */
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2e-15));
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A utility class for representing two-dimensional positions.
 */


goog.provide('goog.math.Coordinate');

goog.require('goog.math');



/**
 * Class for representing coordinates and positions.
 * @param {number=} opt_x Left, defaults to 0.
 * @param {number=} opt_y Top, defaults to 0.
 * @struct
 * @constructor
 */
goog.math.Coordinate = function(opt_x, opt_y) {
  /**
   * X-value
   * @type {number}
   */
  this.x = goog.isDef(opt_x) ? opt_x : 0;

  /**
   * Y-value
   * @type {number}
   */
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};


/**
 * Returns a new copy of the coordinate.
 * @return {!goog.math.Coordinate} A clone of this coordinate.
 */
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};


if (goog.DEBUG) {
  /**
   * Returns a nice string representing the coordinate.
   * @return {string} In the form (50, 73).
   * @override
   */
  goog.math.Coordinate.prototype.toString = function() {
    return '(' + this.x + ', ' + this.y + ')';
  };
}


/**
 * Compares coordinates for equality.
 * @param {goog.math.Coordinate} a A Coordinate.
 * @param {goog.math.Coordinate} b A Coordinate.
 * @return {boolean} True iff the coordinates are equal, or if both are null.
 */
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};


/**
 * Returns the distance between two coordinates.
 * @param {!goog.math.Coordinate} a A Coordinate.
 * @param {!goog.math.Coordinate} b A Coordinate.
 * @return {number} The distance between {@code a} and {@code b}.
 */
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};


/**
 * Returns the magnitude of a coordinate.
 * @param {!goog.math.Coordinate} a A Coordinate.
 * @return {number} The distance between the origin and {@code a}.
 */
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};


/**
 * Returns the angle from the origin to a coordinate.
 * @param {!goog.math.Coordinate} a A Coordinate.
 * @return {number} The angle, in degrees, clockwise from the positive X
 *     axis to {@code a}.
 */
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};


/**
 * Returns the squared distance between two coordinates. Squared distances can
 * be used for comparisons when the actual value is not required.
 *
 * Performance note: eliminating the square root is an optimization often used
 * in lower-level languages, but the speed difference is not nearly as
 * pronounced in JavaScript (only a few percent.)
 *
 * @param {!goog.math.Coordinate} a A Coordinate.
 * @param {!goog.math.Coordinate} b A Coordinate.
 * @return {number} The squared distance between {@code a} and {@code b}.
 */
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};


/**
 * Returns the difference between two coordinates as a new
 * goog.math.Coordinate.
 * @param {!goog.math.Coordinate} a A Coordinate.
 * @param {!goog.math.Coordinate} b A Coordinate.
 * @return {!goog.math.Coordinate} A Coordinate representing the difference
 *     between {@code a} and {@code b}.
 */
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};


/**
 * Returns the sum of two coordinates as a new goog.math.Coordinate.
 * @param {!goog.math.Coordinate} a A Coordinate.
 * @param {!goog.math.Coordinate} b A Coordinate.
 * @return {!goog.math.Coordinate} A Coordinate representing the sum of the two
 *     coordinates.
 */
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};


/**
 * Rounds the x and y fields to the next larger integer values.
 * @return {!goog.math.Coordinate} This coordinate with ceil'd fields.
 */
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};


/**
 * Rounds the x and y fields to the next smaller integer values.
 * @return {!goog.math.Coordinate} This coordinate with floored fields.
 */
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};


/**
 * Rounds the x and y fields to the nearest integer values.
 * @return {!goog.math.Coordinate} This coordinate with rounded fields.
 */
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};


/**
 * Translates this box by the given offsets. If a {@code goog.math.Coordinate}
 * is given, then the x and y values are translated by the coordinate's x and y.
 * Otherwise, x and y are translated by {@code tx} and {@code opt_ty}
 * respectively.
 * @param {number|goog.math.Coordinate} tx The value to translate x by or the
 *     the coordinate to translate this coordinate by.
 * @param {number=} opt_ty The value to translate y by.
 * @return {!goog.math.Coordinate} This coordinate after translating.
 */
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};


/**
 * Scales this coordinate by the given scale factors. The x and y values are
 * scaled by {@code sx} and {@code opt_sy} respectively.  If {@code opt_sy}
 * is not given, then {@code sx} is used for both x and y.
 * @param {number} sx The scale factor to use for the x dimension.
 * @param {number=} opt_sy The scale factor to use for the y dimension.
 * @return {!goog.math.Coordinate} This coordinate after scaling.
 */
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};


/**
 * Rotates this coordinate clockwise about the origin (or, optionally, the given
 * center) by the given angle, in radians.
 * @param {number} radians The angle by which to rotate this coordinate
 *     clockwise about the given center, in radians.
 * @param {!goog.math.Coordinate=} opt_center The center of rotation. Defaults
 *     to (0, 0) if not given.
 */
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);

  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);

  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};


/**
 * Rotates this coordinate clockwise about the origin (or, optionally, the given
 * center) by the given angle, in degrees.
 * @param {number} degrees The angle by which to rotate this coordinate
 *     clockwise about the given center, in degrees.
 * @param {!goog.math.Coordinate=} opt_center The center of rotation. Defaults
 *     to (0, 0) if not given.
 */
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities for manipulating the browser's Document Object Model
 * Inspiration taken *heavily* from mochikit (http://mochikit.com/).
 *
 * You can use {@link goog.dom.DomHelper} to create new dom helpers that refer
 * to a different document object.  This is useful if you are working with
 * frames or multiple windows.
 *
 * @author arv@google.com (Erik Arvidsson)
 */


// TODO(arv): Rename/refactor getTextContent and getRawTextContent. The problem
// is that getTextContent should mimic the DOM3 textContent. We should add a
// getInnerText (or getText) which tries to return the visible text, innerText.


goog.provide('goog.dom');
goog.provide('goog.dom.Appendable');
goog.provide('goog.dom.DomHelper');

goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom.BrowserFeature');
goog.require('goog.dom.NodeType');
goog.require('goog.dom.TagName');
goog.require('goog.dom.safe');
goog.require('goog.html.SafeHtml');
goog.require('goog.math.Coordinate');
goog.require('goog.math.Size');
goog.require('goog.object');
goog.require('goog.string');
goog.require('goog.string.Unicode');
goog.require('goog.userAgent');


/**
 * @define {boolean} Whether we know at compile time that the browser is in
 * quirks mode.
 */
goog.define('goog.dom.ASSUME_QUIRKS_MODE', false);


/**
 * @define {boolean} Whether we know at compile time that the browser is in
 * standards compliance mode.
 */
goog.define('goog.dom.ASSUME_STANDARDS_MODE', false);


/**
 * Whether we know the compatibility mode at compile time.
 * @type {boolean}
 * @private
 */
goog.dom.COMPAT_MODE_KNOWN_ =
    goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;


/**
 * Gets the DomHelper object for the document where the element resides.
 * @param {(Node|Window)=} opt_element If present, gets the DomHelper for this
 *     element.
 * @return {!goog.dom.DomHelper} The DomHelper.
 */
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ?
      new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) :
      (goog.dom.defaultDomHelper_ ||
          (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper()));
};


/**
 * Cached default DOM helper.
 * @type {goog.dom.DomHelper}
 * @private
 */
goog.dom.defaultDomHelper_;


/**
 * Gets the document object being used by the dom library.
 * @return {!Document} Document object.
 */
goog.dom.getDocument = function() {
  return document;
};


/**
 * Gets an element from the current document by element id.
 *
 * If an Element is passed in, it is returned.
 *
 * @param {string|Element} element Element ID or a DOM node.
 * @return {Element} The element with the given ID, or the node passed in.
 */
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};


/**
 * Gets an element by id from the given document (if present).
 * If an element is given, it is returned.
 * @param {!Document} doc
 * @param {string|Element} element Element ID or a DOM node.
 * @return {Element} The resulting element.
 * @private
 */
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ?
      doc.getElementById(element) :
      element;
};


/**
 * Gets an element by id, asserting that the element is found.
 *
 * This is used when an element is expected to exist, and should fail with
 * an assertion error if it does not (if assertions are enabled).
 *
 * @param {string} id Element ID.
 * @return {!Element} The element with the given ID, if it exists.
 */
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};


/**
 * Helper function for getRequiredElementHelper functions, both static and
 * on DomHelper.  Asserts the element with the given id exists.
 * @param {!Document} doc
 * @param {string} id
 * @return {!Element} The element with the given ID, if it exists.
 * @private
 */
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  // To prevent users passing in Elements as is permitted in getElement().
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element,
      'No element found with id: ' + id);
  return element;
};


/**
 * Alias for getElement.
 * @param {string|Element} element Element ID or a DOM node.
 * @return {Element} The element with the given ID, or the node passed in.
 * @deprecated Use {@link goog.dom.getElement} instead.
 */
goog.dom.$ = goog.dom.getElement;


/**
 * Looks up elements by both tag and class name, using browser native functions
 * ({@code querySelectorAll}, {@code getElementsByTagName} or
 * {@code getElementsByClassName}) where possible. This function
 * is a useful, if limited, way of collecting a list of DOM elements
 * with certain characteristics.  {@code goog.dom.query} offers a
 * more powerful and general solution which allows matching on CSS3
 * selector expressions, but at increased cost in code size. If all you
 * need is particular tags belonging to a single class, this function
 * is fast and sleek.
 *
 * Note that tag names are case sensitive in the SVG namespace, and this
 * function converts opt_tag to uppercase for comparisons. For queries in the
 * SVG namespace you should use querySelector or querySelectorAll instead.
 * https://bugzilla.mozilla.org/show_bug.cgi?id=963870
 * https://bugs.webkit.org/show_bug.cgi?id=83438
 *
 * @see {goog.dom.query}
 *
 * @param {?string=} opt_tag Element tag name.
 * @param {?string=} opt_class Optional class name.
 * @param {(Document|Element)=} opt_el Optional element to look in.
 * @return { {length: number} } Array-like list of elements (only a length
 *     property and numerical indices are guaranteed to exist).
 */
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class,
                                                opt_el);
};


/**
 * Returns a static, array-like list of the elements with the provided
 * className.
 * @see {goog.dom.query}
 * @param {string} className the name of the class to look for.
 * @param {(Document|Element)=} opt_el Optional element to look in.
 * @return { {length: number} } The items found with the class name provided.
 */
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll('.' + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(
      document, '*', className, opt_el);
};


/**
 * Returns the first element with the provided className.
 * @see {goog.dom.query}
 * @param {string} className the name of the class to look for.
 * @param {Element|Document=} opt_el Optional element to look in.
 * @return {Element} The first item with the class name provided.
 */
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (parent.getElementsByClassName) {
    retVal = parent.getElementsByClassName(className)[0];
  } else if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector('.' + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(
        document, '*', className, opt_el)[0];
  }
  return retVal || null;
};


/**
 * Ensures an element with the given className exists, and then returns the
 * first element with the provided className.
 * @see {goog.dom.query}
 * @param {string} className the name of the class to look for.
 * @param {!Element|!Document=} opt_root Optional element or document to look
 *     in.
 * @return {!Element} The first item with the class name provided.
 * @throws {goog.asserts.AssertionError} Thrown if no element is found.
 */
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue,
      'No element found with className: ' + className);
};


/**
 * Prefer the standardized (http://www.w3.org/TR/selectors-api/), native and
 * fast W3C Selectors API.
 * @param {!(Element|Document)} parent The parent document object.
 * @return {boolean} whether or not we can use parent.querySelector* APIs.
 * @private
 */
goog.dom.canUseQuerySelector_ = function(parent) {
  return !!(parent.querySelectorAll && parent.querySelector);
};


/**
 * Helper for {@code getElementsByTagNameAndClass}.
 * @param {!Document} doc The document to get the elements in.
 * @param {?string=} opt_tag Element tag name.
 * @param {?string=} opt_class Optional class name.
 * @param {(Document|Element)=} opt_el Optional element to look in.
 * @return { {length: number} } Array-like list of elements (only a length
 *     property and numerical indices are guaranteed to exist).
 * @private
 */
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class,
                                                  opt_el) {
  var parent = opt_el || doc;
  var tagName = (opt_tag && opt_tag != '*') ? opt_tag.toUpperCase() : '';

  if (goog.dom.canUseQuerySelector_(parent) &&
      (tagName || opt_class)) {
    var query = tagName + (opt_class ? '.' + opt_class : '');
    return parent.querySelectorAll(query);
  }

  // Use the native getElementsByClassName if available, under the assumption
  // that even when the tag name is specified, there will be fewer elements to
  // filter through when going by class than by tag name
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);

    if (tagName) {
      var arrayLike = {};
      var len = 0;

      // Filter for specific tags if requested.
      for (var i = 0, el; el = els[i]; i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;

      return arrayLike;
    } else {
      return els;
    }
  }

  var els = parent.getElementsByTagName(tagName || '*');

  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el; el = els[i]; i++) {
      var className = el.className;
      // Check if className has a split function since SVG className does not.
      if (typeof className.split == 'function' &&
          goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};


/**
 * Alias for {@code getElementsByTagNameAndClass}.
 * @param {?string=} opt_tag Element tag name.
 * @param {?string=} opt_class Optional class name.
 * @param {Element=} opt_el Optional element to look in.
 * @return { {length: number} } Array-like list of elements (only a length
 *     property and numerical indices are guaranteed to exist).
 * @deprecated Use {@link goog.dom.getElementsByTagNameAndClass} instead.
 */
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;


/**
 * Sets multiple properties on a node.
 * @param {Element} element DOM node to set properties on.
 * @param {Object} properties Hash of property:value pairs.
 */
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == 'style') {
      element.style.cssText = val;
    } else if (key == 'class') {
      element.className = val;
    } else if (key == 'for') {
      element.htmlFor = val;
    } else if (goog.dom.DIRECT_ATTRIBUTE_MAP_.hasOwnProperty(key)) {
      element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
    } else if (goog.string.startsWith(key, 'aria-') ||
        goog.string.startsWith(key, 'data-')) {
      element.setAttribute(key, val);
    } else {
      element[key] = val;
    }
  });
};


/**
 * Map of attributes that should be set using
 * element.setAttribute(key, val) instead of element[key] = val.  Used
 * by goog.dom.setProperties.
 *
 * @private {!Object<string, string>}
 * @const
 */
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {
  'cellpadding': 'cellPadding',
  'cellspacing': 'cellSpacing',
  'colspan': 'colSpan',
  'frameborder': 'frameBorder',
  'height': 'height',
  'maxlength': 'maxLength',
  'role': 'role',
  'rowspan': 'rowSpan',
  'type': 'type',
  'usemap': 'useMap',
  'valign': 'vAlign',
  'width': 'width'
};


/**
 * Gets the dimensions of the viewport.
 *
 * Gecko Standards mode:
 * docEl.clientWidth  Width of viewport excluding scrollbar.
 * win.innerWidth     Width of viewport including scrollbar.
 * body.clientWidth   Width of body element.
 *
 * docEl.clientHeight Height of viewport excluding scrollbar.
 * win.innerHeight    Height of viewport including scrollbar.
 * body.clientHeight  Height of document.
 *
 * Gecko Backwards compatible mode:
 * docEl.clientWidth  Width of viewport excluding scrollbar.
 * win.innerWidth     Width of viewport including scrollbar.
 * body.clientWidth   Width of viewport excluding scrollbar.
 *
 * docEl.clientHeight Height of document.
 * win.innerHeight    Height of viewport including scrollbar.
 * body.clientHeight  Height of viewport excluding scrollbar.
 *
 * IE6/7 Standards mode:
 * docEl.clientWidth  Width of viewport excluding scrollbar.
 * win.innerWidth     Undefined.
 * body.clientWidth   Width of body element.
 *
 * docEl.clientHeight Height of viewport excluding scrollbar.
 * win.innerHeight    Undefined.
 * body.clientHeight  Height of document element.
 *
 * IE5 + IE6/7 Backwards compatible mode:
 * docEl.clientWidth  0.
 * win.innerWidth     Undefined.
 * body.clientWidth   Width of viewport excluding scrollbar.
 *
 * docEl.clientHeight 0.
 * win.innerHeight    Undefined.
 * body.clientHeight  Height of viewport excluding scrollbar.
 *
 * Opera 9 Standards and backwards compatible mode:
 * docEl.clientWidth  Width of viewport excluding scrollbar.
 * win.innerWidth     Width of viewport including scrollbar.
 * body.clientWidth   Width of viewport excluding scrollbar.
 *
 * docEl.clientHeight Height of document.
 * win.innerHeight    Height of viewport including scrollbar.
 * body.clientHeight  Height of viewport excluding scrollbar.
 *
 * WebKit:
 * Safari 2
 * docEl.clientHeight Same as scrollHeight.
 * docEl.clientWidth  Same as innerWidth.
 * win.innerWidth     Width of viewport excluding scrollbar.
 * win.innerHeight    Height of the viewport including scrollbar.
 * frame.innerHeight  Height of the viewport exluding scrollbar.
 *
 * Safari 3 (tested in 522)
 *
 * docEl.clientWidth  Width of viewport excluding scrollbar.
 * docEl.clientHeight Height of viewport excluding scrollbar in strict mode.
 * body.clientHeight  Height of viewport excluding scrollbar in quirks mode.
 *
 * @param {Window=} opt_window Optional window element to test.
 * @return {!goog.math.Size} Object with values 'width' and 'height'.
 */
goog.dom.getViewportSize = function(opt_window) {
  // TODO(arv): This should not take an argument
  return goog.dom.getViewportSize_(opt_window || window);
};


/**
 * Helper for {@code getViewportSize}.
 * @param {Window} win The window to get the view port size for.
 * @return {!goog.math.Size} Object with values 'width' and 'height'.
 * @private
 */
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};


/**
 * Calculates the height of the document.
 *
 * @return {number} The height of the current document.
 */
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};


/**
 * Calculates the height of the document of the given window.
 *
 * Function code copied from the opensocial gadget api:
 *   gadgets.window.adjustHeight(opt_height)
 *
 * @private
 * @param {!Window} win The window whose document height to retrieve.
 * @return {number} The height of the document of the given window.
 */
goog.dom.getDocumentHeight_ = function(win) {
  // NOTE(eae): This method will return the window size rather than the document
  // size in webkit quirks mode.
  var doc = win.document;
  var height = 0;

  if (doc) {
    // Calculating inner content height is hard and different between
    // browsers rendering in Strict vs. Quirks mode.  We use a combination of
    // three properties within document.body and document.documentElement:
    // - scrollHeight
    // - offsetHeight
    // - clientHeight
    // These values differ significantly between browsers and rendering modes.
    // But there are patterns.  It just takes a lot of time and persistence
    // to figure out.

    var body = doc.body;
    var docEl = /** @type {!HTMLElement} */ (doc.documentElement);
    if (!(docEl && body)) {
      return 0;
    }

    // Get the height of the viewport
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      // In Strict mode:
      // The inner content height is contained in either:
      //    document.documentElement.scrollHeight
      //    document.documentElement.offsetHeight
      // Based on studying the values output by different browsers,
      // use the value that's NOT equal to the viewport height found above.
      height = docEl.scrollHeight != vh ?
          docEl.scrollHeight : docEl.offsetHeight;
    } else {
      // In Quirks mode:
      // documentElement.clientHeight is equal to documentElement.offsetHeight
      // except in IE.  In most browsers, document.documentElement can be used
      // to calculate the inner content height.
      // However, in other browsers (e.g. IE), document.body must be used
      // instead.  How do we know which one to use?
      // If document.documentElement.clientHeight does NOT equal
      // document.documentElement.offsetHeight, then use document.body.
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }

      // Detect whether the inner content height is bigger or smaller
      // than the bounding box (viewport).  If bigger, take the larger
      // value.  If smaller, take the smaller value.
      if (sh > vh) {
        // Content is larger
        height = sh > oh ? sh : oh;
      } else {
        // Content is smaller
        height = sh < oh ? sh : oh;
      }
    }
  }

  return height;
};


/**
 * Gets the page scroll distance as a coordinate object.
 *
 * @param {Window=} opt_window Optional window element to test.
 * @return {!goog.math.Coordinate} Object with values 'x' and 'y'.
 * @deprecated Use {@link goog.dom.getDocumentScroll} instead.
 */
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};


/**
 * Gets the document scroll distance as a coordinate object.
 *
 * @return {!goog.math.Coordinate} Object with values 'x' and 'y'.
 */
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};


/**
 * Helper for {@code getDocumentScroll}.
 *
 * @param {!Document} doc The document to get the scroll for.
 * @return {!goog.math.Coordinate} Object with values 'x' and 'y'.
 * @private
 */
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher('10') &&
      win.pageYOffset != el.scrollTop) {
    // The keyboard on IE10 touch devices shifts the page using the pageYOffset
    // without modifying scrollTop. For this case, we want the body scroll
    // offsets.
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft,
      win.pageYOffset || el.scrollTop);
};


/**
 * Gets the document scroll element.
 * @return {!Element} Scrolling element.
 */
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};


/**
 * Helper for {@code getDocumentScrollElement}.
 * @param {!Document} doc The document to get the scroll element for.
 * @return {!Element} Scrolling element.
 * @private
 */
goog.dom.getDocumentScrollElement_ = function(doc) {
  // Old WebKit needs body.scrollLeft in both quirks mode and strict mode. We
  // also default to the documentElement if the document does not have a body
  // (e.g. a SVG document).
  // Uses http://dev.w3.org/csswg/cssom-view/#dom-document-scrollingelement to
  // avoid trying to guess about browser behavior from the UA string.
  if (doc.scrollingElement) {
    return doc.scrollingElement;
  }
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};


/**
 * Gets the window object associated with the given document.
 *
 * @param {Document=} opt_doc  Document object to get window for.
 * @return {!Window} The window associated with the given document.
 */
goog.dom.getWindow = function(opt_doc) {
  // TODO(arv): This should not take an argument.
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};


/**
 * Helper for {@code getWindow}.
 *
 * @param {!Document} doc  Document object to get window for.
 * @return {!Window} The window associated with the given document.
 * @private
 */
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};


/**
 * Returns a dom node with a set of attributes.  This function accepts varargs
 * for subsequent nodes to be added.  Subsequent nodes will be added to the
 * first node as childNodes.
 *
 * So:
 * <code>createDom('div', null, createDom('p'), createDom('p'));</code>
 * would return a div with two child paragraphs
 *
 * @param {string} tagName Tag to create.
 * @param {(Object|Array<string>|string)=} opt_attributes If object, then a map
 *     of name-value pairs for attributes. If a string, then this is the
 *     className of the new element. If an array, the elements will be joined
 *     together as the className of the new element.
 * @param {...(Object|string|Array|NodeList)} var_args Further DOM nodes or
 *     strings for text nodes. If one of the var_args is an array or NodeList,
 *     its elements will be added as childNodes instead.
 * @return {!Element} Reference to a DOM node.
 */
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};


/**
 * Helper for {@code createDom}.
 * @param {!Document} doc The document to create the DOM in.
 * @param {!Arguments} args Argument object passed from the callers. See
 *     {@code goog.dom.createDom} for details.
 * @return {!Element} Reference to a DOM node.
 * @private
 */
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];

  // Internet Explorer is dumb:
  // name: https://msdn.microsoft.com/en-us/library/ms534184(v=vs.85).aspx
  // type: https://msdn.microsoft.com/en-us/library/ms534700(v=vs.85).aspx
  // Also does not allow setting of 'type' attribute on 'input' or 'button'.
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes &&
      (attributes.name || attributes.type)) {
    var tagNameArr = ['<', tagName];
    if (attributes.name) {
      tagNameArr.push(' name="', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type="', goog.string.htmlEscape(attributes.type), '"');

      // Clone attributes map to remove 'type' without mutating the input.
      var clone = {};
      goog.object.extend(clone, attributes);

      // JSCompiler can't see how goog.object.extend added this property,
      // because it was essentially added by reflection.
      // So it needs to be quoted.
      delete clone['type'];

      attributes = clone;
    }
    tagNameArr.push('>');
    tagName = tagNameArr.join('');
  }

  var element = doc.createElement(tagName);

  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else if (goog.isArray(attributes)) {
      element.className = attributes.join(' ');
    } else {
      goog.dom.setProperties(element, attributes);
    }
  }

  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }

  return element;
};


/**
 * Appends a node with text or other nodes.
 * @param {!Document} doc The document to create new nodes in.
 * @param {!Node} parent The node to append nodes to.
 * @param {!Arguments} args The values to add. See {@code goog.dom.append}.
 * @param {number} startIndex The index of the array to start from.
 * @private
 */
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    // TODO(user): More coercion, ala MochiKit?
    if (child) {
      parent.appendChild(goog.isString(child) ?
          doc.createTextNode(child) : child);
    }
  }

  for (var i = startIndex; i < args.length; i++) {
    var arg = args[i];
    // TODO(attila): Fix isArrayLike to return false for a text node.
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      // If the argument is a node list, not a real array, use a clone,
      // because forEach can't be used to mutate a NodeList.
      goog.array.forEach(goog.dom.isNodeList(arg) ?
          goog.array.toArray(arg) : arg,
          childHandler);
    } else {
      childHandler(arg);
    }
  }
};


/**
 * Alias for {@code createDom}.
 * @param {string} tagName Tag to create.
 * @param {(string|Object)=} opt_attributes If object, then a map of name-value
 *     pairs for attributes. If a string, then this is the className of the new
 *     element.
 * @param {...(Object|string|Array|NodeList)} var_args Further DOM nodes or
 *     strings for text nodes. If one of the var_args is an array, its
 *     children will be added as childNodes instead.
 * @return {!Element} Reference to a DOM node.
 * @deprecated Use {@link goog.dom.createDom} instead.
 */
goog.dom.$dom = goog.dom.createDom;


/**
 * Creates a new element.
 * @param {string} name Tag name.
 * @return {!Element} The new element.
 */
goog.dom.createElement = function(name) {
  return document.createElement(name);
};


/**
 * Creates a new text node.
 * @param {number|string} content Content.
 * @return {!Text} The new text node.
 */
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};


/**
 * Create a table.
 * @param {number} rows The number of rows in the table.  Must be >= 1.
 * @param {number} columns The number of columns in the table.  Must be >= 1.
 * @param {boolean=} opt_fillWithNbsp If true, fills table entries with
 *     {@code goog.string.Unicode.NBSP} characters.
 * @return {!Element} The created table.
 */
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  // TODO(user): Return HTMLTableElement, also in prototype function.
  // Callers need to be updated to e.g. not assign numbers to table.cellSpacing.
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};


/**
 * Create a table.
 * @param {!Document} doc Document object to use to create the table.
 * @param {number} rows The number of rows in the table.  Must be >= 1.
 * @param {number} columns The number of columns in the table.  Must be >= 1.
 * @param {boolean} fillWithNbsp If true, fills table entries with
 *     {@code goog.string.Unicode.NBSP} characters.
 * @return {!HTMLTableElement} The created table.
 * @private
 */
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var table = /** @type {!HTMLTableElement} */
      (doc.createElement(goog.dom.TagName.TABLE));
  var tbody = table.appendChild(doc.createElement(goog.dom.TagName.TBODY));
  for (var i = 0; i < rows; i++) {
    var tr = doc.createElement(goog.dom.TagName.TR);
    for (var j = 0; j < columns; j++) {
      var td = doc.createElement(goog.dom.TagName.TD);
      // IE <= 9 will create a text node if we set text content to the empty
      // string, so we avoid doing it unless necessary. This ensures that the
      // same DOM tree is returned on all browsers.
      if (fillWithNbsp) {
        goog.dom.setTextContent(td, goog.string.Unicode.NBSP);
      }
      tr.appendChild(td);
    }
    tbody.appendChild(tr);
  }
  return table;
};


/**
 * Converts HTML markup into a node.
 * @param {!goog.html.SafeHtml} html The HTML markup to convert.
 * @return {!Node} The resulting node.
 */
goog.dom.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(document, html);
};


/**
 * Helper for {@code safeHtmlToNode}.
 * @param {!Document} doc The document.
 * @param {!goog.html.SafeHtml} html The HTML markup to convert.
 * @return {!Node} The resulting node.
 * @private
 */
goog.dom.safeHtmlToNode_ = function(doc, html) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    goog.dom.safe.setInnerHtml(tempDiv,
        goog.html.SafeHtml.concat(goog.html.SafeHtml.create('br'), html));
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    goog.dom.safe.setInnerHtml(tempDiv, html);
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};


/**
 * Converts an HTML string into a document fragment. The string must be
 * sanitized in order to avoid cross-site scripting. For example
 * {@code goog.dom.htmlToDocumentFragment('&lt;img src=x onerror=alert(0)&gt;')}
 * triggers an alert in all browsers, even if the returned document fragment
 * is thrown away immediately.
 *
 * NOTE: This method doesn't work if your htmlString contains elements that
 * can't be contained in a <div>. For example, <tr>.
 *
 * @param {string} htmlString The HTML string to convert.
 * @return {!Node} The resulting document fragment.
 */
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};


// TODO(jakubvrana): Merge with {@code safeHtmlToNode_}.
/**
 * Helper for {@code htmlToDocumentFragment}.
 *
 * @param {!Document} doc The document.
 * @param {string} htmlString The HTML string to convert.
 * @return {!Node} The resulting document fragment.
 * @private
 */
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = '<br>' + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};


/**
 * Helper for {@code htmlToDocumentFragment_}.
 * @param {!Document} doc The document.
 * @param {!Node} tempDiv The input node.
 * @return {!Node} The resulting node.
 * @private
 */
goog.dom.childrenToNode_ = function(doc, tempDiv) {
  if (tempDiv.childNodes.length == 1) {
    return tempDiv.removeChild(tempDiv.firstChild);
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};


/**
 * Returns true if the browser is in "CSS1-compatible" (standards-compliant)
 * mode, false otherwise.
 * @return {boolean} True if in CSS1-compatible mode.
 */
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};


/**
 * Returns true if the browser is in "CSS1-compatible" (standards-compliant)
 * mode, false otherwise.
 * @param {!Document} doc The document to check.
 * @return {boolean} True if in CSS1-compatible mode.
 * @private
 */
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }

  return doc.compatMode == 'CSS1Compat';
};


/**
 * Determines if the given node can contain children, intended to be used for
 * HTML generation.
 *
 * IE natively supports node.canHaveChildren but has inconsistent behavior.
 * Prior to IE8 the base tag allows children and in IE9 all nodes return true
 * for canHaveChildren.
 *
 * In practice all non-IE browsers allow you to add children to any node, but
 * the behavior is inconsistent:
 *
 * <pre>
 *   var a = document.createElement(goog.dom.TagName.BR);
 *   a.appendChild(document.createTextNode('foo'));
 *   a.appendChild(document.createTextNode('bar'));
 *   console.log(a.childNodes.length);  // 2
 *   console.log(a.innerHTML);  // Chrome: "", IE9: "foobar", FF3.5: "foobar"
 * </pre>
 *
 * For more information, see:
 * http://dev.w3.org/html5/markup/syntax.html#syntax-elements
 *
 * TODO(user): Rename shouldAllowChildren() ?
 *
 * @param {Node} node The node to check.
 * @return {boolean} Whether the node can contain children.
 */
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch (/** @type {!Element} */ (node).tagName) {
    case goog.dom.TagName.APPLET:
    case goog.dom.TagName.AREA:
    case goog.dom.TagName.BASE:
    case goog.dom.TagName.BR:
    case goog.dom.TagName.COL:
    case goog.dom.TagName.COMMAND:
    case goog.dom.TagName.EMBED:
    case goog.dom.TagName.FRAME:
    case goog.dom.TagName.HR:
    case goog.dom.TagName.IMG:
    case goog.dom.TagName.INPUT:
    case goog.dom.TagName.IFRAME:
    case goog.dom.TagName.ISINDEX:
    case goog.dom.TagName.KEYGEN:
    case goog.dom.TagName.LINK:
    case goog.dom.TagName.NOFRAMES:
    case goog.dom.TagName.NOSCRIPT:
    case goog.dom.TagName.META:
    case goog.dom.TagName.OBJECT:
    case goog.dom.TagName.PARAM:
    case goog.dom.TagName.SCRIPT:
    case goog.dom.TagName.SOURCE:
    case goog.dom.TagName.STYLE:
    case goog.dom.TagName.TRACK:
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};


/**
 * Appends a child to a node.
 * @param {Node} parent Parent.
 * @param {Node} child Child.
 */
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};


/**
 * Appends a node with text or other nodes.
 * @param {!Node} parent The node to append nodes to.
 * @param {...goog.dom.Appendable} var_args The things to append to the node.
 *     If this is a Node it is appended as is.
 *     If this is a string then a text node is appended.
 *     If this is an array like object then fields 0 to length - 1 are appended.
 */
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};


/**
 * Removes all the child nodes on a DOM node.
 * @param {Node} node Node to remove children from.
 */
goog.dom.removeChildren = function(node) {
  // Note: Iterations over live collections can be slow, this is the fastest
  // we could find. The double parenthesis are used to prevent JsCompiler and
  // strict warnings.
  var child;
  while ((child = node.firstChild)) {
    node.removeChild(child);
  }
};


/**
 * Inserts a new node before an existing reference node (i.e. as the previous
 * sibling). If the reference node has no parent, then does nothing.
 * @param {Node} newNode Node to insert.
 * @param {Node} refNode Reference node to insert before.
 */
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};


/**
 * Inserts a new node after an existing reference node (i.e. as the next
 * sibling). If the reference node has no parent, then does nothing.
 * @param {Node} newNode Node to insert.
 * @param {Node} refNode Reference node to insert after.
 */
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};


/**
 * Insert a child at a given index. If index is larger than the number of child
 * nodes that the parent currently has, the node is inserted as the last child
 * node.
 * @param {Element} parent The element into which to insert the child.
 * @param {Node} child The element to insert.
 * @param {number} index The index at which to insert the new child node. Must
 *     not be negative.
 */
goog.dom.insertChildAt = function(parent, child, index) {
  // Note that if the second argument is null, insertBefore
  // will append the child at the end of the list of children.
  parent.insertBefore(child, parent.childNodes[index] || null);
};


/**
 * Removes a node from its parent.
 * @param {Node} node The node to remove.
 * @return {Node} The node removed if removed; else, null.
 */
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};


/**
 * Replaces a node in the DOM tree. Will do nothing if {@code oldNode} has no
 * parent.
 * @param {Node} newNode Node to insert.
 * @param {Node} oldNode Node to replace.
 */
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};


/**
 * Flattens an element. That is, removes it and replace it with its children.
 * Does nothing if the element is not in the document.
 * @param {Element} element The element to flatten.
 * @return {Element|undefined} The original element, detached from the document
 *     tree, sans children; or undefined, if the element was not in the document
 *     to begin with.
 */
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    // Use IE DOM method (supported by Opera too) if available
    if (element.removeNode) {
      return /** @type {Element} */ (element.removeNode(false));
    } else {
      // Move all children of the original node up one level.
      while ((child = element.firstChild)) {
        parent.insertBefore(child, element);
      }

      // Detach the original element.
      return /** @type {Element} */ (goog.dom.removeNode(element));
    }
  }
};


/**
 * Returns an array containing just the element children of the given element.
 * @param {Element} element The element whose element children we want.
 * @return {!(Array|NodeList)} An array or array-like list of just the element
 *     children of the given element.
 */
goog.dom.getChildren = function(element) {
  // We check if the children attribute is supported for child elements
  // since IE8 misuses the attribute by also including comments.
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE &&
      element.children != undefined) {
    return element.children;
  }
  // Fall back to manually filtering the element's child nodes.
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};


/**
 * Returns the first child node that is an element.
 * @param {Node} node The node to get the first child element of.
 * @return {Element} The first child node of {@code node} that is an element.
 */
goog.dom.getFirstElementChild = function(node) {
  if (goog.isDef(node.firstElementChild)) {
    return /** @type {!Element} */(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};


/**
 * Returns the last child node that is an element.
 * @param {Node} node The node to get the last child element of.
 * @return {Element} The last child node of {@code node} that is an element.
 */
goog.dom.getLastElementChild = function(node) {
  if (goog.isDef(node.lastElementChild)) {
    return /** @type {!Element} */(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};


/**
 * Returns the first next sibling that is an element.
 * @param {Node} node The node to get the next sibling element of.
 * @return {Element} The next sibling of {@code node} that is an element.
 */
goog.dom.getNextElementSibling = function(node) {
  if (goog.isDef(node.nextElementSibling)) {
    return /** @type {!Element} */(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};


/**
 * Returns the first previous sibling that is an element.
 * @param {Node} node The node to get the previous sibling element of.
 * @return {Element} The first previous sibling of {@code node} that is
 *     an element.
 */
goog.dom.getPreviousElementSibling = function(node) {
  if (goog.isDef(node.previousElementSibling)) {
    return /** @type {!Element} */(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};


/**
 * Returns the first node that is an element in the specified direction,
 * starting with {@code node}.
 * @param {Node} node The node to get the next element from.
 * @param {boolean} forward Whether to look forwards or backwards.
 * @return {Element} The first element.
 * @private
 */
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }

  return /** @type {Element} */ (node);
};


/**
 * Returns the next node in source order from the given node.
 * @param {Node} node The node.
 * @return {Node} The next node in the DOM tree, or null if this was the last
 *     node.
 */
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }

  if (node.firstChild) {
    return node.firstChild;
  }

  while (node && !node.nextSibling) {
    node = node.parentNode;
  }

  return node ? node.nextSibling : null;
};


/**
 * Returns the previous node in source order from the given node.
 * @param {Node} node The node.
 * @return {Node} The previous node in the DOM tree, or null if this was the
 *     first node.
 */
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }

  if (!node.previousSibling) {
    return node.parentNode;
  }

  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }

  return node;
};


/**
 * Whether the object looks like a DOM node.
 * @param {?} obj The object being tested for node likeness.
 * @return {boolean} Whether the object looks like a DOM node.
 */
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};


/**
 * Whether the object looks like an Element.
 * @param {?} obj The object being tested for Element likeness.
 * @return {boolean} Whether the object looks like an Element.
 */
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};


/**
 * Returns true if the specified value is a Window object. This includes the
 * global window for HTML pages, and iframe windows.
 * @param {?} obj Variable to test.
 * @return {boolean} Whether the variable is a window.
 */
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj['window'] == obj;
};


/**
 * Returns an element's parent, if it's an Element.
 * @param {Element} element The DOM element.
 * @return {Element} The parent, or null if not an Element.
 */
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE &&
        goog.userAgent.isVersionOrHigher('9') &&
        !goog.userAgent.isVersionOrHigher('10');
    // SVG elements in IE9 can't use the parentElement property.
    // goog.global['SVGElement'] is not defined in IE9 quirks mode.
    if (!(isIe9 && goog.global['SVGElement'] &&
        element instanceof goog.global['SVGElement'])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? /** @type {!Element} */ (parent) : null;
};


/**
 * Whether a node contains another node.
 * @param {Node} parent The node that should contain the other node.
 * @param {Node} descendant The node to test presence of.
 * @return {boolean} Whether the parent node contains the descendent node.
 */
goog.dom.contains = function(parent, descendant) {
  // We use browser specific methods for this if available since it is faster
  // that way.

  // IE DOM
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }

  // W3C DOM Level 3
  if (typeof parent.compareDocumentPosition != 'undefined') {
    return parent == descendant ||
        Boolean(parent.compareDocumentPosition(descendant) & 16);
  }

  // W3C DOM Level 1
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};


/**
 * Compares the document order of two nodes, returning 0 if they are the same
 * node, a negative number if node1 is before node2, and a positive number if
 * node2 is before node1.  Note that we compare the order the tags appear in the
 * document so in the tree <b><i>text</i></b> the B node is considered to be
 * before the I node.
 *
 * @param {Node} node1 The first node to compare.
 * @param {Node} node2 The second node to compare.
 * @return {number} 0 if the nodes are the same node, a negative number if node1
 *     is before node2, and a positive number if node2 is before node1.
 */
goog.dom.compareNodeOrder = function(node1, node2) {
  // Fall out quickly for equality.
  if (node1 == node2) {
    return 0;
  }

  // Use compareDocumentPosition where available
  if (node1.compareDocumentPosition) {
    // 4 is the bitmask for FOLLOWS.
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }

  // Special case for document nodes on IE 7 and 8.
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return -1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }

  // Process in IE using sourceIndex - we check to see if the first node has
  // a source index or if its parent has one.
  if ('sourceIndex' in node1 ||
      (node1.parentNode && 'sourceIndex' in node1.parentNode)) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;

    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;

      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }

      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }


      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }

      return (isElement1 ? node1.sourceIndex : parent1.sourceIndex) -
             (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }

  // For Safari, we compare ranges.
  var doc = goog.dom.getOwnerDocument(node1);

  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);

  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);

  return range1.compareBoundaryPoints(goog.global['Range'].START_TO_END,
      range2);
};


/**
 * Utility function to compare the position of two nodes, when
 * {@code textNode}'s parent is an ancestor of {@code node}.  If this entry
 * condition is not met, this function will attempt to reference a null object.
 * @param {!Node} textNode The textNode to compare.
 * @param {Node} node The node to compare.
 * @return {number} -1 if node is before textNode, +1 otherwise.
 * @private
 */
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    // If textNode is a child of node, then node comes first.
    return -1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};


/**
 * Utility function to compare the position of two nodes known to be non-equal
 * siblings.
 * @param {Node} node1 The first node to compare.
 * @param {!Node} node2 The second node to compare.
 * @return {number} -1 if node1 is before node2, +1 otherwise.
 * @private
 */
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while ((s = s.previousSibling)) {
    if (s == node1) {
      // We just found node1 before node2.
      return -1;
    }
  }

  // Since we didn't find it, node1 must be after node2.
  return 1;
};


/**
 * Find the deepest common ancestor of the given nodes.
 * @param {...Node} var_args The nodes to find a common ancestor of.
 * @return {Node} The common ancestor of the nodes, or null if there is none.
 *     null will only be returned if two or more of the nodes are from different
 *     documents.
 */
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else if (count == 1) {
    return arguments[0];
  }

  var paths = [];
  var minLength = Infinity;
  for (i = 0; i < count; i++) {
    // Compute the list of ancestors.
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }

    // Save the list for comparison.
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0; i < minLength; i++) {
    var first = paths[0][i];
    for (var j = 1; j < count; j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};


/**
 * Returns the owner document for a node.
 * @param {Node|Window} node The node to get the document for.
 * @return {!Document} The document owning the node.
 */
goog.dom.getOwnerDocument = function(node) {
  // TODO(nnaze): Update param signature to be non-nullable.
  goog.asserts.assert(node, 'Node cannot be null or undefined.');
  return /** @type {!Document} */ (
      node.nodeType == goog.dom.NodeType.DOCUMENT ? node :
      node.ownerDocument || node.document);
};


/**
 * Cross-browser function for getting the document element of a frame or iframe.
 * @param {Element} frame Frame element.
 * @return {!Document} The frame content document.
 */
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};


/**
 * Cross-browser function for getting the window of a frame or iframe.
 * @param {Element} frame Frame element.
 * @return {Window} The window associated with the given frame.
 */
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow ||
      goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};


/**
 * Sets the text content of a node, with cross-browser support.
 * @param {Node} node The node to change the text content of.
 * @param {string|number} text The value that should replace the node's content.
 */
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null,
      'goog.dom.setTextContent expects a non-null value for node');

  if ('textContent' in node) {
    node.textContent = text;
  } else if (node.nodeType == goog.dom.NodeType.TEXT) {
    node.data = text;
  } else if (node.firstChild &&
             node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
    // If the first child is a text node we just change its data and remove the
    // rest of the children.
    while (node.lastChild != node.firstChild) {
      node.removeChild(node.lastChild);
    }
    node.firstChild.data = text;
  } else {
    goog.dom.removeChildren(node);
    var doc = goog.dom.getOwnerDocument(node);
    node.appendChild(doc.createTextNode(String(text)));
  }
};


/**
 * Gets the outerHTML of a node, which islike innerHTML, except that it
 * actually contains the HTML of the node itself.
 * @param {Element} element The element to get the HTML of.
 * @return {string} The outerHTML of the given element.
 */
goog.dom.getOuterHtml = function(element) {
  // IE, Opera and WebKit all have outerHTML.
  if ('outerHTML' in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement(goog.dom.TagName.DIV);
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};


/**
 * Finds the first descendant node that matches the filter function, using
 * a depth first search. This function offers the most general purpose way
 * of finding a matching element. You may also wish to consider
 * {@code goog.dom.query} which can express many matching criteria using
 * CSS selector expressions. These expressions often result in a more
 * compact representation of the desired result.
 * @see goog.dom.query
 *
 * @param {Node} root The root of the tree to search.
 * @param {function(Node) : boolean} p The filter function.
 * @return {Node|undefined} The found node or undefined if none is found.
 */
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};


/**
 * Finds all the descendant nodes that match the filter function, using a
 * a depth first search. This function offers the most general-purpose way
 * of finding a set of matching elements. You may also wish to consider
 * {@code goog.dom.query} which can express many matching criteria using
 * CSS selector expressions. These expressions often result in a more
 * compact representation of the desired result.

 * @param {Node} root The root of the tree to search.
 * @param {function(Node) : boolean} p The filter function.
 * @return {!Array<!Node>} The found nodes or an empty array if none are found.
 */
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};


/**
 * Finds the first or all the descendant nodes that match the filter function,
 * using a depth first search.
 * @param {Node} root The root of the tree to search.
 * @param {function(Node) : boolean} p The filter function.
 * @param {!Array<!Node>} rv The found nodes are added to this array.
 * @param {boolean} findOne If true we exit after the first found node.
 * @return {boolean} Whether the search is complete or not. True in case findOne
 *     is true and the node is found. False otherwise.
 * @private
 */
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};


/**
 * Map of tags whose content to ignore when calculating text length.
 * @private {!Object<string, number>}
 * @const
 */
goog.dom.TAGS_TO_IGNORE_ = {
  'SCRIPT': 1,
  'STYLE': 1,
  'HEAD': 1,
  'IFRAME': 1,
  'OBJECT': 1
};


/**
 * Map of tags which have predefined values with regard to whitespace.
 * @private {!Object<string, string>}
 * @const
 */
goog.dom.PREDEFINED_TAG_VALUES_ = {'IMG': ' ', 'BR': '\n'};


/**
 * Returns true if the element has a tab index that allows it to receive
 * keyboard focus (tabIndex >= 0), false otherwise.  Note that some elements
 * natively support keyboard focus, even if they have no tab index.
 * @param {!Element} element Element to check.
 * @return {boolean} Whether the element has a tab index that allows keyboard
 *     focus.
 * @see http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
 */
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) &&
         goog.dom.isTabIndexFocusable_(element);
};


/**
 * Enables or disables keyboard focus support on the element via its tab index.
 * Only elements for which {@link goog.dom.isFocusableTabIndex} returns true
 * (or elements that natively support keyboard focus, like form elements) can
 * receive keyboard focus.  See http://go/tabindex for more info.
 * @param {Element} element Element whose tab index is to be changed.
 * @param {boolean} enable Whether to set or remove a tab index on the element
 *     that supports keyboard focus.
 */
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    // Set tabIndex to -1 first, then remove it. This is a workaround for
    // Safari (confirmed in version 4 on Windows). When removing the attribute
    // without setting it to -1 first, the element remains keyboard focusable
    // despite not having a tabIndex attribute anymore.
    element.tabIndex = -1;
    element.removeAttribute('tabIndex'); // Must be camelCase!
  }
};


/**
 * Returns true if the element can be focused, i.e. it has a tab index that
 * allows it to receive keyboard focus (tabIndex >= 0), or it is an element
 * that natively supports keyboard focus.
 * @param {!Element} element Element to check.
 * @return {boolean} Whether the element allows keyboard focus.
 */
goog.dom.isFocusable = function(element) {
  var focusable;
  // Some elements can have unspecified tab index and still receive focus.
  if (goog.dom.nativelySupportsFocus_(element)) {
    // Make sure the element is not disabled ...
    focusable = !element.disabled &&
        // ... and if a tab index is specified, it allows focus.
        (!goog.dom.hasSpecifiedTabIndex_(element) ||
         goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }

  // IE requires elements to be visible in order to focus them.
  return focusable && goog.userAgent.IE ?
             goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};


/**
 * Returns true if the element has a specified tab index.
 * @param {!Element} element Element to check.
 * @return {boolean} Whether the element has a specified tab index.
 * @private
 */
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  // IE returns 0 for an unset tabIndex, so we must use getAttributeNode(),
  // which returns an object with a 'specified' property if tabIndex is
  // specified.  This works on other browsers, too.
  var attrNode = element.getAttributeNode('tabindex'); // Must be lowercase!
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};


/**
 * Returns true if the element's tab index allows the element to be focused.
 * @param {!Element} element Element to check.
 * @return {boolean} Whether the element's tab index allows focus.
 * @private
 */
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  // NOTE: IE9 puts tabIndex in 16-bit int, e.g. -2 is 65534.
  return goog.isNumber(index) && index >= 0 && index < 32768;
};


/**
 * Returns true if the element is focusable even when tabIndex is not set.
 * @param {!Element} element Element to check.
 * @return {boolean} Whether the element natively supports focus.
 * @private
 */
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A ||
         element.tagName == goog.dom.TagName.INPUT ||
         element.tagName == goog.dom.TagName.TEXTAREA ||
         element.tagName == goog.dom.TagName.SELECT ||
         element.tagName == goog.dom.TagName.BUTTON;
};


/**
 * Returns true if the element has a bounding rectangle that would be visible
 * (i.e. its width and height are greater than zero).
 * @param {!Element} element Element to check.
 * @return {boolean} Whether the element has a non-zero bounding rectangle.
 * @private
 */
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element['getBoundingClientRect']) ?
      element.getBoundingClientRect() :
      {'height': element.offsetHeight, 'width': element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};


/**
 * Returns the text content of the current node, without markup and invisible
 * symbols. New lines are stripped and whitespace is collapsed,
 * such that each character would be visible.
 *
 * In browsers that support it, innerText is used.  Other browsers attempt to
 * simulate it via node traversal.  Line breaks are canonicalized in IE.
 *
 * @param {Node} node The node from which we are getting content.
 * @return {string} The text content.
 */
goog.dom.getTextContent = function(node) {
  var textContent;
  // Note(arv): IE9, Opera, and Safari 3 support innerText but they include
  // text nodes in script tags. So we revert to use a user agent test here.
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && ('innerText' in node)) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
    // Unfortunately .innerText() returns text with &shy; symbols
    // We need to filter it out and then remove duplicate whitespaces
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join('');
  }

  // Strip &shy; entities. goog.format.insertWordBreaks inserts them in Opera.
  textContent = textContent.replace(/ \xAD /g, ' ').replace(/\xAD/g, '');
  // Strip &#8203; entities. goog.format.insertWordBreaks inserts them in IE8.
  textContent = textContent.replace(/\u200B/g, '');

  // Skip this replacement on old browsers with working innerText, which
  // automatically turns &nbsp; into ' ' and / +/ into ' ' when reading
  // innerText.
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, ' ');
  }
  if (textContent != ' ') {
    textContent = textContent.replace(/^\s*/, '');
  }

  return textContent;
};


/**
 * Returns the text content of the current node, without markup.
 *
 * Unlike {@code getTextContent} this method does not collapse whitespaces
 * or normalize lines breaks.
 *
 * @param {Node} node The node from which we are getting content.
 * @return {string} The raw text content.
 */
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);

  return buf.join('');
};


/**
 * Recursive support function for text content retrieval.
 *
 * @param {Node} node The node from which we are getting content.
 * @param {Array<string>} buf string buffer.
 * @param {boolean} normalizeWhitespace Whether to normalize whitespace.
 * @private
 */
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    // ignore certain tags
  } else if (node.nodeType == goog.dom.NodeType.TEXT) {
    if (normalizeWhitespace) {
      buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ''));
    } else {
      buf.push(node.nodeValue);
    }
  } else if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
    buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
  } else {
    var child = node.firstChild;
    while (child) {
      goog.dom.getTextContent_(child, buf, normalizeWhitespace);
      child = child.nextSibling;
    }
  }
};


/**
 * Returns the text length of the text contained in a node, without markup. This
 * is equivalent to the selection length if the node was selected, or the number
 * of cursor movements to traverse the node. Images & BRs take one space.  New
 * lines are ignored.
 *
 * @param {Node} node The node whose text content length is being calculated.
 * @return {number} The length of {@code node}'s text content.
 */
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};


/**
 * Returns the text offset of a node relative to one of its ancestors. The text
 * length is the same as the length calculated by goog.dom.getNodeTextLength.
 *
 * @param {Node} node The node whose offset is being calculated.
 * @param {Node=} opt_offsetParent The node relative to which the offset will
 *     be calculated. Defaults to the node's owner document's body.
 * @return {number} The text offset.
 */
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while ((cur = cur.previousSibling)) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  // Trim left to deal with FF cases when there might be line breaks and empty
  // nodes at the front of the text
  return goog.string.trimLeft(buf.join('')).replace(/ +/g, ' ').length;
};


/**
 * Returns the node at a given offset in a parent node.  If an object is
 * provided for the optional third parameter, the node and the remainder of the
 * offset will stored as properties of this object.
 * @param {Node} parent The parent node.
 * @param {number} offset The offset into the parent node.
 * @param {Object=} opt_result Object to be used to store the return value. The
 *     return value will be stored in the form {node: Node, remainder: number}
 *     if this object is provided.
 * @return {Node} The node at the given offset.
 */
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
      // ignore certain tags
    } else if (cur.nodeType == goog.dom.NodeType.TEXT) {
      var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, '').replace(/ +/g, ' ');
      pos += text.length;
    } else if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
      pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
    } else {
      for (var i = cur.childNodes.length - 1; i >= 0; i--) {
        stack.push(cur.childNodes[i]);
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }

  return cur;
};


/**
 * Returns true if the object is a {@code NodeList}.  To qualify as a NodeList,
 * the object must have a numeric length property and an item function (which
 * has type 'string' on IE for some reason).
 * @param {Object} val Object to test.
 * @return {boolean} Whether the object is a NodeList.
 */
goog.dom.isNodeList = function(val) {
  // TODO(attila): Now the isNodeList is part of goog.dom we can use
  // goog.userAgent to make this simpler.
  // A NodeList must have a length property of type 'number' on all platforms.
  if (val && typeof val.length == 'number') {
    // A NodeList is an object everywhere except Safari, where it's a function.
    if (goog.isObject(val)) {
      // A NodeList must have an item function (on non-IE platforms) or an item
      // property of type 'string' (on IE).
      return typeof val.item == 'function' || typeof val.item == 'string';
    } else if (goog.isFunction(val)) {
      // On Safari, a NodeList is a function with an item property that is also
      // a function.
      return typeof val.item == 'function';
    }
  }

  // Not a NodeList.
  return false;
};


/**
 * Walks up the DOM hierarchy returning the first ancestor that has the passed
 * tag name and/or class name. If the passed element matches the specified
 * criteria, the element itself is returned.
 * @param {Node} element The DOM node to start with.
 * @param {?(goog.dom.TagName|string)=} opt_tag The tag name to match (or
 *     null/undefined to match only based on class name).
 * @param {?string=} opt_class The class name to match (or null/undefined to
 *     match only based on tag name).
 * @param {number=} opt_maxSearchSteps Maximum number of levels to search up the
 *     dom.
 * @return {Element} The first ancestor that matches the passed criteria, or
 *     null if no match is found.
 */
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class,
    opt_maxSearchSteps) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return /** @type {Element} */ (goog.dom.getAncestor(element,
      function(node) {
        return (!tagName || node.nodeName == tagName) &&
               (!opt_class || goog.isString(node.className) &&
                   goog.array.contains(node.className.split(/\s+/), opt_class));
      }, true, opt_maxSearchSteps));
};


/**
 * Walks up the DOM hierarchy returning the first ancestor that has the passed
 * class name. If the passed element matches the specified criteria, the
 * element itself is returned.
 * @param {Node} element The DOM node to start with.
 * @param {string} className The class name to match.
 * @param {number=} opt_maxSearchSteps Maximum number of levels to search up the
 *     dom.
 * @return {Element} The first ancestor that matches the passed criteria, or
 *     null if none match.
 */
goog.dom.getAncestorByClass = function(element, className, opt_maxSearchSteps) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className,
      opt_maxSearchSteps);
};


/**
 * Walks up the DOM hierarchy returning the first ancestor that passes the
 * matcher function.
 * @param {Node} element The DOM node to start with.
 * @param {function(Node) : boolean} matcher A function that returns true if the
 *     passed node matches the desired criteria.
 * @param {boolean=} opt_includeNode If true, the node itself is included in
 *     the search (the first call to the matcher will pass startElement as
 *     the node to test).
 * @param {number=} opt_maxSearchSteps Maximum number of levels to search up the
 *     dom.
 * @return {Node} DOM node that matched the matcher, or null if there was
 *     no match.
 */
goog.dom.getAncestor = function(
    element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    goog.asserts.assert(element.name != 'parentNode');
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  // Reached the root of the DOM without a match
  return null;
};


/**
 * Determines the active element in the given document.
 * @param {Document} doc The document to look in.
 * @return {Element} The active element.
 */
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
    // NOTE(nicksantos): Sometimes, evaluating document.activeElement in IE
    // throws an exception. I'm not 100% sure why, but I suspect it chokes
    // on document.activeElement if the activeElement has been recently
    // removed from the DOM by a JS operation.
    //
    // We assume that an exception here simply means
    // "there is no active element."
  }

  return null;
};


/**
 * Gives the current devicePixelRatio.
 *
 * By default, this is the value of window.devicePixelRatio (which should be
 * preferred if present).
 *
 * If window.devicePixelRatio is not present, the ratio is calculated with
 * window.matchMedia, if present. Otherwise, gives 1.0.
 *
 * Some browsers (including Chrome) consider the browser zoom level in the pixel
 * ratio, so the value may change across multiple calls.
 *
 * @return {number} The number of actual pixels per virtual pixel.
 */
goog.dom.getPixelRatio = function() {
  var win = goog.dom.getWindow();
  if (goog.isDef(win.devicePixelRatio)) {
    return win.devicePixelRatio;
  } else if (win.matchMedia) {
    return goog.dom.matchesPixelRatio_(.75) ||
           goog.dom.matchesPixelRatio_(1.5) ||
           goog.dom.matchesPixelRatio_(2) ||
           goog.dom.matchesPixelRatio_(3) || 1;
  }
  return 1;
};


/**
 * Calculates a mediaQuery to check if the current device supports the
 * given actual to virtual pixel ratio.
 * @param {number} pixelRatio The ratio of actual pixels to virtual pixels.
 * @return {number} pixelRatio if applicable, otherwise 0.
 * @private
 */
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = ('(-webkit-min-device-pixel-ratio: ' + pixelRatio + '),' +
               '(min--moz-device-pixel-ratio: ' + pixelRatio + '),' +
               '(min-resolution: ' + pixelRatio + 'dppx)');
  return win.matchMedia(query).matches ? pixelRatio : 0;
};



/**
 * Create an instance of a DOM helper with a new document object.
 * @param {Document=} opt_document Document object to associate with this
 *     DOM helper.
 * @constructor
 */
goog.dom.DomHelper = function(opt_document) {
  /**
   * Reference to the document object to use
   * @type {!Document}
   * @private
   */
  this.document_ = opt_document || goog.global.document || document;
};


/**
 * Gets the dom helper object for the document where the element resides.
 * @param {Node=} opt_node If present, gets the DomHelper for this node.
 * @return {!goog.dom.DomHelper} The DomHelper.
 */
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;


/**
 * Sets the document object.
 * @param {!Document} document Document object.
 */
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};


/**
 * Gets the document object being used by the dom library.
 * @return {!Document} Document object.
 */
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};


/**
 * Alias for {@code getElementById}. If a DOM node is passed in then we just
 * return that.
 * @param {string|Element} element Element ID or a DOM node.
 * @return {Element} The element with the given ID, or the node passed in.
 */
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};


/**
 * Gets an element by id, asserting that the element is found.
 *
 * This is used when an element is expected to exist, and should fail with
 * an assertion error if it does not (if assertions are enabled).
 *
 * @param {string} id Element ID.
 * @return {!Element} The element with the given ID, if it exists.
 */
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};


/**
 * Alias for {@code getElement}.
 * @param {string|Element} element Element ID or a DOM node.
 * @return {Element} The element with the given ID, or the node passed in.
 * @deprecated Use {@link goog.dom.DomHelper.prototype.getElement} instead.
 */
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;


/**
 * Looks up elements by both tag and class name, using browser native functions
 * ({@code querySelectorAll}, {@code getElementsByTagName} or
 * {@code getElementsByClassName}) where possible. The returned array is a live
 * NodeList or a static list depending on the code path taken.
 *
 * @see goog.dom.query
 *
 * @param {?string=} opt_tag Element tag name or * for all tags.
 * @param {?string=} opt_class Optional class name.
 * @param {(Document|Element)=} opt_el Optional element to look in.
 * @return { {length: number} } Array-like list of elements (only a length
 *     property and numerical indices are guaranteed to exist).
 */
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag,
                                                                     opt_class,
                                                                     opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag,
                                                opt_class, opt_el);
};


/**
 * Returns an array of all the elements with the provided className.
 * @see {goog.dom.query}
 * @param {string} className the name of the class to look for.
 * @param {Element|Document=} opt_el Optional element to look in.
 * @return { {length: number} } The items found with the class name provided.
 */
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};


/**
 * Returns the first element we find matching the provided class name.
 * @see {goog.dom.query}
 * @param {string} className the name of the class to look for.
 * @param {(Element|Document)=} opt_el Optional element to look in.
 * @return {Element} The first item found with the class name provided.
 */
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};


/**
 * Ensures an element with the given className exists, and then returns the
 * first element with the provided className.
 * @see {goog.dom.query}
 * @param {string} className the name of the class to look for.
 * @param {(!Element|!Document)=} opt_root Optional element or document to look
 *     in.
 * @return {!Element} The first item found with the class name provided.
 * @throws {goog.asserts.AssertionError} Thrown if no element is found.
 */
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className,
                                                                  opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};


/**
 * Alias for {@code getElementsByTagNameAndClass}.
 * @deprecated Use DomHelper getElementsByTagNameAndClass.
 * @see goog.dom.query
 *
 * @param {?string=} opt_tag Element tag name.
 * @param {?string=} opt_class Optional class name.
 * @param {Element=} opt_el Optional element to look in.
 * @return { {length: number} } Array-like list of elements (only a length
 *     property and numerical indices are guaranteed to exist).
 */
goog.dom.DomHelper.prototype.$$ =
    goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;


/**
 * Sets a number of properties on a node.
 * @param {Element} element DOM node to set properties on.
 * @param {Object} properties Hash of property:value pairs.
 */
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;


/**
 * Gets the dimensions of the viewport.
 * @param {Window=} opt_window Optional window element to test. Defaults to
 *     the window of the Dom Helper.
 * @return {!goog.math.Size} Object with values 'width' and 'height'.
 */
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  // TODO(arv): This should not take an argument. That breaks the rule of a
  // a DomHelper representing a single frame/window/document.
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};


/**
 * Calculates the height of the document.
 *
 * @return {number} The height of the document.
 */
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};


/**
 * Typedef for use with goog.dom.createDom and goog.dom.append.
 * @typedef {Object|string|Array|NodeList}
 */
goog.dom.Appendable;


/**
 * Returns a dom node with a set of attributes.  This function accepts varargs
 * for subsequent nodes to be added.  Subsequent nodes will be added to the
 * first node as childNodes.
 *
 * So:
 * <code>createDom('div', null, createDom('p'), createDom('p'));</code>
 * would return a div with two child paragraphs
 *
 * An easy way to move all child nodes of an existing element to a new parent
 * element is:
 * <code>createDom('div', null, oldElement.childNodes);</code>
 * which will remove all child nodes from the old element and add them as
 * child nodes of the new DIV.
 *
 * @param {string} tagName Tag to create.
 * @param {Object|string=} opt_attributes If object, then a map of name-value
 *     pairs for attributes. If a string, then this is the className of the new
 *     element.
 * @param {...goog.dom.Appendable} var_args Further DOM nodes or
 *     strings for text nodes. If one of the var_args is an array or
 *     NodeList, its elements will be added as childNodes instead.
 * @return {!Element} Reference to a DOM node.
 */
goog.dom.DomHelper.prototype.createDom = function(tagName,
                                                  opt_attributes,
                                                  var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};


/**
 * Alias for {@code createDom}.
 * @param {string} tagName Tag to create.
 * @param {(Object|string)=} opt_attributes If object, then a map of name-value
 *     pairs for attributes. If a string, then this is the className of the new
 *     element.
 * @param {...goog.dom.Appendable} var_args Further DOM nodes or strings for
 *     text nodes.  If one of the var_args is an array, its children will be
 *     added as childNodes instead.
 * @return {!Element} Reference to a DOM node.
 * @deprecated Use {@link goog.dom.DomHelper.prototype.createDom} instead.
 */
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;


/**
 * Creates a new element.
 * @param {string} name Tag name.
 * @return {!Element} The new element.
 */
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};


/**
 * Creates a new text node.
 * @param {number|string} content Content.
 * @return {!Text} The new text node.
 */
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};


/**
 * Create a table.
 * @param {number} rows The number of rows in the table.  Must be >= 1.
 * @param {number} columns The number of columns in the table.  Must be >= 1.
 * @param {boolean=} opt_fillWithNbsp If true, fills table entries with
 *     {@code goog.string.Unicode.NBSP} characters.
 * @return {!HTMLElement} The created table.
 */
goog.dom.DomHelper.prototype.createTable = function(rows, columns,
    opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns,
      !!opt_fillWithNbsp);
};


/**
 * Converts an HTML into a node or a document fragment. A single Node is used if
 * {@code html} only generates a single node. If {@code html} generates multiple
 * nodes then these are put inside a {@code DocumentFragment}.
 * @param {!goog.html.SafeHtml} html The HTML markup to convert.
 * @return {!Node} The resulting node.
 */
goog.dom.DomHelper.prototype.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(this.document_, html);
};


/**
 * Converts an HTML string into a node or a document fragment.  A single Node
 * is used if the {@code htmlString} only generates a single node.  If the
 * {@code htmlString} generates multiple nodes then these are put inside a
 * {@code DocumentFragment}.
 *
 * @param {string} htmlString The HTML string to convert.
 * @return {!Node} The resulting node.
 */
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};


/**
 * Returns true if the browser is in "CSS1-compatible" (standards-compliant)
 * mode, false otherwise.
 * @return {boolean} True if in CSS1-compatible mode.
 */
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};


/**
 * Gets the window object associated with the document.
 * @return {!Window} The window associated with the given document.
 */
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};


/**
 * Gets the document scroll element.
 * @return {!Element} Scrolling element.
 */
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};


/**
 * Gets the document scroll distance as a coordinate object.
 * @return {!goog.math.Coordinate} Object with properties 'x' and 'y'.
 */
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};


/**
 * Determines the active element in the given document.
 * @param {Document=} opt_doc The document to look in.
 * @return {Element} The active element.
 */
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};


/**
 * Appends a child to a node.
 * @param {Node} parent Parent.
 * @param {Node} child Child.
 */
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;


/**
 * Appends a node with text or other nodes.
 * @param {!Node} parent The node to append nodes to.
 * @param {...goog.dom.Appendable} var_args The things to append to the node.
 *     If this is a Node it is appended as is.
 *     If this is a string then a text node is appended.
 *     If this is an array like object then fields 0 to length - 1 are appended.
 */
goog.dom.DomHelper.prototype.append = goog.dom.append;


/**
 * Determines if the given node can contain children, intended to be used for
 * HTML generation.
 *
 * @param {Node} node The node to check.
 * @return {boolean} Whether the node can contain children.
 */
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;


/**
 * Removes all the child nodes on a DOM node.
 * @param {Node} node Node to remove children from.
 */
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;


/**
 * Inserts a new node before an existing reference node (i.e., as the previous
 * sibling). If the reference node has no parent, then does nothing.
 * @param {Node} newNode Node to insert.
 * @param {Node} refNode Reference node to insert before.
 */
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;


/**
 * Inserts a new node after an existing reference node (i.e., as the next
 * sibling). If the reference node has no parent, then does nothing.
 * @param {Node} newNode Node to insert.
 * @param {Node} refNode Reference node to insert after.
 */
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;


/**
 * Insert a child at a given index. If index is larger than the number of child
 * nodes that the parent currently has, the node is inserted as the last child
 * node.
 * @param {Element} parent The element into which to insert the child.
 * @param {Node} child The element to insert.
 * @param {number} index The index at which to insert the new child node. Must
 *     not be negative.
 */
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;


/**
 * Removes a node from its parent.
 * @param {Node} node The node to remove.
 * @return {Node} The node removed if removed; else, null.
 */
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;


/**
 * Replaces a node in the DOM tree. Will do nothing if {@code oldNode} has no
 * parent.
 * @param {Node} newNode Node to insert.
 * @param {Node} oldNode Node to replace.
 */
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;


/**
 * Flattens an element. That is, removes it and replace it with its children.
 * @param {Element} element The element to flatten.
 * @return {Element|undefined} The original element, detached from the document
 *     tree, sans children, or undefined if the element was already not in the
 *     document.
 */
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;


/**
 * Returns an array containing just the element children of the given element.
 * @param {Element} element The element whose element children we want.
 * @return {!(Array|NodeList)} An array or array-like list of just the element
 *     children of the given element.
 */
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;


/**
 * Returns the first child node that is an element.
 * @param {Node} node The node to get the first child element of.
 * @return {Element} The first child node of {@code node} that is an element.
 */
goog.dom.DomHelper.prototype.getFirstElementChild =
    goog.dom.getFirstElementChild;


/**
 * Returns the last child node that is an element.
 * @param {Node} node The node to get the last child element of.
 * @return {Element} The last child node of {@code node} that is an element.
 */
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;


/**
 * Returns the first next sibling that is an element.
 * @param {Node} node The node to get the next sibling element of.
 * @return {Element} The next sibling of {@code node} that is an element.
 */
goog.dom.DomHelper.prototype.getNextElementSibling =
    goog.dom.getNextElementSibling;


/**
 * Returns the first previous sibling that is an element.
 * @param {Node} node The node to get the previous sibling element of.
 * @return {Element} The first previous sibling of {@code node} that is
 *     an element.
 */
goog.dom.DomHelper.prototype.getPreviousElementSibling =
    goog.dom.getPreviousElementSibling;


/**
 * Returns the next node in source order from the given node.
 * @param {Node} node The node.
 * @return {Node} The next node in the DOM tree, or null if this was the last
 *     node.
 */
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;


/**
 * Returns the previous node in source order from the given node.
 * @param {Node} node The node.
 * @return {Node} The previous node in the DOM tree, or null if this was the
 *     first node.
 */
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;


/**
 * Whether the object looks like a DOM node.
 * @param {?} obj The object being tested for node likeness.
 * @return {boolean} Whether the object looks like a DOM node.
 */
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;


/**
 * Whether the object looks like an Element.
 * @param {?} obj The object being tested for Element likeness.
 * @return {boolean} Whether the object looks like an Element.
 */
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;


/**
 * Returns true if the specified value is a Window object. This includes the
 * global window for HTML pages, and iframe windows.
 * @param {?} obj Variable to test.
 * @return {boolean} Whether the variable is a window.
 */
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;


/**
 * Returns an element's parent, if it's an Element.
 * @param {Element} element The DOM element.
 * @return {Element} The parent, or null if not an Element.
 */
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;


/**
 * Whether a node contains another node.
 * @param {Node} parent The node that should contain the other node.
 * @param {Node} descendant The node to test presence of.
 * @return {boolean} Whether the parent node contains the descendent node.
 */
goog.dom.DomHelper.prototype.contains = goog.dom.contains;


/**
 * Compares the document order of two nodes, returning 0 if they are the same
 * node, a negative number if node1 is before node2, and a positive number if
 * node2 is before node1.  Note that we compare the order the tags appear in the
 * document so in the tree <b><i>text</i></b> the B node is considered to be
 * before the I node.
 *
 * @param {Node} node1 The first node to compare.
 * @param {Node} node2 The second node to compare.
 * @return {number} 0 if the nodes are the same node, a negative number if node1
 *     is before node2, and a positive number if node2 is before node1.
 */
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;


/**
 * Find the deepest common ancestor of the given nodes.
 * @param {...Node} var_args The nodes to find a common ancestor of.
 * @return {Node} The common ancestor of the nodes, or null if there is none.
 *     null will only be returned if two or more of the nodes are from different
 *     documents.
 */
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;


/**
 * Returns the owner document for a node.
 * @param {Node} node The node to get the document for.
 * @return {!Document} The document owning the node.
 */
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;


/**
 * Cross browser function for getting the document element of an iframe.
 * @param {Element} iframe Iframe element.
 * @return {!Document} The frame content document.
 */
goog.dom.DomHelper.prototype.getFrameContentDocument =
    goog.dom.getFrameContentDocument;


/**
 * Cross browser function for getting the window of a frame or iframe.
 * @param {Element} frame Frame element.
 * @return {Window} The window associated with the given frame.
 */
goog.dom.DomHelper.prototype.getFrameContentWindow =
    goog.dom.getFrameContentWindow;


/**
 * Sets the text content of a node, with cross-browser support.
 * @param {Node} node The node to change the text content of.
 * @param {string|number} text The value that should replace the node's content.
 */
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;


/**
 * Gets the outerHTML of a node, which islike innerHTML, except that it
 * actually contains the HTML of the node itself.
 * @param {Element} element The element to get the HTML of.
 * @return {string} The outerHTML of the given element.
 */
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;


/**
 * Finds the first descendant node that matches the filter function. This does
 * a depth first search.
 * @param {Node} root The root of the tree to search.
 * @param {function(Node) : boolean} p The filter function.
 * @return {Node|undefined} The found node or undefined if none is found.
 */
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;


/**
 * Finds all the descendant nodes that matches the filter function. This does a
 * depth first search.
 * @param {Node} root The root of the tree to search.
 * @param {function(Node) : boolean} p The filter function.
 * @return {Array<Node>} The found nodes or an empty array if none are found.
 */
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;


/**
 * Returns true if the element has a tab index that allows it to receive
 * keyboard focus (tabIndex >= 0), false otherwise.  Note that some elements
 * natively support keyboard focus, even if they have no tab index.
 * @param {!Element} element Element to check.
 * @return {boolean} Whether the element has a tab index that allows keyboard
 *     focus.
 */
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;


/**
 * Enables or disables keyboard focus support on the element via its tab index.
 * Only elements for which {@link goog.dom.isFocusableTabIndex} returns true
 * (or elements that natively support keyboard focus, like form elements) can
 * receive keyboard focus.  See http://go/tabindex for more info.
 * @param {Element} element Element whose tab index is to be changed.
 * @param {boolean} enable Whether to set or remove a tab index on the element
 *     that supports keyboard focus.
 */
goog.dom.DomHelper.prototype.setFocusableTabIndex =
    goog.dom.setFocusableTabIndex;


/**
 * Returns true if the element can be focused, i.e. it has a tab index that
 * allows it to receive keyboard focus (tabIndex >= 0), or it is an element
 * that natively supports keyboard focus.
 * @param {!Element} element Element to check.
 * @return {boolean} Whether the element allows keyboard focus.
 */
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;


/**
 * Returns the text contents of the current node, without markup. New lines are
 * stripped and whitespace is collapsed, such that each character would be
 * visible.
 *
 * In browsers that support it, innerText is used.  Other browsers attempt to
 * simulate it via node traversal.  Line breaks are canonicalized in IE.
 *
 * @param {Node} node The node from which we are getting content.
 * @return {string} The text content.
 */
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;


/**
 * Returns the text length of the text contained in a node, without markup. This
 * is equivalent to the selection length if the node was selected, or the number
 * of cursor movements to traverse the node. Images & BRs take one space.  New
 * lines are ignored.
 *
 * @param {Node} node The node whose text content length is being calculated.
 * @return {number} The length of {@code node}'s text content.
 */
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;


/**
 * Returns the text offset of a node relative to one of its ancestors. The text
 * length is the same as the length calculated by
 * {@code goog.dom.getNodeTextLength}.
 *
 * @param {Node} node The node whose offset is being calculated.
 * @param {Node=} opt_offsetParent Defaults to the node's owner document's body.
 * @return {number} The text offset.
 */
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;


/**
 * Returns the node at a given offset in a parent node.  If an object is
 * provided for the optional third parameter, the node and the remainder of the
 * offset will stored as properties of this object.
 * @param {Node} parent The parent node.
 * @param {number} offset The offset into the parent node.
 * @param {Object=} opt_result Object to be used to store the return value. The
 *     return value will be stored in the form {node: Node, remainder: number}
 *     if this object is provided.
 * @return {Node} The node at the given offset.
 */
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;


/**
 * Returns true if the object is a {@code NodeList}.  To qualify as a NodeList,
 * the object must have a numeric length property and an item function (which
 * has type 'string' on IE for some reason).
 * @param {Object} val Object to test.
 * @return {boolean} Whether the object is a NodeList.
 */
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;


/**
 * Walks up the DOM hierarchy returning the first ancestor that has the passed
 * tag name and/or class name. If the passed element matches the specified
 * criteria, the element itself is returned.
 * @param {Node} element The DOM node to start with.
 * @param {?(goog.dom.TagName|string)=} opt_tag The tag name to match (or
 *     null/undefined to match only based on class name).
 * @param {?string=} opt_class The class name to match (or null/undefined to
 *     match only based on tag name).
 * @param {number=} opt_maxSearchSteps Maximum number of levels to search up the
 *     dom.
 * @return {Element} The first ancestor that matches the passed criteria, or
 *     null if no match is found.
 */
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass =
    goog.dom.getAncestorByTagNameAndClass;


/**
 * Walks up the DOM hierarchy returning the first ancestor that has the passed
 * class name. If the passed element matches the specified criteria, the
 * element itself is returned.
 * @param {Node} element The DOM node to start with.
 * @param {string} class The class name to match.
 * @param {number=} opt_maxSearchSteps Maximum number of levels to search up the
 *     dom.
 * @return {Element} The first ancestor that matches the passed criteria, or
 *     null if none match.
 */
goog.dom.DomHelper.prototype.getAncestorByClass =
    goog.dom.getAncestorByClass;


/**
 * Walks up the DOM hierarchy returning the first ancestor that passes the
 * matcher function.
 * @param {Node} element The DOM node to start with.
 * @param {function(Node) : boolean} matcher A function that returns true if the
 *     passed node matches the desired criteria.
 * @param {boolean=} opt_includeNode If true, the node itself is included in
 *     the search (the first call to the matcher will pass startElement as
 *     the node to test).
 * @param {number=} opt_maxSearchSteps Maximum number of levels to search up the
 *     dom.
 * @return {Node} DOM node that matched the matcher, or null if there was
 *     no match.
 */
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A utility to load JavaScript files via DOM script tags.
 * Refactored from goog.net.Jsonp. Works cross-domain.
 *
 */

goog.provide('goog.net.jsloader');
goog.provide('goog.net.jsloader.Error');
goog.provide('goog.net.jsloader.ErrorCode');
goog.provide('goog.net.jsloader.Options');

goog.require('goog.array');
goog.require('goog.async.Deferred');
goog.require('goog.debug.Error');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.object');


/**
 * The name of the property of goog.global under which the JavaScript
 * verification object is stored by the loaded script.
 * @private {string}
 */
goog.net.jsloader.GLOBAL_VERIFY_OBJS_ = 'closure_verification';


/**
 * The default length of time, in milliseconds, we are prepared to wait for a
 * load request to complete.
 * @type {number}
 */
goog.net.jsloader.DEFAULT_TIMEOUT = 5000;


/**
 * Optional parameters for goog.net.jsloader.send.
 * timeout: The length of time, in milliseconds, we are prepared to wait
 *     for a load request to complete. Default it 5 seconds.
 * document: The HTML document under which to load the JavaScript. Default is
 *     the current document.
 * cleanupWhenDone: If true clean up the script tag after script completes to
 *     load. This is important if you just want to read data from the JavaScript
 *     and then throw it away. Default is false.
 * attributes: Additional attributes to set on the script tag.
 *
 * @typedef {{
 *   timeout: (number|undefined),
 *   document: (HTMLDocument|undefined),
 *   cleanupWhenDone: (boolean|undefined),
 *   attributes: (!Object<string, string>|undefined)
 * }}
 */
goog.net.jsloader.Options;


/**
 * Scripts (URIs) waiting to be loaded.
 * @private {!Array<string>}
 */
goog.net.jsloader.scriptsToLoad_ = [];


/**
 * The deferred result of loading the URIs in scriptsToLoad_.
 * We need to return this to a caller that wants to load URIs while
 * a deferred is already working on them.
 * @private {!goog.async.Deferred<null>}
 */
goog.net.jsloader.scriptLoadingDeferred_;


/**
 * Loads and evaluates the JavaScript files at the specified URIs, guaranteeing
 * the order of script loads.
 *
 * Because we have to load the scripts in serial (load script 1, exec script 1,
 * load script 2, exec script 2, and so on), this will be slower than doing
 * the network fetches in parallel.
 *
 * If you need to load a large number of scripts but dependency order doesn't
 * matter, you should just call goog.net.jsloader.load N times.
 *
 * If you need to load a large number of scripts on the same domain,
 * you may want to use goog.module.ModuleLoader.
 *
 * @param {Array<string>} uris The URIs to load.
 * @param {goog.net.jsloader.Options=} opt_options Optional parameters. See
 *     goog.net.jsloader.options documentation for details.
 * @return {!goog.async.Deferred} The deferred result, that may be used to add
 *     callbacks
 */
goog.net.jsloader.loadMany = function(uris, opt_options) {
  // Loading the scripts in serial introduces asynchronosity into the flow.
  // Therefore, there are race conditions where client A can kick off the load
  // sequence for client B, even though client A's scripts haven't all been
  // loaded yet.
  //
  // To work around this issue, all module loads share a queue.
  if (!uris.length) {
    return goog.async.Deferred.succeed(null);
  }

  var isAnotherModuleLoading = goog.net.jsloader.scriptsToLoad_.length;
  goog.array.extend(goog.net.jsloader.scriptsToLoad_, uris);
  if (isAnotherModuleLoading) {
    // jsloader is still loading some other scripts.
    // In order to prevent the race condition noted above, we just add
    // these URIs to the end of the scripts' queue and return the deferred
    // result of the ongoing script load, so the caller knows when they
    // finish loading.
    return goog.net.jsloader.scriptLoadingDeferred_;
  }

  uris = goog.net.jsloader.scriptsToLoad_;
  var popAndLoadNextScript = function() {
    var uri = uris.shift();
    var deferred = goog.net.jsloader.load(uri, opt_options);
    if (uris.length) {
      deferred.addBoth(popAndLoadNextScript);
    }
    return deferred;
  };
  goog.net.jsloader.scriptLoadingDeferred_ = popAndLoadNextScript();
  return goog.net.jsloader.scriptLoadingDeferred_;
};


/**
 * Loads and evaluates a JavaScript file.
 * When the script loads, a user callback is called.
 * It is the client's responsibility to verify that the script ran successfully.
 *
 * @param {string} uri The URI of the JavaScript.
 * @param {goog.net.jsloader.Options=} opt_options Optional parameters. See
 *     goog.net.jsloader.Options documentation for details.
 * @return {!goog.async.Deferred} The deferred result, that may be used to add
 *     callbacks and/or cancel the transmission.
 *     The error callback will be called with a single goog.net.jsloader.Error
 *     parameter.
 */
goog.net.jsloader.load = function(uri, opt_options) {
  var options = opt_options || {};
  var doc = options.document || document;

  var script = goog.dom.createElement(goog.dom.TagName.SCRIPT);
  var request = {script_: script, timeout_: undefined};
  var deferred = new goog.async.Deferred(goog.net.jsloader.cancel_, request);

  // Set a timeout.
  var timeout = null;
  var timeoutDuration = goog.isDefAndNotNull(options.timeout) ?
      options.timeout : goog.net.jsloader.DEFAULT_TIMEOUT;
  if (timeoutDuration > 0) {
    timeout = window.setTimeout(function() {
      goog.net.jsloader.cleanup_(script, true);
      deferred.errback(new goog.net.jsloader.Error(
          goog.net.jsloader.ErrorCode.TIMEOUT,
          'Timeout reached for loading script ' + uri));
    }, timeoutDuration);
    request.timeout_ = timeout;
  }

  // Hang the user callback to be called when the script completes to load.
  // NOTE(user): This callback will be called in IE even upon error. In any
  // case it is the client's responsibility to verify that the script ran
  // successfully.
  script.onload = script.onreadystatechange = function() {
    if (!script.readyState || script.readyState == 'loaded' ||
        script.readyState == 'complete') {
      var removeScriptNode = options.cleanupWhenDone || false;
      goog.net.jsloader.cleanup_(script, removeScriptNode, timeout);
      deferred.callback(null);
    }
  };

  // Add an error callback.
  // NOTE(user): Not supported in IE.
  script.onerror = function() {
    goog.net.jsloader.cleanup_(script, true, timeout);
    deferred.errback(new goog.net.jsloader.Error(
        goog.net.jsloader.ErrorCode.LOAD_ERROR,
        'Error while loading script ' + uri));
  };

  var properties = options.attributes || {};
  goog.object.extend(properties, {
    'type': 'text/javascript',
    'charset': 'UTF-8',
    // NOTE(user): Safari never loads the script if we don't set
    // the src attribute before appending.
    'src': uri
  });
  goog.dom.setProperties(script, properties);
  var scriptParent = goog.net.jsloader.getScriptParentElement_(doc);
  scriptParent.appendChild(script);

  return deferred;
};


/**
 * Loads a JavaScript file and verifies it was evaluated successfully, using a
 * verification object.
 * The verification object is set by the loaded JavaScript at the end of the
 * script.
 * We verify this object was set and return its value in the success callback.
 * If the object is not defined we trigger an error callback.
 *
 * @param {string} uri The URI of the JavaScript.
 * @param {string} verificationObjName The name of the verification object that
 *     the loaded script should set.
 * @param {goog.net.jsloader.Options} options Optional parameters. See
 *     goog.net.jsloader.Options documentation for details.
 * @return {!goog.async.Deferred} The deferred result, that may be used to add
 *     callbacks and/or cancel the transmission.
 *     The success callback will be called with a single parameter containing
 *     the value of the verification object.
 *     The error callback will be called with a single goog.net.jsloader.Error
 *     parameter.
 */
goog.net.jsloader.loadAndVerify = function(uri, verificationObjName, options) {
  // Define the global objects variable.
  if (!goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_]) {
    goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_] = {};
  }
  var verifyObjs = goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_];

  // Verify that the expected object does not exist yet.
  if (goog.isDef(verifyObjs[verificationObjName])) {
    // TODO(user): Error or reset variable?
    return goog.async.Deferred.fail(new goog.net.jsloader.Error(
        goog.net.jsloader.ErrorCode.VERIFY_OBJECT_ALREADY_EXISTS,
        'Verification object ' + verificationObjName + ' already defined.'));
  }

  // Send request to load the JavaScript.
  var sendDeferred = goog.net.jsloader.load(uri, options);

  // Create a deferred object wrapping the send result.
  var deferred = new goog.async.Deferred(
      goog.bind(sendDeferred.cancel, sendDeferred));

  // Call user back with object that was set by the script.
  sendDeferred.addCallback(function() {
    var result = verifyObjs[verificationObjName];
    if (goog.isDef(result)) {
      deferred.callback(result);
      delete verifyObjs[verificationObjName];
    } else {
      // Error: script was not loaded properly.
      deferred.errback(new goog.net.jsloader.Error(
          goog.net.jsloader.ErrorCode.VERIFY_ERROR,
          'Script ' + uri + ' loaded, but verification object ' +
          verificationObjName + ' was not defined.'));
    }
  });

  // Pass error to new deferred object.
  sendDeferred.addErrback(function(error) {
    if (goog.isDef(verifyObjs[verificationObjName])) {
      delete verifyObjs[verificationObjName];
    }
    deferred.errback(error);
  });

  return deferred;
};


/**
 * Gets the DOM element under which we should add new script elements.
 * How? Take the first head element, and if not found take doc.documentElement,
 * which always exists.
 *
 * @param {!HTMLDocument} doc The relevant document.
 * @return {!Element} The script parent element.
 * @private
 */
goog.net.jsloader.getScriptParentElement_ = function(doc) {
  var headElements = doc.getElementsByTagName(goog.dom.TagName.HEAD);
  if (!headElements || goog.array.isEmpty(headElements)) {
    return doc.documentElement;
  } else {
    return headElements[0];
  }
};


/**
 * Cancels a given request.
 * @this {{script_: Element, timeout_: number}} The request context.
 * @private
 */
goog.net.jsloader.cancel_ = function() {
  var request = this;
  if (request && request.script_) {
    var scriptNode = request.script_;
    if (scriptNode && scriptNode.tagName == goog.dom.TagName.SCRIPT) {
      goog.net.jsloader.cleanup_(scriptNode, true, request.timeout_);
    }
  }
};


/**
 * Removes the script node and the timeout.
 *
 * @param {Node} scriptNode The node to be cleaned up.
 * @param {boolean} removeScriptNode If true completely remove the script node.
 * @param {?number=} opt_timeout The timeout handler to cleanup.
 * @private
 */
goog.net.jsloader.cleanup_ = function(scriptNode, removeScriptNode,
                                      opt_timeout) {
  if (goog.isDefAndNotNull(opt_timeout)) {
    goog.global.clearTimeout(opt_timeout);
  }

  scriptNode.onload = goog.nullFunction;
  scriptNode.onerror = goog.nullFunction;
  scriptNode.onreadystatechange = goog.nullFunction;

  // Do this after a delay (removing the script node of a running script can
  // confuse older IEs).
  if (removeScriptNode) {
    window.setTimeout(function() {
      goog.dom.removeNode(scriptNode);
    }, 0);
  }
};


/**
 * Possible error codes for jsloader.
 * @enum {number}
 */
goog.net.jsloader.ErrorCode = {
  LOAD_ERROR: 0,
  TIMEOUT: 1,
  VERIFY_ERROR: 2,
  VERIFY_OBJECT_ALREADY_EXISTS: 3
};



/**
 * A jsloader error.
 *
 * @param {goog.net.jsloader.ErrorCode} code The error code.
 * @param {string=} opt_message Additional message.
 * @constructor
 * @extends {goog.debug.Error}
 * @final
 */
goog.net.jsloader.Error = function(code, opt_message) {
  var msg = 'Jsloader error (code #' + code + ')';
  if (opt_message) {
    msg += ': ' + opt_message;
  }
  goog.net.jsloader.Error.base(this, 'constructor', msg);

  /**
   * The code for this error.
   *
   * @type {goog.net.jsloader.ErrorCode}
   */
  this.code = code;
};
goog.inherits(goog.net.jsloader.Error, goog.debug.Error);

// Copyright 2010 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities for dealing with POSIX path strings. Based on
 * Python's os.path and posixpath.
 * @author nnaze@google.com (Nathan Naze)
 */

goog.provide('goog.string.path');

goog.require('goog.array');
goog.require('goog.string');


/**
 * Returns the final component of a pathname.
 * See http://docs.python.org/library/os.path.html#os.path.basename
 * @param {string} path A pathname.
 * @return {string} path The final component of a pathname, i.e. everything
 *     after the final slash.
 */
goog.string.path.baseName = function(path) {
  var i = path.lastIndexOf('/') + 1;
  return path.slice(i);
};


/**
 * Alias to goog.string.path.baseName.
 * @param {string} path A pathname.
 * @return {string} path The final component of a pathname.
 * @deprecated Use goog.string.path.baseName.
 */
goog.string.path.basename = goog.string.path.baseName;


/**
 * Returns the directory component of a pathname.
 * See http://docs.python.org/library/os.path.html#os.path.dirname
 * @param {string} path A pathname.
 * @return {string} The directory component of a pathname, i.e. everything
 *     leading up to the final slash.
 */
goog.string.path.dirname = function(path) {
  var i = path.lastIndexOf('/') + 1;
  var head = path.slice(0, i);
  // If the path isn't all forward slashes, trim the trailing slashes.
  if (!/^\/+$/.test(head)) {
    head = head.replace(/\/+$/, '');
  }
  return head;
};


/**
 * Extracts the extension part of a pathname.
 * @param {string} path The path name to process.
 * @return {string} The extension if any, otherwise the empty string.
 */
goog.string.path.extension = function(path) {
  var separator = '.';
  // Combining all adjacent periods in the basename to a single period.
  var baseName = goog.string.path.baseName(path).replace(/\.+/g, separator);
  var separatorIndex = baseName.lastIndexOf(separator);
  return separatorIndex <= 0 ? '' : baseName.substr(separatorIndex + 1);
};


/**
 * Joins one or more path components (e.g. 'foo/' and 'bar' make 'foo/bar').
 * An absolute component will discard all previous component.
 * See http://docs.python.org/library/os.path.html#os.path.join
 * @param {...string} var_args One of more path components.
 * @return {string} The path components joined.
 */
goog.string.path.join = function(var_args) {
  var path = arguments[0];

  for (var i = 1; i < arguments.length; i++) {
    var arg = arguments[i];
    if (goog.string.startsWith(arg, '/')) {
      path = arg;
    } else if (path == '' || goog.string.endsWith(path, '/')) {
      path += arg;
    } else {
      path += '/' + arg;
    }
  }

  return path;
};


/**
 * Normalizes a pathname by collapsing duplicate separators, parent directory
 * references ('..'), and current directory references ('.').
 * See http://docs.python.org/library/os.path.html#os.path.normpath
 * @param {string} path One or more path components.
 * @return {string} The path after normalization.
 */
goog.string.path.normalizePath = function(path) {
  if (path == '') {
    return '.';
  }

  var initialSlashes = '';
  // POSIX will keep two slashes, but three or more will be collapsed to one.
  if (goog.string.startsWith(path, '/')) {
    initialSlashes = '/';
    if (goog.string.startsWith(path, '//') &&
        !goog.string.startsWith(path, '///')) {
      initialSlashes = '//';
    }
  }

  var parts = path.split('/');
  var newParts = [];

  for (var i = 0; i < parts.length; i++) {
    var part = parts[i];

    // '' and '.' don't change the directory, ignore.
    if (part == '' || part == '.') {
      continue;
    }

    // A '..' should pop a directory unless this is not an absolute path and
    // we're at the root, or we've travelled upwards relatively in the last
    // iteration.
    if (part != '..' ||
        (!initialSlashes && !newParts.length) ||
        goog.array.peek(newParts) == '..') {
      newParts.push(part);
    } else {
      newParts.pop();
    }
  }

  var returnPath = initialSlashes + newParts.join('/');
  return returnPath || '.';
};


/**
 * Splits a pathname into "dirname" and "baseName" components, where "baseName"
 * is everything after the final slash. Either part may return an empty string.
 * See http://docs.python.org/library/os.path.html#os.path.split
 * @param {string} path A pathname.
 * @return {!Array<string>} An array of [dirname, basename].
 */
goog.string.path.split = function(path) {
  var head = goog.string.path.dirname(path);
  var tail = goog.string.path.baseName(path);
  return [head, tail];
};

// TODO(nnaze): Implement other useful functions from os.path

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.FormatError');
goog.provide('w69b.qr.InvalidCharsetError');
goog.provide('w69b.qr.NotFoundError');
goog.provide('w69b.qr.ReaderError');
goog.require('goog.debug.Error');

goog.scope(function() {
  /**
   * @constructor
   * @param {string=} opt_msg message.
   * @extends {goog.debug.Error}
   */
  w69b.qr.ReaderError = function(opt_msg) {
    goog.base(this, opt_msg);
  };
  goog.inherits(w69b.qr.ReaderError, goog.debug.Error);

  /**
   * Thrown if decoding fails.
   * @constructor
   * @param {string=} opt_msg message.
   * @extends {w69b.qr.ReaderError}
   */
  w69b.qr.FormatError = function(opt_msg) {
    goog.base(this, opt_msg);
  };
  goog.inherits(w69b.qr.FormatError, w69b.qr.ReaderError);

  /**
   * Thrown if detection fails.
   * @constructor
   * @param {string=} opt_msg message.
   * @extends {w69b.qr.ReaderError}
   */
  w69b.qr.NotFoundError = function(opt_msg) {
    goog.base(this, opt_msg);
  };
  goog.inherits(w69b.qr.NotFoundError, w69b.qr.ReaderError);


  /**
   * @constructor
   * @param {string=} opt_msg message.
   * @extends {goog.debug.Error}
   */
  w69b.qr.InvalidCharsetError = function(opt_msg) {
    goog.base(this, opt_msg || 'InvalidCharset');
  };
  goog.inherits(w69b.qr.InvalidCharsetError, goog.debug.Error);
});

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.WorkerMessageType');

/**
 * Constants for worker message types.
 * @enum {string}
 */
w69b.qr.WorkerMessageType = {
  DECODED: 'success',
  NOTFOUND: 'notfound',
  PATTERN: 'pattern'
};

goog.exportSymbol('w69b.qr.WorkerMessageType', w69b.qr.WorkerMessageType);
goog.exportSymbol('w69b.qr.WorkerMessageType.DECODED',
  w69b.qr.WorkerMessageType.DECODED);
goog.exportSymbol('w69b.qr.WorkerMessageType.NOTFOUND',
  w69b.qr.WorkerMessageType.NOTFOUND);

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
goog.provide('w69b.qr.DecodeResult');
goog.require('goog.asserts');
goog.require('w69b.qr.ReaderError');

goog.scope(function() {
  /**
   * Encapsulates decoded result reader error.
   * @param {(string|w69b.qr.ReaderError)} text decoded text or error.
   * @param {Array.<w69b.qr.ResultPoint>=} opt_patterns sed for decoding.
   * @constructor
   */
  w69b.qr.DecodeResult = function(text, opt_patterns) {
    /**
     * @type {(string|w69b.qr.ReaderError)}
     * @private
     */
    this.result_ = text;
    this.patterns_ = opt_patterns || [];
  };
  var pro = w69b.qr.DecodeResult.prototype;

  /**
   * Only available if result is not an error.
   * @return {?string} decoded string.
   */
  pro.getText = function() {
    if (this.isError())
      return null;
    else
      return /** @type {string} */ (this.result_);
  };

  /**
   * @return {boolean} if result was an error.
   */
  pro.isError = function() {
    return (this.result_ instanceof w69b.qr.ReaderError);
  };

  /**
   * @return {?w69b.qr.ReaderError} error.
   */
  pro.getError = function() {
    if (this.isError())
      return /** @type {w69b.qr.ReaderError} */ (this.result_);
    else
      return null;
  };

  /**
   * @return {Array.<w69b.qr.ResultPoint>} decoded string.
   */
  pro.getPatterns = function() {
    return this.patterns_;
  };

  /**
   * @return {Object} JSON object.
   */
  pro['toJSON'] = function() {
    return {
      'text': this.getText(),
      'patterns': this.getPatterns()};
  };
});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2008 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
goog.provide('w69b.qr.ResultPoint');

goog.scope(function() {
  /**
   * @constructor
   * @param {number} posX x pos.
   * @param {number} posY y pos.
   */
  w69b.qr.ResultPoint = function(posX, posY) {
    this.x = posX;
    this.y = posY;
  };
  var ResultPoint = w69b.qr.ResultPoint;
  var pro = ResultPoint.prototype;

  /**
   * @return {number} x pos.
   */
    pro.getX = function() {
    return this.x;
  };

  /**
   * @return {number} y pos.
   */
  pro.getY = function() {
    return this.y;
  };
});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.AlignmentPattern');
goog.require('w69b.qr.ResultPoint');

goog.scope(function() {
  /**
   * Encapsulates an alignment pattern, which are the smaller square
   * patterns found in all but the simplest QR Codes.
   * @author Sean Owen
   * ported to js by Manuel Braun
   *
   * @param {number} posX x pos.
   * @param {number} posY y pos.
   * @param {number} estimatedModuleSize module size.
   * @constructor
   * @extends {w69b.qr.ResultPoint}
   */
  w69b.qr.AlignmentPattern = function(posX, posY, estimatedModuleSize) {
    goog.base(this, posX, posY);
    this.count = 1;
    this.estimatedModuleSize = estimatedModuleSize;
  };
  var AlignmentPattern = w69b.qr.AlignmentPattern;
  goog.inherits(AlignmentPattern, w69b.qr.ResultPoint);
  var pro = AlignmentPattern.prototype;

  pro.incrementCount = function() {
    this.count++;
  };

  /**
   * Determines if this alignment pattern "about equals" an alignment
   * pattern at the stated
   * position and size -- meaning, it is at nearly the same center with nearly
   * the same size.
   */
  pro.aboutEquals = function(moduleSize, i, j) {
    if (Math.abs(i - this.y) <= moduleSize &&
      Math.abs(j - this.x) <= moduleSize) {
      var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);
      return moduleSizeDiff <= 1.0 ||
        moduleSizeDiff / this.estimatedModuleSize <= 1.0;
    }
    return false;
  };

  /**
   * @return {number} module size.
   */
  pro.getEstimatedModuleSize = function() {
    return this.estimatedModuleSize;
  };

  /**
   * Combines this object's current estimate of a finder pattern position
   * and module size
   * with a new estimate.
   * @return {AlignmentPattern} a new containing an average of the two.
   */
  pro.combineEstimate = function(i, j, newModuleSize) {
    var combinedX = (this.x + j) / 2.0;
    var combinedY = (this.y + i) / 2.0;
    var combinedModuleSize = (this.estimatedModuleSize + newModuleSize) / 2.0;
    return new AlignmentPattern(combinedX, combinedY, combinedModuleSize);
  };


  /**
   * @return {Object} JSON object for pattern.
   */
  pro['toJSON'] = function() {
    return {
      'x': this.getX(),
      'y': this.getY(),
      'size': this.getEstimatedModuleSize()};
  };



});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 Ported to JavaScript by Lazar Laszlo 2011
 lazarsoft@gmail.com, www.lazarsoft.info
 */
/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


goog.provide('w69b.qr.AlignmentPatternFinder');
goog.require('w69b.img.BitMatrixLike');
goog.require('w69b.qr.AlignmentPattern');
goog.require('w69b.qr.NotFoundError');


goog.scope(function() {
  var AlignmentPattern = w69b.qr.AlignmentPattern;
  var NotFoundError = w69b.qr.NotFoundError;
  /**
   * This class attempts to find alignment patterns in a QR Code.
   * Alignment patterns look like finder
   * patterns but are smaller and appear at regular intervals throughout the
   * image.
   *
   * At the moment this only looks for the bottom-right alignment pattern.
   *
   *
   * This is mostly a simplified copy of {@link FinderPatternFinder}.
   * It is copied,
   * pasted and stripped down here for maximum performance but does
   * unfortunately duplicate
   * some code.
   *
   * This class is thread-safe but not reentrant. Each thread must allocate
   * its own object.
   *
   * @author Sean Owen
   * @author mb@w69b.com (Manuel Braun) - ported to js
   *
   * @constructor
   * @param {!w69b.img.BitMatrixLike} image image to search.
   * @param {number} startX left column from which to start searching.
   * @param {number} startY stat top row from which to start searching.
   * @param {number} width width of region to search.
   * @param {number} height height of region to search.
   * @param {number} moduleSize size module size so far.
   * @param {?w69b.qr.ResultPointCallback} resultPointCallback callback.
   */
  w69b.qr.AlignmentPatternFinder = function(image, startX, startY, width,
                                            height, moduleSize,
                                            resultPointCallback) {
    /**
     * @type {!w69b.img.BitMatrixLike}
     */
    this.image = image;
    this.possibleCenters = [];
    this.startX = startX;
    this.startY = startY;
    this.width = width;
    this.height = height;
    this.moduleSize = moduleSize;
    this.crossCheckStateCount = new Array(0, 0, 0);
    this.resultPointCallback = resultPointCallback;
  };
  var AlignmentPatternFinder = w69b.qr.AlignmentPatternFinder;
  var pro = AlignmentPatternFinder.prototype;

  pro.centerFromEnd = function(stateCount, end) {
    return (end - stateCount[2]) - stateCount[1] / 2.0;
  };
  pro.foundPatternCross = function(stateCount) {
    var moduleSize = this.moduleSize;
    var maxVariance = moduleSize / 2.0;
    for (var i = 0; i < 3; i++) {
      if (Math.abs(moduleSize - stateCount[i]) >= maxVariance) {
        return false;
      }
    }
    return true;
  };

  pro.crossCheckVertical = function(startI, centerJ, maxCount,
                                    originalStateCountTotal) {
    var image = this.image;

    var maxI = image.getHeight();
    var stateCount = this.crossCheckStateCount;
    stateCount[0] = 0;
    stateCount[1] = 0;
    stateCount[2] = 0;

    // Start counting up from center
    var i = startI;
    while (i >= 0 && image.get(centerJ, i) &&
      stateCount[1] <= maxCount) {
      stateCount[1]++;
      i--;
    }
    // If already too many modules in this state or ran off the edge:
    if (i < 0 || stateCount[1] > maxCount) {
      return NaN;
    }
    while (i >= 0 && !image.get(centerJ, + i) &&
      stateCount[0] <= maxCount) {
      stateCount[0]++;
      i--;
    }
    if (stateCount[0] > maxCount) {
      return NaN;
    }

    // Now also count down from center
    i = startI + 1;
    while (i < maxI && image.get(centerJ, i) &&
      stateCount[1] <= maxCount) {
      stateCount[1]++;
      i++;
    }
    if (i == maxI || stateCount[1] > maxCount) {
      return NaN;
    }
    while (i < maxI && !image.get(centerJ, i) &&
      stateCount[2] <= maxCount) {
      stateCount[2]++;
      i++;
    }
    if (stateCount[2] > maxCount) {
      return NaN;
    }

    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];
    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >=
      2 * originalStateCountTotal) {
      return NaN;
    }

    return this.foundPatternCross(stateCount) ?
      this.centerFromEnd(stateCount,
        i) : NaN;
  };

  /** <p>This method attempts to find the bottom-right alignment pattern in the
   * image. It is a bit messy since it's pretty performance-critical and so is
   * written to be fast foremost.</p>
   *
   * @return {AlignmentPattern} if found throws NotFoundError if not
   * found.
   */
  pro.handlePossibleCenter = function(stateCount, i, j) {
    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];
    var centerJ = this.centerFromEnd(stateCount, j);
    var centerI = this.crossCheckVertical(i, Math.floor(centerJ),
      2 * stateCount[1], stateCountTotal);
    if (!isNaN(centerI)) {
      var estimatedModuleSize = (stateCount[0] + stateCount[1] +
        stateCount[2]) / 3.0;
      var max = this.possibleCenters.length;
      for (var index = 0; index < max; index++) {
        var center = this.possibleCenters[index];
        // Look for about the same center and module size:
        if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {
          return center.combineEstimate(centerI, centerJ, estimatedModuleSize);
        }
      }
      // Hadn't found this before; save it
      var point = new AlignmentPattern(centerJ, centerI, estimatedModuleSize);
      this.possibleCenters.push(point);
      if (this.resultPointCallback != null) {
        this.resultPointCallback(point);
      }
    }
    return null;
  };

  /** <p>This method attempts to find the bottom-right alignment pattern in the
   * image. It is a bit messy since it's pretty performance-critical and so is
   * written to be fast foremost.</p>
   *
   * @return {AlignmentPattern} if found NotFoundException if not
   * found.
   */

  pro.find = function() {
    var startX = this.startX;
    var height = this.height;
    var image = this.image;
    var maxJ = startX + this.width;
    var middleI = this.startY + (height >> 1);
    // We are looking for black/white/black modules in 1:1:1 ratio;
    // this tracks the number of black/white/black modules seen so far
    var stateCount = new Array(0, 0, 0);
    for (var iGen = 0; iGen < height; iGen++) {
      // Search from middle outwards
      var i = middleI +
        ((iGen & 0x01) == 0 ? ((iGen + 1) >> 1) : -((iGen + 1) >> 1));
      stateCount[0] = 0;
      stateCount[1] = 0;
      stateCount[2] = 0;
      var j = startX;
      // Burn off leading white pixels before anything else; if we start in the
      // middle of a white run, it doesn't make sense to count its length,
      // since we don't know if the white run continued to the left of the
      // start point
      while (j < maxJ && image.get(j, i)) {
        j++;
      }
      var currentState = 0;
      while (j < maxJ) {
        if (image.get(j, i)) {
          // Black pixel
          if (currentState == 1) {
            // Counting black pixels
            stateCount[currentState]++;
          } else {
            // Counting white pixels
            if (currentState == 2) {
              // A winner?
              if (this.foundPatternCross(stateCount)) {
                // Yes
                var confirmed = this.handlePossibleCenter(stateCount, i, j);
                if (confirmed != null) {
                  return confirmed;
                }
              }
              stateCount[0] = stateCount[2];
              stateCount[1] = 1;
              stateCount[2] = 0;
              currentState = 1;
            } else {
              stateCount[++currentState]++;
            }
          }
        } else {
          // White pixel
          if (currentState == 1) {
            // Counting black pixels
            currentState++;
          }
          stateCount[currentState]++;
        }
        j++;
      }
      if (this.foundPatternCross(stateCount)) {
        var confirmed = this.handlePossibleCenter(stateCount, i, maxJ);
        if (confirmed != null) {
          return confirmed;
        }
      }
    }

    // Hmm, nothing we saw was observed and confirmed twice. If we had
    // any guess at all, return it.
    if (this.possibleCenters.length > 0) {
      return this.possibleCenters[0];
    }

    throw new NotFoundError();
  };
});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 Ported to JavaScript by Lazar Laszlo 2011

 lazarsoft@gmail.com, www.lazarsoft.info

 */

/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.BitMatrix');
goog.require('w69b.img.BitMatrixLike');

goog.scope(function() {

  /**
   * @param {number} width width.
   * @param {number=} opt_height height defaults to width.
   * @constructor
   * @implements {w69b.img.BitMatrixLike}
   */
  w69b.qr.BitMatrix = function(width, opt_height) {
    var height = goog.isDef(opt_height) ? opt_height : width;
    if (width < 1 || height < 1) {
      throw Error();
    }
    this.width = width;
    this.height = height;
    var rowSize = width >> 5;
    if ((width & 0x1f) != 0) {
      rowSize++;
    }
    this.rowSize = rowSize;
    this.bits = new Uint32Array(rowSize * height);
  };

  var BitMatrix = w69b.qr.BitMatrix;
  var pro = BitMatrix.prototype;

  /**
   * @return {number} The width of the matrix.
   */
  pro.getWidth = function() {
    return this.width;
  };

  /**
   * @return {number} The height of the matrix.
   */
  pro.getHeight = function() {
    return this.height;
  };


  /**
   * @param {number} x x pos.
   * @param {number} y y pos.
   * @return {boolean} bit at given position.
   */
  pro.get = function(x, y) {
    var offset = y * this.rowSize + (x >> 5);
    return ((this.bits[offset] >> (x & 0x1f)) & 1) != 0;
  };

  /**
   * Set bit at given position.
   * @param {number} x x pos.
   * @param {number} y y pos.
   */
  pro.set = function(x, y) {
    var offset = y * this.rowSize + (x >> 5);
    this.bits[offset] |= 1 << (x & 0x1f);
  };

  /**
   * Flip bit at given position.
   * @param {number} x x pos.
   * @param {number} y y pos.
   */
  pro.flip = function(x, y) {
    var offset = y * this.rowSize + (x >> 5);
    this.bits[offset] ^= 1 << (x & 0x1f);
  };

  /**
   * Clear matrix.
   */
  pro.clear = function() {
    var max = this.bits.length;
    for (var i = 0; i < max; i++) {
      this.bits[i] = 0;
    }
  };

  /**
   * Set bits in given rectangle.
   * @param {number} left left pos.
   * @param {number} top top pos.
   * @param {number} width width.
   * @param {number} height height.
   */
  pro.setRegion = function(left, top, width, height) {
    if (top < 0 || left < 0) {
      throw Error();
    }
    if (height < 1 || width < 1) {
      throw Error();   // Height and width must be at least 1
    }
    var right = left + width;
    var bottom = top + height;
    if (bottom > this.height || right > this.width) {
      throw Error();  // The region must fit inside the matrix
    }
    for (var y = top; y < bottom; y++) {
      var offset = y * this.rowSize;
      for (var x = left; x < right; x++) {
        this.bits[offset + (x >> 5)] |= 1 << (x & 0x1f);
      }
    }
  };

  /**
   * @return {string} matrix as string.
   */
  pro.toString = function() {
    var result = [];
    for (var y = 0; y < this.height; y++) {
      for (var x = 0; x < this.width; x++) {
        result.push(this.get(x, y) ? 'X ' : '  ');
      }
      result.push('\n');
    }
    return result.join('');
  };

});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
goog.provide('w69b.qr.GridSampler');
goog.provide('w69b.qr.GridSamplerInterface');
goog.require('w69b.qr.NotFoundError');

goog.scope(function() {


  /** Implementations of this class can, given locations of finder patterns for
   * a QR code in an image, sample the right points in the image to reconstruct
   * the QR code, accounting for perspective distortion. It is abstracted since
   * it is relatively expensive and should be allowed to take advantage of
   * platform-specific optimized implementations, like Sun's Java Advanced
   * Imaging library, but which may not be available in other environments such
   * as J2ME, and vice versa.
   *
   * The implementation used can be controlled by calling {
   * setGridSampler(GridSampler)} with an instance of a class which implements
   * this interface.
   *
   * @author Sean Owen
   * @author Manuel Braun (mb@w69b.com) - ported to js
   */

  var _ = w69b.qr.GridSampler;

  _.gridSampler = null;

  /**
   * Sets the implementation of GridSampler used by the library. One global
   * instance is stored, which may sound problematic. But, the implementation
   * provided ought to be appropriate for the entire platform, and all uses of
   * this library in the whole lifetime of the JVM. For instance, an Android
   * activity can swap in an implementation that takes advantage of native
   * platform libraries.
   *
   * @param {w69b.qr.GridSamplerInterface} newGridSampler The
   * platform-specific object to install.
   */
  _.setGridSampler = function(newGridSampler) {
    _.gridSampler = newGridSampler;
  };

  /**
   * @return {w69b.qr.GridSamplerInterface} the current implementation of GridSampler.
   */
  _.getInstance = function() {
    return _.gridSampler;
  };

  /**
   * Grid sample interface.
   * @interface
   */
  w69b.qr.GridSamplerInterface = function() {
  };

  /**
   * Samples an image for a rectangular matrix of bits of the given dimension.
   * @param {w69b.qr.BitMatrix} image image to sample.
   * @param {number} dimensionX width of BitMatrix to sample from image.
   * @param {number} dimensionY height of BitMatrix to sample from
   * image.
   * @return {w69b.qr.BitMatrix} representing a grid of points sampled from
   * the image within a region defined by the "from" parameters by the given
   * points is invalid or results in sampling outside the image boundaries.
   */
  w69b.qr.GridSamplerInterface.prototype.sampleGrid = function(image, dimensionX, dimensionY,
                                             p1ToX, p1ToY, p2ToX, p2ToY, p3ToX,
                                             p3ToY, p4ToX, p4ToY, p1FromX,
                                             p1FromY, p2FromX, p2FromY,
                                             p3FromX, p3FromY, p4FromX,
                                             p4FromY) {

  };

  /**
   * Samples an image for a rectangular matrix of bits of the given dimension.
   * @param {w69b.qr.BitMatrix} image image to sample.
   * @param {number} dimensionX width of BitMatrix to sample from image.
   * @param {number} dimensionY height of BitMatrix to sample from
   * image.
   * @param {w69b.qr.PerspectiveTransform} transform transformation matrix.
   * @return {w69b.qr.BitMatrix} representing a grid of points sampled from
   * the image within a region defined by the "from" parameters by the given
   * points is invalid or results in sampling outside the image boundaries.
   */
  w69b.qr.GridSamplerInterface.prototype.sampleGridTransform = function(image, dimensionX,
                                                      dimensionY, transform) {
  };

  /**
   * <p>Checks a set of points that have been transformed to sample points on
   * an image against the image's dimensions to see if the point are even
   * within the image.</p>
   *
   * <p>This method will actually "nudge" the endpoints back onto the image if
   * they are found to be barely (less than 1 pixel) off the image. This
   * accounts for imperfect detection of finder patterns in an image where the
   * QR Code runs all the way to the image border.</p>
   *
   * <p>For efficiency, the method will check points from either end of the
   * line until one is found to be within the image. Because the set of points
   * are assumed to be linear, this is valid.</p>
   *
   * @param {w69b.qr.BitMatrix} image image into which the points should map.
   * @param {Array.<number>} points actual points in x1,y1,...,xn,yn form.
   */
  _.checkAndNudgePoints = function(image, points) {
    var width = image.getWidth();
    var height = image.getHeight();
    // Check and nudge points from start until we see some that are OK:
    var nudged = true;
    var x, y, offset;
    for (offset = 0; offset < points.length && nudged; offset += 2) {
      x = points[offset] >> 0;
      y = points[offset + 1] >> 0;
      if (x < -1 || x > width || y < -1 || y > height) {
        throw new w69b.qr.NotFoundError();
      }
      nudged = false;
      if (x == -1) {
        points[offset] = 0.;
        nudged = true;
      } else if (x == width) {
        points[offset] = width - 1;
        nudged = true;
      }
      if (y == -1) {
        points[offset + 1] = 0.;
        nudged = true;
      } else if (y == height) {
        points[offset + 1] = height - 1;
        nudged = true;
      }
    }
    // Check and nudge points from end:
    nudged = true;
    for (offset = points.length - 2; offset >= 0 && nudged; offset -= 2) {
      x = points[offset] >> 0;
      y = points[offset + 1] >> 0;
      if (x < -1 || x > width || y < -1 || y > height) {
        throw new w69b.qr.NotFoundError();
      }
      nudged = false;
      if (x == -1) {
        points[offset] = 0.;
        nudged = true;
      } else if (x == width) {
        points[offset] = width - 1;
        nudged = true;
      }
      if (y == -1) {
        points[offset + 1] = 0.;
        nudged = true;
      } else if (y == height) {
        points[offset + 1] = height - 1;
        nudged = true;
      }
    }
  };


});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.PerspectiveTransform');

goog.scope(function() {
  /**
   * @constructor
   */
  w69b.qr.PerspectiveTransform = function(a11, a21, a31, a12, a22, a32, a13,
                                          a23, a33) {
    this.a11 = a11;
    this.a12 = a12;
    this.a13 = a13;
    this.a21 = a21;
    this.a22 = a22;
    this.a23 = a23;
    this.a31 = a31;
    this.a32 = a32;
    this.a33 = a33;
  };
  var PerspectiveTransform = w69b.qr.PerspectiveTransform;
  var pro = PerspectiveTransform.prototype;
  pro.transformPoints1 = function(points) {
    var max = points.length;
    var a11 = this.a11;
    var a12 = this.a12;
    var a13 = this.a13;
    var a21 = this.a21;
    var a22 = this.a22;
    var a23 = this.a23;
    var a31 = this.a31;
    var a32 = this.a32;
    var a33 = this.a33;
    for (var i = 0; i < max; i += 2) {
      var x = points[i];
      var y = points[i + 1];
      var denominator = a13 * x + a23 * y + a33;
      points[i] = (a11 * x + a21 * y + a31) / denominator;
      points[i + 1] = (a12 * x + a22 * y + a32) / denominator;
    }
  };

  pro.transformPoints2 = function(xValues, yValues) {
    var n = xValues.length;
    for (var i = 0; i < n; i++) {
      var x = xValues[i];
      var y = yValues[i];
      var denominator = this.a13 * x + this.a23 * y + this.a33;
      xValues[i] = (this.a11 * x + this.a21 * y + this.a31) / denominator;
      yValues[i] = (this.a12 * x + this.a22 * y + this.a32) / denominator;
    }
  };

  pro.buildAdjoint = function() {
    // Adjoint is the transpose of the cofactor matrix:
    return new PerspectiveTransform(this.a22 * this.a33 -
      this.a23 * this.a32,
      this.a23 * this.a31 - this.a21 * this.a33,
      this.a21 * this.a32 - this.a22 * this.a31,
      this.a13 * this.a32 - this.a12 * this.a33,
      this.a11 * this.a33 - this.a13 * this.a31,
      this.a12 * this.a31 - this.a11 * this.a32,
      this.a12 * this.a23 - this.a13 * this.a22,
      this.a13 * this.a21 - this.a11 * this.a23,
      this.a11 * this.a22 - this.a12 * this.a21);
  };

  pro.times = function(other) {
    return new PerspectiveTransform(this.a11 * other.a11 +
      this.a21 * other.a12 + this.a31 * other.a13,
      this.a11 * other.a21 + this.a21 * other.a22 + this.a31 * other.a23,
      this.a11 * other.a31 + this.a21 * other.a32 + this.a31 * other.a33,
      this.a12 * other.a11 + this.a22 * other.a12 + this.a32 * other.a13,
      this.a12 * other.a21 + this.a22 * other.a22 + this.a32 * other.a23,
      this.a12 * other.a31 + this.a22 * other.a32 + this.a32 * other.a33,
      this.a13 * other.a11 + this.a23 * other.a12 + this.a33 * other.a13,
      this.a13 * other.a21 + this.a23 * other.a22 + this.a33 * other.a23,
      this.a13 * other.a31 + this.a23 * other.a32 + this.a33 * other.a33);
  };

  PerspectiveTransform.quadrilateralToQuadrilateral = function(
    x0, y0, x1, y1, x2, y2, x3, y3, x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p) {

    var qToS = PerspectiveTransform.quadrilateralToSquare(
      x0, y0, x1, y1, x2, y2, x3, y3);
    var sToQ = PerspectiveTransform.squareToQuadrilateral(
      x0p, y0p, x1p, y1p, x2p, y2p, x3p,
      y3p);
    return sToQ.times(qToS);
  };

  PerspectiveTransform.squareToQuadrilateral = function(x0, y0, x1, y1,
                                                        x2, y2, x3, y3) {
    var dy2 = y3 - y2;
    var dy3 = y0 - y1 + y2 - y3;
    if (dy2 == 0.0 && dy3 == 0.0) {
      return new PerspectiveTransform(x1 - x0, x2 - x1, x0, y1 - y0, y2 - y1,
        y0,
        0.0, 0.0, 1.0);
    } else {
      var dx1 = x1 - x2;
      var dx2 = x3 - x2;
      var dx3 = x0 - x1 + x2 - x3;
      var dy1 = y1 - y2;
      var denominator = dx1 * dy2 - dx2 * dy1;
      var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;
      var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;
      return new PerspectiveTransform(x1 - x0 + a13 * x1, x3 - x0 + a23 * x3,
        x0,
        y1 - y0 + a13 * y1, y3 - y0 + a23 * y3, y0, a13, a23, 1.0);
    }
  };

  PerspectiveTransform.quadrilateralToSquare = function(x0, y0, x1, y1,
                                                        x2, y2, x3, y3) {
    // Here, the adjoint serves as the inverse:
    return PerspectiveTransform.squareToQuadrilateral(
      x0, y0, x1, y1, x2, y2, x3, y3).buildAdjoint();
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.DefaultGridSampler');
goog.require('w69b.qr.BitMatrix');
goog.require('w69b.qr.GridSampler');
goog.require('w69b.qr.GridSamplerInterface');
goog.require('w69b.qr.PerspectiveTransform');

goog.scope(function() {

  var PerspectiveTransform = w69b.qr.PerspectiveTransform;
  var GridSampler = w69b.qr.GridSampler;
  var BitMatrix = w69b.qr.BitMatrix;
  /**
   * @author Sean Owen
   * @author Manuel Braun (mb@w69b.com) - ported to js.
   * @constructor
   * @implements {w69b.qr.GridSamplerInterface}
   */
  w69b.qr.DefaultGridSampler = function() {
  };
  var pro = w69b.qr.DefaultGridSampler.prototype;

  pro.sampleGrid = function(image, dimensionX, dimensionY, p1ToX, p1ToY, p2ToX,
                            p2ToY, p3ToX, p3ToY, p4ToX, p4ToY, p1FromX,
                            p1FromY, p2FromX, p2FromY, p3FromX, p3FromY,
                            p4FromX, p4FromY) {

    var transform = PerspectiveTransform.quadrilateralToQuadrilateral(
      p1ToX, p1ToY, p2ToX, p2ToY, p3ToX, p3ToY, p4ToX, p4ToY,
      p1FromX, p1FromY, p2FromX, p2FromY, p3FromX, p3FromY, p4FromX, p4FromY);

    return this.sampleGridTransform(image, dimensionX, dimensionY, transform);
  };

  pro.sampleGridTransform = function(image, dimensionX, dimensionY,
                                     transform) {
    if (dimensionX <= 0 || dimensionY <= 0) {
      throw new w69b.qr.NotFoundError();
    }
    var bits = new BitMatrix(dimensionX, dimensionY);
    var points = new Array(dimensionX << 1);
    var x;
    for (var y = 0; y < dimensionY; y++) {
      var max = points.length;
      var iValue = y + 0.5;
      for (x = 0; x < max; x += 2) {
        points[x] = (x >> 1) + 0.5;
        points[x + 1] = iValue;
      }
      transform.transformPoints1(points);
      // Quick check to see if points transformed to something inside the
      // image; sufficient to check the endpoints
      GridSampler.checkAndNudgePoints(image, points);
      try {
        for (x = 0; x < max; x += 2) {
          if (image.get(points[x] >> 0, points[x + 1] >> 0)) {
            // Black(-ish) pixel
            bits.set(x >> 1, y);
          }
        }
      } catch (aioobe) {
        // This feels wrong, but, sometimes if the finder patterns are
        // misidentified, the resulting transform gets "twisted" such that it
        // maps a straight line of points to a set of points whose endpoints
        // are in bounds, but others are not. There is probably some
        // mathematical way to detect this about the transformation that I
        // don't know yet.  This results in an ugly runtime exception despite
        // our clever checks above -- can't have that. We could check each
        // point's coordinates but that feels duplicative. We settle for
        // catching and wrapping ArrayIndexOutOfBoundsException.
        throw new w69b.qr.NotFoundError();
      }
    }
    return bits;
  };

  // set default grid sampler.
  GridSampler.setGridSampler(new w69b.qr.DefaultGridSampler());

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
goog.provide('w69b.qr.DecodeHintType');

/**
 * Decode hint key constants.
 * @enum {number}
 */
w69b.qr.DecodeHintType = {
  TRY_HARDER: 1,
  CHARACTER_SET: 2
};

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
goog.provide('w69b.qr.FinderPattern');
goog.provide('w69b.qr.FinderPatternInfo');
goog.require('w69b.qr.ResultPoint');

goog.scope(function() {
  /**
   * @param {number} posX x pos.
   * @param {number} posY y pos.
   * @param {number} estimatedModuleSize estimated size.
   * @param {number=} opt_count count, defaults to 1.
   * @extends {w69b.qr.ResultPoint}
   * @constructor
   */
  w69b.qr.FinderPattern = function(posX, posY, estimatedModuleSize,
                                   opt_count) {
    goog.base(this, posX, posY);
    this.count = goog.isDef(opt_count) ? opt_count : 1;
    this.estimatedModuleSize = estimatedModuleSize;
  };
  var FinderPattern = w69b.qr.FinderPattern;
  goog.inherits(FinderPattern, w69b.qr.ResultPoint);
  var pro = FinderPattern.prototype;

  pro.incrementCount = function() {
    this.count++;
  };

  pro.getCount = function() {
    return this.count;
  };

  pro.aboutEquals = function(moduleSize, i, j) {
    if (Math.abs(i - this.y) <= moduleSize &&
      Math.abs(j - this.x) <= moduleSize) {
      var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);
      return moduleSizeDiff <= 1.0 ||
        moduleSizeDiff <= this.estimatedModuleSize;
    }
    return false;
  };

  /**
   * Combines this object's current estimate of a finder pattern position and
   * module size
   * with a new estimate. It returns a new {@code FinderPattern} containing
   * a weighted average based on count.
   * @param {number} i position.
   * @param {number} j position.
   * @param {number} newModuleSize size.
   * @return {FinderPattern} combined pattern.
   */
  pro.combineEstimate = function(i, j, newModuleSize) {
    var count = this.count;
    var combinedCount = count + 1;
    var combinedX = (count * this.x + j) / combinedCount;
    var combinedY = (count * this.y + i) / combinedCount;
    var combinedModuleSize = (count * this.estimatedModuleSize +
      newModuleSize) / combinedCount;
    return new FinderPattern(combinedX, combinedY,
      combinedModuleSize, combinedCount);
  };



  /**
   * @return {number} module size.
   */
  pro.getEstimatedModuleSize = function() {
    return this.estimatedModuleSize;
  };

  /**
   * @return {number} x pos.
   */
  pro.getX = function() {
    return this.x;
  };

  /**
   * @return {number} y pos.
   */
  pro.getY = function() {
    return this.y;
  };

  /**
   * Orders an array of three ResultPoints in an order [A,B,C] such that
   * AB < AC and
   * BC < AC and
   * the angle between BC and BA is less than 180 degrees.

   * @param {Array.<w69b.qr.FinderPattern>} patterns patterns to sort.
   */
  FinderPattern.orderBestPatterns = function(patterns) {
    function distance(pattern1, pattern2) {
      var xDiff = pattern1.x - pattern2.x;
      var yDiff = pattern1.y - pattern2.y;
      return (xDiff * xDiff + yDiff * yDiff);
    }

    // Returns the z component of the cross product between
    // vectors BC and BA.
    function crossProductZ(pointA, pointB, pointC) {
      var bX = pointB.x;
      var bY = pointB.y;
      return ((pointC.x - bX) * (pointA.y - bY)) -
        ((pointC.y - bY) * (pointA.x - bX));
    }


    // Find distances between pattern centers
    var zeroOneDistance = distance(patterns[0], patterns[1]);
    var oneTwoDistance = distance(patterns[1], patterns[2]);
    var zeroTwoDistance = distance(patterns[0], patterns[2]);

    var pointA, pointB, pointC;
    // Assume one closest to other two is B; A and C will just be guesses at
    // first.
    if (oneTwoDistance >= zeroOneDistance &&
      oneTwoDistance >= zeroTwoDistance) {
      pointB = patterns[0];
      pointA = patterns[1];
      pointC = patterns[2];
    } else if (zeroTwoDistance >= oneTwoDistance &&
      zeroTwoDistance >= zeroOneDistance) {
      pointB = patterns[1];
      pointA = patterns[0];
      pointC = patterns[2];
    } else {
      pointB = patterns[2];
      pointA = patterns[0];
      pointC = patterns[1];
    }

    // Use cross product to figure out whether A and C are correct or flipped.
    // This asks whether BC x BA has a positive z component, which is the
    // arrangement we want for A, B, C. If it's negative, then we've got it
    // flipped around and should swap A and C.
    if (crossProductZ(pointA, pointB, pointC) < 0.0) {
      var temp = pointA;
      pointA = pointC;
      pointC = temp;
    }

    patterns[0] = pointA;
    patterns[1] = pointB;
    patterns[2] = pointC;
  };


  /**
   * @return {Object} JSON object for pattern.
   */
  pro['toJSON'] = function() {
    return {
      'x': this.getX(),
      'y': this.getY(),
      'size': this.getEstimatedModuleSize()};
  };


  /**
   * @param {Array.<FinderPattern>} patternCenters size 3 array with
   * bottom left, top left and top right corner.
   * @constructor
   */
  w69b.qr.FinderPatternInfo = function(patternCenters) {
    // Bottom left and top right is flipped. Why?
    this.bottomLeft = patternCenters[0];
    this.topLeft = patternCenters[1];
    this.topRight = patternCenters[2];
  };
});

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.QRImage');

goog.scope(function() {

  /** @typedef {(Uint8ClampedArray|Uint8Array)} */
  w69b.qr.ImageData;
  /**
   * Image data container with width/height.
   * @param {number} width image width in pixels.
   * @param {number} height image height in pixels.
   * @param {w69b.qr.ImageData} data data array.
   * @constructor
   */
  w69b.qr.QRImage = function(width, height, data) {
    this.width = width;
    this.height = height;
    this.data = data;
  };
  var QRImage = w69b.qr.QRImage;
  var pro = QRImage.prototype;

  /**
   * Get value at given position.
   * @param {number} x x pos (col).
   * @param {number} y y pos (row).
   * @return {number} value.
   */
  pro.get = function(x, y) {
    return this.data[y * this.width + x];
  };

  /**
   * @return {number} width.
   */
  pro.getWidth = function() {
    return this.width;
  };

  /**
   * @return {number} height.
   */
  pro.getHeight = function() {
    return this.height;
  };

  /**
   * @return {w69b.qr.ImageData} raw data.
   */
  pro.getMatrix = function() {
    return this.data;
  };

  /**
   * @param {number} y index.
   * @param {Uint8Array} opt_row pre-allocated.
   * @return {Uint8Array} row.
   */
  pro.getRow = function(y, opt_row) {
    var row;
    if (opt_row == null || opt_row.length < this.width)
      row = new Uint8Array(this.width);
    else
      row = opt_row;
    var offset = y * this.width;
    for (var x = 0; x < this.width; ++x)
      row[x] = this.data[offset + x];
    return row;
  };


  /**
   * Get index in data for given position.
   * @param {number} x x pos (col).
   * @param {number} y y pos (row).
   * @return {number} index in data.
   */
  pro.getIndex = function(x, y) {
    return this.width * y + x;
  };

  /**
   * Set value at given position.
   * @param {number} x x pos (col).
   * @param {number} y y pos (row).
   * @param {number} value value to set.
   */
  pro.setValue = function(x, y, value) {
    this.data[y * this.width + x] = value;
  };

  /**
   * Construct Image with new empty buffer.
   * @param {number} width image width.
   * @param {number} height image height.
   * @return {w69b.qr.QRImage} image with given size and a new, empty buffer.
   */
  QRImage.newEmpty = function(width, height) {
    return new QRImage(width, height,
      new Uint8Array(new ArrayBuffer(width * height)));
  };
});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.FinderPatternFinder');
goog.require('goog.array');
goog.require('w69b.img.BitMatrixLike');
goog.require('w69b.qr.DecodeHintType');
goog.require('w69b.qr.FinderPattern');
goog.require('w69b.qr.FinderPatternInfo');
goog.require('w69b.qr.NotFoundError');
goog.require('w69b.qr.QRImage');


goog.scope(function() {
  var FinderPattern = w69b.qr.FinderPattern;
  var FinderPatternInfo = w69b.qr.FinderPatternInfo;

  /** @typedef {function((w69b.qr.AlignmentPattern|w69b.qr.FinderPattern))} */
  w69b.qr.ResultPointCallback;

  /**
   * <p>This class attempts to find finder patterns in a QR Code. Finder
   * patterns are the square
   * markers at three corners of a QR Code.</p>
   *
   * <p>This class is thread-safe but not reentrant. Each thread must allocate
   * its own object.
   *
   * @author Sean Owen
   * ported to js by Manuel Braun
   */

  /**
   * @param {!w69b.img.BitMatrixLike} image binary image.
   * @param {?w69b.qr.ResultPointCallback=} opt_callback callback.
   * @constructor
   */
  w69b.qr.FinderPatternFinder = function(image, opt_callback) {
    /**
     * @type {!w69b.img.BitMatrixLike}
     * @private
     */
    this.image_ = image;
    /**
     * @type {Array.<FinderPattern>}
     */
    this.possibleCenters_ = [];
    /**
     *
     * @type {Array}
     * @private
     */
    this.crossCheckStateCount_ = new Array(5);
    /**
     * @type {?w69b.qr.ResultPointCallback}
     * @private
     */
    this.resultPointCallback_ = opt_callback || null;
    /**
     * @type {boolean}
     * @private
     */
    this.hasSkipped_ = false;

  };
  var _ = w69b.qr.FinderPatternFinder;
  var pro = w69b.qr.FinderPatternFinder.prototype;

  // manu: changed from 2 to 3 for more robustness.
  _.CENTER_QUORUM = 2;
  _.MIN_SKIP = 3; // 1 pixel/module times 3 modules/center
  _.MAX_MODULES = 57; // support up to version 10 for mobile clients
  _.INTEGER_MATH_SHIFT = 8;

  // Maximum skew error to skip scanning soon.
  _.SKEW_THRESHOLD = 0.05;
  // Precomputed combinations for 3 out of 6.
  _.SKEW_COMBINATIONS = [
    [0, 1, 2],
    [0, 1, 3],
    [0, 1, 4],
    [0, 1, 5],
    [0, 2, 3],
    [0, 2, 4],
    [0, 2, 5],
    [0, 3, 4],
    [0, 3, 5],
    [0, 4, 5],
    [1, 2, 3],
    [1, 2, 4],
    [1, 2, 5],
    [1, 3, 4],
    [1, 3, 5],
    [1, 4, 5],
    [2, 3, 4],
    [2, 3, 5],
    [2, 4, 5],
    [3, 4, 5]
  ];


  /**
   * @param {Object=} opt_hints hints.
   * @return {FinderPatternInfo} info.
   */
  pro.find = function(opt_hints) {
    var tryHarder = opt_hints && !!opt_hints[w69b.qr.DecodeHintType.TRY_HARDER];
    var maxI = this.image_.height;
    var maxJ = this.image_.width;
    // We are looking for black/white/black/white/black modules in
    // 1:1:3:1:1 ratio; this tracks the number of such modules seen so far

    // Let's assume that the maximum version QR Code we support takes up 1/4
    // the height of the
    // this.image_, and then account for the center being 3 modules in size.
    // This gives the smallest
    // number of pixels the center could be, so skip this often. When trying
    // harder, look for all
    // QR versions regardless of how dense they are.
    var iSkip = Math.floor((3 * maxI) / (4 * _.MAX_MODULES));
    if (iSkip < _.MIN_SKIP || tryHarder) {
      iSkip = _.MIN_SKIP;
    }

    var done = false;
    var stateCount = new Array(5);
    var confirmed;
    for (var i = iSkip - 1; i < maxI && !done; i += iSkip) {
      // Get a row of black/white values
      stateCount[0] = 0;
      stateCount[1] = 0;
      stateCount[2] = 0;
      stateCount[3] = 0;
      stateCount[4] = 0;
      var currentState = 0;
      for (var j = 0; j < maxJ; j++) {
        if (this.image_.get(j, i)) {
          // Black pixel
          if ((currentState & 1) == 1) { // Counting white pixels
            currentState++;
          }
          stateCount[currentState]++;
        } else { // White pixel
          if ((currentState & 1) == 0) { // Counting black pixels
            if (currentState == 4) { // A winner?
              if (_.foundPatternCross(stateCount)) { // Yes
                confirmed = this.handlePossibleCenter(stateCount, i, j);
                if (confirmed) {
                  // Start examining every other line. Checking each line
                  // turned out to be too
                  // expensive and didn't improve performance.
                  iSkip = 2;
                  if (this.hasSkipped_) {
                    done = this.haveMultiplyConfirmedCenters();
                  } else {
                    var rowSkip = this.findRowSkip();
                    if (rowSkip > stateCount[2]) {
                      // Skip rows between row of lower confirmed center
                      // and top of presumed third confirmed center
                      // but back up a bit to get a full chance of detecting
                      // it, entire width of center of finder pattern

                      // Skip by rowSkip, but back off by stateCount[2]
                      // (size of last center
                      // of pattern we saw) to be conservative, and also
                      // back off by iSkip which
                      // is about to be re-added
                      i += rowSkip - stateCount[2] - iSkip;
                      j = maxJ - 1;
                    }
                  }
                } else {
                  stateCount[0] = stateCount[2];
                  stateCount[1] = stateCount[3];
                  stateCount[2] = stateCount[4];
                  stateCount[3] = 1;
                  stateCount[4] = 0;
                  currentState = 3;
                  continue;
                }
                // Clear state to start looking again
                currentState = 0;
                stateCount[0] = 0;
                stateCount[1] = 0;
                stateCount[2] = 0;
                stateCount[3] = 0;
                stateCount[4] = 0;
              } else { // No, shift counts back by two
                stateCount[0] = stateCount[2];
                stateCount[1] = stateCount[3];
                stateCount[2] = stateCount[4];
                stateCount[3] = 1;
                stateCount[4] = 0;
                currentState = 3;
              }
            } else {
              stateCount[++currentState]++;
            }
          } else { // Counting white pixels
            stateCount[currentState]++;
          }
        }
      }
      if (_.foundPatternCross(stateCount)) {
        confirmed = this.handlePossibleCenter(stateCount, i, maxJ);
        if (confirmed) {
          iSkip = stateCount[0];
          if (this.hasSkipped_) {
            // Found a third one
            done = this.haveMultiplyConfirmedCenters();
          }
        }
      }
    }

    var patternInfo = this.selectBestPatterns(true);
    w69b.qr.FinderPattern.orderBestPatterns(patternInfo);

    return new FinderPatternInfo(patternInfo);
  };

  /**
   * Given a count of black/white/black/white/black pixels just seen and an
   * end position,
   * figures the location of the center of this run.
   * @param {Array.<number>} stateCount state count.
   * @param {number} end end position.
   * @return {number} position.
   */
  pro.centerFromEnd = function(stateCount, end) {
    return (end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.;
  };

  /**
   * @param {Array.<number>} stateCount count of
   * black/white/black/white/black pixels just read.
   * @return {boolean} true iff the proportions of the counts is close enough
   * to the 1/1/3/1/1 ratios used by finder patterns to be considered a match.
   */
  _.foundPatternCross = function(stateCount) {
    var totalModuleSize = 0;
    for (var i = 0; i < 5; i++) {
      var count = stateCount[i];
      if (count == 0) {
        return false;
      }
      totalModuleSize += count;
    }
    if (totalModuleSize < 7) {
      return false;
    }
    var moduleSize = Math.floor((totalModuleSize << _.INTEGER_MATH_SHIFT) / 7);
    var maxVariance = Math.floor(moduleSize / 2);
    // Allow less than 50% variance from 1-1-3-1-1 proportions
    return Math.abs(moduleSize - (stateCount[0] << _.INTEGER_MATH_SHIFT)) <
      maxVariance &&
      Math.abs(moduleSize - (stateCount[1] << _.INTEGER_MATH_SHIFT)) <
        maxVariance &&
      Math.abs(3 * moduleSize - (stateCount[2] << _.INTEGER_MATH_SHIFT)) <
        3 * maxVariance &&
      Math.abs(moduleSize - (stateCount[3] << _.INTEGER_MATH_SHIFT)) <
        maxVariance &&
      Math.abs(moduleSize - (stateCount[4] << _.INTEGER_MATH_SHIFT)) <
        maxVariance;
  };

  /**
   * @return {Array.<number>} count.
   */
  pro.getCrossCheckStateCount = function() {
    this.crossCheckStateCount_[0] = 0;
    this.crossCheckStateCount_[1] = 0;
    this.crossCheckStateCount_[2] = 0;
    this.crossCheckStateCount_[3] = 0;
    this.crossCheckStateCount_[4] = 0;
    return this.crossCheckStateCount_;
  };

  /**
   * <p>After a horizontal scan finds a potential finder pattern, this method
   * "cross-checks" by scanning down vertically through the center of the
   * possible finder pattern to see if the same proportion is detected.</p>
   *
   * @param {number} startI row where a finder pattern was detected.
   * @param {number} centerJ center of the section that appears to cross
   * a finder pattern.
   * @param {number} maxCount maximum reasonable number of modules that
   * should beobserved in any reading state, based on the results of the
   * horizontal scan.
   * @param {number} originalStateCountTotal nodoc.
   * @return {number} vertical center of finder pattern, or {@link NaN}
   * if not found.
   */
  pro.crossCheckVertical = function(startI, centerJ, maxCount,
                                    originalStateCountTotal) {
    var image = this.image_;

    var maxI = image.height;
    var stateCount = this.getCrossCheckStateCount();

    // Start counting up from center
    var i = startI;
    while (i >= 0 && image.get(centerJ, i)) {
      stateCount[2]++;
      i--;
    }
    if (i < 0) {
      return NaN;
    }
    while (i >= 0 && !image.get(centerJ, i) &&
      stateCount[1] <= maxCount) {
      stateCount[1]++;
      i--;
    }
    // If already too many modules in this state or ran off the edge:
    if (i < 0 || stateCount[1] > maxCount) {
      return NaN;
    }
    while (i >= 0 && image.get(centerJ, i) &&
      stateCount[0] <= maxCount) {
      stateCount[0]++;
      i--;
    }
    if (stateCount[0] > maxCount) {
      return NaN;
    }

    // Now also count down from center
    i = startI + 1;
    while (i < maxI && image.get(centerJ, i)) {
      stateCount[2]++;
      i++;
    }
    if (i == maxI) {
      return NaN;
    }
    while (i < maxI && !image.get(centerJ, i) &&
      stateCount[3] < maxCount) {
      stateCount[3]++;
      i++;
    }
    if (i == maxI || stateCount[3] >= maxCount) {
      return NaN;
    }
    while (i < maxI && image.get(centerJ, i) &&
      stateCount[4] < maxCount) {
      stateCount[4]++;
      i++;
    }
    if (stateCount[4] >= maxCount) {
      return NaN;
    }

    // If we found a finder-pattern-like section, but its size is more than
    // 40% different than the original, assume it's a false positive
    var stateCountTotal = stateCount[0] + stateCount[1] +
      stateCount[2] + stateCount[3] +
      stateCount[4];
    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >=
      2 * originalStateCountTotal) {
      return NaN;
    }

    return _.foundPatternCross(stateCount) ?
      this.centerFromEnd(stateCount, i) : NaN;
  };

  /**
   * <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact
   * is basically identical, except it reads horizontally instead of
   * vertically. This is used to cross-cross check a vertical cross check
   * and locate the real center of the alignment pattern.</p>
   * @param {number} startJ col where a finder pattern was detected.
   * @param {number} centerI center of the section that appears to cross a
   * finder pattern.
   * @param {number} maxCount maximum reasonable number of modules that should
   * be observed in any reading state, based on the results of the horizontal
   * scan.
   * @param {number} originalStateCountTotal nodoc.
   * @return {number} horizontal center of finder pattern, or NaN if not found.
   */
  pro.crossCheckHorizontal = function(startJ, centerI, maxCount,
                                      originalStateCountTotal) {
    var image = this.image_;

    var maxJ = image.width;
    var stateCount = this.getCrossCheckStateCount();

    var j = startJ;
    while (j >= 0 && image.get(j, centerI)) {
      stateCount[2]++;
      j--;
    }
    if (j < 0) {
      return NaN;
    }
    while (j >= 0 && !image.get(j, centerI) &&
      stateCount[1] <= maxCount) {
      stateCount[1]++;
      j--;
    }
    if (j < 0 || stateCount[1] > maxCount) {
      return NaN;
    }
    while (j >= 0 && image.get(j, centerI) &&
      stateCount[0] <= maxCount) {
      stateCount[0]++;
      j--;
    }
    if (stateCount[0] > maxCount) {
      return NaN;
    }

    j = startJ + 1;
    while (j < maxJ && image.get(j, centerI)) {
      stateCount[2]++;
      j++;
    }
    if (j == maxJ) {
      return NaN;
    }
    while (j < maxJ && !image.get(j, centerI) &&
      stateCount[3] < maxCount) {
      stateCount[3]++;
      j++;
    }
    if (j == maxJ || stateCount[3] >= maxCount) {
      return NaN;
    }
    while (j < maxJ && image.get(j, centerI) &&
      stateCount[4] < maxCount) {
      stateCount[4]++;
      j++;
    }
    if (stateCount[4] >= maxCount) {
      return NaN;
    }

    // If we found a finder-pattern-like section, but its size is
    // significantly different than
    // the original, assume it's a false positive
    var stateCountTotal = stateCount[0] + stateCount[1] +
      stateCount[2] + stateCount[3] + stateCount[4];
    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >=
      originalStateCountTotal) {
      return NaN;
    }

    return _.foundPatternCross(stateCount) ?
      this.centerFromEnd(stateCount, j) : NaN;
  };

  /**
   * <p>This is called when a horizontal scan finds a possible alignment
   * pattern. It will cross check with a vertical scan, and if successful,
   * will, ah, cross-cross-check with another horizontal scan. This is needed
   * primarily to locate the real horizontal center of the pattern in cases of
   * extreme skew.</p>
   *
   * <p>If that succeeds the finder pattern location is added to a list that
   * tracks the number of times each location has been nearly-matched as a
   * finder pattern.  Each additional find is more evidence that the location
   * is in fact a finder pattern center
   *
   * @param {Array.<number>} stateCount reading state module counts from
   * horizontal scan.
   * @param {number} i row where finder pattern may be found.
   * @param {number} j end of possible finder pattern in row.
   * @return {boolean} true if a finder pattern candidate was found this time.
   */
  pro.handlePossibleCenter = function(stateCount, i, j) {
    var stateCountTotal = stateCount[0] + stateCount[1] +
      stateCount[2] + stateCount[3] + stateCount[4];
    var centerJ = this.centerFromEnd(stateCount, j);
    var centerI = this.crossCheckVertical(i, Math.floor(centerJ),
      stateCount[2], stateCountTotal);
    if (!isNaN(centerI)) {
      // Re-cross check
      centerJ = this.crossCheckHorizontal(Math.floor(centerJ),
        Math.floor(centerI), stateCount[2], stateCountTotal);
      if (!isNaN(centerJ)) {
        var estimatedModuleSize = stateCountTotal / 7.;
        var found = false;
        for (var index = 0; index < this.possibleCenters_.length; index++) {
          var center = this.possibleCenters_[index];
          // Look for about the same center and module size:
          if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {
            this.possibleCenters_[index] =
              center.combineEstimate(centerI, centerJ, estimatedModuleSize);
            found = true;
            break;
          }
        }
        if (!found) {
          var point = new FinderPattern(centerJ, centerI, estimatedModuleSize);
          this.possibleCenters_.push(point);
          if (this.resultPointCallback_ != null) {
            this.resultPointCallback_(point);
          }
        }
        return true;
      }
    }
    return false;
  };

  /**
   * @return {number} number of rows we could safely skip during scanning,
   * based on the first two finder patterns that have been located. In some
   * cases their position will allow us to infer that the third pattern must
   * lie below a certain point farther down in the image.
   */
  pro.findRowSkip = function() {
    var max = this.possibleCenters_.length;
    if (max <= 1) {
      return 0;
    }
    var firstConfirmedCenter = null;
    for (var i = 0; i < this.possibleCenters_.length; ++i) {
      var center = this.possibleCenters_[i];
      if (center.getCount() >= _.CENTER_QUORUM) {
        if (firstConfirmedCenter == null) {
          firstConfirmedCenter = center;
        } else {
          // We have two confirmed centers
          // How far down can we skip before resuming looking for the next
          // pattern? In the worst case, only the difference between the
          // difference in the x / y coordinates of the two centers.
          // This is the case where you find top left last.
          this.hasSkipped_ = true;
          return Math.floor((
            Math.abs(firstConfirmedCenter.getX() - center.getX()) -
              Math.abs(firstConfirmedCenter.getY() - center.getY())) / 2);
        }
      }
    }
    return 0;
  };

  /**
   * @return {boolean} true iff we have found at least 3 finder patterns that
   * have been detected at least {@link #CENTER_QUORUM} times each, and
   * , the estimated module size of the candidates is "pretty similar".
   */
  pro.haveMultiplyConfirmedCenters = function() {
    var confirmedCount = 0;
    var totalModuleSize = 0.;
    var max = this.possibleCenters_.length;
    this.possibleCenters_.forEach(function(pattern) {
      if (pattern.getCount() >= _.CENTER_QUORUM) {
        confirmedCount++;
        totalModuleSize += pattern.getEstimatedModuleSize();
      }
    }, this);
    if (confirmedCount < 3) {
      return false;
    }
    // OK, we have at least 3 confirmed centers, but, it's possible that one
    // is a "false positive"
    // and that we need to keep looking. We detect this by asking if the
    // estimated module sizes
    // vary too much. We arbitrarily say that when the total deviation
    // from average exceeds
    // 5% of the total module size estimates, it's too much.
    // manu: Does it make sense to divide by max while counting
    // only those with >= CENTER_QUORUM.
    var average = totalModuleSize / max;
    var totalDeviation = 0.;
    this.possibleCenters_.forEach(function(pattern) {
      totalDeviation += Math.abs(pattern.getEstimatedModuleSize() - average);
    });
    if (totalDeviation > 0.05 * totalModuleSize)
      return false;

    // Check skew of best patterns.
    var centers = this.selectBestPatterns();
    var skew = _.computeSkew(centers);

    return skew < _.SKEW_THRESHOLD;
  };

  /**
   * @param {boolean=} opt_checkSkew check skew, defaults to false.
   * @return {Array.<FinderPattern>} the 3 best FinderPatterns from our list
   * of candidates. The "best" are those that have been detected at
   * least CENTER_QUORUM times, and whose module size differs from the
   * average among those patterns the least.
   */
  pro.selectBestPatterns = function(opt_checkSkew) {
    var startSize = this.possibleCenters_.length;
    if (startSize < 3) {
      // Couldn't find enough finder patterns
      throw new w69b.qr.NotFoundError();
    }
    var average;
    var centers = goog.array.clone(this.possibleCenters_);

    // Filter outlier possibilities whose module size is too different
    if (startSize > 3) {
      // But we can only afford to do so if we have at least 4 possibilities
      // to choose from
      var totalModuleSize = 0.;
      var square = 0.;
      centers.forEach(function(center) {
        var size = center.getEstimatedModuleSize();
        totalModuleSize += size;
        square += size * size;
      });
      average = totalModuleSize / startSize;
      var stdDev = Math.sqrt(square / startSize - average * average);

      centers.sort(_.FurthestFromAverageComparator(average));

      var limit = Math.max(0.2 * average, stdDev);

      for (var i = 0; i < centers.length &&
        centers.length > 3; i++) {
        var pattern = centers[i];
        if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {
          goog.array.removeAt(centers, i);
          i--;
        }
      }
    }

    if (centers.length > 3) {
      // Throw away all but those first size candidate points we found.

      totalModuleSize = 0.;
      centers.forEach(function(possibleCenter) {
        totalModuleSize += possibleCenter.getEstimatedModuleSize();
      });

      average = totalModuleSize / centers.length;

      centers.sort(_.CenterComparator(average));

      if (opt_checkSkew) {
        // check skew error of first few sets.
        var withSkew = _.getCombinations(centers).map(function(combination) {
          return {centers: combination,
            skew: _.computeSkew(combination)};
        });
        withSkew.sort(function(a, b) {
          return goog.array.defaultCompare(a.skew, b.skew);
        });
        // pick canidates with lowest skew.
        centers = withSkew[0].centers;
      } else {
        centers = centers.slice(0, 3);
      }


    }

    return centers;
  };

  /**
   * Get c
   * @param {Array.<FinderPattern>} centers finder pattern candidates.
   * @return {Array.<Array.<FinderPattern>>} result.
   */
  _.getCombinations = function(centers) {
    var len = centers.length;
    var result = [];
    _.SKEW_COMBINATIONS.forEach(function(indices) {
      if (indices[0] < len && indices[1] && len && indices[2] < len) {
        result.push([centers[indices[0]], centers[indices[1]],
          centers[indices[2]]]);
      }
    });
    return result;
  };

  /**
   * <p>Orders by furthest from average</p>
   * @param {number} average average.
   * @return {function(FinderPattern, FinderPattern):number} compare function.
   */
  _.FurthestFromAverageComparator = function(average) {
    return function(center1, center2) {
      var dA = Math.abs(center2.getEstimatedModuleSize() - average);
      var dB = Math.abs(center1.getEstimatedModuleSize() - average);
      return dA < dB ? -1 : dA == dB ? 0 : 1;
    };
  };

  /**
   * <p>Orders by {@link FinderPattern#getCount()}, descending.</p>
   * @param {number} average average.
   * @return {function(FinderPattern, FinderPattern):number} compare function.
   */
  _.CenterComparator = function(average) {
    return function(center1, center2) {
      if (center2.getCount() == center1.getCount()) {
        var dA = Math.abs(center2.getEstimatedModuleSize() - average);
        var dB = Math.abs(center1.getEstimatedModuleSize() - average);
        return dA < dB ? 1 : dA == dB ? 0 : -1;
      } else {
        return center2.getCount() - center1.getCount();
      }
    };
  };

  /**
   * Computes a - b / |a-b|.
   * @param {w69b.qr.ResultPoint} pattern1 a.
   * @param {w69b.qr.ResultPoint} pattern2 b.
   * @return {Array.<number>} result as array [x, y].
   */
  _.diff = function(pattern1, pattern2) {
    var diffX = pattern1.getX() - pattern2.getX();
    var diffY = pattern1.getY() - pattern2.getY();
    var len = Math.sqrt(diffX * diffX + diffY * diffY);
    return [diffX / len, diffY / len];
  };

  /**
   * Scalar product
   * @param {Array.<number>} a vector a.
   * @param {Array.<number>} b vector a.
   * @return {number} scalar product.
   */
  _.scalarProduct = function(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  };

  // Square root of 1/2
  _.SQRT_05 = Math.sqrt(0.5);
  /**
   * Computes a number that expresses how good alignement of the givevn
   * patterns can be explained by a simliarity transformation. This
   * assumes that they are oriented in triangular shape.
   * @param {Array.<w69b.qr.ResultPoint>} patterns array of size 3.
   * @return {number} skew error.
   */
  _.computeSkew = function(patterns) {
    var diff01 = _.diff(patterns[0], patterns[1]);
    var diff02 = _.diff(patterns[0], patterns[2]);
    var diff12 = _.diff(patterns[1], patterns[2]);
    var scalars = [Math.abs(_.scalarProduct(diff01, diff02)),
      Math.abs(_.scalarProduct(diff01, diff12)),
      Math.abs(_.scalarProduct(diff02, diff12))
    ];

    scalars.sort();
    var error = scalars[0] +
      Math.abs(scalars[1] - _.SQRT_05) +
      Math.abs(scalars[2] - _.SQRT_05);
    return error;
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
goog.provide('w69b.qr.MathUtils');

goog.scope(function() {
  var _ = w69b.qr.MathUtils;

  /**
   * Euclidean distance.
   */
  _.distance = function(aX, aY, bX, bY) {
    var xDiff = aX - bX;
    var yDiff = aY - bY;
    return Math.sqrt(xDiff * xDiff + yDiff * yDiff);
  };


});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 Ported to JavaScript by Lazar Laszlo 2011

 lazarsoft@gmail.com, www.lazarsoft.info

 */

/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.Version');
goog.require('w69b.qr.BitMatrix');
goog.require('w69b.qr.FormatError');

goog.scope(function() {
  var FormatError = w69b.qr.FormatError;
  /**
   * @constructor
   */
  w69b.qr.ECB = function(count, dataCodewords) {
    this.count = count;
    this.dataCodewords = dataCodewords;
  };
  var ECB = w69b.qr.ECB;

  /**
   * @constructor
   * @param {number} ecCodewordsPerBlock code words per block.
   * @param {!ECB} ecBlocks1 block1.
   * @param {ECB=} opt_ecBlocks2 block2.
   */
  w69b.qr.ECBlocks = function(ecCodewordsPerBlock, ecBlocks1, opt_ecBlocks2) {
    this.ecCodewordsPerBlock = ecCodewordsPerBlock;
    if (opt_ecBlocks2)
      this.ecBlocks = [ecBlocks1, opt_ecBlocks2];
    else
      this.ecBlocks = [ecBlocks1];

  };
  var ECBlocks = w69b.qr.ECBlocks;

  ECBlocks.prototype.getECBlocks = function() {
    return this.ecBlocks;
  };

  ECBlocks.prototype.getTotalECCodewords = function() {
    return this.ecCodewordsPerBlock * this.getNumBlocks();
  };

  ECBlocks.prototype.getNumBlocks = function() {
    var total = 0;
    for (var i = 0; i < this.ecBlocks.length; i++) {
      total += this.ecBlocks[i].count;
    }
    return total;
  };

  /**
   * @constructor
   */
  w69b.qr.Version = function(versionNumber, alignmentPatternCenters, ecBlocks1,
                             ecBlocks2, ecBlocks3, ecBlocks4) {
    /**
     * @type {number}
     */
    this.versionNumber = versionNumber;
    this.alignmentPatternCenters = alignmentPatternCenters;
    this.ecBlocks = new Array(ecBlocks1, ecBlocks2, ecBlocks3, ecBlocks4);

    var total = 0;
    var ecCodewords = ecBlocks1.ecCodewordsPerBlock;
    var ecbArray = ecBlocks1.getECBlocks();
    for (var i = 0; i < ecbArray.length; i++) {
      var ecBlock = ecbArray[i];
      total += ecBlock.count * (ecBlock.dataCodewords + ecCodewords);
    }
    this.totalCodewords = total;
  };
  var Version = w69b.qr.Version;
  var pro = Version.prototype;

  pro.getVersionNumber = function() {
    return this.versionNumber;
  };

  pro.getTotalCodewords = function() {
    return this.totalCodewords;
  };

  /**
   * @return {string} debug string.
   */
  pro.toString = function() {
    return '' + this.versionNumber;
  };

  /**
   * @return {number} dimension.
   */
  pro.getDimensionForVersion = function() {
    return 17 + 4 * this.versionNumber;
  };

  pro.buildFunctionPattern = function() {
    var dimension = this.getDimensionForVersion();
    var bitMatrix = new w69b.qr.BitMatrix(dimension);

    // Top left finder pattern + separator + format
    bitMatrix.setRegion(0, 0, 9, 9);
    // Top right finder pattern + separator + format
    bitMatrix.setRegion(dimension - 8, 0, 8, 9);
    // Bottom left finder pattern + separator + format
    bitMatrix.setRegion(0, dimension - 8, 9, 8);

    // Alignment patterns
    var max = this.alignmentPatternCenters.length;
    for (var x = 0; x < max; x++) {
      var i = this.alignmentPatternCenters[x] - 2;
      for (var y = 0; y < max; y++) {
        if ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0)) {
          // No alignment patterns near the three finder paterns
          continue;
        }
        bitMatrix.setRegion(this.alignmentPatternCenters[y] - 2, i, 5, 5);
      }
    }

    // Vertical timing pattern
    bitMatrix.setRegion(6, 9, 1, dimension - 17);
    // Horizontal timing pattern
    bitMatrix.setRegion(9, 6, dimension - 17, 1);

    if (this.versionNumber > 6) {
      // Version info, top right
      bitMatrix.setRegion(dimension - 11, 0, 3, 6);
      // Version info, bottom left
      bitMatrix.setRegion(0, dimension - 11, 6, 3);
    }

    return bitMatrix;
  };
  pro.getECBlocksForLevel = function(ecLevel) {
    return this.ecBlocks[ecLevel.ordinal];
  };

  Version.VERSION_DECODE_INFO = new Array(0x07C94, 0x085BC, 0x09A99, 0x0A4D3,
    0x0BBF6, 0x0C762, 0x0D847, 0x0E60D, 0x0F928, 0x10B78, 0x1145D, 0x12A17,
    0x13532, 0x149A6, 0x15683, 0x168C9, 0x177EC, 0x18EC4, 0x191E1, 0x1AFAB,
    0x1B08E, 0x1CC1A, 0x1D33F, 0x1ED75, 0x1F250, 0x209D5, 0x216F0, 0x228BA,
    0x2379F, 0x24B0B, 0x2542E, 0x26A64, 0x27541, 0x28C69);

  Version.VERSIONS = function() {
    return new Array(new Version(1, [],
      new ECBlocks(7, new ECB(1, 19)),
      new ECBlocks(10, new ECB(1, 16)), new ECBlocks(13, new ECB(1, 13)),
      new ECBlocks(17, new ECB(1, 9))),
      new Version(2, new Array(6, 18), new ECBlocks(10, new ECB(1, 34)),
        new ECBlocks(16, new ECB(1, 28)), new ECBlocks(22, new ECB(1, 22)),
        new ECBlocks(28, new ECB(1, 16))),
      new Version(3, new Array(6, 22), new ECBlocks(15, new ECB(1, 55)),
        new ECBlocks(26, new ECB(1, 44)), new ECBlocks(18, new ECB(2, 17)),
        new ECBlocks(22, new ECB(2, 13))),
      new Version(4, new Array(6, 26), new ECBlocks(20, new ECB(1, 80)),
        new ECBlocks(18, new ECB(2, 32)), new ECBlocks(26, new ECB(2, 24)),
        new ECBlocks(16, new ECB(4, 9))),
      new Version(5, new Array(6, 30), new ECBlocks(26, new ECB(1, 108)),
        new ECBlocks(24, new ECB(2, 43)),
        new ECBlocks(18, new ECB(2, 15), new ECB(2, 16)),
        new ECBlocks(22, new ECB(2, 11), new ECB(2, 12))),
      new Version(6, new Array(6, 34), new ECBlocks(18, new ECB(2, 68)),
        new ECBlocks(16, new ECB(4, 27)), new ECBlocks(24, new ECB(4, 19)),
        new ECBlocks(28, new ECB(4, 15))),
      new Version(7, new Array(6, 22, 38), new ECBlocks(20, new ECB(2, 78)),
        new ECBlocks(18, new ECB(4, 31)),
        new ECBlocks(18, new ECB(2, 14), new ECB(4, 15)),
        new ECBlocks(26, new ECB(4, 13), new ECB(1, 14))),
      new Version(8, new Array(6, 24, 42), new ECBlocks(24, new ECB(2, 97)),
        new ECBlocks(22, new ECB(2, 38), new ECB(2, 39)),
        new ECBlocks(22, new ECB(4, 18), new ECB(2, 19)),
        new ECBlocks(26, new ECB(4, 14), new ECB(2, 15))),
      new Version(9, new Array(6, 26, 46), new ECBlocks(30, new ECB(2, 116)),
        new ECBlocks(22, new ECB(3, 36), new ECB(2, 37)),
        new ECBlocks(20, new ECB(4, 16), new ECB(4, 17)),
        new ECBlocks(24, new ECB(4, 12), new ECB(4, 13))),
      new Version(10, new Array(6, 28, 50),
        new ECBlocks(18, new ECB(2, 68), new ECB(2, 69)),
        new ECBlocks(26, new ECB(4, 43), new ECB(1, 44)),
        new ECBlocks(24, new ECB(6, 19), new ECB(2, 20)),
        new ECBlocks(28, new ECB(6, 15), new ECB(2, 16))),
      new Version(11, new Array(6, 30, 54), new ECBlocks(20, new ECB(4, 81)),
        new ECBlocks(30, new ECB(1, 50), new ECB(4, 51)),
        new ECBlocks(28, new ECB(4, 22), new ECB(4, 23)),
        new ECBlocks(24, new ECB(3, 12), new ECB(8, 13))),
      new Version(12, new Array(6, 32, 58),
        new ECBlocks(24, new ECB(2, 92), new ECB(2, 93)),
        new ECBlocks(22, new ECB(6, 36), new ECB(2, 37)),
        new ECBlocks(26, new ECB(4, 20), new ECB(6, 21)),
        new ECBlocks(28, new ECB(7, 14), new ECB(4, 15))),
      new Version(13, new Array(6, 34, 62), new ECBlocks(26, new ECB(4, 107)),
        new ECBlocks(22, new ECB(8, 37), new ECB(1, 38)),
        new ECBlocks(24, new ECB(8, 20), new ECB(4, 21)),
        new ECBlocks(22, new ECB(12, 11), new ECB(4, 12))),
      new Version(14, new Array(6, 26, 46, 66),
        new ECBlocks(30, new ECB(3, 115), new ECB(1, 116)),
        new ECBlocks(24, new ECB(4, 40), new ECB(5, 41)),
        new ECBlocks(20, new ECB(11, 16), new ECB(5, 17)),
        new ECBlocks(24, new ECB(11, 12), new ECB(5, 13))),
      new Version(15, new Array(6, 26, 48, 70),
        new ECBlocks(22, new ECB(5, 87), new ECB(1, 88)),
        new ECBlocks(24, new ECB(5, 41), new ECB(5, 42)),
        new ECBlocks(30, new ECB(5, 24), new ECB(7, 25)),
        new ECBlocks(24, new ECB(11, 12), new ECB(7, 13))),
      new Version(16, new Array(6, 26, 50, 74),
        new ECBlocks(24, new ECB(5, 98), new ECB(1, 99)),
        new ECBlocks(28, new ECB(7, 45), new ECB(3, 46)),
        new ECBlocks(24, new ECB(15, 19), new ECB(2, 20)),
        new ECBlocks(30, new ECB(3, 15), new ECB(13, 16))),
      new Version(17, new Array(6, 30, 54, 78),
        new ECBlocks(28, new ECB(1, 107), new ECB(5, 108)),
        new ECBlocks(28, new ECB(10, 46), new ECB(1, 47)),
        new ECBlocks(28, new ECB(1, 22), new ECB(15, 23)),
        new ECBlocks(28, new ECB(2, 14), new ECB(17, 15))),
      new Version(18, new Array(6, 30, 56, 82),
        new ECBlocks(30, new ECB(5, 120), new ECB(1, 121)),
        new ECBlocks(26, new ECB(9, 43), new ECB(4, 44)),
        new ECBlocks(28, new ECB(17, 22), new ECB(1, 23)),
        new ECBlocks(28, new ECB(2, 14), new ECB(19, 15))),
      new Version(19, new Array(6, 30, 58, 86),
        new ECBlocks(28, new ECB(3, 113), new ECB(4, 114)),
        new ECBlocks(26, new ECB(3, 44), new ECB(11, 45)),
        new ECBlocks(26, new ECB(17, 21), new ECB(4, 22)),
        new ECBlocks(26, new ECB(9, 13), new ECB(16, 14))),
      new Version(20, new Array(6, 34, 62, 90),
        new ECBlocks(28, new ECB(3, 107), new ECB(5, 108)),
        new ECBlocks(26, new ECB(3, 41), new ECB(13, 42)),
        new ECBlocks(30, new ECB(15, 24), new ECB(5, 25)),
        new ECBlocks(28, new ECB(15, 15), new ECB(10, 16))),
      new Version(21, new Array(6, 28, 50, 72, 94),
        new ECBlocks(28, new ECB(4, 116), new ECB(4, 117)),
        new ECBlocks(26, new ECB(17, 42)),
        new ECBlocks(28, new ECB(17, 22), new ECB(6, 23)),
        new ECBlocks(30, new ECB(19, 16), new ECB(6, 17))),
      new Version(22, new Array(6, 26, 50, 74, 98),
        new ECBlocks(28, new ECB(2, 111), new ECB(7, 112)),
        new ECBlocks(28, new ECB(17, 46)),
        new ECBlocks(30, new ECB(7, 24), new ECB(16, 25)),
        new ECBlocks(24, new ECB(34, 13))),
      new Version(23, new Array(6, 30, 54, 74, 102),
        new ECBlocks(30, new ECB(4, 121), new ECB(5, 122)),
        new ECBlocks(28, new ECB(4, 47), new ECB(14, 48)),
        new ECBlocks(30, new ECB(11, 24), new ECB(14, 25)),
        new ECBlocks(30, new ECB(16, 15), new ECB(14, 16))),
      new Version(24, new Array(6, 28, 54, 80, 106),
        new ECBlocks(30, new ECB(6, 117), new ECB(4, 118)),
        new ECBlocks(28, new ECB(6, 45), new ECB(14, 46)),
        new ECBlocks(30, new ECB(11, 24), new ECB(16, 25)),
        new ECBlocks(30, new ECB(30, 16), new ECB(2, 17))),
      new Version(25, new Array(6, 32, 58, 84, 110),
        new ECBlocks(26, new ECB(8, 106), new ECB(4, 107)),
        new ECBlocks(28, new ECB(8, 47), new ECB(13, 48)),
        new ECBlocks(30, new ECB(7, 24), new ECB(22, 25)),
        new ECBlocks(30, new ECB(22, 15), new ECB(13, 16))),
      new Version(26, new Array(6, 30, 58, 86, 114),
        new ECBlocks(28, new ECB(10, 114), new ECB(2, 115)),
        new ECBlocks(28, new ECB(19, 46), new ECB(4, 47)),
        new ECBlocks(28, new ECB(28, 22), new ECB(6, 23)),
        new ECBlocks(30, new ECB(33, 16), new ECB(4, 17))),
      new Version(27, new Array(6, 34, 62, 90, 118),
        new ECBlocks(30, new ECB(8, 122), new ECB(4, 123)),
        new ECBlocks(28, new ECB(22, 45), new ECB(3, 46)),
        new ECBlocks(30, new ECB(8, 23), new ECB(26, 24)),
        new ECBlocks(30, new ECB(12, 15), new ECB(28, 16))),
      new Version(28, new Array(6, 26, 50, 74, 98, 122),
        new ECBlocks(30, new ECB(3, 117), new ECB(10, 118)),
        new ECBlocks(28, new ECB(3, 45), new ECB(23, 46)),
        new ECBlocks(30, new ECB(4, 24), new ECB(31, 25)),
        new ECBlocks(30, new ECB(11, 15), new ECB(31, 16))),
      new Version(29, new Array(6, 30, 54, 78, 102, 126),
        new ECBlocks(30, new ECB(7, 116), new ECB(7, 117)),
        new ECBlocks(28, new ECB(21, 45), new ECB(7, 46)),
        new ECBlocks(30, new ECB(1, 23), new ECB(37, 24)),
        new ECBlocks(30, new ECB(19, 15), new ECB(26, 16))),
      new Version(30, new Array(6, 26, 52, 78, 104, 130),
        new ECBlocks(30, new ECB(5, 115), new ECB(10, 116)),
        new ECBlocks(28, new ECB(19, 47), new ECB(10, 48)),
        new ECBlocks(30, new ECB(15, 24), new ECB(25, 25)),
        new ECBlocks(30, new ECB(23, 15), new ECB(25, 16))),
      new Version(31, new Array(6, 30, 56, 82, 108, 134),
        new ECBlocks(30, new ECB(13, 115), new ECB(3, 116)),
        new ECBlocks(28, new ECB(2, 46), new ECB(29, 47)),
        new ECBlocks(30, new ECB(42, 24), new ECB(1, 25)),
        new ECBlocks(30, new ECB(23, 15), new ECB(28, 16))),
      new Version(32, new Array(6, 34, 60, 86, 112, 138),
        new ECBlocks(30, new ECB(17, 115)),
        new ECBlocks(28, new ECB(10, 46), new ECB(23, 47)),
        new ECBlocks(30, new ECB(10, 24), new ECB(35, 25)),
        new ECBlocks(30, new ECB(19, 15), new ECB(35, 16))),
      new Version(33, new Array(6, 30, 58, 86, 114, 142),
        new ECBlocks(30, new ECB(17, 115), new ECB(1, 116)),
        new ECBlocks(28, new ECB(14, 46), new ECB(21, 47)),
        new ECBlocks(30, new ECB(29, 24), new ECB(19, 25)),
        new ECBlocks(30, new ECB(11, 15), new ECB(46, 16))),
      new Version(34, new Array(6, 34, 62, 90, 118, 146),
        new ECBlocks(30, new ECB(13, 115), new ECB(6, 116)),
        new ECBlocks(28, new ECB(14, 46), new ECB(23, 47)),
        new ECBlocks(30, new ECB(44, 24), new ECB(7, 25)),
        new ECBlocks(30, new ECB(59, 16), new ECB(1, 17))),
      new Version(35, new Array(6, 30, 54, 78, 102, 126, 150),
        new ECBlocks(30, new ECB(12, 121), new ECB(7, 122)),
        new ECBlocks(28, new ECB(12, 47), new ECB(26, 48)),
        new ECBlocks(30, new ECB(39, 24), new ECB(14, 25)),
        new ECBlocks(30, new ECB(22, 15), new ECB(41, 16))),
      new Version(36, new Array(6, 24, 50, 76, 102, 128, 154),
        new ECBlocks(30, new ECB(6, 121), new ECB(14, 122)),
        new ECBlocks(28, new ECB(6, 47), new ECB(34, 48)),
        new ECBlocks(30, new ECB(46, 24), new ECB(10, 25)),
        new ECBlocks(30, new ECB(2, 15), new ECB(64, 16))),
      new Version(37, new Array(6, 28, 54, 80, 106, 132, 158),
        new ECBlocks(30, new ECB(17, 122), new ECB(4, 123)),
        new ECBlocks(28, new ECB(29, 46), new ECB(14, 47)),
        new ECBlocks(30, new ECB(49, 24), new ECB(10, 25)),
        new ECBlocks(30, new ECB(24, 15), new ECB(46, 16))),
      new Version(38, new Array(6, 32, 58, 84, 110, 136, 162),
        new ECBlocks(30, new ECB(4, 122), new ECB(18, 123)),
        new ECBlocks(28, new ECB(13, 46), new ECB(32, 47)),
        new ECBlocks(30, new ECB(48, 24), new ECB(14, 25)),
        new ECBlocks(30, new ECB(42, 15), new ECB(32, 16))),
      new Version(39, new Array(6, 26, 54, 82, 110, 138, 166),
        new ECBlocks(30, new ECB(20, 117), new ECB(4, 118)),
        new ECBlocks(28, new ECB(40, 47), new ECB(7, 48)),
        new ECBlocks(30, new ECB(43, 24), new ECB(22, 25)),
        new ECBlocks(30, new ECB(10, 15), new ECB(67, 16))),
      new Version(40, new Array(6, 30, 58, 86, 114, 142, 170),
        new ECBlocks(30, new ECB(19, 118), new ECB(6, 119)),
        new ECBlocks(28, new ECB(18, 47), new ECB(31, 48)),
        new ECBlocks(30, new ECB(34, 24), new ECB(34, 25)),
        new ECBlocks(30, new ECB(20, 15), new ECB(61, 16))));
  }();

  Version.getVersionForNumber = function(versionNumber) {
    if (versionNumber < 1 || versionNumber > 40) {
      throw new FormatError();
    }
    return Version.VERSIONS[versionNumber - 1];
  };

  Version.getProvisionalVersionForDimension = function(dimension) {
    if (dimension % 4 != 1) {
      throw new FormatError();
    }
    return Version.getVersionForNumber((dimension - 17) >> 2);
  };

  Version.decodeVersionInformation = function(versionBits) {
    var bestDifference = 0xffffffff;
    var bestVersion = 0;
    for (var i = 0; i < Version.VERSION_DECODE_INFO.length; i++) {
      var targetVersion = Version.VERSION_DECODE_INFO[i];
      // Do the version info bits match exactly? done.
      if (targetVersion == versionBits) {
        return Version.getVersionForNumber(i + 7);
      }
      // Otherwise see if this is the closest to a real version info bit string
      // we have seen so far
      var bitsDifference = w69b.qr.FormatInformation.numBitsDiffering(
        versionBits, targetVersion);
      if (bitsDifference < bestDifference) {
        bestVersion = i + 7;
        bestDifference = bitsDifference;
      }
    }
    // We can tolerate up to 3 bits of error since no two version info codewords
    // will differ in less than 4 bits.
    if (bestDifference <= 3) {
      return Version.getVersionForNumber(bestVersion);
    }
    // If we didn't find a close enough match, fail
    return null;
  };
});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.Detector');
goog.require('w69b.img.BitMatrixLike');
goog.require('w69b.qr.AlignmentPattern');
goog.require('w69b.qr.AlignmentPatternFinder');
goog.require('w69b.qr.BitMatrix');
goog.require('w69b.qr.DefaultGridSampler');
goog.require('w69b.qr.FinderPatternFinder');
goog.require('w69b.qr.MathUtils');
goog.require('w69b.qr.NotFoundError');
goog.require('w69b.qr.Version');


goog.scope(function() {
  var Version = w69b.qr.Version;
  var PerspectiveTransform = w69b.qr.PerspectiveTransform;
  var NotFoundError = w69b.qr.NotFoundError;
  var MathUtils = w69b.qr.MathUtils;
  var AlignmentPattern = w69b.qr.AlignmentPattern;

  /**
   * @constructor
   */
  w69b.qr.DetectorResult = function(bits, points) {
    this.bits = bits;
    this.points = points;
  };
  var DetectorResult = w69b.qr.DetectorResult;

  /**
   * Encapsulates logic that can detect a QR Code in an image, even if the
   * QR Code is rotated or skewed, or partially obscured.
   *
   * @author Sean Owen
   * @author mb@w69b.com (Manuel Braun) - ported to js
   *
   * @constructor
   * @param {!w69b.img.BitMatrixLike} image the image.
   * @param {?w69b.qr.ResultPointCallback=} opt_callback callback.
   */
  w69b.qr.Detector = function(image, opt_callback) {
    /**
     * @type {!w69b.img.BitMatrixLike}
     */
    this.image = image;
    this.resultPointCallback = opt_callback || null;
  };
  var pro = w69b.qr.Detector.prototype;

  /**
   * <p>This method traces a line from a point in the image, in the
   * direction towards another point.
   * It begins in a black region, and keeps going until it finds white,
   * then black, then white again.
   * It reports the distance from the start to this point.</p>
   *
   * <p>This is used when figuring out how wide a finder pattern is,
   * when the finder pattern may be skewed or rotated.</p>
   */
  /**
   * <p>This method traces a line from a point in the image, in the direction
   * towards another point.
   * It begins in a black region, and keeps going until it finds white, then
   * black, then white again.
   * It reports the distance from the start to this point.</p>
   *
   * <p>This is used when figuring out how wide a finder pattern is, when the
   * finder pattern
   * may be skewed or rotated.</p>
   */
  pro.sizeOfBlackWhiteBlackRun = function(fromX, fromY, toX, toY) {
    // Mild variant of Bresenham's algorithm;
    // see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm
    var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);
    if (steep) {
      var temp = fromX;
      fromX = fromY;
      fromY = temp;
      temp = toX;
      toX = toY;
      toY = temp;
    }

    var dx = Math.abs(toX - fromX);
    var dy = Math.abs(toY - fromY);
    var error = -dx >> 1;
    var xstep = fromX < toX ? 1 : -1;
    var ystep = fromY < toY ? 1 : -1;

    // In black pixels, looking for white, first or second time.
    var state = 0;
    // Loop up until x == toX, but not beyond
    var xLimit = toX + xstep;
    for (var x = fromX, y = fromY; x != xLimit; x += xstep) {
      var realX = steep ? y : x;
      var realY = steep ? x : y;

      // Does current pixel mean we have moved white to black or vice versa?
      // Scanning black in state 0,2 and white in state 1, so if we find
      // the wrong
      // color, advance to next state or end if we are in state 2 already
      if ((state == 1) == !!this.image.get(realX, realY)) {
        if (state == 2) {
          return MathUtils.distance(x, y, fromX, fromY);
        }
        state++;
      }

      error += dy;
      if (error > 0) {
        if (y == toY) {
          break;
        }
        y += ystep;
        error -= dx;
      }
    }
    // Found black-white-black; give the benefit of the doubt that the next
    // pixel outside the image
    // is "white" so this last point at (toX+xStep,toY) is the right ending.
    // This is really a
    // small approximation; (toX+xStep,toY+yStep) might be really correct.
    // Ignore this.
    if (state == 2) {
      return MathUtils.distance(toX + xstep, toY, fromX, fromY);
    }
    // else we didn't find even black-white-black; no estimate is really
    // possible
    return NaN;
  };


  /**
   * See {@link #sizeOfBlackWhiteBlackRun(int, int, int, int)}; computes
   * the total width of
   * a finder pattern by looking for a black-white-black run from the center
   * in the direction
   * of another point (another finder pattern center), and in the opposite
   * direction too.</p>
   */
  pro.sizeOfBlackWhiteBlackRunBothWays = function(fromX, fromY, toX, toY) {

    var result = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY);

    // Now count other way -- don't run off image though of course
    var scale = 1.0;
    var otherToX = fromX - (toX - fromX);
    if (otherToX < 0) {
      scale = fromX / (fromX - otherToX);
      otherToX = 0;
    } else if (otherToX >= this.image.width) {
      scale = (this.image.width - 1 - fromX) / (otherToX - fromX);
      otherToX = this.image.width - 1;
    }
    var otherToY = Math.floor(fromY - (toY - fromY) * scale);

    scale = 1.0;
    if (otherToY < 0) {
      scale = fromY / (fromY - otherToY);
      otherToY = 0;
    } else if (otherToY >= this.image.height) {
      scale = (this.image.height - 1 - fromY) / (otherToY - fromY);
      otherToY = this.image.height - 1;
    }
    otherToX = Math.floor(fromX + (otherToX - fromX) * scale);

    result += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY);
    return result - 1.0; // -1 because we counted the middle pixel twice
  };

  /**
   * <p>Estimates module size based on two finder patterns -- it uses
   * {@link #sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)} to
   * figure the
   * width of each, measuring along the axis between their centers.</p>
   */
  pro.calculateModuleSizeOneWay = function(pattern, otherPattern) {
    var moduleSizeEst1 = this.sizeOfBlackWhiteBlackRunBothWays(
      Math.floor(pattern.x),
      Math.floor(pattern.y), Math.floor(otherPattern.x),
      Math.floor(otherPattern.y));
    var moduleSizeEst2 = this.sizeOfBlackWhiteBlackRunBothWays(
      Math.floor(otherPattern.x),
      Math.floor(otherPattern.y), Math.floor(pattern.x),
      Math.floor(pattern.y));
    if (isNaN(moduleSizeEst1)) {
      return moduleSizeEst2 / 7.0;
    }
    if (isNaN(moduleSizeEst2)) {
      return moduleSizeEst1 / 7.0;
    }
    // Average them, and divide by 7 since we've counted the width of 3 black
    // modules, and 1 white and 1 black module on either side. Ergo, divide sum
    // by 14.
    return (moduleSizeEst1 + moduleSizeEst2) / 14.0;
  };

  /**
   * <p>Computes an average estimated module size based on estimated derived
   * from the positions of the three finder patterns.</p>
   */
  pro.calculateModuleSize = function(topLeft, topRight, bottomLeft) {
    // Take the average
    return (this.calculateModuleSizeOneWay(topLeft,
      topRight) + this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2.0;
  };

  pro.distance = function(pattern1, pattern2) {
    var xDiff = pattern1.x - pattern2.x;
    var yDiff = pattern1.y - pattern2.y;
    return Math.sqrt((xDiff * xDiff + yDiff * yDiff));
  };

  pro.computeDimension = function(topLeft, topRight, bottomLeft, moduleSize) {

    var tltrCentersDimension = this.distance(topLeft,
      topRight) / moduleSize;
    var tlblCentersDimension = this.distance(topLeft,
      bottomLeft) / moduleSize;
    var dimension = Math.round((
      tltrCentersDimension + tlblCentersDimension) / 2) + 7;
    switch (dimension % 4) {
      // mod 4
      case 0:
        dimension++;
        break;
      // 1? do nothing

      case 2:
        dimension--;
        break;

      case 3:
        // would it be better to do something like dimension += 2; ?
        // throw new NotFoundError();
        dimension += 2;
    }
    // Sometimes dimension is 17 - which is invalid. Why?
    return dimension;
  };

  /**
   * <p>Attempts to locate an alignment pattern in a limited region of the
   * image, which is
   * guessed to contain it. This method uses {@link AlignmentPattern}.</p>
   *
   * @param {number} overallEstModuleSize estimated module size so far.
   * @param {number} estAlignmentX x coordinate of center of area probably
   * containing alignment pattern.
   * @param {number} estAlignmentY y coordinate of above.
   * @param {number} allowanceFactor number of pixels in all directions to
   * search from the center.
   * @return {AlignmentPattern} if found, or null otherwise.
   */
  pro.findAlignmentInRegion = function(overallEstModuleSize, estAlignmentX,
                                       estAlignmentY, allowanceFactor) {
    // Look for an alignment pattern (3 modules in size) around where it
    // should be
    var allowance = Math.floor(allowanceFactor * overallEstModuleSize);
    var alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);
    var alignmentAreaRightX = Math.min(this.image.width - 1,
      estAlignmentX + allowance);
    if (alignmentAreaRightX - alignmentAreaLeftX <
      overallEstModuleSize * 3) {
      throw new NotFoundError();
    }

    var alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);
    var alignmentAreaBottomY = Math.min(this.image.height - 1,
      estAlignmentY + allowance);

    var alignmentFinder = new w69b.qr.AlignmentPatternFinder(this.image,
      alignmentAreaLeftX, alignmentAreaTopY,
      alignmentAreaRightX - alignmentAreaLeftX,
      alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize,
      this.resultPointCallback);
    return alignmentFinder.find();
  };

  pro.createTransform = function(topLeft, topRight, bottomLeft,
                                 alignmentPattern, dimension) {
    var dimMinusThree = dimension - 3.5;
    var bottomRightX;
    var bottomRightY;
    var sourceBottomRightX;
    var sourceBottomRightY;
    if (alignmentPattern != null) {
      bottomRightX = alignmentPattern.x;
      bottomRightY = alignmentPattern.y;
      sourceBottomRightX = sourceBottomRightY = dimMinusThree - 3.0;
    } else {
      // Don't have an alignment pattern, just make up the bottom-right point
      bottomRightX = (topRight.x - topLeft.x) + bottomLeft.x;
      bottomRightY = (topRight.y - topLeft.y) + bottomLeft.y;
      sourceBottomRightX = sourceBottomRightY = dimMinusThree;
    }

    var transform = PerspectiveTransform.quadrilateralToQuadrilateral(3.5,
      3.5,
      dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5,
      dimMinusThree, topLeft.x, topLeft.y, topRight.x, topRight.y,
      bottomRightX,
      bottomRightY, bottomLeft.x, bottomLeft.y);

    return transform;
  };

  pro.sampleGrid = function(image, transform, dimension) {
    var sampler = w69b.qr.GridSampler.getInstance();
    return sampler.sampleGridTransform(image, dimension, dimension, transform);
  };

  /**
   * TODO.
   * @param {w69b.qr.FinderPatternInfo} info info.
   * @return {!w69b.qr.DetectorResult} result.
   */
  pro.processFinderPatternInfo = function(info) {

    var topLeft = info.topLeft;
    var topRight = info.topRight;
    var bottomLeft = info.bottomLeft;

    var moduleSize = this.calculateModuleSize(topLeft, topRight, bottomLeft);
    if (moduleSize < 1.0) {
      throw new NotFoundError();
    }
    var dimension = this.computeDimension(topLeft, topRight, bottomLeft,
      moduleSize);
    var provisionalVersion = Version.getProvisionalVersionForDimension(
      dimension);
    var modulesBetweenFPCenters =
      provisionalVersion.getDimensionForVersion() - 7;

    var alignmentPattern = null;
    // Anything above version 1 has an alignment pattern
    if (provisionalVersion.alignmentPatternCenters.length > 0) {

      // Guess where a "bottom right" finder pattern would have been
      var bottomRightX = topRight.x - topLeft.x + bottomLeft.x;
      var bottomRightY = topRight.y - topLeft.y + bottomLeft.y;

      // Estimate that alignment pattern is closer by 3 modules
      // from "bottom right" to known top left location
      var correctionToTopLeft = 1.0 - 3.0 / modulesBetweenFPCenters;
      var estAlignmentX = Math.floor(topLeft.x +
        correctionToTopLeft * (bottomRightX - topLeft.x));
      var estAlignmentY = Math.floor(topLeft.y +
        correctionToTopLeft * (bottomRightY - topLeft.y));

      // Kind of arbitrary -- expand search radius before giving up
      for (var i = 4; i <= 16; i *= 2) {
        try {
          alignmentPattern =
            this.findAlignmentInRegion(moduleSize, estAlignmentX,
              estAlignmentY, i);
          break;
        }
        catch (err) {
          if (!(err instanceof NotFoundError))
            throw err;
          // try next round
        }
      }
      // If we didn't find alignment pattern... well try anyway without it
    }

    var transform = this.createTransform(topLeft, topRight, bottomLeft,
      alignmentPattern, dimension);

    var bits = this.sampleGrid(this.image, transform, dimension);

    var points;
    if (alignmentPattern == null) {
      points = [bottomLeft, topLeft, topRight];
    } else {
      points = [bottomLeft, topLeft, topRight, alignmentPattern];
    }
    return new DetectorResult(bits, points);
  };


  /**
   * @return {!w69b.qr.DetectorResult} result.
   */
  pro.detect = function() {
    var info = new w69b.qr.FinderPatternFinder(this.image,
      this.resultPointCallback).find();
    return this.processFinderPatternInfo(info);
  };
});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.ErrorCorrectionLevel');

goog.scope(function() {
  /**
   * See ISO 18004:2006, 6.5.1. This enum encapsulates the four error
   * correction levels defined by the QR code standard.
   *
   * @author Sean Owen
   * @author mb@w69b.com (Manuel Braun)
   *
   * @constructor
   */
  w69b.qr.ErrorCorrectionLevel = function(ordinal, bits, name) {
    this.ordinal = ordinal;
    this.bits = bits;
    this.name = name;
  };
  var ErrorCorrectionLevel = w69b.qr.ErrorCorrectionLevel;

  ErrorCorrectionLevel.L = new ErrorCorrectionLevel(0, 0x01, 'L');
  ErrorCorrectionLevel.M = new ErrorCorrectionLevel(1, 0x00, 'M');
  ErrorCorrectionLevel.Q = new ErrorCorrectionLevel(2, 0x03, 'Q');
  ErrorCorrectionLevel.H = new ErrorCorrectionLevel(3, 0x02, 'H');
  ErrorCorrectionLevel.FOR_BITS = [
    ErrorCorrectionLevel.M,
    ErrorCorrectionLevel.L,
    ErrorCorrectionLevel.H,
    ErrorCorrectionLevel.Q];

  /**
   * get by name.
   * @param {string} name one of 'L', 'M', 'Q', 'H';.
   * @return {ErrorCorrectionLevel} ec level or null if name is invalid.
   */
  ErrorCorrectionLevel.getByName = function(name) {
    var map = {'L': ErrorCorrectionLevel.L,
      'M': ErrorCorrectionLevel.M,
      'Q': ErrorCorrectionLevel.Q,
      'H': ErrorCorrectionLevel.H};
    if (map.hasOwnProperty(name)) {
      return map[name];
    } else {
      return null;
    }
  };

  var pro = ErrorCorrectionLevel.prototype;

  pro.getBits = function() {
    return this.bits;
  };

  /**
   * @return {string} debug string.
   */
  pro.toString = function() {
    return this.name;
  };

  /**
   * @param {number} bits int containing the two bits encoding a QR Code's
   * error correction level.
   * @return {!ErrorCorrectionLevel} representing the encoded error
   * correction level.
   */
  ErrorCorrectionLevel.forBits = function(bits) {
    if (bits < 0 || bits >= ErrorCorrectionLevel.FOR_BITS.length) {
      throw new Error();
    }
    return ErrorCorrectionLevel.FOR_BITS[bits];
  };
});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 Ported to JavaScript by Lazar Laszlo 2011

 lazarsoft@gmail.com, www.lazarsoft.info

 */

/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
goog.provide('w69b.qr.FormatInformation');
goog.provide('w69b.qr.URShift');
goog.require('w69b.qr.ErrorCorrectionLevel');

goog.scope(function() {


  /**
   *
   * @param {number} number todo.
   * @param {number} bits todo.
   * @return {number} todo.
   */
  w69b.qr.URShift = function(number, bits) {
    if (number >= 0)
      return number >> bits;
    else
      return (number >> bits) + (2 << ~bits);
  };
  var URShift = w69b.qr.URShift;


  /**
   * @param {number} formatInfo format information.
   * @constructor
   */
  w69b.qr.FormatInformation = function(formatInfo) {
    this.errorCorrectionLevel =
      w69b.qr.ErrorCorrectionLevel.forBits((formatInfo >> 3) & 0x03);
    this.dataMask = (formatInfo & 0x07);
  };
  var FormatInformation = w69b.qr.FormatInformation;
  var pro = FormatInformation.prototype;

  FormatInformation.FORMAT_INFO_MASK_QR = 0x5412;
  FormatInformation.FORMAT_INFO_DECODE_LOOKUP = [
    [0x5412, 0x00],
    [0x5125, 0x01],
    [0x5E7C, 0x02],
    [0x5B4B, 0x03],
    [0x45F9, 0x04],
    [0x40CE, 0x05],
    [0x4F97, 0x06],
    [0x4AA0, 0x07],
    [0x77C4, 0x08],
    [0x72F3, 0x09],
    [0x7DAA, 0x0A],
    [0x789D, 0x0B],
    [0x662F, 0x0C],
    [0x6318, 0x0D],
    [0x6C41, 0x0E],
    [0x6976, 0x0F],
    [0x1689, 0x10],
    [0x13BE, 0x11],
    [0x1CE7, 0x12],
    [0x19D0, 0x13],
    [0x0762, 0x14],
    [0x0255, 0x15],
    [0x0D0C, 0x16],
    [0x083B, 0x17],
    [0x355F, 0x18],
    [0x3068, 0x19],
    [0x3F31, 0x1A],
    [0x3A06, 0x1B],
    [0x24B4, 0x1C],
    [0x2183, 0x1D],
    [0x2EDA, 0x1E],
    [0x2BED, 0x1F]
  ];

  /**
   * Offset i holds the number of 1 bits in the binary representation of i
   */
  FormatInformation.BITS_SET_IN_HALF_BYTE = [0, 1, 1, 2, 1, 2, 2, 3,
    1, 2, 2, 3, 2, 3, 3, 4];

  pro.GetHashCode = function() {
    return (this.errorCorrectionLevel.ordinal << 3) | this.dataMask;
  };

  pro.Equals = function(other) {
    return this.errorCorrectionLevel == other.errorCorrectionLevel &&
      this.dataMask == other.dataMask;
  };

  FormatInformation.numBitsDiffering = function(a, b) {
    a ^= b; // a now has a 1 bit exactly where its bit differs with b's
    // Count bits set quickly with a series of lookups:
    return FormatInformation.BITS_SET_IN_HALF_BYTE[a & 0x0F] +
      FormatInformation.BITS_SET_IN_HALF_BYTE[(URShift(a, 4) & 0x0F)] +
      FormatInformation.BITS_SET_IN_HALF_BYTE[(URShift(a, 8) & 0x0F)] +
      FormatInformation.BITS_SET_IN_HALF_BYTE[(URShift(a, 12) & 0x0F)] +
      FormatInformation.BITS_SET_IN_HALF_BYTE[(URShift(a, 16) & 0x0F)] +
      FormatInformation.BITS_SET_IN_HALF_BYTE[(URShift(a, 20) & 0x0F)] +
      FormatInformation.BITS_SET_IN_HALF_BYTE[(URShift(a, 24) & 0x0F)] +
      FormatInformation.BITS_SET_IN_HALF_BYTE[(URShift(a, 28) & 0x0F)];
  };

  FormatInformation.decodeFormatInformation = function(maskedFormatInfo) {
    var formatInfo = FormatInformation.doDecodeFormatInformation(
      maskedFormatInfo);
    if (formatInfo != null) {
      return formatInfo;
    }
    // Should return null, but, some QR codes apparently
    // do not mask this info. Try again by actually masking the pattern
    // first
    return FormatInformation.doDecodeFormatInformation(maskedFormatInfo ^
      FormatInformation.FORMAT_INFO_MASK_QR);
  };

  FormatInformation.doDecodeFormatInformation = function(maskedFormatInfo) {
    // Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing
    var bestDifference = 0xffffffff;
    var bestFormatInfo = 0;
    for (var i = 0; i < FormatInformation.FORMAT_INFO_DECODE_LOOKUP.length;
         i++) {
      var decodeInfo = FormatInformation.FORMAT_INFO_DECODE_LOOKUP[i];
      var targetInfo = decodeInfo[0];
      if (targetInfo == maskedFormatInfo) {
        // Found an exact match
        return new FormatInformation(decodeInfo[1]);
      }
      var bitsDifference = FormatInformation.numBitsDiffering(
        maskedFormatInfo, targetInfo);
      if (bitsDifference < bestDifference) {
        bestFormatInfo = decodeInfo[1];
        bestDifference = bitsDifference;
      }
    }
    // Hamming distance of the 32 masked codes is 7, by construction,
    // so <= 3 bits differing means we found a match
    if (bestDifference <= 3) {
      return new FormatInformation(bestFormatInfo);
    }
    return null;
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 Ported to JavaScript by Lazar Laszlo 2011

 lazarsoft@gmail.com, www.lazarsoft.info

 */

/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.DataMask');
goog.require('w69b.qr.URShift');

goog.scope(function() {
  var URShift = w69b.qr.URShift;

  var _ = w69b.qr.DataMask;

  /** @interface */
  _.DataMaskInterface = function() {};

  /**
   * @param {w69b.qr.BitMatrix} bits bits.
   * @param {number} dim dimensions.
   */
  _.DataMaskInterface.prototype.unmaskBitMatrix = function(bits, dim) {};

  /**
   * @param {number} i idx.
   * @param {number} j idx.
   * @return {boolean} if position is masked.
   */
  _.DataMaskInterface.prototype.isMasked = function(i, j) {};


  /**
   * @param {number} reference mask number.
   * @return {!_.DataMaskInterface} data mask.
   */
  _.forReference = function(reference) {
    if (reference < 0 || reference > 7) {
      throw Error();
    }
    return _.DATA_MASKS_[reference];
  };

  /**
   * @constructor
   */
  _.DataMask000 = function() {
  };
  _.DataMask000.prototype.unmaskBitMatrix = function(bits, dimension) {
    for (var i = 0; i < dimension; i++) {
      for (var j = 0; j < dimension; j++) {
        if (this.isMasked(i, j)) {
          bits.flip(j, i);
        }
      }
    }
  };
  _.DataMask000.prototype.isMasked = function(i, j) {
    return ((i + j) & 0x01) == 0;
  };

  /**
   * @constructor
   */
  _.DataMask001 = function() {
  };
  _.DataMask001.prototype.unmaskBitMatrix = function(bits, dimension) {
    for (var i = 0; i < dimension; i++) {
      for (var j = 0; j < dimension; j++) {
        if (this.isMasked(i, j)) {
          bits.flip(j, i);
        }
      }
    }
  };
  _.DataMask001.prototype.isMasked = function(i, j) {
    return (i & 0x01) == 0;
  };

  /**
   * @constructor
   */
  _.DataMask010 = function() {
  };
  _.DataMask010.prototype.unmaskBitMatrix = function(bits, dimension) {
    for (var i = 0; i < dimension; i++) {
      for (var j = 0; j < dimension; j++) {
        if (this.isMasked(i, j)) {
          bits.flip(j, i);
        }
      }
    }
  };
  _.DataMask010.prototype.isMasked = function(i, j) {
    return j % 3 == 0;
  };

  /**
   * @constructor
   */
  _.DataMask011 = function() {

  };
  _.DataMask011.prototype.unmaskBitMatrix = function(bits, dimension) {
    for (var i = 0; i < dimension; i++) {
      for (var j = 0; j < dimension; j++) {
        if (this.isMasked(i, j)) {
          bits.flip(j, i);
        }
      }
    }
  };
  _.DataMask011.prototype.isMasked = function(i, j) {
    return (i + j) % 3 == 0;
  };


  /**
   * @constructor
   */
  _.DataMask100 = function() {
  };
  _.DataMask100.prototype.unmaskBitMatrix = function(bits, dimension) {
    for (var i = 0; i < dimension; i++) {
      for (var j = 0; j < dimension; j++) {
        if (this.isMasked(i, j)) {
          bits.flip(j, i);
        }
      }
    }
  };
  _.DataMask100.prototype.isMasked = function(i, j) {
    return (((URShift(i, 1)) + (j / 3)) & 0x01) == 0;
  };

  /**
   * @constructor
   */
  _.DataMask101 = function() {
  };

  _.DataMask101.prototype.unmaskBitMatrix = function(bits, dimension) {
    for (var i = 0; i < dimension; i++) {
      for (var j = 0; j < dimension; j++) {
        if (this.isMasked(i, j)) {
          bits.flip(j, i);
        }
      }
    }
  };

  _.DataMask101.prototype.isMasked = function(i, j) {
    var temp = i * j;
    return (temp & 0x01) + (temp % 3) == 0;
  };

  /**
   * @constructor
   */
  _.DataMask110 = function() {
  };
  _.DataMask110.prototype.unmaskBitMatrix = function(bits, dimension) {
    for (var i = 0; i < dimension; i++) {
      for (var j = 0; j < dimension; j++) {
        if (this.isMasked(i, j)) {
          bits.flip(j, i);
        }
      }
    }
  };
  _.DataMask110.prototype.isMasked = function(i, j) {
    var temp = i * j;
    return (((temp & 0x01) + (temp % 3)) & 0x01) == 0;
  };

  /**
   * @constructor
   */
  _.DataMask111 = function() {
  };
  _.DataMask111.prototype.unmaskBitMatrix = function(bits, dimension) {
    for (var i = 0; i < dimension; i++) {
      for (var j = 0; j < dimension; j++) {
        if (this.isMasked(i, j)) {
          bits.flip(j, i);
        }
      }
    }
  };
  _.DataMask111.prototype.isMasked = function(i, j) {
    return ((((i + j) & 0x01) + ((i * j) % 3)) & 0x01) == 0;
  };

  /**
   * @type {Array.<!_.DataMaskInterface>}
   * @private
   */
  _.DATA_MASKS_ = new Array(new _.DataMask000(), new _.DataMask001(),
    new _.DataMask010(), new _.DataMask011(), new _.DataMask100(),
    new _.DataMask101(),
    new _.DataMask110(), new _.DataMask111());

});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 Ported to JavaScript by Lazar Laszlo 2011

 lazarsoft@gmail.com, www.lazarsoft.info

 */

/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
goog.provide('w69b.qr.BitMatrixParser');
goog.require('w69b.qr.DataMask');
goog.require('w69b.qr.FormatError');
goog.require('w69b.qr.FormatInformation');
goog.require('w69b.qr.Version');

goog.scope(function() {
  var FormatInformation = w69b.qr.FormatInformation;
  var Version = w69b.qr.Version;
  var DataMask = w69b.qr.DataMask;
  var FormatError = w69b.qr.FormatError;

  /**
   * @param {w69b.qr.BitMatrix} bitMatrix matrix.
   * @constructor
   */
  w69b.qr.BitMatrixParser = function(bitMatrix) {
    var dimension = bitMatrix.getHeight();
    if (dimension < 21 || (dimension & 0x03) != 1) {
      throw new FormatError();
    }
    this.bitMatrix = bitMatrix;
    /**
     * @type {w69b.qr.Version}
     */
    this.parsedVersion = null;
    /**
     * @type {w69b.qr.FormatInformation}
     */
    this.parsedFormatInfo = null;
  };
  var BitMatrixParser = w69b.qr.BitMatrixParser;
  var pro = BitMatrixParser.prototype;

  pro.copyBit = function(i, j, versionBits) {
    return this.bitMatrix.get(i,
      j) ? (versionBits << 1) | 0x1 : versionBits << 1;
  };

  /**
   * @return {!w69b.qr.FormatInformation} format information.
   */
  pro.readFormatInformation = function() {
    if (this.parsedFormatInfo != null) {
      return this.parsedFormatInfo;
    }

    // Read top-left format info bits
    var formatInfoBits = 0;
    for (var i = 0; i < 6; i++) {
      formatInfoBits = this.copyBit(i, 8, formatInfoBits);
    }
    // .. and skip a bit in the timing pattern ...
    formatInfoBits = this.copyBit(7, 8, formatInfoBits);
    formatInfoBits = this.copyBit(8, 8, formatInfoBits);
    formatInfoBits = this.copyBit(8, 7, formatInfoBits);
    // .. and skip a bit in the timing pattern ...
    for (var j = 5; j >= 0; j--) {
      formatInfoBits = this.copyBit(8, j, formatInfoBits);
    }

    this.parsedFormatInfo =
      FormatInformation.decodeFormatInformation(formatInfoBits);
    if (this.parsedFormatInfo != null) {
      return this.parsedFormatInfo;
    }

    // Hmm, failed. Try the top-right/bottom-left pattern
    var dimension = this.bitMatrix.getHeight();
    formatInfoBits = 0;
    var iMin = dimension - 8;
    for (var i = dimension - 1; i >= iMin; i--) {
      formatInfoBits = this.copyBit(i, 8, formatInfoBits);
    }
    for (var j = dimension - 7; j < dimension; j++) {
      formatInfoBits = this.copyBit(8, j, formatInfoBits);
    }

    this.parsedFormatInfo =
      FormatInformation.decodeFormatInformation(formatInfoBits);
    if (this.parsedFormatInfo != null) {
      return this.parsedFormatInfo;
    }
    throw new FormatError();
  };

  /**
   * @return {w69b.qr.Version} version.
   */
  pro.readVersion = function() {
    if (this.parsedVersion != null) {
      return this.parsedVersion;
    }

    var dimension = this.bitMatrix.getHeight();

    var provisionalVersion = (dimension - 17) >> 2;
    if (provisionalVersion <= 6) {
      return Version.getVersionForNumber(provisionalVersion);
    }

    // Read top-right version info: 3 wide by 6 tall
    var versionBits = 0;
    var ijMin = dimension - 11;
    for (var j = 5; j >= 0; j--) {
      for (var i = dimension - 9; i >= ijMin; i--) {
        versionBits = this.copyBit(i, j, versionBits);
      }
    }

    this.parsedVersion = Version.decodeVersionInformation(versionBits);
    if (this.parsedVersion != null &&
      this.parsedVersion.getDimensionForVersion() == dimension) {
      return this.parsedVersion;
    }

    // Hmm, failed. Try bottom left: 6 wide by 3 tall
    versionBits = 0;
    for (var i = 5; i >= 0; i--) {
      for (var j = dimension - 9; j >= ijMin; j--) {
        versionBits = this.copyBit(i, j, versionBits);
      }
    }

    this.parsedVersion = Version.decodeVersionInformation(versionBits);
    if (this.parsedVersion != null &&
      this.parsedVersion.getDimensionForVersion() == dimension) {
      return this.parsedVersion;
    }
    throw new FormatError();
  };

  pro.readCodewords = function() {

    var formatInfo = this.readFormatInformation();
    var version = this.readVersion();

    // Get the data mask for the format used in this QR Code. This will exclude
    // some bits from reading as we wind through the bit matrix.
    var dataMask = DataMask.forReference(formatInfo.dataMask);
    var dimension = this.bitMatrix.getHeight();
    dataMask.unmaskBitMatrix(this.bitMatrix, dimension);

    var functionPattern = version.buildFunctionPattern();

    var readingUp = true;
    var result = new Array(version.totalCodewords);
    var resultOffset = 0;
    var currentByte = 0;
    var bitsRead = 0;
    // Read columns in pairs, from right to left
    for (var j = dimension - 1; j > 0; j -= 2) {
      if (j == 6) {
        // Skip whole column with vertical alignment pattern;
        // saves time and makes the other code proceed more cleanly
        j--;
      }
      // Read alternatingly from bottom to top then top to bottom
      for (var count = 0; count < dimension; count++) {
        var i = readingUp ? dimension - 1 - count : count;
        for (var col = 0; col < 2; col++) {
          // Ignore bits covered by the function pattern
          if (!functionPattern.get(j - col, i)) {
            // Read a bit
            bitsRead++;
            currentByte <<= 1;
            if (this.bitMatrix.get(j - col, i)) {
              currentByte |= 1;
            }
            // If we've made a whole byte, save it off
            if (bitsRead == 8) {
              result[resultOffset++] = currentByte;
              bitsRead = 0;
              currentByte = 0;
            }
          }
        }
      }
      readingUp ^= true; // readingUp = !readingUp; // switch directions
    }
    if (resultOffset != version.totalCodewords) {
      throw new FormatError();
    }
    return result;
  };
});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 Ported to JavaScript by Lazar Laszlo 2011

 lazarsoft@gmail.com, www.lazarsoft.info

 */

/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.DataBlock');

goog.scope(function() {

  /**
   * @constructor
   */
  w69b.qr.DataBlock = function(numDataCodewords, codewords) {
    this.numDataCodewords = numDataCodewords;
    this.codewords = codewords;
  };
  var DataBlock = w69b.qr.DataBlock;

  DataBlock.getDataBlocks = function(rawCodewords, version, ecLevel) {

    if (rawCodewords.length != version.totalCodewords) {
      throw 'ArgumentException';
    }

    // Figure out the number and size of data blocks used by this version and
    // error correction level
    var ecBlocks = version.getECBlocksForLevel(ecLevel);

    // First count the total number of data blocks
    var totalBlocks = 0;
    var ecBlockArray = ecBlocks.getECBlocks();
    for (var i = 0; i < ecBlockArray.length; i++) {
      totalBlocks += ecBlockArray[i].count;
    }

    // Now establish DataBlocks of the appropriate size and number of data
    // codewords
    var result = new Array(totalBlocks);
    var numResultBlocks = 0;
    for (var j = 0; j < ecBlockArray.length; j++) {
      var ecBlock = ecBlockArray[j];
      for (var i = 0; i < ecBlock.count; i++) {
        var numDataCodewords = ecBlock.dataCodewords;
        var numBlockCodewords = ecBlocks.ecCodewordsPerBlock + numDataCodewords;
        result[numResultBlocks++] = new DataBlock(numDataCodewords,
          new Array(numBlockCodewords));
      }
    }

    // All blocks have the same amount of data, except that the last n
    // (where n may be 0) have 1 more byte. Figure out where these start.
    var shorterBlocksTotalCodewords = result[0].codewords.length;
    var longerBlocksStartAt = result.length - 1;
    while (longerBlocksStartAt >= 0) {
      var numCodewords = result[longerBlocksStartAt].codewords.length;
      if (numCodewords == shorterBlocksTotalCodewords) {
        break;
      }
      longerBlocksStartAt--;
    }
    longerBlocksStartAt++;

    var shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords -
      ecBlocks.ecCodewordsPerBlock;
    // The last elements of result may be 1 element longer;
    // first fill out as many elements as all of them have
    var rawCodewordsOffset = 0;
    for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {
      for (var j = 0; j < numResultBlocks; j++) {
        result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];
      }
    }
    // Fill out the last data block in the longer ones
    for (var j = longerBlocksStartAt; j < numResultBlocks; j++) {
      result[j].codewords[shorterBlocksNumDataCodewords] =
        rawCodewords[rawCodewordsOffset++];
    }
    // Now add in error correction blocks
    var max = result[0].codewords.length;
    for (var i = shorterBlocksNumDataCodewords; i < max; i++) {
      for (var j = 0; j < numResultBlocks; j++) {
        var iOffset = j < longerBlocksStartAt ? i : i + 1;
        result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];
      }
    }
    return result;
  };

});


// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utility for fast string concatenation.
 */

goog.provide('goog.string.StringBuffer');



/**
 * Utility class to facilitate string concatenation.
 *
 * @param {*=} opt_a1 Optional first initial item to append.
 * @param {...*} var_args Other initial items to
 *     append, e.g., new goog.string.StringBuffer('foo', 'bar').
 * @constructor
 */
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};


/**
 * Internal buffer for the string to be concatenated.
 * @type {string}
 * @private
 */
goog.string.StringBuffer.prototype.buffer_ = '';


/**
 * Sets the contents of the string buffer object, replacing what's currently
 * there.
 *
 * @param {*} s String to set.
 */
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = '' + s;
};


/**
 * Appends one or more items to the buffer.
 *
 * Calling this with null, undefined, or empty arguments is an error.
 *
 * @param {*} a1 Required first string.
 * @param {*=} opt_a2 Optional second string.
 * @param {...*} var_args Other items to append,
 *     e.g., sb.append('foo', 'bar', 'baz').
 * @return {!goog.string.StringBuffer} This same StringBuffer object.
 * @suppress {duplicate}
 */
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  // Use a1 directly to avoid arguments instantiation for single-arg case.
  this.buffer_ += a1;
  if (opt_a2 != null) { // second argument is undefined (null == undefined)
    for (var i = 1; i < arguments.length; i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};


/**
 * Clears the internal buffer.
 */
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = '';
};


/**
 * @return {number} the length of the current contents of the buffer.
 */
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};


/**
 * @return {string} The concatenated string.
 * @override
 */
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Ported to js by Manuel Braun
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.BitSource');

goog.scope(function() {
  /** <p>This provides an easy abstraction to read bits at a time from a
   * sequence of bytes, where the number of bits read is not often a multiple
   * of 8.</p>
   *
   * <p>This class is thread-safe but not reentrant -- unless the caller
   * modifies the bytes array it passed in, in which case all bets are off.</p>
   *
   * @param {Array.<number>} bytes bytes bytes from which this will read bits.
   * Bits will be read from the first byte first.  Bits are read within a byte
   * from most-significant to least-significant bit.  @constructor
   * @constructor
   */
  w69b.qr.BitSource = function(bytes) {
    this.bytes_ = bytes;
    this.byteOffset_ = 0;
    this.bitOffset_ = 0;
  };
  var BitSource = w69b.qr.BitSource;
  var pro = BitSource.prototype;

  /**
   * @return {number} index of next bit in current byte which would be read by
   * the next call to readBits().
   */
  pro.getBitOffset = function() {
    return this.bitOffset_;
  };

  /**
  * @return {number} index of next byte in input byte array which would be read
  * by the next call to readBits().
   */
  pro.getByteOffset = function() {
    return this.byteOffset_;
  };

  /**
   * @param {number} numBits number of bits to read.  @return {number} int
   * representing the bits read. The bits will appear as the least-significant
   * bits of the int.
   */
  pro.readBits = function(numBits) {
    if (numBits < 1 || numBits > 32 || numBits > this.available()) {
      throw new Error();
    }

    var result = 0;

    // First, read remainder from current byte
    if (this.bitOffset_ > 0) {
      var bitsLeft = 8 - this.bitOffset_;
      var toRead = numBits < bitsLeft ? numBits : bitsLeft;
      var bitsToNotRead = bitsLeft - toRead;
      var mask = (0xFF >> (8 - toRead)) << bitsToNotRead;
      result = (this.bytes_[this.byteOffset_] & mask) >> bitsToNotRead;
      numBits -= toRead;
      this.bitOffset_ += toRead;
      if (this.bitOffset_ == 8) {
        this.bitOffset_ = 0;
        this.byteOffset_++;
      }
    }

    // Next read whole bytes
    if (numBits > 0) {
      while (numBits >= 8) {
        result = (result << 8) | (this.bytes_[this.byteOffset_] & 0xFF);
        this.byteOffset_++;
        numBits -= 8;
      }

      // Finally read a partial byte
      if (numBits > 0) {
        var bitsToNotRead = 8 - numBits;
        var mask = (0xFF >> bitsToNotRead) << bitsToNotRead;
        result = (result << numBits) |
          ((this.bytes_[this.byteOffset_] & mask) >> bitsToNotRead);
        this.bitOffset_ += numBits;
      }
    }
    return result;
  };

  /**
   * @return {number} number of bits that can be read successfully.
   */
  pro.available = function() {
    return 8 * (this.bytes_.length - this.byteOffset_) - this.bitOffset_;
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2008 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.CharacterSetECI');
goog.require('goog.object');

goog.scope(function() {

  var _ = w69b.qr.CharacterSetECI;
  /**
   * @type {Object} mapping eci codes to arrays of encoding names.
   */
  _.valuesToNames = {
    0: ['CP437'],
    2: ['CP437'],
    1: ['ISO-8859-1'],
    3: ['ISO-8859-1'],
    4: ['ISO-8859-2'],
    5: ['ISO-8859-3'],
    6: ['ISO-8859-4'],
    7: ['ISO-8859-5'],
    8: ['ISO-8859-6'],
    9: ['ISO-8859-7'],
    10: ['ISO-8859-7'],
    11: ['ISO-8859-9'],
    12: ['ISO-8859-10'],
    13: ['ISO-8859-11'],
    14: ['ISO-8859-12'],
    15: ['ISO-8859-13'],
    16: ['ISO-8859-14'],
    17: ['ISO-8859-15'],
    18: ['ISO-8859-16'],
    20: ['SHIFT_JIS'],
    21: ['ISO-8859-16'],
    22: ['Cp1251', 'windows-1251'],
    23: ['Cp1252', 'windows-1252'],
    24: ['Cp1256', 'windows-1256'],
    25: ['UTF-16BE', 'UnicodeBig'],
    26: ['UTF-8'],
    27: ['ASCII', 'US-ASCII'],
    170: ['ASCII', 'US-ASCII'],
    28: ['Big5'],
    29: ['GB18030', 'GB2312', 'EUC_CN', 'GBK'],
    30: ['EUC-KR']
  };
  _.namesToValues = {};
  /**
   * @private
   */
  _.buildNamesToValues_ = function() {
    goog.object.forEach(_.valuesToNames, function(names, num) {
      names.forEach(function(name) {
        if (!_.namesToValues[name])
          _.namesToValues[name] = num;
      });
    });
  };
  _.buildNamesToValues_();

  /**
   * @param {string} name of encoding.
   * @return {?number} eci value.
   */
  _.getValue = function(name) {
    return Number(_.namesToValues[name]);
  };

  /**
   * @param {number} value eci value.
   * @return {?string} main encoding name.
   */
  _.getName = function(value) {
    var names = _.valuesToNames[value];
    if (names)
      return names[0];
    else
      return null;
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.Mode');
goog.provide('w69b.qr.ModeEnum');

goog.scope(function() {
  /**
   * <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the
   * various modes in which data can be encoded to bits in the QR code
   * standard.</p>
   *
   * @author Sean Owen
   */
  /**
   *
   * @param {Array.<number>} characterCountBitsForVersions nodoc.
   * @param {number} bits nodoc.
   * @param {string=} opt_name name for testing.
   * @constructor
   */
  w69b.qr.Mode = function(characterCountBitsForVersions, bits, opt_name) {
    this.characterCountBitsForVersions = characterCountBitsForVersions;
    this.bits = bits;
    this.name_ = opt_name || 'NONAME';
  };
  var Mode = w69b.qr.Mode;
  var pro = Mode.prototype;


  /** @enum {Mode} */

  w69b.qr.ModeEnum = {
    // Not really a mode...
    TERMINATOR: new Mode([0, 0, 0], 0x00, 'TERMINATOR'),
    NUMERIC: new Mode([10, 12, 14], 0x01, 'NUMERIC'),
    ALPHANUMERIC: new Mode([9, 11, 13], 0x02, 'ALPHANUMERIC'),
    // Not supported
    STRUCTURED_APPEND: new Mode([0, 0, 0], 0x03, 'STRUCTURED_APPEND'),
    BYTE: new Mode([8, 16, 16], 0x04, 'BYTE'),
    ECI: new Mode([0, 0, 0], 0x07, 'ECI'), // character counts don't apply
    KANJI: new Mode([8, 10, 12], 0x08, 'KANJI'),
    FNC1_FIRST_POSITION: new Mode([0, 0, 0], 0x05, 'FNC1_FIRST_POSITION'),
    FNC1_SECOND_POSITION: new Mode([0, 0, 0], 0x09, 'FNC1_SECOND_POSITION'),
    /** See GBT 18284-2000; "Hanzi" is a transliteration of this mode name. */
    HANZI: new Mode([8, 10, 12], 0x0D, 'HANZI')
  };
  var ModeEnum = w69b.qr.ModeEnum;


  /**
   * @param {w69b.qr.Version} version version in question.
   * @return {number} number of bits used, in this QR Code symbol {@link Version} , to
   * encode the count of characters that will follow encoded in this Mode.
   */
  pro.getCharacterCountBits = function(version) {
    var number = version.versionNumber;
    var offset;
    if (number <= 9) {
      offset = 0;
    } else if (number <= 26) {
      offset = 1;
    } else {
      offset = 2;
    }
    return this.characterCountBitsForVersions[offset];
  };

  pro.getBits = function() {
    return this.bits;
  };

  /**
   * @return {string} debug string.
   */
  pro.toString = function() {
    return this.name_;
  };


  /**
   * @param {number} bits four bits encoding a QR Code data mode.
   * @return {Mode} Mode encoded by these bits.
   */
  Mode.forBits = function(bits) {
    switch (bits) {
      case 0x0:
        return ModeEnum.TERMINATOR;
      case 0x1:
        return ModeEnum.NUMERIC;
      case 0x2:
        return ModeEnum.ALPHANUMERIC;
      case 0x3:
        return ModeEnum.STRUCTURED_APPEND;
      case 0x4:
        return ModeEnum.BYTE;
      case 0x5:
        return ModeEnum.FNC1_FIRST_POSITION;
      case 0x7:
        return ModeEnum.ECI;
      case 0x8:
        return ModeEnum.KANJI;
      case 0x9:
        return ModeEnum.FNC1_SECOND_POSITION;
      case 0xD:
        // 0xD is defined in GBT 18284-2000, may not be supported in foreign
        // country
        return ModeEnum.HANZI;
      default:
        throw new Error();
    }
  };
});


goog.provide('w69b.utf8');
/**
 * @license
 * utf8.js
 * License: Apache2, v2 see http://www.apache.org/licenses/LICENSE-2.0
 * @author mb@w69b.com (Manuel Braun)
 */
(function(global) {
  /**
   * @license
   * Snippet fixedCharCodeAt borrowed from http://goo.gl/3lRpR.
   * (c) see contributers of site.
   * License: MIT
  */
  function fixedCharCodeAt(str, idx) {
      var code = str.charCodeAt(idx);
      var hi, low;
      // High surrogate (could change last hex to 0xDB7F to treat high private
      // surrogates as single characters)
      if (0xD800 <= code && code <= 0xDBFF) {
          hi = code;
          low = str.charCodeAt(idx + 1);
          if (isNaN(low)) {
            throw 'fixedCharCodeAt: Invalid Encoding';
          }
          return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
      }
      // We return false to allow loops to skip this iteration since should
      // have already handled high surrogate above in the previous iteration
      // Low surrogate
      if (0xDC00 <= code && code <= 0xDFFF) {
          return false;
      }
      return code;
  }

  /**
   * @license
   * fixedFromCodePoint
  * Convert array of unicode code points to string.
  * Originally from:
  * ES6 Unicode Shims 0.1
  * (c) 2012 Steven Levithan <http://slevithan.com/>
  * MIT License
  * @param {Array.<number>} codePoints codePoints sequence.
  * @return {string} resulting string.
  */
  function fixedFromCodePoint(codePoints) {
    var chars = [], point, offset, units, i;
    for (i = 0; i < codePoints.length; ++i) {
      point = codePoints[i];
      offset = point - 0x10000;
      units = point > 0xFFFF ?
        [0xD800 + (offset >> 10), 0xDC00 + (offset & 0x3FF)] : [point];
      chars.push(String.fromCharCode.apply(null, units));
    }
    return chars.join('');
  }

  /**
   * Convert string to UTF8 byte sequence.
   * @param {string} str javascript string (unicode).
   * @return {Array.<number>} byte sequence.
   */
  function stringToUTF8Bytes(str) {
    var bytes = [];
    for (var i = 0; i < str.length; ++i) {
      var codePoint = fixedCharCodeAt(str, i);
      // already handeled
      if (!codePoint) continue;
      if (codePoint <= 0x7F) {
        bytes.push(codePoint);
      } else if (codePoint <= 0x07FF) {
        bytes.push(0xC0 | (codePoint >> 6));
        bytes.push(0x80 | (codePoint & 0x3F));
      } else if (codePoint <= 0xFFFF) {
        bytes.push(0xE0 | (codePoint >> 12));
        bytes.push(0x80 | (0x3F & (codePoint >> 6)));
        bytes.push(0x80 | (codePoint & 0x3F));
      } else if (codePoint <= 0x1FFFFF) {
        bytes.push(0xF0 | (codePoint >> 18));
        bytes.push(0x80 | (0x3F & (codePoint >> 12)));
        bytes.push(0x80 | (0x3F & (codePoint >> 6)));
        bytes.push(0x80 | (codePoint & 0x3F));
      } else if (codePoint <= 0x3FFFFFF) {
        bytes.push(0xF0 | (codePoint >> 24));
        bytes.push(0x80 | (0x3F & (codePoint >> 18)));
        bytes.push(0x80 | (0x3F & (codePoint >> 12)));
        bytes.push(0x80 | (0x3F & (codePoint >> 6)));
        bytes.push(0x80 | (codePoint & 0x3F));
      } else {
        bytes.push(0xF0 | (0x01 & (codePoint >> 30)));
        bytes.push(0x80 | (0x3F & (codePoint >> 24)));
        bytes.push(0x80 | (0x3F & (codePoint >> 18)));
        bytes.push(0x80 | (0x3F & (codePoint >> 12)));
        bytes.push(0x80 | (0x3F & (codePoint >> 6)));
        bytes.push(0x80 | (codePoint & 0x3F));
      }
    }
    return bytes;
  }

  /**
   * Convert UTF8 byte sequence to string.
   * @param {Array.<number>} bytes UTF8 byte sequence.
   * @return {?string} result string or null on error (invalid input).
   */
  function UTF8BytesToString(bytes) {
    var length = bytes.length;
    var getContinuation = function(idx) {
      if (idx > length) throw new Error();
      var b = bytes[idx];
      if ((b & 0xC0) !== 0x80) throw new Error();
      return b & 0x3F;
    };
    var codePoints = [];
    try {
      for (var i = 0; i < length; ++i) {
        var b = bytes[i];
        if (b > 0xFF) return null;
        var code;
        if ((b & 0x80) === 0x00) {
          // First bit not set, so it is a 1-byte char.
          code = b;
        } else if ((b & 0xE0) === 0xC0) {
          // 2 bytes.
          code = ((0x1F & b) << 6) | getContinuation(i + 1);
          i += 1;
        } else if ((b & 0xF0) === 0xE0) {
          // 3 bytes.
          code = ((0x0F & b) << 12) |
            (getContinuation(i + 1) << 6) |
            getContinuation(i + 2);
          i += 2;
        } else if ((b & 0xF8) === 0xF0) {
          // 4 bytes.
          code = ((0x07 & b) << 18) |
            (getContinuation(i + 1) << 12) |
            (getContinuation(i + 2) << 6) |
            getContinuation(i + 3);
          i += 3;
        } else if ((b & 0xFC) === 0xF8) {
          // 5 bytes.
          code = ((0x03 & b) << 24) |
            (getContinuation(i + 1) << 18) |
            (getContinuation(i + 2) << 12) |
            (getContinuation(i + 3) << 6) |
            getContinuation(i + 4);
          i += 4;
        } else if ((b & 0xFE) === 0xFC) {
          // 6 bytes.
          code = ((0x01 & b) << 30) |
            (getContinuation(i + 1) << 24) |
            (getContinuation(i + 2) << 18) |
            (getContinuation(i + 3) << 12) |
            (getContinuation(i + 4) << 6) |
            getContinuation(i + 5);
          i += 5;
        }
        codePoints.push(code);
      }
    } catch (ignored) {
      // Our invalid-incoding exception is the only one thrown
      // this block, so just return null.
      return null;
    }
    return fixedFromCodePoint(codePoints);
  }

  // Public API.
  var exports = {
    stringToUTF8Bytes: stringToUTF8Bytes,
    UTF8BytesToString: UTF8BytesToString
  };

  if (typeof(goog) == 'object' && goog.provide) {
    // Google Closure Tools compatibility hook.
    w69b.utf8.stringToUTF8Bytes = stringToUTF8Bytes;
    w69b.utf8.UTF8BytesToString = UTF8BytesToString;
  } else if (typeof(global.define) == 'function') {
    // require js compatibility hook.
    global.define(exports);
  } else {
    // Plain old global export fallback.
    global['utf8'] = exports;
  }
})(self);

/*
 @license
 Singlebyte encodings values ported from iconv-lite (for nodejs).
 google closure/browser port 2013 by Manuel Braun (mb@w69b.com)

 LICENSE of iconve-lite:

 Copyright (c) 2011 Alexander Shtuchkin

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

goog.provide('w69b.iconvlite');
goog.require('w69b.utf8');
goog.require('goog.object');


goog.scope(function() {
  var _ = w69b.iconvlite;
  _.SINGLEBYTES = {
    'Cp1251': 'ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ\xa0ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя',
    'Cp1252': '€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ\xa0¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ',
    'Cp1256': '€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں\xa0،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے',
    'ISO-8859-1': '\xa0¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ',
    'ISO-8859-2': '\xa0Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙',
    'ISO-8859-3': '\xa0Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙',
    'ISO-8859-4': '\xa0ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙',
    'ISO-8859-5': '\xa0ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ',
    'ISO-8859-6': '\xa0���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������',
    'ISO-8859-7': '\xa0‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�',
    'ISO-8859-8': '\xa0�¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�',
    'ISO-8859-9': '\xa0¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ',
    'ISO-8859-10': '\xa0ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ',
    'ISO-8859-11': '\xa0กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����',
    'ISO-8859-13': '\xa0”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’',
    'ISO-8859-14': '\xa0Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ',
    'ISO-8859-15': '\xa0¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ',
    'ISO-8859-16': '\xa0ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ'
  };
  _.ASCII = '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f' +
    ' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f';

  _.REVERSE_MAPS_ = {};

  /**
   * @param {Array.<number>} bytes sequence of given charset.
   * @param {string} charset name of charset.
   * @return {string} decoded string.
   */
  _.toString = function(bytes, charset) {
    var chars = _.ASCII + _.SINGLEBYTES[charset];
    if (!chars) throw new Error();
    return bytes.map(function(b) {
      return chars[b];
    }).join('');
  };

  /**
   * @param {string} charset name as specified above.
   * @return {boolean} if charset is supported.
   */
  _.isSupported = function(charset) {
    return !!_.SINGLEBYTES[charset];
  };

  /**
   *
   * @param {string} string encoded in charset.
   * @param {string} charset charset name
   * @return {Array.<number>} bytes.
   */
  _.toBytes = function(string, charset) {
    var map = _.getReverseMap_(charset);
    var bytes = [];
    for (var i = 0; i < string.length; ++i) {
      var b = map[string[i]];
      if (b === undefined) return null;
      bytes.push(b);
    }
    return bytes;
  };

  /**
   * @param {string} charset name.
   * @return {Object} reverse map (mapping str to bytes).
   * @private
   */
  _.getReverseMap_ = function(charset) {
    var map = _.REVERSE_MAPS_[charset];
    if (!map) {
      map = {};
      var chars = _.ASCII + _.SINGLEBYTES[charset];
      if (!chars)
        throw new Error();
      for (var i = 0; i < chars.length; ++i) {
        map[chars[i]] = i;
      }
    }
    _.REVERSE_MAPS_[charset] = map;
    return map;
  };

  /**
   * @return {Array.<string>} supported charsets.
   */
  _.getSupportedCharsets = function() {
    return goog.object.getKeys(_.SINGLEBYTES);
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.stringutils');
goog.require('w69b.iconvlite');
goog.require('w69b.qr.DecodeHintType');
goog.require('w69b.qr.InvalidCharsetError');
goog.require('w69b.utf8');

goog.scope(function() {
  var _ = w69b.qr.stringutils;
  var utf8 = w69b.utf8;
  var iconv = self.iconv;
  var iconvlite = w69b.iconvlite;
  var InvalidCharsetError = w69b.qr.InvalidCharsetError;

  _.SHIFT_JIS = 'SHIFT_JIS';
  _.GB2312 = 'GB18030';
  _.EUC_JP = 'EUC-JP';
  _.UTF8 = 'UTF-8';
  _.ISO88591 = 'ISO-8859-1';
  _.PLATFORM_DEFAULT_ENCODING = _.UTF8;
  _.ASSUME_SHIFT_JIS = false;
  // SHIFT_JIS.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING) ||
  // EUC_JP.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING);


  /**
   * Decodes bytes bytes array as returned by getBytes().
   * @param {Array.<number>} bytes sequence of given charset.
   * @param {string=} opt_charset name of charset.
   * @return {string} decoded string.
   */
  _.bytesToString = function(bytes, opt_charset) {
    var charset = opt_charset || 'UTF-8';
    var str = null;

    // try native TextDecoder first
    if (self.TextDecoder && self.Uint8Array && self.Uint8Array['from']) {
      try {
        var decoder = new self.TextDecoder(charset);
        return decoder.decode(self.Uint8Array['from'](bytes));
      } catch (ignored) {
        // try other methods if charset is not supported by native decoder (eg. CP437 on Chrome).
      }
    }
    if (charset == 'UTF-8') {
      str = utf8.UTF8BytesToString(bytes);
    } else if (iconvlite.isSupported(charset)) {
      str = iconvlite.toString(bytes, charset);
    } else {
      if (!iconv)
        throw new InvalidCharsetError(
          'iconv not loaded, cannot handle ' + charset);
      var utf8Bytes = iconv.convert(bytes, charset, 'UTF-8');
      if (utf8Bytes === null)
        throw new InvalidCharsetError(
          'toStr ' + charset + ' to UTF-8 ' + bytes);
      bytes = utf8Bytes;
      str = utf8.UTF8BytesToString(bytes);
    }
    if (str === null)
      throw new InvalidCharsetError();
    return str;
  };

  /**
   * Note: charset is currently ignored.
   * Decodes bytes bytes array as returned by getBytes().
   * @param {string} str to encode.
   * @param {string=} opt_charset name of charset.
   * @return {Array.<number>} bytes.
   */
  _.stringToBytes = function(str, opt_charset) {
    var charset = opt_charset || 'UTF-8';
    var bytes = null;
    if (charset == 'UTF-8') {
      bytes = utf8.stringToUTF8Bytes(str);
      if (bytes === null)
        throw new InvalidCharsetError();
    } else if (iconvlite.isSupported(charset)) {
      bytes = iconvlite.toBytes(str, charset);
    } else {
      bytes = utf8.stringToUTF8Bytes(str);
      if (!iconv)
        throw new InvalidCharsetError('iconv not loaded');
      bytes = iconv.convert(bytes, 'UTF-8', charset);
    }
    if (bytes === null)
      throw new InvalidCharsetError(charset + ' to bytes: ' + str);
    return bytes;
  };

  /**
   * @param {Array.<number>} bytes bytes encoding a string, whose encoding
   * should be guessed.
   * @param {Object=} opt_hints decode hints if applicable.
   * @return {string} name of guessed encoding; at the moment will only
   * guess one of:
   *  {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform
   *  default encoding if none of these can possibly be correct.
   */
  _.guessEncoding = function(bytes, opt_hints) {
    if (opt_hints) {
      var characterSet = opt_hints.get(w69b.qr.DecodeHintType.CHARACTER_SET);
      if (characterSet) {
        return characterSet;
      }
    }
    // For now, merely tries to distinguish ISO-8859-1, UTF-8 and Shift_JIS,
    // which should be by far the most common encodings.
    var length = bytes.length;
    var canBeISO88591 = true;
    var canBeShiftJIS = true;
    var canBeUTF8 = true;
    var utf8BytesLeft = 0;
    //var utf8LowChars = 0;
    var utf2BytesChars = 0;
    var utf3BytesChars = 0;
    var utf4BytesChars = 0;
    var sjisBytesLeft = 0;
    //var sjisLowChars = 0;
    var sjisKatakanaChars = 0;
    //var sjisDoubleBytesChars = 0;
    var sjisCurKatakanaWordLength = 0;
    var sjisCurDoubleBytesWordLength = 0;
    var sjisMaxKatakanaWordLength = 0;
    var sjisMaxDoubleBytesWordLength = 0;
    //var isoLowChars = 0;
    //var isoHighChars = 0;
    var isoHighOther = 0;

    var utf8bom = bytes.length > 3 &&
      bytes[0] == 0xEF &&
      bytes[1] == 0xBB &&
      bytes[2] == 0xBF;

    for (var i = 0;
         i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8);
         i++) {

      var value = bytes[i] & 0xFF;

      // UTF-8 stuff
      if (canBeUTF8) {
        if (utf8BytesLeft > 0) {
          if ((value & 0x80) == 0) {
            canBeUTF8 = false;
          } else {
            utf8BytesLeft--;
          }
        } else if ((value & 0x80) != 0) {
          if ((value & 0x40) == 0) {
            canBeUTF8 = false;
          } else {
            utf8BytesLeft++;
            if ((value & 0x20) == 0) {
              utf2BytesChars++;
            } else {
              utf8BytesLeft++;
              if ((value & 0x10) == 0) {
                utf3BytesChars++;
              } else {
                utf8BytesLeft++;
                if ((value & 0x08) == 0) {
                  utf4BytesChars++;
                } else {
                  canBeUTF8 = false;
                }
              }
            }
          }
        } //else {
        //utf8LowChars++;
        //}
      }

      // ISO-8859-1 stuff
      if (canBeISO88591) {
        if (value > 0x7F && value < 0xA0) {
          canBeISO88591 = false;
        } else if (value > 0x9F) {
          if (value < 0xC0 || value == 0xD7 || value == 0xF7) {
            isoHighOther++;
          } //else {
          //isoHighChars++;
          //}
        } //else {
        //isoLowChars++;
        //}
      }

      // Shift_JIS stuff
      if (canBeShiftJIS) {
        if (sjisBytesLeft > 0) {
          if (value < 0x40 || value == 0x7F || value > 0xFC) {
            canBeShiftJIS = false;
          } else {
            sjisBytesLeft--;
          }
        } else if (value == 0x80 || value == 0xA0 || value > 0xEF) {
          canBeShiftJIS = false;
        } else if (value > 0xA0 && value < 0xE0) {
          sjisKatakanaChars++;
          sjisCurDoubleBytesWordLength = 0;
          sjisCurKatakanaWordLength++;
          if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {
            sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;
          }
        } else if (value > 0x7F) {
          sjisBytesLeft++;
          //sjisDoubleBytesChars++;
          sjisCurKatakanaWordLength = 0;
          sjisCurDoubleBytesWordLength++;
          if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {
            sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;
          }
        } else {
          //sjisLowChars++;
          sjisCurKatakanaWordLength = 0;
          sjisCurDoubleBytesWordLength = 0;
        }
      }
    }

    if (canBeUTF8 && utf8BytesLeft > 0) {
      canBeUTF8 = false;
    }
    if (canBeShiftJIS && sjisBytesLeft > 0) {
      canBeShiftJIS = false;
    }

    // Easy -- if there is BOM or at least 1 valid not-single byte character
    // (and no evidence it can't be UTF-8), done
    if (canBeUTF8 &&
      (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {
      return _.UTF8;
    }
    // Easy -- if assuming Shift_JIS or at least 3 valid consecutive not-ascii
    // characters (and no evidence it can't be), done
    if (canBeShiftJIS &&
      (_.ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 ||
        sjisMaxDoubleBytesWordLength >= 3)) {
      return _.SHIFT_JIS;
    }
    // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough for short
    // words. The crude heuristic is:
    // - If we saw
    //   - only two consecutive katakana chars in the whole text, or
    //   - at least 10% of bytes that could be "upper" not-alphanumeric Latin1,
    // - then we conclude Shift_JIS, else ISO-8859-1
    if (canBeISO88591 && canBeShiftJIS) {
      return (sjisMaxKatakanaWordLength == 2 && sjisKatakanaChars == 2) ||
        isoHighOther * 10 >= length ? _.SHIFT_JIS : _.ISO88591;
    }

    // Otherwise, try in order ISO-8859-1, Shift JIS, UTF-8 and fall back to
    // default platform encoding
    if (canBeISO88591) {
      return _.ISO88591;
    }
    if (canBeShiftJIS) {
      return _.SHIFT_JIS;
    }
    if (canBeUTF8) {
      return _.UTF8;
    }
    // Otherwise, we take a wild guess with platform encoding
    return _.PLATFORM_DEFAULT_ENCODING;
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.DecodedBitStreamParser');
goog.require('goog.string.StringBuffer');
goog.require('w69b.qr.BitSource');
goog.require('w69b.qr.CharacterSetECI');
goog.require('w69b.qr.FormatError');
goog.require('w69b.qr.Mode');
goog.require('w69b.qr.ModeEnum');
goog.require('w69b.qr.stringutils');

goog.scope(function() {
  var _ = w69b.qr.DecodedBitStreamParser;
  var BitSource = w69b.qr.BitSource;
  var Mode = w69b.qr.Mode;
  var ModeEnum = w69b.qr.ModeEnum;
  var StringBuffer = goog.string.StringBuffer;
  var stringutils = w69b.qr.stringutils;
  var FormatError = w69b.qr.FormatError;
  var CharacterSetECI = w69b.qr.CharacterSetECI;

  /**
   * <p>QR Codes can encode text as bits in one of several modes, and can use
   * multiple modes in one QR Code. This class decodes the bits back into
   * text.</p>
   *
   * <p>See ISO 18004:2006, 6.4.3 - 6.4.7</p>
   *
   * @author Sean Owen
   */

  /**
   * See ISO 18004:2006, 6.4.4 Table 5
   */
  _.ALPHANUMERIC_CHARS = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',
    'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
    'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    ' ', '$', '%', '*', '+', '-', '.', '/', ':'
  ];
  _.GB2312_SUBSET = 1;


  /**
   * @param {Array.<number>} bytes byte blocks.
   * @param {w69b.qr.Version} version qr code version.
   * @param {w69b.qr.ErrorCorrectionLevel} ecLevel error correction level.
   * @return {string} decoded string.
   */
  _.decode = function(bytes, version, ecLevel) {
    var bits = new BitSource(bytes);
    var result = new StringBuffer();
    /**
     * @type {Array.<number>}
     */
    var byteSegments = [];
    var fc1InEffect = false;
    var mode;
    var currentCharacterSet = null;
    do {
      // While still another segment to read...
      if (bits.available() < 4) {
        // OK, assume we're done. Really, a TERMINATOR mode should have been
        // recorded here
        mode = ModeEnum.TERMINATOR;
      } else {
        mode = Mode.forBits(bits.readBits(4)); // mode is encoded by 4 bits
      }
      if (mode != ModeEnum.TERMINATOR) {
        if (mode == ModeEnum.FNC1_FIRST_POSITION ||
          mode == ModeEnum.FNC1_SECOND_POSITION) {
          // We do little with FNC1 except alter the parsed result a bit
          // according to the spec
          fc1InEffect = true;
        } else if (mode == ModeEnum.STRUCTURED_APPEND) {
          if (bits.available() < 16) {
            throw new FormatError();  // FormatException.getFormatInstance();
          }
          // not really supported; all we do is ignore it Read next 8 bits
          // (symbol sequence #) and 8 bits (parity data), then continue
          bits.readBits(16);
        } else if (mode == ModeEnum.ECI) {
          // Count doesn't apply to ECI
          var value = _.parseECIValue(bits);
          currentCharacterSet = CharacterSetECI.getName(value);
          if (currentCharacterSet == null)
            throw new FormatError();
        } else {
          // First handle Hanzi mode which does not start with character count
          if (mode == ModeEnum.HANZI) {
            //chinese mode contains a sub set indicator right after mode
            //indicator
            var subset = bits.readBits(4);
            var countHanzi = bits.readBits(
              mode.getCharacterCountBits(version));
            if (subset == _.GB2312_SUBSET) {
              _.decodeHanziSegment(bits, result, countHanzi);
            }
          } else {
            // "Normal" QR code modes:
            // How many characters will follow, encoded in this mode?
            var count = bits.readBits(mode.getCharacterCountBits(version));
            if (mode == ModeEnum.NUMERIC) {
              _.decodeNumericSegment(bits, result, count);
            } else if (mode == ModeEnum.ALPHANUMERIC) {
              _.decodeAlphanumericSegment(bits, result, count, fc1InEffect);
            } else if (mode == ModeEnum.BYTE) {
              _.decodeByteSegment(bits, result, count,
                currentCharacterSet, byteSegments);
            } else if (mode == ModeEnum.KANJI) {
              _.decodeKanjiSegment(bits, result, count);
            } else {
              throw new FormatError();  //FormatException.getFormatInstance();
            }
          }
        }
      }
    } while (mode != ModeEnum.TERMINATOR);

    return result.toString();
  };

  /**
   * See specification GBT 18284-2000
   * @param {BitSource} bits bits.
   * @param {StringBuffer} result string buffer.
   * @param {number} count bytes to decode.
   */
  _.decodeHanziSegment = function(bits, result, count) {
    // Don't crash trying to read more bits than we have available.
    if (count * 13 > bits.available()) {
      throw new FormatError();  // FormatException.getFormatInstance();
    }

    // Each character will require 2 bytes. Read the characters as 2-byte pairs
    // and decode as GB2312 afterwards
    var buffer = new Array(2 * count);
    var offset = 0;
    while (count > 0) {
      // Each 13 bits encodes a 2-byte character
      var twoBytes = bits.readBits(13);
      var assembledTwoBytes = ((twoBytes / 0x060) << 8) | (twoBytes % 0x060);
      if (assembledTwoBytes < 0x003BF) {
        // In the 0xA1A1 to 0xAAFE range
        assembledTwoBytes += 0x0A1A1;
      } else {
        // In the 0xB0A1 to 0xFAFE range
        assembledTwoBytes += 0x0A6A1;
      }
      buffer[offset] = ((assembledTwoBytes >> 8) & 0xFF);
      buffer[offset + 1] = (assembledTwoBytes & 0xFF);
      offset += 2;
      count--;
    }

    result.append(stringutils.bytesToString(buffer, 'GB2312'));
    // result.append(new String(buffer, StringUtils.GB2312));
  };

  /**
   * @param {BitSource} bits bits.
   * @param {StringBuffer} result string buffer.
   * @param {number} count bytes to decode.
   */
  _.decodeKanjiSegment = function(bits, result, count) {
    // Don't crash trying to read more bits than we have available.
    if (count * 13 > bits.available()) {
      throw new FormatError();
    }

    // Each character will require 2 bytes. Read the characters as 2-byte pairs
    // and decode as Shift_JIS afterwards
    var buffer = new Array(2 * count);
    var offset = 0;
    while (count > 0) {
      // Each 13 bits encodes a 2-byte character
      var twoBytes = bits.readBits(13);
      var assembledTwoBytes = ((twoBytes / 0x0C0) << 8) | (twoBytes % 0x0C0);
      if (assembledTwoBytes < 0x01F00) {
        // In the 0x8140 to 0x9FFC range
        assembledTwoBytes += 0x08140;
      } else {
        // In the 0xE040 to 0xEBBF range
        assembledTwoBytes += 0x0C140;
      }
      buffer[offset] = (assembledTwoBytes >> 8);
      buffer[offset + 1] = assembledTwoBytes;
      offset += 2;
      count--;
    }
    // Shift_JIS may not be supported in some environments:
    result.append(stringutils.bytesToString(buffer, 'SJIS'));
  };

  /**
   * @param {BitSource} bits bits.
   * @param {StringBuffer} result string buffer.
   * @param {number} count bytes to decode.
   * @param {?string} characterSetEciName character set eci name.
   * @param {Array.<number>} byteSegments raw bytes.
   */
  _.decodeByteSegment = function(bits, result, count,
                                 characterSetEciName, byteSegments) {
    // Don't crash trying to read more bits than we have available.
    if (count << 3 > bits.available()) {
      throw new FormatError();  //FormatException.getFormatInstance();
    }

    var readBytes = new Array(count);
    for (var i = 0; i < count; i++) {
      readBytes[i] = bits.readBits(8);
    }
    // var encoding = stringutils.guessEncoding(readBytes);
    // TODO: We cannot decode non-unicode strings yet.
    var encoding;
    if (!characterSetEciName) {
      // The spec isn't clear on this mode; see
      // section 6.4.5: t does not say which encoding to assuming
      // upon decoding. I have seen ISO-8859-1 used as well as
      // Shift_JIS -- without anything like an ECI designator to
      // give a hint.
      encoding = stringutils.guessEncoding(readBytes);
    } else {
      encoding = characterSetEciName;
    }
    result.append(stringutils.bytesToString(readBytes, encoding));
    byteSegments.push(readBytes);
  };

  /**
   * @param {number} value character.
   * @return {string} char.
   */
  _.toAlphaNumericChar = function(value) {
    if (value >= _.ALPHANUMERIC_CHARS.length) {
      throw new FormatError();  // FormatException.getFormatInstance();
    }
    return _.ALPHANUMERIC_CHARS[Math.floor(value)];
  };

  /**
   * @param {BitSource} bits bits.
   * @param {StringBuffer} result string buffer.
   * @param {number} count bytes to decode.
   * @param {boolean} fc1InEffect flag.
   */
  _.decodeAlphanumericSegment = function(bits, result, count, fc1InEffect) {
    // Read two characters at a time
    var start = result.getLength();
    while (count > 1) {
      if (bits.available() < 11) {
        throw new FormatError();  // throw FormatException.getFormatInstance();
      }
      var nextTwoCharsBits = bits.readBits(11);
      result.append(_.toAlphaNumericChar(nextTwoCharsBits / 45));
      result.append(_.toAlphaNumericChar(nextTwoCharsBits % 45));
      count -= 2;
    }
    if (count == 1) {
      // special case: one character left
      if (bits.available() < 6) {
        throw new FormatError();  // FormatException.getFormatInstance();
      }
      result.append(_.toAlphaNumericChar(bits.readBits(6)));
    }
    // See section 6.4.8.1, 6.4.8.2
    // if (fc1InEffect) {
    //   // We need to massage the result a bit if in an FNC1 mode:
    //   // TODO: subclass stringbuffer and add required methods.
    //   for (var i = start; i < result.getLength(); i++) {
    //     if (result.charAt(i) == '%') {
    //       if (i < result.length() - 1 && result.charAt(i + 1) == '%') {
    //         // %% is rendered as %
    //         result.deleteCharAt(i + 1);
    //       } else {
    //         // In alpha mode, % should be converted to FNC1 separator 0x1D
    //         result.setCharAt(i, 0x1D);
    //       }
    //     }
    //   }
    // }
  };

  /**
   * @param {BitSource} bits bits.
   * @param {StringBuffer} result string buffer.
   * @param {number} count bytes to decode.
   */
  _.decodeNumericSegment = function(bits, result, count) {
    // Read three digits at a time
    while (count >= 3) {
      // Each 10 bits encodes three digits
      if (bits.available() < 10) {
        throw new FormatError();  // FormatException.getFormatInstance();
      }
      var threeDigitsBits = bits.readBits(10);
      if (threeDigitsBits >= 1000) {
        throw new FormatError();  // FormatException.getFormatInstance();
      }
      result.append(_.toAlphaNumericChar(threeDigitsBits / 100));
      result.append(_.toAlphaNumericChar((threeDigitsBits / 10) % 10));
      result.append(_.toAlphaNumericChar(threeDigitsBits % 10));
      count -= 3;
    }
    if (count == 2) {
      // Two digits left over to read, encoded in 7 bits
      if (bits.available() < 7) {
        throw new FormatError();  // FormatException.getFormatInstance();
      }
      var twoDigitsBits = bits.readBits(7);
      if (twoDigitsBits >= 100) {
        throw new FormatError();  // FormatException.getFormatInstance();
      }
      result.append(_.toAlphaNumericChar(twoDigitsBits / 10));
      result.append(_.toAlphaNumericChar(twoDigitsBits % 10));
    } else if (count == 1) {
      // One digit left over to read
      if (bits.available() < 4) {
        throw new FormatError();  // FormatException.getFormatInstance();
      }
      var digitBits = bits.readBits(4);
      if (digitBits >= 10) {
        throw new FormatError();  // FormatException.getFormatInstance();
      }
      result.append(_.toAlphaNumericChar(digitBits));
    }
  };

  _.parseECIValue = function(bits) {
    var firstByte = bits.readBits(8);
    if ((firstByte & 0x80) == 0) {
      // just one byte
      return firstByte & 0x7F;
    }
    if ((firstByte & 0xC0) == 0x80) {
      // two bytes
      var secondByte = bits.readBits(8);
      return ((firstByte & 0x3F) << 8) | secondByte;
    }
    if ((firstByte & 0xE0) == 0xC0) {
      // three bytes
      var secondThirdBytes = bits.readBits(16);
      return ((firstByte & 0x1F) << 16) | secondThirdBytes;
    }
    throw new FormatError();  // FormatException.getFormatInstance();
  };

});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 Ported to JavaScript by Lazar Laszlo 2011

 lazarsoft@gmail.com, www.lazarsoft.info

 */

/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.GF256Poly');
goog.require('goog.asserts');

/**
 * <p>Represents a polynomial whose coefficients are elements of a GF.
 * Instances of this class are immutable.</p>
 *
 * <p>Much credit is due to William Rucklidge since portions of this code
 * are an indirect port of his C++ Reed-Solomon implementation.</p>
 *
 * @author Sean Owen
 */


goog.scope(function() {

  /**
   * GF256Polys do not have same GF256 field.
   * @param {string=} opt_message Additional message.
   * @constructor
   * @extends {Error}
   */
  w69b.qr.WrongFieldError = function(opt_message) {
    goog.base(this, opt_message);
  };
  goog.inherits(w69b.qr.WrongFieldError, Error);
  var WrongFieldError = w69b.qr.WrongFieldError;



  /**
   * @param {!w69b.qr.GF256} field field.
   * @param {Array} coefficients coefficients.
   * @constructor
   */
  w69b.qr.GF256Poly = function(field, coefficients) {
    goog.asserts.assert(coefficients != null && coefficients.length != 0);
    this.field = field;
    var coefficientsLength = coefficients.length;
    if (coefficientsLength > 1 && coefficients[0] == 0) {
      // Leading term must be non-zero for anything except the constant
      // polynomial "0"
      var firstNonZero = 1;
      while (firstNonZero < coefficientsLength &&
        coefficients[firstNonZero] == 0) {
        firstNonZero++;
      }
      if (firstNonZero == coefficientsLength) {
        this.coefficients = field.zero.coefficients;
      } else {
        this.coefficients = new Array(coefficientsLength - firstNonZero);
        for (var i = 0; i < this.coefficients.length; i++)this.coefficients[i] =
          0;
        for (var ci = 0; ci <
          this.coefficients.length; ci++)this.coefficients[ci] =
          coefficients[firstNonZero + ci];
      }
    } else {
      this.coefficients = coefficients;
    }
  };
  var GF256Poly = w69b.qr.GF256Poly;
  var pro = GF256Poly.prototype;


  /**
   * Calculates a ^ b.
   * @param {number} a number.
   * @param {number} b number.
   * @return {number} result.
   */
  GF256Poly.addOrSubtractScalar = function(a, b) {
    return a ^ b;
  };

  pro.isZero = function() {
    return this.coefficients[0] == 0;
  };

  pro.getDegree = function() {
    return this.coefficients.length - 1;
  };

  pro.getCoefficient = function(degree) {
    return this.coefficients[this.coefficients.length - 1 - degree];
  };

  pro.evaluateAt = function(a) {
    if (a == 0) {
      // Just return the x^0 coefficient
      return this.getCoefficient(0);
    }
    var size = this.coefficients.length;
    if (a == 1) {
      // Just the sum of the coefficients
      var result = 0;
      for (var i = 0; i < size; i++) {
        result = GF256Poly.addOrSubtractScalar(result, this.coefficients[i]);
      }
      return result;
    }
    var result2 = this.coefficients[0];
    for (var i = 1; i < size; i++) {
      result2 = GF256Poly.addOrSubtractScalar(this.field.multiply(a, result2),
        this.coefficients[i]);
    }
    return result2;
  };

  /**
   * Add or substract other  poly.
   * @param {!w69b.qr.GF256Poly} other other poly.
   * @return {!w69b.qr.GF256Poly} result.
   */
  pro.addOrSubtract = function(other) {
    if (this.field != other.field) {
      throw new WrongFieldError();
    }
    if (this.isZero()) {
      return other;
    }
    if (other.isZero()) {
      return this;
    }

    var smallerCoefficients = this.coefficients;
    var largerCoefficients = other.coefficients;
    if (smallerCoefficients.length > largerCoefficients.length) {
      var temp = smallerCoefficients;
      smallerCoefficients = largerCoefficients;
      largerCoefficients = temp;
    }
    var sumDiff = new Array(largerCoefficients.length);
    var lengthDiff = largerCoefficients.length - smallerCoefficients.length;
    // Copy high-order terms only found in higher-degree polynomial's
    // coefficients
    for (var ci = 0; ci < lengthDiff; ci++)sumDiff[ci] =
      largerCoefficients[ci];

    for (var i = lengthDiff; i < largerCoefficients.length; i++) {
      sumDiff[i] = GF256Poly.addOrSubtractScalar(
        smallerCoefficients[i - lengthDiff],
        largerCoefficients[i]);
    }

    return new GF256Poly(this.field, sumDiff);
  };

  /**
   * Multiply with other poly.
   * @param {!w69b.qr.GF256Poly} other other poly.
   * @return {w69b.qr.GF256Poly} result.
   */
  pro.multiply1 = function(other) {
    if (this.field != other.field) {
      throw new WrongFieldError();
    }
    if (this.isZero() || other.isZero()) {
      return this.field.zero;
    }
    var aCoefficients = this.coefficients;
    var aLength = aCoefficients.length;
    var bCoefficients = other.coefficients;
    var bLength = bCoefficients.length;
    var product = new Array(aLength + bLength - 1);
    for (var i = 0; i < aLength; i++) {
      var aCoeff = aCoefficients[i];
      for (var j = 0; j < bLength; j++) {
        product[i + j] = GF256Poly.addOrSubtractScalar(product[i + j],
          this.field.multiply(aCoeff, bCoefficients[j]));
      }
    }
    return new GF256Poly(this.field, product);
  };

  /**
   * Multiply with scalar.
   * @param {!number} scalar other poly.
   * @return {w69b.qr.GF256Poly} result.
   */
  pro.multiply2 = function(scalar) {
    if (scalar == 0) {
      return this.field.zero;
    }
    if (scalar == 1) {
      return this;
    }
    var size = this.coefficients.length;
    var product = new Array(size);
    for (var i = 0; i < size; i++) {
      product[i] = this.field.multiply(this.coefficients[i], scalar);
    }
    return new GF256Poly(this.field, product);
  };
  /**
   * TODO.
   * @return {!w69b.qr.GF256Poly} result.
   */
  pro.multiplyByMonomial = function(degree, coefficient) {
    goog.asserts.assert(degree >= 0);
    if (coefficient == 0) {
      return this.field.zero;
    }
    var size = this.coefficients.length;
    var product = new Array(size + degree);
    for (var i = 0; i < product.length; i++) {
      product[i] = 0;
    }
    for (var i = 0; i < size; i++) {
      product[i] = this.field.multiply(this.coefficients[i], coefficient);
    }
    return new GF256Poly(this.field, product);
  };

  /**
   * Divide by other poly.
   * @param {!w69b.qr.GF256Poly} other other poly.
   * @return {Array.<w69b.qr.GF256Poly>} result (quotient, remainder).
   */
  pro.divide = function(other) {
    if (this.field != other.field) {
      throw new WrongFieldError();
    }
    goog.asserts.assert(!other.isZero());

    var quotient = this.field.zero;
    var remainder = this;

    var denominatorLeadingTerm = other.getCoefficient(other.getDegree());
    var inverseDenominatorLeadingTerm = this.field.inverse(
      denominatorLeadingTerm);

    while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {
      var degreeDifference = remainder.getDegree() - other.getDegree();
      var scale = this.field.multiply(
        remainder.getCoefficient(remainder.getDegree()),
        inverseDenominatorLeadingTerm);
      var term = other.multiplyByMonomial(degreeDifference, scale);
      var iterationQuotient = this.field.buildMonomial(degreeDifference,
        scale);
      quotient = quotient.addOrSubtract(iterationQuotient);
      remainder = remainder.addOrSubtract(term);
    }

    return new Array(quotient, remainder);
  };

  pro.toString = function() {
    var result = [];
    for (var degree = this.getDegree(); degree >= 0; degree--) {
      var coefficient = this.getCoefficient(degree);
      if (coefficient != 0) {
        if (coefficient < 0) {
          result.push(' - ');
          coefficient = -coefficient;
        } else {
          if (result.length > 0) {
            result.push(' + ');
          }
        }
        if (degree == 0 || coefficient != 1) {
          var alphaPower = this.field.log(coefficient);
          if (alphaPower == 0) {
            result.push('1');
          } else if (alphaPower == 1) {
            result.push('a');
          } else {
            result.push('a^');
            result.push(alphaPower);
          }
        }
        if (degree != 0) {
          if (degree == 1) {
            result.push('x');
          } else {
            result.push('x^');
            result.push(degree);
          }
        }
      }
    }
    return result.join('');
  };


});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 Ported to JavaScript by Lazar Laszlo 2011

 lazarsoft@gmail.com, www.lazarsoft.info

 */

/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.GF256');
goog.require('w69b.qr.GF256Poly');

goog.scope(function() {
  var GF256Poly = w69b.qr.GF256Poly;

  /**
   * @param {number} primitive number.
   * @constructor
   */
  w69b.qr.GF256 = function(primitive) {
    this.expTable = new Array(256);
    this.logTable = new Array(256);
    var x = 1;
    for (var i = 0; i < 256; i++) {
      this.expTable[i] = x;
      x <<= 1; // x = x * 2; we're assuming the generator alpha is 2
      if (x >= 0x100) {
        x ^= primitive;
      }
    }
    for (var i = 0; i < 255; i++) {
      this.logTable[this.expTable[i]] = i;
    }
    // logTable[0] == 0 but this should never be used
    var at0 = new Array(1);
    at0[0] = 0;
    this.zero = new GF256Poly(this, new Array(at0));
    var at1 = new Array(1);
    at1[0] = 1;
    this.one = new GF256Poly(this, new Array(at1));
  };
  var GF256 = w69b.qr.GF256;
  var pro = GF256.prototype;

  /**
   * @return {!GF256Poly} poly.
   */
  pro.buildMonomial = function(degree, coefficient) {
    if (degree < 0) {
      throw Error();
    }
    if (coefficient == 0) {
      return this.zero;
    }
    var coefficients = new Array(degree + 1);
    for (var i = 0; i < coefficients.length; i++)coefficients[i] = 0;
    coefficients[0] = coefficient;
    return new GF256Poly(this, coefficients);
  };
  pro.exp = function(a) {
    return this.expTable[a];
  };
  pro.log = function(a) {
    if (a == 0) {
      throw Error();
    }
    return this.logTable[a];
  };
  pro.inverse = function(a) {
    if (a == 0) {
      throw Error();
    }
    return this.expTable[255 - this.logTable[a]];
  };
  pro.multiply = function(a, b) {
    if (a == 0 || b == 0) {
      return 0;
    }
    if (a == 1) {
      return b;
    }
    if (b == 1) {
      return a;
    }
    return this.expTable[(this.logTable[a] + this.logTable[b]) % 255];
  };

  GF256.QR_CODE_FIELD = new GF256(0x011D);
  GF256.DATA_MATRIX_FIELD = new GF256(0x012D);

});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 Ported to JavaScript by Lazar Laszlo 2011

 lazarsoft@gmail.com, www.lazarsoft.info

 */

/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.ReedSolomonDecoder');
goog.require('w69b.qr.GF256Poly');
goog.require('w69b.qr.ReaderError');

/**
 * <p>Implements Reed-Solomon decoding, as the name implies.</p>
 *
 * <p>The algorithm will not be explained here, but the following references
 * were helpful
 * in creating this implementation:</p>
 *
 * <ul>
 * <li>Bruce Maggs.
 * <a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/project/pscico-guyb/realworld
 * /www/rs_decode.ps">
 * "Decoding Reed-Solomon Codes"</a> (see discussion of Forney's Formula)</li>
 * <li>J.I. Hall. <a href="www.mth.msu.edu/~jhall/classes/codenotes/GRS.pdf">
 * "Chapter 5. Generalized Reed-Solomon Codes"</a>
 * (see discussion of Euclidean algorithm)</li>
 * </ul>
 *
 * <p>Much credit is due to William Rucklidge since portions of this code are
 * an indirect port of his C++ Reed-Solomon implementation.</p>
 *
 * @author Sean Owen
 * @author William Rucklidge
 * @author sanfordsquires
 */


goog.scope(function() {
  var GF256Poly = w69b.qr.GF256Poly;

  /**
   * @constructor
   * @param {string=} opt_msg message.
   * @extends {w69b.qr.ReaderError}
   */
  w69b.qr.ReedSolomonError = function(opt_msg) {
    goog.base(this, opt_msg);
  };
  goog.inherits(w69b.qr.ReedSolomonError, w69b.qr.ReaderError);
  var ReedSolomonError = w69b.qr.ReedSolomonError;
  /**
   * @constructor
   * @param {!w69b.qr.GF256} field field.
   */
  w69b.qr.ReedSolomonDecoder = function(field) {
    this.field = field;
  };
  var ReedSolomonDecoder = w69b.qr.ReedSolomonDecoder;
  var pro = ReedSolomonDecoder.prototype;

  /**
   * <p>Decodes given set of received codewords, which include both data and
   * error-correction codewords.
   * Really, this means it uses Reed-Solomon to detect and correct  errors,
   * in-place, in the input.</p>
   *
   * @param {Array.<number>} received data and error-correction codewords.
   * @param {number} twoS number of error-correction codewords available.
   */
  pro.decode = function(received, twoS) {
    var poly = new GF256Poly(this.field, received);
    var syndromeCoefficients = new Array(twoS);
    for (var i = 0; i <
      syndromeCoefficients.length; i++)syndromeCoefficients[i] = 0;
    var dataMatrix = false;//this.field.Equals(GF256.DATA_MATRIX_FIELD);
    var noError = true;
    for (var i = 0; i < twoS; i++) {
      // Thanks to sanfordsquires for this fix:
      var val = poly.evaluateAt(this.field.exp(dataMatrix ? i + 1 : i));
      syndromeCoefficients[syndromeCoefficients.length - 1 - i] = val;
      if (val != 0) {
        noError = false;
      }
    }
    if (noError) {
      return;
    }
    var syndrome = new GF256Poly(this.field, syndromeCoefficients);
    var sigmaOmega = this.runEuclideanAlgorithm(this.field.buildMonomial(twoS,
      1), syndrome, twoS);
    var sigma = sigmaOmega[0];
    var omega = sigmaOmega[1];
    var errorLocations = this.findErrorLocations(sigma);
    var errorMagnitudes = this.findErrorMagnitudes(omega, errorLocations,
      dataMatrix);
    for (var i = 0; i < errorLocations.length; i++) {
      var position = received.length - 1 - this.field.log(errorLocations[i]);
      if (position < 0) {
        throw new ReedSolomonError('bad error location');
      }
      received[position] = GF256Poly.addOrSubtractScalar(received[position],
        errorMagnitudes[i]);
    }
  };

  pro.runEuclideanAlgorithm = function(a, b, R) {
    // Assume a's degree is >= b's
    if (a.getDegree() < b.getDegree()) {
      var temp = a;
      a = b;
      b = temp;
    }

    var rLast = a;
    var r = b;
    var sLast = this.field.one;
    var s = this.field.zero;
    var tLast = this.field.zero;
    var t = this.field.one;

    // Run Euclidean algorithm until r's degree is less than R/2
    while (r.getDegree() >= Math.floor(R / 2)) {
      var rLastLast = rLast;
      var sLastLast = sLast;
      var tLastLast = tLast;
      rLast = r;
      sLast = s;
      tLast = t;

      // Divide rLastLast by rLast, with quotient in q and remainder in r
      if (rLast.isZero()) {
        // Oops, Euclidean algorithm already terminated?
        throw new ReedSolomonError('r_{i-1} was zero');
      }
      r = rLastLast;
      var q = this.field.zero;
      var denominatorLeadingTerm = rLast.getCoefficient(rLast.getDegree());
      var dltInverse = this.field.inverse(denominatorLeadingTerm);
      while (r.getDegree() >= rLast.getDegree() && !r.isZero()) {
        var degreeDiff = r.getDegree() - rLast.getDegree();
        var scale = this.field.multiply(r.getCoefficient(r.getDegree()),
          dltInverse);
        q = q.addOrSubtract(this.field.buildMonomial(degreeDiff, scale));
        r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));
        //r.EXE();
      }

      s = q.multiply1(sLast).addOrSubtract(sLastLast);
      t = q.multiply1(tLast).addOrSubtract(tLastLast);
    }

    var sigmaTildeAtZero = t.getCoefficient(0);
    if (sigmaTildeAtZero == 0) {
      throw new ReedSolomonError('sigmaTilde(0) was zero');
    }

    var inverse = this.field.inverse(sigmaTildeAtZero);
    var sigma = t.multiply2(inverse);
    var omega = r.multiply2(inverse);
    return new Array(sigma, omega);
  };
  pro.findErrorLocations = function(errorLocator) {
    // This is a direct application of Chien's search
    var numErrors = errorLocator.getDegree();
    if (numErrors == 1) {
      // shortcut
      return [errorLocator.getCoefficient(1)];
    }
    var result = new Array(numErrors);
    var e = 0;
    for (var i = 1; i < 256 && e < numErrors; i++) {
      if (errorLocator.evaluateAt(i) == 0) {
        result[e] = this.field.inverse(i);
        e++;
      }
    }
    if (e != numErrors) {
      throw new ReedSolomonError('locator degree does not match ' +
        'number of roots');
    }
    return result;
  };
  pro.findErrorMagnitudes =
    function(errorEvaluator, errorLocations, dataMatrix) {
      // This is directly applying Forney's Formula
      var s = errorLocations.length;
      var result = new Array(s);
      for (var i = 0; i < s; i++) {
        var xiInverse = this.field.inverse(errorLocations[i]);
        var denominator = 1;
        for (var j = 0; j < s; j++) {
          if (i != j) {
            denominator =
              this.field.multiply(denominator, GF256Poly.addOrSubtractScalar(1,
                this.field.multiply(errorLocations[j], xiInverse)));
          }
        }
        result[i] = this.field.multiply(errorEvaluator.evaluateAt(xiInverse),
          this.field.inverse(denominator));
        // Thanks to sanfordsquires for this fix:
        if (dataMatrix) {
          result[i] = this.field.multiply(result[i], xiInverse);
        }
      }
      return result;
    };
});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 Ported to JavaScript by Lazar Laszlo 2011

 lazarsoft@gmail.com, www.lazarsoft.info

 */

/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.decoder');
goog.require('w69b.qr.BitMatrixParser');
goog.require('w69b.qr.DataBlock');
goog.require('w69b.qr.DecodedBitStreamParser');
goog.require('w69b.qr.GF256');
goog.require('w69b.qr.ReedSolomonDecoder');

goog.scope(function() {
  var GF256 = w69b.qr.GF256;
  var DataBlock = w69b.qr.DataBlock;

  var _ = w69b.qr.decoder;
  _.rsDecoder = new w69b.qr.ReedSolomonDecoder(GF256.QR_CODE_FIELD);

  _.correctErrors = function(codewordBytes, numDataCodewords) {
    var numCodewords = codewordBytes.length;
    // First read into an array of ints
    var codewordsInts = new Array(numCodewords);
    for (var i = 0; i < numCodewords; i++) {
      codewordsInts[i] = codewordBytes[i] & 0xFF;
    }
    var numECCodewords = codewordBytes.length - numDataCodewords;
    _.rsDecoder.decode(codewordsInts, numECCodewords);
      //var corrector = new ReedSolomon(codewordsInts, numECCodewords);
      //corrector.correct();
    // Copy back into array of bytes -- only need to worry about the bytes that
    // were data We don't care about errors in the error-correction codewords
    for (var i = 0; i < numDataCodewords; i++) {
      codewordBytes[i] = codewordsInts[i];
    }
  };

  /**
   * @param {w69b.qr.BitMatrix} bits matrix.
   * @return {string} reader instnance.
   */
  _.decode = function(bits) {
    var parser = new w69b.qr.BitMatrixParser(bits);
    var version = parser.readVersion();
    var ecLevel = parser.readFormatInformation().errorCorrectionLevel;

    // Read codewords
    var codewords = parser.readCodewords();

    // Separate into data blocks
    var dataBlocks = DataBlock.getDataBlocks(codewords, version, ecLevel);

    // Count total number of data bytes
    var totalBytes = 0;
    for (var i = 0; i < dataBlocks.length; i++) {
      totalBytes += dataBlocks[i].numDataCodewords;
    }
    var resultBytes = new Array(totalBytes);
    var resultOffset = 0;

    // Error-correct and copy data blocks together into a stream of bytes
    for (var j = 0; j < dataBlocks.length; j++) {
      var dataBlock = dataBlocks[j];
      var codewordBytes = dataBlock.codewords;
      var numDataCodewords = dataBlock.numDataCodewords;
      _.correctErrors(codewordBytes, numDataCodewords);
      for (var i = 0; i < numDataCodewords; i++) {
        resultBytes[resultOffset++] = codewordBytes[i];
      }
    }

    // Decode the contents of that stream of bytes
    return w69b.qr.DecodedBitStreamParser.decode(resultBytes,
      version, ecLevel.bits);
    //return DecodedBitStreamParserOld.decode(resultBytes, version, ecLevel);
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.BitArray');

goog.scope(function() {
/**
   * <p>A simple, fast array of bits, represented compactly by an array of ints
   * internally.</p>
   * @param {number=} opt_size size, defaults to 0.
   * @constructor
   * @author Sean Owen
   */
  w69b.qr.BitArray = function(opt_size) {
    /**
     * @private
     * @type {number}
     */
    this.size_ = opt_size || 0;
    /**
     * @type {Int32Array} bits.
     * @private
     */
    this.bits_ = w69b.qr.BitArray.makeArray(this.size_);
  };
  var _ = w69b.qr.BitArray;
  var pro = _.prototype;

  _.numberOfTrailingZeros = function(i) {
    // HD, Figure 5-14
    var y;
    if (i == 0) return 32;
    var n = 31;
    y = i << 16; if (y != 0) { n = n - 16; i = y; }
    y = i << 8; if (y != 0) { n = n - 8; i = y; }
    y = i << 4; if (y != 0) { n = n - 4; i = y; }
    y = i << 2; if (y != 0) { n = n - 2; i = y; }
    return n - ((i << 1) >>> 31);
  };

  pro.getSize = function() {
    return this.size_;
  };

  pro.getSizeInBytes = function() {
    return (this.size_ + 7) >> 3;
  };

  pro.ensureCapacity = function(size) {
    if (size > this.bits_.length << 5) {
      var newBits = _.makeArray(size);
      newBits.set(this.bits_, 0);
      this.bits_ = newBits;
    }
  };

  /**
   * @param {number} i bit to get.
   * @return {boolean} true iff bit i is set.
   */
  pro.get = function(i) {
    return (this.bits_[i >> 5] & (1 << (i & 0x1F))) != 0;
  };

  /**
   * Sets bit i.
   * @param {number} i bit to set.
   */
  pro.set = function(i) {
    this.bits_[i >> 5] |= 1 << (i & 0x1F);
  };

  /**
   * Flips bit i.
   *
   * @param {number} i bit to set.
   */
  pro.flip = function(i) {
    this.bits_[i >> 5] ^= 1 << (i & 0x1F);
  };

  /**
   * @param {number} from first bit to check.
   * @return {number} index of first bit that is set, starting from the given
   * index, or size if none are set at or beyond this given index.
   * @see #getNextUnset(int)
   */
  pro.getNextSet = function(from) {
    var size = this.size_;
    if (from >= size) {
      return size;
    }
    var bitsOffset = from >> 5;
    var currentBits = this.bits_[bitsOffset];
    // mask off lesser bits first
    currentBits &= ~((1 << (from & 0x1F)) - 1);
    while (currentBits == 0) {
      if (++bitsOffset == this.bits_.length) {
        return size;
      }
      currentBits = this.bits_[bitsOffset];
    }
    var result = (bitsOffset << 5) + _.numberOfTrailingZeros(currentBits);
    return result > size ? size : result;
  };

  /**
   * @see #getNextSet(int)
   */
  pro.getNextUnset = function(from) {
    var size = this.size_;
    if (from >= size) {
      return size;
    }
    var bitsOffset = from >> 5;
    var currentBits = ~this.bits_[bitsOffset];
    // mask off lesser bits first
    currentBits &= ~((1 << (from & 0x1F)) - 1);
    while (currentBits == 0) {
      if (++bitsOffset == this.bits_.length) {
        return size;
      }
      currentBits = ~this.bits_[bitsOffset];
    }
    var result = (bitsOffset << 5) + _.numberOfTrailingZeros(currentBits);
    return result > size ? size : result;
  };

  /**
   * Sets a block of 32 bits, starting at bit i.
   *
   * @param {number} i first bit to set.
   * @param {number} newBits the new value of the next 32 bits. Note again that
   * the least-significant bit corresponds to bit i, the next-least-significant
   * to i+1, and so on.
   */
  pro.setBulk = function(i, newBits) {
    this.bits_[i >> 5] = newBits;
  };

  /**
   * Sets a range of bits.
   *
   * @param {number} start start of range, inclusive.
   * @param {number} end end of range, exclusive.
   */
  pro.setRange = function(start, end) {
    if (end < start) {
      throw new Error();
    }
    if (end == start) {
      return;
    }
    // will be easier to treat this as the last actually set bit -- inclusive
    end--;
    var firstInt = start >> 5;
    var lastInt = end >> 5;
    for (var i = firstInt; i <= lastInt; i++) {
      var firstBit = i > firstInt ? 0 : start & 0x1F;
      var lastBit = i < lastInt ? 31 : end & 0x1F;
      var mask;
      if (firstBit == 0 && lastBit == 31) {
        mask = -1;
      } else {
        mask = 0;
        for (var j = firstBit; j <= lastBit; j++) {
          mask |= 1 << j;
        }
      }
      this.bits_[i] |= mask;
    }
  };

  /**
   * Clears all bits (sets to false).
   */
  pro.clear = function() {
    var max = this.bits_.length;
    for (var i = 0; i < max; i++) {
      this.bits_[i] = 0;
    }
  };

  /**
   * Efficient method to check if a range of bits is set, or not set.
   *
   * @param {number} start start of range, inclusive.
   * @param {number} end end of range, exclusive.
   * @param {boolean} value if true, checks that bits in range are set,
   * otherwise checks that they are not set.
   * @return {boolean} true iff all bits are set or not set in range, according
   * to value argument.
   */
  pro.isRange = function(start, end, value) {
    if (end < start) {
      throw new Error();
    }
    if (end == start) {
      return true; // empty range matches
    }
    // will be easier to treat this as the last actually set bit -- inclusive
    end--;
    var firstInt = start >> 5;
    var lastInt = end >> 5;
    for (var i = firstInt; i <= lastInt; i++) {
      var firstBit = i > firstInt ? 0 : start & 0x1F;
      var lastBit = i < lastInt ? 31 : end & 0x1F;
      var mask;
      if (firstBit == 0 && lastBit == 31) {
        mask = -1;
      } else {
        mask = 0;
        for (var j = firstBit; j <= lastBit; j++) {
          mask |= 1 << j;
        }
      }

      // Return false if we're looking for 1s and the masked bits[i] isn't all
      // 1s (that is, equals the mask, or we're looking for 0s and the masked
      // portion is not all 0s
      if ((this.bits_[i] & mask) != (value ? mask : 0)) {
        return false;
      }
    }
    return true;
  };

  pro.appendBit = function(bit) {
    this.ensureCapacity(this.size_ + 1);
    if (bit) {
      this.bits_[this.size_ >> 5] |= 1 << (this.size_ & 0x1F);
    }
    this.size_++;
  };

  /**
   * Appends the least-significant this.bits_, from value, in order from
   * most-significant to least-significant. For example, appending 6 this.bits_
   * from 0x000001E will append the this.bits_ 0, 1, 1, 1, 1, 0 in that order.
   */
  pro.appendBits = function(value, numBits) {
    if (numBits < 0 || numBits > 32) {
      throw new Error();
    }
    this.ensureCapacity(this.size_ + numBits);
    for (var numBitsLeft = numBits; numBitsLeft > 0; numBitsLeft--) {
      this.appendBit(((value >> (numBitsLeft - 1)) & 0x01) == 1);
    }
  };

  pro.appendBitArray = function(other) {
    var otherSize = other.size_;
    this.ensureCapacity(this.size_ + otherSize);
    for (var i = 0; i < otherSize; i++) {
      this.appendBit(other.get(i));
    }
  };

  /**
   * @param {w69b.qr.BitArray} other other.
   */
  pro.xor = function(other) {
    if (this.bits_.length != other.bits_.length) {
      throw new Error();
    }
    for (var i = 0; i < this.bits_.length; i++) {
      // The last byte could be incomplete (i.e. not have 8 this.bits_ in
      // it) but there is no problem since 0 XOR 0 == 0.
      this.bits_[i] ^= other.bits_[i];
    }
  };

  /**
   *
   * @param {number} bitOffset first bit to start writing.
   * @param {Array} array array to write varo. Bytes are written
   * most-significant byte first. This is the opposite of the varernal
   * representation, which is * exposed by {@link #getBitArray()}.
   * @param {number} offset position in array to start writing.
   * @param {number} numBytes how many bytes to write.
   */
  pro.toBytes = function(bitOffset, array, offset, numBytes) {
    for (var i = 0; i < numBytes; i++) {
      var theByte = 0;
      for (var j = 0; j < 8; j++) {
        if (this.get(bitOffset)) {
          theByte |= 1 << (7 - j);
        }
        bitOffset++;
      }
      array[offset + i] = theByte;
    }
  };

  /**
   * @return {Int32Array} array of vars. The first element holds the first 32
   * bits, and the least significant bit is bit 0.
   */
  pro.getBitArray = function() {
    return this.bits_;
  };

  /**
   * Reverses all bits in the array.
   */
  pro.reverse = function() {
    var newBits = new Int32Array(this.bits_.length);
    var size = this.size_;
    for (var i = 0; i < size; i++) {
      if (this.get(size - i - 1)) {
        newBits[i >> 5] |= 1 << (i & 0x1F);
      }
    }
    this.bits_ = newBits;
  };

  _.makeArray = function(size) {
    return new Int32Array((size + 31) >> 5);
  };

  pro.toString = function() {
    var result = [];
    for (var i = 0; i < this.size_; i++) {
      if ((i & 0x07) == 0) {
        result.push(' ');
      }
      result.push(this.get(i) ? 'X' : '.');
    }
    return result.join('');
  };

});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
goog.provide('w69b.qr.EncodeHintType');

/**
 * Encode hint key constants.
 * @enum {number}
 */
w69b.qr.EncodeHintType = {
  CHARACTER_SET: 1,
  FORCE_ADD_ECI: 2
};

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2008 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.ReedSolomonEncoder');
goog.require('w69b.qr.GF256');
goog.require('w69b.qr.GF256Poly');

goog.scope(function() {
  var GF256 = w69b.qr.GF256;
  var GF256Poly = w69b.qr.GF256Poly;

  /**
   * <p>Implements Reed-Solomon enbcoding, as the name implies.</p>
   *
   * @author Sean Owen
   * @author William Rucklidge
   * @author mb@w69b.com (Mahuel Braun) ported to js.
   */

  /**
   *
   * @param {!GF256} field to use.
   * @constructor
   */
  w69b.qr.ReedSolomonEncoder = function(field) {
    /**
     * @private
     * @type {!GF256}
     */
    this.field_ = field;
    /**
     * @private
     * @type {Array.<!GF256Poly>}
     */
    this.cachedGenerators_ = [new GF256Poly(field, [1])];
  };
  var pro = w69b.qr.ReedSolomonEncoder.prototype;

  /**
   * @param {number} degree degree.
   * @return {!GF256Poly} generator.
   */
  pro.buildGenerator = function(degree) {
    var cachedGenerators = this.cachedGenerators_;
    if (degree >= cachedGenerators.length) {
      var lastGenerator = cachedGenerators[cachedGenerators.length - 1];
      for (var d = cachedGenerators.length; d <= degree; d++) {
        var nextGenerator = lastGenerator.multiply1(
          new GF256Poly(this.field_, [1, this.field_.exp(d - 1)]));
        cachedGenerators.push(nextGenerator);
        lastGenerator = nextGenerator;
      }
    }
    return cachedGenerators[degree];
  };

  /**
   * @param {Array.<number>} toEncode data to encode, including pre-allocated
   * space for ecc bytes.
   * @param {number} ecBytes number of ec bytes.
   */
  pro.encode = function(toEncode, ecBytes) {
    if (ecBytes == 0) {
      throw new Error('No error correction bytes');
    }
    var dataBytes = toEncode.length - ecBytes;
    if (dataBytes <= 0) {
      throw new Error('No data bytes provided');
    }
    var generator = this.buildGenerator(ecBytes);
    var infoCoefficients = toEncode.slice(0, dataBytes);
    var info = new GF256Poly(this.field_, infoCoefficients);
    info = info.multiplyByMonomial(ecBytes, 1);
    var remainder = info.divide(generator)[1];
    var coefficients = remainder.coefficients;
    var numZeroCoefficients = ecBytes - coefficients.length;
    var i;
    for (i = 0; i < numZeroCoefficients; i++) {
      toEncode[dataBytes + i] = 0;
    }
    for (i = 0; i < coefficients.length; ++i) {
      toEncode[dataBytes + numZeroCoefficients + i] = coefficients[i];
    }
    // System.arraycopy(coefficients, 0, toEncode,
    //   dataBytes + numZeroCoefficients, coefficients.length);
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2008 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.encoder.BlockPair');

goog.scope(function() {
  /**
   * @constructor
   */
  w69b.qr.encoder.BlockPair = function(data, errorCorrection) {
    this.dataBytes = data;
    this.errorCorrectionBytes = errorCorrection;
  };
  var pro = w69b.qr.encoder.BlockPair.prototype;

  pro.getDataBytes = function() {
    return this.dataBytes;
  };

  pro.getErrorCorrectionBytes = function() {
    return this.errorCorrectionBytes;
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2008 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.encoder.ByteMatrix');

/**
 * A class which wraps a 2D array of bytes. The default usage is signed.
 * If you want to use it as a
 * unsigned container, it's up to you to do byteValue & 0xff at each location.
 *
 * JAVAPORT: The original code was a 2D array of ints, but since it only ever
 * gets assigned
 * -1, 0, and 1, I'm going to use less memory and go with bytes.
 *
 * @author dswitkin@google.com (Daniel Switkin)
 * @author mb@w69b.com (Manuel Braun) - ported to js.
 */
goog.scope(function() {

  /**
   * Row (y) first byte matrix.
   * @param {number} width with.
   * @param {number} height height.
   * @constructor
   */
  w69b.qr.encoder.ByteMatrix = function(width, height) {
    /**
     * @type {number}
     * @private
     */
    this.width_ = width;
    /**
     * @type {number}
     * @private
     */
    this.height_ = height;
    this.bytes_ = new Int8Array(width * height);
  };
  var pro = w69b.qr.encoder.ByteMatrix.prototype;

  pro.getBytes = function() {
    return this.bytes_;
  };

  pro.getHeight = function() {
    return this.height_;
  };

  pro.getWidth = function() {
    return this.width_;
  };

  pro.get = function(x, y) {
    return this.bytes_[this.width_ * y + x];
  };

  pro.set = function(x, y, value) {
    this.bytes_[this.width_ * y + x] = value;
  };

  pro.clear = function(value) {
    for (var i = 0; i < this.bytes_.length; ++i)
      this.bytes_[i] = value;
  };

  pro.toString = function() {
    var result = [];
    for (var y = 0; y < this.height_; ++y) {
      for (var x = 0; x < this.width_; ++x) {
        switch (this.get(x, y)) {
          case 0:
            result.push(' 0');
            break;
          case 1:
            result.push(' 1');
            break;
          default:
            result.push('  ');
            break;
        }
      }
      result.push('\n');
    }
    return result.join('');
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2008 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.encoder.MaskUtil');
goog.require('w69b.qr.encoder.ByteMatrix');

goog.scope(function() {
  var ByteMatrix = w69b.qr.encoder.ByteMatrix;

/**
 * @author Satoru Takabayashi
 * @author Daniel Switkin
 * @author Sean Owen
 * @author mb@69b.com (Manuel Braun) ported to js
 */
var _ = w69b.qr.encoder.MaskUtil;

  // Penalty weights from section 6.8.2.1
  _.N1 = 3;
  _.N2 = 3;
  _.N3 = 40;
  _.N4 = 10;

  /**
   * Apply mask penalty rule 1 and return the penalty.
   * Find repetitive cells with the same color and
   * give penalty to them. Example: 00000 or 11111.
   * @param {ByteMatrix} matrix working matrix.
   * @return {number} result.
   */
  _.applyMaskPenaltyRule1 = function(matrix) {
    return _.applyMaskPenaltyRule1Internal(matrix, true) +
      _.applyMaskPenaltyRule1Internal(matrix, false);
  };

  /**
   * Apply mask penalty rule 2 and return the penalty.
   * Find 2x2 blocks with the same color and give
   * penalty to them. This is actually equivalent to the spec's rule,
   * which is to find MxN blocks and give a
   * penalty proportional to (M-1)x(N-1), because this is the number of
   * 2x2 blocks inside such a block.
   * @param {ByteMatrix} matrix working matrix.
   * @return {number} result.
   */
  _.applyMaskPenaltyRule2 = function(matrix) {
    var penalty = 0;
    var width = matrix.getWidth();
    var height = matrix.getHeight();
    for (var y = 0; y < height - 1; y++) {
      for (var x = 0; x < width - 1; x++) {
        var value = matrix.get(x, y);
        if (value == matrix.get(x + 1, y) && value == matrix.get(x, y + 1) &&
          value == matrix.get(x + 1, y + 1)) {
          penalty++;
        }
      }
    }
    return _.N2 * penalty;
  };

  /**
   * Apply mask penalty rule 3 and return the penalty. Find consecutive
   * cells of 00001011101 or
   * 10111010000, and give penalty to them.
   * If we find patterns like 000010111010000, we give
   * penalties twice (i.e. 40 * 2).
   * @param {ByteMatrix} matrix working matrix.
   * @return {number} result.
   */
  _.applyMaskPenaltyRule3 = function(matrix) {
    var penalty = 0;
    var width = matrix.getWidth();
    var height = matrix.getHeight();
    var bytes = matrix.getBytes();
    for (var y = 0; y < height; y++) {
      var yOffset = width * y;
      for (var x = 0; x < width; x++) {
        // Tried to simplify following conditions but failed.
        if (x + 6 < width &&
            bytes[yOffset + x] == 1 &&
            bytes[yOffset + x + 1] == 0 &&
            bytes[yOffset + x + 2] == 1 &&
            bytes[yOffset + x + 3] == 1 &&
            bytes[yOffset + x + 4] == 1 &&
            bytes[yOffset + x + 5] == 0 &&
            bytes[yOffset + x + 6] == 1 &&
            ((x + 10 < width &&
                bytes[yOffset + x + 7] == 0 &&
                bytes[yOffset + x + 8] == 0 &&
                bytes[yOffset + x + 9] == 0 &&
                bytes[yOffset + x + 10] == 0) ||
             (x - 4 >= 0 &&
                bytes[yOffset + x - 1] == 0 &&
                bytes[yOffset + x - 2] == 0 &&
                bytes[yOffset + x - 3] == 0 &&
                bytes[yOffset + x - 4] == 0))) {
          penalty += _.N3;
        }
        if (y + 6 < height &&
            matrix.get(x, y) == 1 &&
            matrix.get(x, y + 1) == 0 &&
            matrix.get(x, y + 2) == 1 &&
            matrix.get(x, y + 3) == 1 &&
            matrix.get(x, y + 4) == 1 &&
            matrix.get(x, y + 5) == 0 &&
            matrix.get(x, y + 6) == 1 &&
            ((y + 10 < height &&
                matrix.get(x, y + 7) == 0 &&
                matrix.get(x, y + 8) == 0 &&
                matrix.get(x, y + 9) == 0 &&
                matrix.get(x, y + 10) == 0) ||
             (y - 4 >= 0 &&
                matrix.get(x, y - 1) == 0 &&
                matrix.get(x, y - 2) == 0 &&
                matrix.get(x, y - 3) == 0 &&
                matrix.get(x, y - 4) == 0))) {
          penalty += _.N3;
        }
      }
    }
    return penalty;
  };

  /** Apply mask penalty rule 4 and return the penalty. Calculate the ratio of
   * dark cells and give penalty if the ratio is far from 50%. It gives 10
   * penalty for 5% distance.
   * @param {ByteMatrix} matrix working matrix.
   * @return {number} result.
   */
  _.applyMaskPenaltyRule4 = function(matrix) {
    var numDarkCells = 0;
    var width = matrix.getWidth();
    var height = matrix.getHeight();
    for (var y = 0; y < height; y++) {
      for (var x = 0; x < width; x++) {
        if (matrix.get(x, y) == 1) {
          numDarkCells++;
        }
      }
    }
    var numTotalCells = matrix.getHeight() * matrix.getWidth();
    var darkRatio = numDarkCells / numTotalCells;
    // * 100.0 / 5.0
    var fivePercentVariances = Math.floor(Math.abs(darkRatio - 0.5) * 20.0);
    return fivePercentVariances * _.N4;
  };

  /**
   * Return the mask bit for "getMaskPattern" at "x" and "y". See 8.8 of
   * JISX0510:2004 for mask
   * pattern conditions.
   * @param {number} maskPattern pattern.
   * @param {number} x pos.
   * @param {number} y pos.
   */
  _.getDataMaskBit = function(maskPattern, x, y) {
    var intermediate;
    var temp;
    switch (maskPattern) {
      case 0:
        intermediate = (y + x) & 0x1;
        break;
      case 1:
        intermediate = y & 0x1;
        break;
      case 2:
        intermediate = x % 3;
        break;
      case 3:
        intermediate = (y + x) % 3;
        break;
      case 4:
        intermediate = ((y >>> 1) + (x / 3)) & 0x1;
        break;
      case 5:
        temp = y * x;
        intermediate = (temp & 0x1) + (temp % 3);
        break;
      case 6:
        temp = y * x;
        intermediate = ((temp & 0x1) + (temp % 3)) & 0x1;
        break;
      case 7:
        temp = y * x;
        intermediate = ((temp % 3) + ((y + x) & 0x1)) & 0x1;
        break;
      default:
        throw new Error('Invalid mask pattern: ' + maskPattern);
    }
    return intermediate == 0;
  };

  /**
   * Helper function for applyMaskPenaltyRule1. We need this for doing this
   * calculation in both vertical and horizontal orders respectively.
   * @param {ByteMatrix} matrix working matrix.
   * @param {boolean} isHorizontal horizontal switch.
   * @return {number} penalty.
   */
  _.applyMaskPenaltyRule1Internal = function(matrix, isHorizontal) {
    var penalty = 0;
    var iLimit = isHorizontal ? matrix.getHeight() : matrix.getWidth();
    var jLimit = isHorizontal ? matrix.getWidth() : matrix.getHeight();
    for (var i = 0; i < iLimit; i++) {
      var numSameBitCells = 0;
      var prevBit = -1;
      for (var j = 0; j < jLimit; j++) {
        var bit = isHorizontal ? matrix.get(j, i) : matrix.get(i, j);
        if (bit == prevBit) {
          numSameBitCells++;
        } else {
          if (numSameBitCells >= 5) {
            penalty += _.N1 + (numSameBitCells - 5);
          }
          numSameBitCells = 1;  // Include the cell itself.
          prevBit = bit;
        }
      }
      if (numSameBitCells > 5) {
        penalty += _.N1 + (numSameBitCells - 5);
      }
    }
    return penalty;
  };

});

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.WriterError');
goog.require('goog.debug.Error');

goog.scope(function() {
  /**
   * @constructor
   * @param {string=} opt_msg message.
   * @extends {goog.debug.Error}
   */
  w69b.qr.WriterError = function(opt_msg) {
    goog.base(this, opt_msg);
  };
  goog.inherits(w69b.qr.WriterError, goog.debug.Error);

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2008 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.encoder.QRCode');
goog.require('w69b.qr.ErrorCorrectionLevel');
goog.require('w69b.qr.Mode');
goog.require('w69b.qr.Version');
goog.require('w69b.qr.encoder.ByteMatrix');

goog.scope(function() {

  var ErrorCorrectionLevel = w69b.qr.ErrorCorrectionLevel;
  var Mode = w69b.qr.Mode;
  var Version = w69b.qr.Version;
  var ByteMatrix = w69b.qr.encoder.ByteMatrix;

  /**
   * @constructor
   * @author satorux@google.com (Satoru Takabayashi) - creator
   * @author dswitkin@google.com (Daniel Switkin) - ported from C++
   * @author mb@w69b.com (Manuel Braun) - ported to js.
   */
  w69b.qr.encoder.QRCode = function() {
  };
  var _ = w69b.qr.encoder.QRCode;
  var pro = _.prototype;
  /**
   * @type {Mode}
   * @private
   */
  pro.mode_ = null;
  /**
   *
   * @type {ErrorCorrectionLevel}
   * @private
   */
  pro.ecLevel_ = null;
  /**
   *
   * @type {Version}
   * @private
   */
  pro.version_ = null;
  /**
   *
   * @type {number}
   * @private
   */
  pro.maskPattern_ = -1;
  /**
   *
   * @type {ByteMatrix}
   * @private
   */
  pro.matrix_ = null;

  /**
   * @type {number}
   */
  _.NUM_MASK_PATTERNS = 8;


  /**
   * @return {Mode} mode.
   */
  pro.getMode = function() {
    return this.mode_;
  };

  /**
   * @return {ErrorCorrectionLevel} ec level.
   */
  pro.getECLevel = function() {
    return this.ecLevel_;
  };

  /**
   * @return {Version} version.
   */
  pro.getVersion = function() {
    return this.version_;
  };

  /**
   * @return {number} mask pattern.
   */
  pro.getMaskPattern = function() {
    return this.maskPattern_;
  };

  /**
   * @return {ByteMatrix} matrix.
   */
  pro.getMatrix = function() {
    return this.matrix_;
  };


  /**
   * @return {string} debug string.
   */
  pro.toString = function() {
    var result = [];
    result.push('<<\n');
    result.push(' mode: ');
    result.push(this.mode_.toString());
    result.push('\n ecLevel: ');
    result.push(this.ecLevel_.toString());
    result.push('\n version: ');
    result.push(this.version_.toString());
    result.push('\n maskPattern: ');
    result.push(this.maskPattern_);
    if (this.matrix_ == null) {
      result.push('\n matrix: null\n');
    } else {
      result.push('\n matrix:\n');
      result.push(this.matrix_.toString());
    }
    result.push('>>\n');
    return result.join('');
  };

  /**
   * @param {Mode} value mode.
   */
  pro.setMode = function(value) {
    this.mode_ = value;
  };

  /**
   * @param {ErrorCorrectionLevel} value ec level.
   */
  pro.setECLevel = function(value) {
    this.ecLevel_ = value;
  };

  /**
   * @param {Version} version version.
   */
  pro.setVersion = function(version) {
    this.version_ = version;
  };

  /**
   * @param {number} value pattern.
   */
  pro.setMaskPattern = function(value) {
    this.maskPattern_ = value;
  };

  /**
   * @param {ByteMatrix} value matrix.
   */
  pro.setMatrix = function(value) {
    this.matrix_ = value;
  };

  /**
   * @param {number} maskPattern pattern.
   * @return {boolean} weather it is valid.
   */
  _.isValidMaskPattern = function(maskPattern) {
    return maskPattern >= 0 && maskPattern < _.NUM_MASK_PATTERNS;
  };

});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2008 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.encoder.MatrixUtil');
goog.require('w69b.qr.BitArray');
goog.require('w69b.qr.ErrorCorrectionLevel');
goog.require('w69b.qr.Version');
goog.require('w69b.qr.WriterError');
goog.require('w69b.qr.encoder.ByteMatrix');
goog.require('w69b.qr.encoder.MaskUtil');
goog.require('w69b.qr.encoder.QRCode');

goog.scope(function() {
  var ErrorCorrectionLevel = w69b.qr.ErrorCorrectionLevel;
  var BitArray = w69b.qr.BitArray;
  var ByteMatrix = w69b.qr.encoder.ByteMatrix;
  var Version = w69b.qr.Version;
  var WriterError = w69b.qr.WriterError;
  var QRCode = w69b.qr.encoder.QRCode;
  var MaskUtil = w69b.qr.encoder.MaskUtil;


  /**
   * @author satorux@google.com (Satoru Takabayashi) - creator
   * @author dswitkin@google.com (Daniel Switkin) - ported from C++
   * @author mb@w69b.com (Manuel Braun) - ported to js.
   */
  var _ = w69b.qr.encoder.MatrixUtil;

  _.POSITION_DETECTION_PATTERN = [
    [1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 0, 1],
    [1, 0, 1, 1, 1, 0, 1],
    [1, 0, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1]
  ];

  _.POSITION_ADJUSTMENT_PATTERN = [
    [1, 1, 1, 1, 1],
    [1, 0, 0, 0, 1],
    [1, 0, 1, 0, 1],
    [1, 0, 0, 0, 1],
    [1, 1, 1, 1, 1]
  ];

  // From Appendix E. Table 1, JIS0510X:2004 (p 71). The table was
  // double-checked by komatsu.
  _.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = [
    [-1, -1, -1, -1, -1, -1, -1],  // Version 1
    [6, 18, -1, -1, -1, -1, -1],  // Version 2
    [6, 22, -1, -1, -1, -1, -1],  // Version 3
    [6, 26, -1, -1, -1, -1, -1],  // Version 4
    [6, 30, -1, -1, -1, -1, -1],  // Version 5
    [6, 34, -1, -1, -1, -1, -1],  // Version 6
    [6, 22, 38, -1, -1, -1, -1],  // Version 7
    [6, 24, 42, -1, -1, -1, -1],  // Version 8
    [6, 26, 46, -1, -1, -1, -1],  // Version 9
    [6, 28, 50, -1, -1, -1, -1],  // Version 10
    [6, 30, 54, -1, -1, -1, -1],  // Version 11
    [6, 32, 58, -1, -1, -1, -1],  // Version 12
    [6, 34, 62, -1, -1, -1, -1],  // Version 13
    [6, 26, 46, 66, -1, -1, -1],  // Version 14
    [6, 26, 48, 70, -1, -1, -1],  // Version 15
    [6, 26, 50, 74, -1, -1, -1],  // Version 16
    [6, 30, 54, 78, -1, -1, -1],  // Version 17
    [6, 30, 56, 82, -1, -1, -1],  // Version 18
    [6, 30, 58, 86, -1, -1, -1],  // Version 19
    [6, 34, 62, 90, -1, -1, -1],  // Version 20
    [6, 28, 50, 72, 94, -1, -1],  // Version 21
    [6, 26, 50, 74, 98, -1, -1],  // Version 22
    [6, 30, 54, 78, 102, -1, -1],  // Version 23
    [6, 28, 54, 80, 106, -1, -1],  // Version 24
    [6, 32, 58, 84, 110, -1, -1],  // Version 25
    [6, 30, 58, 86, 114, -1, -1],  // Version 26
    [6, 34, 62, 90, 118, -1, -1],  // Version 27
    [6, 26, 50, 74, 98, 122, -1],  // Version 28
    [6, 30, 54, 78, 102, 126, -1],  // Version 29
    [6, 26, 52, 78, 104, 130, -1],  // Version 30
    [6, 30, 56, 82, 108, 134, -1],  // Version 31
    [6, 34, 60, 86, 112, 138, -1],  // Version 32
    [6, 30, 58, 86, 114, 142, -1],  // Version 33
    [6, 34, 62, 90, 118, 146, -1],  // Version 34
    [6, 30, 54, 78, 102, 126, 150],  // Version 35
    [6, 24, 50, 76, 102, 128, 154],  // Version 36
    [6, 28, 54, 80, 106, 132, 158],  // Version 37
    [6, 32, 58, 84, 110, 136, 162],  // Version 38
    [6, 26, 54, 82, 110, 138, 166],  // Version 39
    [6, 30, 58, 86, 114, 142, 170]  // Version 40
  ];

  // Type info cells at the left top corner.
  _.TYPE_INFO_COORDINATES = [
    [8, 0],
    [8, 1],
    [8, 2],
    [8, 3],
    [8, 4],
    [8, 5],
    [8, 7],
    [8, 8],
    [7, 8],
    [5, 8],
    [4, 8],
    [3, 8],
    [2, 8],
    [1, 8],
    [0, 8]
  ];

  // From Appendix D in JISX0510:2004 (p. 67)
  _.VERSION_INFO_POLY = 0x1f25;  // 1 1111 0010 0101

  // From Appendix C in JISX0510:2004 (p.65).
  _.TYPE_INFO_POLY = 0x537;
  _.TYPE_INFO_MASK_PATTERN = 0x5412;

  // Set all cells to -1.  -1 means that the cell is empty (not set yet).
  //
  // JAVAPORT: We shouldn't need to do this at all. The code should be
  // rewritten to begin encoding with the ByteMatrix initialized all to zero.
  /**
   * @param {ByteMatrix} matrix matrix.
   */
  _.clearMatrix = function(matrix) {
    matrix.clear(-1);
  };

  /**
   * Build 2D matrix of QR Code from "dataBits" with "ecLevel", "version" and
   * "getMaskPattern". On success, store the result in "matrix" .
   * @param {BitArray} dataBits bits.
   * @param {ErrorCorrectionLevel} ecLevel error correction leval.
   * @param {Version} version version.
   * @param {number} maskPattern mask.
   * @param {ByteMatrix} matrix result matrix.
   */
  _.buildMatrix = function(dataBits, ecLevel, version, maskPattern, matrix) {
    _.clearMatrix(matrix);
    _.embedBasicPatterns(version, matrix);
    // Type information appear with any version.
    _.embedTypeInfo(ecLevel, maskPattern, matrix);
    // Version info appear if version >= 7.
    _.maybeEmbedVersionInfo(version, matrix);
    // Data should be embedded at end.
    _.embedDataBits(dataBits, maskPattern, matrix);
  };

  /**
   *
   * Embed basic patterns. On success, modify the matrix and return true.
   * The basic patterns are:
   * - Position detection patterns
   * - Timing patterns
   * - Dark dot at the left bottom corner
   * - Position adjustment patterns, if needed
   * @param {Version} version version.
   * @param {ByteMatrix} matrix result.
   */
  _.embedBasicPatterns = function(version, matrix) {
    // Let's get started with embedding big squares at corners.
    _.embedPositionDetectionPatternsAndSeparators(matrix);
    // Then, embed the dark dot at the left bottom corner.
    _.embedDarkDotAtLeftBottomCorner(matrix);

    // Position adjustment patterns appear if version >= 2.
    _.maybeEmbedPositionAdjustmentPatterns(version, matrix);
    // Timing patterns should be embedded after position adj. patterns.
    _.embedTimingPatterns(matrix);
  };

  /**
   * Embed type information. On success, modify the matrix.
   * @param {ErrorCorrectionLevel} ecLevel error correciton level.
   * @param {number} maskPattern pattern.
   * @param {ByteMatrix} matrix result.
   */
  _.embedTypeInfo = function(ecLevel, maskPattern, matrix) {
    var typeInfoBits = new BitArray();
    _.makeTypeInfoBits(ecLevel, maskPattern, typeInfoBits);

    for (var i = 0; i < typeInfoBits.getSize(); ++i) {
      // Place bits in LSB to MSB order.  LSB (least significant bit) is the
      // last value in "typeInfoBits".
      var bit = typeInfoBits.get(typeInfoBits.getSize() - 1 - i);

      // Type info bits at the left top corner. See 8.9 of JISX0510:2004 (p.46).
      var x1 = _.TYPE_INFO_COORDINATES[i][0];
      var y1 = _.TYPE_INFO_COORDINATES[i][1];
      matrix.set(x1, y1, bit);

      if (i < 8) {
        // Right top corner.
        var x2 = matrix.getWidth() - i - 1;
        var y2 = 8;
        matrix.set(x2, y2, bit);
      } else {
        // Left bottom corner.
        var x2 = 8;
        var y2 = matrix.getHeight() - 7 + (i - 8);
        matrix.set(x2, y2, bit);
      }
    }
  };

  /**
   * Embed version information if need be. On success, modify the matrix.
   * See 8.10 of JISX0510:2004 (p.47) for how to embed version information.
   * @param {Version} version version.
   * @param {ByteMatrix} matrix result.
   */
  _.maybeEmbedVersionInfo = function(version, matrix) {
    // Version info is necessary if version >= 7.
    if (version.getVersionNumber() < 7) {
      return;  // Don't need version info.
    }
    var versionInfoBits = new BitArray();
    _.makeVersionInfoBits(version, versionInfoBits);

    var bitIndex = 6 * 3 - 1;  // It will decrease from 17 to 0.
    for (var i = 0; i < 6; ++i) {
      for (var j = 0; j < 3; ++j) {
        // Place bits in LSB (least significant bit) to MSB order.
        var bit = versionInfoBits.get(bitIndex);
        bitIndex--;
        // Left bottom corner.
        matrix.set(i, matrix.getHeight() - 11 + j, bit);
        // Right bottom corner.
        matrix.set(matrix.getHeight() - 11 + j, i, bit);
      }
    }
  };

  /**
   * Embed "dataBits" using "getMaskPattern". On success, modify the matrix and
   * return true.  For debugging purposes, it skips masking process if
   * "getMaskPattern" is -1.  See 8.7 of JISX0510:2004 (p.38) for how to embed
   * data bits.
   * @param {BitArray} dataBits bits.
   * @param {number} maskPattern mask.
   * @param {ByteMatrix} matrix result..
   */
  _.embedDataBits = function(dataBits, maskPattern, matrix) {
    var bitIndex = 0;
    var direction = -1;
    // Start from the right bottom cell.
    var x = matrix.getWidth() - 1;
    var y = matrix.getHeight() - 1;
    while (x > 0) {
      // Skip the vertical timing pattern.
      if (x == 6) {
        x -= 1;
      }
      while (y >= 0 && y < matrix.getHeight()) {
        for (var i = 0; i < 2; ++i) {
          var xx = x - i;
          // Skip the cell if it's not empty.
          if (!_.isEmpty(matrix.get(xx, y))) {
            continue;
          }
          var bit;
          if (bitIndex < dataBits.getSize()) {
            bit = dataBits.get(bitIndex);
            ++bitIndex;
          } else {
            // Padding bit. If there is no bit left, we'll fill the left cells
            // with 0, as described in 8.4.9 of JISX0510:2004 (p. 24).
            bit = false;
          }

          // Skip masking if mask_pattern is -1.
          if (maskPattern != -1 && MaskUtil.getDataMaskBit(maskPattern, xx,
            y)) {
            bit = !bit;
          }
          matrix.set(xx, y, bit);
        }
        y += direction;
      }
      direction = -direction;  // Reverse the direction.
      y += direction;
      x -= 2;  // Move to the left.
    }
    // All bits should be consumed.
    if (bitIndex != dataBits.getSize()) {
      throw new WriterError('Not all bits consumed: ' +
        bitIndex + '/' + dataBits.getSize());
    }
  };

  /**
   *
   * Return the position of the most significant bit set (to one) in the
   * "value". The most significant bit is position 32. If there is no bit set,
   * return 0. Examples:
   * - findMSBSet(0) => 0
   * - findMSBSet(1) => 1
   * - findMSBSet(255) => 8
   */
  _.findMSBSet = function(value) {
    var numDigits = 0;
    while (value != 0) {
      value >>>= 1;
      ++numDigits;
    }
    return numDigits;
  };

  /**
   *
   * Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for "value" using
   * polynomial "poly". The BCH
   * code is used for encoding type information and version information.
   * Example: Calculation of version information of 7.
   * f(x) is created from 7.
   *   - 7 = 000111 in 6 bits
   *   - f(x) = x^2 + x^1 + x^0
   * g(x) is given by the standard (p. 67)
   *   - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1
   * Multiply f(x) by x^(18 - 6)
   *   - f'(x) = f(x) * x^(18 - 6)
   *   - f'(x) = x^14 + x^13 + x^12
   * Calculate the remainder of f'(x) / g(x)
   *         x^2
   *         __________________________________________________
   *   g(x) )x^14 + x^13 + x^12
   *         x^14 + x^13 + x^12 + x^11 + x^10 + x^7 + x^4 + x^2
   *         --------------------------------------------------
   *                              x^11 + x^10 + x^7 + x^4 + x^2
   *
   * The remainder is x^11 + x^10 + x^7 + x^4 + x^2
   * Encode it in binary: 110010010100
   * The return value is 0xc94 (1100 1001 0100)
   *
   * Since all coefficients in the polynomials are 1 or 0, we can do the
   * calculation by bit
   * operations. We don't care if cofficients are positive or negative.
   * @param {number} value see above.
   * @param {number} poly see above.
   * @return {number} see above.
   */
  _.calculateBCHCode = function(value, poly) {
    // If poly is "1 1111 0010 0101" (version info poly), msbSetInPoly is 13.
    // We'll subtract 1 from 13 to make it 12.
    var msbSetInPoly = _.findMSBSet(poly);
    value <<= msbSetInPoly - 1;
    // Do the division business using exclusive-or operations.
    while (_.findMSBSet(value) >= msbSetInPoly) {
      value ^= poly << (_.findMSBSet(value) - msbSetInPoly);
    }
    // Now the "value" is the remainder (i.e. the BCH code)
    return value;
  };

  /**
   * Make bit vector of type information. On success, store the result in
   * "bits" and return true.  Encode error correction level and mask pattern.
   * See 8.9 of JISX0510:2004 (p.45) for details.
   * @param {ErrorCorrectionLevel} ecLevel error correction level.
   * @param {number} maskPattern pattern.
   * @param {BitArray} bits result array.
   */
  _.makeTypeInfoBits = function(ecLevel, maskPattern, bits) {
    if (!QRCode.isValidMaskPattern(maskPattern)) {
      throw new WriterError('Invalid mask pattern');
    }
    var typeInfo = (ecLevel.getBits() << 3) | maskPattern;
    bits.appendBits(typeInfo, 5);

    var bchCode = _.calculateBCHCode(typeInfo, _.TYPE_INFO_POLY);
    bits.appendBits(bchCode, 10);

    var maskBits = new BitArray();
    maskBits.appendBits(_.TYPE_INFO_MASK_PATTERN, 15);
    bits.xor(maskBits);

    if (bits.getSize() != 15) {  // Just in case.
      throw new WriterError('should not happen but we got: ' +
        bits.getSize());
    }
  };

  /**
   * Make bit vector of version information. On success, store the result in
   * "bits" and return true.  See 8.10 of JISX0510:2004 (p.45) for details.
   * @param {Version} version version.
   * @param {BitArray} bits result array.
   */
  _.makeVersionInfoBits = function(version, bits) {
    bits.appendBits(version.getVersionNumber(), 6);
    var bchCode = _.calculateBCHCode(version.getVersionNumber(),
      _.VERSION_INFO_POLY);
    bits.appendBits(bchCode, 12);

    if (bits.getSize() != 18) {  // Just in case.
      throw new WriterError('should not happen but we got: ' +
        bits.getSize());
    }
  };

  /**
   * @return {boolean} if value is empty.
   */
  _.isEmpty = function(value) {
    return value == -1;
  };

  /**
   * @param {ByteMatrix} matrix matrix to add timing patterns to.
   */
  _.embedTimingPatterns = function(matrix) {
    // -8 is for skipping position detection patterns (size 7), and two
    // horizontal/vertical separation patterns (size 1). Thus, 8 = 7 + 1.
    for (var i = 8; i < matrix.getWidth() - 8; ++i) {
      var bit = (i + 1) % 2;
      // Horizontal line.
      if (_.isEmpty(matrix.get(i, 6))) {
        matrix.set(i, 6, bit);
      }
      // Vertical line.
      if (_.isEmpty(matrix.get(6, i))) {
        matrix.set(6, i, bit);
      }
    }
  };

  /**
   * Embed the lonely dark dot at left bottom corner. JISX0510:2004 (p.46)
   * @param {ByteMatrix} matrix the matrix.
   */
  _.embedDarkDotAtLeftBottomCorner = function(matrix) {
    if (matrix.get(8, matrix.getHeight() - 8) == 0) {
      throw new WriterError();
    }
    matrix.set(8, matrix.getHeight() - 8, 1);
  };

  _.embedHorizontalSeparationPattern = function(xStart, yStart, matrix) {
    for (var x = 0; x < 8; ++x) {
      if (!_.isEmpty(matrix.get(xStart + x, yStart))) {
        throw new WriterError();
      }
      matrix.set(xStart + x, yStart, 0);
    }
  };

  _.embedVerticalSeparationPattern = function(xStart, yStart, matrix) {
    for (var y = 0; y < 7; ++y) {
      if (!_.isEmpty(matrix.get(xStart, yStart + y))) {
        throw new WriterError();
      }
      matrix.set(xStart, yStart + y, 0);
    }
  };

  _.embedPositionAdjustmentPattern = function(xStart, yStart, matrix) {
    for (var y = 0; y < 5; ++y) {
      for (var x = 0; x < 5; ++x) {
        matrix.set(xStart + x, yStart + y,
          _.POSITION_ADJUSTMENT_PATTERN[y][x]);
      }
    }
  };

  _.embedPositionDetectionPattern = function(xStart, yStart, matrix) {
    for (var y = 0; y < 7; ++y) {
      for (var x = 0; x < 7; ++x) {
        matrix.set(xStart + x, yStart + y, _.POSITION_DETECTION_PATTERN[y][x]);
      }
    }
  };

  /**
   * Embed position detection patterns and surrounding vertical/horizontal
   * separators.
   * @param {ByteMatrix} matrix working matrix.
   */
  _.embedPositionDetectionPatternsAndSeparators = function(matrix) {
    // Embed three big squares at corners.
    var pdpWidth = _.POSITION_DETECTION_PATTERN[0].length;
    // Left top corner.
    _.embedPositionDetectionPattern(0, 0, matrix);
    // Right top corner.
    _.embedPositionDetectionPattern(matrix.getWidth() - pdpWidth, 0, matrix);
    // Left bottom corner.
    _.embedPositionDetectionPattern(0, matrix.getWidth() - pdpWidth, matrix);

    // Embed horizontal separation patterns around the squares.
    var hspWidth = 8;
    // Left top corner.
    _.embedHorizontalSeparationPattern(0, hspWidth - 1, matrix);
    // Right top corner.
    _.embedHorizontalSeparationPattern(matrix.getWidth() - hspWidth,
      hspWidth - 1, matrix);
    // Left bottom corner.
    _.embedHorizontalSeparationPattern(0, matrix.getWidth() - hspWidth,
      matrix);

    // Embed vertical separation patterns around the squares.
    var vspSize = 7;
    // Left top corner.
    _.embedVerticalSeparationPattern(vspSize, 0, matrix);
    // Right top corner.
    _.embedVerticalSeparationPattern(matrix.getHeight() - vspSize - 1, 0,
      matrix);
    // Left bottom corner.
    _.embedVerticalSeparationPattern(vspSize, matrix.getHeight() - vspSize,
      matrix);
  };

  /**
   * Embed position adjustment patterns if needed.
   */
  _.maybeEmbedPositionAdjustmentPatterns = function(version, matrix) {
    // The patterns appear if version >= 2
    if (version.getVersionNumber() < 2) {
      return;
    }
    var index = version.getVersionNumber() - 1;
    var coordinates = _.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[index];
    var numCoordinates =
      _.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[index].length;
    for (var i = 0; i < numCoordinates; ++i) {
      for (var j = 0; j < numCoordinates; ++j) {
        var y = coordinates[i];
        var x = coordinates[j];
        if (x == -1 || y == -1) {
          continue;
        }
        // If the cell is unset, we embed the position adjustment pattern here.
        if (_.isEmpty(matrix.get(x, y))) {
          // -2 is necessary since the x/y coordinates point to the center of
          // the pattern, not the
          // left top corner.
          _.embedPositionAdjustmentPattern(x - 2, y - 2, matrix);
        }
      }
    }
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2008 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.encoder.Encoder');
goog.require('w69b.qr.BitArray');
goog.require('w69b.qr.CharacterSetECI');
goog.require('w69b.qr.EncodeHintType');
goog.require('w69b.qr.ErrorCorrectionLevel');
goog.require('w69b.qr.GF256');
goog.require('w69b.qr.Mode');
goog.require('w69b.qr.ModeEnum');
goog.require('w69b.qr.ReedSolomonEncoder');
goog.require('w69b.qr.Version');
goog.require('w69b.qr.encoder.BlockPair');
goog.require('w69b.qr.encoder.MaskUtil');
goog.require('w69b.qr.encoder.MatrixUtil');
goog.require('w69b.qr.encoder.QRCode');
goog.require('w69b.qr.stringutils');

goog.scope(function() {
  var ErrorCorrectionLevel = w69b.qr.ErrorCorrectionLevel;
  var BitArray = w69b.qr.BitArray;
  var ByteMatrix = w69b.qr.encoder.ByteMatrix;
  var MatrixUtil = w69b.qr.encoder.MatrixUtil;
  var Version = w69b.qr.Version;
  var WriterError = w69b.qr.WriterError;
  var BlockPair = w69b.qr.encoder.BlockPair;
  var QRCode = w69b.qr.encoder.QRCode;
  var MaskUtil = w69b.qr.encoder.MaskUtil;
  var Mode = w69b.qr.Mode;
  var ModeEnum = w69b.qr.ModeEnum;
  var EncodeHintType = w69b.qr.EncodeHintType;
  var CharacterSetECI = w69b.qr.CharacterSetECI;
  var ReedSolomonEncoder = w69b.qr.ReedSolomonEncoder;
  var stringutils = w69b.qr.stringutils;


  /**
   * @author satorux@google.com (Satoru Takabayashi) - creator
   * @author dswitkin@google.com (Daniel Switkin) - ported from C+
   * @author mb@w69b.com (Manuel Braun) - ported to js
   */
  var _ = w69b.qr.encoder.Encoder;

  // The original table is defined in the table 5 of JISX0510:2004 (p.19).
  _.ALPHANUMERIC_TABLE = [
    // 0x00-0x0f
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // 0x10-0x1f
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    // 0x20-0x2f
    36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43,
    // 0x30-0x3f
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1,
    // 0x40-0x4f
    -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
    // 0x50-0x5f
    25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1
  ];

  _.DEFAULT_BYTE_MODE_ENCODING = 'UTF-8';

  /** The mask penalty calculation is complicated.  See Table 21 of
   * JISX0510:2004 (p.45) for details.  Basically it applies four rules and
   * summate all penalties.
   */
  _.calculateMaskPenalty = function(matrix) {
    return MaskUtil.applyMaskPenaltyRule1(matrix) +
      MaskUtil.applyMaskPenaltyRule2(matrix) +
      MaskUtil.applyMaskPenaltyRule3(matrix) +
      MaskUtil.applyMaskPenaltyRule4(matrix);
  };

  /**
   *  Encode "bytes" with the error correction level "ecLevel". The encoding
   *  mode will be chosen internally by chooseMode(). On success, store the
   *  result in "qrCode".
   *
   * We recommend you to use QRCode.EC_LEVEL_L (the lowest level) for
   * "getECLevel" since our primary use is to show QR code on desktop screens.
   * We don't need very strong error correction for this purpose.
   *
   * Note that there is no way to encode bytes in MODE_KANJI. We might want to
   * add EncodeWithMode() with which clients can specify the encoding mode. For
   * now, we don't need the functionality.
   *
   * @param {string} content string.
   * @param {ErrorCorrectionLevel} ecLevel error correction level.
   * @param {Object=} opt_hints encoding hints.
   *
   */

  _.encode = function(content, ecLevel, opt_hints) {

    // Determine what character encoding has been specified by the caller, if
    // any
    var encoding = opt_hints ? opt_hints[EncodeHintType.CHARACTER_SET] : null;
    var forceECI = opt_hints ? opt_hints[EncodeHintType.FORCE_ADD_ECI] : false;
    if (encoding == null) {
      encoding = _.DEFAULT_BYTE_MODE_ENCODING;
    }

    // Pick an encoding mode appropriate for the content. Note that this will
    // not attempt to use multiple modes / segments even if that were more
    // efficient. Twould be nice.
    var mode = _.chooseMode(content, encoding);

    // This will store the header information, like mode and
    // length, as well as "header" segments like an ECI segment.
    var headerBits = new BitArray();

    // Append ECI segment if applicable
    // Disabled in compat mode as some scanners seem to have problems with it.
    if (forceECI ||
      (mode == ModeEnum.BYTE && _.DEFAULT_BYTE_MODE_ENCODING != encoding)) {
      var eci = CharacterSetECI.getValue(encoding);
      if (eci) {
        _.appendECI(eci, headerBits);
      }
    }

    // (With ECI in place,) Write the mode marker
    _.appendModeInfo(mode, headerBits);

    // Collect data within the main segment, separately, to count its size if
    // needed. Don't add it to main payload yet.
    var dataBits = new BitArray();
    _.appendBytes(content, mode, dataBits, encoding);

    // Hard part: need to know version to know how many bits length takes. But
    // need to know how many bits it takes to know version. First we take a
    // guess at version by assuming version will be the minimum, 1:

    var provisionalBitsNeeded = headerBits.getSize() +
      mode.getCharacterCountBits(Version.getVersionForNumber(1)) +
      dataBits.getSize();
    var provisionalVersion = _.chooseVersion(provisionalBitsNeeded, ecLevel);

    // Use that guess to calculate the right version. I am still not sure this
    // works in 100% of cases.

    var bitsNeeded = headerBits.getSize() +
      mode.getCharacterCountBits(provisionalVersion) +
      dataBits.getSize();
    var version = _.chooseVersion(bitsNeeded, ecLevel);

    var headerAndDataBits = new BitArray();
    headerAndDataBits.appendBitArray(headerBits);
    // Find "length" of main segment and write it
    var numLetters =
      (mode == ModeEnum.BYTE ? dataBits.getSizeInBytes() : content.length);
    _.appendLengthInfo(numLetters, version, mode, headerAndDataBits);
    // Put data together into the overall payload
    headerAndDataBits.appendBitArray(dataBits);

    var ecBlocks = version.getECBlocksForLevel(ecLevel);
    var numDataBytes = version.getTotalCodewords() -
      ecBlocks.getTotalECCodewords();

    // Terminate the bits properly.
    _.terminateBits(numDataBytes, headerAndDataBits);

    // Interleave data bits with error correction code.
    var finalBits = _.interleaveWithECBytes(headerAndDataBits,
      version.getTotalCodewords(),
      numDataBytes,
      ecBlocks.getNumBlocks());

    var qrCode = new QRCode();

    qrCode.setECLevel(ecLevel);
    qrCode.setMode(mode);
    qrCode.setVersion(version);

    //  Choose the mask pattern and set to "qrCode".
    var dimension = version.getDimensionForVersion();
    var matrix = new ByteMatrix(dimension, dimension);
    var maskPattern = _.chooseMaskPattern(finalBits, ecLevel, version, matrix);
    qrCode.setMaskPattern(maskPattern);

    // Build the matrix and set it to "qrCode".
    MatrixUtil.buildMatrix(finalBits, ecLevel, version, maskPattern, matrix);
    qrCode.setMatrix(matrix);

    return qrCode;
  };

  /**
   * @param {number} code ascii code.
   * @return {number} the code point of the table used in alphanumeric mode or
   *  -1 if there is no corresponding code in the table.
   */
  _.getAlphanumericCode = function(code) {
    code = Number(code);
    if (code < _.ALPHANUMERIC_TABLE.length) {
      return _.ALPHANUMERIC_TABLE[code];
    }
    return -1;
  };


  /**
   * Choose the best mode by examining the content. Note that 'encoding' is
   * used as a hint;
   * if it is Shift_JIS, and the input is only double-byte Kanji, then we
   * return {@link Mode#KANJI}.
   * @param {string} content to encode.
   * @param {string=} opt_encoding optional encoding..
   */
  _.chooseMode = function(content, opt_encoding) {
    if ('SHIFT_JIS' == opt_encoding) {
      // Choose Kanji mode if all input are double-byte characters
      return _.isOnlyDoubleByteKanji(content) ? ModeEnum.KANJI : ModeEnum.BYTE;
    }
    var hasNumeric = false;
    var hasAlphanumeric = false;
    var zeroChar = '0'.charCodeAt(0);
    var nineChar = '9'.charCodeAt(0);
    for (var i = 0; i < content.length; ++i) {
      var c = content.charCodeAt(i);
      if (c >= zeroChar && c <= nineChar) {
        hasNumeric = true;
      } else if (_.getAlphanumericCode(c) != -1) {
        hasAlphanumeric = true;
      } else {
        return ModeEnum.BYTE;
      }
    }
    if (hasAlphanumeric) {
      return ModeEnum.ALPHANUMERIC;
    }
    if (hasNumeric) {
      return ModeEnum.NUMERIC;
    }
    return ModeEnum.BYTE;
  };

  _.isOnlyDoubleByteKanji = function(content) {
    var bytes = [];
    try {
      bytes = stringutils.stringToBytes(content, 'SHIFT_JIS');
    } catch (uee) {
      return false;
    }
    var length = bytes.length;
    if (length % 2 != 0) {
      return false;
    }
    for (var i = 0; i < length; i += 2) {
      var byte1 = bytes[i] & 0xFF;
      if ((byte1 < 0x81 || byte1 > 0x9F) && (byte1 < 0xE0 || byte1 > 0xEB)) {
        return false;
      }
    }
    return true;
  };

  _.chooseMaskPattern = function(bits, ecLevel, version, matrix) {

    var minPenalty = Number.MAX_VALUE;  // Lower penalty is better.
    var bestMaskPattern = -1;
    // We try all mask patterns to choose the best one.
    for (var maskPattern = 0; maskPattern < QRCode.NUM_MASK_PATTERNS;
         maskPattern++) {
      MatrixUtil.buildMatrix(bits, ecLevel, version, maskPattern, matrix);
      var penalty = _.calculateMaskPenalty(matrix);
      if (penalty < minPenalty) {
        minPenalty = penalty;
        bestMaskPattern = maskPattern;
      }
    }
    return bestMaskPattern;
  };

  _.chooseVersion = function(numInputBits, ecLevel) {
    // In the following comments, we use numbers of Version 7-H.
    for (var versionNum = 1; versionNum <= 40; versionNum++) {
      var version = Version.getVersionForNumber(versionNum);
      // numBytes = 196
      var numBytes = version.getTotalCodewords();
      // getNumECBytes = 130
      var ecBlocks = version.getECBlocksForLevel(ecLevel);
      var numEcBytes = ecBlocks.getTotalECCodewords();
      // getNumDataBytes = 196 - 130 = 66
      var numDataBytes = numBytes - numEcBytes;
      var totalInputBytes = Math.floor((numInputBits + 7) / 8);
      if (numDataBytes >= totalInputBytes) {
        return version;
      }
    }
    throw new WriterError('Data too big');
  };

  /**
   * Terminate bits as described in 8.4.8 and 8.4.9 of JISX0510:2004 (p.24).
   */
  _.terminateBits = function(numDataBytes, bits) {
    var i;
    var capacity = numDataBytes << 3;
    if (bits.getSize() > capacity) {
      throw new WriterError('data bits cannot fit in the QR Code' +
        bits.getSize() + ' > ' + capacity);
    }
    for (i = 0; i < 4 && bits.getSize() < capacity; ++i) {
      bits.appendBit(false);
    }
    // Append termination bits. See 8.4.8 of JISX0510:2004 (p.24) for details.
    // If the last byte isn't 8-bit aligned, we'll add padding bits.
    var numBitsInLastByte = bits.getSize() & 0x07;
    if (numBitsInLastByte > 0) {
      for (i = numBitsInLastByte; i < 8; i++) {
        bits.appendBit(false);
      }
    }
    // If we have more space, we'll fill the space with padding patterns
    // defined in 8.4.9 (p.24).
    var numPaddingBytes = numDataBytes - bits.getSizeInBytes();
    for (i = 0; i < numPaddingBytes; ++i) {
      bits.appendBits((i & 0x01) == 0 ? 0xEC : 0x11, 8);
    }
    if (bits.getSize() != capacity) {
      throw new WriterError('Bits size does not equal capacity');
    }
  };

  /** Get number of data bytes and number of error correction bytes for block
   * id "blockID". Store the result in "numDataBytesInBlock", and
   * "numECBytesInBlock". See table 12 in 8.5.1 of JISX0510:2004 (p.30)
   */
  _.getNumDataBytesAndNumECBytesForBlockID = function(numTotalBytes,
                                                      numDataBytes,
                                                      numRSBlocks, blockID,
                                                      numDataBytesInBlock,
                                                      numECBytesInBlock) {
    if (blockID >= numRSBlocks) {
      throw new WriterError('Block ID too large');
    }
    // numRsBlocksInGroup2 = 196 % 5 = 1
    var numRsBlocksInGroup2 = numTotalBytes % numRSBlocks;
    // numRsBlocksInGroup1 = 5 - 1 = 4
    var numRsBlocksInGroup1 = numRSBlocks - numRsBlocksInGroup2;
    // numTotalBytesInGroup1 = 196 / 5 = 39
    var numTotalBytesInGroup1 = Math.floor(numTotalBytes / numRSBlocks);
    // numTotalBytesInGroup2 = 39 + 1 = 40
    var numTotalBytesInGroup2 = numTotalBytesInGroup1 + 1;
    // numDataBytesInGroup1 = 66 / 5 = 13
    var numDataBytesInGroup1 = Math.floor(numDataBytes / numRSBlocks);
    // numDataBytesInGroup2 = 13 + 1 = 14
    var numDataBytesInGroup2 = numDataBytesInGroup1 + 1;
    // numEcBytesInGroup1 = 39 - 13 = 26
    var numEcBytesInGroup1 = numTotalBytesInGroup1 - numDataBytesInGroup1;
    // numEcBytesInGroup2 = 40 - 14 = 26
    var numEcBytesInGroup2 = numTotalBytesInGroup2 - numDataBytesInGroup2;
    // Sanity checks.
    // 26 = 26
    if (numEcBytesInGroup1 != numEcBytesInGroup2) {
      throw new WriterError('EC bytes mismatch');
    }
    // 5 = 4 + 1.
    if (numRSBlocks != numRsBlocksInGroup1 + numRsBlocksInGroup2) {
      throw new WriterError('RS blocks mismatch');
    }
    // 196 = (13 + 26) * 4 + (14 + 26) * 1
    if (numTotalBytes !=
      ((numDataBytesInGroup1 + numEcBytesInGroup1) *
        numRsBlocksInGroup1) +
        ((numDataBytesInGroup2 + numEcBytesInGroup2) *
          numRsBlocksInGroup2)) {
      throw new WriterError('Total bytes mismatch');
    }

    if (blockID < numRsBlocksInGroup1) {
      numDataBytesInBlock[0] = numDataBytesInGroup1;
      numECBytesInBlock[0] = numEcBytesInGroup1;
    } else {
      numDataBytesInBlock[0] = numDataBytesInGroup2;
      numECBytesInBlock[0] = numEcBytesInGroup2;
    }
  };

  /**
   * Interleave "bits" with corresponding error correction bytes. On success,
   * store the result in "result". The interleave rule is complicated. See 8.6
   * of JISX0510:2004 (p.37) for details.
   */
  _.interleaveWithECBytes = function(bits, numTotalBytes, numDataBytes,
                                     numRSBlocks) {

    // "bits" must have "getNumDataBytes" bytes of data.
    if (bits.getSizeInBytes() != numDataBytes) {
      throw new WriterError('Number of bits and data bytes does not match');
    }

    // Step 1.  Divide data bytes into blocks and generate error correction
    // bytes for them. We'll store the divided data bytes blocks and error
    // correction bytes blocks into "blocks".
    var dataBytesOffset = 0;
    var maxNumDataBytes = 0;
    var maxNumEcBytes = 0;

    // Since, we know the number of reedsolmon blocks, we can initialize the
    // vector with the number.
    var blocks = [];
    var i;

    for (i = 0; i < numRSBlocks; ++i) {
      var numDataBytesInBlock = [0];
      var numEcBytesInBlock = [0];
      _.getNumDataBytesAndNumECBytesForBlockID(
        numTotalBytes, numDataBytes, numRSBlocks, i,
        numDataBytesInBlock, numEcBytesInBlock);

      var size = numDataBytesInBlock[0];
      var dataBytes = new Array(size);
      bits.toBytes(8 * dataBytesOffset, dataBytes, 0, size);
      var ecBytes = _.generateECBytes(dataBytes, numEcBytesInBlock[0]);
      blocks.push(new BlockPair(dataBytes, ecBytes));

      maxNumDataBytes = Math.max(maxNumDataBytes, size);
      maxNumEcBytes = Math.max(maxNumEcBytes, ecBytes.length);
      dataBytesOffset += numDataBytesInBlock[0];
    }
    if (numDataBytes != dataBytesOffset) {
      throw new WriterError('Data bytes does not match offset');
    }

    var result = new BitArray();

    // First, place data blocks.
    for (i = 0; i < maxNumDataBytes; ++i) {
      blocks.forEach(function(block) {
        var dataBytes = block.getDataBytes();
        if (i < dataBytes.length) {
          result.appendBits(dataBytes[i], 8);
        }
      });
    }
    // Then, place error correction blocks.
    for (i = 0; i < maxNumEcBytes; ++i) {
      blocks.forEach(function(block) {
        var ecBytes = block.getErrorCorrectionBytes();
        if (i < ecBytes.length) {
          result.appendBits(ecBytes[i], 8);
        }
      });
    }
    if (numTotalBytes != result.getSizeInBytes()) {  // Should be same.
      throw new WriterError('Interleaving error: ' + numTotalBytes +
        ' and ' + result.getSizeInBytes() + ' differ.');
    }

    return result;
  };

  /**
   * @param {Array.<number>} dataBytes bytes.
   * @param {number} numEcBytesInBlock num.
   * @return {Array.<number>} bytes.
   */
  _.generateECBytes = function(dataBytes, numEcBytesInBlock) {
    var numDataBytes = dataBytes.length;
    var toEncode = new Array(numDataBytes + numEcBytesInBlock);
    var i;
    for (i = 0; i < numDataBytes; i++) {
      toEncode[i] = dataBytes[i] & 0xFF;
    }
    new ReedSolomonEncoder(w69b.qr.GF256.QR_CODE_FIELD).encode(toEncode,
      numEcBytesInBlock);

    var ecBytes = new Array(numEcBytesInBlock);
    for (i = 0; i < numEcBytesInBlock; i++) {
      ecBytes[i] = toEncode[numDataBytes + i];
    }
    return ecBytes;
  };

  /**
   * Append mode info. On success, store the result in "bits".
   */
  _.appendModeInfo = function(mode, bits) {
    bits.appendBits(mode.getBits(), 4);
  };


  /**
   * Append length info. On success, store the result in "bits".
   */
  _.appendLengthInfo = function(numLetters, version, mode, bits) {
    var numBits = mode.getCharacterCountBits(version);
    if (numLetters >= (1 << numBits)) {
      throw new WriterError(numLetters + ' is bigger than ' +
        ((1 << numBits) - 1));
    }
    bits.appendBits(numLetters, numBits);
  };

  /**
   * Append "bytes" in "mode" mode (encoding) into "bits".
   * On success, store the result in "bits".
   */
  _.appendBytes = function(content, mode, bits, encoding) {
    switch (mode) {
      case ModeEnum.NUMERIC:
        _.appendNumericBytes(content, bits);
        break;
      case ModeEnum.ALPHANUMERIC:
        _.appendAlphanumericBytes(content, bits);
        break;
      case ModeEnum.BYTE:
        _.append8BitBytes(content, bits, encoding);
        break;
      case ModeEnum.KANJI:
        _.appendKanjiBytes(content, bits);
        break;
      default:
        throw new WriterError('Invalid mode: ' + mode);
    }
  };

  _.appendNumericBytes = function(content, bits) {
    var length = content.length;
    var i = 0;
    var num2;
    var codeZero = '0'.charCodeAt(0);
    while (i < length) {
      var num1 = content.charCodeAt(i) - codeZero;
      if (i + 2 < length) {
        // Encode three numeric letters in ten bits.
        num2 = content.charCodeAt(i + 1) - codeZero;
        var num3 = content.charCodeAt(i + 2) - codeZero;
        bits.appendBits(num1 * 100 + num2 * 10 + num3, 10);
        i += 3;
      } else if (i + 1 < length) {
        // Encode two numeric letters in seven bits.
        num2 = content.charCodeAt(i + 1) - codeZero;
        bits.appendBits(num1 * 10 + num2, 7);
        i += 2;
      } else {
        // Encode one numeric letter in four bits.
        bits.appendBits(num1, 4);
        i++;
      }
    }
  };

  _.appendAlphanumericBytes = function(content, bits) {
    var length = content.length;
    var i = 0;
    while (i < length) {
      var code1 = _.getAlphanumericCode(content.charCodeAt(i));
      if (code1 == -1) {
        throw new WriterError();
      }
      if (i + 1 < length) {
        var code2 = _.getAlphanumericCode(content.charCodeAt(i + 1));
        if (code2 == -1) {
          throw new WriterError();
        }
        // Encode two alphanumeric letters in 11 bits.
        bits.appendBits(code1 * 45 + code2, 11);
        i += 2;
      } else {
        // Encode one alphanumeric letter in six bits.
        bits.appendBits(code1, 6);
        i++;
      }
    }
  };

  _.append8BitBytes = function(content, bits, encoding) {
    var bytes;
    try {
      bytes = stringutils.stringToBytes(content, encoding);
    } catch (uee) {
      throw new WriterError(uee);
    }
    bytes.forEach(function(b) {
      bits.appendBits(b, 8);
    });
  };

  _.appendKanjiBytes = function(content, bits) {
    var bytes;
    try {
      bytes = stringutils.stringToBytes(content, 'Shift_JIS');
    } catch (uee) {
      throw new WriterError(uee);
    }
    var length = bytes.length;
    for (var i = 0; i < length; i += 2) {
      var byte1 = bytes[i] & 0xFF;
      var byte2 = bytes[i + 1] & 0xFF;
      var code = (byte1 << 8) | byte2;
      var subtracted = -1;
      if (code >= 0x8140 && code <= 0x9ffc) {
        subtracted = code - 0x8140;
      } else if (code >= 0xe040 && code <= 0xebbf) {
        subtracted = code - 0xc140;
      }
      if (subtracted == -1) {
        throw new WriterError('Invalid byte sequence');
      }
      var encoded = ((subtracted >> 8) * 0xc0) + (subtracted & 0xff);
      bits.appendBits(encoded, 13);
    }
  };

  _.appendECI = function(eci, bits) {
    bits.appendBits(ModeEnum.ECI.getBits(), 4);
    // This is correct for values up to 127, which is all we need now.
    bits.appendBits(eci, 8);
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2009 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

goog.provide('w69b.qr.Binarizer');

goog.scope(function() {

/**
 * This class hierarchy provides a set of methods to convert luminance data to
 * 1 bit data.  It allows the algorithm to vary polymorphically, for example
 * allowing a very expensive thresholding technique for servers and a fast one
 * for mobile. It also permits the implementation to vary, e.g. a JNI version
 * for Android and a Java fallback version for other platforms.
 *
 * @author dswitkin@google.com (Daniel Switkin)
 * Ported to js by Manuel Braun
 *
 *  @param {w69b.qr.QRImage} source gray values .
 *  @constructor
 */
w69b.qr.Binarizer = function(source) {
  /**
   * @protected
   * @type {w69b.qr.QRImage}
   */
  this.source = source;
};
  var Binarizer = w69b.qr.Binarizer;
  var pro = Binarizer.prototype;

  /**
   * @return {w69b.qr.QRImage} image.
   */
  pro.getLuminanceSource = function() {
    return this.source;
  };

  /**
   * Converts one row of luminance data to 1 bit data. May actually do the
   * conversion, or return cached data. Callers should assume this method is
   * expensive and call it as seldom as possible.  This method is intended for
   * decoding 1D barcodes and may choose to apply sharpening.  For callers
   * which only examine one row of pixels at a time, the same BitArray should
   * be reused and passed in with each call for performance. However it is
   * legal to keep more than one row at a time if needed.
   *
   * @param {number} y The row to fetch, 0 <= y < bitmap height.
   * @param {w69b.qr.BitArray} opt_row An optional preallocated array. If null
   * or too small, it will be ignored.  If used, the Binarizer will call
   * BitArray.clear(). Always use the returned object.
   * @return {!w69b.qr.BitArray} The array of bits for this row (true means
   * black).
   */
  pro.getBlackRow = function(y, opt_row) { throw Error(); };

  /**
   * Converts a 2D array of luminance data to 1 bit data. As above, assume this
   * method is expensive and do not call it repeatedly. This method is intended
   * for decoding 2D barcodes and may or may not apply sharpening. Therefore, a
   * row from this matrix may not be identical to one fetched using
   * getBlackRow(), so don't mix and match between them.
   *
   * @return {!w69b.qr.BitMatrix} The 2D array of bits for the image
   * (true means black).
   */
  pro.getBlackMatrix = function() { throw Error(); };

  /**
   * Creates a new object with the same type as this Binarizer implementation,
   * but with pristine state. This is needed because Binarizer implementations
   * may be stateful, e.g. keeping a cache of 1 bit data. See Effective Java
   * for why we can't use Java's clone() method.
   *
   * @param {w69b.qr.QRImage} source The LuminanceSource this Binarizer
   * will operate on.
   * @return {w69b.qr.Binarizer} A new concrete Binarizer implementation
   * object.
   */
  pro.createBinarizer = function(source) { throw Error(); };

  /**
   * @return {number} width.
   */
  pro.getWidth = function() {
    return this.source.width;
  };

  /**
   * @return {number} height.
   */
  pro.getHeight = function() {
    return this.source.height;
  };

});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2009 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.GlobalHistogramBinarizer');
goog.require('w69b.qr.Binarizer');
goog.require('w69b.qr.BitArray');
goog.require('w69b.qr.BitMatrix');
goog.require('w69b.qr.NotFoundError');


goog.scope(function() {
  var BitMatrix = w69b.qr.BitMatrix;
  var BitArray = w69b.qr.BitArray;
   /**
   * This Binarizer implementation uses the old ZXing global histogram
   * approach. It is suitable for low-end mobile devices which don't have
   * enough CPU or memory to use a local thresholding algorithm. However,
   * because it picks a global black point, it cannot handle difficult shadows
   * and gradients.
   *
   * Faster mobile devices and all desktop applications should probably use
   * HybridBinarizer instead.
   *
   * @author dswitkin@google.com (Daniel Switkin)
   * @author Sean Owen
   * Ported to js by Manuel Braun
   *
    * @param {w69b.qr.QRImage} source gray values.
   * @constructor
   * @extends {w69b.qr.Binarizer}
   */
  w69b.qr.GlobalHistogramBinarizer = function(source) {
    goog.base(this, source);
    /**
     * @type {Uint8Array}
     * @private
     */
    this.luminances_ = new Uint8Array(0);
    /**
     * @type {Uint8Array}
     * @private
     */
    this.buckets_ = new Uint8Array(_.LUMINANCE_BUCKETS);
  };
  var _ = w69b.qr.GlobalHistogramBinarizer;
  goog.inherits(_, w69b.qr.Binarizer);
  var pro = _.prototype;


  _.LUMINANCE_BITS = 5;
  _.LUMINANCE_SHIFT = 8 - _.LUMINANCE_BITS;
  _.LUMINANCE_BUCKETS = 1 << _.LUMINANCE_BITS;


  /**
   * Applies simple sharpening to the row data to improve performance of the 1D
   * Readers.
   * @override
   */
    pro.getBlackRow = function(y, row) {
      var x;
      var source = this.getLuminanceSource();
      var width = source.getWidth();
      if (row == null || row.getSize() < width) {
        row = new BitArray(width);
      } else {
        row.clear();
      }

      this.initArrays(width);
      var localLuminances = source.getRow(y, this.luminances_);
      var localBuckets = this.buckets_;
      for (x = 0; x < width; x++) {
        var pixel = localLuminances[x] & 0xff;
        localBuckets[pixel >> _.LUMINANCE_SHIFT]++;
      }
      var blackPoint = _.estimateBlackPoint(localBuckets);

      var left = localLuminances[0] & 0xff;
      var center = localLuminances[1] & 0xff;
      for (x = 1; x < width - 1; x++) {
        var right = localLuminances[x + 1] & 0xff;
        // A simple -1 4 -1 box filter with a weight of 2.
        var luminance = ((center << 2) - left - right) >> 1;
        if (luminance < blackPoint) {
          row.set(x);
        }
        left = center;
        center = right;
      }
      return row;
    };

    /**
     * Does not sharpen the data, as this call is intended to only be used by
     * 2D Readers.
     * @override
     */
    pro.getBlackMatrix = function() {
      var source = this.getLuminanceSource();
      var width = source.getWidth();
      var height = source.getHeight();
      var matrix = new BitMatrix(width, height);

      // nasty js scopes.
      var localLuminances, pixel, x, y;
      // Quickly calculates the histogram by sampling four rows from the image.
      // This proved to be more robust on the blackbox tests than sampling a
      // diagonal as we used to do.
      this.initArrays(width);
      var localBuckets = this.buckets_;
      for (y = 1; y < 5; y++) {
        var row = height * y / 5;
        localLuminances = source.getRow(row, this.luminances_);
        var right = (width << 2) / 5;
        for (x = width / 5; x < right; x++) {
          pixel = localLuminances[x] & 0xff;
          localBuckets[pixel >> _.LUMINANCE_SHIFT]++;
        }
      }
      var blackPoint = _.estimateBlackPoint(localBuckets);

      // We delay reading the entire image luminance until the black point
      // estimation succeeds.  Although we end up reading four rows twice, it
      // is consistent with our motto of "fail quickly" which is necessary for
      // continuous scanning.
      localLuminances = source.getMatrix();
      for (y = 0; y < height; y++) {
        var offset = y * width;
        for (x = 0; x < width; x++) {
          pixel = localLuminances[offset + x] & 0xff;
          if (pixel < blackPoint) {
            matrix.set(x, y);
          }
        }
      }

      return matrix;
    };

  /**
   * @override
   */
    pro.createBinarizer = function(source) {
      return new _(source);
    };

    pro.initArrays = function(luminanceSize) {
      if (this.luminances_.length < luminanceSize) {
        this.luminances_ = new Uint8Array(luminanceSize);
      }
      for (var x = 0; x < _.LUMINANCE_BUCKETS; x++) {
        this.buckets_[x] = 0;
      }
    };

    _.estimateBlackPoint = function(buckets) {
      var x, score;
      // Find the tallest peak in the histogram.
      var numBuckets = buckets.length;
      var maxBucketCount = 0;
      var firstPeak = 0;
      var firstPeakSize = 0;
      for (x = 0; x < numBuckets; x++) {
        if (buckets[x] > firstPeakSize) {
          firstPeak = x;
          firstPeakSize = buckets[x];
        }
        if (buckets[x] > maxBucketCount) {
          maxBucketCount = buckets[x];
        }
      }

      // Find the second-tallest peak which is somewhat far from the tallest
      // peak.
      var secondPeak = 0;
      var secondPeakScore = 0;
      for (x = 0; x < numBuckets; x++) {
        var distanceToBiggest = x - firstPeak;
        // Encourage more distant second peaks by multiplying by square of
        // distance.
        score = buckets[x] * distanceToBiggest * distanceToBiggest;
        if (score > secondPeakScore) {
          secondPeak = x;
          secondPeakScore = score;
        }
      }

      // Make sure firstPeak corresponds to the black peak.
      if (firstPeak > secondPeak) {
        var temp = firstPeak;
        firstPeak = secondPeak;
        secondPeak = temp;
      }

      // If there is too little contrast in the image to pick a meaningful
      // black point, throw rather than waste time trying to decode the image,
      // and risk false positives.
      if (secondPeak - firstPeak <= numBuckets >> 4) {
        throw new w69b.qr.NotFoundError();
      }

      // Find a valley between them that is low and closer to the white peak.
      var bestValley = secondPeak - 1;
      var bestValleyScore = -1;
      for (x = secondPeak - 1; x > firstPeak; x--) {
        var fromFirst = x - firstPeak;
        score = fromFirst * fromFirst * (secondPeak - x) *
          (maxBucketCount - buckets[x]);
        if (score > bestValleyScore) {
          bestValley = x;
          bestValleyScore = score;
        }
      }

      return bestValley << _.LUMINANCE_SHIFT;
    };
});


// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.IntArray2D');
goog.scope(function() {
  /**
   * Provides a pre-allocated row-first 2d integer array.
   * @param {number} size1 size of first dimension.
   * @param {number} size2 size ofsecond dimension.
   * @constructor
   */
  w69b.qr.IntArray2D = function(size1, size2) {
    this.size1 = size1;
    this.size2 = size2;
    this.data = new Int32Array(size1 * size2);
  };
  var pro = w69b.qr.IntArray2D.prototype;

  /**
   * Get value.
   * @param {number} dim1 first dimension.
   * @param {number} dim2 second dimension.
   * @return {number} value at given position.
   */
  pro.getAt = function(dim1, dim2) {
    return this.data[this.size2 * dim1 + dim2];
  };
  /**
   * Set value.
   * @param {number} dim1 first dimension.
   * @param {number} dim2 second dimension.
   * @param {number} value at given position.
   */
  pro.setAt = function(dim1, dim2, value) {
    this.data[this.size2 * dim1 + dim2] = value;
  };
});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2009 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.HybridBinarizer');
goog.require('w69b.qr.BitArray');
goog.require('w69b.qr.BitMatrix');
goog.require('w69b.qr.GlobalHistogramBinarizer');
goog.require('w69b.qr.IntArray2D');

goog.scope(function() {
  var BitMatrix = w69b.qr.BitMatrix;
  var IntArray2D = w69b.qr.IntArray2D;
  /**
   * This class implements a local thresholding algorithm, which while slower
   * than the GlobalHistogramBinarizer, is fairly efficient for what it does.
   * It is designed for high frequency images of barcodes with black data on
   * white backgrounds. For this application, it does a much better job than a
   * global blackpoint with severe shadows and gradients.  However it tends to
   * produce artifacts on lower frequency images and is therefore not a good
   * general purpose binarizer for uses outside ZXing.
   *
   * This class extends GlobalHistogramBinarizer, using the older histogram
   * approach for 1D readers, and the newer local approach for 2D readers. 1D
   * decoding using a per-row histogram is already inherently local, and only
   * fails for horizontal gradients. We can revisit that problem later, but for
   * now it was not a win to use local blocks for 1D.
   *
   * This Binarizer is the default for the unit tests and the recommended class
   * for library users.
   *
   * @author dswitkin@google.com (Daniel Switkin)
   * ported to js by Manuel Braun
   *
   * @param {w69b.qr.QRImage} source gray values.
   * @constructor
   * @extends {w69b.qr.GlobalHistogramBinarizer}
   */
  w69b.qr.HybridBinarizer = function(source) {
    goog.base(this, source);
  };
  goog.inherits(w69b.qr.HybridBinarizer, w69b.qr.GlobalHistogramBinarizer);
  var _ = w69b.qr.HybridBinarizer;
  var pro = _.prototype;

  /**
   * @private
   * @type {BitMatrix}
   */
  pro.matrix_;

  // This class uses 5x5 blocks to compute local luminance, where each block is
  // 8x8 pixels.  So this is the smallest dimension in each axis we can accept.
  _.BLOCK_SIZE_POWER = 3;
  _.BLOCK_SIZE = 1 << _.BLOCK_SIZE_POWER; // ...0100...00
  _.BLOCK_SIZE_MASK = _.BLOCK_SIZE - 1;   // ...0011...11
  _.MINIMUM_DIMENSION = _.BLOCK_SIZE * 5;
  _.MIN_DYNAMIC_RANGE = 24;


  /**
   * Calculates the final BitMatrix once for all requests. This could be called
   * once from the constructor instead, but there are some advantages to doing
   * it lazily, such as making profiling easier, and not doing heavy lifting
   * when callers don't expect it.
   * @override
   */
  pro.getBlackMatrix = function() {
    if (this.matrix_ != null) {
      return this.matrix_;
    }
    var source = this.getLuminanceSource();
    var width = source.getWidth();
    var height = source.getHeight();
    if (width >= _.MINIMUM_DIMENSION && height >= _.MINIMUM_DIMENSION) {
      var luminances = source.getMatrix();
      // dived by 8
      var subWidth = width >> _.BLOCK_SIZE_POWER;
      // only even numbers
      if ((width & _.BLOCK_SIZE_MASK) != 0) {
        subWidth++;
      }
      var subHeight = height >> _.BLOCK_SIZE_POWER;
      if ((height & _.BLOCK_SIZE_MASK) != 0) {
        subHeight++;
      }
      var blackPoints = _.calculateBlackPoints(luminances, subWidth,
        subHeight, width, height);

      var newMatrix = new BitMatrix(width, height);
      _.calculateThresholdForBlock(luminances, subWidth, subHeight,
        width, height, blackPoints, newMatrix);
      this.matrix_ = newMatrix;
    } else {
      // If the image is too small, fall back to the global histogram approach.
      this.matrix_ = goog.base(this, 'getBlackMatrix');
    }
    return this.matrix_;
  };

  /**
   * @override
   */
  pro.createBinarizer = function(source) {
    return new _(source);
  };

  /**
   * For each block in the image, calculate the average black point using a 5x5
   * grid of the blocks around it. Also handles the corner cases (fractional
   * blocks are computed based on the last pixels in the row/column which are
   * also used in the previous block).
   */
  _.calculateThresholdForBlock = function(luminances, subWidth, subHeight,
                                          width, height, blackPoints, matrix) {
    for (var y = 0; y < subHeight; y++) {
      var yoffset = y << _.BLOCK_SIZE_POWER;
      var maxYOffset = height - _.BLOCK_SIZE;
      if (yoffset > maxYOffset) {
        yoffset = maxYOffset;
      }
      for (var x = 0; x < subWidth; x++) {
        var xoffset = x << _.BLOCK_SIZE_POWER;
        var maxXOffset = width - _.BLOCK_SIZE;
        if (xoffset > maxXOffset) {
          xoffset = maxXOffset;
        }
        var left = _.cap(x, 2, subWidth - 3);
        var top = _.cap(y, 2, subHeight - 3);
        var sum = 0;
        for (var z = -2; z <= 2; z++) {
          var offset = (top + z) * blackPoints.size2;
          var raw = blackPoints.data;
          sum += raw[offset + left - 2] + raw[offset + left - 1] +
            raw[offset + left] + raw[offset + left + 1] +
            raw[offset + left + 2];
        }
        var average = sum / 25;
        _.thresholdBlock(luminances, xoffset, yoffset, average, width, matrix);
      }
    }
  };

  /**
   * @param {number} value value.
   * @param {number} min min.
   * @param {number} max max.
   * @return {number} capped value.
   */
  _.cap = function(value, min, max) {
    return value < min ? min : value > max ? max : value;
  };

  /**
   * Applies a single threshold to a block of pixels.
   */
  _.thresholdBlock = function(luminances, xoffset, yoffset, threshold, stride,
                              matrix) {
    for (var y = 0, offset = yoffset * stride + xoffset; y < _.BLOCK_SIZE;
         y++, offset += stride) {
      for (var x = 0; x < _.BLOCK_SIZE; x++) {
        // Comparison needs to be <= so that black == 0 pixels are
        // black even if the threshold is 0.
        if ((luminances[offset + x] & 0xFF) <= threshold) {
          matrix.set(xoffset + x, yoffset + y);
        }
      }
    }
  };

  /**
   * Calculates a single black point for each block of pixels and saves it away.
   * See the following thread for a discussion of this algorithm:
   *  http://groups.google.com/group/zxing/browse_thread/thread/d06efa2c35a7ddc0
   */
  _.calculateBlackPoints = function(luminances, subWidth, subHeight, width,
                                    height) {
    var xx;
    var blackPoints = new IntArray2D(subHeight, subWidth);
    for (var y = 0; y < subHeight; y++) {
      var yoffset = y << _.BLOCK_SIZE_POWER;
      var maxYOffset = height - _.BLOCK_SIZE;
      if (yoffset > maxYOffset) {
        yoffset = maxYOffset;
      }
      for (var x = 0; x < subWidth; x++) {
        var xoffset = x << _.BLOCK_SIZE_POWER;
        var maxXOffset = width - _.BLOCK_SIZE;
        if (xoffset > maxXOffset) {
          xoffset = maxXOffset;
        }
        var sum = 0;
        var min = 0xFF;
        var max = 0;
        for (var yy = 0, offset = yoffset * width + xoffset;
             yy < _.BLOCK_SIZE; yy++, offset += width) {
          for (xx = 0; xx < _.BLOCK_SIZE; xx++) {
            var pixel = luminances[offset + xx] & 0xFF;
            sum += pixel;
            // still looking for good contrast
            if (pixel < min) {
              min = pixel;
            }
            if (pixel > max) {
              max = pixel;
            }
          }
          // short-circuit min/max tests once dynamic range is met
          if (max - min > _.MIN_DYNAMIC_RANGE) {
            // finish the rest of the rows quickly
            for (yy++, offset += width;
                 yy < _.BLOCK_SIZE; yy++, offset += width) {
              for (xx = 0; xx < _.BLOCK_SIZE; xx++) {
                sum += luminances[offset + xx] & 0xFF;
              }
            }
          }
        }

        // The default estimate is the average of the values in the block.
        var average = sum >> (_.BLOCK_SIZE_POWER * 2);
        if (max - min <= _.MIN_DYNAMIC_RANGE) {
          // If variation within the block is low, assume this is a block with
          // only light or only dark pixels. In that case we do not want to use
          // the average, as it would divide this low contrast area into black
          // and white pixels, essentially creating data out of noise.
          //
          // The default assumption is that the block is light/background.
          // Since no estimate for the level of dark pixels exists locally, use
          // half the min for the block.
          average = min >> 1;

          if (y > 0 && x > 0) {
            // Correct the "white background" assumption for blocks that have
            // neighbors by comparing the pixels in this block to the
            // previously calculated black points. This is based on the fact
            // that dark barcode symbology is always surrounded by some amount
            // of light background for which reasonable black point estimates
            // were made. The bp estimated at the boundaries is used for the
            // interior.

            // The (min < bp) is arbitrary but works better than other
            // heuristics that were tried.
            var averageNeighborBlackPoint = (blackPoints.getAt(y - 1, x) +
              (2 * blackPoints.getAt(y, x - 1)) +
              blackPoints.getAt(y - 1, x - 1)) >> 2;
            if (min < averageNeighborBlackPoint) {
              average = averageNeighborBlackPoint;
            }
          }
        }
        blackPoints.setAt(y, x, average);
      }
    }
    return blackPoints;
  };
});


// (c) 2013 Manuel Braun (mb@w69b.com)

goog.provide('w69b.qr.nativepreprocessing');
goog.require('w69b.qr.HybridBinarizer');
goog.require('w69b.qr.QRImage');

goog.scope(function() {
  var _ = w69b.qr.nativepreprocessing;
  var QRImage = w69b.qr.QRImage;

  /**
   * @param {(!ImageData|!w69b.qr.QRImage)} imageData from canvas.
   * @return {!w69b.qr.BitMatrix} binary data.
   */
  _.binarizeImageData = function(imageData) {
    var gray = _.grayscale(imageData);
    var binarizer = new w69b.qr.HybridBinarizer(gray);
    return binarizer.getBlackMatrix();
  };

  /**
   * Returns grayscale version of image.
   * @param {(!ImageData|!w69b.qr.QRImage)} imageData from canvas.
   * @return {!w69b.qr.QRImage} binary data.
   */
  _.grayscale = function(imageData) {
    var grayImg = QRImage.newEmpty(imageData.width, imageData.height);
    var grayData = grayImg.data;
    var rgbaData = imageData.data;

    for (var i = 0; i < grayData.length; ++i) {
      var rgbaPos = i * 4;
      grayData[i] = (rgbaData[rgbaPos] * 33 +
        rgbaData[rgbaPos + 1] * 34 +
        rgbaData[rgbaPos + 2] * 33) / 100;
    }
    return grayImg;
  };

});


// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.imagedecoding');
goog.require('w69b.img.RGBABitMatrix');
goog.require('w69b.img.WebGLBinarizer');
goog.require('w69b.imgtools');
goog.require('w69b.qr.DecodeResult');
goog.require('w69b.qr.Detector');
goog.require('w69b.qr.QRImage');
goog.require('w69b.qr.ReaderError');
goog.require('w69b.qr.decoder');
goog.require('w69b.qr.encoder.Encoder');
goog.require('w69b.qr.nativepreprocessing');

/**
 * Simple high-level interface to decode qr codes.
 * @author mb@w69b.com (Manuel Braun)
 */
goog.scope(function() {
  var Detector = w69b.qr.Detector;
  var RGBABitMatrix = w69b.img.RGBABitMatrix;
  var DecodeResult = w69b.qr.DecodeResult;
  var WebGLBinarizer = w69b.img.WebGLBinarizer;
  var imgtools = w69b.imgtools;
  var preprocessing = w69b.qr.nativepreprocessing;

  var _ = w69b.qr.imagedecoding;

  _.webGLBinarizer_ = null;

  _.getWebGLBinarizer_ = function() {
    if (!_.webGLBinarizer_) {
      _.webGLBinarizer_ = new WebGLBinarizer();
    }
    return _.webGLBinarizer_;
  };

  /**
   * Decode qr code in main thread.
   * @param {(Image|HTMLVideoElement)} img image or video.
   * @param {?w69b.qr.ResultPointCallback=} callback callback for patterns.
   * @param {boolean=} opt_webgl whether to use WebGl binarizer if supported.
   * @return {DecodeResult} result.
   */
  _.decode = function(img, callback, opt_webgl) {
    var imgData;
    if (opt_webgl && WebGLBinarizer.isSupported()) {
      var binarizer = _.getWebGLBinarizer_();
      binarizer.setup(img.width || img.videoHeight, img.height || img.videoHeight);
      binarizer.render(img);
      imgData = binarizer.getBitMatrix();
    } else {
      imgData = imgtools.getImageData(img, 700);
    }
    return _.decodeFromImageData(imgData, callback);
  };

  /**
   * Decode qr code from ImageData or preprocessed RGBABitMatrix.
   * @param {(!ImageData|!w69b.qr.QRImage|!RGBABitMatrix)} imgdata from canvas.
   * @param {?w69b.qr.ResultPointCallback=} opt_callback callback.
   * @return {DecodeResult} decoded qr code.
   */
  _.decodeFromImageData = function(imgdata, opt_callback) {
    var result;
    try {
      result = _.decodeFromImageDataThrowing(imgdata, opt_callback);
    } catch (err) {
      result = new DecodeResult(err);
      if (!(err instanceof w69b.qr.ReaderError))
        throw err;
    }
    return result;
  };

  /**
   * Throws ReaderError if detection fails.
   * @param {(!ImageData|!w69b.qr.QRImage|!RGBABitMatrix)} imgdata from canvas.
   * @param {?w69b.qr.ResultPointCallback=} opt_callback callback.
   * @return {DecodeResult} decoded qr code.
   */
  _.decodeFromImageDataThrowing = function(imgdata, opt_callback) {
    var bitmap;
    if (imgdata instanceof RGBABitMatrix) {
      bitmap = imgdata;
    } else {
      bitmap = preprocessing.binarizeImageData(imgdata);
    }
    var detector = new Detector(bitmap, opt_callback);

    var detectorResult = detector.detect();
    var text = w69b.qr.decoder.decode(detectorResult.bits);

    return new DecodeResult(text, detectorResult.points);
  };

});

goog.exportSymbol('w69b.qr.imagedecoding.decodeFromImageData',
  w69b.qr.imagedecoding.decodeFromImageData);

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.DecodeInWorkerHelper');
goog.require('goog.math.Size');
goog.require('goog.net.jsloader');
goog.require('goog.string');
goog.require('goog.string.path');
goog.require('goog.userAgent');
goog.require('w69b.img.RGBABitMatrix');
goog.require('w69b.img.WebGLBinarizer');
goog.require('w69b.imgtools');
goog.require('w69b.qr.InvalidCharsetError');
goog.require('w69b.qr.WorkerMessageType');
goog.require('w69b.qr.imagedecoding');


goog.scope(function() {
  var qrcode = w69b.qr.imagedecoding;
  var jsloader = goog.net.jsloader;
  var WorkerMessageType = w69b.qr.WorkerMessageType;
  var WebGLBinarizer = w69b.img.WebGLBinarizer;

  /**
   * Helper class that decodes in worker if available and reasonable
   * and falls back to main thread decoding if not.
   * @constructor
   */
  w69b.qr.DecodeInWorkerHelper = function() {
    this.callback_ = null;
  };
  var DecodeInWorkerHelper = w69b.qr.DecodeInWorkerHelper;
  var pro = DecodeInWorkerHelper.prototype;

  /**
   * @type {boolean}
   * @private
   */
  pro.enableWebGl_ = true;

  /**
   * @type {boolean}
   * @private
   */
  pro.enableWorker_ = true;

  /**
   * Initialized with binarizer if supported.
   * @type {WebGLBinarizer}
   * @private
   */
  pro.webglBinarizer_ = null;


  /**
   * @private
   * Set this according to your setup.
   * @type {string} url of worker js file.
   */
  DecodeInWorkerHelper.workerUrl_ = '';
  /**
   * @private
   * Set this if you want to use iconv when needed.
   * @type {?string} url of iconv.js file.
   */
  DecodeInWorkerHelper.iconvUrl_ = null;

  /**
   * Set this according to your setup before creating an instance.
   * @param {string} url of worker js file.
   */
  DecodeInWorkerHelper.setWorkerUrl = function(url) {
    DecodeInWorkerHelper.workerUrl_ = url;
  };

  /**
   * Set this if you want to use iconv when needed. Relative paths are
   * relative to the worker url.
   * @param {string} url of iconv.js file.
   */
  DecodeInWorkerHelper.setIconvUrl = function(url) {
    DecodeInWorkerHelper.iconvUrl_ = url;
  };

  /**
   * Enable or disable WebGl binarizer.
   * @param {boolean} enable WebGL.
   */
  pro.enableWebGl = function(enable) {
    this.enableWebGl_ = enable;
  };

  /**
   * Enable or disable decoding in web worker.
   * @param {boolean} enable worker.
   */
  pro.enableWorker = function(enable) {
    this.enableWorker_ = enable;
  };

  /**
   * Initialize class. You must call this before using it.
   */
  pro.init = function() {
    if (this.enableWorker_) {
      var url = w69b.qr.DecodeInWorkerHelper.workerUrl_;
      if (!url)
        throw Error('missing worker url setup');
      this.worker_ = new Worker(url);
      this.useWorker_ = this.shallUseWorker();
      if (this.useWorker_) {
        // hack for invalid extern.
        this.worker_['addEventListener']('message', this.onMessage_.bind(this));
        if (w69b.qr.DecodeInWorkerHelper.iconvUrl_) {
          this.worker_.postMessage(
            {'setIconvUrl': w69b.qr.DecodeInWorkerHelper.iconvUrl_});
        }
      } else {
        this.worker_.terminate();
        this.worker_ = null;
      }
    }
  };

  /**
   * Check if WebGl is used.
   * @return {boolean} true if webGl is enabled and supported
   */
  pro.isWebGlEnabledAndSupported = function() {
    return this.enableWebGl_ && WebGLBinarizer.isSupported();
  };

  /**
   * Only use workers in browsers that support transferable objects.
   */
  pro.shallUseWorker = function() {
    if (!this.enableWorker_) return false;
    var buffer = new ArrayBuffer(1);
    this.worker_.postMessage(
      {'isfeaturedetect': true, 'buffer': buffer}, [buffer]);
    // When buffer is transfered and not copied, its length is set to zero.
    return buffer.byteLength == 0;
  };

  /**
   * Message form worker received
   * @private
   */
  pro.onMessage_ = function(event) {
    if (this.callback_) {
      var type = event.data[0];
      // Hack for FF memory leak with webgl + worker.
      if (type == 'ffmemoryhack')
        return;
      var value = event.data[1];
      if (value)
        value = window.JSON.parse(/** @type {string} */ (value));
      this.callback_(type, value);
    }
  };

  /**
   * @param {!(HTMLCanvasElement|ImageData|Image|HTMLVideoElement)} imgdata frame to process.
   * @param {!goog.math.Size} size of image data, or desired size of binarizer output in
   * case webGl is used. If aspect ratio is different from input espect ratio, we only use the
   * top-left rectange of the input image that covers the desired size.
   * @param {function(string, ?=)} callback called with result..
   */
  pro.decode = function(imgdata, size, callback) {
    var isBinary = false;
    var imgDataOrMatrix = imgdata;
    size.round();
    if (this.enableWebGl_) {
      // lazzily initialize binarizer
      if (!this.webGLBinarizer_ && WebGLBinarizer.isSupported())
        this.webGLBinarizer_ = new WebGLBinarizer();
      // binarize
      if (this.webGLBinarizer_) {
        var coverSize = new goog.math.Size(
          /** @type {number} */ (imgdata.width || imgdata.videoWidth),
          /** @type {number} */ (imgdata.height || imgdata.videoHeight));
        if (coverSize.fitsInside(size))
          size = coverSize;
        else
          coverSize = coverSize.scaleToCover(size);
        this.webGLBinarizer_.setup(size.width, size.height, coverSize.width, coverSize.height);
        this.webGLBinarizer_.render(imgdata);
        imgDataOrMatrix = this.webGLBinarizer_.getBitMatrix();
        isBinary = true;
        // window.console.log('decoded with webgl');
      }
    }
    if (!(imgDataOrMatrix instanceof ImageData ||
      imgDataOrMatrix instanceof w69b.img.RGBABitMatrix)) {
      imgDataOrMatrix = w69b.imgtools.getImageData(imgDataOrMatrix, size);
    }
    if (this.useWorker_) {
      var buffer = (/** @type {Uint8ClampedArray}  */ (imgDataOrMatrix.data)).buffer;
      var msg = {
        'width': imgDataOrMatrix.width,
        'height': imgDataOrMatrix.height,
        'buffer': buffer,
        'isBinary': isBinary
      };
      this.callback_ = callback;
      this.worker_.postMessage(msg, [buffer]);
      imgDataOrMatrix.data = null;
      imgdata.data = null;
    } else {
      // local fallback
      this.decodeLocalFallback_(imgDataOrMatrix, callback);
    }
  };

  /**
   * Dispose helper
   */
  pro.dispose = function() {
    if (this.worker_)
      this.worker_.terminate();
  };

  /**
   * @private
   * @param {!(ImageData|w69b.img.RGBABitMatrix)} imgdata image data.
   * @param {function(string, ?=)} callback called with result..
   */
  pro.decodeLocalFallback_ = function(imgdata, callback) {
    try {
      var result = qrcode.decodeFromImageData(imgdata, function(pattern) {
        callback(WorkerMessageType.PATTERN, pattern['toJSON']());
      }.bind(this));
    } catch (err) {
      if (err instanceof w69b.qr.InvalidCharsetError && !self.iconv &&
        DecodeInWorkerHelper.iconvUrl_) {
        // load iconv. importScripts(_.iconvPath);
        var url = DecodeInWorkerHelper.iconvUrl_;
        if (!goog.string.startsWith(url,
            'http://') && !goog.string.startsWith(url, 'https://')) {
          // path is relative to worker, so resolve it first.
          url = goog.string.path.dirname(DecodeInWorkerHelper.workerUrl_) +
            '/' + url;
        }
        // And try again when loaded.
        jsloader.load(url).addCallback(function() {
          this.decodeLocalFallback_(imgdata, callback);
        }, this);
        return;
      } else {
        throw err;
      }
    }
    if (result.isError()) {
      var err = result.getError();
      callback(WorkerMessageType.NOTFOUND, err && err.message);
    } else {
      callback(WorkerMessageType.DECODED, result['toJSON']());
    }
    // hack to work arout memory leak in FF
    delete imgdata.data;
  };
});

// Copyright 2015 Manuel Braun (mb@w69b.com). All Rights Reserved.

// Public API exports
goog.provide('w69b.qr.decoding');
goog.require('goog.Promise');
goog.require('goog.math.Size');
goog.require('goog.object');
goog.require('w69b.img.WebGLBinarizer');
goog.require('w69b.qr.DecodeInWorkerHelper');


/**
 * Public high-level decoding API exports.
 * @author mb@w69b.com (Manuel Braun)
 */
goog.scope(function() {
  var WorkerMessageType = w69b.qr.WorkerMessageType;
  var DecodeInWorkerHelper = w69b.qr.DecodeInWorkerHelper;
  var object = goog.object;
  var Promise = goog.Promise;
  var _ = w69b.qr.decoding;

  /**
   * Set this according to your setup before creating an instance.
   * @param {string} url of worker js file.
   * @export
   */
  _.setWorkerUrl = function(url) {
    DecodeInWorkerHelper.setWorkerUrl(url);
  };

  /**
   * Set this if you want to use iconv when needed. Relative paths are
   * relative to the worker url.
   * @param {string} url of iconv.js file.
   * @export
   */
  _.setIconvUrl = function(url) {
    DecodeInWorkerHelper.setIconvUrl(url);
  };

  /**
   * Check WebGl image processing support.
   * @return {boolean} whether WebGL binarizer can be used.
   * @export
   */
  _.isWebGlSupported = function() {
    return w69b.img.WebGLBinarizer.isSupported();
  };

  /**
   * Class to decode QR Code images. Loads a worker at initialization, if enabled,
   * so make sure to re-use instances whenever possible.
   * @param {Object<string,*>=} options options with the following properties:
   * - {boolean} worker: use web worker, if supported, defaults to true
   * - {boolean} webgl: use webgl binarizer, if supported, defaults to true
   * - {number} maxSize: scale down image if large than this value in any dimension.
   *  Defaults to 700px.
   * @constructor
   * @export
   */
  _.Decoder = function(options) {
    var opt = {
      'worker': true,
      'webgl': true,
      'maxSize': 700
    };
    object.extend(opt, options || {});
    var worker = new DecodeInWorkerHelper();
    worker.enableWebGl(opt['webgl']);
    worker.enableWorker(opt['worker']);
    worker.init();
    this.options_ = opt;
    this.worker_ = worker;
    this.busy_ = false;
  };

  /**
   * Release resources.
   * @export
   */
  _.Decoder.prototype.dispose = function() {
    this.worker_.dispose();
  };

  /**
   * Decode image that contains a QR Code. It can handle image/video and imagedata objects.
   * Note that image conversion is expensive, so pass your image as-is whenever possible.
   * @param {Image|HTMLVideoElement|ImageData} img image to decode.
   * @return {Promise} result. Resolves to an object
   * with a text property that contains the decoded string on success.
   * Rejects if no QR code could be found or decoding failed.
   * @export
   */
  _.Decoder.prototype.decode = function(img) {
    if (this.busy_) throw new Error('Decoder is still busy');
    this.busy_ = true;
    var opt = this.options_;
    var worker = this.worker_;
    var resolver = Promise.withResolver();
    // Size of down-scaled image used for decoding internally.
    var size = new goog.math.Size(
      /** @type {number} */ (img.width || img.videoWidth),
      /** @type {number} */ (img.height || img.videoHeight));
    if (opt['maxSize']) {
      var maxSize = new goog.math.Size(opt['maxSize'], opt['maxSize']);
      if (!size.fitsInside(maxSize)) {
        size = size.scaleToFit(maxSize);
        size.floor();
      }
    }
    worker.decode(img, size, function(type, value) {
      switch (type) {
        case WorkerMessageType.DECODED:
          resolver.resolve(value);
          break;
        case WorkerMessageType.NOTFOUND:
          resolver.reject(value ? new Error(value) : null);
          break;
      }
    });
    resolver.promise.thenAlways(function() {
      this.busy_ = false;
    }.bind(this));
    return resolver.promise;
  };
});

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.Drawable');

goog.scope(function() {
  /**
   * Interface uses to draw qr codes.
   * @interface
   */
  w69b.qr.Drawable = function() {
  };
  var pro = w69b.qr.Drawable.prototype;

  /**
   * Set size of drawable and fill background.
   * @param {number} widht with of drawable in pixels.
   * @param {number} height height of drawable in pixels.
   */
  pro.fillBackground = function(widht, height) { };

  /**
   * Fill rectangle with black color.
   * @param {number} x x pos.
   * @param {number} y y pos.
   * @param {number} widht widht of rectangle.
   * @param {number} height height of rectangle.
   */
  pro.fillBlack = function(x, y, widht, height) { };
});


// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.CanvasDrawable');
goog.require('w69b.qr.Drawable');

goog.scope(function() {
  /**
   * @constructor
   * @param {HTMLCanvasElement} canvas to draw on.
   * @implements {w69b.qr.Drawable}
   */
  w69b.qr.CanvasDrawable = function(canvas) {
    this.canvas_ = canvas;
    this.context_ = canvas.getContext('2d');
    this.bgStyle_ = 'rgb(255, 255, 255)';
    this.fgStyle_ = 'rgb(0, 0, 0)';
  };
  var pro = w69b.qr.CanvasDrawable.prototype;

  pro.fillBackground = function(width, height) {
    this.canvas_.width = width;
    this.canvas_.height = height;
    this.context_.fillStyle = this.bgStyle_;
    this.context_.fillRect(0, 0, width, height);
  };

  pro.fillBlack = function(x, y, width, height) {
    this.context_.fillStyle = this.fgStyle_;
    // this.context_.strokeStyle = this.fgStyle_;
    this.context_.fillRect(x, y, width, height);
  };

});

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.EpsDrawable');
goog.require('goog.asserts');
goog.require('w69b.qr.Drawable');

goog.scope(function() {
  /**
   * @constructor
   * @implements {w69b.qr.Drawable}
   */
  w69b.qr.EpsDrawable = function() {
    this.buffer_ = [];
    this.bgColor_ = '1 1 1';
    this.fgColor_ = '0 0 0';
    this.prevColor_ = null;
    this.height_ = 0;
    this.width_ = 0;
  };
  var pro = w69b.qr.EpsDrawable.prototype;

  /**
   * Writes header to buffer.
   * @param {number} width width of svg.
   * @param {number} height height of svg.
   */
  pro.writeHeader = function(width, height) {
    this.buffer_.push('%!PS-Adobe-3.0 EPSF-3.0');
    this.buffer_.push('%%BoundingBox: 0 0 ' + width + ' ' + height);
    this.width_ = width;
    this.height_ = height;
  };

  /**
   * Draws rectangle to buffer.
   * @private
   */
  pro.writeRect_ = function(x, y, width, height, color) {
    if (this.prevColor_ != color) {
      this.buffer_.push(color + ' setrgbcolor');
      this.prevColor_ = color;
    }
    // Project to eps coordinate system. (0, 0) is the bottom left corner.
    y = this.height_ - y;
    this.buffer_.push(x + ' ' + y + ' moveto');
    this.buffer_.push('0 ' + (-height) + ' rlineto ' + width +
      ' 0 rlineto 0 ' + height + ' rlineto closepath');
    this.buffer_.push('fill');
  };

  pro.fillBackground = function(width, height) {
    goog.asserts.assert(this.buffer_.length == 0);
    this.writeHeader(width, height);
    this.writeRect_(0, 0, width, height, this.bgColor_);
  };

  pro.fillBlack = function(x, y, width, height) {
    goog.asserts.assert(this.buffer_.length > 0);
    this.writeRect_(x, y, width, height, this.fgColor_);
  };

  /**
   * Get svg source.
   * @return {string} svg as string.
   */
  pro.toString = function() {
    goog.asserts.assert(this.buffer_.length > 0);
    return this.buffer_.join('\n');
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.SvgDrawable');
goog.require('goog.asserts');
goog.require('w69b.qr.Drawable');

goog.scope(function() {
  /**
   * @constructor
   * @implements {w69b.qr.Drawable}
   */
  w69b.qr.SvgDrawable = function() {
    this.buffer_ = [];
    this.bgStyle_ = 'white';
    this.fgStyle_ = 'black';
  };
  var pro = w69b.qr.SvgDrawable.prototype;

  /**
   * Writes header to buffer.
   * @param {number} width width of svg.
   * @param {number} height height of svg.
   */
  pro.writeHeader = function(width, height) {
    this.buffer_.push('<?xml version="1.0" encoding="UTF-8"?>');
    this.buffer_.push('<svg version="1.1" baseProfile="tiny" ' +
      'xmlns="http://www.w3.org/2000/svg" ' +
      'width="' + width + '" height="' + height + '"' + '>');
  };

  /**
   * Draws rectangle to buffer.
   * @private
   */
  pro.writeRect_ = function(x, y, width, height, color) {
    this.buffer_.push(
      '<rect shape-rendering="optimizeSpeed" ' +
        ' x="' + x + '" y="' + y + '" width="' +
        width + '" height="' + height + '" fill="' + color + '" />');
  };

  pro.fillBackground = function(width, height) {
    goog.asserts.assert(this.buffer_.length == 0);
    this.writeHeader(width, height);
    this.writeRect_(0, 0, width, height, this.bgStyle_);
  };

  pro.fillBlack = function(x, y, width, height) {
    goog.asserts.assert(this.buffer_.length > 0);
    this.writeRect_(x, y, width, height, this.fgStyle_);
  };

  /**
   * Get svg source.
   * @return {string} svg as string.
   */
  pro.toString = function() {
    goog.asserts.assert(this.buffer_.length > 0);
    return this.buffer_.join('\n') + '</svg>';
  };

});

// javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
/*
 * Copyright 2008 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

goog.provide('w69b.qr.renderer');
goog.require('w69b.qr.Drawable');
goog.require('w69b.qr.encoder.QRCode');

/**
 * Renders a QR Code on a drawable.
 *
 * @author dswitkin@google.com (Daniel Switkin)
 * @author mb@w69b.com (Manuel Braun)
 */
goog.scope(function() {
  var _ = w69b.qr.renderer;
  _.QUIET_ZONE_SIZE = 4;

  /**
   * Renders QRCode on drawable. The QRCode is upscaled to the maximum
   * whole-number multiple of the input qrcode with that fits in the desired
   * size, including the quiet zones. What remains is filled with white
   * padding (ie the qr code is centered on  the desired image with).
   * @param {w69b.qr.encoder.QRCode} qrCode qr code to render.
   * @param {w69b.qr.Drawable} drawable to draw on.
   * @param {number} width desired with of output image.
   * @param {number} height desired height of output image.
   * @param {number} quietZone number of blocks (pixsels in input) to use
   * for quiet zones.
   */
  _.render = function(qrCode, drawable, width, height, quietZone) {
    var input = qrCode.getMatrix();
    var inputWidth = input.getWidth();
    var inputHeight = input.getHeight();
    var qrWidth = inputWidth + (quietZone << 1);
    var qrHeight = inputHeight + (quietZone << 1);
    var outputWidth = Math.max(width, qrWidth);
    var outputHeight = Math.max(height, qrHeight);

    var multiple = Math.floor(Math.min(outputWidth / qrWidth,
      outputHeight / qrHeight));
    // Padding includes both the quiet zone and the extra white pixels to
    // accommodate the requested dimensions. For example, if input is 25x25
    // the QR will be 33x33 including the quiet zone.
    // If the requested size is 200x160, the multiple will be 4, for a QR of
    // 132x132. These will handle all the padding from 100x100 (the actual QR)
    // up to 200x160.
    var leftPadding = (outputWidth - (inputWidth * multiple)) >> 1;
    var topPadding = (outputHeight - (inputHeight * multiple)) >> 1;

    drawable.fillBackground(outputWidth, outputHeight);

    for (var inputY = 0, outputY = topPadding; inputY < inputHeight;
         inputY++, outputY += multiple) {
      // Write the contents of this row of the barcode
      for (var inputX = 0, outputX = leftPadding; inputX < inputWidth;
           inputX++, outputX += multiple) {
        if (input.get(inputX, inputY) == 1) {
          drawable.fillBlack(outputX, outputY, multiple, multiple);
        }
      }
    }
  };

});

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.encoding');
goog.require('w69b.qr.CanvasDrawable');
goog.require('w69b.qr.EncodeHintType');
goog.require('w69b.qr.EpsDrawable');
goog.require('w69b.qr.ErrorCorrectionLevel');
goog.require('w69b.qr.SvgDrawable');
goog.require('w69b.qr.encoder.Encoder');
goog.require('w69b.qr.renderer');

/**
 * Simple high-level interface to create qr codes.
 */
goog.scope(function() {
  var Encoder = w69b.qr.encoder.Encoder;
  var ErrorCorrectionLevel = w69b.qr.ErrorCorrectionLevel;
  var renderer = w69b.qr.renderer;
  var EncodeHintType = w69b.qr.EncodeHintType;
  var SvgDrawable = w69b.qr.SvgDrawable;
  var EpsDrawable = w69b.qr.EpsDrawable;

  var _ = w69b.qr.encoding;

  /**
   * @type {Object} cache of (currently only the last) encode call and its
   * result.
   * @private
   */
  _.cache_ = {
    content: null,
    ecLevel: null,
    result: null
  };

  /**
   *
   * @param {string} content to encode.
   * @param {string=} opt_ecName optional error correciton name.
   * Defaults to L .
   * @private
   */
  _.encode_ = function(content, opt_ecName) {
    var ecLevel = null;
    if (opt_ecName)
      ecLevel = ErrorCorrectionLevel.getByName(opt_ecName);
    ecLevel = ecLevel || ErrorCorrectionLevel.L;

    // Check if result is cached.
    if (_.cache_.content == content &&
      _.cache_.ecLevel == ecLevel)
      return _.cache_.result;

    var qrcode = Encoder.encode(content, ecLevel);
    // Cache result. Currently just the last call is cached.
    _.cache_.content = content;
    _.cache_.ecLevel = ecLevel;
    _.cache_.result = qrcode;

    return qrcode;
  };

  /**
   * @param {string} content to encode.
   * @param {HTMLCanvasElement} canvas canvas to draw on.
   * @param {number=} opt_margin size of quit zone.
   * @param {string=} opt_ecName optional error correciton name.
   * Defaults to L .
   */
  _.drawOnCanvas = function(content, canvas, opt_margin, opt_ecName) {
    var qrCode = _.encode_(content, opt_ecName);
    var quiet = goog.isDef(opt_margin) ? opt_margin : renderer.QUIET_ZONE_SIZE;
    var drawable = new w69b.qr.CanvasDrawable(canvas);
    renderer.render(qrCode, drawable, canvas.width, canvas.height,
      quiet);
  };

  /**
   * Get minimal size (wihtout margin) of content encoded as qr code.
   * This encodes the content as qr code and reads of its size.
   * So it is quite slow. However the encoded qr code is cached. So a
   * subsequent draw call with equal parameters is cheap.
   * @param {string} content to encode.
   * @param {string=} opt_ecName optional error correciton name.
   * Defaults to L .
   * @return {number} size of qr code.
   */
  _.getSize = function(content, opt_ecName) {
    var qrcode = _.encode_(content, opt_ecName);
    return qrcode.getMatrix().getWidth();
  };


  /**
   * @param {string} content to encode.
   * @param {number} size to use as svg width/height.
   * @param {number=} opt_margin size of quit zone.
   * @param {string=} opt_ecName optional error correciton name.
   * Defaults to L .
   * @return {string} svg source.
   */
  _.drawAsSVG = function(content, size, opt_margin, opt_ecName) {
    var qrCode = _.encode_(content, opt_ecName);
    var quiet = goog.isDef(opt_margin) ? opt_margin : renderer.QUIET_ZONE_SIZE;
    var drawable = new SvgDrawable();
    renderer.render(qrCode, drawable, size, size, quiet);
    return drawable.toString();
  };

  /**
   * @param {string} content to encode.
   * @param {number} size to use as eps width/height.
   * @param {number=} opt_margin size of quit zone.
   * @param {string=} opt_ecName optional error correciton name.
   * Defaults to L .
   * @return {string} eps source.
   */
  _.drawAsEPS = function(content, size, opt_margin, opt_ecName) {
    var qrCode = _.encode_(content, opt_ecName);
    var quiet = goog.isDef(opt_margin) ? opt_margin : renderer.QUIET_ZONE_SIZE;
    var drawable = new EpsDrawable();
    renderer.render(qrCode, drawable, size, size, quiet);
    return drawable.toString();
  };

  goog.exportSymbol('w69b.qr.encoding.drawOnCanvas', _.drawOnCanvas);
  goog.exportSymbol('w69b.qr.encoding.drawAsSVG', _.drawAsSVG);
  goog.exportSymbol('w69b.qr.encoding.drawAsEPS', _.drawAsEPS);
  goog.exportSymbol('w69b.qr.encoding.getSize', _.getSize);
});

// We reproduce un-annotate license notes of included files here, to
// add them to the closure output once.
/**
 * @license
 * This file is part of barcode.js.
 *
 * barcode.js is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  barcode.js is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with barcode.js.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Licenses of included third software:
 * ---------------------------------------------------------------------------
 * License for zxing files (https://github.com/zxing/zxing):
 *
 * Copyright 2007 ZXing authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Ported to JavaScript by Lazar Laszlo 2011
 * lazarsoft@gmail.com, www.lazarsoft.info
 *
 * javascript (closure) port (c) 2013 Manuel Braun (mb@w69b.com)
 *
 * XZing NOTICES:
 * --------------------------------------------------------------------------------
 * NOTICES FOR BARCODE4J
 * --------------------------------------------------------------------------------
 *
 * Barcode4J
 * Copyright 2002-2010 Jeremias Märki
 * Copyright 2005-2006 Dietmar Bürkle
 *
 * Portions of this software were contributed under section 5 of the
 * Apache License. Contributors are listed under:
 * http://barcode4j.sourceforge.net/contributors.html
 *
 * --------------------------------------------------------------------------------
 * NOTICES FOR JCOMMANDER
 * --------------------------------------------------------------------------------
 *
 * Copyright 2010 Cedric Beust cedric@beust.com
 *
 * */

goog.provide('w69b.qr.licenses');

// Copyright 2012 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Vendor prefix getters.
 */

goog.provide('goog.dom.vendor');

goog.require('goog.string');
goog.require('goog.userAgent');


/**
 * Returns the JS vendor prefix used in CSS properties. Different vendors
 * use different methods of changing the case of the property names.
 *
 * @return {?string} The JS vendor prefix or null if there is none.
 */
goog.dom.vendor.getVendorJsPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return 'Webkit';
  } else if (goog.userAgent.GECKO) {
    return 'Moz';
  } else if (goog.userAgent.IE) {
    return 'ms';
  } else if (goog.userAgent.OPERA) {
    return 'O';
  }

  return null;
};


/**
 * Returns the vendor prefix used in CSS properties.
 *
 * @return {?string} The vendor prefix or null if there is none.
 */
goog.dom.vendor.getVendorPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return '-webkit';
  } else if (goog.userAgent.GECKO) {
    return '-moz';
  } else if (goog.userAgent.IE) {
    return '-ms';
  } else if (goog.userAgent.OPERA) {
    return '-o';
  }

  return null;
};


/**
 * @param {string} propertyName A property name.
 * @param {!Object=} opt_object If provided, we verify if the property exists in
 *     the object.
 * @return {?string} A vendor prefixed property name, or null if it does not
 *     exist.
 */
goog.dom.vendor.getPrefixedPropertyName = function(propertyName, opt_object) {
  // We first check for a non-prefixed property, if available.
  if (opt_object && propertyName in opt_object) {
    return propertyName;
  }
  var prefix = goog.dom.vendor.getVendorJsPrefix();
  if (prefix) {
    prefix = prefix.toLowerCase();
    var prefixedPropertyName = prefix + goog.string.toTitleCase(propertyName);
    return (!goog.isDef(opt_object) || prefixedPropertyName in opt_object) ?
        prefixedPropertyName : null;
  }
  return null;
};


/**
 * @param {string} eventType An event type.
 * @return {string} A lower-cased vendor prefixed event type.
 */
goog.dom.vendor.getPrefixedEventType = function(eventType) {
  var prefix = goog.dom.vendor.getVendorJsPrefix() || '';
  return (prefix + eventType).toLowerCase();
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A utility class for representing a numeric box.
 */


goog.provide('goog.math.Box');

goog.require('goog.math.Coordinate');



/**
 * Class for representing a box. A box is specified as a top, right, bottom,
 * and left. A box is useful for representing margins and padding.
 *
 * This class assumes 'screen coordinates': larger Y coordinates are further
 * from the top of the screen.
 *
 * @param {number} top Top.
 * @param {number} right Right.
 * @param {number} bottom Bottom.
 * @param {number} left Left.
 * @struct
 * @constructor
 */
goog.math.Box = function(top, right, bottom, left) {
  /**
   * Top
   * @type {number}
   */
  this.top = top;

  /**
   * Right
   * @type {number}
   */
  this.right = right;

  /**
   * Bottom
   * @type {number}
   */
  this.bottom = bottom;

  /**
   * Left
   * @type {number}
   */
  this.left = left;
};


/**
 * Creates a Box by bounding a collection of goog.math.Coordinate objects
 * @param {...goog.math.Coordinate} var_args Coordinates to be included inside
 *     the box.
 * @return {!goog.math.Box} A Box containing all the specified Coordinates.
 */
goog.math.Box.boundingBox = function(var_args) {
  var box = new goog.math.Box(arguments[0].y, arguments[0].x,
                              arguments[0].y, arguments[0].x);
  for (var i = 1; i < arguments.length; i++) {
    box.expandToIncludeCoordinate(arguments[i]);
  }
  return box;
};


/**
 * @return {number} width The width of this Box.
 */
goog.math.Box.prototype.getWidth = function() {
  return this.right - this.left;
};


/**
 * @return {number} height The height of this Box.
 */
goog.math.Box.prototype.getHeight = function() {
  return this.bottom - this.top;
};


/**
 * Creates a copy of the box with the same dimensions.
 * @return {!goog.math.Box} A clone of this Box.
 */
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};


if (goog.DEBUG) {
  /**
   * Returns a nice string representing the box.
   * @return {string} In the form (50t, 73r, 24b, 13l).
   * @override
   */
  goog.math.Box.prototype.toString = function() {
    return '(' + this.top + 't, ' + this.right + 'r, ' + this.bottom + 'b, ' +
           this.left + 'l)';
  };
}


/**
 * Returns whether the box contains a coordinate or another box.
 *
 * @param {goog.math.Coordinate|goog.math.Box} other A Coordinate or a Box.
 * @return {boolean} Whether the box contains the coordinate or other box.
 */
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other);
};


/**
 * Expands box with the given margins.
 *
 * @param {number|goog.math.Box} top Top margin or box with all margins.
 * @param {number=} opt_right Right margin.
 * @param {number=} opt_bottom Bottom margin.
 * @param {number=} opt_left Left margin.
 * @return {!goog.math.Box} A reference to this Box.
 */
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom,
    opt_left) {
  if (goog.isObject(top)) {
    this.top -= top.top;
    this.right += top.right;
    this.bottom += top.bottom;
    this.left -= top.left;
  } else {
    this.top -= top;
    this.right += opt_right;
    this.bottom += opt_bottom;
    this.left -= opt_left;
  }

  return this;
};


/**
 * Expand this box to include another box.
 * NOTE(user): This is used in code that needs to be very fast, please don't
 * add functionality to this function at the expense of speed (variable
 * arguments, accepting multiple argument types, etc).
 * @param {goog.math.Box} box The box to include in this one.
 */
goog.math.Box.prototype.expandToInclude = function(box) {
  this.left = Math.min(this.left, box.left);
  this.top = Math.min(this.top, box.top);
  this.right = Math.max(this.right, box.right);
  this.bottom = Math.max(this.bottom, box.bottom);
};


/**
 * Expand this box to include the coordinate.
 * @param {!goog.math.Coordinate} coord The coordinate to be included
 *     inside the box.
 */
goog.math.Box.prototype.expandToIncludeCoordinate = function(coord) {
  this.top = Math.min(this.top, coord.y);
  this.right = Math.max(this.right, coord.x);
  this.bottom = Math.max(this.bottom, coord.y);
  this.left = Math.min(this.left, coord.x);
};


/**
 * Compares boxes for equality.
 * @param {goog.math.Box} a A Box.
 * @param {goog.math.Box} b A Box.
 * @return {boolean} True iff the boxes are equal, or if both are null.
 */
goog.math.Box.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.top == b.top && a.right == b.right &&
         a.bottom == b.bottom && a.left == b.left;
};


/**
 * Returns whether a box contains a coordinate or another box.
 *
 * @param {goog.math.Box} box A Box.
 * @param {goog.math.Coordinate|goog.math.Box} other A Coordinate or a Box.
 * @return {boolean} Whether the box contains the coordinate or other box.
 */
goog.math.Box.contains = function(box, other) {
  if (!box || !other) {
    return false;
  }

  if (other instanceof goog.math.Box) {
    return other.left >= box.left && other.right <= box.right &&
        other.top >= box.top && other.bottom <= box.bottom;
  }

  // other is a Coordinate.
  return other.x >= box.left && other.x <= box.right &&
         other.y >= box.top && other.y <= box.bottom;
};


/**
 * Returns the relative x position of a coordinate compared to a box.  Returns
 * zero if the coordinate is inside the box.
 *
 * @param {goog.math.Box} box A Box.
 * @param {goog.math.Coordinate} coord A Coordinate.
 * @return {number} The x position of {@code coord} relative to the nearest
 *     side of {@code box}, or zero if {@code coord} is inside {@code box}.
 */
goog.math.Box.relativePositionX = function(box, coord) {
  if (coord.x < box.left) {
    return coord.x - box.left;
  } else if (coord.x > box.right) {
    return coord.x - box.right;
  }
  return 0;
};


/**
 * Returns the relative y position of a coordinate compared to a box.  Returns
 * zero if the coordinate is inside the box.
 *
 * @param {goog.math.Box} box A Box.
 * @param {goog.math.Coordinate} coord A Coordinate.
 * @return {number} The y position of {@code coord} relative to the nearest
 *     side of {@code box}, or zero if {@code coord} is inside {@code box}.
 */
goog.math.Box.relativePositionY = function(box, coord) {
  if (coord.y < box.top) {
    return coord.y - box.top;
  } else if (coord.y > box.bottom) {
    return coord.y - box.bottom;
  }
  return 0;
};


/**
 * Returns the distance between a coordinate and the nearest corner/side of a
 * box. Returns zero if the coordinate is inside the box.
 *
 * @param {goog.math.Box} box A Box.
 * @param {goog.math.Coordinate} coord A Coordinate.
 * @return {number} The distance between {@code coord} and the nearest
 *     corner/side of {@code box}, or zero if {@code coord} is inside
 *     {@code box}.
 */
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord);
  var y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y);
};


/**
 * Returns whether two boxes intersect.
 *
 * @param {goog.math.Box} a A Box.
 * @param {goog.math.Box} b A second Box.
 * @return {boolean} Whether the boxes intersect.
 */
goog.math.Box.intersects = function(a, b) {
  return (a.left <= b.right && b.left <= a.right &&
          a.top <= b.bottom && b.top <= a.bottom);
};


/**
 * Returns whether two boxes would intersect with additional padding.
 *
 * @param {goog.math.Box} a A Box.
 * @param {goog.math.Box} b A second Box.
 * @param {number} padding The additional padding.
 * @return {boolean} Whether the boxes intersect.
 */
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return (a.left <= b.right + padding && b.left <= a.right + padding &&
          a.top <= b.bottom + padding && b.top <= a.bottom + padding);
};


/**
 * Rounds the fields to the next larger integer values.
 *
 * @return {!goog.math.Box} This box with ceil'd fields.
 */
goog.math.Box.prototype.ceil = function() {
  this.top = Math.ceil(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  this.left = Math.ceil(this.left);
  return this;
};


/**
 * Rounds the fields to the next smaller integer values.
 *
 * @return {!goog.math.Box} This box with floored fields.
 */
goog.math.Box.prototype.floor = function() {
  this.top = Math.floor(this.top);
  this.right = Math.floor(this.right);
  this.bottom = Math.floor(this.bottom);
  this.left = Math.floor(this.left);
  return this;
};


/**
 * Rounds the fields to nearest integer values.
 *
 * @return {!goog.math.Box} This box with rounded fields.
 */
goog.math.Box.prototype.round = function() {
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  this.left = Math.round(this.left);
  return this;
};


/**
 * Translates this box by the given offsets. If a {@code goog.math.Coordinate}
 * is given, then the left and right values are translated by the coordinate's
 * x value and the top and bottom values are translated by the coordinate's y
 * value.  Otherwise, {@code tx} and {@code opt_ty} are used to translate the x
 * and y dimension values.
 *
 * @param {number|goog.math.Coordinate} tx The value to translate the x
 *     dimension values by or the the coordinate to translate this box by.
 * @param {number=} opt_ty The value to translate y dimension values by.
 * @return {!goog.math.Box} This box after translating.
 */
goog.math.Box.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.right += tx.x;
    this.top += tx.y;
    this.bottom += tx.y;
  } else {
    this.left += tx;
    this.right += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
      this.bottom += opt_ty;
    }
  }
  return this;
};


/**
 * Scales this coordinate by the given scale factors. The x and y dimension
 * values are scaled by {@code sx} and {@code opt_sy} respectively.
 * If {@code opt_sy} is not given, then {@code sx} is used for both x and y.
 *
 * @param {number} sx The scale factor to use for the x dimension.
 * @param {number=} opt_sy The scale factor to use for the y dimension.
 * @return {!goog.math.Box} This box after scaling.
 */
goog.math.Box.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.right *= sx;
  this.top *= sy;
  this.bottom *= sy;
  return this;
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A utility class for representing rectangles.
 */

goog.provide('goog.math.Rect');

goog.require('goog.math.Box');
goog.require('goog.math.Coordinate');
goog.require('goog.math.Size');



/**
 * Class for representing rectangular regions.
 * @param {number} x Left.
 * @param {number} y Top.
 * @param {number} w Width.
 * @param {number} h Height.
 * @struct
 * @constructor
 */
goog.math.Rect = function(x, y, w, h) {
  /** @type {number} */
  this.left = x;

  /** @type {number} */
  this.top = y;

  /** @type {number} */
  this.width = w;

  /** @type {number} */
  this.height = h;
};


/**
 * @return {!goog.math.Rect} A new copy of this Rectangle.
 */
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height);
};


/**
 * Returns a new Box object with the same position and dimensions as this
 * rectangle.
 * @return {!goog.math.Box} A new Box representation of this Rectangle.
 */
goog.math.Rect.prototype.toBox = function() {
  var right = this.left + this.width;
  var bottom = this.top + this.height;
  return new goog.math.Box(this.top,
                           right,
                           bottom,
                           this.left);
};


/**
 * Creates a new Rect object with the position and size given.
 * @param {!goog.math.Coordinate} position The top-left coordinate of the Rect
 * @param {!goog.math.Size} size The size of the Rect
 * @return {!goog.math.Rect} A new Rect initialized with the given position and
 *     size.
 */
goog.math.Rect.createFromPositionAndSize = function(position, size) {
  return new goog.math.Rect(position.x, position.y, size.width, size.height);
};


/**
 * Creates a new Rect object with the same position and dimensions as a given
 * Box.  Note that this is only the inverse of toBox if left/top are defined.
 * @param {goog.math.Box} box A box.
 * @return {!goog.math.Rect} A new Rect initialized with the box's position
 *     and size.
 */
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top,
      box.right - box.left, box.bottom - box.top);
};


if (goog.DEBUG) {
  /**
   * Returns a nice string representing size and dimensions of rectangle.
   * @return {string} In the form (50, 73 - 75w x 25h).
   * @override
   */
  goog.math.Rect.prototype.toString = function() {
    return '(' + this.left + ', ' + this.top + ' - ' + this.width + 'w x ' +
           this.height + 'h)';
  };
}


/**
 * Compares rectangles for equality.
 * @param {goog.math.Rect} a A Rectangle.
 * @param {goog.math.Rect} b A Rectangle.
 * @return {boolean} True iff the rectangles have the same left, top, width,
 *     and height, or if both are null.
 */
goog.math.Rect.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.left == b.left && a.width == b.width &&
         a.top == b.top && a.height == b.height;
};


/**
 * Computes the intersection of this rectangle and the rectangle parameter.  If
 * there is no intersection, returns false and leaves this rectangle as is.
 * @param {goog.math.Rect} rect A Rectangle.
 * @return {boolean} True iff this rectangle intersects with the parameter.
 */
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left);
  var x1 = Math.min(this.left + this.width, rect.left + rect.width);

  if (x0 <= x1) {
    var y0 = Math.max(this.top, rect.top);
    var y1 = Math.min(this.top + this.height, rect.top + rect.height);

    if (y0 <= y1) {
      this.left = x0;
      this.top = y0;
      this.width = x1 - x0;
      this.height = y1 - y0;

      return true;
    }
  }
  return false;
};


/**
 * Returns the intersection of two rectangles. Two rectangles intersect if they
 * touch at all, for example, two zero width and height rectangles would
 * intersect if they had the same top and left.
 * @param {goog.math.Rect} a A Rectangle.
 * @param {goog.math.Rect} b A Rectangle.
 * @return {goog.math.Rect} A new intersection rect (even if width and height
 *     are 0), or null if there is no intersection.
 */
goog.math.Rect.intersection = function(a, b) {
  // There is no nice way to do intersection via a clone, because any such
  // clone might be unnecessary if this function returns null.  So, we duplicate
  // code from above.

  var x0 = Math.max(a.left, b.left);
  var x1 = Math.min(a.left + a.width, b.left + b.width);

  if (x0 <= x1) {
    var y0 = Math.max(a.top, b.top);
    var y1 = Math.min(a.top + a.height, b.top + b.height);

    if (y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
    }
  }
  return null;
};


/**
 * Returns whether two rectangles intersect. Two rectangles intersect if they
 * touch at all, for example, two zero width and height rectangles would
 * intersect if they had the same top and left.
 * @param {goog.math.Rect} a A Rectangle.
 * @param {goog.math.Rect} b A Rectangle.
 * @return {boolean} Whether a and b intersect.
 */
goog.math.Rect.intersects = function(a, b) {
  return (a.left <= b.left + b.width && b.left <= a.left + a.width &&
      a.top <= b.top + b.height && b.top <= a.top + a.height);
};


/**
 * Returns whether a rectangle intersects this rectangle.
 * @param {goog.math.Rect} rect A rectangle.
 * @return {boolean} Whether rect intersects this rectangle.
 */
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect);
};


/**
 * Computes the difference regions between two rectangles. The return value is
 * an array of 0 to 4 rectangles defining the remaining regions of the first
 * rectangle after the second has been subtracted.
 * @param {goog.math.Rect} a A Rectangle.
 * @param {goog.math.Rect} b A Rectangle.
 * @return {!Array<!goog.math.Rect>} An array with 0 to 4 rectangles which
 *     together define the difference area of rectangle a minus rectangle b.
 */
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if (!intersection || !intersection.height || !intersection.width) {
    return [a.clone()];
  }

  var result = [];

  var top = a.top;
  var height = a.height;

  var ar = a.left + a.width;
  var ab = a.top + a.height;

  var br = b.left + b.width;
  var bb = b.top + b.height;

  // Subtract off any area on top where A extends past B
  if (b.top > a.top) {
    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
    top = b.top;
    // If we're moving the top down, we also need to subtract the height diff.
    height -= b.top - a.top;
  }
  // Subtract off any area on bottom where A extends past B
  if (bb < ab) {
    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
    height = bb - top;
  }
  // Subtract any area on left where A extends past B
  if (b.left > a.left) {
    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  }
  // Subtract any area on right where A extends past B
  if (br < ar) {
    result.push(new goog.math.Rect(br, top, ar - br, height));
  }

  return result;
};


/**
 * Computes the difference regions between this rectangle and {@code rect}. The
 * return value is an array of 0 to 4 rectangles defining the remaining regions
 * of this rectangle after the other has been subtracted.
 * @param {goog.math.Rect} rect A Rectangle.
 * @return {!Array<!goog.math.Rect>} An array with 0 to 4 rectangles which
 *     together define the difference area of rectangle a minus rectangle b.
 */
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect);
};


/**
 * Expand this rectangle to also include the area of the given rectangle.
 * @param {goog.math.Rect} rect The other rectangle.
 */
goog.math.Rect.prototype.boundingRect = function(rect) {
  // We compute right and bottom before we change left and top below.
  var right = Math.max(this.left + this.width, rect.left + rect.width);
  var bottom = Math.max(this.top + this.height, rect.top + rect.height);

  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);

  this.width = right - this.left;
  this.height = bottom - this.top;
};


/**
 * Returns a new rectangle which completely contains both input rectangles.
 * @param {goog.math.Rect} a A rectangle.
 * @param {goog.math.Rect} b A rectangle.
 * @return {goog.math.Rect} A new bounding rect, or null if either rect is
 *     null.
 */
goog.math.Rect.boundingRect = function(a, b) {
  if (!a || !b) {
    return null;
  }

  var clone = a.clone();
  clone.boundingRect(b);

  return clone;
};


/**
 * Tests whether this rectangle entirely contains another rectangle or
 * coordinate.
 *
 * @param {goog.math.Rect|goog.math.Coordinate} another The rectangle or
 *     coordinate to test for containment.
 * @return {boolean} Whether this rectangle contains given rectangle or
 *     coordinate.
 */
goog.math.Rect.prototype.contains = function(another) {
  if (another instanceof goog.math.Rect) {
    return this.left <= another.left &&
           this.left + this.width >= another.left + another.width &&
           this.top <= another.top &&
           this.top + this.height >= another.top + another.height;
  } else { // (another instanceof goog.math.Coordinate)
    return another.x >= this.left &&
           another.x <= this.left + this.width &&
           another.y >= this.top &&
           another.y <= this.top + this.height;
  }
};


/**
 * @param {!goog.math.Coordinate} point A coordinate.
 * @return {number} The squared distance between the point and the closest
 *     point inside the rectangle. Returns 0 if the point is inside the
 *     rectangle.
 */
goog.math.Rect.prototype.squaredDistance = function(point) {
  var dx = point.x < this.left ?
      this.left - point.x : Math.max(point.x - (this.left + this.width), 0);
  var dy = point.y < this.top ?
      this.top - point.y : Math.max(point.y - (this.top + this.height), 0);
  return dx * dx + dy * dy;
};


/**
 * @param {!goog.math.Coordinate} point A coordinate.
 * @return {number} The distance between the point and the closest point
 *     inside the rectangle. Returns 0 if the point is inside the rectangle.
 */
goog.math.Rect.prototype.distance = function(point) {
  return Math.sqrt(this.squaredDistance(point));
};


/**
 * @return {!goog.math.Size} The size of this rectangle.
 */
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height);
};


/**
 * @return {!goog.math.Coordinate} A new coordinate for the top-left corner of
 *     the rectangle.
 */
goog.math.Rect.prototype.getTopLeft = function() {
  return new goog.math.Coordinate(this.left, this.top);
};


/**
 * @return {!goog.math.Coordinate} A new coordinate for the center of the
 *     rectangle.
 */
goog.math.Rect.prototype.getCenter = function() {
  return new goog.math.Coordinate(
      this.left + this.width / 2, this.top + this.height / 2);
};


/**
 * @return {!goog.math.Coordinate} A new coordinate for the bottom-right corner
 *     of the rectangle.
 */
goog.math.Rect.prototype.getBottomRight = function() {
  return new goog.math.Coordinate(
      this.left + this.width, this.top + this.height);
};


/**
 * Rounds the fields to the next larger integer values.
 * @return {!goog.math.Rect} This rectangle with ceil'd fields.
 */
goog.math.Rect.prototype.ceil = function() {
  this.left = Math.ceil(this.left);
  this.top = Math.ceil(this.top);
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};


/**
 * Rounds the fields to the next smaller integer values.
 * @return {!goog.math.Rect} This rectangle with floored fields.
 */
goog.math.Rect.prototype.floor = function() {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};


/**
 * Rounds the fields to nearest integer values.
 * @return {!goog.math.Rect} This rectangle with rounded fields.
 */
goog.math.Rect.prototype.round = function() {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};


/**
 * Translates this rectangle by the given offsets. If a
 * {@code goog.math.Coordinate} is given, then the left and top values are
 * translated by the coordinate's x and y values. Otherwise, top and left are
 * translated by {@code tx} and {@code opt_ty} respectively.
 * @param {number|goog.math.Coordinate} tx The value to translate left by or the
 *     the coordinate to translate this rect by.
 * @param {number=} opt_ty The value to translate top by.
 * @return {!goog.math.Rect} This rectangle after translating.
 */
goog.math.Rect.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.top += tx.y;
  } else {
    this.left += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
    }
  }
  return this;
};


/**
 * Scales this rectangle by the given scale factors. The left and width values
 * are scaled by {@code sx} and the top and height values are scaled by
 * {@code opt_sy}.  If {@code opt_sy} is not given, then all fields are scaled
 * by {@code sx}.
 * @param {number} sx The scale factor to use for the x dimension.
 * @param {number=} opt_sy The scale factor to use for the y dimension.
 * @return {!goog.math.Rect} This rectangle after scaling.
 */
goog.math.Rect.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.width *= sx;
  this.top *= sy;
  this.height *= sy;
  return this;
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities for element styles.
 *
 * @author arv@google.com (Erik Arvidsson)
 * @author eae@google.com (Emil A Eklund)
 * @see ../demos/inline_block_quirks.html
 * @see ../demos/inline_block_standards.html
 * @see ../demos/style_viewport.html
 */

goog.provide('goog.style');


goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.dom.NodeType');
goog.require('goog.dom.TagName');
goog.require('goog.dom.vendor');
goog.require('goog.math.Box');
goog.require('goog.math.Coordinate');
goog.require('goog.math.Rect');
goog.require('goog.math.Size');
goog.require('goog.object');
goog.require('goog.string');
goog.require('goog.userAgent');

goog.forwardDeclare('goog.events.BrowserEvent');
goog.forwardDeclare('goog.events.Event');


/**
 * Sets a style value on an element.
 *
 * This function is not indended to patch issues in the browser's style
 * handling, but to allow easy programmatic access to setting dash-separated
 * style properties.  An example is setting a batch of properties from a data
 * object without overwriting old styles.  When possible, use native APIs:
 * elem.style.propertyKey = 'value' or (if obliterating old styles is fine)
 * elem.style.cssText = 'property1: value1; property2: value2'.
 *
 * @param {Element} element The element to change.
 * @param {string|Object} style If a string, a style name. If an object, a hash
 *     of style names to style values.
 * @param {string|number|boolean=} opt_value If style was a string, then this
 *     should be the value.
 */
goog.style.setStyle = function(element, style, opt_value) {
  if (goog.isString(style)) {
    goog.style.setStyle_(element, opt_value, style);
  } else {
    for (var key in style) {
      goog.style.setStyle_(element, style[key], key);
    }
  }
};


/**
 * Sets a style value on an element, with parameters swapped to work with
 * {@code goog.object.forEach()}. Prepends a vendor-specific prefix when
 * necessary.
 * @param {Element} element The element to change.
 * @param {string|number|boolean|undefined} value Style value.
 * @param {string} style Style name.
 * @private
 */
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);

  if (propertyName) {
    element.style[propertyName] = value;
  }
};


/**
 * Style name cache that stores previous property name lookups.
 *
 * This is used by setStyle to speed up property lookups, entries look like:
 *   { StyleName: ActualPropertyName }
 *
 * @private {!Object<string, string>}
 */
goog.style.styleNameCache_ = {};


/**
 * Returns the style property name in camel-case. If it does not exist and a
 * vendor-specific version of the property does exist, then return the vendor-
 * specific property name instead.
 * @param {Element} element The element to change.
 * @param {string} style Style name.
 * @return {string} Vendor-specific style.
 * @private
 */
goog.style.getVendorJsStyleName_ = function(element, style) {
  var propertyName = goog.style.styleNameCache_[style];
  if (!propertyName) {
    var camelStyle = goog.string.toCamelCase(style);
    propertyName = camelStyle;

    if (element.style[camelStyle] === undefined) {
      var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() +
          goog.string.toTitleCase(camelStyle);

      if (element.style[prefixedStyle] !== undefined) {
        propertyName = prefixedStyle;
      }
    }
    goog.style.styleNameCache_[style] = propertyName;
  }

  return propertyName;
};


/**
 * Returns the style property name in CSS notation. If it does not exist and a
 * vendor-specific version of the property does exist, then return the vendor-
 * specific property name instead.
 * @param {Element} element The element to change.
 * @param {string} style Style name.
 * @return {string} Vendor-specific style.
 * @private
 */
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);

  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() +
        goog.string.toTitleCase(camelStyle);

    if (element.style[prefixedStyle] !== undefined) {
      return goog.dom.vendor.getVendorPrefix() + '-' + style;
    }
  }

  return style;
};


/**
 * Retrieves an explicitly-set style value of a node. This returns '' if there
 * isn't a style attribute on the element or if this style property has not been
 * explicitly set in script.
 *
 * @param {Element} element Element to get style of.
 * @param {string} property Property to get, css-style (if you have a camel-case
 * property, use element.style[style]).
 * @return {string} Style value.
 */
goog.style.getStyle = function(element, property) {
  // element.style is '' for well-known properties which are unset.
  // For for browser specific styles as 'filter' is undefined
  // so we need to return '' explicitly to make it consistent across
  // browsers.
  var styleValue = element.style[goog.string.toCamelCase(property)];

  // Using typeof here because of a bug in Safari 5.1, where this value
  // was undefined, but === undefined returned false.
  if (typeof(styleValue) !== 'undefined') {
    return styleValue;
  }

  return element.style[goog.style.getVendorJsStyleName_(element, property)] ||
      '';
};


/**
 * Retrieves a computed style value of a node. It returns empty string if the
 * value cannot be computed (which will be the case in Internet Explorer) or
 * "none" if the property requested is an SVG one and it has not been
 * explicitly set (firefox and webkit).
 *
 * @param {Element} element Element to get style of.
 * @param {string} property Property to get (camel-case).
 * @return {string} Style value.
 */
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if (doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if (styles) {
      // element.style[..] is undefined for browser specific styles
      // as 'filter'.
      return styles[property] || styles.getPropertyValue(property) || '';
    }
  }

  return '';
};


/**
 * Gets the cascaded style value of a node, or null if the value cannot be
 * computed (only Internet Explorer can do this).
 *
 * @param {Element} element Element to get style of.
 * @param {string} style Property to get (camel-case).
 * @return {string} Style value.
 */
goog.style.getCascadedStyle = function(element, style) {
  // TODO(nicksantos): This should be documented to return null. #fixTypes
  return element.currentStyle ? element.currentStyle[style] : null;
};


/**
 * Cross-browser pseudo get computed style. It returns the computed style where
 * available. If not available it tries the cascaded style value (IE
 * currentStyle) and in worst case the inline style value.  It shouldn't be
 * called directly, see http://wiki/Main/ComputedStyleVsCascadedStyle for
 * discussion.
 *
 * @param {Element} element Element to get style of.
 * @param {string} style Property to get (must be camelCase, not css-style.).
 * @return {string} Style value.
 * @private
 */
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) ||
         goog.style.getCascadedStyle(element, style) ||
         (element.style && element.style[style]);
};


/**
 * Retrieves the computed value of the box-sizing CSS attribute.
 * Browser support: http://caniuse.com/css3-boxsizing.
 * @param {!Element} element The element whose box-sizing to get.
 * @return {?string} 'content-box', 'border-box' or 'padding-box'. null if
 *     box-sizing is not supported (IE7 and below).
 */
goog.style.getComputedBoxSizing = function(element) {
  return goog.style.getStyle_(element, 'boxSizing') ||
      goog.style.getStyle_(element, 'MozBoxSizing') ||
      goog.style.getStyle_(element, 'WebkitBoxSizing') || null;
};


/**
 * Retrieves the computed value of the position CSS attribute.
 * @param {Element} element The element to get the position of.
 * @return {string} Position value.
 */
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, 'position');
};


/**
 * Retrieves the computed background color string for a given element. The
 * string returned is suitable for assigning to another element's
 * background-color, but is not guaranteed to be in any particular string
 * format. Accessing the color in a numeric form may not be possible in all
 * browsers or with all input.
 *
 * If the background color for the element is defined as a hexadecimal value,
 * the resulting string can be parsed by goog.color.parse in all supported
 * browsers.
 *
 * Whether named colors like "red" or "lightblue" get translated into a
 * format which can be parsed is browser dependent. Calling this function on
 * transparent elements will return "transparent" in most browsers or
 * "rgba(0, 0, 0, 0)" in WebKit.
 * @param {Element} element The element to get the background color of.
 * @return {string} The computed string value of the background color.
 */
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, 'backgroundColor');
};


/**
 * Retrieves the computed value of the overflow-x CSS attribute.
 * @param {Element} element The element to get the overflow-x of.
 * @return {string} The computed string value of the overflow-x attribute.
 */
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, 'overflowX');
};


/**
 * Retrieves the computed value of the overflow-y CSS attribute.
 * @param {Element} element The element to get the overflow-y of.
 * @return {string} The computed string value of the overflow-y attribute.
 */
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, 'overflowY');
};


/**
 * Retrieves the computed value of the z-index CSS attribute.
 * @param {Element} element The element to get the z-index of.
 * @return {string|number} The computed value of the z-index attribute.
 */
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, 'zIndex');
};


/**
 * Retrieves the computed value of the text-align CSS attribute.
 * @param {Element} element The element to get the text-align of.
 * @return {string} The computed string value of the text-align attribute.
 */
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, 'textAlign');
};


/**
 * Retrieves the computed value of the cursor CSS attribute.
 * @param {Element} element The element to get the cursor of.
 * @return {string} The computed string value of the cursor attribute.
 */
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, 'cursor');
};


/**
 * Retrieves the computed value of the CSS transform attribute.
 * @param {Element} element The element to get the transform of.
 * @return {string} The computed string representation of the transform matrix.
 */
goog.style.getComputedTransform = function(element) {
  var property = goog.style.getVendorStyleName_(element, 'transform');
  return goog.style.getStyle_(element, property) ||
      goog.style.getStyle_(element, 'transform');
};


/**
 * Sets the top/left values of an element.  If no unit is specified in the
 * argument then it will add px. The second argument is required if the first
 * argument is a string or number and is ignored if the first argument
 * is a coordinate.
 * @param {Element} el Element to move.
 * @param {string|number|goog.math.Coordinate} arg1 Left position or coordinate.
 * @param {string|number=} opt_arg2 Top position.
 */
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y;

  if (arg1 instanceof goog.math.Coordinate) {
    x = arg1.x;
    y = arg1.y;
  } else {
    x = arg1;
    y = opt_arg2;
  }

  el.style.left = goog.style.getPixelStyleValue_(
      /** @type {number|string} */ (x), false);
  el.style.top = goog.style.getPixelStyleValue_(
      /** @type {number|string} */ (y), false);
};


/**
 * Gets the offsetLeft and offsetTop properties of an element and returns them
 * in a Coordinate object
 * @param {Element} element Element.
 * @return {!goog.math.Coordinate} The position.
 */
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate(
      /** @type {!HTMLElement} */ (element).offsetLeft,
      /** @type {!HTMLElement} */ (element).offsetTop);
};


/**
 * Returns the viewport element for a particular document
 * @param {Node=} opt_node DOM node (Document is OK) to get the viewport element
 *     of.
 * @return {Element} document.documentElement or document.body.
 */
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  if (opt_node) {
    doc = goog.dom.getOwnerDocument(opt_node);
  } else {
    doc = goog.dom.getDocument();
  }

  // In old IE versions the document.body represented the viewport
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) &&
      !goog.dom.getDomHelper(doc).isCss1CompatMode()) {
    return doc.body;
  }
  return doc.documentElement;
};


/**
 * Calculates the viewport coordinates relative to the page/document
 * containing the node. The viewport may be the browser viewport for
 * non-iframe document, or the iframe container for iframe'd document.
 * @param {!Document} doc The document to use as the reference point.
 * @return {!goog.math.Coordinate} The page offset of the viewport.
 */
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body;
  var documentElement = doc.documentElement;
  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
  var scrollTop = body.scrollTop || documentElement.scrollTop;
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};


/**
 * Gets the client rectangle of the DOM element.
 *
 * getBoundingClientRect is part of a new CSS object model draft (with a
 * long-time presence in IE), replacing the error-prone parent offset
 * computation and the now-deprecated Gecko getBoxObjectFor.
 *
 * This utility patches common browser bugs in getBoundingClientRect. It
 * will fail if getBoundingClientRect is unsupported.
 *
 * If the element is not in the DOM, the result is undefined, and an error may
 * be thrown depending on user agent.
 *
 * @param {!Element} el The element whose bounding rectangle is being queried.
 * @return {Object} A native bounding rectangle with numerical left, top,
 *     right, and bottom.  Reported by Firefox to be of object type ClientRect.
 * @private
 */
goog.style.getBoundingClientRect_ = function(el) {
  var rect;
  try {
    rect = el.getBoundingClientRect();
  } catch (e) {
    // In IE < 9, calling getBoundingClientRect on an orphan element raises an
    // "Unspecified Error". All other browsers return zeros.
    return {'left': 0, 'top': 0, 'right': 0, 'bottom': 0};
  }

  // Patch the result in IE only, so that this function can be inlined if
  // compiled for non-IE.
  if (goog.userAgent.IE && el.ownerDocument.body) {

    // In IE, most of the time, 2 extra pixels are added to the top and left
    // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
    // IE6 standards mode, this border can be overridden by setting the
    // document element's border to zero -- thus, we cannot rely on the
    // offset always being 2 pixels.

    // In quirks mode, the offset can be determined by querying the body's
    // clientLeft/clientTop, but in standards mode, it is found by querying
    // the document element's clientLeft/clientTop.  Since we already called
    // getBoundingClientRect we have already forced a reflow, so it is not
    // too expensive just to query them all.

    // See: http://msdn.microsoft.com/en-us/library/ms536433(VS.85).aspx
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
  }
  return rect;
};


/**
 * Returns the first parent that could affect the position of a given element.
 * @param {Element} element The element to get the offset parent for.
 * @return {Element} The first offset parent or null if one cannot be found.
 */
goog.style.getOffsetParent = function(element) {
  // element.offsetParent does the right thing in IE7 and below.  In other
  // browsers it only includes elements with position absolute, relative or
  // fixed, not elements with overflow set to auto or scroll.
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8)) {
    return element.offsetParent;
  }

  var doc = goog.dom.getOwnerDocument(element);
  var positionStyle = goog.style.getStyle_(element, 'position');
  var skipStatic = positionStyle == 'fixed' || positionStyle == 'absolute';
  for (var parent = element.parentNode; parent && parent != doc;
       parent = parent.parentNode) {
    // Skip shadowDOM roots.
    if (parent.nodeType == goog.dom.NodeType.DOCUMENT_FRAGMENT &&
        parent.host) {
      parent = parent.host;
    }
    positionStyle =
        goog.style.getStyle_(/** @type {!Element} */ (parent), 'position');
    skipStatic = skipStatic && positionStyle == 'static' &&
                 parent != doc.documentElement && parent != doc.body;
    if (!skipStatic && (parent.scrollWidth > parent.clientWidth ||
                        parent.scrollHeight > parent.clientHeight ||
                        positionStyle == 'fixed' ||
                        positionStyle == 'absolute' ||
                        positionStyle == 'relative')) {
      return /** @type {!Element} */ (parent);
    }
  }
  return null;
};


/**
 * Calculates and returns the visible rectangle for a given element. Returns a
 * box describing the visible portion of the nearest scrollable offset ancestor.
 * Coordinates are given relative to the document.
 *
 * @param {Element} element Element to get the visible rect for.
 * @return {goog.math.Box} Bounding elementBox describing the visible rect or
 *     null if scrollable ancestor isn't inside the visible viewport.
 */
goog.style.getVisibleRectForElement = function(element) {
  var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
  var dom = goog.dom.getDomHelper(element);
  var body = dom.getDocument().body;
  var documentElement = dom.getDocument().documentElement;
  var scrollEl = dom.getDocumentScrollElement();

  // Determine the size of the visible rect by climbing the dom accounting for
  // all scrollable containers.
  for (var el = element; el = goog.style.getOffsetParent(el); ) {
    // clientWidth is zero for inline block elements in IE.
    // on WEBKIT, body element can have clientHeight = 0 and scrollHeight > 0
    if ((!goog.userAgent.IE || el.clientWidth != 0) &&
        (!goog.userAgent.WEBKIT || el.clientHeight != 0 || el != body) &&
        // body may have overflow set on it, yet we still get the entire
        // viewport. In some browsers, el.offsetParent may be
        // document.documentElement, so check for that too.
        (el != body && el != documentElement &&
            goog.style.getStyle_(el, 'overflow') != 'visible')) {
      var pos = goog.style.getPageOffset(el);
      var client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;

      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right,
                                   pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom,
                                    pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x);
    }
  }

  // Clip by window's viewport.
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return visibleRect.top >= 0 && visibleRect.left >= 0 &&
         visibleRect.bottom > visibleRect.top &&
         visibleRect.right > visibleRect.left ?
         visibleRect : null;
};


/**
 * Calculate the scroll position of {@code container} with the minimum amount so
 * that the content and the borders of the given {@code element} become visible.
 * If the element is bigger than the container, its top left corner will be
 * aligned as close to the container's top left corner as possible.
 *
 * @param {Element} element The element to make visible.
 * @param {Element=} opt_container The container to scroll. If not set, then the
 *     document scroll element will be used.
 * @param {boolean=} opt_center Whether to center the element in the container.
 *     Defaults to false.
 * @return {!goog.math.Coordinate} The new scroll position of the container,
 *     in form of goog.math.Coordinate(scrollLeft, scrollTop).
 */
goog.style.getContainerOffsetToScrollInto =
    function(element, opt_container, opt_center) {
  var container = opt_container || goog.dom.getDocumentScrollElement();
  // Absolute position of the element's border's top left corner.
  var elementPos = goog.style.getPageOffset(element);
  // Absolute position of the container's border's top left corner.
  var containerPos = goog.style.getPageOffset(container);
  var containerBorder = goog.style.getBorderBox(container);
  if (container == goog.dom.getDocumentScrollElement()) {
    // The element position is calculated based on the page offset, and the
    // document scroll element holds the scroll position within the page. We can
    // use the scroll position to calculate the relative position from the
    // element.
    var relX = elementPos.x - container.scrollLeft;
    var relY = elementPos.y - container.scrollTop;
    if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(10)) {
      // In older versions of IE getPageOffset(element) does not include the
      // container border so it has to be added to accomodate.
      relX += containerBorder.left;
      relY += containerBorder.top;
    }
  } else {
    // Relative pos. of the element's border box to the container's content box.
    var relX = elementPos.x - containerPos.x - containerBorder.left;
    var relY = elementPos.y - containerPos.y - containerBorder.top;
  }
  // How much the element can move in the container, i.e. the difference between
  // the element's bottom-right-most and top-left-most position where it's
  // fully visible.
  var spaceX = container.clientWidth -
      /** @type {HTMLElement} */ (element).offsetWidth;
  var spaceY = container.clientHeight -
      /** @type {HTMLElement} */ (element).offsetHeight;

  var scrollLeft = container.scrollLeft;
  var scrollTop = container.scrollTop;
  if (opt_center) {
    // All browsers round non-integer scroll positions down.
    scrollLeft += relX - spaceX / 2;
    scrollTop += relY - spaceY / 2;
  } else {
    // This formula was designed to give the correct scroll values in the
    // following cases:
    // - element is higher than container (spaceY < 0) => scroll down by relY
    // - element is not higher that container (spaceY >= 0):
    //   - it is above container (relY < 0) => scroll up by abs(relY)
    //   - it is below container (relY > spaceY) => scroll down by relY - spaceY
    //   - it is in the container => don't scroll
    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
  }
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};


/**
 * Changes the scroll position of {@code container} with the minimum amount so
 * that the content and the borders of the given {@code element} become visible.
 * If the element is bigger than the container, its top left corner will be
 * aligned as close to the container's top left corner as possible.
 *
 * @param {Element} element The element to make visible.
 * @param {Element=} opt_container The container to scroll. If not set, then the
 *     document scroll element will be used.
 * @param {boolean=} opt_center Whether to center the element in the container.
 *     Defaults to false.
 */
goog.style.scrollIntoContainerView =
    function(element, opt_container, opt_center) {
  var container = opt_container || goog.dom.getDocumentScrollElement();
  var offset =
      goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y;
};


/**
 * Returns clientLeft (width of the left border and, if the directionality is
 * right to left, the vertical scrollbar) and clientTop as a coordinate object.
 *
 * @param {Element} el Element to get clientLeft for.
 * @return {!goog.math.Coordinate} Client left and top.
 */
goog.style.getClientLeftTop = function(el) {
  return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};


/**
 * Returns a Coordinate object relative to the top-left of the HTML document.
 * Implemented as a single function to save having to do two recursive loops in
 * opera and safari just to get both coordinates.  If you just want one value do
 * use goog.style.getPageOffsetLeft() and goog.style.getPageOffsetTop(), but
 * note if you call both those methods the tree will be analysed twice.
 *
 * @param {Element} el Element to get the page offset for.
 * @return {!goog.math.Coordinate} The page offset.
 */
goog.style.getPageOffset = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  // TODO(gboyer): Update the jsdoc in a way that doesn't break the universe.
  goog.asserts.assertObject(el, 'Parameter is required');

  // NOTE(arv): If element is hidden (display none or disconnected or any the
  // ancestors are hidden) we get (0,0) by default but we still do the
  // accumulation of scroll position.

  // TODO(arv): Should we check if the node is disconnected and in that case
  //            return (0,0)?

  var pos = new goog.math.Coordinate(0, 0);
  var viewportElement = goog.style.getClientViewportElement(doc);
  if (el == viewportElement) {
    // viewport is always at 0,0 as that defined the coordinate system for this
    // function - this avoids special case checks in the code below
    return pos;
  }

  var box = goog.style.getBoundingClientRect_(el);
  // Must add the scroll coordinates in to get the absolute page offset
  // of element since getBoundingClientRect returns relative coordinates to
  // the viewport.
  var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
  pos.x = box.left + scrollCoord.x;
  pos.y = box.top + scrollCoord.y;

  return pos;
};


/**
 * Returns the left coordinate of an element relative to the HTML document
 * @param {Element} el Elements.
 * @return {number} The left coordinate.
 */
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x;
};


/**
 * Returns the top coordinate of an element relative to the HTML document
 * @param {Element} el Elements.
 * @return {number} The top coordinate.
 */
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y;
};


/**
 * Returns a Coordinate object relative to the top-left of an HTML document
 * in an ancestor frame of this element. Used for measuring the position of
 * an element inside a frame relative to a containing frame.
 *
 * @param {Element} el Element to get the page offset for.
 * @param {Window} relativeWin The window to measure relative to. If relativeWin
 *     is not in the ancestor frame chain of the element, we measure relative to
 *     the top-most window.
 * @return {!goog.math.Coordinate} The page offset.
 */
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0);

  // Iterate up the ancestor frame chain, keeping track of the current window
  // and the current element in that window.
  var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
  var currentEl = el;
  do {
    // if we're at the top window, we want to get the page offset.
    // if we're at an inner frame, we only want to get the window position
    // so that we can determine the actual page offset in the context of
    // the outer window.
    var offset = currentWin == relativeWin ?
        goog.style.getPageOffset(currentEl) :
        goog.style.getClientPositionForElement_(
            goog.asserts.assert(currentEl));

    position.x += offset.x;
    position.y += offset.y;
  } while (currentWin && currentWin != relativeWin &&
      currentWin != currentWin.parent &&
      (currentEl = currentWin.frameElement) &&
      (currentWin = currentWin.parent));

  return position;
};


/**
 * Translates the specified rect relative to origBase page, for newBase page.
 * If origBase and newBase are the same, this function does nothing.
 *
 * @param {goog.math.Rect} rect The source rectangle relative to origBase page,
 *     and it will have the translated result.
 * @param {goog.dom.DomHelper} origBase The DomHelper for the input rectangle.
 * @param {goog.dom.DomHelper} newBase The DomHelper for the resultant
 *     coordinate.  This must be a DOM for an ancestor frame of origBase
 *     or the same as origBase.
 */
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if (origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body;
    var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());

    // Adjust Body's margin.
    pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));

    if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) &&
        !origBase.isCss1CompatMode()) {
      pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
    }

    rect.left += pos.x;
    rect.top += pos.y;
  }
};


/**
 * Returns the position of an element relative to another element in the
 * document.  A relative to B
 * @param {Element|Event|goog.events.Event} a Element or mouse event whose
 *     position we're calculating.
 * @param {Element|Event|goog.events.Event} b Element or mouse event position
 *     is relative to.
 * @return {!goog.math.Coordinate} The relative position.
 */
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a);
  var bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};


/**
 * Returns the position of the event or the element's border box relative to
 * the client viewport.
 * @param {!Element} el Element whose position to get.
 * @return {!goog.math.Coordinate} The position.
 * @private
 */
goog.style.getClientPositionForElement_ = function(el) {
  var box = goog.style.getBoundingClientRect_(el);
  return new goog.math.Coordinate(box.left, box.top);
};


/**
 * Returns the position of the event or the element's border box relative to
 * the client viewport. If an event is passed, and if this event is a "touch"
 * event, then the position of the first changedTouches will be returned.
 * @param {Element|Event|goog.events.Event} el Element or a mouse / touch event.
 * @return {!goog.math.Coordinate} The position.
 */
goog.style.getClientPosition = function(el) {
  goog.asserts.assert(el);
  if (el.nodeType == goog.dom.NodeType.ELEMENT) {
    return goog.style.getClientPositionForElement_(
        /** @type {!Element} */ (el));
  } else {
    var targetEvent = el.changedTouches ? el.changedTouches[0] : el;
    return new goog.math.Coordinate(
        targetEvent.clientX,
        targetEvent.clientY);
  }
};


/**
 * Moves an element to the given coordinates relative to the client viewport.
 * @param {Element} el Absolutely positioned element to set page offset for.
 *     It must be in the document.
 * @param {number|goog.math.Coordinate} x Left position of the element's margin
 *     box or a coordinate object.
 * @param {number=} opt_y Top position of the element's margin box.
 */
goog.style.setPageOffset = function(el, x, opt_y) {
  // Get current pageoffset
  var cur = goog.style.getPageOffset(el);

  if (x instanceof goog.math.Coordinate) {
    opt_y = x.y;
    x = x.x;
  }

  // NOTE(arv): We cannot allow strings for x and y. We could but that would
  // require us to manually transform between different units

  // Work out deltas
  var dx = x - cur.x;
  var dy = opt_y - cur.y;

  // Set position to current left/top + delta
  goog.style.setPosition(el, /** @type {!HTMLElement} */ (el).offsetLeft + dx,
                         /** @type {!HTMLElement} */ (el).offsetTop + dy);
};


/**
 * Sets the width/height values of an element.  If an argument is numeric,
 * or a goog.math.Size is passed, it is assumed to be pixels and will add
 * 'px' after converting it to an integer in string form. (This just sets the
 * CSS width and height properties so it might set content-box or border-box
 * size depending on the box model the browser is using.)
 *
 * @param {Element} element Element to set the size of.
 * @param {string|number|goog.math.Size} w Width of the element, or a
 *     size object.
 * @param {string|number=} opt_h Height of the element. Required if w is not a
 *     size object.
 */
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if (w instanceof goog.math.Size) {
    h = w.height;
    w = w.width;
  } else {
    if (opt_h == undefined) {
      throw Error('missing height argument');
    }
    h = opt_h;
  }

  goog.style.setWidth(element, /** @type {string|number} */ (w));
  goog.style.setHeight(element, h);
};


/**
 * Helper function to create a string to be set into a pixel-value style
 * property of an element. Can round to the nearest integer value.
 *
 * @param {string|number} value The style value to be used. If a number,
 *     'px' will be appended, otherwise the value will be applied directly.
 * @param {boolean} round Whether to round the nearest integer (if property
 *     is a number).
 * @return {string} The string value for the property.
 * @private
 */
goog.style.getPixelStyleValue_ = function(value, round) {
  if (typeof value == 'number') {
    value = (round ? Math.round(value) : value) + 'px';
  }

  return value;
};


/**
 * Set the height of an element.  Sets the element's style property.
 * @param {Element} element Element to set the height of.
 * @param {string|number} height The height value to set.  If a number, 'px'
 *     will be appended, otherwise the value will be applied directly.
 */
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, true);
};


/**
 * Set the width of an element.  Sets the element's style property.
 * @param {Element} element Element to set the width of.
 * @param {string|number} width The width value to set.  If a number, 'px'
 *     will be appended, otherwise the value will be applied directly.
 */
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, true);
};


/**
 * Gets the height and width of an element, even if its display is none.
 *
 * Specifically, this returns the height and width of the border box,
 * irrespective of the box model in effect.
 *
 * Note that this function does not take CSS transforms into account. Please see
 * {@code goog.style.getTransformedSize}.
 * @param {Element} element Element to get size of.
 * @return {!goog.math.Size} Object with width/height properties.
 */
goog.style.getSize = function(element) {
  return goog.style.evaluateWithTemporaryDisplay_(
      goog.style.getSizeWithDisplay_, /** @type {!Element} */ (element));
};


/**
 * Call {@code fn} on {@code element} such that {@code element}'s dimensions are
 * accurate when it's passed to {@code fn}.
 * @param {function(!Element): T} fn Function to call with {@code element} as
 *     an argument after temporarily changing {@code element}'s display such
 *     that its dimensions are accurate.
 * @param {!Element} element Element (which may have display none) to use as
 *     argument to {@code fn}.
 * @return {T} Value returned by calling {@code fn} with {@code element}.
 * @template T
 * @private
 */
goog.style.evaluateWithTemporaryDisplay_ = function(fn, element) {
  if (goog.style.getStyle_(element, 'display') != 'none') {
    return fn(element);
  }

  var style = element.style;
  var originalDisplay = style.display;
  var originalVisibility = style.visibility;
  var originalPosition = style.position;

  style.visibility = 'hidden';
  style.position = 'absolute';
  style.display = 'inline';

  var retVal = fn(element);

  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;

  return retVal;
};


/**
 * Gets the height and width of an element when the display is not none.
 * @param {Element} element Element to get size of.
 * @return {!goog.math.Size} Object with width/height properties.
 * @private
 */
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = /** @type {!HTMLElement} */ (element).offsetWidth;
  var offsetHeight = /** @type {!HTMLElement} */ (element).offsetHeight;
  var webkitOffsetsZero =
      goog.userAgent.WEBKIT && !offsetWidth && !offsetHeight;
  if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) &&
      element.getBoundingClientRect) {
    // Fall back to calling getBoundingClientRect when offsetWidth or
    // offsetHeight are not defined, or when they are zero in WebKit browsers.
    // This makes sure that we return for the correct size for SVG elements, but
    // will still return 0 on Webkit prior to 534.8, see
    // http://trac.webkit.org/changeset/67252.
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left,
        clientRect.bottom - clientRect.top);
  }
  return new goog.math.Size(offsetWidth, offsetHeight);
};


/**
 * Gets the height and width of an element, post transform, even if its display
 * is none.
 *
 * This is like {@code goog.style.getSize}, except:
 * <ol>
 * <li>Takes webkitTransforms such as rotate and scale into account.
 * <li>Will return null if {@code element} doesn't respond to
 *     {@code getBoundingClientRect}.
 * <li>Currently doesn't make sense on non-WebKit browsers which don't support
 *    webkitTransforms.
 * </ol>
 * @param {!Element} element Element to get size of.
 * @return {goog.math.Size} Object with width/height properties.
 */
goog.style.getTransformedSize = function(element) {
  if (!element.getBoundingClientRect) {
    return null;
  }

  var clientRect = goog.style.evaluateWithTemporaryDisplay_(
      goog.style.getBoundingClientRect_, element);
  return new goog.math.Size(clientRect.right - clientRect.left,
      clientRect.bottom - clientRect.top);
};


/**
 * Returns a bounding rectangle for a given element in page space.
 * @param {Element} element Element to get bounds of. Must not be display none.
 * @return {!goog.math.Rect} Bounding rectangle for the element.
 */
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element);
  var s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height);
};


/**
 * Converts a CSS selector in the form style-property to styleProperty.
 * @param {*} selector CSS Selector.
 * @return {string} Camel case selector.
 * @deprecated Use goog.string.toCamelCase instead.
 */
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector));
};


/**
 * Converts a CSS selector in the form styleProperty to style-property.
 * @param {string} selector Camel case selector.
 * @return {string} Selector cased.
 * @deprecated Use goog.string.toSelectorCase instead.
 */
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector);
};


/**
 * Gets the opacity of a node (x-browser). This gets the inline style opacity
 * of the node, and does not take into account the cascaded or the computed
 * style for this node.
 * @param {Element} el Element whose opacity has to be found.
 * @return {number|string} Opacity between 0 and 1 or an empty string {@code ''}
 *     if the opacity is not set.
 */
goog.style.getOpacity = function(el) {
  var style = el.style;
  var result = '';
  if ('opacity' in style) {
    result = style.opacity;
  } else if ('MozOpacity' in style) {
    result = style.MozOpacity;
  } else if ('filter' in style) {
    var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
    if (match) {
      result = String(match[1] / 100);
    }
  }
  return result == '' ? result : Number(result);
};


/**
 * Sets the opacity of a node (x-browser).
 * @param {Element} el Elements whose opacity has to be set.
 * @param {number|string} alpha Opacity between 0 and 1 or an empty string
 *     {@code ''} to clear the opacity.
 */
goog.style.setOpacity = function(el, alpha) {
  var style = el.style;
  if ('opacity' in style) {
    style.opacity = alpha;
  } else if ('MozOpacity' in style) {
    style.MozOpacity = alpha;
  } else if ('filter' in style) {
    // TODO(arv): Overwriting the filter might have undesired side effects.
    if (alpha === '') {
      style.filter = '';
    } else {
      style.filter = 'alpha(opacity=' + alpha * 100 + ')';
    }
  }
};


/**
 * Sets the background of an element to a transparent image in a browser-
 * independent manner.
 *
 * This function does not support repeating backgrounds or alternate background
 * positions to match the behavior of Internet Explorer. It also does not
 * support sizingMethods other than crop since they cannot be replicated in
 * browsers other than Internet Explorer.
 *
 * @param {Element} el The element to set background on.
 * @param {string} src The image source URL.
 */
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  // It is safe to use the style.filter in IE only. In Safari 'filter' is in
  // style object but access to style.filter causes it to throw an exception.
  // Note: IE8 supports images with an alpha channel.
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('8')) {
    // See TODO in setOpacity.
    style.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(' +
        'src="' + src + '", sizingMethod="crop")';
  } else {
    // Set style properties individually instead of using background shorthand
    // to prevent overwriting a pre-existing background color.
    style.backgroundImage = 'url(' + src + ')';
    style.backgroundPosition = 'top left';
    style.backgroundRepeat = 'no-repeat';
  }
};


/**
 * Clears the background image of an element in a browser independent manner.
 * @param {Element} el The element to clear background image for.
 */
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  if ('filter' in style) {
    // See TODO in setOpacity.
    style.filter = '';
  } else {
    // Set style properties individually instead of using background shorthand
    // to prevent overwriting a pre-existing background color.
    style.backgroundImage = 'none';
  }
};


/**
 * Shows or hides an element from the page. Hiding the element is done by
 * setting the display property to "none", removing the element from the
 * rendering hierarchy so it takes up no space. To show the element, the default
 * inherited display property is restored (defined either in stylesheets or by
 * the browser's default style rules.)
 *
 * Caveat 1: if the inherited display property for the element is set to "none"
 * by the stylesheets, that is the property that will be restored by a call to
 * showElement(), effectively toggling the display between "none" and "none".
 *
 * Caveat 2: if the element display style is set inline (by setting either
 * element.style.display or a style attribute in the HTML), a call to
 * showElement will clear that setting and defer to the inherited style in the
 * stylesheet.
 * @param {Element} el Element to show or hide.
 * @param {*} display True to render the element in its default style,
 *     false to disable rendering the element.
 * @deprecated Use goog.style.setElementShown instead.
 */
goog.style.showElement = function(el, display) {
  goog.style.setElementShown(el, display);
};


/**
 * Shows or hides an element from the page. Hiding the element is done by
 * setting the display property to "none", removing the element from the
 * rendering hierarchy so it takes up no space. To show the element, the default
 * inherited display property is restored (defined either in stylesheets or by
 * the browser's default style rules).
 *
 * Caveat 1: if the inherited display property for the element is set to "none"
 * by the stylesheets, that is the property that will be restored by a call to
 * setElementShown(), effectively toggling the display between "none" and
 * "none".
 *
 * Caveat 2: if the element display style is set inline (by setting either
 * element.style.display or a style attribute in the HTML), a call to
 * setElementShown will clear that setting and defer to the inherited style in
 * the stylesheet.
 * @param {Element} el Element to show or hide.
 * @param {*} isShown True to render the element in its default style,
 *     false to disable rendering the element.
 */
goog.style.setElementShown = function(el, isShown) {
  el.style.display = isShown ? '' : 'none';
};


/**
 * Test whether the given element has been shown or hidden via a call to
 * {@link #setElementShown}.
 *
 * Note this is strictly a companion method for a call
 * to {@link #setElementShown} and the same caveats apply; in particular, this
 * method does not guarantee that the return value will be consistent with
 * whether or not the element is actually visible.
 *
 * @param {Element} el The element to test.
 * @return {boolean} Whether the element has been shown.
 * @see #setElementShown
 */
goog.style.isElementShown = function(el) {
  return el.style.display != 'none';
};


/**
 * Installs the styles string into the window that contains opt_element.  If
 * opt_element is null, the main window is used.
 * @param {string} stylesString The style string to install.
 * @param {Node=} opt_node Node whose parent document should have the
 *     styles installed.
 * @return {Element|StyleSheet} The style element created.
 */
goog.style.installStyles = function(stylesString, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node);
  var styleSheet = null;

  // IE < 11 requires createStyleSheet. Note that doc.createStyleSheet will be
  // undefined as of IE 11.
  var doc = dh.getDocument();
  if (goog.userAgent.IE && doc.createStyleSheet) {
    styleSheet = doc.createStyleSheet();
    goog.style.setStyles(styleSheet, stylesString);
  } else {
    var head = dh.getElementsByTagNameAndClass(goog.dom.TagName.HEAD)[0];

    // In opera documents are not guaranteed to have a head element, thus we
    // have to make sure one exists before using it.
    if (!head) {
      var body = dh.getElementsByTagNameAndClass(goog.dom.TagName.BODY)[0];
      head = dh.createDom(goog.dom.TagName.HEAD);
      body.parentNode.insertBefore(head, body);
    }
    styleSheet = dh.createDom(goog.dom.TagName.STYLE);
    // NOTE(user): Setting styles after the style element has been appended
    // to the head results in a nasty Webkit bug in certain scenarios. Please
    // refer to https://bugs.webkit.org/show_bug.cgi?id=26307 for additional
    // details.
    goog.style.setStyles(styleSheet, stylesString);
    dh.appendChild(head, styleSheet);
  }
  return styleSheet;
};


/**
 * Removes the styles added by {@link #installStyles}.
 * @param {Element|StyleSheet} styleSheet The value returned by
 *     {@link #installStyles}.
 */
goog.style.uninstallStyles = function(styleSheet) {
  var node = styleSheet.ownerNode || styleSheet.owningElement ||
      /** @type {Element} */ (styleSheet);
  goog.dom.removeNode(node);
};


/**
 * Sets the content of a style element.  The style element can be any valid
 * style element.  This element will have its content completely replaced by
 * the new stylesString.
 * @param {Element|StyleSheet} element A stylesheet element as returned by
 *     installStyles.
 * @param {string} stylesString The new content of the stylesheet.
 */
goog.style.setStyles = function(element, stylesString) {
  if (goog.userAgent.IE && goog.isDef(element.cssText)) {
    // Adding the selectors individually caused the browser to hang if the
    // selector was invalid or there were CSS comments.  Setting the cssText of
    // the style node works fine and ignores CSS that IE doesn't understand.
    // However IE >= 11 doesn't support cssText any more, so we make sure that
    // cssText is a defined property and otherwise fall back to innerHTML.
    element.cssText = stylesString;
  } else {
    element.innerHTML = stylesString;
  }
};


/**
 * Sets 'white-space: pre-wrap' for a node (x-browser).
 *
 * There are as many ways of specifying pre-wrap as there are browsers.
 *
 * CSS3/IE8: white-space: pre-wrap;
 * Mozilla:  white-space: -moz-pre-wrap;
 * Opera:    white-space: -o-pre-wrap;
 * IE6/7:    white-space: pre; word-wrap: break-word;
 *
 * @param {Element} el Element to enable pre-wrap for.
 */
goog.style.setPreWrap = function(el) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('8')) {
    style.whiteSpace = 'pre';
    style.wordWrap = 'break-word';
  } else if (goog.userAgent.GECKO) {
    style.whiteSpace = '-moz-pre-wrap';
  } else {
    style.whiteSpace = 'pre-wrap';
  }
};


/**
 * Sets 'display: inline-block' for an element (cross-browser).
 * @param {Element} el Element to which the inline-block display style is to be
 *    applied.
 * @see ../demos/inline_block_quirks.html
 * @see ../demos/inline_block_standards.html
 */
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  // Without position:relative, weirdness ensues.  Just accept it and move on.
  style.position = 'relative';

  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('8')) {
    // IE8 supports inline-block so fall through to the else
    // Zoom:1 forces hasLayout, display:inline gives inline behavior.
    style.zoom = '1';
    style.display = 'inline';
  } else {
    // Opera, Webkit, and Safari seem to do OK with the standard inline-block
    // style.
    style.display = 'inline-block';
  }
};


/**
 * Returns true if the element is using right to left (rtl) direction.
 * @param {Element} el  The element to test.
 * @return {boolean} True for right to left, false for left to right.
 */
goog.style.isRightToLeft = function(el) {
  return 'rtl' == goog.style.getStyle_(el, 'direction');
};


/**
 * The CSS style property corresponding to an element being
 * unselectable on the current browser platform (null if none).
 * Opera and IE instead use a DOM attribute 'unselectable'.
 * @type {?string}
 * @private
 */
goog.style.unselectableStyle_ =
    goog.userAgent.GECKO ? 'MozUserSelect' :
    goog.userAgent.WEBKIT ? 'WebkitUserSelect' :
    null;


/**
 * Returns true if the element is set to be unselectable, false otherwise.
 * Note that on some platforms (e.g. Mozilla), even if an element isn't set
 * to be unselectable, it will behave as such if any of its ancestors is
 * unselectable.
 * @param {Element} el  Element to check.
 * @return {boolean}  Whether the element is set to be unselectable.
 */
goog.style.isUnselectable = function(el) {
  if (goog.style.unselectableStyle_) {
    return el.style[goog.style.unselectableStyle_].toLowerCase() == 'none';
  } else if (goog.userAgent.IE || goog.userAgent.OPERA) {
    return el.getAttribute('unselectable') == 'on';
  }
  return false;
};


/**
 * Makes the element and its descendants selectable or unselectable.  Note
 * that on some platforms (e.g. Mozilla), even if an element isn't set to
 * be unselectable, it will behave as such if any of its ancestors is
 * unselectable.
 * @param {Element} el  The element to alter.
 * @param {boolean} unselectable  Whether the element and its descendants
 *     should be made unselectable.
 * @param {boolean=} opt_noRecurse  Whether to only alter the element's own
 *     selectable state, and leave its descendants alone; defaults to false.
 */
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  // TODO(attila): Do we need all of TR_DomUtil.makeUnselectable() in Closure?
  var descendants = !opt_noRecurse ? el.getElementsByTagName('*') : null;
  var name = goog.style.unselectableStyle_;
  if (name) {
    // Add/remove the appropriate CSS style to/from the element and its
    // descendants.
    var value = unselectable ? 'none' : '';
    // MathML elements do not have a style property. Verify before setting.
    if (el.style) {
      el.style[name] = value;
    }
    if (descendants) {
      for (var i = 0, descendant; descendant = descendants[i]; i++) {
        if (descendant.style) {
          descendant.style[name] = value;
        }
      }
    }
  } else if (goog.userAgent.IE || goog.userAgent.OPERA) {
    // Toggle the 'unselectable' attribute on the element and its descendants.
    var value = unselectable ? 'on' : '';
    el.setAttribute('unselectable', value);
    if (descendants) {
      for (var i = 0, descendant; descendant = descendants[i]; i++) {
        descendant.setAttribute('unselectable', value);
      }
    }
  }
};


/**
 * Gets the border box size for an element.
 * @param {Element} element  The element to get the size for.
 * @return {!goog.math.Size} The border box size.
 */
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size(
      /** @type {!HTMLElement} */ (element).offsetWidth,
      /** @type {!HTMLElement} */ (element).offsetHeight);
};


/**
 * Sets the border box size of an element. This is potentially expensive in IE
 * if the document is CSS1Compat mode
 * @param {Element} element  The element to set the size on.
 * @param {goog.math.Size} size  The new size.
 */
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();

  if (goog.userAgent.IE &&
      !goog.userAgent.isVersionOrHigher('10') &&
      (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher('8'))) {
    var style = element.style;
    if (isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left -
                         paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top -
                          paddingBox.bottom - borderBox.bottom;
    } else {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, 'border-box');
  }
};


/**
 * Gets the content box size for an element.  This is potentially expensive in
 * all browsers.
 * @param {Element} element  The element to get the size for.
 * @return {!goog.math.Size} The content box size.
 */
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element);
  var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if (ieCurrentStyle &&
      goog.dom.getDomHelper(doc).isCss1CompatMode() &&
      ieCurrentStyle.width != 'auto' && ieCurrentStyle.height != 'auto' &&
      !ieCurrentStyle.boxSizing) {
    // If IE in CSS1Compat mode than just use the width and height.
    // If we have a boxSizing then fall back on measuring the borders etc.
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width,
                                            'width', 'pixelWidth');
    var height = goog.style.getIePixelValue_(element, ieCurrentStyle.height,
                                             'height', 'pixelHeight');
    return new goog.math.Size(width, height);
  } else {
    var borderBoxSize = goog.style.getBorderBoxSize(element);
    var paddingBox = goog.style.getPaddingBox(element);
    var borderBox = goog.style.getBorderBox(element);
    return new goog.math.Size(borderBoxSize.width -
                              borderBox.left - paddingBox.left -
                              paddingBox.right - borderBox.right,
                              borderBoxSize.height -
                              borderBox.top - paddingBox.top -
                              paddingBox.bottom - borderBox.bottom);
  }
};


/**
 * Sets the content box size of an element. This is potentially expensive in IE
 * if the document is BackCompat mode.
 * @param {Element} element  The element to set the size on.
 * @param {goog.math.Size} size  The new size.
 */
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE &&
      !goog.userAgent.isVersionOrHigher('10') &&
      (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher('8'))) {
    var style = element.style;
    if (isCss1CompatMode) {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    } else {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left +
                         paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top +
                          paddingBox.bottom + borderBox.bottom;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, 'content-box');
  }
};


/**
 * Helper function that sets the box sizing as well as the width and height
 * @param {Element} element  The element to set the size on.
 * @param {goog.math.Size} size  The new size to set.
 * @param {string} boxSizing  The box-sizing value.
 * @private
 */
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  if (goog.userAgent.GECKO) {
    style.MozBoxSizing = boxSizing;
  } else if (goog.userAgent.WEBKIT) {
    style.WebkitBoxSizing = boxSizing;
  } else {
    // Includes IE8 and Opera 9.50+
    style.boxSizing = boxSizing;
  }

  // Setting this to a negative value will throw an exception on IE
  // (and doesn't do anything different than setting it to 0).
  style.width = Math.max(size.width, 0) + 'px';
  style.height = Math.max(size.height, 0) + 'px';
};


/**
 * IE specific function that converts a non pixel unit to pixels.
 * @param {Element} element  The element to convert the value for.
 * @param {string} value  The current value as a string. The value must not be
 *     ''.
 * @param {string} name  The CSS property name to use for the converstion. This
 *     should be 'left', 'top', 'width' or 'height'.
 * @param {string} pixelName  The CSS pixel property name to use to get the
 *     value in pixels.
 * @return {number} The value in pixels.
 * @private
 */
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  // Try if we already have a pixel value. IE does not do half pixels so we
  // only check if it matches a number followed by 'px'.
  if (/^\d+px?$/.test(value)) {
    return parseInt(value, 10);
  } else {
    var oldStyleValue = element.style[name];
    var oldRuntimeValue = element.runtimeStyle[name];
    // set runtime style to prevent changes
    element.runtimeStyle[name] = element.currentStyle[name];
    element.style[name] = value;
    var pixelValue = element.style[pixelName];
    // restore
    element.style[name] = oldStyleValue;
    element.runtimeStyle[name] = oldRuntimeValue;
    return pixelValue;
  }
};


/**
 * Helper function for getting the pixel padding or margin for IE.
 * @param {Element} element  The element to get the padding for.
 * @param {string} propName  The property name.
 * @return {number} The pixel padding.
 * @private
 */
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ?
      goog.style.getIePixelValue_(element, value, 'left', 'pixelLeft') : 0;
};


/**
 * Gets the computed paddings or margins (on all sides) in pixels.
 * @param {Element} element  The element to get the padding for.
 * @param {string} stylePrefix  Pass 'padding' to retrieve the padding box,
 *     or 'margin' to retrieve the margin box.
 * @return {!goog.math.Box} The computed paddings or margins.
 * @private
 */
goog.style.getBox_ = function(element, stylePrefix) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + 'Left');
    var right = goog.style.getIePixelDistance_(element, stylePrefix + 'Right');
    var top = goog.style.getIePixelDistance_(element, stylePrefix + 'Top');
    var bottom = goog.style.getIePixelDistance_(
        element, stylePrefix + 'Bottom');
    return new goog.math.Box(top, right, bottom, left);
  } else {
    // On non-IE browsers, getComputedStyle is always non-null.
    var left = goog.style.getComputedStyle(element, stylePrefix + 'Left');
    var right = goog.style.getComputedStyle(element, stylePrefix + 'Right');
    var top = goog.style.getComputedStyle(element, stylePrefix + 'Top');
    var bottom = goog.style.getComputedStyle(element, stylePrefix + 'Bottom');

    // NOTE(arv): Gecko can return floating point numbers for the computed
    // style values.
    return new goog.math.Box(parseFloat(top),
                             parseFloat(right),
                             parseFloat(bottom),
                             parseFloat(left));
  }
};


/**
 * Gets the computed paddings (on all sides) in pixels.
 * @param {Element} element  The element to get the padding for.
 * @return {!goog.math.Box} The computed paddings.
 */
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, 'padding');
};


/**
 * Gets the computed margins (on all sides) in pixels.
 * @param {Element} element  The element to get the margins for.
 * @return {!goog.math.Box} The computed margins.
 */
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, 'margin');
};


/**
 * A map used to map the border width keywords to a pixel width.
 * @type {Object}
 * @private
 */
goog.style.ieBorderWidthKeywords_ = {
  'thin': 2,
  'medium': 4,
  'thick': 6
};


/**
 * Helper function for IE to get the pixel border.
 * @param {Element} element  The element to get the pixel border for.
 * @param {string} prop  The part of the property name.
 * @return {number} The value in pixels.
 * @private
 */
goog.style.getIePixelBorder_ = function(element, prop) {
  if (goog.style.getCascadedStyle(element, prop + 'Style') == 'none') {
    return 0;
  }
  var width = goog.style.getCascadedStyle(element, prop + 'Width');
  if (width in goog.style.ieBorderWidthKeywords_) {
    return goog.style.ieBorderWidthKeywords_[width];
  }
  return goog.style.getIePixelValue_(element, width, 'left', 'pixelLeft');
};


/**
 * Gets the computed border widths (on all sides) in pixels
 * @param {Element} element  The element to get the border widths for.
 * @return {!goog.math.Box} The computed border widths.
 */
goog.style.getBorderBox = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    var left = goog.style.getIePixelBorder_(element, 'borderLeft');
    var right = goog.style.getIePixelBorder_(element, 'borderRight');
    var top = goog.style.getIePixelBorder_(element, 'borderTop');
    var bottom = goog.style.getIePixelBorder_(element, 'borderBottom');
    return new goog.math.Box(top, right, bottom, left);
  } else {
    // On non-IE browsers, getComputedStyle is always non-null.
    var left = goog.style.getComputedStyle(element, 'borderLeftWidth');
    var right = goog.style.getComputedStyle(element, 'borderRightWidth');
    var top = goog.style.getComputedStyle(element, 'borderTopWidth');
    var bottom = goog.style.getComputedStyle(element, 'borderBottomWidth');

    return new goog.math.Box(parseFloat(top),
                             parseFloat(right),
                             parseFloat(bottom),
                             parseFloat(left));
  }
};


/**
 * Returns the font face applied to a given node. Opera and IE should return
 * the font actually displayed. Firefox returns the author's most-preferred
 * font (whether the browser is capable of displaying it or not.)
 * @param {Element} el  The element whose font family is returned.
 * @return {string} The font family applied to el.
 */
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  var font = '';
  // The moveToElementText method from the TextRange only works if the element
  // is attached to the owner document.
  if (doc.body.createTextRange && goog.dom.contains(doc, el)) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    /** @preserveTry */
    try {
      font = range.queryCommandValue('FontName');
    } catch (e) {
      // This is a workaround for a awkward exception.
      // On some IE, there is an exception coming from it.
      // The error description from this exception is:
      // This window has already been registered as a drop target
      // This is bogus description, likely due to a bug in ie.
      font = '';
    }
  }
  if (!font) {
    // Note if for some reason IE can't derive FontName with a TextRange, we
    // fallback to using currentStyle
    font = goog.style.getStyle_(el, 'fontFamily');
  }

  // Firefox returns the applied font-family string (author's list of
  // preferred fonts.) We want to return the most-preferred font, in lieu of
  // the *actually* applied font.
  var fontsArray = font.split(',');
  if (fontsArray.length > 1) font = fontsArray[0];

  // Sanitize for x-browser consistency:
  // Strip quotes because browsers aren't consistent with how they're
  // applied; Opera always encloses, Firefox sometimes, and IE never.
  return goog.string.stripQuotes(font, '"\'');
};


/**
 * Regular expression used for getLengthUnits.
 * @type {RegExp}
 * @private
 */
goog.style.lengthUnitRegex_ = /[^\d]+$/;


/**
 * Returns the units used for a CSS length measurement.
 * @param {string} value  A CSS length quantity.
 * @return {?string} The units of measurement.
 */
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null;
};


/**
 * Map of absolute CSS length units
 * @type {Object}
 * @private
 */
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {
  'cm' : 1,
  'in' : 1,
  'mm' : 1,
  'pc' : 1,
  'pt' : 1
};


/**
 * Map of relative CSS length units that can be accurately converted to px
 * font-size values using getIePixelValue_. Only units that are defined in
 * relation to a font size are convertible (%, small, etc. are not).
 * @type {Object}
 * @private
 */
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {
  'em' : 1,
  'ex' : 1
};


/**
 * Returns the font size, in pixels, of text in an element.
 * @param {Element} el  The element whose font size is returned.
 * @return {number} The font size (in pixels).
 */
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, 'fontSize');
  var sizeUnits = goog.style.getLengthUnits(fontSize);
  if (fontSize && 'px' == sizeUnits) {
    // NOTE(user): This could be parseFloat instead, but IE doesn't return
    // decimal fractions in getStyle_ and Firefox reports the fractions, but
    // ignores them when rendering. Interestingly enough, when we force the
    // issue and size something to e.g., 50% of 25px, the browsers round in
    // opposite directions with Firefox reporting 12px and IE 13px. I punt.
    return parseInt(fontSize, 10);
  }

  // In IE, we can convert absolute length units to a px value using
  // goog.style.getIePixelValue_. Units defined in relation to a font size
  // (em, ex) are applied relative to the element's parentNode and can also
  // be converted.
  if (goog.userAgent.IE) {
    if (sizeUnits in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el,
                                         fontSize,
                                         'left',
                                         'pixelLeft');
    } else if (el.parentNode &&
               el.parentNode.nodeType == goog.dom.NodeType.ELEMENT &&
               sizeUnits in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_) {
      // Check the parent size - if it is the same it means the relative size
      // value is inherited and we therefore don't want to count it twice.  If
      // it is different, this element either has explicit style or has a CSS
      // rule applying to it.
      var parentElement = /** @type {!Element} */ (el.parentNode);
      var parentSize = goog.style.getStyle_(parentElement, 'fontSize');
      return goog.style.getIePixelValue_(parentElement,
                                         fontSize == parentSize ?
                                             '1em' : fontSize,
                                         'left',
                                         'pixelLeft');
    }
  }

  // Sometimes we can't cleanly find the font size (some units relative to a
  // node's parent's font size are difficult: %, smaller et al), so we create
  // an invisible, absolutely-positioned span sized to be the height of an 'M'
  // rendered in its parent's (i.e., our target element's) font size. This is
  // the definition of CSS's font size attribute.
  var sizeElement = goog.dom.createDom(
      goog.dom.TagName.SPAN,
      {'style': 'visibility:hidden;position:absolute;' +
            'line-height:0;padding:0;margin:0;border:0;height:1em;'});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);

  return fontSize;
};


/**
 * Parses a style attribute value.  Converts CSS property names to camel case.
 * @param {string} value The style attribute value.
 * @return {!Object} Map of CSS properties to string values.
 */
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.match(/\s*([\w-]+)\s*\:(.+)/);
    if (keyValue) {
      var styleName = keyValue[1];
      var styleValue = goog.string.trim(keyValue[2]);
      result[goog.string.toCamelCase(styleName.toLowerCase())] = styleValue;
    }
  });
  return result;
};


/**
 * Reverse of parseStyleAttribute; that is, takes a style object and returns the
 * corresponding attribute value.  Converts camel case property names to proper
 * CSS selector names.
 * @param {Object} obj Map of CSS properties to values.
 * @return {string} The style attribute value.
 */
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ':', value, ';');
  });
  return buffer.join('');
};


/**
 * Sets CSS float property on an element.
 * @param {Element} el The element to set float property on.
 * @param {string} value The value of float CSS property to set on this element.
 */
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? 'styleFloat' : 'cssFloat'] = value;
};


/**
 * Gets value of explicitly-set float CSS property on an element.
 * @param {Element} el The element to get float property of.
 * @return {string} The value of explicitly-set float CSS property on this
 *     element.
 */
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? 'styleFloat' : 'cssFloat'] || '';
};


/**
 * Returns the scroll bar width (represents the width of both horizontal
 * and vertical scroll).
 *
 * @param {string=} opt_className An optional class name (or names) to apply
 *     to the invisible div created to measure the scrollbar. This is necessary
 *     if some scrollbars are styled differently than others.
 * @return {number} The scroll bar width in px.
 */
goog.style.getScrollbarWidth = function(opt_className) {
  // Add two hidden divs.  The child div is larger than the parent and
  // forces scrollbars to appear on it.
  // Using overflow:scroll does not work consistently with scrollbars that
  // are styled with ::-webkit-scrollbar.
  var outerDiv = goog.dom.createElement(goog.dom.TagName.DIV);
  if (opt_className) {
    outerDiv.className = opt_className;
  }
  outerDiv.style.cssText = 'overflow:auto;' +
      'position:absolute;top:0;width:100px;height:100px';
  var innerDiv = goog.dom.createElement(goog.dom.TagName.DIV);
  goog.style.setSize(innerDiv, '200px', '200px');
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width;
};


/**
 * Regular expression to extract x and y translation components from a CSS
 * transform Matrix representation.
 *
 * @type {!RegExp}
 * @const
 * @private
 */
goog.style.MATRIX_TRANSLATION_REGEX_ =
    new RegExp('matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, ' +
               '[0-9\\.\\-]+, [0-9\\.\\-]+, ' +
               '([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)');


/**
 * Returns the x,y translation component of any CSS transforms applied to the
 * element, in pixels.
 *
 * @param {!Element} element The element to get the translation of.
 * @return {!goog.math.Coordinate} The CSS translation of the element in px.
 */
goog.style.getCssTranslation = function(element) {
  var transform = goog.style.getComputedTransform(element);
  if (!transform) {
    return new goog.math.Coordinate(0, 0);
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  if (!matches) {
    return new goog.math.Coordinate(0, 0);
  }
  return new goog.math.Coordinate(parseFloat(matches[1]),
                                  parseFloat(matches[2]));
};

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Class to create objects which want to handle multiple events
 * and have their listeners easily cleaned up via a dispose method.
 *
 * Example:
 * <pre>
 * function Something() {
 *   Something.base(this);
 *
 *   ... set up object ...
 *
 *   // Add event listeners
 *   this.listen(this.starEl, goog.events.EventType.CLICK, this.handleStar);
 *   this.listen(this.headerEl, goog.events.EventType.CLICK, this.expand);
 *   this.listen(this.collapseEl, goog.events.EventType.CLICK, this.collapse);
 *   this.listen(this.infoEl, goog.events.EventType.MOUSEOVER, this.showHover);
 *   this.listen(this.infoEl, goog.events.EventType.MOUSEOUT, this.hideHover);
 * }
 * goog.inherits(Something, goog.events.EventHandler);
 *
 * Something.prototype.disposeInternal = function() {
 *   Something.base(this, 'disposeInternal');
 *   goog.dom.removeNode(this.container);
 * };
 *
 *
 * // Then elsewhere:
 *
 * var activeSomething = null;
 * function openSomething() {
 *   activeSomething = new Something();
 * }
 *
 * function closeSomething() {
 *   if (activeSomething) {
 *     activeSomething.dispose();  // Remove event listeners
 *     activeSomething = null;
 *   }
 * }
 * </pre>
 *
 */

goog.provide('goog.events.EventHandler');

goog.require('goog.Disposable');
goog.require('goog.events');
goog.require('goog.object');

goog.forwardDeclare('goog.events.EventWrapper');



/**
 * Super class for objects that want to easily manage a number of event
 * listeners.  It allows a short cut to listen and also provides a quick way
 * to remove all events listeners belonging to this object.
 * @param {SCOPE=} opt_scope Object in whose scope to call the listeners.
 * @constructor
 * @extends {goog.Disposable}
 * @template SCOPE
 */
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  // TODO(mknichel): Rename this to this.scope_ and fix the classes in google3
  // that access this private variable. :(
  this.handler_ = opt_scope;

  /**
   * Keys for events that are being listened to.
   * @type {!Object<!goog.events.Key>}
   * @private
   */
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);


/**
 * Utility array used to unify the cases of listening for an array of types
 * and listening for a single event, without using recursion or allocating
 * an array each time.
 * @type {!Array<string>}
 * @const
 * @private
 */
goog.events.EventHandler.typeArray_ = [];


/**
 * Listen to an event on a Listenable.  If the function is omitted then the
 * EventHandler's handleEvent method will be used.
 * @param {goog.events.ListenableType} src Event source.
 * @param {string|Array<string>|
 *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}
 *     type Event type to listen for or array of event types.
 * @param {function(this:SCOPE, EVENTOBJ):?|{handleEvent:function(?):?}|null=}
 *     opt_fn Optional callback function to be used as the listener or an object
 *     with handleEvent function.
 * @param {boolean=} opt_capture Optional whether to use capture phase.
 * @return {!goog.events.EventHandler<SCOPE>} This object, allowing for
 *     chaining of calls.
 * @template EVENTOBJ
 */
goog.events.EventHandler.prototype.listen = function(
    src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};


/**
 * Listen to an event on a Listenable.  If the function is omitted then the
 * EventHandler's handleEvent method will be used.
 * @param {goog.events.ListenableType} src Event source.
 * @param {string|Array<string>|
 *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}
 *     type Event type to listen for or array of event types.
 * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(this:T, ?):?}|
 *     null|undefined} fn Optional callback function to be used as the
 *     listener or an object with handleEvent function.
 * @param {boolean|undefined} capture Optional whether to use capture phase.
 * @param {T} scope Object in whose scope to call the listener.
 * @return {!goog.events.EventHandler<SCOPE>} This object, allowing for
 *     chaining of calls.
 * @template T,EVENTOBJ
 */
goog.events.EventHandler.prototype.listenWithScope = function(
    src, type, fn, capture, scope) {
  // TODO(mknichel): Deprecate this function.
  return this.listen_(src, type, fn, capture, scope);
};


/**
 * Listen to an event on a Listenable.  If the function is omitted then the
 * EventHandler's handleEvent method will be used.
 * @param {goog.events.ListenableType} src Event source.
 * @param {string|Array<string>|
 *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}
 *     type Event type to listen for or array of event types.
 * @param {function(EVENTOBJ):?|{handleEvent:function(?):?}|null=} opt_fn
 *     Optional callback function to be used as the listener or an object with
 *     handleEvent function.
 * @param {boolean=} opt_capture Optional whether to use capture phase.
 * @param {Object=} opt_scope Object in whose scope to call the listener.
 * @return {!goog.events.EventHandler<SCOPE>} This object, allowing for
 *     chaining of calls.
 * @template EVENTOBJ
 * @private
 */
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn,
                                                      opt_capture,
                                                      opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0; i < type.length; i++) {
    var listenerObj = goog.events.listen(
        src, type[i], opt_fn || this.handleEvent,
        opt_capture || false,
        opt_scope || this.handler_ || this);

    if (!listenerObj) {
      // When goog.events.listen run on OFF_AND_FAIL or OFF_AND_SILENT
      // (goog.events.CaptureSimulationMode) in IE8-, it will return null
      // value.
      return this;
    }

    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }

  return this;
};


/**
 * Listen to an event on a Listenable.  If the function is omitted, then the
 * EventHandler's handleEvent method will be used. After the event has fired the
 * event listener is removed from the target. If an array of event types is
 * provided, each event type will be listened to once.
 * @param {goog.events.ListenableType} src Event source.
 * @param {string|Array<string>|
 *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}
 *     type Event type to listen for or array of event types.
 * @param {function(this:SCOPE, EVENTOBJ):?|{handleEvent:function(?):?}|null=} opt_fn
 *    Optional callback function to be used as the listener or an object with
 *    handleEvent function.
 * @param {boolean=} opt_capture Optional whether to use capture phase.
 * @return {!goog.events.EventHandler<SCOPE>} This object, allowing for
 *     chaining of calls.
 * @template EVENTOBJ
 */
goog.events.EventHandler.prototype.listenOnce = function(
    src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};


/**
 * Listen to an event on a Listenable.  If the function is omitted, then the
 * EventHandler's handleEvent method will be used. After the event has fired the
 * event listener is removed from the target. If an array of event types is
 * provided, each event type will be listened to once.
 * @param {goog.events.ListenableType} src Event source.
 * @param {string|Array<string>|
 *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}
 *     type Event type to listen for or array of event types.
 * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(this:T, ?):?}|
 *     null|undefined} fn Optional callback function to be used as the
 *     listener or an object with handleEvent function.
 * @param {boolean|undefined} capture Optional whether to use capture phase.
 * @param {T} scope Object in whose scope to call the listener.
 * @return {!goog.events.EventHandler<SCOPE>} This object, allowing for
 *     chaining of calls.
 * @template T,EVENTOBJ
 */
goog.events.EventHandler.prototype.listenOnceWithScope = function(
    src, type, fn, capture, scope) {
  // TODO(mknichel): Deprecate this function.
  return this.listenOnce_(src, type, fn, capture, scope);
};


/**
 * Listen to an event on a Listenable.  If the function is omitted, then the
 * EventHandler's handleEvent method will be used. After the event has fired
 * the event listener is removed from the target. If an array of event types is
 * provided, each event type will be listened to once.
 * @param {goog.events.ListenableType} src Event source.
 * @param {string|Array<string>|
 *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}
 *     type Event type to listen for or array of event types.
 * @param {function(EVENTOBJ):?|{handleEvent:function(?):?}|null=} opt_fn
 *    Optional callback function to be used as the listener or an object with
 *    handleEvent function.
 * @param {boolean=} opt_capture Optional whether to use capture phase.
 * @param {Object=} opt_scope Object in whose scope to call the listener.
 * @return {!goog.events.EventHandler<SCOPE>} This object, allowing for
 *     chaining of calls.
 * @template EVENTOBJ
 * @private
 */
goog.events.EventHandler.prototype.listenOnce_ = function(
    src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(
        src, type, opt_fn || this.handleEvent, opt_capture,
        opt_scope || this.handler_ || this);
    if (!listenerObj) {
      // When goog.events.listen run on OFF_AND_FAIL or OFF_AND_SILENT
      // (goog.events.CaptureSimulationMode) in IE8-, it will return null
      // value.
      return this;
    }

    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }

  return this;
};


/**
 * Adds an event listener with a specific event wrapper on a DOM Node or an
 * object that has implemented {@link goog.events.EventTarget}. A listener can
 * only be added once to an object.
 *
 * @param {EventTarget|goog.events.EventTarget} src The node to listen to
 *     events on.
 * @param {goog.events.EventWrapper} wrapper Event wrapper to use.
 * @param {function(this:SCOPE, ?):?|{handleEvent:function(?):?}|null} listener
 *     Callback method, or an object with a handleEvent function.
 * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to
 *     false).
 * @return {!goog.events.EventHandler<SCOPE>} This object, allowing for
 *     chaining of calls.
 */
goog.events.EventHandler.prototype.listenWithWrapper = function(
    src, wrapper, listener, opt_capt) {
  // TODO(mknichel): Remove the opt_scope from this function and then
  // templatize it.
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};


/**
 * Adds an event listener with a specific event wrapper on a DOM Node or an
 * object that has implemented {@link goog.events.EventTarget}. A listener can
 * only be added once to an object.
 *
 * @param {EventTarget|goog.events.EventTarget} src The node to listen to
 *     events on.
 * @param {goog.events.EventWrapper} wrapper Event wrapper to use.
 * @param {function(this:T, ?):?|{handleEvent:function(this:T, ?):?}|null}
 *     listener Optional callback function to be used as the
 *     listener or an object with handleEvent function.
 * @param {boolean|undefined} capture Optional whether to use capture phase.
 * @param {T} scope Object in whose scope to call the listener.
 * @return {!goog.events.EventHandler<SCOPE>} This object, allowing for
 *     chaining of calls.
 * @template T
 */
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(
    src, wrapper, listener, capture, scope) {
  // TODO(mknichel): Deprecate this function.
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};


/**
 * Adds an event listener with a specific event wrapper on a DOM Node or an
 * object that has implemented {@link goog.events.EventTarget}. A listener can
 * only be added once to an object.
 *
 * @param {EventTarget|goog.events.EventTarget} src The node to listen to
 *     events on.
 * @param {goog.events.EventWrapper} wrapper Event wrapper to use.
 * @param {function(?):?|{handleEvent:function(?):?}|null} listener Callback
 *     method, or an object with a handleEvent function.
 * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to
 *     false).
 * @param {Object=} opt_scope Element in whose scope to call the listener.
 * @return {!goog.events.EventHandler<SCOPE>} This object, allowing for
 *     chaining of calls.
 * @private
 */
goog.events.EventHandler.prototype.listenWithWrapper_ = function(
    src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this,
                 this);
  return this;
};


/**
 * @return {number} Number of listeners registered by this handler.
 */
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};


/**
 * Unlistens on an event.
 * @param {goog.events.ListenableType} src Event source.
 * @param {string|Array<string>|
 *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}
 *     type Event type or array of event types to unlisten to.
 * @param {function(EVENTOBJ):?|{handleEvent:function(?):?}|null=} opt_fn
 *     Optional callback function to be used as the listener or an object with
 *     handleEvent function.
 * @param {boolean=} opt_capture Optional whether to use capture phase.
 * @param {Object=} opt_scope Object in whose scope to call the listener.
 * @return {!goog.events.EventHandler} This object, allowing for chaining of
 *     calls.
 * @template EVENTOBJ
 */
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn,
                                                       opt_capture,
                                                       opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type,
        opt_fn || this.handleEvent,
        opt_capture, opt_scope || this.handler_ || this);

    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }

  return this;
};


/**
 * Removes an event listener which was added with listenWithWrapper().
 *
 * @param {EventTarget|goog.events.EventTarget} src The target to stop
 *     listening to events on.
 * @param {goog.events.EventWrapper} wrapper Event wrapper to use.
 * @param {function(?):?|{handleEvent:function(?):?}|null} listener The
 *     listener function to remove.
 * @param {boolean=} opt_capt In DOM-compliant browsers, this determines
 *     whether the listener is fired during the capture or bubble phase of the
 *     event.
 * @param {Object=} opt_scope Element in whose scope to call the listener.
 * @return {!goog.events.EventHandler} This object, allowing for chaining of
 *     calls.
 */
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper,
    listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt,
                   opt_scope || this.handler_ || this, this);
  return this;
};


/**
 * Unlistens to all events.
 */
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, function(listenerObj, key) {
    if (this.keys_.hasOwnProperty(key)) {
      goog.events.unlistenByKey(listenerObj);
    }
  }, this);

  this.keys_ = {};
};


/**
 * Disposes of this EventHandler and removes all listeners that it registered.
 * @override
 * @protected
 */
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};


/**
 * Default event handler
 * @param {goog.events.Event} e Event object.
 */
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error('EventHandler.handleEvent not implemented');
};

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A disposable implementation of a custom
 * listenable/event target. See also: documentation for
 * {@code goog.events.Listenable}.
 *
 * @author arv@google.com (Erik Arvidsson) [Original implementation]
 * @see ../demos/eventtarget.html
 * @see goog.events.Listenable
 */

goog.provide('goog.events.EventTarget');

goog.require('goog.Disposable');
goog.require('goog.asserts');
goog.require('goog.events');
goog.require('goog.events.Event');
goog.require('goog.events.Listenable');
goog.require('goog.events.ListenerMap');
goog.require('goog.object');



/**
 * An implementation of {@code goog.events.Listenable} with full W3C
 * EventTarget-like support (capture/bubble mechanism, stopping event
 * propagation, preventing default actions).
 *
 * You may subclass this class to turn your class into a Listenable.
 *
 * Unless propagation is stopped, an event dispatched by an
 * EventTarget will bubble to the parent returned by
 * {@code getParentEventTarget}. To set the parent, call
 * {@code setParentEventTarget}. Subclasses that don't support
 * changing the parent can override the setter to throw an error.
 *
 * Example usage:
 * <pre>
 *   var source = new goog.events.EventTarget();
 *   function handleEvent(e) {
 *     alert('Type: ' + e.type + '; Target: ' + e.target);
 *   }
 *   source.listen('foo', handleEvent);
 *   // Or: goog.events.listen(source, 'foo', handleEvent);
 *   ...
 *   source.dispatchEvent('foo');  // will call handleEvent
 *   ...
 *   source.unlisten('foo', handleEvent);
 *   // Or: goog.events.unlisten(source, 'foo', handleEvent);
 * </pre>
 *
 * @constructor
 * @extends {goog.Disposable}
 * @implements {goog.events.Listenable}
 */
goog.events.EventTarget = function() {
  goog.Disposable.call(this);

  /**
   * Maps of event type to an array of listeners.
   * @private {!goog.events.ListenerMap}
   */
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);

  /**
   * The object to use for event.target. Useful when mixing in an
   * EventTarget to another object.
   * @private {!Object}
   */
  this.actualEventTarget_ = this;

  /**
   * Parent event target, used during event bubbling.
   *
   * TODO(chrishenry): Change this to goog.events.Listenable. This
   * currently breaks people who expect getParentEventTarget to return
   * goog.events.EventTarget.
   *
   * @private {goog.events.EventTarget}
   */
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);


/**
 * An artificial cap on the number of ancestors you can have. This is mainly
 * for loop detection.
 * @const {number}
 * @private
 */
goog.events.EventTarget.MAX_ANCESTORS_ = 1000;


/**
 * Returns the parent of this event target to use for bubbling.
 *
 * @return {goog.events.EventTarget} The parent EventTarget or null if
 *     there is no parent.
 * @override
 */
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};


/**
 * Sets the parent of this event target to use for capture/bubble
 * mechanism.
 * @param {goog.events.EventTarget} parent Parent listenable (null if none).
 */
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};


/**
 * Adds an event listener to the event target. The same handler can only be
 * added once per the type. Even if you add the same handler multiple times
 * using the same type then it will only be called once when the event is
 * dispatched.
 *
 * @param {string} type The type of the event to listen for.
 * @param {function(?):?|{handleEvent:function(?):?}|null} handler The function
 *     to handle the event. The handler can also be an object that implements
 *     the handleEvent method which takes the event object as argument.
 * @param {boolean=} opt_capture In DOM-compliant browsers, this determines
 *     whether the listener is fired during the capture or bubble phase
 *     of the event.
 * @param {Object=} opt_handlerScope Object in whose scope to call
 *     the listener.
 * @deprecated Use {@code #listen} instead, when possible. Otherwise, use
 *     {@code goog.events.listen} if you are passing Object
 *     (instead of Function) as handler.
 */
goog.events.EventTarget.prototype.addEventListener = function(
    type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};


/**
 * Removes an event listener from the event target. The handler must be the
 * same object as the one added. If the handler has not been added then
 * nothing is done.
 *
 * @param {string} type The type of the event to listen for.
 * @param {function(?):?|{handleEvent:function(?):?}|null} handler The function
 *     to handle the event. The handler can also be an object that implements
 *     the handleEvent method which takes the event object as argument.
 * @param {boolean=} opt_capture In DOM-compliant browsers, this determines
 *     whether the listener is fired during the capture or bubble phase
 *     of the event.
 * @param {Object=} opt_handlerScope Object in whose scope to call
 *     the listener.
 * @deprecated Use {@code #unlisten} instead, when possible. Otherwise, use
 *     {@code goog.events.unlisten} if you are passing Object
 *     (instead of Function) as handler.
 */
goog.events.EventTarget.prototype.removeEventListener = function(
    type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};


/** @override */
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();

  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (; ancestor; ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(
          (++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_),
          'infinite loop');
    }
  }

  return goog.events.EventTarget.dispatchEventInternal_(
      this.actualEventTarget_, e, ancestorsTree);
};


/**
 * Removes listeners from this object.  Classes that extend EventTarget may
 * need to override this method in order to remove references to DOM Elements
 * and additional listeners.
 * @override
 */
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);

  this.removeAllListeners();
  this.parentEventTarget_ = null;
};


/** @override */
goog.events.EventTarget.prototype.listen = function(
    type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(
      String(type), listener, false /* callOnce */, opt_useCapture,
      opt_listenerScope);
};


/** @override */
goog.events.EventTarget.prototype.listenOnce = function(
    type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(
      String(type), listener, true /* callOnce */, opt_useCapture,
      opt_listenerScope);
};


/** @override */
goog.events.EventTarget.prototype.unlisten = function(
    type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(
      String(type), listener, opt_useCapture, opt_listenerScope);
};


/** @override */
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};


/** @override */
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  // TODO(chrishenry): Previously, removeAllListeners can be called on
  // uninitialized EventTarget, so we preserve that behavior. We
  // should remove this when usages that rely on that fact are purged.
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};


/** @override */
goog.events.EventTarget.prototype.fireListeners = function(
    type, capture, eventObject) {
  // TODO(chrishenry): Original code avoids array creation when there
  // is no listener, so we do the same. If this optimization turns
  // out to be not required, we can replace this with
  // getListeners(type, capture) instead, which is simpler.
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();

  var rv = true;
  for (var i = 0; i < listenerArray.length; ++i) {
    var listener = listenerArray[i];
    // We might not have a listener if the listener was removed.
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;

      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }

  return rv && eventObject.returnValue_ != false;
};


/** @override */
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};


/** @override */
goog.events.EventTarget.prototype.getListener = function(
    type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(
      String(type), listener, capture, opt_listenerScope);
};


/** @override */
goog.events.EventTarget.prototype.hasListener = function(
    opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};


/**
 * Sets the target to be used for {@code event.target} when firing
 * event. Mainly used for testing. For example, see
 * {@code goog.testing.events.mixinListenable}.
 * @param {!Object} target The target.
 */
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};


/**
 * Asserts that the event target instance is initialized properly.
 * @private
 */
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(
      this.eventTargetListeners_,
      'Event target is not initialized. Did you call the superclass ' +
      '(goog.events.EventTarget) constructor?');
};


/**
 * Dispatches the given event on the ancestorsTree.
 *
 * @param {!Object} target The target to dispatch on.
 * @param {goog.events.Event|Object|string} e The event object.
 * @param {Array<goog.events.Listenable>=} opt_ancestorsTree The ancestors
 *     tree of the target, in reverse order from the closest ancestor
 *     to the root event target. May be null if the target has no ancestor.
 * @return {boolean} If anyone called preventDefault on the event object (or
 *     if any of the listeners returns false) this will also return false.
 * @private
 */
goog.events.EventTarget.dispatchEventInternal_ = function(
    target, e, opt_ancestorsTree) {
  var type = e.type || /** @type {string} */ (e);

  // If accepting a string or object, create a custom event object so that
  // preventDefault and stopPropagation work with the event.
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else if (!(e instanceof goog.events.Event)) {
    var oldEvent = e;
    e = new goog.events.Event(type, target);
    goog.object.extend(e, oldEvent);
  } else {
    e.target = e.target || target;
  }

  var rv = true, currentTarget;

  // Executes all capture listeners on the ancestors, if any.
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1; !e.propagationStopped_ && i >= 0;
         i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }

  // Executes capture and bubble listeners on the target.
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }

  // Executes all bubble listeners on the ancestors, if any.
  if (opt_ancestorsTree) {
    for (i = 0; !e.propagationStopped_ && i < opt_ancestorsTree.length; i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }

  return rv;
};

// Copyright 2008 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Generator for unique element IDs.
 *
 */

goog.provide('goog.ui.IdGenerator');



/**
 * Creates a new id generator.
 * @constructor
 * @final
 */
goog.ui.IdGenerator = function() {
};
goog.addSingletonGetter(goog.ui.IdGenerator);


/**
 * Next unique ID to use
 * @type {number}
 * @private
 */
goog.ui.IdGenerator.prototype.nextId_ = 0;


/**
 * Gets the next unique ID.
 * @return {string} The next unique identifier.
 */
goog.ui.IdGenerator.prototype.getNextUniqueId = function() {
  return ':' + (this.nextId_++).toString(36);
};

// Copyright 2007 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Abstract class for all UI components. This defines the standard
 * design pattern that all UI components should follow.
 *
 * @author attila@google.com (Attila Bodis)
 * @see ../demos/samplecomponent.html
 * @see http://code.google.com/p/closure-library/wiki/IntroToComponents
 */

goog.provide('goog.ui.Component');
goog.provide('goog.ui.Component.Error');
goog.provide('goog.ui.Component.EventType');
goog.provide('goog.ui.Component.State');

goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.dom.NodeType');
goog.require('goog.dom.TagName');
goog.require('goog.events.EventHandler');
goog.require('goog.events.EventTarget');
goog.require('goog.object');
goog.require('goog.style');
goog.require('goog.ui.IdGenerator');



/**
 * Default implementation of UI component.
 *
 * @param {goog.dom.DomHelper=} opt_domHelper Optional DOM helper.
 * @constructor
 * @extends {goog.events.EventTarget}
 */
goog.ui.Component = function(opt_domHelper) {
  goog.events.EventTarget.call(this);
  /**
   * DomHelper used to interact with the document, allowing components to be
   * created in a different window.
   * @protected {!goog.dom.DomHelper}
   * @suppress {underscore|visibility}
   */
  this.dom_ = opt_domHelper || goog.dom.getDomHelper();

  /**
   * Whether the component is rendered right-to-left.  Right-to-left is set
   * lazily when {@link #isRightToLeft} is called the first time, unless it has
   * been set by calling {@link #setRightToLeft} explicitly.
   * @private {?boolean}
   */
  this.rightToLeft_ = goog.ui.Component.defaultRightToLeft_;

  /**
   * Unique ID of the component, lazily initialized in {@link
   * goog.ui.Component#getId} if needed.  This property is strictly private and
   * must not be accessed directly outside of this class!
   * @private {?string}
   */
  this.id_ = null;

  /**
   * Whether the component is in the document.
   * @private {boolean}
   */
  this.inDocument_ = false;

  // TODO(attila): Stop referring to this private field in subclasses.
  /**
   * The DOM element for the component.
   * @private {Element}
   */
  this.element_ = null;

  /**
   * Event handler.
   * TODO(user): rename it to handler_ after all component subclasses in
   * inside Google have been cleaned up.
   * Code search: http://go/component_code_search
   * @private {goog.events.EventHandler|undefined}
   */
  this.googUiComponentHandler_ = void 0;

  /**
   * Arbitrary data object associated with the component.  Such as meta-data.
   * @private {*}
   */
  this.model_ = null;

  /**
   * Parent component to which events will be propagated.  This property is
   * strictly private and must not be accessed directly outside of this class!
   * @private {goog.ui.Component?}
   */
  this.parent_ = null;

  /**
   * Array of child components.  Lazily initialized on first use.  Must be kept
   * in sync with {@code childIndex_}.  This property is strictly private and
   * must not be accessed directly outside of this class!
   * @private {Array<goog.ui.Component>?}
   */
  this.children_ = null;

  /**
   * Map of child component IDs to child components.  Used for constant-time
   * random access to child components by ID.  Lazily initialized on first use.
   * Must be kept in sync with {@code children_}.  This property is strictly
   * private and must not be accessed directly outside of this class!
   *
   * We use a plain Object, not a {@link goog.structs.Map}, for simplicity.
   * This means components can't have children with IDs such as 'constructor' or
   * 'valueOf', but this shouldn't really be an issue in practice, and if it is,
   * we can always fix it later without changing the API.
   *
   * @private {Object}
   */
  this.childIndex_ = null;

  /**
   * Flag used to keep track of whether a component decorated an already
   * existing element or whether it created the DOM itself.
   *
   * If an element is decorated, dispose will leave the node in the document.
   * It is up to the app to remove the node.
   *
   * If an element was rendered, dispose will remove the node automatically.
   *
   * @private {boolean}
   */
  this.wasDecorated_ = false;
};
goog.inherits(goog.ui.Component, goog.events.EventTarget);


/**
 * @define {boolean} Whether to support calling decorate with an element that is
 *     not yet in the document. If true, we check if the element is in the
 *     document, and avoid calling enterDocument if it isn't. If false, we
 *     maintain legacy behavior (always call enterDocument from decorate).
 */
goog.define('goog.ui.Component.ALLOW_DETACHED_DECORATION', false);


/**
 * Generator for unique IDs.
 * @type {goog.ui.IdGenerator}
 * @private
 */
goog.ui.Component.prototype.idGenerator_ = goog.ui.IdGenerator.getInstance();


// TODO(gboyer): See if we can remove this and just check goog.i18n.bidi.IS_RTL.
/**
 * @define {number} Defines the default BIDI directionality.
 *     0: Unknown.
 *     1: Left-to-right.
 *     -1: Right-to-left.
 */
goog.define('goog.ui.Component.DEFAULT_BIDI_DIR', 0);


/**
 * The default right to left value.
 * @type {?boolean}
 * @private
 */
goog.ui.Component.defaultRightToLeft_ =
    (goog.ui.Component.DEFAULT_BIDI_DIR == 1) ? false :
    (goog.ui.Component.DEFAULT_BIDI_DIR == -1) ? true : null;


/**
 * Common events fired by components so that event propagation is useful.  Not
 * all components are expected to dispatch or listen for all event types.
 * Events dispatched before a state transition should be cancelable to prevent
 * the corresponding state change.
 * @enum {string}
 */
goog.ui.Component.EventType = {
  /** Dispatched before the component becomes visible. */
  BEFORE_SHOW: 'beforeshow',

  /**
   * Dispatched after the component becomes visible.
   * NOTE(user): For goog.ui.Container, this actually fires before containers
   * are shown.  Use goog.ui.Container.EventType.AFTER_SHOW if you want an event
   * that fires after a goog.ui.Container is shown.
   */
  SHOW: 'show',

  /** Dispatched before the component becomes hidden. */
  HIDE: 'hide',

  /** Dispatched before the component becomes disabled. */
  DISABLE: 'disable',

  /** Dispatched before the component becomes enabled. */
  ENABLE: 'enable',

  /** Dispatched before the component becomes highlighted. */
  HIGHLIGHT: 'highlight',

  /** Dispatched before the component becomes un-highlighted. */
  UNHIGHLIGHT: 'unhighlight',

  /** Dispatched before the component becomes activated. */
  ACTIVATE: 'activate',

  /** Dispatched before the component becomes deactivated. */
  DEACTIVATE: 'deactivate',

  /** Dispatched before the component becomes selected. */
  SELECT: 'select',

  /** Dispatched before the component becomes un-selected. */
  UNSELECT: 'unselect',

  /** Dispatched before a component becomes checked. */
  CHECK: 'check',

  /** Dispatched before a component becomes un-checked. */
  UNCHECK: 'uncheck',

  /** Dispatched before a component becomes focused. */
  FOCUS: 'focus',

  /** Dispatched before a component becomes blurred. */
  BLUR: 'blur',

  /** Dispatched before a component is opened (expanded). */
  OPEN: 'open',

  /** Dispatched before a component is closed (collapsed). */
  CLOSE: 'close',

  /** Dispatched after a component is moused over. */
  ENTER: 'enter',

  /** Dispatched after a component is moused out of. */
  LEAVE: 'leave',

  /** Dispatched after the user activates the component. */
  ACTION: 'action',

  /** Dispatched after the external-facing state of a component is changed. */
  CHANGE: 'change'
};


/**
 * Errors thrown by the component.
 * @enum {string}
 */
goog.ui.Component.Error = {
  /**
   * Error when a method is not supported.
   */
  NOT_SUPPORTED: 'Method not supported',

  /**
   * Error when the given element can not be decorated.
   */
  DECORATE_INVALID: 'Invalid element to decorate',

  /**
   * Error when the component is already rendered and another render attempt is
   * made.
   */
  ALREADY_RENDERED: 'Component already rendered',

  /**
   * Error when an attempt is made to set the parent of a component in a way
   * that would result in an inconsistent object graph.
   */
  PARENT_UNABLE_TO_BE_SET: 'Unable to set parent component',

  /**
   * Error when an attempt is made to add a child component at an out-of-bounds
   * index.  We don't support sparse child arrays.
   */
  CHILD_INDEX_OUT_OF_BOUNDS: 'Child component index out of bounds',

  /**
   * Error when an attempt is made to remove a child component from a component
   * other than its parent.
   */
  NOT_OUR_CHILD: 'Child is not in parent component',

  /**
   * Error when an operation requiring DOM interaction is made when the
   * component is not in the document
   */
  NOT_IN_DOCUMENT: 'Operation not supported while component is not in document',

  /**
   * Error when an invalid component state is encountered.
   */
  STATE_INVALID: 'Invalid component state'
};


/**
 * Common component states.  Components may have distinct appearance depending
 * on what state(s) apply to them.  Not all components are expected to support
 * all states.
 * @enum {number}
 */
goog.ui.Component.State = {
  /**
   * Union of all supported component states.
   */
  ALL: 0xFF,

  /**
   * Component is disabled.
   * @see goog.ui.Component.EventType.DISABLE
   * @see goog.ui.Component.EventType.ENABLE
   */
  DISABLED: 0x01,

  /**
   * Component is highlighted.
   * @see goog.ui.Component.EventType.HIGHLIGHT
   * @see goog.ui.Component.EventType.UNHIGHLIGHT
   */
  HOVER: 0x02,

  /**
   * Component is active (or "pressed").
   * @see goog.ui.Component.EventType.ACTIVATE
   * @see goog.ui.Component.EventType.DEACTIVATE
   */
  ACTIVE: 0x04,

  /**
   * Component is selected.
   * @see goog.ui.Component.EventType.SELECT
   * @see goog.ui.Component.EventType.UNSELECT
   */
  SELECTED: 0x08,

  /**
   * Component is checked.
   * @see goog.ui.Component.EventType.CHECK
   * @see goog.ui.Component.EventType.UNCHECK
   */
  CHECKED: 0x10,

  /**
   * Component has focus.
   * @see goog.ui.Component.EventType.FOCUS
   * @see goog.ui.Component.EventType.BLUR
   */
  FOCUSED: 0x20,

  /**
   * Component is opened (expanded).  Applies to tree nodes, menu buttons,
   * submenus, zippys (zippies?), etc.
   * @see goog.ui.Component.EventType.OPEN
   * @see goog.ui.Component.EventType.CLOSE
   */
  OPENED: 0x40
};


/**
 * Static helper method; returns the type of event components are expected to
 * dispatch when transitioning to or from the given state.
 * @param {goog.ui.Component.State} state State to/from which the component
 *     is transitioning.
 * @param {boolean} isEntering Whether the component is entering or leaving the
 *     state.
 * @return {goog.ui.Component.EventType} Event type to dispatch.
 */
goog.ui.Component.getStateTransitionEvent = function(state, isEntering) {
  switch (state) {
    case goog.ui.Component.State.DISABLED:
      return isEntering ? goog.ui.Component.EventType.DISABLE :
          goog.ui.Component.EventType.ENABLE;
    case goog.ui.Component.State.HOVER:
      return isEntering ? goog.ui.Component.EventType.HIGHLIGHT :
          goog.ui.Component.EventType.UNHIGHLIGHT;
    case goog.ui.Component.State.ACTIVE:
      return isEntering ? goog.ui.Component.EventType.ACTIVATE :
          goog.ui.Component.EventType.DEACTIVATE;
    case goog.ui.Component.State.SELECTED:
      return isEntering ? goog.ui.Component.EventType.SELECT :
          goog.ui.Component.EventType.UNSELECT;
    case goog.ui.Component.State.CHECKED:
      return isEntering ? goog.ui.Component.EventType.CHECK :
          goog.ui.Component.EventType.UNCHECK;
    case goog.ui.Component.State.FOCUSED:
      return isEntering ? goog.ui.Component.EventType.FOCUS :
          goog.ui.Component.EventType.BLUR;
    case goog.ui.Component.State.OPENED:
      return isEntering ? goog.ui.Component.EventType.OPEN :
          goog.ui.Component.EventType.CLOSE;
    default:
      // Fall through.
  }

  // Invalid state.
  throw Error(goog.ui.Component.Error.STATE_INVALID);
};


/**
 * Set the default right-to-left value. This causes all component's created from
 * this point foward to have the given value. This is useful for cases where
 * a given page is always in one directionality, avoiding unnecessary
 * right to left determinations.
 * @param {?boolean} rightToLeft Whether the components should be rendered
 *     right-to-left. Null iff components should determine their directionality.
 */
goog.ui.Component.setDefaultRightToLeft = function(rightToLeft) {
  goog.ui.Component.defaultRightToLeft_ = rightToLeft;
};


/**
 * Gets the unique ID for the instance of this component.  If the instance
 * doesn't already have an ID, generates one on the fly.
 * @return {string} Unique component ID.
 */
goog.ui.Component.prototype.getId = function() {
  return this.id_ || (this.id_ = this.idGenerator_.getNextUniqueId());
};


/**
 * Assigns an ID to this component instance.  It is the caller's responsibility
 * to guarantee that the ID is unique.  If the component is a child of a parent
 * component, then the parent component's child index is updated to reflect the
 * new ID; this may throw an error if the parent already has a child with an ID
 * that conflicts with the new ID.
 * @param {string} id Unique component ID.
 */
goog.ui.Component.prototype.setId = function(id) {
  if (this.parent_ && this.parent_.childIndex_) {
    // Update the parent's child index.
    goog.object.remove(this.parent_.childIndex_, this.id_);
    goog.object.add(this.parent_.childIndex_, id, this);
  }

  // Update the component ID.
  this.id_ = id;
};


/**
 * Gets the component's element.
 * @return {Element} The element for the component.
 */
goog.ui.Component.prototype.getElement = function() {
  return this.element_;
};


/**
 * Gets the component's element. This differs from getElement in that
 * it assumes that the element exists (i.e. the component has been
 * rendered/decorated) and will cause an assertion error otherwise (if
 * assertion is enabled).
 * @return {!Element} The element for the component.
 */
goog.ui.Component.prototype.getElementStrict = function() {
  var el = this.element_;
  goog.asserts.assert(
      el, 'Can not call getElementStrict before rendering/decorating.');
  return el;
};


/**
 * Sets the component's root element to the given element.  Considered
 * protected and final.
 *
 * This should generally only be called during createDom. Setting the element
 * does not actually change which element is rendered, only the element that is
 * associated with this UI component.
 *
 * This should only be used by subclasses and its associated renderers.
 *
 * @param {Element} element Root element for the component.
 */
goog.ui.Component.prototype.setElementInternal = function(element) {
  this.element_ = element;
};


/**
 * Returns an array of all the elements in this component's DOM with the
 * provided className.
 * @param {string} className The name of the class to look for.
 * @return {!goog.array.ArrayLike} The items found with the class name provided.
 */
goog.ui.Component.prototype.getElementsByClass = function(className) {
  return this.element_ ?
      this.dom_.getElementsByClass(className, this.element_) : [];
};


/**
 * Returns the first element in this component's DOM with the provided
 * className.
 * @param {string} className The name of the class to look for.
 * @return {Element} The first item with the class name provided.
 */
goog.ui.Component.prototype.getElementByClass = function(className) {
  return this.element_ ?
      this.dom_.getElementByClass(className, this.element_) : null;
};


/**
 * Similar to {@code getElementByClass} except that it expects the
 * element to be present in the dom thus returning a required value. Otherwise,
 * will assert.
 * @param {string} className The name of the class to look for.
 * @return {!Element} The first item with the class name provided.
 */
goog.ui.Component.prototype.getRequiredElementByClass = function(className) {
  var el = this.getElementByClass(className);
  goog.asserts.assert(el, 'Expected element in component with class: %s',
      className);
  return el;
};


/**
 * Returns the event handler for this component, lazily created the first time
 * this method is called.
 * @return {!goog.events.EventHandler<T>} Event handler for this component.
 * @protected
 * @this {T}
 * @template T
 */
goog.ui.Component.prototype.getHandler = function() {
  // TODO(user): templated "this" values currently result in "this" being
  // "unknown" in the body of the function.
  var self = /** @type {goog.ui.Component} */ (this);
  if (!self.googUiComponentHandler_) {
    self.googUiComponentHandler_ = new goog.events.EventHandler(self);
  }
  return self.googUiComponentHandler_;
};


/**
 * Sets the parent of this component to use for event bubbling.  Throws an error
 * if the component already has a parent or if an attempt is made to add a
 * component to itself as a child.  Callers must use {@code removeChild}
 * or {@code removeChildAt} to remove components from their containers before
 * calling this method.
 * @see goog.ui.Component#removeChild
 * @see goog.ui.Component#removeChildAt
 * @param {goog.ui.Component} parent The parent component.
 */
goog.ui.Component.prototype.setParent = function(parent) {
  if (this == parent) {
    // Attempting to add a child to itself is an error.
    throw Error(goog.ui.Component.Error.PARENT_UNABLE_TO_BE_SET);
  }

  if (parent && this.parent_ && this.id_ && this.parent_.getChild(this.id_) &&
      this.parent_ != parent) {
    // This component is already the child of some parent, so it should be
    // removed using removeChild/removeChildAt first.
    throw Error(goog.ui.Component.Error.PARENT_UNABLE_TO_BE_SET);
  }

  this.parent_ = parent;
  goog.ui.Component.superClass_.setParentEventTarget.call(this, parent);
};


/**
 * Returns the component's parent, if any.
 * @return {goog.ui.Component?} The parent component.
 */
goog.ui.Component.prototype.getParent = function() {
  return this.parent_;
};


/**
 * Overrides {@link goog.events.EventTarget#setParentEventTarget} to throw an
 * error if the parent component is set, and the argument is not the parent.
 * @override
 */
goog.ui.Component.prototype.setParentEventTarget = function(parent) {
  if (this.parent_ && this.parent_ != parent) {
    throw Error(goog.ui.Component.Error.NOT_SUPPORTED);
  }
  goog.ui.Component.superClass_.setParentEventTarget.call(this, parent);
};


/**
 * Returns the dom helper that is being used on this component.
 * @return {!goog.dom.DomHelper} The dom helper used on this component.
 */
goog.ui.Component.prototype.getDomHelper = function() {
  return this.dom_;
};


/**
 * Determines whether the component has been added to the document.
 * @return {boolean} TRUE if rendered. Otherwise, FALSE.
 */
goog.ui.Component.prototype.isInDocument = function() {
  return this.inDocument_;
};


/**
 * Creates the initial DOM representation for the component.  The default
 * implementation is to set this.element_ = div.
 */
goog.ui.Component.prototype.createDom = function() {
  this.element_ = this.dom_.createElement(goog.dom.TagName.DIV);
};


/**
 * Renders the component.  If a parent element is supplied, the component's
 * element will be appended to it.  If there is no optional parent element and
 * the element doesn't have a parentNode then it will be appended to the
 * document body.
 *
 * If this component has a parent component, and the parent component is
 * not in the document already, then this will not call {@code enterDocument}
 * on this component.
 *
 * Throws an Error if the component is already rendered.
 *
 * @param {Element=} opt_parentElement Optional parent element to render the
 *    component into.
 */
goog.ui.Component.prototype.render = function(opt_parentElement) {
  this.render_(opt_parentElement);
};


/**
 * Renders the component before another element. The other element should be in
 * the document already.
 *
 * Throws an Error if the component is already rendered.
 *
 * @param {Node} sibling Node to render the component before.
 */
goog.ui.Component.prototype.renderBefore = function(sibling) {
  this.render_(/** @type {Element} */ (sibling.parentNode),
               sibling);
};


/**
 * Renders the component.  If a parent element is supplied, the component's
 * element will be appended to it.  If there is no optional parent element and
 * the element doesn't have a parentNode then it will be appended to the
 * document body.
 *
 * If this component has a parent component, and the parent component is
 * not in the document already, then this will not call {@code enterDocument}
 * on this component.
 *
 * Throws an Error if the component is already rendered.
 *
 * @param {Element=} opt_parentElement Optional parent element to render the
 *    component into.
 * @param {Node=} opt_beforeNode Node before which the component is to
 *    be rendered.  If left out the node is appended to the parent element.
 * @private
 */
goog.ui.Component.prototype.render_ = function(opt_parentElement,
                                               opt_beforeNode) {
  if (this.inDocument_) {
    throw Error(goog.ui.Component.Error.ALREADY_RENDERED);
  }

  if (!this.element_) {
    this.createDom();
  }

  if (opt_parentElement) {
    opt_parentElement.insertBefore(this.element_, opt_beforeNode || null);
  } else {
    this.dom_.getDocument().body.appendChild(this.element_);
  }

  // If this component has a parent component that isn't in the document yet,
  // we don't call enterDocument() here.  Instead, when the parent component
  // enters the document, the enterDocument() call will propagate to its
  // children, including this one.  If the component doesn't have a parent
  // or if the parent is already in the document, we call enterDocument().
  if (!this.parent_ || this.parent_.isInDocument()) {
    this.enterDocument();
  }
};


/**
 * Decorates the element for the UI component. If the element is in the
 * document, the enterDocument method will be called.
 *
 * If goog.ui.Component.ALLOW_DETACHED_DECORATION is false, the caller must
 * pass an element that is in the document.
 *
 * @param {Element} element Element to decorate.
 */
goog.ui.Component.prototype.decorate = function(element) {
  if (this.inDocument_) {
    throw Error(goog.ui.Component.Error.ALREADY_RENDERED);
  } else if (element && this.canDecorate(element)) {
    this.wasDecorated_ = true;

    // Set the DOM helper of the component to match the decorated element.
    var doc = goog.dom.getOwnerDocument(element);
    if (!this.dom_ || this.dom_.getDocument() != doc) {
      this.dom_ = goog.dom.getDomHelper(element);
    }

    // Call specific component decorate logic.
    this.decorateInternal(element);

    // If supporting detached decoration, check that element is in doc.
    if (!goog.ui.Component.ALLOW_DETACHED_DECORATION ||
        goog.dom.contains(doc, element)) {
      this.enterDocument();
    }
  } else {
    throw Error(goog.ui.Component.Error.DECORATE_INVALID);
  }
};


/**
 * Determines if a given element can be decorated by this type of component.
 * This method should be overridden by inheriting objects.
 * @param {Element} element Element to decorate.
 * @return {boolean} True if the element can be decorated, false otherwise.
 */
goog.ui.Component.prototype.canDecorate = function(element) {
  return true;
};


/**
 * @return {boolean} Whether the component was decorated.
 */
goog.ui.Component.prototype.wasDecorated = function() {
  return this.wasDecorated_;
};


/**
 * Actually decorates the element. Should be overridden by inheriting objects.
 * This method can assume there are checks to ensure the component has not
 * already been rendered have occurred and that enter document will be called
 * afterwards. This method is considered protected.
 * @param {Element} element Element to decorate.
 * @protected
 */
goog.ui.Component.prototype.decorateInternal = function(element) {
  this.element_ = element;
};


/**
 * Called when the component's element is known to be in the document. Anything
 * using document.getElementById etc. should be done at this stage.
 *
 * If the component contains child components, this call is propagated to its
 * children.
 */
goog.ui.Component.prototype.enterDocument = function() {
  this.inDocument_ = true;

  // Propagate enterDocument to child components that have a DOM, if any.
  // If a child was decorated before entering the document (permitted when
  // goog.ui.Component.ALLOW_DETACHED_DECORATION is true), its enterDocument
  // will be called here.
  this.forEachChild(function(child) {
    if (!child.isInDocument() && child.getElement()) {
      child.enterDocument();
    }
  });
};


/**
 * Called by dispose to clean up the elements and listeners created by a
 * component, or by a parent component/application who has removed the
 * component from the document but wants to reuse it later.
 *
 * If the component contains child components, this call is propagated to its
 * children.
 *
 * It should be possible for the component to be rendered again once this method
 * has been called.
 */
goog.ui.Component.prototype.exitDocument = function() {
  // Propagate exitDocument to child components that have been rendered, if any.
  this.forEachChild(function(child) {
    if (child.isInDocument()) {
      child.exitDocument();
    }
  });

  if (this.googUiComponentHandler_) {
    this.googUiComponentHandler_.removeAll();
  }

  this.inDocument_ = false;
};


/**
 * Disposes of the component.  Calls {@code exitDocument}, which is expected to
 * remove event handlers and clean up the component.  Propagates the call to
 * the component's children, if any. Removes the component's DOM from the
 * document unless it was decorated.
 * @override
 * @protected
 */
goog.ui.Component.prototype.disposeInternal = function() {
  if (this.inDocument_) {
    this.exitDocument();
  }

  if (this.googUiComponentHandler_) {
    this.googUiComponentHandler_.dispose();
    delete this.googUiComponentHandler_;
  }

  // Disposes of the component's children, if any.
  this.forEachChild(function(child) {
    child.dispose();
  });

  // Detach the component's element from the DOM, unless it was decorated.
  if (!this.wasDecorated_ && this.element_) {
    goog.dom.removeNode(this.element_);
  }

  this.children_ = null;
  this.childIndex_ = null;
  this.element_ = null;
  this.model_ = null;
  this.parent_ = null;

  goog.ui.Component.superClass_.disposeInternal.call(this);
};


/**
 * Helper function for subclasses that gets a unique id for a given fragment,
 * this can be used by components to generate unique string ids for DOM
 * elements.
 * @param {string} idFragment A partial id.
 * @return {string} Unique element id.
 */
goog.ui.Component.prototype.makeId = function(idFragment) {
  return this.getId() + '.' + idFragment;
};


/**
 * Makes a collection of ids.  This is a convenience method for makeId.  The
 * object's values are the id fragments and the new values are the generated
 * ids.  The key will remain the same.
 * @param {Object} object The object that will be used to create the ids.
 * @return {!Object} An object of id keys to generated ids.
 */
goog.ui.Component.prototype.makeIds = function(object) {
  var ids = {};
  for (var key in object) {
    ids[key] = this.makeId(object[key]);
  }
  return ids;
};


/**
 * Returns the model associated with the UI component.
 * @return {*} The model.
 */
goog.ui.Component.prototype.getModel = function() {
  return this.model_;
};


/**
 * Sets the model associated with the UI component.
 * @param {*} obj The model.
 */
goog.ui.Component.prototype.setModel = function(obj) {
  this.model_ = obj;
};


/**
 * Helper function for returning the fragment portion of an id generated using
 * makeId().
 * @param {string} id Id generated with makeId().
 * @return {string} Fragment.
 */
goog.ui.Component.prototype.getFragmentFromId = function(id) {
  return id.substring(this.getId().length + 1);
};


/**
 * Helper function for returning an element in the document with a unique id
 * generated using makeId().
 * @param {string} idFragment The partial id.
 * @return {Element} The element with the unique id, or null if it cannot be
 *     found.
 */
goog.ui.Component.prototype.getElementByFragment = function(idFragment) {
  if (!this.inDocument_) {
    throw Error(goog.ui.Component.Error.NOT_IN_DOCUMENT);
  }
  return this.dom_.getElement(this.makeId(idFragment));
};


/**
 * Adds the specified component as the last child of this component.  See
 * {@link goog.ui.Component#addChildAt} for detailed semantics.
 *
 * @see goog.ui.Component#addChildAt
 * @param {goog.ui.Component} child The new child component.
 * @param {boolean=} opt_render If true, the child component will be rendered
 *    into the parent.
 */
goog.ui.Component.prototype.addChild = function(child, opt_render) {
  // TODO(gboyer): addChildAt(child, this.getChildCount(), false) will
  // reposition any already-rendered child to the end.  Instead, perhaps
  // addChild(child, false) should never reposition the child; instead, clients
  // that need the repositioning will use addChildAt explicitly.  Right now,
  // clients can get around this by calling addChild before calling decorate.
  this.addChildAt(child, this.getChildCount(), opt_render);
};


/**
 * Adds the specified component as a child of this component at the given
 * 0-based index.
 *
 * Both {@code addChild} and {@code addChildAt} assume the following contract
 * between parent and child components:
 *  <ul>
 *    <li>the child component's element must be a descendant of the parent
 *        component's element, and
 *    <li>the DOM state of the child component must be consistent with the DOM
 *        state of the parent component (see {@code isInDocument}) in the
 *        steady state -- the exception is to addChildAt(child, i, false) and
 *        then immediately decorate/render the child.
 *  </ul>
 *
 * In particular, {@code parent.addChild(child)} will throw an error if the
 * child component is already in the document, but the parent isn't.
 *
 * Clients of this API may call {@code addChild} and {@code addChildAt} with
 * {@code opt_render} set to true.  If {@code opt_render} is true, calling these
 * methods will automatically render the child component's element into the
 * parent component's element. If the parent does not yet have an element, then
 * {@code createDom} will automatically be invoked on the parent before
 * rendering the child.
 *
 * Invoking {@code parent.addChild(child, true)} will throw an error if the
 * child component is already in the document, regardless of the parent's DOM
 * state.
 *
 * If {@code opt_render} is true and the parent component is not already
 * in the document, {@code enterDocument} will not be called on this component
 * at this point.
 *
 * Finally, this method also throws an error if the new child already has a
 * different parent, or the given index is out of bounds.
 *
 * @see goog.ui.Component#addChild
 * @param {goog.ui.Component} child The new child component.
 * @param {number} index 0-based index at which the new child component is to be
 *    added; must be between 0 and the current child count (inclusive).
 * @param {boolean=} opt_render If true, the child component will be rendered
 *    into the parent.
 * @return {void} Nada.
 */
goog.ui.Component.prototype.addChildAt = function(child, index, opt_render) {
  goog.asserts.assert(!!child, 'Provided element must not be null.');

  if (child.inDocument_ && (opt_render || !this.inDocument_)) {
    // Adding a child that's already in the document is an error, except if the
    // parent is also in the document and opt_render is false (e.g. decorate()).
    throw Error(goog.ui.Component.Error.ALREADY_RENDERED);
  }

  if (index < 0 || index > this.getChildCount()) {
    // Allowing sparse child arrays would lead to strange behavior, so we don't.
    throw Error(goog.ui.Component.Error.CHILD_INDEX_OUT_OF_BOUNDS);
  }

  // Create the index and the child array on first use.
  if (!this.childIndex_ || !this.children_) {
    this.childIndex_ = {};
    this.children_ = [];
  }

  // Moving child within component, remove old reference.
  if (child.getParent() == this) {
    goog.object.set(this.childIndex_, child.getId(), child);
    goog.array.remove(this.children_, child);

  // Add the child to this component.  goog.object.add() throws an error if
  // a child with the same ID already exists.
  } else {
    goog.object.add(this.childIndex_, child.getId(), child);
  }

  // Set the parent of the child to this component.  This throws an error if
  // the child is already contained by another component.
  child.setParent(this);
  goog.array.insertAt(this.children_, child, index);

  if (child.inDocument_ && this.inDocument_ && child.getParent() == this) {
    // Changing the position of an existing child, move the DOM node (if
    // necessary).
    var contentElement = this.getContentElement();
    var insertBeforeElement = contentElement.childNodes[index] || null;
    if (insertBeforeElement != child.getElement()) {
      contentElement.insertBefore(child.getElement(), insertBeforeElement);
    }
  } else if (opt_render) {
    // If this (parent) component doesn't have a DOM yet, call createDom now
    // to make sure we render the child component's element into the correct
    // parent element (otherwise render_ with a null first argument would
    // render the child into the document body, which is almost certainly not
    // what we want).
    if (!this.element_) {
      this.createDom();
    }
    // Render the child into the parent at the appropriate location.  Note that
    // getChildAt(index + 1) returns undefined if inserting at the end.
    // TODO(attila): We should have a renderer with a renderChildAt API.
    var sibling = this.getChildAt(index + 1);
    // render_() calls enterDocument() if the parent is already in the document.
    child.render_(this.getContentElement(), sibling ? sibling.element_ : null);
  } else if (this.inDocument_ && !child.inDocument_ && child.element_ &&
      child.element_.parentNode &&
      // Under some circumstances, IE8 implicitly creates a Document Fragment
      // for detached nodes, so ensure the parent is an Element as it should be.
      child.element_.parentNode.nodeType == goog.dom.NodeType.ELEMENT) {
    // We don't touch the DOM, but if the parent is in the document, and the
    // child element is in the document but not marked as such, then we call
    // enterDocument on the child.
    // TODO(gboyer): It would be nice to move this condition entirely, but
    // there's a large risk of breaking existing applications that manually
    // append the child to the DOM and then call addChild.
    child.enterDocument();
  }
};


/**
 * Returns the DOM element into which child components are to be rendered,
 * or null if the component itself hasn't been rendered yet.  This default
 * implementation returns the component's root element.  Subclasses with
 * complex DOM structures must override this method.
 * @return {Element} Element to contain child elements (null if none).
 */
goog.ui.Component.prototype.getContentElement = function() {
  return this.element_;
};


/**
 * Returns true if the component is rendered right-to-left, false otherwise.
 * The first time this function is invoked, the right-to-left rendering property
 * is set if it has not been already.
 * @return {boolean} Whether the control is rendered right-to-left.
 */
goog.ui.Component.prototype.isRightToLeft = function() {
  if (this.rightToLeft_ == null) {
    this.rightToLeft_ = goog.style.isRightToLeft(this.inDocument_ ?
        this.element_ : this.dom_.getDocument().body);
  }
  return this.rightToLeft_;
};


/**
 * Set is right-to-left. This function should be used if the component needs
 * to know the rendering direction during dom creation (i.e. before
 * {@link #enterDocument} is called and is right-to-left is set).
 * @param {boolean} rightToLeft Whether the component is rendered
 *     right-to-left.
 */
goog.ui.Component.prototype.setRightToLeft = function(rightToLeft) {
  if (this.inDocument_) {
    throw Error(goog.ui.Component.Error.ALREADY_RENDERED);
  }
  this.rightToLeft_ = rightToLeft;
};


/**
 * Returns true if the component has children.
 * @return {boolean} True if the component has children.
 */
goog.ui.Component.prototype.hasChildren = function() {
  return !!this.children_ && this.children_.length != 0;
};


/**
 * Returns the number of children of this component.
 * @return {number} The number of children.
 */
goog.ui.Component.prototype.getChildCount = function() {
  return this.children_ ? this.children_.length : 0;
};


/**
 * Returns an array containing the IDs of the children of this component, or an
 * empty array if the component has no children.
 * @return {!Array<string>} Child component IDs.
 */
goog.ui.Component.prototype.getChildIds = function() {
  var ids = [];

  // We don't use goog.object.getKeys(this.childIndex_) because we want to
  // return the IDs in the correct order as determined by this.children_.
  this.forEachChild(function(child) {
    // addChild()/addChildAt() guarantee that the child array isn't sparse.
    ids.push(child.getId());
  });

  return ids;
};


/**
 * Returns the child with the given ID, or null if no such child exists.
 * @param {string} id Child component ID.
 * @return {goog.ui.Component?} The child with the given ID; null if none.
 */
goog.ui.Component.prototype.getChild = function(id) {
  // Use childIndex_ for O(1) access by ID.
  return (this.childIndex_ && id) ? /** @type {goog.ui.Component} */ (
      goog.object.get(this.childIndex_, id)) || null : null;
};


/**
 * Returns the child at the given index, or null if the index is out of bounds.
 * @param {number} index 0-based index.
 * @return {goog.ui.Component?} The child at the given index; null if none.
 */
goog.ui.Component.prototype.getChildAt = function(index) {
  // Use children_ for access by index.
  return this.children_ ? this.children_[index] || null : null;
};


/**
 * Calls the given function on each of this component's children in order.  If
 * {@code opt_obj} is provided, it will be used as the 'this' object in the
 * function when called.  The function should take two arguments:  the child
 * component and its 0-based index.  The return value is ignored.
 * @param {function(this:T,?,number):?} f The function to call for every
 * child component; should take 2 arguments (the child and its index).
 * @param {T=} opt_obj Used as the 'this' object in f when called.
 * @template T
 */
goog.ui.Component.prototype.forEachChild = function(f, opt_obj) {
  if (this.children_) {
    goog.array.forEach(this.children_, f, opt_obj);
  }
};


/**
 * Returns the 0-based index of the given child component, or -1 if no such
 * child is found.
 * @param {goog.ui.Component?} child The child component.
 * @return {number} 0-based index of the child component; -1 if not found.
 */
goog.ui.Component.prototype.indexOfChild = function(child) {
  return (this.children_ && child) ? goog.array.indexOf(this.children_, child) :
      -1;
};


/**
 * Removes the given child from this component, and returns it.  Throws an error
 * if the argument is invalid or if the specified child isn't found in the
 * parent component.  The argument can either be a string (interpreted as the
 * ID of the child component to remove) or the child component itself.
 *
 * If {@code opt_unrender} is true, calls {@link goog.ui.component#exitDocument}
 * on the removed child, and subsequently detaches the child's DOM from the
 * document.  Otherwise it is the caller's responsibility to clean up the child
 * component's DOM.
 *
 * @see goog.ui.Component#removeChildAt
 * @param {string|goog.ui.Component|null} child The ID of the child to remove,
 *    or the child component itself.
 * @param {boolean=} opt_unrender If true, calls {@code exitDocument} on the
 *    removed child component, and detaches its DOM from the document.
 * @return {goog.ui.Component} The removed component, if any.
 */
goog.ui.Component.prototype.removeChild = function(child, opt_unrender) {
  if (child) {
    // Normalize child to be the object and id to be the ID string.  This also
    // ensures that the child is really ours.
    var id = goog.isString(child) ? child : child.getId();
    child = this.getChild(id);

    if (id && child) {
      goog.object.remove(this.childIndex_, id);
      goog.array.remove(this.children_, child);

      if (opt_unrender) {
        // Remove the child component's DOM from the document.  We have to call
        // exitDocument first (see documentation).
        child.exitDocument();
        if (child.element_) {
          goog.dom.removeNode(child.element_);
        }
      }

      // Child's parent must be set to null after exitDocument is called
      // so that the child can unlisten to its parent if required.
      child.setParent(null);
    }
  }

  if (!child) {
    throw Error(goog.ui.Component.Error.NOT_OUR_CHILD);
  }

  return /** @type {!goog.ui.Component} */(child);
};


/**
 * Removes the child at the given index from this component, and returns it.
 * Throws an error if the argument is out of bounds, or if the specified child
 * isn't found in the parent.  See {@link goog.ui.Component#removeChild} for
 * detailed semantics.
 *
 * @see goog.ui.Component#removeChild
 * @param {number} index 0-based index of the child to remove.
 * @param {boolean=} opt_unrender If true, calls {@code exitDocument} on the
 *    removed child component, and detaches its DOM from the document.
 * @return {goog.ui.Component} The removed component, if any.
 */
goog.ui.Component.prototype.removeChildAt = function(index, opt_unrender) {
  // removeChild(null) will throw error.
  return this.removeChild(this.getChildAt(index), opt_unrender);
};


/**
 * Removes every child component attached to this one and returns them.
 *
 * @see goog.ui.Component#removeChild
 * @param {boolean=} opt_unrender If true, calls {@link #exitDocument} on the
 *    removed child components, and detaches their DOM from the document.
 * @return {!Array<goog.ui.Component>} The removed components if any.
 */
goog.ui.Component.prototype.removeChildren = function(opt_unrender) {
  var removedChildren = [];
  while (this.hasChildren()) {
    removedChildren.push(this.removeChildAt(0, opt_unrender));
  }
  return removedChildren;
};

// Copyright 2008 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Detects the specific browser and not just the rendering engine.
 *
 */

goog.provide('goog.userAgent.product');

goog.require('goog.labs.userAgent.browser');
goog.require('goog.labs.userAgent.platform');
goog.require('goog.userAgent');


/**
 * @define {boolean} Whether the code is running on the Firefox web browser.
 */
goog.define('goog.userAgent.product.ASSUME_FIREFOX', false);


/**
 * @define {boolean} Whether we know at compile-time that the product is an
 *     iPhone.
 */
goog.define('goog.userAgent.product.ASSUME_IPHONE', false);


/**
 * @define {boolean} Whether we know at compile-time that the product is an
 *     iPad.
 */
goog.define('goog.userAgent.product.ASSUME_IPAD', false);


/**
 * @define {boolean} Whether we know at compile-time that the product is an
 *     AOSP browser or WebView inside a pre KitKat Android phone or tablet.
 */
goog.define('goog.userAgent.product.ASSUME_ANDROID', false);


/**
 * @define {boolean} Whether the code is running on the Chrome web browser on
 * any platform or AOSP browser or WebView in a KitKat+ Android phone or tablet.
 */
goog.define('goog.userAgent.product.ASSUME_CHROME', false);


/**
 * @define {boolean} Whether the code is running on the Safari web browser.
 */
goog.define('goog.userAgent.product.ASSUME_SAFARI', false);


/**
 * Whether we know the product type at compile-time.
 * @type {boolean}
 * @private
 */
goog.userAgent.product.PRODUCT_KNOWN_ =
    goog.userAgent.ASSUME_IE ||
    goog.userAgent.ASSUME_OPERA ||
    goog.userAgent.product.ASSUME_FIREFOX ||
    goog.userAgent.product.ASSUME_IPHONE ||
    goog.userAgent.product.ASSUME_IPAD ||
    goog.userAgent.product.ASSUME_ANDROID ||
    goog.userAgent.product.ASSUME_CHROME ||
    goog.userAgent.product.ASSUME_SAFARI;


/**
 * Whether the code is running on the Opera web browser.
 * @type {boolean}
 */
goog.userAgent.product.OPERA = goog.userAgent.OPERA;


/**
 * Whether the code is running on an IE web browser.
 * @type {boolean}
 */
goog.userAgent.product.IE = goog.userAgent.IE;


/**
 * Whether the code is running on the Firefox web browser.
 * @type {boolean}
 */
goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ?
    goog.userAgent.product.ASSUME_FIREFOX :
    goog.labs.userAgent.browser.isFirefox();


/**
 * Whether the user agent is an iPhone or iPod (as in iPod touch).
 * @return {boolean}
 * @private
 */
goog.userAgent.product.isIphoneOrIpod_ = function() {
  return goog.labs.userAgent.platform.isIphone() ||
      goog.labs.userAgent.platform.isIpod();
};


/**
 * Whether the code is running on an iPhone or iPod touch.
 *
 * iPod touch is considered an iPhone for legacy reasons.
 * @type {boolean}
 */
goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ?
    goog.userAgent.product.ASSUME_IPHONE :
    goog.userAgent.product.isIphoneOrIpod_();


/**
 * Whether the code is running on an iPad.
 * @type {boolean}
 */
goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ?
    goog.userAgent.product.ASSUME_IPAD :
    goog.labs.userAgent.platform.isIpad();


/**
 * Whether the code is running on AOSP browser or WebView inside
 * a pre KitKat Android phone or tablet.
 * @type {boolean}
 */
goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ?
    goog.userAgent.product.ASSUME_ANDROID :
    goog.labs.userAgent.browser.isAndroidBrowser();


/**
 * Whether the code is running on the Chrome web browser on any platform
 * or AOSP browser or WebView in a KitKat+ Android phone or tablet.
 * @type {boolean}
 */
goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ?
    goog.userAgent.product.ASSUME_CHROME :
    goog.labs.userAgent.browser.isChrome();


/**
 * @return {boolean} Whether the browser is Safari on desktop.
 * @private
 */
goog.userAgent.product.isSafariDesktop_ = function() {
  return goog.labs.userAgent.browser.isSafari() &&
      !goog.labs.userAgent.platform.isIos();
};


/**
 * Whether the code is running on the desktop Safari web browser.
 * Note: the legacy behavior here is only true for Safari not running
 * on iOS.
 * @type {boolean}
 */
goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ?
    goog.userAgent.product.ASSUME_SAFARI :
    goog.userAgent.product.isSafariDesktop_();

// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('w69b.qr.ui.ContinuousScanner');
goog.require('goog.math.Size');
goog.require('goog.object');
goog.require('goog.string');
goog.require('goog.style');
goog.require('goog.ui.Component');
goog.require('goog.userAgent');
goog.require('goog.userAgent.product');
goog.require('w69b.LocalVideoCapturer');
goog.require('w69b.imgtools');
goog.require('w69b.qr.DecodeInWorkerHelper');
goog.require('w69b.qr.WorkerMessageType');
goog.require('w69b.qr.imagedecoding');

goog.scope(function() {
  var imgtools = w69b.imgtools;
  var Size = goog.math.Size;
  var WorkerMessageType = w69b.qr.WorkerMessageType;
  var object = goog.object;

  /**
   *
   * @param {number} x x pos.
   * @param {number} y y pos.
   * @param {number} size pattern size.
   * @constructor
   */
  w69b.qr.ui.PatternPoint = function(x, y, size) {
    this.x = x;
    this.y = y;
    this.size = size || 4;
    this.birthTime = new Date().getTime();
  };
  var PatternPoint = w69b.qr.ui.PatternPoint;
  // PatternPoint.prototype.
  /**
   * Component that shows visualization of continuous scanning.
   *
   * @constructor
   * @extends {goog.ui.Component}
   * @export
   */
  w69b.qr.ui.ContinuousScanner = function(options) {
    goog.base(this);
    var opt = {
      'webgl': true
    };
    object.extend(opt, options || {});
    this.capturer_ = new w69b.LocalVideoCapturer();
    this.worker_ = new w69b.qr.DecodeInWorkerHelper();
    this.worker_.enableWebGl(opt['webgl']);
    this.worker_.init();
    this.foundPatterns_ = [];
    this.lastFrameTime_ = null;
    /**
     * Size of visualization.
     * @type {Size}
     * @private
     */
    this.size_ = new Size(200, 200);
    /**
     * Size of decoding image.
     * @type {Size}
     * @private
     */
    this.decodeSize_ = new Size(200, 200);

    /**
     * We use a simple callback instead of events to be independend of
     * closure.
     * @private
     */
    this.decodedCallback_ = goog.nullFunction;
  };
  var ContinuousScanner = w69b.qr.ui.ContinuousScanner;
  goog.inherits(ContinuousScanner, goog.ui.Component);
  var pro = ContinuousScanner.prototype;

  /**
   * @return {boolean} if getUserMedia (and so contiuous scanning)
   * is supported.
   * @export
   */
  ContinuousScanner.isSupported = function() {
    // If api is not pressent it's clearly not supported.
    if (!w69b.LocalVideoCapturer.getMedia)
      return false;
    // But feature detection does not work as browsers lie about their
    // capabilities, so sniff versions and blacklist some.
    // It is supported for Chrome >= 21, Opera => 12, FF >= 20, FFOS 1.4
    // (FF mobile 30)
    var ua = goog.userAgent.getUserAgentString() || '';
    var match = /Chrome\/(\d+)/.exec(ua);
    if (match && match[1] < 21)
      return false;
    match = /Firefox\/(\d+)/.exec(ua);
    if (match && (match[1] < 20 ||
      (match[1] < 29 && (
        goog.string.contains(ua, 'Mobile') ||
        goog.string.contains(ua, 'Android') ||
        goog.string.contains(ua, 'iPhone') ||
        goog.string.contains(ua, 'iPad')
      )))) {
      return false;
    }
    return true;
  };

  /**
   * Canvas element used for visualization.
   * @type {HTMLCanvasElement}
   * @private
   */
  pro.visualizationCanvas_ = null;

  /**
   * Rendering context of visualization canvas.
   * @type {CanvasRenderingContext2D}
   * @private
   */
  pro.visualizationContext_ = null;

  /**
   * Tuples of found pattern positions.
   * @type {Array.<PatternPoint>}
   * @private
   */
  pro.foundPatterns_ = null;

  /**
   * Whether decoder is currently decoding.
   * @type {boolean}
   * @private
   */
  pro.isDecoding_ = false;

  /**
   * Max resolution (max dimension) used for visualization. Allows to reduce
   * resolution to hopefully get a higher performance. If set to 0, the full
   * element size is used.
   * @private
   * @type {number}
   */
  pro.maxVisualizationResolution_ = 0;

  /**
   * Maximal resolution used for decoding. If set to 0, visualization
   * resolution is used.
   * @type {number}
   * @private
   */
  pro.maxDecodeResolution_ = 500;

  /**
   * Maximal age (in ms) of pattern visualization dots.
   * resolution is used.
   * @type {number}
   * @private
   */
  pro.maxPatternAge_ = 500;

  /**
   * @type {number}
   * @private
   */
  pro.animFrameRequestId_ = 0;

  /**
   * @type {number}
   * @private
   */
  pro.timerRequestId_ = 0;

  /**
   *
   * @type {boolean}
   * @private
   */
  pro.stopped_ = false;

  /**
   * Set callback that is called when a text was decoded.
   * @param {function(string)} callback function that takes the decoded
   * string as argument.
   * @export
   */
  pro.setDecodedCallback = function(callback) {
    this.decodedCallback_ = callback;
  };

  /**
   * @param {number} width visualization width.
   * @param {number} height visualization height.
   */
  pro.setSize = function(width, height) {
    this.size_.width = width;
    this.size_.height = height;
    this.decodeSize_ = this.size_.clone();
    this.ensureMaxResolutions_();
  };

  /**
   * Set size from clientWidth/Height.
   * @export
   */
  pro.updateSizeFromClient = function() {
    var ratio = window['devicePixelRatio'] || 1;
    // dont do this for performance reasons for now.
    ratio = 1;
    var el = this.getElement();
    this.size_.width = el.clientWidth * ratio;
    this.size_.height = el.clientHeight * ratio;
    this.decodeSize_ = this.size_.clone();
    this.ensureMaxResolutions_();
  };

  /**
   * Max resolution (max dimension) used for visualization. Allows to reduce
   * resolution to hopefully get a higher performance. If set to 0, the full
   * element size is used.
   * @param {number} pixel resolution.
   * @export
   */
  pro.setMaxVisualizationResolution = function(pixel) {
    this.maxVisualizationResolution_ = pixel;
    this.ensureMaxResolutions_();
  };

  /**
   * Maximal resolution used for decoding. If set to 0, visualization
   * resolution is used.
   * @param {number} pixel resolution.
   * @export
   */
  pro.setMaxDecodingResolution = function(pixel) {
    this.maxDecodeResolution_ = pixel;
    this.ensureMaxResolutions_();
  };

  /**
   * When component is stopped no more screen updates are drawn and no more
   * decoding happens.
   * It does not stop the video stream (use dispose() for that). So you can use this for
   * pausing/resuming scanning.
   * @param {boolean} stopped state.
   * @export
   */
  pro.setStopped = function(stopped) {
    stopped = !!stopped;
    var wasStopped = this.stopped_;
    if (stopped == wasStopped)
      return;
    this.stopped_ = stopped;
    if (!stopped) {
      this.scheduleNextFrame();
    } else {
    }
  };

  /**
   * @override
   */
  pro.createDom = function() {
    var dom = this.getDomHelper();
    this.visualizationCanvas_ = /** @type {HTMLCanvasElement} */ (
      dom.createDom('canvas'));
    goog.style.setStyle(this.visualizationCanvas_, {'width': '100%', 'height': '100%'});
    this.visualizationContext_ = /** @type {CanvasRenderingContext2D} */ (
      this.visualizationCanvas_.getContext('2d'));
    // We currently just render the canvas.
    this.setElementInternal(this.visualizationCanvas_);
    this.capturer_.start(this.onAnimationFrame.bind(this));
  };

  pro.onAnimationFrame = function() {
    if (this.stopped_)
      return;
    this.drawVisualization_();
    this.lastFrameTime_ = new Date().getTime();
    // This draws the result of the last frame on the current frame which
    // is nasty but as we have sent the last image to the worker, we
    // cannot draw it anymore without copying (at least in FF).

    if (!this.isDecoding_) {
      this.worker_.decode(
        /** @type {!HTMLVideoElement} */ (this.capturer_.getVideo()),
        /** @type {!goog.math.Size} */ (this.decodeSize_),
        this.onDecodeMessage_.bind(this));
      this.isDecoding_ = true;
    }
    this.scheduleNextFrame();
  };

  /**
   * Scales size if larger than max resolution.
   * @private
   */
  pro.ensureMaxResolutions_ = function() {
    if (this.maxVisualizationResolution_)
      imgtools.scaleIfLarger(this.size_, this.maxVisualizationResolution_);
    if (this.maxDecodeResolution_)
      imgtools.scaleIfLarger(this.decodeSize_, this.maxDecodeResolution_);

  };
  /**
   * Draws visualization of scanning to canvas.
   * @private
   */
  pro.drawVisualization_ = function() {
    var size = this.size_;
    var canvas = this.visualizationCanvas_;
    // Rescale canvas if needed.
    if (canvas.width != size.width || canvas.height != size.height) {
      canvas.width = size.width;
      canvas.height = size.height;
    }

    var context = this.visualizationContext_;
    this.capturer_.drawOnCanvas(canvas, context);
    // context.fillStyle = 'rgb(200,0,0)';
    // context.fillText(this.lastResult_, 10, 10);
    var scale = this.size_.width / this.decodeSize_.width;
    var maxAge = this.maxPatternAge_;
    var now = new Date().getTime();
    for (var i = 0; i < this.foundPatterns_.length; ++i) {
      var pattern = this.foundPatterns_[i];
      var age = now - pattern.birthTime;
      if (age >= maxAge)
        continue;
      var alpha = (maxAge - age) / maxAge;
      var x = pattern.x * scale;
      var y = pattern.y * scale;
      var radius = pattern.size * scale * alpha;
      context.fillStyle = 'rgba(200,255,50,' + alpha + ')';
      context.beginPath();
      context.arc(x, y, radius, 0, 2 * Math.PI, false);
      context.fill();
    }
  };

  /**
   * Request animation frame.
   */
  pro.scheduleNextFrame = function() {
    var animFrame = (window.requestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.oRequestAnimationFrame);
    if (animFrame) {
      this.animFrameRequestId_ = animFrame.call(
        window, this.onAnimationFrame.bind(this));
    } else {
      var timeSinceLastFrame = new Date().getTime() - this.lastFrameTime_;
      var waitTime = 0;
      // Draw at 25 fps max
      if (timeSinceLastFrame < 40) {
        waitTime = 40 - timeSinceLastFrame;
      }
      this.timerRequestId_ = window.setTimeout(
        this.onAnimationFrame.bind(this), waitTime);
    }
  };

  /**
   * Decoded message from worker.
   * @private
   * @param {string} type from worker.
   * @param {*=} value from worker.
   */
  pro.onDecodeMessage_ = function(type, value) {
    if (this.stopped_) {
      // don't dispatch pending decoding events when stopped.
      this.isDecoding_ = false;
      return;
    }
    switch (type) {
      case WorkerMessageType.DECODED:
        // this.lastResult_ = value['text'];
        // this.foundPatterns_ = [];
        value['patterns'].forEach(this.addPattern_, this);
        this.onDecoded(value['text']);
        this.isDecoding_ = false;
        break;
      case WorkerMessageType.NOTFOUND:
        this.isDecoding_ = false;
        break;
      case WorkerMessageType.PATTERN:
        this.addPattern_(value);
        break;
    }
  };

  /**
   * Found and decoded qr code.
   * @param {string} text decoded text.
   */
  pro.onDecoded = function(text) {
    this.decodedCallback_(text);
  };

  /**
   * @private
   */
  pro.addPattern_ = function(pattern) {
    this.foundPatterns_.unshift(new PatternPoint(pattern['x'], pattern['y'],
      pattern['size']));
    var max = 10;
    this.foundPatterns_.splice(max - 1, this.foundPatterns_.length - max);
  };

  /**
   * @override
   */
  pro.enterDocument = function() {
    goog.base(this, 'enterDocument');
    this.updateSizeFromClient();
    this.getHandler().listen(window, goog.events.EventType.RESIZE,
      this.updateSizeFromClient);
    this.getHandler().listen(window, 'orientationchange',
      this.updateSizeFromClient);
  };

  /**
   * @override
   */
  pro.disposeInternal = function() {
    goog.base(this, 'disposeInternal');
    this.stopped_ = true;
    this.capturer_.dispose();
    this.worker_.dispose();
    if (this.animFrameRequestId_) {
      var cancel = (window.cancelAnimationFrame ||
      window.mozCancelRequestAnimationFrame ||
      window.oCancelRequestAnimationFrame);
      if (cancel)
        cancel.call(window, this.animFrameRequestId_);
    }
    if (this.timerRequestId_) {
      window.clearTimeout(this.timerRequestId_);
    }
  };


  // exports
  goog.exportSymbol('w69b.qr.ui.ContinuousScanner.prototype.render', pro.render);
  goog.exportSymbol('w69b.qr.ui.ContinuousScanner.prototype.dispose', pro.dispose);
});



// (c) 2013 Manuel Braun (mb@w69b.com)
goog.provide('main');
goog.require('w69b.FileSaver');
goog.require('w69b.LocalVideoCapturer');  // no compiled exports, debug only
goog.require('w69b.img.WebGLBinarizer');  // no compiled exports, debug only
goog.require('w69b.qr.decoding');
goog.require('w69b.qr.encoding');
goog.require('w69b.qr.licenses');
goog.require('w69b.qr.ui.ContinuousScanner');

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2UuanMiLCJpZGlzcG9zYWJsZS5qcyIsImRpc3Bvc2FibGUuanMiLCJmaWxlc2F2ZXIuanMiLCJlcnJvci5qcyIsIm5vZGV0eXBlLmpzIiwic3RyaW5nLmpzIiwiYXNzZXJ0cy5qcyIsImVudHJ5cG9pbnRyZWdpc3RyeS5qcyIsImFycmF5LmpzIiwidXRpbC5qcyIsIm9iamVjdC5qcyIsImJyb3dzZXIuanMiLCJlbmdpbmUuanMiLCJwbGF0Zm9ybS5qcyIsInVzZXJhZ2VudC5qcyIsImJyb3dzZXJmZWF0dXJlLmpzIiwiZXZlbnRpZC5qcyIsImV2ZW50LmpzIiwiZXZlbnR0eXBlLmpzIiwicmVmbGVjdC5qcyIsImJyb3dzZXJldmVudC5qcyIsImxpc3RlbmFibGUuanMiLCJsaXN0ZW5lci5qcyIsImxpc3RlbmVybWFwLmpzIiwiZXZlbnRzLmpzIiwic2l6ZS5qcyIsImNyeXB0LmpzIiwiYmFzZTY0LmpzIiwiaW1ndG9vbHMuanMiLCJsb2NhbHZpZGVvY2FwdHVyZXIuanMiLCJiaXRtYXRyaXhsaWtlLmpzIiwicmdiYWJpdG1hdHJpeC5qcyIsImltYWdlZGF0YS5qcyIsIndlYmdscGFyYW1zLmpzIiwid2ViZ2xwaXBlbGluZS5qcyIsImNvbXBpbGVkLmpzIiwid2ViZ2xwcm9ncmFtLmpzIiwid2ViZ2xmaWx0ZXIuanMiLCJ3ZWJnbGJpbmFyaXplci5qcyIsInRoZW5hYmxlLmpzIiwiZnJlZWxpc3QuanMiLCJ3b3JrcXVldWUuanMiLCJ0YWduYW1lLmpzIiwiZnVuY3Rpb25zLmpzIiwibmV4dHRpY2suanMiLCJ3YXRjaGVycy5qcyIsInJ1bi5qcyIsInJlc29sdmVyLmpzIiwicHJvbWlzZS5qcyIsImRlZmVycmVkLmpzIiwidGFncy5qcyIsInR5cGVkc3RyaW5nLmpzIiwiY29uc3QuanMiLCJzYWZlc3R5bGUuanMiLCJzYWZlc3R5bGVzaGVldC5qcyIsInVybC5qcyIsImJpZGkuanMiLCJzYWZldXJsLmpzIiwidHJ1c3RlZHJlc291cmNldXJsLmpzIiwic2FmZWh0bWwuanMiLCJzYWZlLmpzIiwibWF0aC5qcyIsImNvb3JkaW5hdGUuanMiLCJkb20uanMiLCJqc2xvYWRlci5qcyIsInBhdGguanMiLCJyZWFkZXJlcnJvci5qcyIsIndvcmtlcm1lc3NhZ2V0eXBlLmpzIiwiZGVjb2RlcmVzdWx0LmpzIiwicmVzdWx0cG9pbnQuanMiLCJhbGlnbm1lbnRwYXR0ZXJuLmpzIiwiYWxpZ25tZW50cGF0dGVybmZpbmRlci5qcyIsImJpdG1hdHJpeC5qcyIsImdyaWRzYW1wbGVyLmpzIiwicGVyc3BlY3RpdmV0cmFuc2Zvcm0uanMiLCJkZWZhdWx0Z3JpZHNhbXBsZXIuanMiLCJkZWNvZGVoaW50dHlwZS5qcyIsImZpbmRlcnBhdHRlcm4uanMiLCJxcmltYWdlLmpzIiwiZmluZGVycGF0dGVybmZpbmRlci5qcyIsIm1hdGh1dGlscy5qcyIsInZlcnNpb24uanMiLCJkZXRlY3Rvci5qcyIsImVycm9yY29ycmVjdGlvbmxldmVsLmpzIiwiZm9ybWF0aW5mb3JtYXRpb24uanMiLCJkYXRhbWFzay5qcyIsImJpdG1hdHJpeHBhcnNlci5qcyIsImRhdGFibG9jay5qcyIsInN0cmluZ2J1ZmZlci5qcyIsImJpdHNvdXJjZS5qcyIsImNoYXJhY3RlcnNldGVjaS5qcyIsIm1vZGUuanMiLCJ1dGY4LmpzIiwiaWNvbnZsaXRlLmpzIiwic3RyaW5ndXRpbHMuanMiLCJkZWNvZGVkYml0c3RyZWFtcGFyc2VyLmpzIiwiZ2YyNTZwb2x5LmpzIiwiZ2YyNTYuanMiLCJyZWVkc29sb21vbmRlY29kZXIuanMiLCJkZWNvZGVyLmpzIiwiYml0YXJyYXkuanMiLCJlbmNvZGVoaW50dHlwZS5qcyIsInJlZWRzb2xvbW9uZW5jb2Rlci5qcyIsIkJsb2NrUGFpci5qcyIsIkJ5dGVNYXRyaXguanMiLCJNYXNrVXRpbC5qcyIsIndyaXRlcmVycm9yLmpzIiwiUVJDb2RlLmpzIiwiTWF0cml4VXRpbC5qcyIsIkVuY29kZXIuanMiLCJiaW5hcml6ZXIuanMiLCJnbG9iYWxoaXN0b2dyYW1iaW5hcml6ZXIuanMiLCJpbnRhcnJheTJkLmpzIiwiaHlicmlkYmluYXJpemVyLmpzIiwibmF0aXZlcHJlcHJvY2Vzc2luZy5qcyIsImltYWdlZGVjb2RpbmcuanMiLCJkZWNvZGVpbndvcmtlcmhlbHBlci5qcyIsImRlY29kaW5nLmpzIiwiZHJhd2FibGUuanMiLCJjYW52YXNkcmF3YWJsZS5qcyIsImVwc2RyYXdhYmxlLmpzIiwic3ZnZHJhd2FibGUuanMiLCJyZW5kZXJlci5qcyIsImVuY29kaW5nLmpzIiwibGljZW5zZXMuanMiLCJ2ZW5kb3IuanMiLCJib3guanMiLCJyZWN0LmpzIiwic3R5bGUuanMiLCJldmVudGhhbmRsZXIuanMiLCJldmVudHRhcmdldC5qcyIsImlkZ2VuZXJhdG9yLmpzIiwiY29tcG9uZW50LmpzIiwicHJvZHVjdC5qcyIsImNvbnRpbnVvdXNzY2FubmVyLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaDlFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDblRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDN0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN6aERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzdXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM5SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3RuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3BKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM5cUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3JWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDNWpCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDckZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMvSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM3T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDN0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL1VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNwVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4OUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25PQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDNUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNqU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN0TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzVGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDMVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN2SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMvUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3RUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDeEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMzSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDalBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzNJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3QwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBbENsN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FtQ3hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMxYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNwUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzdHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM1NEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3J2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDM1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNuY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzVRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQy82RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbFJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3hKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNuTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3hJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaHdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM1WUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4WkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMxRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25LQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbk5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDOVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM1V0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4VEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM1R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2xPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNsR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDM1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNyR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNyTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzVpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3BuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMvR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDek9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL1FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNwUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQy9IQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN0RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM1ZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNyL0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDMVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2x4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQy9LQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNqY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJ3NjliLnFyY29kZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDA2IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQm9vdHN0cmFwIGZvciB0aGUgR29vZ2xlIEpTIExpYnJhcnkgKENsb3N1cmUpLlxuICpcbiAqIEluIHVuY29tcGlsZWQgbW9kZSBiYXNlLmpzIHdpbGwgd3JpdGUgb3V0IENsb3N1cmUncyBkZXBzIGZpbGUsIHVubGVzcyB0aGVcbiAqIGdsb2JhbCA8Y29kZT5DTE9TVVJFX05PX0RFUFM8L2NvZGU+IGlzIHNldCB0byB0cnVlLiAgVGhpcyBhbGxvd3MgcHJvamVjdHMgdG9cbiAqIGluY2x1ZGUgdGhlaXIgb3duIGRlcHMgZmlsZShzKSBmcm9tIGRpZmZlcmVudCBsb2NhdGlvbnMuXG4gKlxuICogQGF1dGhvciBhcnZAZ29vZ2xlLmNvbSAoRXJpayBBcnZpZHNzb24pXG4gKlxuICogQHByb3ZpZGVHb29nXG4gKi9cblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IE92ZXJyaWRkZW4gdG8gdHJ1ZSBieSB0aGUgY29tcGlsZXIgd2hlblxuICogICAgIC0tcHJvY2Vzc19jbG9zdXJlX3ByaW1pdGl2ZXMgaXMgc3BlY2lmaWVkLlxuICovXG52YXIgQ09NUElMRUQgPSBmYWxzZTtcblxuXG4vKipcbiAqIEJhc2UgbmFtZXNwYWNlIGZvciB0aGUgQ2xvc3VyZSBsaWJyYXJ5LiAgQ2hlY2tzIHRvIHNlZSBnb29nIGlzIGFscmVhZHlcbiAqIGRlZmluZWQgaW4gdGhlIGN1cnJlbnQgc2NvcGUgYmVmb3JlIGFzc2lnbmluZyB0byBwcmV2ZW50IGNsb2JiZXJpbmcgaWZcbiAqIGJhc2UuanMgaXMgbG9hZGVkIG1vcmUgdGhhbiBvbmNlLlxuICpcbiAqIEBjb25zdFxuICovXG52YXIgZ29vZyA9IGdvb2cgfHwge307XG5cblxuLyoqXG4gKiBSZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBjb250ZXh0LiAgSW4gbW9zdCBjYXNlcyB0aGlzIHdpbGwgYmUgJ3dpbmRvdycuXG4gKi9cbmdvb2cuZ2xvYmFsID0gdGhpcztcblxuXG4vKipcbiAqIEEgaG9vayBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmaW5lIHZhbHVlcyBpbiB1bmNvbXBpbGVkIG1vZGUuXG4gKlxuICogSW4gdW5jb21waWxlZCBtb2RlLCB7QGNvZGUgQ0xPU1VSRV9VTkNPTVBJTEVEX0RFRklORVN9IG1heSBiZSBkZWZpbmVkIGJlZm9yZVxuICogbG9hZGluZyBiYXNlLmpzLiAgSWYgYSBrZXkgaXMgZGVmaW5lZCBpbiB7QGNvZGUgQ0xPU1VSRV9VTkNPTVBJTEVEX0RFRklORVN9LFxuICoge0Bjb2RlIGdvb2cuZGVmaW5lfSB3aWxsIHVzZSB0aGUgdmFsdWUgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCB2YWx1ZS4gIFRoaXNcbiAqIGFsbG93cyBmbGFncyB0byBiZSBvdmVyd3JpdHRlbiB3aXRob3V0IGNvbXBpbGF0aW9uICh0aGlzIGlzIG5vcm1hbGx5XG4gKiBhY2NvbXBsaXNoZWQgd2l0aCB0aGUgY29tcGlsZXIncyBcImRlZmluZVwiIGZsYWcpLlxuICpcbiAqIEV4YW1wbGU6XG4gKiA8cHJlPlxuICogICB2YXIgQ0xPU1VSRV9VTkNPTVBJTEVEX0RFRklORVMgPSB7J2dvb2cuREVCVUcnOiBmYWxzZX07XG4gKiA8L3ByZT5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0PHN0cmluZywgKHN0cmluZ3xudW1iZXJ8Ym9vbGVhbik+fHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5nbG9iYWwuQ0xPU1VSRV9VTkNPTVBJTEVEX0RFRklORVM7XG5cblxuLyoqXG4gKiBBIGhvb2sgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmluZSB2YWx1ZXMgaW4gdW5jb21waWxlZCBvciBjb21waWxlZCBtb2RlLFxuICogbGlrZSBDTE9TVVJFX1VOQ09NUElMRURfREVGSU5FUyBidXQgZWZmZWN0aXZlIGluIGNvbXBpbGVkIGNvZGUuICBJblxuICogdW5jb21waWxlZCBjb2RlIENMT1NVUkVfVU5DT01QSUxFRF9ERUZJTkVTIHRha2VzIHByZWNlZGVuY2UuXG4gKlxuICogQWxzbyB1bmxpa2UgQ0xPU1VSRV9VTkNPTVBJTEVEX0RFRklORVMgdGhlIHZhbHVlcyBtdXN0IGJlIG51bWJlciwgYm9vbGVhbiBvclxuICogc3RyaW5nIGxpdGVyYWxzIG9yIHRoZSBjb21waWxlciB3aWxsIGVtaXQgYW4gZXJyb3IuXG4gKlxuICogV2hpbGUgYW55IEBkZWZpbmUgdmFsdWUgbWF5IGJlIHNldCwgb25seSB0aG9zZSBzZXQgd2l0aCBnb29nLmRlZmluZSB3aWxsIGJlXG4gKiBlZmZlY3RpdmUgZm9yIHVuY29tcGlsZWQgY29kZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogPHByZT5cbiAqICAgdmFyIENMT1NVUkVfREVGSU5FUyA9IHsnZ29vZy5ERUJVRyc6IGZhbHNlfSA7XG4gKiA8L3ByZT5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0PHN0cmluZywgKHN0cmluZ3xudW1iZXJ8Ym9vbGVhbik+fHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5nbG9iYWwuQ0xPU1VSRV9ERUZJTkVTO1xuXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgbm90IHVuZGVmaW5lZC5cbiAqIFdBUk5JTkc6IERvIG5vdCB1c2UgdGhpcyB0byB0ZXN0IGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gVXNlIHRoZSBpblxuICogb3BlcmF0b3IgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBkZWZpbmVkLlxuICovXG5nb29nLmlzRGVmID0gZnVuY3Rpb24odmFsKSB7XG4gIC8vIHZvaWQgMCBhbHdheXMgZXZhbHVhdGVzIHRvIHVuZGVmaW5lZCBhbmQgaGVuY2Ugd2UgZG8gbm90IG5lZWQgdG8gZGVwZW5kIG9uXG4gIC8vIHRoZSBkZWZpbml0aW9uIG9mIHRoZSBnbG9iYWwgdmFyaWFibGUgbmFtZWQgJ3VuZGVmaW5lZCcuXG4gIHJldHVybiB2YWwgIT09IHZvaWQgMDtcbn07XG5cblxuLyoqXG4gKiBCdWlsZHMgYW4gb2JqZWN0IHN0cnVjdHVyZSBmb3IgdGhlIHByb3ZpZGVkIG5hbWVzcGFjZSBwYXRoLCBlbnN1cmluZyB0aGF0XG4gKiBuYW1lcyB0aGF0IGFscmVhZHkgZXhpc3QgYXJlIG5vdCBvdmVyd3JpdHRlbi4gRm9yIGV4YW1wbGU6XG4gKiBcImEuYi5jXCIgLT4gYSA9IHt9O2EuYj17fTthLmIuYz17fTtcbiAqIFVzZWQgYnkgZ29vZy5wcm92aWRlIGFuZCBnb29nLmV4cG9ydFN5bWJvbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIG9iamVjdCB0aGF0IHRoaXMgZmlsZSBkZWZpbmVzLlxuICogQHBhcmFtIHsqPX0gb3B0X29iamVjdCB0aGUgb2JqZWN0IHRvIGV4cG9zZSBhdCB0aGUgZW5kIG9mIHRoZSBwYXRoLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfb2JqZWN0VG9FeHBvcnRUbyBUaGUgb2JqZWN0IHRvIGFkZCB0aGUgcGF0aCB0bzsgZGVmYXVsdFxuICogICAgIGlzIHxnb29nLmdsb2JhbHwuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV4cG9ydFBhdGhfID0gZnVuY3Rpb24obmFtZSwgb3B0X29iamVjdCwgb3B0X29iamVjdFRvRXhwb3J0VG8pIHtcbiAgdmFyIHBhcnRzID0gbmFtZS5zcGxpdCgnLicpO1xuICB2YXIgY3VyID0gb3B0X29iamVjdFRvRXhwb3J0VG8gfHwgZ29vZy5nbG9iYWw7XG5cbiAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgZXhoaWJpdHMgc3RyYW5nZSBiZWhhdmlvciB3aGVuIHRocm93aW5nIGVycm9ycyBmcm9tXG4gIC8vIG1ldGhvZHMgZXh0ZXJuZWQgaW4gdGhpcyBtYW5uZXIuICBTZWUgdGhlIHRlc3RFeHBvcnRTeW1ib2xFeGNlcHRpb25zIGluXG4gIC8vIGJhc2VfdGVzdC5odG1sIGZvciBhbiBleGFtcGxlLlxuICBpZiAoIShwYXJ0c1swXSBpbiBjdXIpICYmIGN1ci5leGVjU2NyaXB0KSB7XG4gICAgY3VyLmV4ZWNTY3JpcHQoJ3ZhciAnICsgcGFydHNbMF0pO1xuICB9XG5cbiAgLy8gQ2VydGFpbiBicm93c2VycyBjYW5ub3QgcGFyc2UgY29kZSBpbiB0aGUgZm9ybSBmb3IoKGEgaW4gYik7IGM7KTtcbiAgLy8gVGhpcyBwYXR0ZXJuIGlzIHByb2R1Y2VkIGJ5IHRoZSBKU0NvbXBpbGVyIHdoZW4gaXQgY29sbGFwc2VzIHRoZVxuICAvLyBzdGF0ZW1lbnQgYWJvdmUgaW50byB0aGUgY29uZGl0aW9uYWwgbG9vcCBiZWxvdy4gVG8gcHJldmVudCB0aGlzIGZyb21cbiAgLy8gaGFwcGVuaW5nLCB1c2UgYSBmb3ItbG9vcCBhbmQgcmVzZXJ2ZSB0aGUgaW5pdCBsb2dpYyBhcyBiZWxvdy5cblxuICAvLyBQYXJlbnRoZXNlcyBhZGRlZCB0byBlbGltaW5hdGUgc3RyaWN0IEpTIHdhcm5pbmcgaW4gRmlyZWZveC5cbiAgZm9yICh2YXIgcGFydDsgcGFydHMubGVuZ3RoICYmIChwYXJ0ID0gcGFydHMuc2hpZnQoKSk7KSB7XG4gICAgaWYgKCFwYXJ0cy5sZW5ndGggJiYgZ29vZy5pc0RlZihvcHRfb2JqZWN0KSkge1xuICAgICAgLy8gbGFzdCBwYXJ0IGFuZCB3ZSBoYXZlIGFuIG9iamVjdDsgdXNlIGl0XG4gICAgICBjdXJbcGFydF0gPSBvcHRfb2JqZWN0O1xuICAgIH0gZWxzZSBpZiAoY3VyW3BhcnRdKSB7XG4gICAgICBjdXIgPSBjdXJbcGFydF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1ciA9IGN1cltwYXJ0XSA9IHt9O1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIERlZmluZXMgYSBuYW1lZCB2YWx1ZS4gSW4gdW5jb21waWxlZCBtb2RlLCB0aGUgdmFsdWUgaXMgcmV0cmlldmVkIGZyb21cbiAqIENMT1NVUkVfREVGSU5FUyBvciBDTE9TVVJFX1VOQ09NUElMRURfREVGSU5FUyBpZiB0aGUgb2JqZWN0IGlzIGRlZmluZWQgYW5kXG4gKiBoYXMgdGhlIHByb3BlcnR5IHNwZWNpZmllZCwgYW5kIG90aGVyd2lzZSB1c2VkIHRoZSBkZWZpbmVkIGRlZmF1bHRWYWx1ZS5cbiAqIFdoZW4gY29tcGlsZWQgdGhlIGRlZmF1bHQgY2FuIGJlIG92ZXJyaWRkZW4gdXNpbmcgdGhlIGNvbXBpbGVyXG4gKiBvcHRpb25zIG9yIHRoZSB2YWx1ZSBzZXQgaW4gdGhlIENMT1NVUkVfREVGSU5FUyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIGRpc3Rpbmd1aXNoZWQgbmFtZSB0byBwcm92aWRlLlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfGJvb2xlYW59IGRlZmF1bHRWYWx1ZVxuICovXG5nb29nLmRlZmluZSA9IGZ1bmN0aW9uKG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gIGlmICghQ09NUElMRUQpIHtcbiAgICBpZiAoZ29vZy5nbG9iYWwuQ0xPU1VSRV9VTkNPTVBJTEVEX0RFRklORVMgJiZcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuICAgICAgICAgICAgZ29vZy5nbG9iYWwuQ0xPU1VSRV9VTkNPTVBJTEVEX0RFRklORVMsIG5hbWUpKSB7XG4gICAgICB2YWx1ZSA9IGdvb2cuZ2xvYmFsLkNMT1NVUkVfVU5DT01QSUxFRF9ERUZJTkVTW25hbWVdO1xuICAgIH0gZWxzZSBpZiAoZ29vZy5nbG9iYWwuQ0xPU1VSRV9ERUZJTkVTICYmXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiAgICAgICAgICAgIGdvb2cuZ2xvYmFsLkNMT1NVUkVfREVGSU5FUywgbmFtZSkpIHtcbiAgICAgIHZhbHVlID0gZ29vZy5nbG9iYWwuQ0xPU1VSRV9ERUZJTkVTW25hbWVdO1xuICAgIH1cbiAgfVxuICBnb29nLmV4cG9ydFBhdGhfKG5hbWUsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBERUJVRyBpcyBwcm92aWRlZCBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgZGVidWdnaW5nIGNvZGVcbiAqIHRoYXQgc2hvdWxkIG5vdCBiZSBpbmNsdWRlZCBpbiBhIHByb2R1Y3Rpb24ganNfYmluYXJ5IGNhbiBiZSBlYXNpbHkgc3RyaXBwZWRcbiAqIGJ5IHNwZWNpZnlpbmcgLS1kZWZpbmUgZ29vZy5ERUJVRz1mYWxzZSB0byB0aGUgSlNDb21waWxlci4gRm9yIGV4YW1wbGUsIG1vc3RcbiAqIHRvU3RyaW5nKCkgbWV0aG9kcyBzaG91bGQgYmUgZGVjbGFyZWQgaW5zaWRlIGFuIFwiaWYgKGdvb2cuREVCVUcpXCIgY29uZGl0aW9uYWxcbiAqIGJlY2F1c2UgdGhleSBhcmUgZ2VuZXJhbGx5IHVzZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3NlcyBhbmQgaXQgaXMgZGlmZmljdWx0XG4gKiBmb3IgdGhlIEpTQ29tcGlsZXIgdG8gc3RhdGljYWxseSBkZXRlcm1pbmUgd2hldGhlciB0aGV5IGFyZSB1c2VkLlxuICovXG5nb29nLmRlZmluZSgnZ29vZy5ERUJVRycsIHRydWUpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7c3RyaW5nfSBMT0NBTEUgZGVmaW5lcyB0aGUgbG9jYWxlIGJlaW5nIHVzZWQgZm9yIGNvbXBpbGF0aW9uLiBJdCBpc1xuICogdXNlZCB0byBzZWxlY3QgbG9jYWxlIHNwZWNpZmljIGRhdGEgdG8gYmUgY29tcGlsZWQgaW4ganMgYmluYXJ5LiBCVUlMRCBydWxlXG4gKiBjYW4gc3BlY2lmeSB0aGlzIHZhbHVlIGJ5IFwiLS1kZWZpbmUgZ29vZy5MT0NBTEU9PGxvY2FsZV9uYW1lPlwiIGFzIEpTQ29tcGlsZXJcbiAqIG9wdGlvbi5cbiAqXG4gKiBUYWtlIGludG8gYWNjb3VudCB0aGF0IHRoZSBsb2NhbGUgY29kZSBmb3JtYXQgaXMgaW1wb3J0YW50LiBZb3Ugc2hvdWxkIHVzZVxuICogdGhlIGNhbm9uaWNhbCBVbmljb2RlIGZvcm1hdCB3aXRoIGh5cGhlbiBhcyBhIGRlbGltaXRlci4gTGFuZ3VhZ2UgbXVzdCBiZVxuICogbG93ZXJjYXNlLCBMYW5ndWFnZSBTY3JpcHQgLSBDYXBpdGFsaXplZCwgUmVnaW9uIC0gVVBQRVJDQVNFLlxuICogVGhlcmUgYXJlIGZldyBleGFtcGxlczogcHQtQlIsIGVuLCBlbi1VUywgc3ItTGF0aW4tQk8sIHpoLUhhbnMtQ04uXG4gKlxuICogU2VlIG1vcmUgaW5mbyBhYm91dCBsb2NhbGUgY29kZXMgaGVyZTpcbiAqIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1LyNVbmljb2RlX0xhbmd1YWdlX2FuZF9Mb2NhbGVfSWRlbnRpZmllcnNcbiAqXG4gKiBGb3IgbGFuZ3VhZ2UgY29kZXMgeW91IHNob3VsZCB1c2UgdmFsdWVzIGRlZmluZWQgYnkgSVNPIDY5My0xLiBTZWUgaXQgaGVyZVxuICogaHR0cDovL3d3dy53My5vcmcvV0FJL0VSL0lHL2VydC9pc282MzkuaHRtLiBUaGVyZSBpcyBvbmx5IG9uZSBleGNlcHRpb24gZnJvbVxuICogdGhpcyBydWxlOiB0aGUgSGVicmV3IGxhbmd1YWdlLiBGb3IgbGVnYWN5IHJlYXNvbnMgdGhlIG9sZCBjb2RlIChpdykgc2hvdWxkXG4gKiBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIG5ldyBjb2RlIChoZSksIHNlZSBodHRwOi8vd2lraS9NYWluL0lJSVN5bm9ueW1zLlxuICovXG5nb29nLmRlZmluZSgnZ29vZy5MT0NBTEUnLCAnZW4nKTsgIC8vIGRlZmF1bHQgdG8gZW5cblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBjb2RlIGlzIHJ1bm5pbmcgb24gdHJ1c3RlZCBzaXRlcy5cbiAqXG4gKiBPbiB1bnRydXN0ZWQgc2l0ZXMsIHNldmVyYWwgbmF0aXZlIGZ1bmN0aW9ucyBjYW4gYmUgZGVmaW5lZCBvciBvdmVycmlkZGVuIGJ5XG4gKiBleHRlcm5hbCBsaWJyYXJpZXMgbGlrZSBQcm90b3R5cGUsIERhdGVqcywgYW5kIEpRdWVyeSBhbmQgc2V0dGluZyB0aGlzIGZsYWdcbiAqIHRvIGZhbHNlIGZvcmNlcyBjbG9zdXJlIHRvIHVzZSBpdHMgb3duIGltcGxlbWVudGF0aW9ucyB3aGVuIHBvc3NpYmxlLlxuICpcbiAqIElmIHlvdXIgSmF2YVNjcmlwdCBjYW4gYmUgbG9hZGVkIGJ5IGEgdGhpcmQgcGFydHkgc2l0ZSBhbmQgeW91IGFyZSB3YXJ5IGFib3V0XG4gKiByZWx5aW5nIG9uIG5vbi1zdGFuZGFyZCBpbXBsZW1lbnRhdGlvbnMsIHNwZWNpZnlcbiAqIFwiLS1kZWZpbmUgZ29vZy5UUlVTVEVEX1NJVEU9ZmFsc2VcIiB0byB0aGUgSlNDb21waWxlci5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cuVFJVU1RFRF9TSVRFJywgdHJ1ZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIGEgcHJvamVjdCBpcyBleHBlY3RlZCB0byBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLlxuICpcbiAqIFRoaXMgZGVmaW5lIGNhbiBiZSB1c2VkIHRvIHRyaWdnZXIgYWx0ZXJuYXRlIGltcGxlbWVudGF0aW9ucyBjb21wYXRpYmxlIHdpdGhcbiAqIHJ1bm5pbmcgaW4gRWNtYVNjcmlwdCBTdHJpY3QgbW9kZSBvciB3YXJuIGFib3V0IHVuYXZhaWxhYmxlIGZ1bmN0aW9uYWxpdHkuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0Z1bmN0aW9uc19hbmRfZnVuY3Rpb25fc2NvcGUvU3RyaWN0X21vZGVcbiAqXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLlNUUklDVF9NT0RFX0NPTVBBVElCTEUnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIGNvZGUgdGhhdCBjYWxscyB7QGxpbmsgZ29vZy5zZXRUZXN0T25seX0gc2hvdWxkXG4gKiAgICAgYmUgZGlzYWxsb3dlZCBpbiB0aGUgY29tcGlsYXRpb24gdW5pdC5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cuRElTQUxMT1dfVEVTVF9PTkxZX0NPREUnLCBDT01QSUxFRCAmJiAhZ29vZy5ERUJVRyk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRvIHVzZSBhIENocm9tZSBhcHAgQ1NQLWNvbXBsaWFudCBtZXRob2QgZm9yXG4gKiAgICAgbG9hZGluZyBzY3JpcHRzIHZpYSBnb29nLnJlcXVpcmUuIEBzZWUgYXBwZW5kU2NyaXB0U3JjTm9kZV8uXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLkVOQUJMRV9DSFJPTUVfQVBQX1NBRkVfU0NSSVBUX0xPQURJTkcnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBEZWZpbmVzIGEgbmFtZXNwYWNlIGluIENsb3N1cmUuXG4gKlxuICogQSBuYW1lc3BhY2UgbWF5IG9ubHkgYmUgZGVmaW5lZCBvbmNlIGluIGEgY29kZWJhc2UuIEl0IG1heSBiZSBkZWZpbmVkIHVzaW5nXG4gKiBnb29nLnByb3ZpZGUoKSBvciBnb29nLm1vZHVsZSgpLlxuICpcbiAqIFRoZSBwcmVzZW5jZSBvZiBvbmUgb3IgbW9yZSBnb29nLnByb3ZpZGUoKSBjYWxscyBpbiBhIGZpbGUgaW5kaWNhdGVzXG4gKiB0aGF0IHRoZSBmaWxlIGRlZmluZXMgdGhlIGdpdmVuIG9iamVjdHMvbmFtZXNwYWNlcy5cbiAqIFByb3ZpZGVkIHN5bWJvbHMgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuXG4gKlxuICogSW4gYWRkaXRpb24sIGdvb2cucHJvdmlkZSgpIGNyZWF0ZXMgdGhlIG9iamVjdCBzdHVicyBmb3IgYSBuYW1lc3BhY2VcbiAqIChmb3IgZXhhbXBsZSwgZ29vZy5wcm92aWRlKFwiZ29vZy5mb28uYmFyXCIpIHdpbGwgY3JlYXRlIHRoZSBvYmplY3RcbiAqIGdvb2cuZm9vLmJhciBpZiBpdCBkb2VzIG5vdCBhbHJlYWR5IGV4aXN0KS5cbiAqXG4gKiBCdWlsZCB0b29scyBhbHNvIHNjYW4gZm9yIHByb3ZpZGUvcmVxdWlyZS9tb2R1bGUgc3RhdGVtZW50c1xuICogdG8gZGlzY2VybiBkZXBlbmRlbmNpZXMsIGJ1aWxkIGRlcGVuZGVuY3kgZmlsZXMgKHNlZSBkZXBzLmpzKSwgZXRjLlxuICpcbiAqIEBzZWUgZ29vZy5yZXF1aXJlXG4gKiBAc2VlIGdvb2cubW9kdWxlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lc3BhY2UgcHJvdmlkZWQgYnkgdGhpcyBmaWxlIGluIHRoZSBmb3JtXG4gKiAgICAgXCJnb29nLnBhY2thZ2UucGFydFwiLlxuICovXG5nb29nLnByb3ZpZGUgPSBmdW5jdGlvbihuYW1lKSB7XG4gIGlmICghQ09NUElMRUQpIHtcbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgc2FtZSBuYW1lc3BhY2UgaXNuJ3QgcHJvdmlkZWQgdHdpY2UuXG4gICAgLy8gQSBnb29nLm1vZHVsZS9nb29nLnByb3ZpZGUgbWFwcyBhIGdvb2cucmVxdWlyZSB0byBhIHNwZWNpZmljIGZpbGVcbiAgICBpZiAoZ29vZy5pc1Byb3ZpZGVkXyhuYW1lKSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ05hbWVzcGFjZSBcIicgKyBuYW1lICsgJ1wiIGFscmVhZHkgZGVjbGFyZWQuJyk7XG4gICAgfVxuICB9XG5cbiAgZ29vZy5jb25zdHJ1Y3ROYW1lc3BhY2VfKG5hbWUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWVzcGFjZSBwcm92aWRlZCBieSB0aGlzIGZpbGUgaW4gdGhlIGZvcm1cbiAqICAgICBcImdvb2cucGFja2FnZS5wYXJ0XCIuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9vYmogVGhlIG9iamVjdCB0byBlbWJlZCBpbiB0aGUgbmFtZXNwYWNlLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5jb25zdHJ1Y3ROYW1lc3BhY2VfID0gZnVuY3Rpb24obmFtZSwgb3B0X29iaikge1xuICBpZiAoIUNPTVBJTEVEKSB7XG4gICAgZGVsZXRlIGdvb2cuaW1wbGljaXROYW1lc3BhY2VzX1tuYW1lXTtcblxuICAgIHZhciBuYW1lc3BhY2UgPSBuYW1lO1xuICAgIHdoaWxlICgobmFtZXNwYWNlID0gbmFtZXNwYWNlLnN1YnN0cmluZygwLCBuYW1lc3BhY2UubGFzdEluZGV4T2YoJy4nKSkpKSB7XG4gICAgICBpZiAoZ29vZy5nZXRPYmplY3RCeU5hbWUobmFtZXNwYWNlKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGdvb2cuaW1wbGljaXROYW1lc3BhY2VzX1tuYW1lc3BhY2VdID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBnb29nLmV4cG9ydFBhdGhfKG5hbWUsIG9wdF9vYmopO1xufTtcblxuXG4vKipcbiAqIE1vZHVsZSBpZGVudGlmaWVyIHZhbGlkYXRpb24gcmVnZXhwLlxuICogTm90ZTogVGhpcyBpcyBhIGNvbnNlcnZhdGl2ZSBjaGVjaywgaXQgaXMgdmVyeSBwb3NzaWJsZSB0byBiZSBtb3JlIGxlbmllbnQsXG4gKiAgIHRoZSBwcmltYXJ5IGV4Y2x1c2lvbiBoZXJlIGlzIFwiL1wiIGFuZCBcIlxcXCIgYW5kIGEgbGVhZGluZyBcIi5cIiwgdGhlc2VcbiAqICAgcmVzdHJpY3Rpb25zIGFyZSBpbnRlbmRlZCB0byBsZWF2ZSB0aGUgZG9vciBvcGVuIGZvciB1c2luZyBnb29nLnJlcXVpcmVcbiAqICAgd2l0aCByZWxhdGl2ZSBmaWxlIHBhdGhzIHJhdGhlciB0aGFuIG1vZHVsZSBpZGVudGlmaWVycy5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuVkFMSURfTU9EVUxFX1JFXyA9IC9eW2EtekEtWl8kXVthLXpBLVowLTkuXyRdKiQvO1xuXG5cbi8qKlxuICogRGVmaW5lcyBhIG1vZHVsZSBpbiBDbG9zdXJlLlxuICpcbiAqIE1hcmtzIHRoYXQgdGhpcyBmaWxlIG11c3QgYmUgbG9hZGVkIGFzIGEgbW9kdWxlIGFuZCBjbGFpbXMgdGhlIG5hbWVzcGFjZS5cbiAqXG4gKiBBIG5hbWVzcGFjZSBtYXkgb25seSBiZSBkZWZpbmVkIG9uY2UgaW4gYSBjb2RlYmFzZS4gSXQgbWF5IGJlIGRlZmluZWQgdXNpbmdcbiAqIGdvb2cucHJvdmlkZSgpIG9yIGdvb2cubW9kdWxlKCkuXG4gKlxuICogZ29vZy5tb2R1bGUoKSBoYXMgdGhyZWUgcmVxdWlyZW1lbnRzOlxuICogLSBnb29nLm1vZHVsZSBtYXkgbm90IGJlIHVzZWQgaW4gdGhlIHNhbWUgZmlsZSBhcyBnb29nLnByb3ZpZGUuXG4gKiAtIGdvb2cubW9kdWxlIG11c3QgYmUgdGhlIGZpcnN0IHN0YXRlbWVudCBpbiB0aGUgZmlsZS5cbiAqIC0gb25seSBvbmUgZ29vZy5tb2R1bGUgaXMgYWxsb3dlZCBwZXIgZmlsZS5cbiAqXG4gKiBXaGVuIGEgZ29vZy5tb2R1bGUgYW5ub3RhdGVkIGZpbGUgaXMgbG9hZGVkLCBpdCBpcyBlbmNsb3NlZCBpblxuICogYSBzdHJpY3QgZnVuY3Rpb24gY2xvc3VyZS4gVGhpcyBtZWFucyB0aGF0OlxuICogLSBhbnkgdmFyaWFibGVzIGRlY2xhcmVkIGluIGEgZ29vZy5tb2R1bGUgZmlsZSBhcmUgcHJpdmF0ZSB0byB0aGUgZmlsZVxuICogKG5vdCBnbG9iYWwpLCB0aG91Z2ggdGhlIGNvbXBpbGVyIGlzIGV4cGVjdGVkIHRvIGlubGluZSB0aGUgbW9kdWxlLlxuICogLSBUaGUgY29kZSBtdXN0IG9iZXkgYWxsIHRoZSBydWxlcyBvZiBcInN0cmljdFwiIEphdmFTY3JpcHQuXG4gKiAtIHRoZSBmaWxlIHdpbGwgYmUgbWFya2VkIGFzIFwidXNlIHN0cmljdFwiXG4gKlxuICogTk9URTogdW5saWtlIGdvb2cucHJvdmlkZSwgZ29vZy5tb2R1bGUgZG9lcyBub3QgZGVjbGFyZSBhbnkgc3ltYm9scyBieVxuICogaXRzZWxmLiBJZiBkZWNsYXJlZCBzeW1ib2xzIGFyZSBkZXNpcmVkLCB1c2VcbiAqIGdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UoKS5cbiAqXG4gKlxuICogU2VlIHRoZSBwdWJsaWMgZ29vZy5tb2R1bGUgcHJvcG9zYWw6IGh0dHA6Ly9nb28uZ2wvVmExaGluXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZXNwYWNlIHByb3ZpZGVkIGJ5IHRoaXMgZmlsZSBpbiB0aGUgZm9ybVxuICogICAgIFwiZ29vZy5wYWNrYWdlLnBhcnRcIiwgaXMgZXhwZWN0ZWQgYnV0IG5vdCByZXF1aXJlZC5cbiAqL1xuZ29vZy5tb2R1bGUgPSBmdW5jdGlvbihuYW1lKSB7XG4gIGlmICghZ29vZy5pc1N0cmluZyhuYW1lKSB8fFxuICAgICAgIW5hbWUgfHxcbiAgICAgIG5hbWUuc2VhcmNoKGdvb2cuVkFMSURfTU9EVUxFX1JFXykgPT0gLTEpIHtcbiAgICB0aHJvdyBFcnJvcignSW52YWxpZCBtb2R1bGUgaWRlbnRpZmllcicpO1xuICB9XG4gIGlmICghZ29vZy5pc0luTW9kdWxlTG9hZGVyXygpKSB7XG4gICAgdGhyb3cgRXJyb3IoJ01vZHVsZSAnICsgbmFtZSArICcgaGFzIGJlZW4gbG9hZGVkIGluY29ycmVjdGx5LicpO1xuICB9XG4gIGlmIChnb29nLm1vZHVsZUxvYWRlclN0YXRlXy5tb2R1bGVOYW1lKSB7XG4gICAgdGhyb3cgRXJyb3IoJ2dvb2cubW9kdWxlIG1heSBvbmx5IGJlIGNhbGxlZCBvbmNlIHBlciBtb2R1bGUuJyk7XG4gIH1cblxuICAvLyBTdG9yZSB0aGUgbW9kdWxlIG5hbWUgZm9yIHRoZSBsb2FkZXIuXG4gIGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfLm1vZHVsZU5hbWUgPSBuYW1lO1xuICBpZiAoIUNPTVBJTEVEKSB7XG4gICAgLy8gRW5zdXJlIHRoYXQgdGhlIHNhbWUgbmFtZXNwYWNlIGlzbid0IHByb3ZpZGVkIHR3aWNlLlxuICAgIC8vIEEgZ29vZy5tb2R1bGUvZ29vZy5wcm92aWRlIG1hcHMgYSBnb29nLnJlcXVpcmUgdG8gYSBzcGVjaWZpYyBmaWxlXG4gICAgaWYgKGdvb2cuaXNQcm92aWRlZF8obmFtZSkpIHtcbiAgICAgIHRocm93IEVycm9yKCdOYW1lc3BhY2UgXCInICsgbmFtZSArICdcIiBhbHJlYWR5IGRlY2xhcmVkLicpO1xuICAgIH1cbiAgICBkZWxldGUgZ29vZy5pbXBsaWNpdE5hbWVzcGFjZXNfW25hbWVdO1xuICB9XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG1vZHVsZSBpZGVudGlmaWVyLlxuICogQHJldHVybiB7P30gVGhlIG1vZHVsZSBleHBvcnRzIGZvciBhbiBhbHJlYWR5IGxvYWRlZCBtb2R1bGUgb3IgbnVsbC5cbiAqXG4gKiBOb3RlOiBUaGlzIGlzIG5vdCBhbiBhbHRlcm5hdGl2ZSB0byBnb29nLnJlcXVpcmUsIGl0IGRvZXMgbm90XG4gKiBpbmRpY2F0ZSBhIGhhcmQgZGVwZW5kZW5jeSwgaW5zdGVhZCBpdCBpcyB1c2VkIHRvIGluZGljYXRlXG4gKiBhbiBvcHRpb25hbCBkZXBlbmRlbmN5IG9yIHRvIGFjY2VzcyB0aGUgZXhwb3J0cyBvZiBhIG1vZHVsZVxuICogdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGxvYWRlZC5cbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3ZpZGV9XG4gKi9cbmdvb2cubW9kdWxlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIGdvb2cubW9kdWxlLmdldEludGVybmFsXyhuYW1lKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbW9kdWxlIGlkZW50aWZpZXIuXG4gKiBAcmV0dXJuIHs/fSBUaGUgbW9kdWxlIGV4cG9ydHMgZm9yIGFuIGFscmVhZHkgbG9hZGVkIG1vZHVsZSBvciBudWxsLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5tb2R1bGUuZ2V0SW50ZXJuYWxfID0gZnVuY3Rpb24obmFtZSkge1xuICBpZiAoIUNPTVBJTEVEKSB7XG4gICAgaWYgKGdvb2cuaXNQcm92aWRlZF8obmFtZSkpIHtcbiAgICAgIC8vIGdvb2cucmVxdWlyZSBvbmx5IHJldHVybiBhIHZhbHVlIHdpdGgtaW4gZ29vZy5tb2R1bGUgZmlsZXMuXG4gICAgICByZXR1cm4gbmFtZSBpbiBnb29nLmxvYWRlZE1vZHVsZXNfID9cbiAgICAgICAgICBnb29nLmxvYWRlZE1vZHVsZXNfW25hbWVdIDpcbiAgICAgICAgICBnb29nLmdldE9iamVjdEJ5TmFtZShuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogQHByaXZhdGUgez97bW9kdWxlTmFtZTogKHN0cmluZ3x1bmRlZmluZWQpfX1cbiAqL1xuZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8gPSBudWxsO1xuXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYSBnb29nLm1vZHVsZSBpcyBjdXJyZW50bHkgYmVpbmcgaW5pdGlhbGl6ZWQuXG4gKi9cbmdvb2cuaXNJbk1vZHVsZUxvYWRlcl8gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogUHJvdmlkZSB0aGUgbW9kdWxlJ3MgZXhwb3J0cyBhcyBhIGdsb2JhbGx5IGFjY2Vzc2libGUgb2JqZWN0IHVuZGVyIHRoZVxuICogbW9kdWxlJ3MgZGVjbGFyZWQgbmFtZS4gIFRoaXMgaXMgaW50ZW5kZWQgdG8gZWFzZSBtaWdyYXRpb24gdG8gZ29vZy5tb2R1bGVcbiAqIGZvciBmaWxlcyB0aGF0IGhhdmUgZXhpc3RpbmcgdXNhZ2VzLlxuICogQHN1cHByZXNzIHttaXNzaW5nUHJvdmlkZX1cbiAqL1xuZ29vZy5tb2R1bGUuZGVjbGFyZUxlZ2FjeU5hbWVzcGFjZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIUNPTVBJTEVEICYmICFnb29nLmlzSW5Nb2R1bGVMb2FkZXJfKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2dvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UgbXVzdCBiZSBjYWxsZWQgZnJvbSAnICtcbiAgICAgICAgJ3dpdGhpbiBhIGdvb2cubW9kdWxlJyk7XG4gIH1cbiAgaWYgKCFDT01QSUxFRCAmJiAhZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8ubW9kdWxlTmFtZSkge1xuICAgIHRocm93IEVycm9yKCdnb29nLm1vZHVsZSBtdXN0IGJlIGNhbGxlZCBwcmlvciB0byAnICtcbiAgICAgICAgJ2dvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UuJyk7XG4gIH1cbiAgZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8uZGVjbGFyZUxlZ2FjeU5hbWVzcGFjZSA9IHRydWU7XG59O1xuXG5cbi8qKlxuICogTWFya3MgdGhhdCB0aGUgY3VycmVudCBmaWxlIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIHRlc3RpbmcsIGFuZCBuZXZlciBmb3JcbiAqIGxpdmUgY29kZSBpbiBwcm9kdWN0aW9uLlxuICpcbiAqIEluIHRoZSBjYXNlIG9mIHVuaXQgdGVzdHMsIHRoZSBtZXNzYWdlIG1heSBvcHRpb25hbGx5IGJlIGFuIGV4YWN0IG5hbWVzcGFjZVxuICogZm9yIHRoZSB0ZXN0IChlLmcuICdnb29nLnN0cmluZ1Rlc3QnKS4gVGhlIGxpbnRlciB3aWxsIHRoZW4gaWdub3JlIHRoZSBleHRyYVxuICogcHJvdmlkZSAoaWYgbm90IGV4cGxpY2l0bHkgZGVmaW5lZCBpbiB0aGUgY29kZSkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZSBPcHRpb25hbCBtZXNzYWdlIHRvIGFkZCB0byB0aGUgZXJyb3IgdGhhdCdzXG4gKiAgICAgcmFpc2VkIHdoZW4gdXNlZCBpbiBwcm9kdWN0aW9uIGNvZGUuXG4gKi9cbmdvb2cuc2V0VGVzdE9ubHkgPSBmdW5jdGlvbihvcHRfbWVzc2FnZSkge1xuICBpZiAoZ29vZy5ESVNBTExPV19URVNUX09OTFlfQ09ERSkge1xuICAgIG9wdF9tZXNzYWdlID0gb3B0X21lc3NhZ2UgfHwgJyc7XG4gICAgdGhyb3cgRXJyb3IoJ0ltcG9ydGluZyB0ZXN0LW9ubHkgY29kZSBpbnRvIG5vbi1kZWJ1ZyBlbnZpcm9ubWVudCcgK1xuICAgICAgICAgICAgICAgIChvcHRfbWVzc2FnZSA/ICc6ICcgKyBvcHRfbWVzc2FnZSA6ICcuJykpO1xuICB9XG59O1xuXG5cbi8qKlxuICogRm9yd2FyZCBkZWNsYXJlcyBhIHN5bWJvbC4gVGhpcyBpcyBhbiBpbmRpY2F0aW9uIHRvIHRoZSBjb21waWxlciB0aGF0IHRoZVxuICogc3ltYm9sIG1heSBiZSB1c2VkIGluIHRoZSBzb3VyY2UgeWV0IGlzIG5vdCByZXF1aXJlZCBhbmQgbWF5IG5vdCBiZSBwcm92aWRlZFxuICogaW4gY29tcGlsYXRpb24uXG4gKlxuICogVGhlIG1vc3QgY29tbW9uIHVzYWdlIG9mIGZvcndhcmQgZGVjbGFyYXRpb24gaXMgY29kZSB0aGF0IHRha2VzIGEgdHlwZSBhcyBhXG4gKiBmdW5jdGlvbiBwYXJhbWV0ZXIgYnV0IGRvZXMgbm90IG5lZWQgdG8gcmVxdWlyZSBpdC4gQnkgZm9yd2FyZCBkZWNsYXJpbmdcbiAqIGluc3RlYWQgb2YgcmVxdWlyaW5nLCBubyBoYXJkIGRlcGVuZGVuY3kgaXMgbWFkZSwgYW5kIChpZiBub3QgcmVxdWlyZWRcbiAqIGVsc2V3aGVyZSkgdGhlIG5hbWVzcGFjZSBtYXkgbmV2ZXIgYmUgcmVxdWlyZWQgYW5kIHRodXMsIG5vdCBiZSBwdWxsZWRcbiAqIGludG8gdGhlIEphdmFTY3JpcHQgYmluYXJ5LiBJZiBpdCBpcyByZXF1aXJlZCBlbHNld2hlcmUsIGl0IHdpbGwgYmUgdHlwZVxuICogY2hlY2tlZCBhcyBub3JtYWwuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lc3BhY2UgdG8gZm9yd2FyZCBkZWNsYXJlIGluIHRoZSBmb3JtIG9mXG4gKiAgICAgXCJnb29nLnBhY2thZ2UucGFydFwiLlxuICovXG5nb29nLmZvcndhcmREZWNsYXJlID0gZnVuY3Rpb24obmFtZSkge307XG5cblxuLyoqXG4gKiBGb3J3YXJkIGRlY2xhcmUgdHlwZSBpbmZvcm1hdGlvbi4gVXNlZCB0byBhc3NpZ24gdHlwZXMgdG8gZ29vZy5nbG9iYWxcbiAqIHJlZmVyZW5jZWQgb2JqZWN0IHRoYXQgd291bGQgb3RoZXJ3aXNlIHJlc3VsdCBpbiB1bmtub3duIHR5cGUgcmVmZXJlbmNlc1xuICogYW5kIHRodXMgYmxvY2sgcHJvcGVydHkgZGlzYW1iaWd1YXRpb24uXG4gKi9cbmdvb2cuZm9yd2FyZERlY2xhcmUoJ0RvY3VtZW50Jyk7XG5nb29nLmZvcndhcmREZWNsYXJlKCdYTUxIdHRwUmVxdWVzdCcpO1xuXG5cbmlmICghQ09NUElMRUQpIHtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIG5hbWUgaGFzIGJlZW4gZ29vZy5wcm92aWRlZC4gVGhpcyB3aWxsIHJldHVybiBmYWxzZSBmb3JcbiAgICogbmFtZXMgdGhhdCBhcmUgYXZhaWxhYmxlIG9ubHkgYXMgaW1wbGljaXQgbmFtZXNwYWNlcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgb2JqZWN0IHRvIGxvb2sgZm9yLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBuYW1lIGhhcyBiZWVuIHByb3ZpZGVkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ29vZy5pc1Byb3ZpZGVkXyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gKG5hbWUgaW4gZ29vZy5sb2FkZWRNb2R1bGVzXykgfHxcbiAgICAgICAgKCFnb29nLmltcGxpY2l0TmFtZXNwYWNlc19bbmFtZV0gJiZcbiAgICAgICAgICAgIGdvb2cuaXNEZWZBbmROb3ROdWxsKGdvb2cuZ2V0T2JqZWN0QnlOYW1lKG5hbWUpKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIE5hbWVzcGFjZXMgaW1wbGljaXRseSBkZWZpbmVkIGJ5IGdvb2cucHJvdmlkZS4gRm9yIGV4YW1wbGUsXG4gICAqIGdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuRXZlbnQnKSBpbXBsaWNpdGx5IGRlY2xhcmVzIHRoYXQgJ2dvb2cnIGFuZFxuICAgKiAnZ29vZy5ldmVudHMnIG11c3QgYmUgbmFtZXNwYWNlcy5cbiAgICpcbiAgICogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCAoYm9vbGVhbnx1bmRlZmluZWQpPn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuaW1wbGljaXROYW1lc3BhY2VzXyA9IHsnZ29vZy5tb2R1bGUnOiB0cnVlfTtcblxuICAvLyBOT1RFOiBXZSBhZGQgZ29vZy5tb2R1bGUgYXMgYW4gaW1wbGljaXQgbmFtZXNwYWNlIGFzIGdvb2cubW9kdWxlIGlzIGRlZmluZWRcbiAgLy8gaGVyZSBhbmQgYmVjYXVzZSB0aGUgZXhpc3RpbmcgbW9kdWxlIHBhY2thZ2UgaGFzIG5vdCBiZWVuIG1vdmVkIHlldCBvdXQgb2ZcbiAgLy8gdGhlIGdvb2cubW9kdWxlIG5hbWVzcGFjZS4gVGhpcyBzYXRpc2lmaWVzIGJvdGggdGhlIGRlYnVnIGxvYWRlciBhbmRcbiAgLy8gYWhlYWQtb2YtdGltZSBkZXBlbmRlbmN5IG1hbmFnZW1lbnQuXG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBiYXNlZCBvbiBpdHMgZnVsbHkgcXVhbGlmaWVkIGV4dGVybmFsIG5hbWUuICBUaGUgb2JqZWN0XG4gKiBpcyBub3QgZm91bmQgaWYgbnVsbCBvciB1bmRlZmluZWQuICBJZiB5b3UgYXJlIHVzaW5nIGEgY29tcGlsYXRpb24gcGFzcyB0aGF0XG4gKiByZW5hbWVzIHByb3BlcnR5IG5hbWVzIGJld2FyZSB0aGF0IHVzaW5nIHRoaXMgZnVuY3Rpb24gd2lsbCBub3QgZmluZCByZW5hbWVkXG4gKiBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBmdWxseSBxdWFsaWZpZWQgbmFtZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X29iaiBUaGUgb2JqZWN0IHdpdGhpbiB3aGljaCB0byBsb29rOyBkZWZhdWx0IGlzXG4gKiAgICAgfGdvb2cuZ2xvYmFsfC5cbiAqIEByZXR1cm4gez99IFRoZSB2YWx1ZSAob2JqZWN0IG9yIHByaW1pdGl2ZSkgb3IsIGlmIG5vdCBmb3VuZCwgbnVsbC5cbiAqL1xuZ29vZy5nZXRPYmplY3RCeU5hbWUgPSBmdW5jdGlvbihuYW1lLCBvcHRfb2JqKSB7XG4gIHZhciBwYXJ0cyA9IG5hbWUuc3BsaXQoJy4nKTtcbiAgdmFyIGN1ciA9IG9wdF9vYmogfHwgZ29vZy5nbG9iYWw7XG4gIGZvciAodmFyIHBhcnQ7IHBhcnQgPSBwYXJ0cy5zaGlmdCgpOyApIHtcbiAgICBpZiAoZ29vZy5pc0RlZkFuZE5vdE51bGwoY3VyW3BhcnRdKSkge1xuICAgICAgY3VyID0gY3VyW3BhcnRdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGN1cjtcbn07XG5cblxuLyoqXG4gKiBHbG9iYWxpemVzIGEgd2hvbGUgbmFtZXNwYWNlLCBzdWNoIGFzIGdvb2cgb3IgZ29vZy5sYW5nLlxuICpcbiAqIEBwYXJhbSB7IU9iamVjdH0gb2JqIFRoZSBuYW1lc3BhY2UgdG8gZ2xvYmFsaXplLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfZ2xvYmFsIFRoZSBvYmplY3QgdG8gYWRkIHRoZSBwcm9wZXJ0aWVzIHRvLlxuICogQGRlcHJlY2F0ZWQgUHJvcGVydGllcyBtYXkgYmUgZXhwbGljaXRseSBleHBvcnRlZCB0byB0aGUgZ2xvYmFsIHNjb3BlLCBidXRcbiAqICAgICB0aGlzIHNob3VsZCBubyBsb25nZXIgYmUgZG9uZSBpbiBidWxrLlxuICovXG5nb29nLmdsb2JhbGl6ZSA9IGZ1bmN0aW9uKG9iaiwgb3B0X2dsb2JhbCkge1xuICB2YXIgZ2xvYmFsID0gb3B0X2dsb2JhbCB8fCBnb29nLmdsb2JhbDtcbiAgZm9yICh2YXIgeCBpbiBvYmopIHtcbiAgICBnbG9iYWxbeF0gPSBvYmpbeF07XG4gIH1cbn07XG5cblxuLyoqXG4gKiBBZGRzIGEgZGVwZW5kZW5jeSBmcm9tIGEgZmlsZSB0byB0aGUgZmlsZXMgaXQgcmVxdWlyZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsUGF0aCBUaGUgcGF0aCB0byB0aGUganMgZmlsZS5cbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHByb3ZpZGVzIEFuIGFycmF5IG9mIHN0cmluZ3Mgd2l0aFxuICogICAgIHRoZSBuYW1lcyBvZiB0aGUgb2JqZWN0cyB0aGlzIGZpbGUgcHJvdmlkZXMuXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSByZXF1aXJlcyBBbiBhcnJheSBvZiBzdHJpbmdzIHdpdGhcbiAqICAgICB0aGUgbmFtZXMgb2YgdGhlIG9iamVjdHMgdGhpcyBmaWxlIHJlcXVpcmVzLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzTW9kdWxlIFdoZXRoZXIgdGhpcyBkZXBlbmRlbmN5IG11c3QgYmUgbG9hZGVkIGFzXG4gKiAgICAgYSBtb2R1bGUgYXMgZGVjbGFyZWQgYnkgZ29vZy5tb2R1bGUuXG4gKi9cbmdvb2cuYWRkRGVwZW5kZW5jeSA9IGZ1bmN0aW9uKHJlbFBhdGgsIHByb3ZpZGVzLCByZXF1aXJlcywgb3B0X2lzTW9kdWxlKSB7XG4gIGlmIChnb29nLkRFUEVOREVOQ0lFU19FTkFCTEVEKSB7XG4gICAgdmFyIHByb3ZpZGUsIHJlcXVpcmU7XG4gICAgdmFyIHBhdGggPSByZWxQYXRoLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgICB2YXIgZGVwcyA9IGdvb2cuZGVwZW5kZW5jaWVzXztcbiAgICBmb3IgKHZhciBpID0gMDsgcHJvdmlkZSA9IHByb3ZpZGVzW2ldOyBpKyspIHtcbiAgICAgIGRlcHMubmFtZVRvUGF0aFtwcm92aWRlXSA9IHBhdGg7XG4gICAgICBkZXBzLnBhdGhJc01vZHVsZVtwYXRoXSA9ICEhb3B0X2lzTW9kdWxlO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgcmVxdWlyZSA9IHJlcXVpcmVzW2pdOyBqKyspIHtcbiAgICAgIGlmICghKHBhdGggaW4gZGVwcy5yZXF1aXJlcykpIHtcbiAgICAgICAgZGVwcy5yZXF1aXJlc1twYXRoXSA9IHt9O1xuICAgICAgfVxuICAgICAgZGVwcy5yZXF1aXJlc1twYXRoXVtyZXF1aXJlXSA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG5cblxuXG4vLyBOT1RFKG5uYXplKTogVGhlIGRlYnVnIERPTSBsb2FkZXIgd2FzIGluY2x1ZGVkIGluIGJhc2UuanMgYXMgYW4gb3JpZ2luYWwgd2F5XG4vLyB0byBkbyBcImRlYnVnLW1vZGVcIiBkZXZlbG9wbWVudC4gIFRoZSBkZXBlbmRlbmN5IHN5c3RlbSBjYW4gc29tZXRpbWVzIGJlXG4vLyBjb25mdXNpbmcsIGFzIGNhbiB0aGUgZGVidWcgRE9NIGxvYWRlcidzIGFzeW5jaHJvbm91cyBuYXR1cmUuXG4vL1xuLy8gV2l0aCB0aGUgRE9NIGxvYWRlciwgYSBjYWxsIHRvIGdvb2cucmVxdWlyZSgpIGlzIG5vdCBibG9ja2luZyAtLSB0aGUgc2NyaXB0XG4vLyB3aWxsIG5vdCBsb2FkIHVudGlsIHNvbWUgcG9pbnQgYWZ0ZXIgdGhlIGN1cnJlbnQgc2NyaXB0LiAgSWYgYSBuYW1lc3BhY2UgaXNcbi8vIG5lZWRlZCBhdCBydW50aW1lLCBpdCBuZWVkcyB0byBiZSBkZWZpbmVkIGluIGEgcHJldmlvdXMgc2NyaXB0LCBvciBsb2FkZWQgdmlhXG4vLyByZXF1aXJlKCkgd2l0aCBpdHMgcmVnaXN0ZXJlZCBkZXBlbmRlbmNpZXMuXG4vLyBVc2VyLWRlZmluZWQgbmFtZXNwYWNlcyBtYXkgbmVlZCB0aGVpciBvd24gZGVwcyBmaWxlLiAgU2VlIGh0dHA6Ly9nby9qc19kZXBzLFxuLy8gaHR0cDovL2dvL2dlbmpzZGVwcywgb3IsIGV4dGVybmFsbHksIERlcHNXcml0ZXIuXG4vLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9jbG9zdXJlL2xpYnJhcnkvZG9jcy9kZXBzd3JpdGVyXG4vL1xuLy8gQmVjYXVzZSBvZiBsZWdhY3kgY2xpZW50cywgdGhlIERPTSBsb2FkZXIgY2FuJ3QgYmUgZWFzaWx5IHJlbW92ZWQgZnJvbVxuLy8gYmFzZS5qcy4gIFdvcmsgaXMgYmVpbmcgZG9uZSB0byBtYWtlIGl0IGRpc2FibGVhYmxlIG9yIHJlcGxhY2VhYmxlIGZvclxuLy8gZGlmZmVyZW50IGVudmlyb25tZW50cyAoRE9NLWxlc3MgSmF2YVNjcmlwdCBpbnRlcnByZXRlcnMgbGlrZSBSaGlubyBvciBWOCxcbi8vIGZvciBleGFtcGxlKS4gU2VlIGJvb3RzdHJhcC8gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRvIGVuYWJsZSB0aGUgZGVidWcgbG9hZGVyLlxuICpcbiAqIElmIGVuYWJsZWQsIGEgY2FsbCB0byBnb29nLnJlcXVpcmUoKSB3aWxsIGF0dGVtcHQgdG8gbG9hZCB0aGUgbmFtZXNwYWNlIGJ5XG4gKiBhcHBlbmRpbmcgYSBzY3JpcHQgdGFnIHRvIHRoZSBET00gKGlmIHRoZSBuYW1lc3BhY2UgaGFzIGJlZW4gcmVnaXN0ZXJlZCkuXG4gKlxuICogSWYgZGlzYWJsZWQsIGdvb2cucmVxdWlyZSgpIHdpbGwgc2ltcGx5IGFzc2VydCB0aGF0IHRoZSBuYW1lc3BhY2UgaGFzIGJlZW5cbiAqIHByb3ZpZGVkIChhbmQgZGVwZW5kIG9uIHRoZSBmYWN0IHRoYXQgc29tZSBvdXRzaWRlIHRvb2wgY29ycmVjdGx5IG9yZGVyZWRcbiAqIHRoZSBzY3JpcHQpLlxuICovXG5nb29nLmRlZmluZSgnZ29vZy5FTkFCTEVfREVCVUdfTE9BREVSJywgdHJ1ZSk7XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbXNnXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmxvZ1RvQ29uc29sZV8gPSBmdW5jdGlvbihtc2cpIHtcbiAgaWYgKGdvb2cuZ2xvYmFsLmNvbnNvbGUpIHtcbiAgICBnb29nLmdsb2JhbC5jb25zb2xlWydlcnJvciddKG1zZyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgc3lzdGVtIGZvciB0aGUgZHluYW1pYyByZXNvbHV0aW9uIG9mIGRlcGVuZGVuY2llcyB0aGF0IHdvcmtzIGluXG4gKiBwYXJhbGxlbCB3aXRoIHRoZSBCVUlMRCBzeXN0ZW0uIE5vdGUgdGhhdCBhbGwgY2FsbHMgdG8gZ29vZy5yZXF1aXJlIHdpbGwgYmVcbiAqIHN0cmlwcGVkIGJ5IHRoZSBKU0NvbXBpbGVyIHdoZW4gdGhlIC0tcHJvY2Vzc19jbG9zdXJlX3ByaW1pdGl2ZXMgb3B0aW9uIGlzXG4gKiB1c2VkLlxuICogQHNlZSBnb29nLnByb3ZpZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWVzcGFjZSB0byBpbmNsdWRlIChhcyB3YXMgZ2l2ZW4gaW4gZ29vZy5wcm92aWRlKCkpIGluXG4gKiAgICAgdGhlIGZvcm0gXCJnb29nLnBhY2thZ2UucGFydFwiLlxuICogQHJldHVybiB7P30gSWYgY2FsbGVkIHdpdGhpbiBhIGdvb2cubW9kdWxlIGZpbGUsIHRoZSBhc3NvY2lhdGVkIG5hbWVzcGFjZSBvclxuICogICAgIG1vZHVsZSBvdGhlcndpc2UgbnVsbC5cbiAqL1xuZ29vZy5yZXF1aXJlID0gZnVuY3Rpb24obmFtZSkge1xuICAvLyBJZiB0aGUgb2JqZWN0IGFscmVhZHkgZXhpc3RzIHdlIGRvIG5vdCBuZWVkIGRvIGRvIGFueXRoaW5nLlxuICBpZiAoIUNPTVBJTEVEKSB7XG4gICAgaWYgKGdvb2cuRU5BQkxFX0RFQlVHX0xPQURFUiAmJiBnb29nLklTX09MRF9JRV8pIHtcbiAgICAgIGdvb2cubWF5YmVQcm9jZXNzRGVmZXJyZWREZXBfKG5hbWUpO1xuICAgIH1cblxuICAgIGlmIChnb29nLmlzUHJvdmlkZWRfKG5hbWUpKSB7XG4gICAgICBpZiAoZ29vZy5pc0luTW9kdWxlTG9hZGVyXygpKSB7XG4gICAgICAgIHJldHVybiBnb29nLm1vZHVsZS5nZXRJbnRlcm5hbF8obmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZ29vZy5FTkFCTEVfREVCVUdfTE9BREVSKSB7XG4gICAgICB2YXIgcGF0aCA9IGdvb2cuZ2V0UGF0aEZyb21EZXBzXyhuYW1lKTtcbiAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgIGdvb2cud3JpdGVTY3JpcHRzXyhwYXRoKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGVycm9yTWVzc2FnZSA9ICdnb29nLnJlcXVpcmUgY291bGQgbm90IGZpbmQ6ICcgKyBuYW1lO1xuICAgIGdvb2cubG9nVG9Db25zb2xlXyhlcnJvck1lc3NhZ2UpO1xuXG4gICAgdGhyb3cgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFBhdGggZm9yIGluY2x1ZGVkIHNjcmlwdHMuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5nb29nLmJhc2VQYXRoID0gJyc7XG5cblxuLyoqXG4gKiBBIGhvb2sgZm9yIG92ZXJyaWRpbmcgdGhlIGJhc2UgcGF0aC5cbiAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfVxuICovXG5nb29nLmdsb2JhbC5DTE9TVVJFX0JBU0VfUEFUSDtcblxuXG4vKipcbiAqIFdoZXRoZXIgdG8gd3JpdGUgb3V0IENsb3N1cmUncyBkZXBzIGZpbGUuIEJ5IGRlZmF1bHQsIHRoZSBkZXBzIGFyZSB3cml0dGVuLlxuICogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfVxuICovXG5nb29nLmdsb2JhbC5DTE9TVVJFX05PX0RFUFM7XG5cblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRvIGltcG9ydCBhIHNpbmdsZSBzY3JpcHQuIFRoaXMgaXMgbWVhbnQgdG8gYmUgb3ZlcnJpZGRlbiB3aGVuXG4gKiBDbG9zdXJlIGlzIGJlaW5nIHJ1biBpbiBub24tSFRNTCBjb250ZXh0cywgc3VjaCBhcyB3ZWIgd29ya2Vycy4gSXQncyBkZWZpbmVkXG4gKiBpbiB0aGUgZ2xvYmFsIHNjb3BlIHNvIHRoYXQgaXQgY2FuIGJlIHNldCBiZWZvcmUgYmFzZS5qcyBpcyBsb2FkZWQsIHdoaWNoXG4gKiBhbGxvd3MgZGVwcy5qcyB0byBiZSBpbXBvcnRlZCBwcm9wZXJseS5cbiAqXG4gKiBUaGUgZnVuY3Rpb24gaXMgcGFzc2VkIHRoZSBzY3JpcHQgc291cmNlLCB3aGljaCBpcyBhIHJlbGF0aXZlIFVSSS4gSXQgc2hvdWxkXG4gKiByZXR1cm4gdHJ1ZSBpZiB0aGUgc2NyaXB0IHdhcyBpbXBvcnRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICogQHR5cGUgeyhmdW5jdGlvbihzdHJpbmcpOiBib29sZWFuKXx1bmRlZmluZWR9XG4gKi9cbmdvb2cuZ2xvYmFsLkNMT1NVUkVfSU1QT1JUX1NDUklQVDtcblxuXG4vKipcbiAqIE51bGwgZnVuY3Rpb24gdXNlZCBmb3IgZGVmYXVsdCB2YWx1ZXMgb2YgY2FsbGJhY2tzLCBldGMuXG4gKiBAcmV0dXJuIHt2b2lkfSBOb3RoaW5nLlxuICovXG5nb29nLm51bGxGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge307XG5cblxuLyoqXG4gKiBXaGVuIGRlZmluaW5nIGEgY2xhc3MgRm9vIHdpdGggYW4gYWJzdHJhY3QgbWV0aG9kIGJhcigpLCB5b3UgY2FuIGRvOlxuICogRm9vLnByb3RvdHlwZS5iYXIgPSBnb29nLmFic3RyYWN0TWV0aG9kXG4gKlxuICogTm93IGlmIGEgc3ViY2xhc3Mgb2YgRm9vIGZhaWxzIHRvIG92ZXJyaWRlIGJhcigpLCBhbiBlcnJvciB3aWxsIGJlIHRocm93blxuICogd2hlbiBiYXIoKSBpcyBpbnZva2VkLlxuICpcbiAqIE5vdGU6IFRoaXMgZG9lcyBub3QgdGFrZSB0aGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gb3ZlcnJpZGUgYXMgYW4gYXJndW1lbnRcbiAqIGJlY2F1c2UgdGhhdCB3b3VsZCBtYWtlIGl0IG1vcmUgZGlmZmljdWx0IHRvIG9iZnVzY2F0ZSBvdXIgSmF2YVNjcmlwdCBjb2RlLlxuICpcbiAqIEB0eXBlIHshRnVuY3Rpb259XG4gKiBAdGhyb3dzIHtFcnJvcn0gd2hlbiBpbnZva2VkIHRvIGluZGljYXRlIHRoZSBtZXRob2Qgc2hvdWxkIGJlIG92ZXJyaWRkZW4uXG4gKi9cbmdvb2cuYWJzdHJhY3RNZXRob2QgPSBmdW5jdGlvbigpIHtcbiAgdGhyb3cgRXJyb3IoJ3VuaW1wbGVtZW50ZWQgYWJzdHJhY3QgbWV0aG9kJyk7XG59O1xuXG5cbi8qKlxuICogQWRkcyBhIHtAY29kZSBnZXRJbnN0YW5jZX0gc3RhdGljIG1ldGhvZCB0aGF0IGFsd2F5cyByZXR1cm5zIHRoZSBzYW1lXG4gKiBpbnN0YW5jZSBvYmplY3QuXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gY3RvciBUaGUgY29uc3RydWN0b3IgZm9yIHRoZSBjbGFzcyB0byBhZGQgdGhlIHN0YXRpY1xuICogICAgIG1ldGhvZCB0by5cbiAqL1xuZ29vZy5hZGRTaW5nbGV0b25HZXR0ZXIgPSBmdW5jdGlvbihjdG9yKSB7XG4gIGN0b3IuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoY3Rvci5pbnN0YW5jZV8pIHtcbiAgICAgIHJldHVybiBjdG9yLmluc3RhbmNlXztcbiAgICB9XG4gICAgaWYgKGdvb2cuREVCVUcpIHtcbiAgICAgIC8vIE5PVEU6IEpTQ29tcGlsZXIgY2FuJ3Qgb3B0aW1pemUgYXdheSBBcnJheSNwdXNoLlxuICAgICAgZ29vZy5pbnN0YW50aWF0ZWRTaW5nbGV0b25zX1tnb29nLmluc3RhbnRpYXRlZFNpbmdsZXRvbnNfLmxlbmd0aF0gPSBjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gY3Rvci5pbnN0YW5jZV8gPSBuZXcgY3RvcjtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBBbGwgc2luZ2xldG9uIGNsYXNzZXMgdGhhdCBoYXZlIGJlZW4gaW5zdGFudGlhdGVkLCBmb3IgdGVzdGluZy4gRG9uJ3QgcmVhZFxuICogaXQgZGlyZWN0bHksIHVzZSB0aGUge0Bjb2RlIGdvb2cudGVzdGluZy5zaW5nbGV0b259IG1vZHVsZS4gVGhlIGNvbXBpbGVyXG4gKiByZW1vdmVzIHRoaXMgdmFyaWFibGUgaWYgdW51c2VkLlxuICogQHR5cGUgeyFBcnJheTwhRnVuY3Rpb24+fVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5pbnN0YW50aWF0ZWRTaW5nbGV0b25zXyA9IFtdO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0byBsb2FkIGdvb2cubW9kdWxlcyB1c2luZyB7QGNvZGUgZXZhbH0gd2hlbiB1c2luZ1xuICogdGhlIGRlYnVnIGxvYWRlci4gIFRoaXMgcHJvdmlkZXMgYSBiZXR0ZXIgZGVidWdnaW5nIGV4cGVyaWVuY2UgYXMgdGhlXG4gKiBzb3VyY2UgaXMgdW5tb2RpZmllZCBhbmQgY2FuIGJlIGVkaXRlZCB1c2luZyBDaHJvbWUgV29ya3NwYWNlcyBvciBzaW1pbGFyLlxuICogSG93ZXZlciBpbiBzb21lIGVudmlyb25tZW50cyB0aGUgdXNlIG9mIHtAY29kZSBldmFsfSBpcyBiYW5uZWRcbiAqIHNvIHdlIHByb3ZpZGUgYW4gYWx0ZXJuYXRpdmUuXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLkxPQURfTU9EVUxFX1VTSU5HX0VWQUwnLCB0cnVlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGV4cG9ydHMgb2YgZ29vZy5tb2R1bGVzIHNob3VsZCBiZSBzZWFsZWQgd2hlblxuICogcG9zc2libGUuXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLlNFQUxfTU9EVUxFX0VYUE9SVFMnLCBnb29nLkRFQlVHKTtcblxuXG4vKipcbiAqIFRoZSByZWdpc3RyeSBvZiBpbml0aWFsaXplZCBtb2R1bGVzOlxuICogdGhlIG1vZHVsZSBpZGVudGlmaWVyIHRvIG1vZHVsZSBleHBvcnRzIG1hcC5cbiAqIEBwcml2YXRlIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsID8+fVxuICovXG5nb29nLmxvYWRlZE1vZHVsZXNfID0ge307XG5cblxuLyoqXG4gKiBUcnVlIGlmIGdvb2cuZGVwZW5kZW5jaWVzXyBpcyBhdmFpbGFibGUuXG4gKiBAY29uc3Qge2Jvb2xlYW59XG4gKi9cbmdvb2cuREVQRU5ERU5DSUVTX0VOQUJMRUQgPSAhQ09NUElMRUQgJiYgZ29vZy5FTkFCTEVfREVCVUdfTE9BREVSO1xuXG5cbmlmIChnb29nLkRFUEVOREVOQ0lFU19FTkFCTEVEKSB7XG5cbiAgLyoqXG4gICAqIFRoaXMgb2JqZWN0IGlzIHVzZWQgdG8ga2VlcCB0cmFjayBvZiBkZXBlbmRlbmNpZXMgYW5kIG90aGVyIGRhdGEgdGhhdCBpc1xuICAgKiB1c2VkIGZvciBsb2FkaW5nIHNjcmlwdHMuXG4gICAqIEBwcml2YXRlXG4gICAqIEB0eXBlIHt7XG4gICAqICAgcGF0aElzTW9kdWxlOiAhT2JqZWN0PHN0cmluZywgYm9vbGVhbj4sXG4gICAqICAgbmFtZVRvUGF0aDogIU9iamVjdDxzdHJpbmcsIHN0cmluZz4sXG4gICAqICAgcmVxdWlyZXM6ICFPYmplY3Q8c3RyaW5nLCAhT2JqZWN0PHN0cmluZywgYm9vbGVhbj4+LFxuICAgKiAgIHZpc2l0ZWQ6ICFPYmplY3Q8c3RyaW5nLCBib29sZWFuPixcbiAgICogICB3cml0dGVuOiAhT2JqZWN0PHN0cmluZywgYm9vbGVhbj4sXG4gICAqICAgZGVmZXJyZWQ6ICFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+XG4gICAqIH19XG4gICAqL1xuICBnb29nLmRlcGVuZGVuY2llc18gPSB7XG4gICAgcGF0aElzTW9kdWxlOiB7fSwgLy8gMSB0byAxXG5cbiAgICBuYW1lVG9QYXRoOiB7fSwgLy8gMSB0byAxXG5cbiAgICByZXF1aXJlczoge30sIC8vIDEgdG8gbWFueVxuXG4gICAgLy8gVXNlZCB3aGVuIHJlc29sdmluZyBkZXBlbmRlbmNpZXMgdG8gcHJldmVudCB1cyBmcm9tIHZpc2l0aW5nIGZpbGUgdHdpY2UuXG4gICAgdmlzaXRlZDoge30sXG5cbiAgICB3cml0dGVuOiB7fSwgLy8gVXNlZCB0byBrZWVwIHRyYWNrIG9mIHNjcmlwdCBmaWxlcyB3ZSBoYXZlIHdyaXR0ZW4uXG5cbiAgICBkZWZlcnJlZDoge30gLy8gVXNlZCB0byB0cmFjayBkZWZlcnJlZCBtb2R1bGUgZXZhbHVhdGlvbnMgaW4gb2xkIElFc1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFRyaWVzIHRvIGRldGVjdCB3aGV0aGVyIGlzIGluIHRoZSBjb250ZXh0IG9mIGFuIEhUTUwgZG9jdW1lbnQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgaXQgbG9va3MgbGlrZSBIVE1MIGRvY3VtZW50LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ29vZy5pbkh0bWxEb2N1bWVudF8gPSBmdW5jdGlvbigpIHtcbiAgICAvKiogQHR5cGUge0RvY3VtZW50fSAqL1xuICAgIHZhciBkb2MgPSBnb29nLmdsb2JhbC5kb2N1bWVudDtcbiAgICByZXR1cm4gdHlwZW9mIGRvYyAhPSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAnd3JpdGUnIGluIGRvYzsgIC8vIFhVTERvY3VtZW50IG1pc3NlcyB3cml0ZS5cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBUcmllcyB0byBkZXRlY3QgdGhlIGJhc2UgcGF0aCBvZiBiYXNlLmpzIHNjcmlwdCB0aGF0IGJvb3RzdHJhcHMgQ2xvc3VyZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuZmluZEJhc2VQYXRoXyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChnb29nLmlzRGVmKGdvb2cuZ2xvYmFsLkNMT1NVUkVfQkFTRV9QQVRIKSkge1xuICAgICAgZ29vZy5iYXNlUGF0aCA9IGdvb2cuZ2xvYmFsLkNMT1NVUkVfQkFTRV9QQVRIO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoIWdvb2cuaW5IdG1sRG9jdW1lbnRfKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLyoqIEB0eXBlIHtEb2N1bWVudH0gKi9cbiAgICB2YXIgZG9jID0gZ29vZy5nbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHNjcmlwdHMgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1NDUklQVCcpO1xuICAgIC8vIFNlYXJjaCBiYWNrd2FyZHMgc2luY2UgdGhlIGN1cnJlbnQgc2NyaXB0IGlzIGluIGFsbW9zdCBhbGwgY2FzZXMgdGhlIG9uZVxuICAgIC8vIHRoYXQgaGFzIGJhc2UuanMuXG4gICAgZm9yICh2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHZhciBzY3JpcHQgPSAvKiogQHR5cGUgeyFIVE1MU2NyaXB0RWxlbWVudH0gKi8gKHNjcmlwdHNbaV0pO1xuICAgICAgdmFyIHNyYyA9IHNjcmlwdC5zcmM7XG4gICAgICB2YXIgcW1hcmsgPSBzcmMubGFzdEluZGV4T2YoJz8nKTtcbiAgICAgIHZhciBsID0gcW1hcmsgPT0gLTEgPyBzcmMubGVuZ3RoIDogcW1hcms7XG4gICAgICBpZiAoc3JjLnN1YnN0cihsIC0gNywgNykgPT0gJ2Jhc2UuanMnKSB7XG4gICAgICAgIGdvb2cuYmFzZVBhdGggPSBzcmMuc3Vic3RyKDAsIGwgLSA3KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBJbXBvcnRzIGEgc2NyaXB0IGlmLCBhbmQgb25seSBpZiwgdGhhdCBzY3JpcHQgaGFzbid0IGFscmVhZHkgYmVlbiBpbXBvcnRlZC5cbiAgICogKE11c3QgYmUgY2FsbGVkIGF0IGV4ZWN1dGlvbiB0aW1lKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3JjIFNjcmlwdCBzb3VyY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X3NvdXJjZVRleHQgVGhlIG9wdGlvbmFsbHkgc291cmNlIHRleHQgdG8gZXZhbHVhdGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuaW1wb3J0U2NyaXB0XyA9IGZ1bmN0aW9uKHNyYywgb3B0X3NvdXJjZVRleHQpIHtcbiAgICB2YXIgaW1wb3J0U2NyaXB0ID0gZ29vZy5nbG9iYWwuQ0xPU1VSRV9JTVBPUlRfU0NSSVBUIHx8XG4gICAgICAgIGdvb2cud3JpdGVTY3JpcHRUYWdfO1xuICAgIGlmIChpbXBvcnRTY3JpcHQoc3JjLCBvcHRfc291cmNlVGV4dCkpIHtcbiAgICAgIGdvb2cuZGVwZW5kZW5jaWVzXy53cml0dGVuW3NyY10gPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuXG4gIC8qKiBAY29uc3QgQHByaXZhdGUge2Jvb2xlYW59ICovXG4gIGdvb2cuSVNfT0xEX0lFXyA9ICEhKCFnb29nLmdsb2JhbC5hdG9iICYmIGdvb2cuZ2xvYmFsLmRvY3VtZW50ICYmXG4gICAgICBnb29nLmdsb2JhbC5kb2N1bWVudC5hbGwpO1xuXG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgVVJMIGluaXRpYXRlIHJldHJpZXZhbCBhbmQgZXhlY3V0aW9uIG9mIHRoZSBtb2R1bGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgU2NyaXB0IHNvdXJjZSBVUkwuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnb29nLmltcG9ydE1vZHVsZV8gPSBmdW5jdGlvbihzcmMpIHtcbiAgICAvLyBJbiBhbiBhdHRlbXB0IHRvIGtlZXAgYnJvd3NlcnMgZnJvbSB0aW1pbmcgb3V0IGxvYWRpbmcgc2NyaXB0cyB1c2luZ1xuICAgIC8vIHN5bmNocm9ub3VzIFhIUnMsIHB1dCBlYWNoIGxvYWQgaW4gaXRzIG93biBzY3JpcHQgYmxvY2suXG4gICAgdmFyIGJvb3RzdHJhcCA9ICdnb29nLnJldHJpZXZlQW5kRXhlY01vZHVsZV8oXCInICsgc3JjICsgJ1wiKTsnO1xuXG4gICAgaWYgKGdvb2cuaW1wb3J0U2NyaXB0XygnJywgYm9vdHN0cmFwKSkge1xuICAgICAgZ29vZy5kZXBlbmRlbmNpZXNfLndyaXR0ZW5bc3JjXSA9IHRydWU7XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqIEBwcml2YXRlIHshQXJyYXk8c3RyaW5nPn0gKi9cbiAgZ29vZy5xdWV1ZWRNb2R1bGVzXyA9IFtdO1xuXG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcHByb3ByaWF0ZSBtb2R1bGUgdGV4dC4gU3VpdGFibGUgdG8gaW5zZXJ0IGludG9cbiAgICogYSBzY3JpcHQgdGFnICh0aGF0IGlzIHVuZXNjYXBlZCkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzcmNVcmxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNjcmlwdFRleHRcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ29vZy53cmFwTW9kdWxlXyA9IGZ1bmN0aW9uKHNyY1VybCwgc2NyaXB0VGV4dCkge1xuICAgIGlmICghZ29vZy5MT0FEX01PRFVMRV9VU0lOR19FVkFMIHx8ICFnb29nLmlzRGVmKGdvb2cuZ2xvYmFsLkpTT04pKSB7XG4gICAgICByZXR1cm4gJycgK1xuICAgICAgICAgICdnb29nLmxvYWRNb2R1bGUoZnVuY3Rpb24oZXhwb3J0cykgeycgK1xuICAgICAgICAgICdcInVzZSBzdHJpY3RcIjsnICtcbiAgICAgICAgICBzY3JpcHRUZXh0ICtcbiAgICAgICAgICAnXFxuJyArIC8vIHRlcm1pbmF0ZSBhbnkgdHJhaWxpbmcgc2luZ2xlIGxpbmUgY29tbWVudC5cbiAgICAgICAgICAnO3JldHVybiBleHBvcnRzJyArXG4gICAgICAgICAgJ30pOycgK1xuICAgICAgICAgICdcXG4vLyMgc291cmNlVVJMPScgKyBzcmNVcmwgKyAnXFxuJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnICtcbiAgICAgICAgICAnZ29vZy5sb2FkTW9kdWxlKCcgK1xuICAgICAgICAgIGdvb2cuZ2xvYmFsLkpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICBzY3JpcHRUZXh0ICsgJ1xcbi8vIyBzb3VyY2VVUkw9JyArIHNyY1VybCArICdcXG4nKSArXG4gICAgICAgICAgJyk7JztcbiAgICB9XG4gIH07XG5cbiAgLy8gT24gSUU5IGFuZCBlYXJsaWVyLCBpdCBpcyBuZWNlc3NhcnkgdG8gaGFuZGxlXG4gIC8vIGRlZmVycmVkIG1vZHVsZSBsb2Fkcy4gSW4gbGF0ZXIgYnJvd3NlcnMsIHRoZVxuICAvLyBjb2RlIHRvIGJlIGV2YWx1YXRlZCBpcyBzaW1wbHkgaW5zZXJ0ZWQgYXMgYSBzY3JpcHRcbiAgLy8gYmxvY2sgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIFRvIGV2YWwgZGVmZXJyZWRcbiAgLy8gY29kZSBhdCB0aGUgcmlnaHQgdGltZSwgd2UgcGlnZ3kgYmFjayBvbiBnb29nLnJlcXVpcmUgdG8gY2FsbFxuICAvLyBnb29nLm1heWJlUHJvY2Vzc0RlZmVycmVkRGVwXy5cbiAgLy9cbiAgLy8gVGhlIGdvb2cucmVxdWlyZXMgYXJlIHVzZWQgYm90aCB0byBib290c3RyYXBcbiAgLy8gdGhlIGxvYWRpbmcgcHJvY2VzcyAod2hlbiBubyBkZXBzIGFyZSBhdmFpbGFibGUpIGFuZFxuICAvLyBkZWNsYXJlIHRoYXQgdGhleSBzaG91bGQgYmUgYXZhaWxhYmxlLlxuICAvL1xuICAvLyBIZXJlIHdlIGV2YWwgdGhlIHNvdXJjZXMsIGlmIGFsbCB0aGUgZGVwcyBhcmUgYXZhaWxhYmxlXG4gIC8vIGVpdGhlciBhbHJlYWR5IGV2YWwnZCBvciBnb29nLnJlcXVpcmUnZC4gIFRoaXMgd2lsbFxuICAvLyBiZSB0aGUgY2FzZSB3aGVuIGFsbCB0aGUgZGVwZW5kZW5jaWVzIGhhdmUgYWxyZWFkeVxuICAvLyBiZWVuIGxvYWRlZCwgYW5kIHRoZSBkZXBlbmRlbnQgbW9kdWxlIGlzIGxvYWRlZC5cbiAgLy9cbiAgLy8gQnV0IHRoaXMgYWxvbmUgaXNuJ3Qgc3VmZmljaWVudCBiZWNhdXNlIGl0IGlzIGFsc29cbiAgLy8gbmVjZXNzYXJ5IHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGVyZSBpcyBubyByb290XG4gIC8vIHRoYXQgaXMgbm90IGRlZmVycmVkLiAgRm9yIHRoYXQgdGhlcmUgd2UgcmVnaXN0ZXIgZm9yIGFuIGV2ZW50XG4gIC8vIGFuZCB0cmlnZ2VyIGdvb2cubG9hZFF1ZXVlZE1vZHVsZXNfIGhhbmRsZSBhbnkgcmVtYWluaW5nIGRlZmVycmVkXG4gIC8vIGV2YWx1YXRpb25zLlxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYW55IHJlbWFpbmluZyBkZWZlcnJlZCBnb29nLm1vZHVsZSBldmFscy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cubG9hZFF1ZXVlZE1vZHVsZXNfID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvdW50ID0gZ29vZy5xdWV1ZWRNb2R1bGVzXy5sZW5ndGg7XG4gICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgdmFyIHF1ZXVlID0gZ29vZy5xdWV1ZWRNb2R1bGVzXztcbiAgICAgIGdvb2cucXVldWVkTW9kdWxlc18gPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICB2YXIgcGF0aCA9IHF1ZXVlW2ldO1xuICAgICAgICBnb29nLm1heWJlUHJvY2Vzc0RlZmVycmVkUGF0aF8ocGF0aCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIEV2YWwgdGhlIG5hbWVkIG1vZHVsZSBpZiBpdHMgZGVwZW5kZW5jaWVzIGFyZVxuICAgKiBhdmFpbGFibGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBtb2R1bGUgdG8gbG9hZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cubWF5YmVQcm9jZXNzRGVmZXJyZWREZXBfID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmIChnb29nLmlzRGVmZXJyZWRNb2R1bGVfKG5hbWUpICYmXG4gICAgICAgIGdvb2cuYWxsRGVwc0FyZUF2YWlsYWJsZV8obmFtZSkpIHtcbiAgICAgIHZhciBwYXRoID0gZ29vZy5nZXRQYXRoRnJvbURlcHNfKG5hbWUpO1xuICAgICAgZ29vZy5tYXliZVByb2Nlc3NEZWZlcnJlZFBhdGhfKGdvb2cuYmFzZVBhdGggKyBwYXRoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBtb2R1bGUgdG8gY2hlY2suXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG5hbWUgcmVwcmVzZW50cyBhXG4gICAqICAgICBtb2R1bGUgd2hvc2UgZXZhbHVhdGlvbiBoYXMgYmVlbiBkZWZlcnJlZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuaXNEZWZlcnJlZE1vZHVsZV8gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIHBhdGggPSBnb29nLmdldFBhdGhGcm9tRGVwc18obmFtZSk7XG4gICAgaWYgKHBhdGggJiYgZ29vZy5kZXBlbmRlbmNpZXNfLnBhdGhJc01vZHVsZVtwYXRoXSkge1xuICAgICAgdmFyIGFic3BhdGggPSBnb29nLmJhc2VQYXRoICsgcGF0aDtcbiAgICAgIHJldHVybiAoYWJzcGF0aCkgaW4gZ29vZy5kZXBlbmRlbmNpZXNfLmRlZmVycmVkO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBtb2R1bGUgdG8gY2hlY2suXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG5hbWUgcmVwcmVzZW50cyBhXG4gICAqICAgICBtb2R1bGUgd2hvc2UgZGVjbGFyZWQgZGVwZW5kZW5jaWVzIGhhdmUgYWxsIGJlZW4gbG9hZGVkXG4gICAqICAgICAoZXZhbCdkIG9yIGEgZGVmZXJyZWQgbW9kdWxlIGxvYWQpXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnb29nLmFsbERlcHNBcmVBdmFpbGFibGVfID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBwYXRoID0gZ29vZy5nZXRQYXRoRnJvbURlcHNfKG5hbWUpO1xuICAgIGlmIChwYXRoICYmIChwYXRoIGluIGdvb2cuZGVwZW5kZW5jaWVzXy5yZXF1aXJlcykpIHtcbiAgICAgIGZvciAodmFyIHJlcXVpcmVOYW1lIGluIGdvb2cuZGVwZW5kZW5jaWVzXy5yZXF1aXJlc1twYXRoXSkge1xuICAgICAgICBpZiAoIWdvb2cuaXNQcm92aWRlZF8ocmVxdWlyZU5hbWUpICYmXG4gICAgICAgICAgICAhZ29vZy5pc0RlZmVycmVkTW9kdWxlXyhyZXF1aXJlTmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFic3BhdGhcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cubWF5YmVQcm9jZXNzRGVmZXJyZWRQYXRoXyA9IGZ1bmN0aW9uKGFic3BhdGgpIHtcbiAgICBpZiAoYWJzcGF0aCBpbiBnb29nLmRlcGVuZGVuY2llc18uZGVmZXJyZWQpIHtcbiAgICAgIHZhciBzcmMgPSBnb29nLmRlcGVuZGVuY2llc18uZGVmZXJyZWRbYWJzcGF0aF07XG4gICAgICBkZWxldGUgZ29vZy5kZXBlbmRlbmNpZXNfLmRlZmVycmVkW2Fic3BhdGhdO1xuICAgICAgZ29vZy5nbG9iYWxFdmFsKHNyYyk7XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6P3xzdHJpbmd9IG1vZHVsZURlZiBUaGUgbW9kdWxlIGRlZmluaXRpb24uXG4gICAqL1xuICBnb29nLmxvYWRNb2R1bGUgPSBmdW5jdGlvbihtb2R1bGVEZWYpIHtcbiAgICAvLyBOT1RFOiB3ZSBhbGxvdyBmdW5jdGlvbiBkZWZpbml0aW9ucyB0byBiZSBlaXRoZXIgaW4gdGhlIGZyb21cbiAgICAvLyBvZiBhIHN0cmluZyB0byBldmFsICh3aGljaCBrZWVwcyB0aGUgb3JpZ2luYWwgc291cmNlIGludGFjdCkgb3JcbiAgICAvLyBpbiBhIGV2YWwgZm9yYmlkZGVuIGVudmlyb25tZW50IChDU1ApIHdlIGFsbG93IGEgZnVuY3Rpb24gZGVmaW5pdGlvblxuICAgIC8vIHdoaWNoIGluIGl0cyBib2R5IG11c3QgY2FsbCB7QGNvZGUgZ29vZy5tb2R1bGV9LCBhbmQgcmV0dXJuIHRoZSBleHBvcnRzXG4gICAgLy8gb2YgdGhlIG1vZHVsZS5cbiAgICB2YXIgcHJldmlvdXNTdGF0ZSA9IGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfO1xuICAgIHRyeSB7XG4gICAgICBnb29nLm1vZHVsZUxvYWRlclN0YXRlXyA9IHttb2R1bGVOYW1lOiB1bmRlZmluZWR9O1xuICAgICAgdmFyIGV4cG9ydHM7XG4gICAgICBpZiAoZ29vZy5pc0Z1bmN0aW9uKG1vZHVsZURlZikpIHtcbiAgICAgICAgZXhwb3J0cyA9IG1vZHVsZURlZi5jYWxsKGdvb2cuZ2xvYmFsLCB7fSk7XG4gICAgICB9IGVsc2UgaWYgKGdvb2cuaXNTdHJpbmcobW9kdWxlRGVmKSkge1xuICAgICAgICBleHBvcnRzID0gZ29vZy5sb2FkTW9kdWxlRnJvbVNvdXJjZV8uY2FsbChnb29nLmdsb2JhbCwgbW9kdWxlRGVmKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIG1vZHVsZSBkZWZpbml0aW9uJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtb2R1bGVOYW1lID0gZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8ubW9kdWxlTmFtZTtcbiAgICAgIGlmICghZ29vZy5pc1N0cmluZyhtb2R1bGVOYW1lKSB8fCAhbW9kdWxlTmFtZSkge1xuICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBtb2R1bGUgbmFtZSBcXFwiJyArIG1vZHVsZU5hbWUgKyAnXFxcIicpO1xuICAgICAgfVxuXG4gICAgICAvLyBEb24ndCBzZWFsIGxlZ2FjeSBuYW1lc3BhY2VzIGFzIHRoZXkgbWF5IGJlIHVzZXMgYXMgYSBwYXJlbnQgb2ZcbiAgICAgIC8vIGFub3RoZXIgbmFtZXNwYWNlXG4gICAgICBpZiAoZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8uZGVjbGFyZUxlZ2FjeU5hbWVzcGFjZSkge1xuICAgICAgICBnb29nLmNvbnN0cnVjdE5hbWVzcGFjZV8obW9kdWxlTmFtZSwgZXhwb3J0cyk7XG4gICAgICB9IGVsc2UgaWYgKGdvb2cuU0VBTF9NT0RVTEVfRVhQT1JUUyAmJiBPYmplY3Quc2VhbCkge1xuICAgICAgICBPYmplY3Quc2VhbChleHBvcnRzKTtcbiAgICAgIH1cblxuICAgICAgZ29vZy5sb2FkZWRNb2R1bGVzX1ttb2R1bGVOYW1lXSA9IGV4cG9ydHM7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfID0gcHJldmlvdXNTdGF0ZTtcbiAgICB9XG4gIH07XG5cblxuICAvKipcbiAgICogQHByaXZhdGUgQGNvbnN0IHtmdW5jdGlvbihzdHJpbmcpOj99XG4gICAqIEBzdXBwcmVzcyB7bmV3Q2hlY2tUeXBlc31cbiAgICovXG4gIGdvb2cubG9hZE1vZHVsZUZyb21Tb3VyY2VfID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gTk9URTogd2UgYXZvaWQgZGVjbGFyaW5nIHBhcmFtZXRlcnMgb3IgbG9jYWwgdmFyaWFibGVzIGhlcmUgdG8gYXZvaWRcbiAgICAvLyBtYXNraW5nIGdsb2JhbHMgb3IgbGVha2luZyB2YWx1ZXMgaW50byB0aGUgbW9kdWxlIGRlZmluaXRpb24uXG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBleHBvcnRzID0ge307XG4gICAgZXZhbChhcmd1bWVudHNbMF0pO1xuICAgIHJldHVybiBleHBvcnRzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFdyaXRlcyBhIG5ldyBzY3JpcHQgcG9pbnRpbmcgdG8ge0Bjb2RlIHNyY30gZGlyZWN0bHkgaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIG1ldGhvZCBpcyBub3QgQ1NQLWNvbXBsaWFudC4gQHNlZSBnb29nLmFwcGVuZFNjcmlwdFNyY05vZGVfIGZvclxuICAgKiB0aGUgZmFsbGJhY2sgbWVjaGFuaXNtLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3JjIFRoZSBzY3JpcHQgVVJMLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ29vZy53cml0ZVNjcmlwdFNyY05vZGVfID0gZnVuY3Rpb24oc3JjKSB7XG4gICAgZ29vZy5nbG9iYWwuZG9jdW1lbnQud3JpdGUoXG4gICAgICAgICc8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiBzcmM9XCInICsgc3JjICsgJ1wiPjwvJyArICdzY3JpcHQ+Jyk7XG4gIH07XG5cblxuICAvKipcbiAgICogQXBwZW5kcyBhIG5ldyBzY3JpcHQgbm9kZSB0byB0aGUgRE9NIHVzaW5nIGEgQ1NQLWNvbXBsaWFudCBtZWNoYW5pc20uIFRoaXNcbiAgICogbWV0aG9kIGV4aXN0cyBhcyBhIGZhbGxiYWNrIGZvciBkb2N1bWVudC53cml0ZSAod2hpY2ggaXMgbm90IGFsbG93ZWQgaW4gYVxuICAgKiBzdHJpY3QgQ1NQIGNvbnRleHQsIGUuZy4sIENocm9tZSBhcHBzKS5cbiAgICpcbiAgICogTk9URTogVGhpcyBtZXRob2QgaXMgbm90IGFuYWxvZ291cyB0byB1c2luZyBkb2N1bWVudC53cml0ZSB0byBpbnNlcnQgYVxuICAgKiA8c2NyaXB0PiB0YWc7IHNwZWNpZmljYWxseSwgdGhlIHVzZXIgYWdlbnQgd2lsbCBleGVjdXRlIGEgc2NyaXB0IGFkZGVkIGJ5XG4gICAqIGRvY3VtZW50LndyaXRlIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBjdXJyZW50IHNjcmlwdCBibG9jayBmaW5pc2hlc1xuICAgKiBleGVjdXRpbmcsIHdoZXJlYXMgdGhlIERPTS1hcHBlbmRlZCBzY3JpcHQgbm9kZSB3aWxsIG5vdCBiZSBleGVjdXRlZCB1bnRpbFxuICAgKiB0aGUgZW50aXJlIGRvY3VtZW50IGlzIHBhcnNlZCBhbmQgZXhlY3V0ZWQuIFRoYXQgaXMgdG8gc2F5LCB0aGlzIHNjcmlwdCBpc1xuICAgKiBhZGRlZCB0byB0aGUgZW5kIG9mIHRoZSBzY3JpcHQgZXhlY3V0aW9uIHF1ZXVlLlxuICAgKlxuICAgKiBUaGUgcGFnZSBtdXN0IG5vdCBhdHRlbXB0IHRvIGNhbGwgZ29vZy5yZXF1aXJlZCBlbnRpdGllcyB1bnRpbCBhZnRlciB0aGVcbiAgICogZG9jdW1lbnQgaGFzIGxvYWRlZCwgZS5nLiwgaW4gb3IgYWZ0ZXIgdGhlIHdpbmRvdy5vbmxvYWQgY2FsbGJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgVGhlIHNjcmlwdCBVUkwuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnb29nLmFwcGVuZFNjcmlwdFNyY05vZGVfID0gZnVuY3Rpb24oc3JjKSB7XG4gICAgLyoqIEB0eXBlIHtEb2N1bWVudH0gKi9cbiAgICB2YXIgZG9jID0gZ29vZy5nbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHNjcmlwdEVsID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIHNjcmlwdEVsLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICBzY3JpcHRFbC5zcmMgPSBzcmM7XG4gICAgc2NyaXB0RWwuZGVmZXIgPSBmYWxzZTtcbiAgICBzY3JpcHRFbC5hc3luYyA9IGZhbHNlO1xuICAgIGRvYy5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdEVsKTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgaW1wb3J0IGZ1bmN0aW9uLiBXcml0ZXMgYSBzY3JpcHQgdGFnIHRvXG4gICAqIGltcG9ydCB0aGUgc2NyaXB0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3JjIFRoZSBzY3JpcHQgdXJsLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9zb3VyY2VUZXh0IFRoZSBvcHRpb25hbGx5IHNvdXJjZSB0ZXh0IHRvIGV2YWx1YXRlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNjcmlwdCB3YXMgaW1wb3J0ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cud3JpdGVTY3JpcHRUYWdfID0gZnVuY3Rpb24oc3JjLCBvcHRfc291cmNlVGV4dCkge1xuICAgIGlmIChnb29nLmluSHRtbERvY3VtZW50XygpKSB7XG4gICAgICAvKiogQHR5cGUge0RvY3VtZW50fSAqL1xuICAgICAgdmFyIGRvYyA9IGdvb2cuZ2xvYmFsLmRvY3VtZW50O1xuXG4gICAgICAvLyBJZiB0aGUgdXNlciB0cmllcyB0byByZXF1aXJlIGEgbmV3IHN5bWJvbCBhZnRlciBkb2N1bWVudCBsb2FkLFxuICAgICAgLy8gc29tZXRoaW5nIGhhcyBnb25lIHRlcnJpYmx5IHdyb25nLiBEb2luZyBhIGRvY3VtZW50LndyaXRlIHdvdWxkXG4gICAgICAvLyB3aXBlIG91dCB0aGUgcGFnZS4gVGhpcyBkb2VzIG5vdCBhcHBseSB0byB0aGUgQ1NQLWNvbXBsaWFudCBtZXRob2RcbiAgICAgIC8vIG9mIHdyaXRpbmcgc2NyaXB0IHRhZ3MuXG4gICAgICBpZiAoIWdvb2cuRU5BQkxFX0NIUk9NRV9BUFBfU0FGRV9TQ1JJUFRfTE9BRElORyAmJlxuICAgICAgICAgIGRvYy5yZWFkeVN0YXRlID09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgLy8gQ2VydGFpbiB0ZXN0IGZyYW1ld29ya3MgbG9hZCBiYXNlLmpzIG11bHRpcGxlIHRpbWVzLCB3aGljaCB0cmllc1xuICAgICAgICAvLyB0byB3cml0ZSBkZXBzLmpzIGVhY2ggdGltZS4gSWYgdGhhdCBoYXBwZW5zLCBqdXN0IGZhaWwgc2lsZW50bHkuXG4gICAgICAgIC8vIFRoZXNlIGZyYW1ld29ya3Mgd2lwZSB0aGUgcGFnZSBiZXR3ZWVuIGVhY2ggbG9hZCBvZiBiYXNlLmpzLCBzbyB0aGlzXG4gICAgICAgIC8vIGlzIE9LLlxuICAgICAgICB2YXIgaXNEZXBzID0gL1xcYmRlcHMuanMkLy50ZXN0KHNyYyk7XG4gICAgICAgIGlmIChpc0RlcHMpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoJ0Nhbm5vdCB3cml0ZSBcIicgKyBzcmMgKyAnXCIgYWZ0ZXIgZG9jdW1lbnQgbG9hZCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBpc09sZElFID0gZ29vZy5JU19PTERfSUVfO1xuXG4gICAgICBpZiAob3B0X3NvdXJjZVRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIWlzT2xkSUUpIHtcbiAgICAgICAgICBpZiAoZ29vZy5FTkFCTEVfQ0hST01FX0FQUF9TQUZFX1NDUklQVF9MT0FESU5HKSB7XG4gICAgICAgICAgICBnb29nLmFwcGVuZFNjcmlwdFNyY05vZGVfKHNyYyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdvb2cud3JpdGVTY3JpcHRTcmNOb2RlXyhzcmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhdGUgPSBcIiBvbnJlYWR5c3RhdGVjaGFuZ2U9J2dvb2cub25TY3JpcHRMb2FkXyh0aGlzLCBcIiArXG4gICAgICAgICAgICAgICsrZ29vZy5sYXN0Tm9uTW9kdWxlU2NyaXB0SW5kZXhfICsgXCIpJyBcIjtcbiAgICAgICAgICBkb2Mud3JpdGUoXG4gICAgICAgICAgICAgICc8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiBzcmM9XCInICtcbiAgICAgICAgICAgICAgICAgIHNyYyArICdcIicgKyBzdGF0ZSArICc+PC8nICsgJ3NjcmlwdD4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9jLndyaXRlKFxuICAgICAgICAgICAgJzxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPicgK1xuICAgICAgICAgICAgb3B0X3NvdXJjZVRleHQgK1xuICAgICAgICAgICAgJzwvJyArICdzY3JpcHQ+Jyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcblxuXG4gIC8qKiBAcHJpdmF0ZSB7bnVtYmVyfSAqL1xuICBnb29nLmxhc3ROb25Nb2R1bGVTY3JpcHRJbmRleF8gPSAwO1xuXG5cbiAgLyoqXG4gICAqIEEgcmVhZHlzdGF0ZWNoYW5nZSBoYW5kbGVyIGZvciBsZWdhY3kgSUVcbiAgICogQHBhcmFtIHshSFRNTFNjcmlwdEVsZW1lbnR9IHNjcmlwdFxuICAgKiBAcGFyYW0ge251bWJlcn0gc2NyaXB0SW5kZXhcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cub25TY3JpcHRMb2FkXyA9IGZ1bmN0aW9uKHNjcmlwdCwgc2NyaXB0SW5kZXgpIHtcbiAgICAvLyBmb3Igbm93IGxvYWQgdGhlIG1vZHVsZXMgd2hlbiB3ZSByZWFjaCB0aGUgbGFzdCBzY3JpcHQsXG4gICAgLy8gbGF0ZXIgYWxsb3cgbW9yZSBpbnRlci1taW5nbGluZy5cbiAgICBpZiAoc2NyaXB0LnJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJyAmJlxuICAgICAgICBnb29nLmxhc3ROb25Nb2R1bGVTY3JpcHRJbmRleF8gPT0gc2NyaXB0SW5kZXgpIHtcbiAgICAgIGdvb2cubG9hZFF1ZXVlZE1vZHVsZXNfKCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyBkZXBlbmRlbmNpZXMgYmFzZWQgb24gdGhlIGRlcGVuZGVuY2llcyBhZGRlZCB1c2luZyBhZGREZXBlbmRlbmN5XG4gICAqIGFuZCBjYWxscyBpbXBvcnRTY3JpcHRfIGluIHRoZSBjb3JyZWN0IG9yZGVyLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aFRvTG9hZCBUaGUgcGF0aCBmcm9tIHdoaWNoIHRvIHN0YXJ0IGRpc2NvdmVyaW5nXG4gICAqICAgICBkZXBlbmRlbmNpZXMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnb29nLndyaXRlU2NyaXB0c18gPSBmdW5jdGlvbihwYXRoVG9Mb2FkKSB7XG4gICAgLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gVGhlIHNjcmlwdHMgd2UgbmVlZCB0byB3cml0ZSB0aGlzIHRpbWUuICovXG4gICAgdmFyIHNjcmlwdHMgPSBbXTtcbiAgICB2YXIgc2VlblNjcmlwdCA9IHt9O1xuICAgIHZhciBkZXBzID0gZ29vZy5kZXBlbmRlbmNpZXNfO1xuXG4gICAgLyoqIEBwYXJhbSB7c3RyaW5nfSBwYXRoICovXG4gICAgZnVuY3Rpb24gdmlzaXROb2RlKHBhdGgpIHtcbiAgICAgIGlmIChwYXRoIGluIGRlcHMud3JpdHRlbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIGhhdmUgYWxyZWFkeSB2aXNpdGVkIHRoaXMgb25lLiBXZSBjYW4gZ2V0IGhlcmUgaWYgd2UgaGF2ZSBjeWNsaWNcbiAgICAgIC8vIGRlcGVuZGVuY2llcy5cbiAgICAgIGlmIChwYXRoIGluIGRlcHMudmlzaXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRlcHMudmlzaXRlZFtwYXRoXSA9IHRydWU7XG5cbiAgICAgIGlmIChwYXRoIGluIGRlcHMucmVxdWlyZXMpIHtcbiAgICAgICAgZm9yICh2YXIgcmVxdWlyZU5hbWUgaW4gZGVwcy5yZXF1aXJlc1twYXRoXSkge1xuICAgICAgICAgIC8vIElmIHRoZSByZXF1aXJlZCBuYW1lIGlzIGRlZmluZWQsIHdlIGFzc3VtZSB0aGF0IGl0IHdhcyBhbHJlYWR5XG4gICAgICAgICAgLy8gYm9vdHN0cmFwcGVkIGJ5IG90aGVyIG1lYW5zLlxuICAgICAgICAgIGlmICghZ29vZy5pc1Byb3ZpZGVkXyhyZXF1aXJlTmFtZSkpIHtcbiAgICAgICAgICAgIGlmIChyZXF1aXJlTmFtZSBpbiBkZXBzLm5hbWVUb1BhdGgpIHtcbiAgICAgICAgICAgICAgdmlzaXROb2RlKGRlcHMubmFtZVRvUGF0aFtyZXF1aXJlTmFtZV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1VuZGVmaW5lZCBuYW1lVG9QYXRoIGZvciAnICsgcmVxdWlyZU5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIShwYXRoIGluIHNlZW5TY3JpcHQpKSB7XG4gICAgICAgIHNlZW5TY3JpcHRbcGF0aF0gPSB0cnVlO1xuICAgICAgICBzY3JpcHRzLnB1c2gocGF0aCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmlzaXROb2RlKHBhdGhUb0xvYWQpO1xuXG4gICAgLy8gcmVjb3JkIHRoYXQgd2UgYXJlIGdvaW5nIHRvIGxvYWQgYWxsIHRoZXNlIHNjcmlwdHMuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGF0aCA9IHNjcmlwdHNbaV07XG4gICAgICBnb29nLmRlcGVuZGVuY2llc18ud3JpdHRlbltwYXRoXSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gSWYgYSBtb2R1bGUgaXMgbG9hZGVkIHN5bmNocm9ub3VzbHkgdGhlbiB3ZSBuZWVkIHRvXG4gICAgLy8gY2xlYXIgdGhlIGN1cnJlbnQgaW5Nb2R1bGVMb2FkZXIgdmFsdWUsIGFuZCByZXN0b3JlIGl0IHdoZW4gd2UgYXJlXG4gICAgLy8gZG9uZSBsb2FkaW5nIHRoZSBjdXJyZW50IFwicmVxdWlyZXNcIi5cbiAgICB2YXIgbW9kdWxlU3RhdGUgPSBnb29nLm1vZHVsZUxvYWRlclN0YXRlXztcbiAgICBnb29nLm1vZHVsZUxvYWRlclN0YXRlXyA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXRoID0gc2NyaXB0c1tpXTtcbiAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgIGlmICghZGVwcy5wYXRoSXNNb2R1bGVbcGF0aF0pIHtcbiAgICAgICAgICBnb29nLmltcG9ydFNjcmlwdF8oZ29vZy5iYXNlUGF0aCArIHBhdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdvb2cuaW1wb3J0TW9kdWxlXyhnb29nLmJhc2VQYXRoICsgcGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfID0gbW9kdWxlU3RhdGU7XG4gICAgICAgIHRocm93IEVycm9yKCdVbmRlZmluZWQgc2NyaXB0IGlucHV0Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcmVzdG9yZSB0aGUgY3VycmVudCBcIm1vZHVsZSBsb2FkaW5nIHN0YXRlXCJcbiAgICBnb29nLm1vZHVsZUxvYWRlclN0YXRlXyA9IG1vZHVsZVN0YXRlO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIExvb2tzIGF0IHRoZSBkZXBlbmRlbmN5IHJ1bGVzIGFuZCB0cmllcyB0byBkZXRlcm1pbmUgdGhlIHNjcmlwdCBmaWxlIHRoYXRcbiAgICogZnVsZmlsbHMgYSBwYXJ0aWN1bGFyIHJ1bGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBydWxlIEluIHRoZSBmb3JtIGdvb2cubmFtZXNwYWNlLkNsYXNzIG9yIHByb2plY3Quc2NyaXB0LlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBVcmwgY29ycmVzcG9uZGluZyB0byB0aGUgcnVsZSwgb3IgbnVsbC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuZ2V0UGF0aEZyb21EZXBzXyA9IGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICBpZiAocnVsZSBpbiBnb29nLmRlcGVuZGVuY2llc18ubmFtZVRvUGF0aCkge1xuICAgICAgcmV0dXJuIGdvb2cuZGVwZW5kZW5jaWVzXy5uYW1lVG9QYXRoW3J1bGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgZ29vZy5maW5kQmFzZVBhdGhfKCk7XG5cbiAgLy8gQWxsb3cgcHJvamVjdHMgdG8gbWFuYWdlIHRoZSBkZXBzIGZpbGVzIHRoZW1zZWx2ZXMuXG4gIGlmICghZ29vZy5nbG9iYWwuQ0xPU1VSRV9OT19ERVBTKSB7XG4gICAgZ29vZy5pbXBvcnRTY3JpcHRfKGdvb2cuYmFzZVBhdGggKyAnZGVwcy5qcycpO1xuICB9XG59XG5cblxuLyoqXG4gKiBOb3JtYWxpemUgYSBmaWxlIHBhdGggYnkgcmVtb3ZpbmcgcmVkdW5kYW50IFwiLi5cIiBhbmQgZXh0cmFuZW91cyBcIi5cIiBmaWxlXG4gKiBwYXRoIGNvbXBvbmVudHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ub3JtYWxpemVQYXRoXyA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIGNvbXBvbmVudHMgPSBwYXRoLnNwbGl0KCcvJyk7XG4gIHZhciBpID0gMDtcbiAgd2hpbGUgKGkgPCBjb21wb25lbnRzLmxlbmd0aCkge1xuICAgIGlmIChjb21wb25lbnRzW2ldID09ICcuJykge1xuICAgICAgY29tcG9uZW50cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChpICYmIGNvbXBvbmVudHNbaV0gPT0gJy4uJyAmJlxuICAgICAgICBjb21wb25lbnRzW2kgLSAxXSAmJiBjb21wb25lbnRzW2kgLSAxXSAhPSAnLi4nKSB7XG4gICAgICBjb21wb25lbnRzLnNwbGljZSgtLWksIDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpKys7XG4gICAgfVxuICB9XG4gIHJldHVybiBjb21wb25lbnRzLmpvaW4oJy8nKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkcyBmaWxlIGJ5IHN5bmNocm9ub3VzIFhIUi4gU2hvdWxkIG5vdCBiZSB1c2VkIGluIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzLlxuICogQHBhcmFtIHtzdHJpbmd9IHNyYyBTb3VyY2UgVVJMLlxuICogQHJldHVybiB7c3RyaW5nfSBGaWxlIGNvbnRlbnRzLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5sb2FkRmlsZVN5bmNfID0gZnVuY3Rpb24oc3JjKSB7XG4gIGlmIChnb29nLmdsb2JhbC5DTE9TVVJFX0xPQURfRklMRV9TWU5DKSB7XG4gICAgcmV0dXJuIGdvb2cuZ2xvYmFsLkNMT1NVUkVfTE9BRF9GSUxFX1NZTkMoc3JjKTtcbiAgfSBlbHNlIHtcbiAgICAvKiogQHR5cGUge1hNTEh0dHBSZXF1ZXN0fSAqL1xuICAgIHZhciB4aHIgPSBuZXcgZ29vZy5nbG9iYWxbJ1hNTEh0dHBSZXF1ZXN0J10oKTtcbiAgICB4aHIub3BlbignZ2V0Jywgc3JjLCBmYWxzZSk7XG4gICAgeGhyLnNlbmQoKTtcbiAgICByZXR1cm4geGhyLnJlc3BvbnNlVGV4dDtcbiAgfVxufTtcblxuXG4vKipcbiAqIFJldHJpZXZlIGFuZCBleGVjdXRlIGEgbW9kdWxlLlxuICogQHBhcmFtIHtzdHJpbmd9IHNyYyBTY3JpcHQgc291cmNlIFVSTC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cucmV0cmlldmVBbmRFeGVjTW9kdWxlXyA9IGZ1bmN0aW9uKHNyYykge1xuICBpZiAoIUNPTVBJTEVEKSB7XG4gICAgLy8gVGhlIGZ1bGwgYnV0IG5vbi1jYW5vbmljYWxpemVkIFVSTCBmb3IgbGF0ZXIgdXNlLlxuICAgIHZhciBvcmlnaW5hbFBhdGggPSBzcmM7XG4gICAgLy8gQ2Fub25pY2FsaXplIHRoZSBwYXRoLCByZW1vdmluZyBhbnkgLy4vIG9yIC8uLi8gc2luY2UgQ2hyb21lJ3MgZGVidWdnaW5nXG4gICAgLy8gY29uc29sZSBkb2Vzbid0IGF1dG8tY2Fub25pY2FsaXplIFhIUiBsb2FkcyBhcyBpdCBkb2VzIDxzY3JpcHQ+IHNyY3MuXG4gICAgc3JjID0gZ29vZy5ub3JtYWxpemVQYXRoXyhzcmMpO1xuXG4gICAgdmFyIGltcG9ydFNjcmlwdCA9IGdvb2cuZ2xvYmFsLkNMT1NVUkVfSU1QT1JUX1NDUklQVCB8fFxuICAgICAgICBnb29nLndyaXRlU2NyaXB0VGFnXztcblxuICAgIHZhciBzY3JpcHRUZXh0ID0gZ29vZy5sb2FkRmlsZVN5bmNfKHNyYyk7XG5cbiAgICBpZiAoc2NyaXB0VGV4dCAhPSBudWxsKSB7XG4gICAgICB2YXIgZXhlY01vZHVsZVNjcmlwdCA9IGdvb2cud3JhcE1vZHVsZV8oc3JjLCBzY3JpcHRUZXh0KTtcbiAgICAgIHZhciBpc09sZElFID0gZ29vZy5JU19PTERfSUVfO1xuICAgICAgaWYgKGlzT2xkSUUpIHtcbiAgICAgICAgZ29vZy5kZXBlbmRlbmNpZXNfLmRlZmVycmVkW29yaWdpbmFsUGF0aF0gPSBleGVjTW9kdWxlU2NyaXB0O1xuICAgICAgICBnb29nLnF1ZXVlZE1vZHVsZXNfLnB1c2gob3JpZ2luYWxQYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltcG9ydFNjcmlwdChzcmMsIGV4ZWNNb2R1bGVTY3JpcHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xvYWQgb2YgJyArIHNyYyArICdmYWlsZWQnKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIExhbmd1YWdlIEVuaGFuY2VtZW50c1xuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4vKipcbiAqIFRoaXMgaXMgYSBcImZpeGVkXCIgdmVyc2lvbiBvZiB0aGUgdHlwZW9mIG9wZXJhdG9yLiAgSXQgZGlmZmVycyBmcm9tIHRoZSB0eXBlb2ZcbiAqIG9wZXJhdG9yIGluIHN1Y2ggYSB3YXkgdGhhdCBudWxsIHJldHVybnMgJ251bGwnIGFuZCBhcnJheXMgcmV0dXJuICdhcnJheScuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBnZXQgdGhlIHR5cGUgb2YuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSB0eXBlLlxuICovXG5nb29nLnR5cGVPZiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBzID0gdHlwZW9mIHZhbHVlO1xuICBpZiAocyA9PSAnb2JqZWN0Jykge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgLy8gQ2hlY2sgdGhlc2UgZmlyc3QsIHNvIHdlIGNhbiBhdm9pZCBjYWxsaW5nIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgaWZcbiAgICAgIC8vIHBvc3NpYmxlLlxuICAgICAgLy9cbiAgICAgIC8vIElFIGltcHJvcGVybHkgbWFyc2hhbHMgdHllcG9mIGFjcm9zcyBleGVjdXRpb24gY29udGV4dHMsIGJ1dCBhXG4gICAgICAvLyBjcm9zcy1jb250ZXh0IG9iamVjdCB3aWxsIHN0aWxsIHJldHVybiBmYWxzZSBmb3IgXCJpbnN0YW5jZW9mIE9iamVjdFwiLlxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuICdhcnJheSc7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBzO1xuICAgICAgfVxuXG4gICAgICAvLyBIQUNLOiBJbiBvcmRlciB0byB1c2UgYW4gT2JqZWN0IHByb3RvdHlwZSBtZXRob2Qgb24gdGhlIGFyYml0cmFyeVxuICAgICAgLy8gICB2YWx1ZSwgdGhlIGNvbXBpbGVyIHJlcXVpcmVzIHRoZSB2YWx1ZSBiZSBjYXN0IHRvIHR5cGUgT2JqZWN0LFxuICAgICAgLy8gICBldmVuIHRob3VnaCB0aGUgRUNNQSBzcGVjIGV4cGxpY2l0bHkgYWxsb3dzIGl0LlxuICAgICAgdmFyIGNsYXNzTmFtZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChcbiAgICAgICAgICAvKiogQHR5cGUge09iamVjdH0gKi8gKHZhbHVlKSk7XG4gICAgICAvLyBJbiBGaXJlZm94IDMuNiwgYXR0ZW1wdGluZyB0byBhY2Nlc3MgaWZyYW1lIHdpbmRvdyBvYmplY3RzJyBsZW5ndGhcbiAgICAgIC8vIHByb3BlcnR5IHRocm93cyBhbiBOU19FUlJPUl9GQUlMVVJFLCBzbyB3ZSBuZWVkIHRvIHNwZWNpYWwtY2FzZSBpdFxuICAgICAgLy8gaGVyZS5cbiAgICAgIGlmIChjbGFzc05hbWUgPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICAgICAgcmV0dXJuICdvYmplY3QnO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBjYW5ub3QgYWx3YXlzIHVzZSBjb25zdHJ1Y3RvciA9PSBBcnJheSBvciBpbnN0YW5jZW9mIEFycmF5IGJlY2F1c2VcbiAgICAgIC8vIGRpZmZlcmVudCBmcmFtZXMgaGF2ZSBkaWZmZXJlbnQgQXJyYXkgb2JqZWN0cy4gSW4gSUU2LCBpZiB0aGUgaWZyYW1lXG4gICAgICAvLyB3aGVyZSB0aGUgYXJyYXkgd2FzIGNyZWF0ZWQgaXMgZGVzdHJveWVkLCB0aGUgYXJyYXkgbG9zZXMgaXRzXG4gICAgICAvLyBwcm90b3R5cGUuIFRoZW4gZGVyZWZlcmVuY2luZyB2YWwuc3BsaWNlIGhlcmUgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgc29cbiAgICAgIC8vIHdlIGNhbid0IHVzZSBnb29nLmlzRnVuY3Rpb24uIENhbGxpbmcgdHlwZW9mIGRpcmVjdGx5IHJldHVybnMgJ3Vua25vd24nXG4gICAgICAvLyBzbyB0aGF0IHdpbGwgd29yay4gSW4gdGhpcyBjYXNlLCB0aGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZhbHNlIGFuZFxuICAgICAgLy8gbW9zdCBhcnJheSBmdW5jdGlvbnMgd2lsbCBzdGlsbCB3b3JrIGJlY2F1c2UgdGhlIGFycmF5IGlzIHN0aWxsXG4gICAgICAvLyBhcnJheS1saWtlIChzdXBwb3J0cyBsZW5ndGggYW5kIFtdKSBldmVuIHRob3VnaCBpdCBoYXMgbG9zdCBpdHNcbiAgICAgIC8vIHByb3RvdHlwZS5cbiAgICAgIC8vIE1hcmsgTWlsbGVyIG5vdGljZWQgdGhhdCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG4gICAgICAvLyBhbGxvd3MgYWNjZXNzIHRvIHRoZSB1bmZvcmdlYWJsZSBbW0NsYXNzXV0gcHJvcGVydHkuXG4gICAgICAvLyAgMTUuMi40LjIgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyAoIClcbiAgICAgIC8vICBXaGVuIHRoZSB0b1N0cmluZyBtZXRob2QgaXMgY2FsbGVkLCB0aGUgZm9sbG93aW5nIHN0ZXBzIGFyZSB0YWtlbjpcbiAgICAgIC8vICAgICAgMS4gR2V0IHRoZSBbW0NsYXNzXV0gcHJvcGVydHkgb2YgdGhpcyBvYmplY3QuXG4gICAgICAvLyAgICAgIDIuIENvbXB1dGUgYSBzdHJpbmcgdmFsdWUgYnkgY29uY2F0ZW5hdGluZyB0aGUgdGhyZWUgc3RyaW5nc1xuICAgICAgLy8gICAgICAgICBcIltvYmplY3QgXCIsIFJlc3VsdCgxKSwgYW5kIFwiXVwiLlxuICAgICAgLy8gICAgICAzLiBSZXR1cm4gUmVzdWx0KDIpLlxuICAgICAgLy8gYW5kIHRoaXMgYmVoYXZpb3Igc3Vydml2ZXMgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSBleGVjdXRpb24gY29udGV4dC5cbiAgICAgIGlmICgoY2xhc3NOYW1lID09ICdbb2JqZWN0IEFycmF5XScgfHxcbiAgICAgICAgICAgLy8gSW4gSUUgYWxsIG5vbiB2YWx1ZSB0eXBlcyBhcmUgd3JhcHBlZCBhcyBvYmplY3RzIGFjcm9zcyB3aW5kb3dcbiAgICAgICAgICAgLy8gYm91bmRhcmllcyAobm90IGlmcmFtZSB0aG91Z2gpIHNvIHdlIGhhdmUgdG8gZG8gb2JqZWN0IGRldGVjdGlvblxuICAgICAgICAgICAvLyBmb3IgdGhpcyBlZGdlIGNhc2UuXG4gICAgICAgICAgIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT0gJ251bWJlcicgJiZcbiAgICAgICAgICAgdHlwZW9mIHZhbHVlLnNwbGljZSAhPSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICB0eXBlb2YgdmFsdWUucHJvcGVydHlJc0VudW1lcmFibGUgIT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIXZhbHVlLnByb3BlcnR5SXNFbnVtZXJhYmxlKCdzcGxpY2UnKVxuXG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gJ2FycmF5JztcbiAgICAgIH1cbiAgICAgIC8vIEhBQ0s6IFRoZXJlIGlzIHN0aWxsIGFuIGFycmF5IGNhc2UgdGhhdCBmYWlscy5cbiAgICAgIC8vICAgICBmdW5jdGlvbiBBcnJheUltcG9zdG9yKCkge31cbiAgICAgIC8vICAgICBBcnJheUltcG9zdG9yLnByb3RvdHlwZSA9IFtdO1xuICAgICAgLy8gICAgIHZhciBpbXBvc3RvciA9IG5ldyBBcnJheUltcG9zdG9yO1xuICAgICAgLy8gdGhpcyBjYW4gYmUgZml4ZWQgYnkgZ2V0dGluZyByaWQgb2YgdGhlIGZhc3QgcGF0aFxuICAgICAgLy8gKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIGFuZCBzb2xlbHkgcmVseWluZyBvblxuICAgICAgLy8gKHZhbHVlICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcudmFsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScpXG4gICAgICAvLyBidXQgdGhhdCB3b3VsZCByZXF1aXJlIG1hbnkgbW9yZSBmdW5jdGlvbiBjYWxscyBhbmQgaXMgbm90IHdhcnJhbnRlZFxuICAgICAgLy8gdW5sZXNzIGNsb3N1cmUgY29kZSBpcyByZWNlaXZpbmcgb2JqZWN0cyBmcm9tIHVudHJ1c3RlZCBzb3VyY2VzLlxuXG4gICAgICAvLyBJRSBpbiBjcm9zcy13aW5kb3cgY2FsbHMgZG9lcyBub3QgY29ycmVjdGx5IG1hcnNoYWwgdGhlIGZ1bmN0aW9uIHR5cGVcbiAgICAgIC8vIChpdCBhcHBlYXJzIGp1c3QgYXMgYW4gb2JqZWN0KSBzbyB3ZSBjYW5ub3QgdXNlIGp1c3QgdHlwZW9mIHZhbCA9PVxuICAgICAgLy8gJ2Z1bmN0aW9uJy4gSG93ZXZlciwgaWYgdGhlIG9iamVjdCBoYXMgYSBjYWxsIHByb3BlcnR5LCBpdCBpcyBhXG4gICAgICAvLyBmdW5jdGlvbi5cbiAgICAgIGlmICgoY2xhc3NOYW1lID09ICdbb2JqZWN0IEZ1bmN0aW9uXScgfHxcbiAgICAgICAgICB0eXBlb2YgdmFsdWUuY2FsbCAhPSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSAhPSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICF2YWx1ZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgnY2FsbCcpKSkge1xuICAgICAgICByZXR1cm4gJ2Z1bmN0aW9uJztcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ251bGwnO1xuICAgIH1cblxuICB9IGVsc2UgaWYgKHMgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUuY2FsbCA9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEluIFNhZmFyaSB0eXBlb2Ygbm9kZUxpc3QgcmV0dXJucyAnZnVuY3Rpb24nLCBhbmQgb24gRmlyZWZveCB0eXBlb2ZcbiAgICAvLyBiZWhhdmVzIHNpbWlsYXJseSBmb3IgSFRNTHtBcHBsZXQsRW1iZWQsT2JqZWN0fSwgRWxlbWVudHMgYW5kIFJlZ0V4cHMuIFdlXG4gICAgLy8gd291bGQgbGlrZSB0byByZXR1cm4gb2JqZWN0IGZvciB0aG9zZSBhbmQgd2UgY2FuIGRldGVjdCBhbiBpbnZhbGlkXG4gICAgLy8gZnVuY3Rpb24gYnkgbWFraW5nIHN1cmUgdGhhdCB0aGUgZnVuY3Rpb24gb2JqZWN0IGhhcyBhIGNhbGwgbWV0aG9kLlxuICAgIHJldHVybiAnb2JqZWN0JztcbiAgfVxuICByZXR1cm4gcztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBudWxsLlxuICogQHBhcmFtIHs/fSB2YWwgVmFyaWFibGUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdmFyaWFibGUgaXMgbnVsbC5cbiAqL1xuZ29vZy5pc051bGwgPSBmdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBkZWZpbmVkIGFuZCBub3QgbnVsbC5cbiAqIEBwYXJhbSB7P30gdmFsIFZhcmlhYmxlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHZhcmlhYmxlIGlzIGRlZmluZWQgYW5kIG5vdCBudWxsLlxuICovXG5nb29nLmlzRGVmQW5kTm90TnVsbCA9IGZ1bmN0aW9uKHZhbCkge1xuICAvLyBOb3RlIHRoYXQgdW5kZWZpbmVkID09IG51bGwuXG4gIHJldHVybiB2YWwgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhbiBhcnJheS5cbiAqIEBwYXJhbSB7P30gdmFsIFZhcmlhYmxlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHZhcmlhYmxlIGlzIGFuIGFycmF5LlxuICovXG5nb29nLmlzQXJyYXkgPSBmdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIGdvb2cudHlwZU9mKHZhbCkgPT0gJ2FycmF5Jztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIG9iamVjdCBsb29rcyBsaWtlIGFuIGFycmF5LiBUbyBxdWFsaWZ5IGFzIGFycmF5IGxpa2VcbiAqIHRoZSB2YWx1ZSBuZWVkcyB0byBiZSBlaXRoZXIgYSBOb2RlTGlzdCBvciBhbiBvYmplY3Qgd2l0aCBhIE51bWJlciBsZW5ndGhcbiAqIHByb3BlcnR5LiBBcyBhIHNwZWNpYWwgY2FzZSwgYSBmdW5jdGlvbiB2YWx1ZSBpcyBub3QgYXJyYXkgbGlrZSwgYmVjYXVzZSBpdHNcbiAqIGxlbmd0aCBwcm9wZXJ0eSBpcyBmaXhlZCB0byBjb3JyZXNwb25kIHRvIHRoZSBudW1iZXIgb2YgZXhwZWN0ZWQgYXJndW1lbnRzLlxuICogQHBhcmFtIHs/fSB2YWwgVmFyaWFibGUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdmFyaWFibGUgaXMgYW4gYXJyYXkuXG4gKi9cbmdvb2cuaXNBcnJheUxpa2UgPSBmdW5jdGlvbih2YWwpIHtcbiAgdmFyIHR5cGUgPSBnb29nLnR5cGVPZih2YWwpO1xuICAvLyBXZSBkbyBub3QgdXNlIGdvb2cuaXNPYmplY3QgaGVyZSBpbiBvcmRlciB0byBleGNsdWRlIGZ1bmN0aW9uIHZhbHVlcy5cbiAgcmV0dXJuIHR5cGUgPT0gJ2FycmF5JyB8fCB0eXBlID09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwubGVuZ3RoID09ICdudW1iZXInO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGxvb2tzIGxpa2UgYSBEYXRlLiBUbyBxdWFsaWZ5IGFzIERhdGUtbGlrZSB0aGVcbiAqIHZhbHVlIG5lZWRzIHRvIGJlIGFuIG9iamVjdCBhbmQgaGF2ZSBhIGdldEZ1bGxZZWFyKCkgZnVuY3Rpb24uXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBhIGxpa2UgYSBEYXRlLlxuICovXG5nb29nLmlzRGF0ZUxpa2UgPSBmdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIGdvb2cuaXNPYmplY3QodmFsKSAmJiB0eXBlb2YgdmFsLmdldEZ1bGxZZWFyID09ICdmdW5jdGlvbic7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBzdHJpbmcuXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBhIHN0cmluZy5cbiAqL1xuZ29vZy5pc1N0cmluZyA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PSAnc3RyaW5nJztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIGJvb2xlYW4uXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBib29sZWFuLlxuICovXG5nb29nLmlzQm9vbGVhbiA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PSAnYm9vbGVhbic7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBhIG51bWJlci5cbiAqL1xuZ29vZy5pc051bWJlciA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PSAnbnVtYmVyJztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIGZ1bmN0aW9uLlxuICogQHBhcmFtIHs/fSB2YWwgVmFyaWFibGUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdmFyaWFibGUgaXMgYSBmdW5jdGlvbi5cbiAqL1xuZ29vZy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiBnb29nLnR5cGVPZih2YWwpID09ICdmdW5jdGlvbic7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYW4gb2JqZWN0LiAgVGhpcyBpbmNsdWRlcyBhcnJheXMgYW5kXG4gKiBmdW5jdGlvbnMuXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBhbiBvYmplY3QuXG4gKi9cbmdvb2cuaXNPYmplY3QgPSBmdW5jdGlvbih2YWwpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICByZXR1cm4gdHlwZSA9PSAnb2JqZWN0JyAmJiB2YWwgIT0gbnVsbCB8fCB0eXBlID09ICdmdW5jdGlvbic7XG4gIC8vIHJldHVybiBPYmplY3QodmFsKSA9PT0gdmFsIGFsc28gd29ya3MsIGJ1dCBpcyBzbG93ZXIsIGVzcGVjaWFsbHkgaWYgdmFsIGlzXG4gIC8vIG5vdCBhbiBvYmplY3QuXG59O1xuXG5cbi8qKlxuICogR2V0cyBhIHVuaXF1ZSBJRCBmb3IgYW4gb2JqZWN0LiBUaGlzIG11dGF0ZXMgdGhlIG9iamVjdCBzbyB0aGF0IGZ1cnRoZXIgY2FsbHNcbiAqIHdpdGggdGhlIHNhbWUgb2JqZWN0IGFzIGEgcGFyYW1ldGVyIHJldHVybnMgdGhlIHNhbWUgdmFsdWUuIFRoZSB1bmlxdWUgSUQgaXNcbiAqIGd1YXJhbnRlZWQgdG8gYmUgdW5pcXVlIGFjcm9zcyB0aGUgY3VycmVudCBzZXNzaW9uIGFtb25nc3Qgb2JqZWN0cyB0aGF0IGFyZVxuICogcGFzc2VkIGludG8ge0Bjb2RlIGdldFVpZH0uIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoZSBJRCBpcyB1bmlxdWUgb3JcbiAqIGNvbnNpc3RlbnQgYWNyb3NzIHNlc3Npb25zLiBJdCBpcyB1bnNhZmUgdG8gZ2VuZXJhdGUgdW5pcXVlIElEIGZvciBmdW5jdGlvblxuICogcHJvdG90eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gZ2V0IHRoZSB1bmlxdWUgSUQgZm9yLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgdW5pcXVlIElEIGZvciB0aGUgb2JqZWN0LlxuICovXG5nb29nLmdldFVpZCA9IGZ1bmN0aW9uKG9iaikge1xuICAvLyBUT0RPKGFydik6IE1ha2UgdGhlIHR5cGUgc3RyaWN0ZXIsIGRvIG5vdCBhY2NlcHQgbnVsbC5cblxuICAvLyBJbiBPcGVyYSB3aW5kb3cuaGFzT3duUHJvcGVydHkgZXhpc3RzIGJ1dCBhbHdheXMgcmV0dXJucyBmYWxzZSBzbyB3ZSBhdm9pZFxuICAvLyB1c2luZyBpdC4gQXMgYSBjb25zZXF1ZW5jZSB0aGUgdW5pcXVlIElEIGdlbmVyYXRlZCBmb3IgQmFzZUNsYXNzLnByb3RvdHlwZVxuICAvLyBhbmQgU3ViQ2xhc3MucHJvdG90eXBlIHdpbGwgYmUgdGhlIHNhbWUuXG4gIHJldHVybiBvYmpbZ29vZy5VSURfUFJPUEVSVFlfXSB8fFxuICAgICAgKG9ialtnb29nLlVJRF9QUk9QRVJUWV9dID0gKytnb29nLnVpZENvdW50ZXJfKTtcbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBnaXZlbiBvYmplY3QgaXMgYWxyZWFkeSBhc3NpZ25lZCBhIHVuaXF1ZSBJRC5cbiAqXG4gKiBUaGlzIGRvZXMgbm90IG1vZGlmeSB0aGUgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7IU9iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZXJlIGlzIGFuIGFzc2lnbmVkIHVuaXF1ZSBpZCBmb3IgdGhlIG9iamVjdC5cbiAqL1xuZ29vZy5oYXNVaWQgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuICEhb2JqW2dvb2cuVUlEX1BST1BFUlRZX107XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgdW5pcXVlIElEIGZyb20gYW4gb2JqZWN0LiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgb2JqZWN0IHdhc1xuICogcHJldmlvdXNseSBtdXRhdGVkIHVzaW5nIHtAY29kZSBnb29nLmdldFVpZH0gaW4gd2hpY2ggY2FzZSB0aGUgbXV0YXRpb24gaXNcbiAqIHVuZG9uZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byByZW1vdmUgdGhlIHVuaXF1ZSBJRCBmaWVsZCBmcm9tLlxuICovXG5nb29nLnJlbW92ZVVpZCA9IGZ1bmN0aW9uKG9iaikge1xuICAvLyBUT0RPKGFydik6IE1ha2UgdGhlIHR5cGUgc3RyaWN0ZXIsIGRvIG5vdCBhY2NlcHQgbnVsbC5cblxuICAvLyBJbiBJRSwgRE9NIG5vZGVzIGFyZSBub3QgaW5zdGFuY2VzIG9mIE9iamVjdCBhbmQgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIHdlXG4gIC8vIHRyeSB0byBkZWxldGUuICBJbnN0ZWFkIHdlIHRyeSB0byB1c2UgcmVtb3ZlQXR0cmlidXRlLlxuICBpZiAoJ3JlbW92ZUF0dHJpYnV0ZScgaW4gb2JqKSB7XG4gICAgb2JqLnJlbW92ZUF0dHJpYnV0ZShnb29nLlVJRF9QUk9QRVJUWV8pO1xuICB9XG4gIC8qKiBAcHJlc2VydmVUcnkgKi9cbiAgdHJ5IHtcbiAgICBkZWxldGUgb2JqW2dvb2cuVUlEX1BST1BFUlRZX107XG4gIH0gY2F0Y2ggKGV4KSB7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBOYW1lIGZvciB1bmlxdWUgSUQgcHJvcGVydHkuIEluaXRpYWxpemVkIGluIGEgd2F5IHRvIGhlbHAgYXZvaWQgY29sbGlzaW9uc1xuICogd2l0aCBvdGhlciBjbG9zdXJlIEphdmFTY3JpcHQgb24gdGhlIHNhbWUgcGFnZS5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlVJRF9QUk9QRVJUWV8gPSAnY2xvc3VyZV91aWRfJyArICgoTWF0aC5yYW5kb20oKSAqIDFlOSkgPj4+IDApO1xuXG5cbi8qKlxuICogQ291bnRlciBmb3IgVUlELlxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudWlkQ291bnRlcl8gPSAwO1xuXG5cbi8qKlxuICogQWRkcyBhIGhhc2ggY29kZSBmaWVsZCB0byBhbiBvYmplY3QuIFRoZSBoYXNoIGNvZGUgaXMgdW5pcXVlIGZvciB0aGVcbiAqIGdpdmVuIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBnZXQgdGhlIGhhc2ggY29kZSBmb3IuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBoYXNoIGNvZGUgZm9yIHRoZSBvYmplY3QuXG4gKiBAZGVwcmVjYXRlZCBVc2UgZ29vZy5nZXRVaWQgaW5zdGVhZC5cbiAqL1xuZ29vZy5nZXRIYXNoQ29kZSA9IGdvb2cuZ2V0VWlkO1xuXG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgaGFzaCBjb2RlIGZpZWxkIGZyb20gYW4gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHJlbW92ZSB0aGUgZmllbGQgZnJvbS5cbiAqIEBkZXByZWNhdGVkIFVzZSBnb29nLnJlbW92ZVVpZCBpbnN0ZWFkLlxuICovXG5nb29nLnJlbW92ZUhhc2hDb2RlID0gZ29vZy5yZW1vdmVVaWQ7XG5cblxuLyoqXG4gKiBDbG9uZXMgYSB2YWx1ZS4gVGhlIGlucHV0IG1heSBiZSBhbiBPYmplY3QsIEFycmF5LCBvciBiYXNpYyB0eXBlLiBPYmplY3RzIGFuZFxuICogYXJyYXlzIHdpbGwgYmUgY2xvbmVkIHJlY3Vyc2l2ZWx5LlxuICpcbiAqIFdBUk5JTkdTOlxuICogPGNvZGU+Z29vZy5jbG9uZU9iamVjdDwvY29kZT4gZG9lcyBub3QgZGV0ZWN0IHJlZmVyZW5jZSBsb29wcy4gT2JqZWN0cyB0aGF0XG4gKiByZWZlciB0byB0aGVtc2VsdmVzIHdpbGwgY2F1c2UgaW5maW5pdGUgcmVjdXJzaW9uLlxuICpcbiAqIDxjb2RlPmdvb2cuY2xvbmVPYmplY3Q8L2NvZGU+IGlzIHVuYXdhcmUgb2YgdW5pcXVlIGlkZW50aWZpZXJzLCBhbmQgY29waWVzXG4gKiBVSURzIGNyZWF0ZWQgYnkgPGNvZGU+Z2V0VWlkPC9jb2RlPiBpbnRvIGNsb25lZCByZXN1bHRzLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEByZXR1cm4geyp9IEEgY2xvbmUgb2YgdGhlIGlucHV0IHZhbHVlLlxuICogQGRlcHJlY2F0ZWQgZ29vZy5jbG9uZU9iamVjdCBpcyB1bnNhZmUuIFByZWZlciB0aGUgZ29vZy5vYmplY3QgbWV0aG9kcy5cbiAqL1xuZ29vZy5jbG9uZU9iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgdHlwZSA9IGdvb2cudHlwZU9mKG9iaik7XG4gIGlmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2FycmF5Jykge1xuICAgIGlmIChvYmouY2xvbmUpIHtcbiAgICAgIHJldHVybiBvYmouY2xvbmUoKTtcbiAgICB9XG4gICAgdmFyIGNsb25lID0gdHlwZSA9PSAnYXJyYXknID8gW10gOiB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBjbG9uZVtrZXldID0gZ29vZy5jbG9uZU9iamVjdChvYmpba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG5cbi8qKlxuICogQSBuYXRpdmUgaW1wbGVtZW50YXRpb24gb2YgZ29vZy5iaW5kLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gQSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkuXG4gKiBAcGFyYW0ge09iamVjdHx1bmRlZmluZWR9IHNlbGZPYmogU3BlY2lmaWVzIHRoZSBvYmplY3Qgd2hpY2ggdGhpcyBzaG91bGRcbiAqICAgICBwb2ludCB0byB3aGVuIHRoZSBmdW5jdGlvbiBpcyBydW4uXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIEFkZGl0aW9uYWwgYXJndW1lbnRzIHRoYXQgYXJlIHBhcnRpYWxseSBhcHBsaWVkIHRvIHRoZVxuICogICAgIGZ1bmN0aW9uLlxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBBIHBhcnRpYWxseS1hcHBsaWVkIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIGJpbmQoKSB3YXNcbiAqICAgICBpbnZva2VkIGFzIGEgbWV0aG9kIG9mLlxuICogQHByaXZhdGVcbiAqIEBzdXBwcmVzcyB7ZGVwcmVjYXRlZH0gVGhlIGNvbXBpbGVyIHRoaW5rcyB0aGF0IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGlzXG4gKiAgICAgZGVwcmVjYXRlZCBiZWNhdXNlIHNvbWUgcGVvcGxlIGhhdmUgZGVjbGFyZWQgYSBwdXJlLUpTIHZlcnNpb24uXG4gKiAgICAgT25seSB0aGUgcHVyZS1KUyB2ZXJzaW9uIGlzIHRydWx5IGRlcHJlY2F0ZWQuXG4gKi9cbmdvb2cuYmluZE5hdGl2ZV8gPSBmdW5jdGlvbihmbiwgc2VsZk9iaiwgdmFyX2FyZ3MpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUZ1bmN0aW9ufSAqLyAoZm4uY2FsbC5hcHBseShmbi5iaW5kLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBBIHB1cmUtSlMgaW1wbGVtZW50YXRpb24gb2YgZ29vZy5iaW5kLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gQSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkuXG4gKiBAcGFyYW0ge09iamVjdHx1bmRlZmluZWR9IHNlbGZPYmogU3BlY2lmaWVzIHRoZSBvYmplY3Qgd2hpY2ggdGhpcyBzaG91bGRcbiAqICAgICBwb2ludCB0byB3aGVuIHRoZSBmdW5jdGlvbiBpcyBydW4uXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIEFkZGl0aW9uYWwgYXJndW1lbnRzIHRoYXQgYXJlIHBhcnRpYWxseSBhcHBsaWVkIHRvIHRoZVxuICogICAgIGZ1bmN0aW9uLlxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBBIHBhcnRpYWxseS1hcHBsaWVkIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIGJpbmQoKSB3YXNcbiAqICAgICBpbnZva2VkIGFzIGEgbWV0aG9kIG9mLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5iaW5kSnNfID0gZnVuY3Rpb24oZm4sIHNlbGZPYmosIHZhcl9hcmdzKSB7XG4gIGlmICghZm4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xuICAgIHZhciBib3VuZEFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFByZXBlbmQgdGhlIGJvdW5kIGFyZ3VtZW50cyB0byB0aGUgY3VycmVudCBhcmd1bWVudHMuXG4gICAgICB2YXIgbmV3QXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShuZXdBcmdzLCBib3VuZEFyZ3MpO1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGZPYmosIG5ld0FyZ3MpO1xuICAgIH07XG5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZk9iaiwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG59O1xuXG5cbi8qKlxuICogUGFydGlhbGx5IGFwcGxpZXMgdGhpcyBmdW5jdGlvbiB0byBhIHBhcnRpY3VsYXIgJ3RoaXMgb2JqZWN0JyBhbmQgemVybyBvclxuICogbW9yZSBhcmd1bWVudHMuIFRoZSByZXN1bHQgaXMgYSBuZXcgZnVuY3Rpb24gd2l0aCBzb21lIGFyZ3VtZW50cyBvZiB0aGUgZmlyc3RcbiAqIGZ1bmN0aW9uIHByZS1maWxsZWQgYW5kIHRoZSB2YWx1ZSBvZiB0aGlzICdwcmUtc3BlY2lmaWVkJy5cbiAqXG4gKiBSZW1haW5pbmcgYXJndW1lbnRzIHNwZWNpZmllZCBhdCBjYWxsLXRpbWUgYXJlIGFwcGVuZGVkIHRvIHRoZSBwcmUtc3BlY2lmaWVkXG4gKiBvbmVzLlxuICpcbiAqIEFsc28gc2VlOiB7QGxpbmsgI3BhcnRpYWx9LlxuICpcbiAqIFVzYWdlOlxuICogPHByZT52YXIgYmFyTWV0aEJvdW5kID0gZ29vZy5iaW5kKG15RnVuY3Rpb24sIG15T2JqLCAnYXJnMScsICdhcmcyJyk7XG4gKiBiYXJNZXRoQm91bmQoJ2FyZzMnLCAnYXJnNCcpOzwvcHJlPlxuICpcbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6VCwgLi4uKX0gZm4gQSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkuXG4gKiBAcGFyYW0ge1R9IHNlbGZPYmogU3BlY2lmaWVzIHRoZSBvYmplY3Qgd2hpY2ggdGhpcyBzaG91bGQgcG9pbnQgdG8gd2hlbiB0aGVcbiAqICAgICBmdW5jdGlvbiBpcyBydW4uXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIEFkZGl0aW9uYWwgYXJndW1lbnRzIHRoYXQgYXJlIHBhcnRpYWxseSBhcHBsaWVkIHRvIHRoZVxuICogICAgIGZ1bmN0aW9uLlxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBBIHBhcnRpYWxseS1hcHBsaWVkIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIGdvb2cuYmluZCgpIHdhc1xuICogICAgIGludm9rZWQgYXMgYSBtZXRob2Qgb2YuXG4gKiBAdGVtcGxhdGUgVFxuICogQHN1cHByZXNzIHtkZXByZWNhdGVkfSBTZWUgYWJvdmUuXG4gKi9cbmdvb2cuYmluZCA9IGZ1bmN0aW9uKGZuLCBzZWxmT2JqLCB2YXJfYXJncykge1xuICAvLyBUT0RPKG5pY2tzYW50b3MpOiBuYXJyb3cgdGhlIHR5cGUgc2lnbmF0dXJlLlxuICBpZiAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgJiZcbiAgICAgIC8vIE5PVEUobmlja3NhbnRvcyk6IFNvbWVib2R5IHB1bGxlZCBiYXNlLmpzIGludG8gdGhlIGRlZmF1bHQgQ2hyb21lXG4gICAgICAvLyBleHRlbnNpb24gZW52aXJvbm1lbnQuIFRoaXMgbWVhbnMgdGhhdCBmb3IgQ2hyb21lIGV4dGVuc2lvbnMsIHRoZXkgZ2V0XG4gICAgICAvLyB0aGUgaW1wbGVtZW50YXRpb24gb2YgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgdGhhdCBjYWxscyBnb29nLmJpbmRcbiAgICAgIC8vIGluc3RlYWQgb2YgdGhlIG5hdGl2ZSBvbmUuIEV2ZW4gd29yc2UsIHdlIGRvbid0IHdhbnQgdG8gaW50cm9kdWNlIGFcbiAgICAgIC8vIGNpcmN1bGFyIGRlcGVuZGVuY3kgYmV0d2VlbiBnb29nLmJpbmQgYW5kIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLCBzb1xuICAgICAgLy8gd2UgaGF2ZSB0byBoYWNrIHRoaXMgdG8gbWFrZSBzdXJlIGl0IHdvcmtzIGNvcnJlY3RseS5cbiAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLnRvU3RyaW5nKCkuaW5kZXhPZignbmF0aXZlIGNvZGUnKSAhPSAtMSkge1xuICAgIGdvb2cuYmluZCA9IGdvb2cuYmluZE5hdGl2ZV87XG4gIH0gZWxzZSB7XG4gICAgZ29vZy5iaW5kID0gZ29vZy5iaW5kSnNfO1xuICB9XG4gIHJldHVybiBnb29nLmJpbmQuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn07XG5cblxuLyoqXG4gKiBMaWtlIGdvb2cuYmluZCgpLCBleGNlcHQgdGhhdCBhICd0aGlzIG9iamVjdCcgaXMgbm90IHJlcXVpcmVkLiBVc2VmdWwgd2hlblxuICogdGhlIHRhcmdldCBmdW5jdGlvbiBpcyBhbHJlYWR5IGJvdW5kLlxuICpcbiAqIFVzYWdlOlxuICogdmFyIGcgPSBnb29nLnBhcnRpYWwoZiwgYXJnMSwgYXJnMik7XG4gKiBnKGFyZzMsIGFyZzQpO1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEEgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5LlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBBZGRpdGlvbmFsIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXJ0aWFsbHkgYXBwbGllZCB0byBmbi5cbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gQSBwYXJ0aWFsbHktYXBwbGllZCBmb3JtIG9mIHRoZSBmdW5jdGlvbiBnb29nLnBhcnRpYWwoKVxuICogICAgIHdhcyBpbnZva2VkIGFzIGEgbWV0aG9kIG9mLlxuICovXG5nb29nLnBhcnRpYWwgPSBmdW5jdGlvbihmbiwgdmFyX2FyZ3MpIHtcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgLy8gQ2xvbmUgdGhlIGFycmF5ICh3aXRoIHNsaWNlKCkpIGFuZCBhcHBlbmQgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAvLyB0byB0aGUgZXhpc3RpbmcgYXJndW1lbnRzLlxuICAgIHZhciBuZXdBcmdzID0gYXJncy5zbGljZSgpO1xuICAgIG5ld0FyZ3MucHVzaC5hcHBseShuZXdBcmdzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBuZXdBcmdzKTtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBDb3BpZXMgYWxsIHRoZSBtZW1iZXJzIG9mIGEgc291cmNlIG9iamVjdCB0byBhIHRhcmdldCBvYmplY3QuIFRoaXMgbWV0aG9kXG4gKiBkb2VzIG5vdCB3b3JrIG9uIGFsbCBicm93c2VycyBmb3IgYWxsIG9iamVjdHMgdGhhdCBjb250YWluIGtleXMgc3VjaCBhc1xuICogdG9TdHJpbmcgb3IgaGFzT3duUHJvcGVydHkuIFVzZSBnb29nLm9iamVjdC5leHRlbmQgZm9yIHRoaXMgcHVycG9zZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGFyZ2V0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBTb3VyY2UuXG4gKi9cbmdvb2cubWl4aW4gPSBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkge1xuICBmb3IgKHZhciB4IGluIHNvdXJjZSkge1xuICAgIHRhcmdldFt4XSA9IHNvdXJjZVt4XTtcbiAgfVxuXG4gIC8vIEZvciBJRTcgb3IgbG93ZXIsIHRoZSBmb3ItaW4tbG9vcCBkb2VzIG5vdCBjb250YWluIGFueSBwcm9wZXJ0aWVzIHRoYXQgYXJlXG4gIC8vIG5vdCBlbnVtZXJhYmxlIG9uIHRoZSBwcm90b3R5cGUgb2JqZWN0IChmb3IgZXhhbXBsZSwgaXNQcm90b3R5cGVPZiBmcm9tXG4gIC8vIE9iamVjdC5wcm90b3R5cGUpIGJ1dCBhbHNvIGl0IHdpbGwgbm90IGluY2x1ZGUgJ3JlcGxhY2UnIG9uIG9iamVjdHMgdGhhdFxuICAvLyBleHRlbmQgU3RyaW5nIGFuZCBjaGFuZ2UgJ3JlcGxhY2UnIChub3QgdGhhdCBpdCBpcyBjb21tb24gZm9yIGFueW9uZSB0b1xuICAvLyBleHRlbmQgYW55dGhpbmcgZXhjZXB0IE9iamVjdCkuXG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfSBBbiBpbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kc1xuICogICAgIGJldHdlZW4gbWlkbmlnaHQsIEphbnVhcnkgMSwgMTk3MCBhbmQgdGhlIGN1cnJlbnQgdGltZS5cbiAqL1xuZ29vZy5ub3cgPSAoZ29vZy5UUlVTVEVEX1NJVEUgJiYgRGF0ZS5ub3cpIHx8IChmdW5jdGlvbigpIHtcbiAgLy8gVW5hcnkgcGx1cyBvcGVyYXRvciBjb252ZXJ0cyBpdHMgb3BlcmFuZCB0byBhIG51bWJlciB3aGljaCBpbiB0aGUgY2FzZSBvZlxuICAvLyBhIGRhdGUgaXMgZG9uZSBieSBjYWxsaW5nIGdldFRpbWUoKS5cbiAgcmV0dXJuICtuZXcgRGF0ZSgpO1xufSk7XG5cblxuLyoqXG4gKiBFdmFscyBKYXZhU2NyaXB0IGluIHRoZSBnbG9iYWwgc2NvcGUuICBJbiBJRSB0aGlzIHVzZXMgZXhlY1NjcmlwdCwgb3RoZXJcbiAqIGJyb3dzZXJzIHVzZSBnb29nLmdsb2JhbC5ldmFsLiBJZiBnb29nLmdsb2JhbC5ldmFsIGRvZXMgbm90IGV2YWx1YXRlIGluIHRoZVxuICogZ2xvYmFsIHNjb3BlIChmb3IgZXhhbXBsZSwgaW4gU2FmYXJpKSwgYXBwZW5kcyBhIHNjcmlwdCB0YWcgaW5zdGVhZC5cbiAqIFRocm93cyBhbiBleGNlcHRpb24gaWYgbmVpdGhlciBleGVjU2NyaXB0IG9yIGV2YWwgaXMgZGVmaW5lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzY3JpcHQgSmF2YVNjcmlwdCBzdHJpbmcuXG4gKi9cbmdvb2cuZ2xvYmFsRXZhbCA9IGZ1bmN0aW9uKHNjcmlwdCkge1xuICBpZiAoZ29vZy5nbG9iYWwuZXhlY1NjcmlwdCkge1xuICAgIGdvb2cuZ2xvYmFsLmV4ZWNTY3JpcHQoc2NyaXB0LCAnSmF2YVNjcmlwdCcpO1xuICB9IGVsc2UgaWYgKGdvb2cuZ2xvYmFsLmV2YWwpIHtcbiAgICAvLyBUZXN0IHRvIHNlZSBpZiBldmFsIHdvcmtzXG4gICAgaWYgKGdvb2cuZXZhbFdvcmtzRm9yR2xvYmFsc18gPT0gbnVsbCkge1xuICAgICAgZ29vZy5nbG9iYWwuZXZhbCgndmFyIF9ldmFsVGVzdF8gPSAxOycpO1xuICAgICAgaWYgKHR5cGVvZiBnb29nLmdsb2JhbFsnX2V2YWxUZXN0XyddICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZGVsZXRlIGdvb2cuZ2xvYmFsWydfZXZhbFRlc3RfJ107XG4gICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgICAgICAgIC8vIE1pY3Jvc29mdCBlZGdlIGZhaWxzIHRoZSBkZWxldGlvbiBhYm92ZSBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgfVxuICAgICAgICBnb29nLmV2YWxXb3Jrc0Zvckdsb2JhbHNfID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdvb2cuZXZhbFdvcmtzRm9yR2xvYmFsc18gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZ29vZy5ldmFsV29ya3NGb3JHbG9iYWxzXykge1xuICAgICAgZ29vZy5nbG9iYWwuZXZhbChzY3JpcHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0RvY3VtZW50fSAqL1xuICAgICAgdmFyIGRvYyA9IGdvb2cuZ2xvYmFsLmRvY3VtZW50O1xuICAgICAgdmFyIHNjcmlwdEVsdCA9IGRvYy5jcmVhdGVFbGVtZW50KCdTQ1JJUFQnKTtcbiAgICAgIHNjcmlwdEVsdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICBzY3JpcHRFbHQuZGVmZXIgPSBmYWxzZTtcbiAgICAgIC8vIE5vdGUodXNlcik6IGNhbid0IHVzZSAuaW5uZXJIVE1MIHNpbmNlIFwidCgnPHRlc3Q+JylcIiB3aWxsIGZhaWwgYW5kXG4gICAgICAvLyAudGV4dCBkb2Vzbid0IHdvcmsgaW4gU2FmYXJpIDIuICBUaGVyZWZvcmUgd2UgYXBwZW5kIGEgdGV4dCBub2RlLlxuICAgICAgc2NyaXB0RWx0LmFwcGVuZENoaWxkKGRvYy5jcmVhdGVUZXh0Tm9kZShzY3JpcHQpKTtcbiAgICAgIGRvYy5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdEVsdCk7XG4gICAgICBkb2MuYm9keS5yZW1vdmVDaGlsZChzY3JpcHRFbHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBFcnJvcignZ29vZy5nbG9iYWxFdmFsIG5vdCBhdmFpbGFibGUnKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB3ZSBjYW4gY2FsbCAnZXZhbCcgZGlyZWN0bHkgdG8gZXZhbCBjb2RlIGluIHRoZVxuICogZ2xvYmFsIHNjb3BlLiBTZXQgdG8gYSBCb29sZWFuIGJ5IHRoZSBmaXJzdCBjYWxsIHRvIGdvb2cuZ2xvYmFsRXZhbCAod2hpY2hcbiAqIGVtcGlyaWNhbGx5IHRlc3RzIHdoZXRoZXIgZXZhbCB3b3JrcyBmb3IgZ2xvYmFscykuIEBzZWUgZ29vZy5nbG9iYWxFdmFsXG4gKiBAdHlwZSB7P2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2YWxXb3Jrc0Zvckdsb2JhbHNfID0gbnVsbDtcblxuXG4vKipcbiAqIE9wdGlvbmFsIG1hcCBvZiBDU1MgY2xhc3MgbmFtZXMgdG8gb2JmdXNjYXRlZCBuYW1lcyB1c2VkIHdpdGhcbiAqIGdvb2cuZ2V0Q3NzTmFtZSgpLlxuICogQHByaXZhdGUgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fHVuZGVmaW5lZH1cbiAqIEBzZWUgZ29vZy5zZXRDc3NOYW1lTWFwcGluZ1xuICovXG5nb29nLmNzc05hbWVNYXBwaW5nXztcblxuXG4vKipcbiAqIE9wdGlvbmFsIG9iZnVzY2F0aW9uIHN0eWxlIGZvciBDU1MgY2xhc3MgbmFtZXMuIFNob3VsZCBiZSBzZXQgdG8gZWl0aGVyXG4gKiAnQllfV0hPTEUnIG9yICdCWV9QQVJUJyBpZiBkZWZpbmVkLlxuICogQHR5cGUge3N0cmluZ3x1bmRlZmluZWR9XG4gKiBAcHJpdmF0ZVxuICogQHNlZSBnb29nLnNldENzc05hbWVNYXBwaW5nXG4gKi9cbmdvb2cuY3NzTmFtZU1hcHBpbmdTdHlsZV87XG5cblxuLyoqXG4gKiBIYW5kbGVzIHN0cmluZ3MgdGhhdCBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCBhcyBDU1MgY2xhc3MgbmFtZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3b3JrcyBpbiB0YW5kZW0gd2l0aCBAc2VlIGdvb2cuc2V0Q3NzTmFtZU1hcHBpbmcuXG4gKlxuICogV2l0aG91dCBhbnkgbWFwcGluZyBzZXQsIHRoZSBhcmd1bWVudHMgYXJlIHNpbXBsZSBqb2luZWQgd2l0aCBhIGh5cGhlbiBhbmRcbiAqIHBhc3NlZCB0aHJvdWdoIHVuYWx0ZXJlZC5cbiAqXG4gKiBXaGVuIHRoZXJlIGlzIGEgbWFwcGluZywgdGhlcmUgYXJlIHR3byBwb3NzaWJsZSBzdHlsZXMgaW4gd2hpY2ggdGhlc2VcbiAqIG1hcHBpbmdzIGFyZSB1c2VkLiBJbiB0aGUgQllfUEFSVCBzdHlsZSwgZWFjaCBwYXJ0IChpLmUuIGluIGJldHdlZW4gaHlwaGVucylcbiAqIG9mIHRoZSBwYXNzZWQgaW4gY3NzIG5hbWUgaXMgcmV3cml0dGVuIGFjY29yZGluZyB0byB0aGUgbWFwLiBJbiB0aGUgQllfV0hPTEVcbiAqIHN0eWxlLCB0aGUgZnVsbCBjc3MgbmFtZSBpcyBsb29rZWQgdXAgaW4gdGhlIG1hcCBkaXJlY3RseS4gSWYgYSByZXdyaXRlIGlzXG4gKiBub3Qgc3BlY2lmaWVkIGJ5IHRoZSBtYXAsIHRoZSBjb21waWxlciB3aWxsIG91dHB1dCBhIHdhcm5pbmcuXG4gKlxuICogV2hlbiB0aGUgbWFwcGluZyBpcyBwYXNzZWQgdG8gdGhlIGNvbXBpbGVyLCBpdCB3aWxsIHJlcGxhY2UgY2FsbHMgdG9cbiAqIGdvb2cuZ2V0Q3NzTmFtZSB3aXRoIHRoZSBzdHJpbmdzIGZyb20gdGhlIG1hcHBpbmcsIGUuZy5cbiAqICAgICB2YXIgeCA9IGdvb2cuZ2V0Q3NzTmFtZSgnZm9vJyk7XG4gKiAgICAgdmFyIHkgPSBnb29nLmdldENzc05hbWUodGhpcy5iYXNlQ2xhc3MsICdhY3RpdmUnKTtcbiAqICBiZWNvbWVzOlxuICogICAgIHZhciB4PSAnZm9vJztcbiAqICAgICB2YXIgeSA9IHRoaXMuYmFzZUNsYXNzICsgJy1hY3RpdmUnO1xuICpcbiAqIElmIG9uZSBhcmd1bWVudCBpcyBwYXNzZWQgaXQgd2lsbCBiZSBwcm9jZXNzZWQsIGlmIHR3byBhcmUgcGFzc2VkIG9ubHkgdGhlXG4gKiBtb2RpZmllciB3aWxsIGJlIHByb2Nlc3NlZCwgYXMgaXQgaXMgYXNzdW1lZCB0aGUgZmlyc3QgYXJndW1lbnQgd2FzIGdlbmVyYXRlZFxuICogYXMgYSByZXN1bHQgb2YgY2FsbGluZyBnb29nLmdldENzc05hbWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBUaGUgY2xhc3MgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X21vZGlmaWVyIEEgbW9kaWZpZXIgdG8gYmUgYXBwZW5kZWQgdG8gdGhlIGNsYXNzIG5hbWUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjbGFzcyBuYW1lIG9yIHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZSBjbGFzcyBuYW1lIGFuZFxuICogICAgIHRoZSBtb2RpZmllci5cbiAqL1xuZ29vZy5nZXRDc3NOYW1lID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBvcHRfbW9kaWZpZXIpIHtcbiAgdmFyIGdldE1hcHBpbmcgPSBmdW5jdGlvbihjc3NOYW1lKSB7XG4gICAgcmV0dXJuIGdvb2cuY3NzTmFtZU1hcHBpbmdfW2Nzc05hbWVdIHx8IGNzc05hbWU7XG4gIH07XG5cbiAgdmFyIHJlbmFtZUJ5UGFydHMgPSBmdW5jdGlvbihjc3NOYW1lKSB7XG4gICAgLy8gUmVtYXAgYWxsIHRoZSBwYXJ0cyBpbmRpdmlkdWFsbHkuXG4gICAgdmFyIHBhcnRzID0gY3NzTmFtZS5zcGxpdCgnLScpO1xuICAgIHZhciBtYXBwZWQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBtYXBwZWQucHVzaChnZXRNYXBwaW5nKHBhcnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBtYXBwZWQuam9pbignLScpO1xuICB9O1xuXG4gIHZhciByZW5hbWU7XG4gIGlmIChnb29nLmNzc05hbWVNYXBwaW5nXykge1xuICAgIHJlbmFtZSA9IGdvb2cuY3NzTmFtZU1hcHBpbmdTdHlsZV8gPT0gJ0JZX1dIT0xFJyA/XG4gICAgICAgIGdldE1hcHBpbmcgOiByZW5hbWVCeVBhcnRzO1xuICB9IGVsc2Uge1xuICAgIHJlbmFtZSA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH07XG4gIH1cblxuICBpZiAob3B0X21vZGlmaWVyKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZSArICctJyArIHJlbmFtZShvcHRfbW9kaWZpZXIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZW5hbWUoY2xhc3NOYW1lKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIG1hcCB0byBjaGVjayB3aGVuIHJldHVybmluZyBhIHZhbHVlIGZyb20gZ29vZy5nZXRDc3NOYW1lKCkuIEV4YW1wbGU6XG4gKiA8cHJlPlxuICogZ29vZy5zZXRDc3NOYW1lTWFwcGluZyh7XG4gKiAgIFwiZ29vZ1wiOiBcImFcIixcbiAqICAgXCJkaXNhYmxlZFwiOiBcImJcIixcbiAqIH0pO1xuICpcbiAqIHZhciB4ID0gZ29vZy5nZXRDc3NOYW1lKCdnb29nJyk7XG4gKiAvLyBUaGUgZm9sbG93aW5nIGV2YWx1YXRlcyB0bzogXCJhIGEtYlwiLlxuICogZ29vZy5nZXRDc3NOYW1lKCdnb29nJykgKyAnICcgKyBnb29nLmdldENzc05hbWUoeCwgJ2Rpc2FibGVkJylcbiAqIDwvcHJlPlxuICogV2hlbiBkZWNsYXJlZCBhcyBhIG1hcCBvZiBzdHJpbmcgbGl0ZXJhbHMgdG8gc3RyaW5nIGxpdGVyYWxzLCB0aGUgSlNDb21waWxlclxuICogd2lsbCByZXBsYWNlIGFsbCBjYWxscyB0byBnb29nLmdldENzc05hbWUoKSB1c2luZyB0aGUgc3VwcGxpZWQgbWFwIGlmIHRoZVxuICogLS1wcm9jZXNzX2Nsb3N1cmVfcHJpbWl0aXZlcyBmbGFnIGlzIHNldC5cbiAqXG4gKiBAcGFyYW0geyFPYmplY3R9IG1hcHBpbmcgQSBtYXAgb2Ygc3RyaW5ncyB0byBzdHJpbmdzIHdoZXJlIGtleXMgYXJlIHBvc3NpYmxlXG4gKiAgICAgYXJndW1lbnRzIHRvIGdvb2cuZ2V0Q3NzTmFtZSgpIGFuZCB2YWx1ZXMgYXJlIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlc1xuICogICAgIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfc3R5bGUgVGhlIHN0eWxlIG9mIGNzcyBuYW1lIG1hcHBpbmcuIFRoZXJlIGFyZSB0d28gdmFsaWRcbiAqICAgICBvcHRpb25zOiAnQllfUEFSVCcsIGFuZCAnQllfV0hPTEUnLlxuICogQHNlZSBnb29nLmdldENzc05hbWUgZm9yIGEgZGVzY3JpcHRpb24uXG4gKi9cbmdvb2cuc2V0Q3NzTmFtZU1hcHBpbmcgPSBmdW5jdGlvbihtYXBwaW5nLCBvcHRfc3R5bGUpIHtcbiAgZ29vZy5jc3NOYW1lTWFwcGluZ18gPSBtYXBwaW5nO1xuICBnb29nLmNzc05hbWVNYXBwaW5nU3R5bGVfID0gb3B0X3N0eWxlO1xufTtcblxuXG4vKipcbiAqIFRvIHVzZSBDU1MgcmVuYW1pbmcgaW4gY29tcGlsZWQgbW9kZSwgb25lIG9mIHRoZSBpbnB1dCBmaWxlcyBzaG91bGQgaGF2ZSBhXG4gKiBjYWxsIHRvIGdvb2cuc2V0Q3NzTmFtZU1hcHBpbmcoKSB3aXRoIGFuIG9iamVjdCBsaXRlcmFsIHRoYXQgdGhlIEpTQ29tcGlsZXJcbiAqIGNhbiBleHRyYWN0IGFuZCB1c2UgdG8gcmVwbGFjZSBhbGwgY2FsbHMgdG8gZ29vZy5nZXRDc3NOYW1lKCkuIEluIHVuY29tcGlsZWRcbiAqIG1vZGUsIEphdmFTY3JpcHQgY29kZSBzaG91bGQgYmUgbG9hZGVkIGJlZm9yZSB0aGlzIGJhc2UuanMgZmlsZSB0aGF0IGRlY2xhcmVzXG4gKiBhIGdsb2JhbCB2YXJpYWJsZSwgQ0xPU1VSRV9DU1NfTkFNRV9NQVBQSU5HLCB3aGljaCBpcyB1c2VkIGJlbG93LiBUaGlzIGlzXG4gKiB0byBlbnN1cmUgdGhhdCB0aGUgbWFwcGluZyBpcyBsb2FkZWQgYmVmb3JlIGFueSBjYWxscyB0byBnb29nLmdldENzc05hbWUoKVxuICogYXJlIG1hZGUgaW4gdW5jb21waWxlZCBtb2RlLlxuICpcbiAqIEEgaG9vayBmb3Igb3ZlcnJpZGluZyB0aGUgQ1NTIG5hbWUgbWFwcGluZy5cbiAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPnx1bmRlZmluZWR9XG4gKi9cbmdvb2cuZ2xvYmFsLkNMT1NVUkVfQ1NTX05BTUVfTUFQUElORztcblxuXG5pZiAoIUNPTVBJTEVEICYmIGdvb2cuZ2xvYmFsLkNMT1NVUkVfQ1NTX05BTUVfTUFQUElORykge1xuICAvLyBUaGlzIGRvZXMgbm90IGNhbGwgZ29vZy5zZXRDc3NOYW1lTWFwcGluZygpIGJlY2F1c2UgdGhlIEpTQ29tcGlsZXJcbiAgLy8gcmVxdWlyZXMgdGhhdCBnb29nLnNldENzc05hbWVNYXBwaW5nKCkgYmUgY2FsbGVkIHdpdGggYW4gb2JqZWN0IGxpdGVyYWwuXG4gIGdvb2cuY3NzTmFtZU1hcHBpbmdfID0gZ29vZy5nbG9iYWwuQ0xPU1VSRV9DU1NfTkFNRV9NQVBQSU5HO1xufVxuXG5cbi8qKlxuICogR2V0cyBhIGxvY2FsaXplZCBtZXNzYWdlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYSBjb21waWxlciBwcmltaXRpdmUuIElmIHlvdSBnaXZlIHRoZSBjb21waWxlciBhIGxvY2FsaXplZFxuICogbWVzc2FnZSBidW5kbGUsIGl0IHdpbGwgcmVwbGFjZSB0aGUgc3RyaW5nIGF0IGNvbXBpbGUtdGltZSB3aXRoIGEgbG9jYWxpemVkXG4gKiB2ZXJzaW9uLCBhbmQgZXhwYW5kIGdvb2cuZ2V0TXNnIGNhbGwgdG8gYSBjb25jYXRlbmF0ZWQgc3RyaW5nLlxuICpcbiAqIE1lc3NhZ2VzIG11c3QgYmUgaW5pdGlhbGl6ZWQgaW4gdGhlIGZvcm06XG4gKiA8Y29kZT5cbiAqIHZhciBNU0dfTkFNRSA9IGdvb2cuZ2V0TXNnKCdIZWxsbyB7JHBsYWNlaG9sZGVyfScsIHsncGxhY2Vob2xkZXInOiAnd29ybGQnfSk7XG4gKiA8L2NvZGU+XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUcmFuc2xhdGFibGUgc3RyaW5nLCBwbGFjZXMgaG9sZGVycyBpbiB0aGUgZm9ybSB7JGZvb30uXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIHN0cmluZz49fSBvcHRfdmFsdWVzIE1hcHMgcGxhY2UgaG9sZGVyIG5hbWUgdG8gdmFsdWUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IG1lc3NhZ2Ugd2l0aCBwbGFjZWhvbGRlcnMgZmlsbGVkLlxuICovXG5nb29nLmdldE1zZyA9IGZ1bmN0aW9uKHN0ciwgb3B0X3ZhbHVlcykge1xuICBpZiAob3B0X3ZhbHVlcykge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXHtcXCQoW159XSspfS9nLCBmdW5jdGlvbihtYXRjaCwga2V5KSB7XG4gICAgICByZXR1cm4ga2V5IGluIG9wdF92YWx1ZXMgPyBvcHRfdmFsdWVzW2tleV0gOiBtYXRjaDtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vKipcbiAqIEdldHMgYSBsb2NhbGl6ZWQgbWVzc2FnZS4gSWYgdGhlIG1lc3NhZ2UgZG9lcyBub3QgaGF2ZSBhIHRyYW5zbGF0aW9uLCBnaXZlcyBhXG4gKiBmYWxsYmFjayBtZXNzYWdlLlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIHdoZW4gaW50cm9kdWNpbmcgYSBuZXcgbWVzc2FnZSB0aGF0IGhhcyBub3QgeWV0IGJlZW5cbiAqIHRyYW5zbGF0ZWQgaW50byBhbGwgbGFuZ3VhZ2VzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYSBjb21waWxlciBwcmltaXRpdmUuIE11c3QgYmUgdXNlZCBpbiB0aGUgZm9ybTpcbiAqIDxjb2RlPnZhciB4ID0gZ29vZy5nZXRNc2dXaXRoRmFsbGJhY2soTVNHX0EsIE1TR19CKTs8L2NvZGU+XG4gKiB3aGVyZSBNU0dfQSBhbmQgTVNHX0Igd2VyZSBpbml0aWFsaXplZCB3aXRoIGdvb2cuZ2V0TXNnLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhIFRoZSBwcmVmZXJyZWQgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBiIFRoZSBmYWxsYmFjayBtZXNzYWdlLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgYmVzdCB0cmFuc2xhdGVkIG1lc3NhZ2UuXG4gKi9cbmdvb2cuZ2V0TXNnV2l0aEZhbGxiYWNrID0gZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYTtcbn07XG5cblxuLyoqXG4gKiBFeHBvc2VzIGFuIHVub2JmdXNjYXRlZCBnbG9iYWwgbmFtZXNwYWNlIHBhdGggZm9yIHRoZSBnaXZlbiBvYmplY3QuXG4gKiBOb3RlIHRoYXQgZmllbGRzIG9mIHRoZSBleHBvcnRlZCBvYmplY3QgKndpbGwqIGJlIG9iZnVzY2F0ZWQsIHVubGVzcyB0aGV5IGFyZVxuICogZXhwb3J0ZWQgaW4gdHVybiB2aWEgdGhpcyBmdW5jdGlvbiBvciBnb29nLmV4cG9ydFByb3BlcnR5LlxuICpcbiAqIEFsc28gaGFuZHkgZm9yIG1ha2luZyBwdWJsaWMgaXRlbXMgdGhhdCBhcmUgZGVmaW5lZCBpbiBhbm9ueW1vdXMgY2xvc3VyZXMuXG4gKlxuICogZXguIGdvb2cuZXhwb3J0U3ltYm9sKCdwdWJsaWMucGF0aC5Gb28nLCBGb28pO1xuICpcbiAqIGV4LiBnb29nLmV4cG9ydFN5bWJvbCgncHVibGljLnBhdGguRm9vLnN0YXRpY0Z1bmN0aW9uJywgRm9vLnN0YXRpY0Z1bmN0aW9uKTtcbiAqICAgICBwdWJsaWMucGF0aC5Gb28uc3RhdGljRnVuY3Rpb24oKTtcbiAqXG4gKiBleC4gZ29vZy5leHBvcnRTeW1ib2woJ3B1YmxpYy5wYXRoLkZvby5wcm90b3R5cGUubXlNZXRob2QnLFxuICogICAgICAgICAgICAgICAgICAgICAgIEZvby5wcm90b3R5cGUubXlNZXRob2QpO1xuICogICAgIG5ldyBwdWJsaWMucGF0aC5Gb28oKS5teU1ldGhvZCgpO1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwdWJsaWNQYXRoIFVub2JmdXNjYXRlZCBuYW1lIHRvIGV4cG9ydC5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IE9iamVjdCB0aGUgbmFtZSBzaG91bGQgcG9pbnQgdG8uXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9vYmplY3RUb0V4cG9ydFRvIFRoZSBvYmplY3QgdG8gYWRkIHRoZSBwYXRoIHRvOyBkZWZhdWx0XG4gKiAgICAgaXMgZ29vZy5nbG9iYWwuXG4gKi9cbmdvb2cuZXhwb3J0U3ltYm9sID0gZnVuY3Rpb24ocHVibGljUGF0aCwgb2JqZWN0LCBvcHRfb2JqZWN0VG9FeHBvcnRUbykge1xuICBnb29nLmV4cG9ydFBhdGhfKHB1YmxpY1BhdGgsIG9iamVjdCwgb3B0X29iamVjdFRvRXhwb3J0VG8pO1xufTtcblxuXG4vKipcbiAqIEV4cG9ydHMgYSBwcm9wZXJ0eSB1bm9iZnVzY2F0ZWQgaW50byB0aGUgb2JqZWN0J3MgbmFtZXNwYWNlLlxuICogZXguIGdvb2cuZXhwb3J0UHJvcGVydHkoRm9vLCAnc3RhdGljRnVuY3Rpb24nLCBGb28uc3RhdGljRnVuY3Rpb24pO1xuICogZXguIGdvb2cuZXhwb3J0UHJvcGVydHkoRm9vLnByb3RvdHlwZSwgJ215TWV0aG9kJywgRm9vLnByb3RvdHlwZS5teU1ldGhvZCk7XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB3aG9zZSBzdGF0aWMgcHJvcGVydHkgaXMgYmVpbmcgZXhwb3J0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcHVibGljTmFtZSBVbm9iZnVzY2F0ZWQgbmFtZSB0byBleHBvcnQuXG4gKiBAcGFyYW0geyp9IHN5bWJvbCBPYmplY3QgdGhlIG5hbWUgc2hvdWxkIHBvaW50IHRvLlxuICovXG5nb29nLmV4cG9ydFByb3BlcnR5ID0gZnVuY3Rpb24ob2JqZWN0LCBwdWJsaWNOYW1lLCBzeW1ib2wpIHtcbiAgb2JqZWN0W3B1YmxpY05hbWVdID0gc3ltYm9sO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBVc2FnZTpcbiAqIDxwcmU+XG4gKiBmdW5jdGlvbiBQYXJlbnRDbGFzcyhhLCBiKSB7IH1cbiAqIFBhcmVudENsYXNzLnByb3RvdHlwZS5mb28gPSBmdW5jdGlvbihhKSB7IH07XG4gKlxuICogZnVuY3Rpb24gQ2hpbGRDbGFzcyhhLCBiLCBjKSB7XG4gKiAgIENoaWxkQ2xhc3MuYmFzZSh0aGlzLCAnY29uc3RydWN0b3InLCBhLCBiKTtcbiAqIH1cbiAqIGdvb2cuaW5oZXJpdHMoQ2hpbGRDbGFzcywgUGFyZW50Q2xhc3MpO1xuICpcbiAqIHZhciBjaGlsZCA9IG5ldyBDaGlsZENsYXNzKCdhJywgJ2InLCAnc2VlJyk7XG4gKiBjaGlsZC5mb28oKTsgLy8gVGhpcyB3b3Jrcy5cbiAqIDwvcHJlPlxuICpcbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBjaGlsZEN0b3IgQ2hpbGQgY2xhc3MuXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gcGFyZW50Q3RvciBQYXJlbnQgY2xhc3MuXG4gKi9cbmdvb2cuaW5oZXJpdHMgPSBmdW5jdGlvbihjaGlsZEN0b3IsIHBhcmVudEN0b3IpIHtcbiAgLyoqIEBjb25zdHJ1Y3RvciAqL1xuICBmdW5jdGlvbiB0ZW1wQ3RvcigpIHt9O1xuICB0ZW1wQ3Rvci5wcm90b3R5cGUgPSBwYXJlbnRDdG9yLnByb3RvdHlwZTtcbiAgY2hpbGRDdG9yLnN1cGVyQ2xhc3NfID0gcGFyZW50Q3Rvci5wcm90b3R5cGU7XG4gIGNoaWxkQ3Rvci5wcm90b3R5cGUgPSBuZXcgdGVtcEN0b3IoKTtcbiAgLyoqIEBvdmVycmlkZSAqL1xuICBjaGlsZEN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY2hpbGRDdG9yO1xuXG4gIC8qKlxuICAgKiBDYWxscyBzdXBlcmNsYXNzIGNvbnN0cnVjdG9yL21ldGhvZC5cbiAgICpcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSBpZiB5b3UgdXNlIGdvb2cuaW5oZXJpdHMgdG9cbiAgICogZXhwcmVzcyBpbmhlcml0YW5jZSByZWxhdGlvbnNoaXBzIGJldHdlZW4gY2xhc3Nlcy5cbiAgICpcbiAgICogTk9URTogVGhpcyBpcyBhIHJlcGxhY2VtZW50IGZvciBnb29nLmJhc2UgYW5kIGZvciBzdXBlckNsYXNzX1xuICAgKiBwcm9wZXJ0eSBkZWZpbmVkIGluIGNoaWxkQ3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHshT2JqZWN0fSBtZSBTaG91bGQgYWx3YXlzIGJlIFwidGhpc1wiLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbWV0aG9kIG5hbWUgdG8gY2FsbC4gQ2FsbGluZ1xuICAgKiAgICAgc3VwZXJjbGFzcyBjb25zdHJ1Y3RvciBjYW4gYmUgZG9uZSB3aXRoIHRoZSBzcGVjaWFsIHN0cmluZ1xuICAgKiAgICAgJ2NvbnN0cnVjdG9yJy5cbiAgICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBUaGUgYXJndW1lbnRzIHRvIHBhc3MgdG8gc3VwZXJjbGFzc1xuICAgKiAgICAgbWV0aG9kL2NvbnN0cnVjdG9yLlxuICAgKiBAcmV0dXJuIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBzdXBlcmNsYXNzIG1ldGhvZC9jb25zdHJ1Y3Rvci5cbiAgICovXG4gIGNoaWxkQ3Rvci5iYXNlID0gZnVuY3Rpb24obWUsIG1ldGhvZE5hbWUsIHZhcl9hcmdzKSB7XG4gICAgLy8gQ29weWluZyB1c2luZyBsb29wIHRvIGF2b2lkIGRlb3AgZHVlIHRvIHBhc3NpbmcgYXJndW1lbnRzIG9iamVjdCB0b1xuICAgIC8vIGZ1bmN0aW9uLiBUaGlzIGlzIGZhc3RlciBpbiBtYW55IEpTIGVuZ2luZXMgYXMgb2YgbGF0ZSAyMDE0LlxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAyKTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpIC0gMl0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnRDdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXS5hcHBseShtZSwgYXJncyk7XG4gIH07XG59O1xuXG5cbi8qKlxuICogQ2FsbCB1cCB0byB0aGUgc3VwZXJjbGFzcy5cbiAqXG4gKiBJZiB0aGlzIGlzIGNhbGxlZCBmcm9tIGEgY29uc3RydWN0b3IsIHRoZW4gdGhpcyBjYWxscyB0aGUgc3VwZXJjbGFzc1xuICogY29uc3RydWN0b3Igd2l0aCBhcmd1bWVudHMgMS1OLlxuICpcbiAqIElmIHRoaXMgaXMgY2FsbGVkIGZyb20gYSBwcm90b3R5cGUgbWV0aG9kLCB0aGVuIHlvdSBtdXN0IHBhc3MgdGhlIG5hbWUgb2YgdGhlXG4gKiBtZXRob2QgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byB0aGlzIGZ1bmN0aW9uLiBJZiB5b3UgZG8gbm90LCB5b3Ugd2lsbCBnZXQgYVxuICogcnVudGltZSBlcnJvci4gVGhpcyBjYWxscyB0aGUgc3VwZXJjbGFzcycgbWV0aG9kIHdpdGggYXJndW1lbnRzIDItTi5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIG9ubHkgd29ya3MgaWYgeW91IHVzZSBnb29nLmluaGVyaXRzIHRvIGV4cHJlc3MgaW5oZXJpdGFuY2VcbiAqIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiB5b3VyIGNsYXNzZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBhIGNvbXBpbGVyIHByaW1pdGl2ZS4gQXQgY29tcGlsZS10aW1lLCB0aGUgY29tcGlsZXIgd2lsbCBkb1xuICogbWFjcm8gZXhwYW5zaW9uIHRvIHJlbW92ZSBhIGxvdCBvZiB0aGUgZXh0cmEgb3ZlcmhlYWQgdGhhdCB0aGlzIGZ1bmN0aW9uXG4gKiBpbnRyb2R1Y2VzLiBUaGUgY29tcGlsZXIgd2lsbCBhbHNvIGVuZm9yY2UgYSBsb3Qgb2YgdGhlIGFzc3VtcHRpb25zIHRoYXQgdGhpc1xuICogZnVuY3Rpb24gbWFrZXMsIGFuZCB0cmVhdCBpdCBhcyBhIGNvbXBpbGVyIGVycm9yIGlmIHlvdSBicmVhayB0aGVtLlxuICpcbiAqIEBwYXJhbSB7IU9iamVjdH0gbWUgU2hvdWxkIGFsd2F5cyBiZSBcInRoaXNcIi5cbiAqIEBwYXJhbSB7Kj19IG9wdF9tZXRob2ROYW1lIFRoZSBtZXRob2QgbmFtZSBpZiBjYWxsaW5nIGEgc3VwZXIgbWV0aG9kLlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBUaGUgcmVzdCBvZiB0aGUgYXJndW1lbnRzLlxuICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgc3VwZXJjbGFzcyBtZXRob2QuXG4gKiBAc3VwcHJlc3Mge2VzNVN0cmljdH0gVGhpcyBtZXRob2QgY2FuIG5vdCBiZSB1c2VkIGluIHN0cmljdCBtb2RlLCBidXRcbiAqICAgICBhbGwgQ2xvc3VyZSBMaWJyYXJ5IGNvbnN1bWVycyBtdXN0IGRlcGVuZCBvbiB0aGlzIGZpbGUuXG4gKi9cbmdvb2cuYmFzZSA9IGZ1bmN0aW9uKG1lLCBvcHRfbWV0aG9kTmFtZSwgdmFyX2FyZ3MpIHtcbiAgdmFyIGNhbGxlciA9IGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyO1xuXG4gIGlmIChnb29nLlNUUklDVF9NT0RFX0NPTVBBVElCTEUgfHwgKGdvb2cuREVCVUcgJiYgIWNhbGxlcikpIHtcbiAgICB0aHJvdyBFcnJvcignYXJndW1lbnRzLmNhbGxlciBub3QgZGVmaW5lZC4gIGdvb2cuYmFzZSgpIGNhbm5vdCBiZSB1c2VkICcgK1xuICAgICAgICAgICAgICAgICd3aXRoIHN0cmljdCBtb2RlIGNvZGUuIFNlZSAnICtcbiAgICAgICAgICAgICAgICAnaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLUMnKTtcbiAgfVxuXG4gIGlmIChjYWxsZXIuc3VwZXJDbGFzc18pIHtcbiAgICAvLyBDb3B5aW5nIHVzaW5nIGxvb3AgdG8gYXZvaWQgZGVvcCBkdWUgdG8gcGFzc2luZyBhcmd1bWVudHMgb2JqZWN0IHRvXG4gICAgLy8gZnVuY3Rpb24uIFRoaXMgaXMgZmFzdGVyIGluIG1hbnkgSlMgZW5naW5lcyBhcyBvZiBsYXRlIDIwMTQuXG4gICAgdmFyIGN0b3JBcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgY3RvckFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICAvLyBUaGlzIGlzIGEgY29uc3RydWN0b3IuIENhbGwgdGhlIHN1cGVyY2xhc3MgY29uc3RydWN0b3IuXG4gICAgcmV0dXJuIGNhbGxlci5zdXBlckNsYXNzXy5jb25zdHJ1Y3Rvci5hcHBseShtZSwgY3RvckFyZ3MpO1xuICB9XG5cbiAgLy8gQ29weWluZyB1c2luZyBsb29wIHRvIGF2b2lkIGRlb3AgZHVlIHRvIHBhc3NpbmcgYXJndW1lbnRzIG9iamVjdCB0b1xuICAvLyBmdW5jdGlvbi4gVGhpcyBpcyBmYXN0ZXIgaW4gbWFueSBKUyBlbmdpbmVzIGFzIG9mIGxhdGUgMjAxNC5cbiAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDIpO1xuICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGFyZ3NbaSAtIDJdID0gYXJndW1lbnRzW2ldO1xuICB9XG4gIHZhciBmb3VuZENhbGxlciA9IGZhbHNlO1xuICBmb3IgKHZhciBjdG9yID0gbWUuY29uc3RydWN0b3I7XG4gICAgICAgY3RvcjsgY3RvciA9IGN0b3Iuc3VwZXJDbGFzc18gJiYgY3Rvci5zdXBlckNsYXNzXy5jb25zdHJ1Y3Rvcikge1xuICAgIGlmIChjdG9yLnByb3RvdHlwZVtvcHRfbWV0aG9kTmFtZV0gPT09IGNhbGxlcikge1xuICAgICAgZm91bmRDYWxsZXIgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoZm91bmRDYWxsZXIpIHtcbiAgICAgIHJldHVybiBjdG9yLnByb3RvdHlwZVtvcHRfbWV0aG9kTmFtZV0uYXBwbHkobWUsIGFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHdlIGRpZCBub3QgZmluZCB0aGUgY2FsbGVyIGluIHRoZSBwcm90b3R5cGUgY2hhaW4sIHRoZW4gb25lIG9mIHR3b1xuICAvLyB0aGluZ3MgaGFwcGVuZWQ6XG4gIC8vIDEpIFRoZSBjYWxsZXIgaXMgYW4gaW5zdGFuY2UgbWV0aG9kLlxuICAvLyAyKSBUaGlzIG1ldGhvZCB3YXMgbm90IGNhbGxlZCBieSB0aGUgcmlnaHQgY2FsbGVyLlxuICBpZiAobWVbb3B0X21ldGhvZE5hbWVdID09PSBjYWxsZXIpIHtcbiAgICByZXR1cm4gbWUuY29uc3RydWN0b3IucHJvdG90eXBlW29wdF9tZXRob2ROYW1lXS5hcHBseShtZSwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICdnb29nLmJhc2UgY2FsbGVkIGZyb20gYSBtZXRob2Qgb2Ygb25lIG5hbWUgJyArXG4gICAgICAgICd0byBhIG1ldGhvZCBvZiBhIGRpZmZlcmVudCBuYW1lJyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBBbGxvdyBmb3IgYWxpYXNpbmcgd2l0aGluIHNjb3BlIGZ1bmN0aW9ucy4gIFRoaXMgZnVuY3Rpb24gZXhpc3RzIGZvclxuICogdW5jb21waWxlZCBjb2RlIC0gaW4gY29tcGlsZWQgY29kZSB0aGUgY2FsbHMgd2lsbCBiZSBpbmxpbmVkIGFuZCB0aGUgYWxpYXNlc1xuICogYXBwbGllZC4gIEluIHVuY29tcGlsZWQgY29kZSB0aGUgZnVuY3Rpb24gaXMgc2ltcGx5IHJ1biBzaW5jZSB0aGUgYWxpYXNlcyBhc1xuICogd3JpdHRlbiBhcmUgdmFsaWQgSmF2YVNjcmlwdC5cbiAqXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBGdW5jdGlvbiB0byBjYWxsLiAgVGhpcyBmdW5jdGlvbiBjYW4gY29udGFpbiBhbGlhc2VzXG4gKiAgICAgdG8gbmFtZXNwYWNlcyAoZS5nLiBcInZhciBkb20gPSBnb29nLmRvbVwiKSBvciBjbGFzc2VzXG4gKiAgICAgKGUuZy4gXCJ2YXIgVGltZXIgPSBnb29nLlRpbWVyXCIpLlxuICovXG5nb29nLnNjb3BlID0gZnVuY3Rpb24oZm4pIHtcbiAgZm4uY2FsbChnb29nLmdsb2JhbCk7XG59O1xuXG5cbi8qXG4gKiBUbyBzdXBwb3J0IHVuY29tcGlsZWQsIHN0cmljdCBtb2RlIGJ1bmRsZXMgdGhhdCB1c2UgZXZhbCB0byBkaXZpZGUgc291cmNlXG4gKiBsaWtlIHNvOlxuICogICAgZXZhbCgnc29tZVNvdXJjZTsvLyMgc291cmNlVXJsIHNvdXJjZWZpbGUuanMnKTtcbiAqIFdlIG5lZWQgdG8gZXhwb3J0IHRoZSBnbG9iYWxseSBkZWZpbmVkIHN5bWJvbHMgXCJnb29nXCIgYW5kIFwiQ09NUElMRURcIi5cbiAqIEV4cG9ydGluZyBcImdvb2dcIiBicmVha3MgdGhlIGNvbXBpbGVyIG9wdGltaXphdGlvbnMsIHNvIHdlIHJlcXVpcmVkIHRoYXRcbiAqIGJlIGRlZmluZWQgZXh0ZXJuYWxseS5cbiAqIE5PVEU6IFdlIGRvbid0IHVzZSBnb29nLmV4cG9ydFN5bWJvbCBoZXJlIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0byB0cmlnZ2VyXG4gKiBleHRlcm4gZ2VuZXJhdGlvbiB3aGVuIHRoYXQgY29tcGlsZXIgb3B0aW9uIGlzIGVuYWJsZWQuXG4gKi9cbmlmICghQ09NUElMRUQpIHtcbiAgZ29vZy5nbG9iYWxbJ0NPTVBJTEVEJ10gPSBDT01QSUxFRDtcbn1cblxuXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBnb29nLmRlZmluZUNsYXNzIGltcGxlbWVudGF0aW9uXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlc3RyaWN0ZWQgZm9ybSBvZiBhIENsb3N1cmUgXCJjbGFzc1wiOlxuICogICAtIGZyb20gdGhlIGNvbXBpbGVyJ3MgcGVyc3BlY3RpdmUsIHRoZSBpbnN0YW5jZSByZXR1cm5lZCBmcm9tIHRoZVxuICogICAgIGNvbnN0cnVjdG9yIGlzIHNlYWxlZCAobm8gbmV3IHByb3BlcnRpZXMgbWF5IGJlIGFkZGVkKS4gIFRoaXMgZW5hYmxlc1xuICogICAgIGJldHRlciBjaGVja3MuXG4gKiAgIC0gdGhlIGNvbXBpbGVyIHdpbGwgcmV3cml0ZSB0aGlzIGRlZmluaXRpb24gdG8gYSBmb3JtIHRoYXQgaXMgb3B0aW1hbFxuICogICAgIGZvciB0eXBlIGNoZWNraW5nIGFuZCBvcHRpbWl6YXRpb24gKGluaXRpYWxseSB0aGlzIHdpbGwgYmUgYSBtb3JlXG4gKiAgICAgdHJhZGl0aW9uYWwgZm9ybSkuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3VwZXJDbGFzcyBUaGUgc3VwZXJjbGFzcywgT2JqZWN0IG9yIG51bGwuXG4gKiBAcGFyYW0ge2dvb2cuZGVmaW5lQ2xhc3MuQ2xhc3NEZXNjcmlwdG9yfSBkZWZcbiAqICAgICBBbiBvYmplY3QgbGl0ZXJhbCBkZXNjcmliaW5nXG4gKiAgICAgdGhlIGNsYXNzLiAgSXQgbWF5IGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogICAgIFwiY29uc3RydWN0b3JcIjogdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gKiAgICAgXCJzdGF0aWNzXCI6IGFuIG9iamVjdCBsaXRlcmFsIGNvbnRhaW5pbmcgbWV0aG9kcyB0byBhZGQgdG8gdGhlIGNvbnN0cnVjdG9yXG4gKiAgICAgICAgYXMgXCJzdGF0aWNcIiBtZXRob2RzIG9yIGEgZnVuY3Rpb24gdGhhdCB3aWxsIHJlY2VpdmUgdGhlIGNvbnN0cnVjdG9yXG4gKiAgICAgICAgZnVuY3Rpb24gYXMgaXRzIG9ubHkgcGFyYW1ldGVyIHRvIHdoaWNoIHN0YXRpYyBwcm9wZXJ0aWVzIGNhblxuICogICAgICAgIGJlIGFkZGVkLlxuICogICAgIGFsbCBvdGhlciBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byB0aGUgcHJvdG90eXBlLlxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBUaGUgY2xhc3MgY29uc3RydWN0b3IuXG4gKi9cbmdvb2cuZGVmaW5lQ2xhc3MgPSBmdW5jdGlvbihzdXBlckNsYXNzLCBkZWYpIHtcbiAgLy8gVE9ETyhqb2hubGVueik6IGNvbnNpZGVyIG1ha2luZyB0aGUgc3VwZXJDbGFzcyBhbiBvcHRpb25hbCBwYXJhbWV0ZXIuXG4gIHZhciBjb25zdHJ1Y3RvciA9IGRlZi5jb25zdHJ1Y3RvcjtcbiAgdmFyIHN0YXRpY3MgPSBkZWYuc3RhdGljcztcbiAgLy8gV3JhcCB0aGUgY29uc3RydWN0b3IgcHJpb3IgdG8gc2V0dGluZyB1cCB0aGUgcHJvdG90eXBlIGFuZCBzdGF0aWMgbWV0aG9kcy5cbiAgaWYgKCFjb25zdHJ1Y3RvciB8fCBjb25zdHJ1Y3RvciA9PSBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yKSB7XG4gICAgY29uc3RydWN0b3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IEVycm9yKCdjYW5ub3QgaW5zdGFudGlhdGUgYW4gaW50ZXJmYWNlIChubyBjb25zdHJ1Y3RvciBkZWZpbmVkKS4nKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNscyA9IGdvb2cuZGVmaW5lQ2xhc3MuY3JlYXRlU2VhbGluZ0NvbnN0cnVjdG9yXyhjb25zdHJ1Y3Rvciwgc3VwZXJDbGFzcyk7XG4gIGlmIChzdXBlckNsYXNzKSB7XG4gICAgZ29vZy5pbmhlcml0cyhjbHMsIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgLy8gUmVtb3ZlIGFsbCB0aGUgcHJvcGVydGllcyB0aGF0IHNob3VsZCBub3QgYmUgY29waWVkIHRvIHRoZSBwcm90b3R5cGUuXG4gIGRlbGV0ZSBkZWYuY29uc3RydWN0b3I7XG4gIGRlbGV0ZSBkZWYuc3RhdGljcztcblxuICBnb29nLmRlZmluZUNsYXNzLmFwcGx5UHJvcGVydGllc18oY2xzLnByb3RvdHlwZSwgZGVmKTtcbiAgaWYgKHN0YXRpY3MgIT0gbnVsbCkge1xuICAgIGlmIChzdGF0aWNzIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgIHN0YXRpY3MoY2xzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ29vZy5kZWZpbmVDbGFzcy5hcHBseVByb3BlcnRpZXNfKGNscywgc3RhdGljcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7XG4gKiAgICAgIU9iamVjdHxcbiAqICAgICB7Y29uc3RydWN0b3I6IUZ1bmN0aW9ufXxcbiAqICAgICB7Y29uc3RydWN0b3I6IUZ1bmN0aW9uLCBzdGF0aWNzOihPYmplY3R8ZnVuY3Rpb24oRnVuY3Rpb24pOnZvaWQpfX1cbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3ZpZGV9XG4gKi9cbmdvb2cuZGVmaW5lQ2xhc3MuQ2xhc3NEZXNjcmlwdG9yO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGUgaW5zdGFuY2VzIHJldHVybmVkIGJ5XG4gKiBnb29nLmRlZmluZUNsYXNzIHNob3VsZCBiZSBzZWFsZWQgd2hlbiBwb3NzaWJsZS5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cuZGVmaW5lQ2xhc3MuU0VBTF9DTEFTU19JTlNUQU5DRVMnLCBnb29nLkRFQlVHKTtcblxuXG4vKipcbiAqIElmIGdvb2cuZGVmaW5lQ2xhc3MuU0VBTF9DTEFTU19JTlNUQU5DRVMgaXMgZW5hYmxlZCBhbmQgT2JqZWN0LnNlYWwgaXNcbiAqIGRlZmluZWQsIHRoaXMgZnVuY3Rpb24gd2lsbCB3cmFwIHRoZSBjb25zdHJ1Y3RvciBpbiBhIGZ1bmN0aW9uIHRoYXQgc2VhbHMgdGhlXG4gKiByZXN1bHRzIG9mIHRoZSBwcm92aWRlZCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gY3RyIFRoZSBjb25zdHJ1Y3RvciB3aG9zZSByZXN1bHRzIG1heWJlIGJlIHNlYWxlZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN1cGVyQ2xhc3MgVGhlIHN1cGVyY2xhc3MgY29uc3RydWN0b3IuXG4gKiBAcmV0dXJuIHshRnVuY3Rpb259IFRoZSByZXBsYWNlbWVudCBjb25zdHJ1Y3Rvci5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZGVmaW5lQ2xhc3MuY3JlYXRlU2VhbGluZ0NvbnN0cnVjdG9yXyA9IGZ1bmN0aW9uKGN0ciwgc3VwZXJDbGFzcykge1xuICBpZiAoZ29vZy5kZWZpbmVDbGFzcy5TRUFMX0NMQVNTX0lOU1RBTkNFUyAmJlxuICAgICAgT2JqZWN0LnNlYWwgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIC8vIERvbid0IHNlYWwgc3ViY2xhc3NlcyBvZiB1bnNlYWxhYmxlLXRhZ2dlZCBsZWdhY3kgY2xhc3Nlcy5cbiAgICBpZiAoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSAmJlxuICAgICAgICBzdXBlckNsYXNzLnByb3RvdHlwZVtnb29nLlVOU0VBTEFCTEVfQ09OU1RSVUNUT1JfUFJPUEVSVFlfXSkge1xuICAgICAgcmV0dXJuIGN0cjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHRoaXMge09iamVjdH1cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIHZhciB3cmFwcGVkQ3RyID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBEb24ndCBzZWFsIGFuIGluc3RhbmNlIG9mIGEgc3ViY2xhc3Mgd2hlbiBpdCBjYWxscyB0aGUgY29uc3RydWN0b3Igb2ZcbiAgICAgIC8vIGl0cyBzdXBlciBjbGFzcyBhcyB0aGVyZSBpcyBtb3N0IGxpa2VseSBzdGlsbCBzZXR1cCB0byBkby5cbiAgICAgIHZhciBpbnN0YW5jZSA9IGN0ci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBpbnN0YW5jZVtnb29nLlVJRF9QUk9QRVJUWV9dID0gaW5zdGFuY2VbZ29vZy5VSURfUFJPUEVSVFlfXTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSB3cmFwcGVkQ3RyKSB7XG4gICAgICAgIE9iamVjdC5zZWFsKGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuICAgIHJldHVybiB3cmFwcGVkQ3RyO1xuICB9XG4gIHJldHVybiBjdHI7XG59O1xuXG5cbi8vIFRPRE8oam9obmxlbnopOiBzaGFyZSB0aGVzZSB2YWx1ZXMgd2l0aCB0aGUgZ29vZy5vYmplY3Rcbi8qKlxuICogVGhlIG5hbWVzIG9mIHRoZSBmaWVsZHMgdGhhdCBhcmUgZGVmaW5lZCBvbiBPYmplY3QucHJvdG90eXBlLlxuICogQHR5cGUgeyFBcnJheTxzdHJpbmc+fVxuICogQHByaXZhdGVcbiAqIEBjb25zdFxuICovXG5nb29nLmRlZmluZUNsYXNzLk9CSkVDVF9QUk9UT1RZUEVfRklFTERTXyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG5cblxuLy8gVE9ETyhqb2hubGVueik6IHNoYXJlIHRoaXMgZnVuY3Rpb24gd2l0aCB0aGUgZ29vZy5vYmplY3Rcbi8qKlxuICogQHBhcmFtIHshT2JqZWN0fSB0YXJnZXQgVGhlIG9iamVjdCB0byBhZGQgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7IU9iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmRlZmluZUNsYXNzLmFwcGx5UHJvcGVydGllc18gPSBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkge1xuICAvLyBUT0RPKGpvaG5sZW56KTogdXBkYXRlIHRoaXMgdG8gc3VwcG9ydCBFUzUgZ2V0dGVycy9zZXR0ZXJzXG5cbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgLy8gRm9yIElFIHRoZSBmb3ItaW4tbG9vcCBkb2VzIG5vdCBjb250YWluIGFueSBwcm9wZXJ0aWVzIHRoYXQgYXJlIG5vdFxuICAvLyBlbnVtZXJhYmxlIG9uIHRoZSBwcm90b3R5cGUgb2JqZWN0IChmb3IgZXhhbXBsZSBpc1Byb3RvdHlwZU9mIGZyb21cbiAgLy8gT2JqZWN0LnByb3RvdHlwZSkgYW5kIGl0IHdpbGwgYWxzbyBub3QgaW5jbHVkZSAncmVwbGFjZScgb24gb2JqZWN0cyB0aGF0XG4gIC8vIGV4dGVuZCBTdHJpbmcgYW5kIGNoYW5nZSAncmVwbGFjZScgKG5vdCB0aGF0IGl0IGlzIGNvbW1vbiBmb3IgYW55b25lIHRvXG4gIC8vIGV4dGVuZCBhbnl0aGluZyBleGNlcHQgT2JqZWN0KS5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBnb29nLmRlZmluZUNsYXNzLk9CSkVDVF9QUk9UT1RZUEVfRklFTERTXy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGdvb2cuZGVmaW5lQ2xhc3MuT0JKRUNUX1BST1RPVFlQRV9GSUVMRFNfW2ldO1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIFNlYWxpbmcgY2xhc3NlcyBicmVha3MgdGhlIG9sZGVyIGlkaW9tIG9mIGFzc2lnbmluZyBwcm9wZXJ0aWVzIG9uIHRoZVxuICogcHJvdG90eXBlIHJhdGhlciB0aGFuIGluIHRoZSBjb25zdHJ1Y3Rvci4gIEFzIHN1Y2gsIGdvb2cuZGVmaW5lQ2xhc3NcbiAqIG11c3Qgbm90IHNlYWwgc3ViY2xhc3NlcyBvZiB0aGVzZSBvbGQtc3R5bGUgY2xhc3NlcyB1bnRpbCB0aGV5IGFyZSBmaXhlZC5cbiAqIFVudGlsIHRoZW4sIHRoaXMgbWFya3MgYSBjbGFzcyBhcyBcImJyb2tlblwiLCBpbnN0cnVjdGluZyBkZWZpbmVDbGFzc1xuICogbm90IHRvIHNlYWwgc3ViY2xhc3Nlcy5cbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBjdHIgVGhlIGxlZ2FjeSBjb25zdHJ1Y3RvciB0byB0YWcgYXMgdW5zZWFsYWJsZS5cbiAqL1xuZ29vZy50YWdVbnNlYWxhYmxlQ2xhc3MgPSBmdW5jdGlvbihjdHIpIHtcbiAgaWYgKCFDT01QSUxFRCAmJiBnb29nLmRlZmluZUNsYXNzLlNFQUxfQ0xBU1NfSU5TVEFOQ0VTKSB7XG4gICAgY3RyLnByb3RvdHlwZVtnb29nLlVOU0VBTEFCTEVfQ09OU1RSVUNUT1JfUFJPUEVSVFlfXSA9IHRydWU7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBOYW1lIGZvciB1bnNlYWxhYmxlIHRhZyBwcm9wZXJ0eS5cbiAqIEBjb25zdCBAcHJpdmF0ZSB7c3RyaW5nfVxuICovXG5nb29nLlVOU0VBTEFCTEVfQ09OU1RSVUNUT1JfUFJPUEVSVFlfID0gJ2dvb2dfZGVmaW5lQ2xhc3NfbGVnYWN5X3Vuc2VhbGFibGUnO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTEgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEZWZpbml0aW9uIG9mIHRoZSBkaXNwb3NhYmxlIGludGVyZmFjZS4gIEEgZGlzcG9zYWJsZSBvYmplY3RcbiAqIGhhcyBhIGRpc3Bvc2UgbWV0aG9kIHRvIHRvIGNsZWFuIHVwIHJlZmVyZW5jZXMgYW5kIHJlc291cmNlcy5cbiAqIEBhdXRob3Igbm5hemVAZ29vZ2xlLmNvbSAoTmF0aGFuIE5hemUpXG4gKi9cblxuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZGlzcG9zYWJsZS5JRGlzcG9zYWJsZScpO1xuXG5cblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIGEgZGlzcG9zYWJsZSBvYmplY3QuICBJZiBhIGluc3RhbmNlIHJlcXVpcmVzIGNsZWFudXBcbiAqIChyZWZlcmVuY2VzIENPTSBvYmplY3RzLCBET00gbm90ZXMsIG9yIG90aGVyIGRpc3Bvc2FibGUgb2JqZWN0cyksIGl0IHNob3VsZFxuICogaW1wbGVtZW50IHRoaXMgaW50ZXJmYWNlIChpdCBtYXkgc3ViY2xhc3MgZ29vZy5EaXNwb3NhYmxlKS5cbiAqIEBpbnRlcmZhY2VcbiAqL1xuZ29vZy5kaXNwb3NhYmxlLklEaXNwb3NhYmxlID0gZnVuY3Rpb24oKSB7fTtcblxuXG4vKipcbiAqIERpc3Bvc2VzIG9mIHRoZSBvYmplY3QgYW5kIGl0cyByZXNvdXJjZXMuXG4gKiBAcmV0dXJuIHt2b2lkfSBOb3RoaW5nLlxuICovXG5nb29nLmRpc3Bvc2FibGUuSURpc3Bvc2FibGUucHJvdG90eXBlLmRpc3Bvc2UgPSBnb29nLmFic3RyYWN0TWV0aG9kO1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgb2JqZWN0IGhhcyBiZWVuIGRpc3Bvc2VkIG9mLlxuICovXG5nb29nLmRpc3Bvc2FibGUuSURpc3Bvc2FibGUucHJvdG90eXBlLmlzRGlzcG9zZWQgPSBnb29nLmFic3RyYWN0TWV0aG9kO1xuIiwiLy8gQ29weXJpZ2h0IDIwMDUgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBJbXBsZW1lbnRzIHRoZSBkaXNwb3NhYmxlIGludGVyZmFjZS4gVGhlIGRpc3Bvc2UgbWV0aG9kIGlzIHVzZWRcbiAqIHRvIGNsZWFuIHVwIHJlZmVyZW5jZXMgYW5kIHJlc291cmNlcy5cbiAqIEBhdXRob3IgYXJ2QGdvb2dsZS5jb20gKEVyaWsgQXJ2aWRzc29uKVxuICovXG5cblxuZ29vZy5wcm92aWRlKCdnb29nLkRpc3Bvc2FibGUnKTtcbi8qKiBAc3VwcHJlc3Mge2V4dHJhUHJvdmlkZX0gKi9cbmdvb2cucHJvdmlkZSgnZ29vZy5kaXNwb3NlJyk7XG4vKiogQHN1cHByZXNzIHtleHRyYVByb3ZpZGV9ICovXG5nb29nLnByb3ZpZGUoJ2dvb2cuZGlzcG9zZUFsbCcpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuZGlzcG9zYWJsZS5JRGlzcG9zYWJsZScpO1xuXG5cblxuLyoqXG4gKiBDbGFzcyB0aGF0IHByb3ZpZGVzIHRoZSBiYXNpYyBpbXBsZW1lbnRhdGlvbiBmb3IgZGlzcG9zYWJsZSBvYmplY3RzLiBJZiB5b3VyXG4gKiBjbGFzcyBob2xkcyBvbmUgb3IgbW9yZSByZWZlcmVuY2VzIHRvIENPTSBvYmplY3RzLCBET00gbm9kZXMsIG9yIG90aGVyXG4gKiBkaXNwb3NhYmxlIG9iamVjdHMsIGl0IHNob3VsZCBleHRlbmQgdGhpcyBjbGFzcyBvciBpbXBsZW1lbnQgdGhlIGRpc3Bvc2FibGVcbiAqIGludGVyZmFjZSAoZGVmaW5lZCBpbiBnb29nLmRpc3Bvc2FibGUuSURpc3Bvc2FibGUpLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAaW1wbGVtZW50cyB7Z29vZy5kaXNwb3NhYmxlLklEaXNwb3NhYmxlfVxuICovXG5nb29nLkRpc3Bvc2FibGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKGdvb2cuRGlzcG9zYWJsZS5NT05JVE9SSU5HX01PREUgIT0gZ29vZy5EaXNwb3NhYmxlLk1vbml0b3JpbmdNb2RlLk9GRikge1xuICAgIGlmIChnb29nLkRpc3Bvc2FibGUuSU5DTFVERV9TVEFDS19PTl9DUkVBVElPTikge1xuICAgICAgdGhpcy5jcmVhdGlvblN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgfVxuICAgIGdvb2cuRGlzcG9zYWJsZS5pbnN0YW5jZXNfW2dvb2cuZ2V0VWlkKHRoaXMpXSA9IHRoaXM7XG4gIH1cbiAgLy8gU3VwcG9ydCBzZWFsaW5nXG4gIHRoaXMuZGlzcG9zZWRfID0gdGhpcy5kaXNwb3NlZF87XG4gIHRoaXMub25EaXNwb3NlQ2FsbGJhY2tzXyA9IHRoaXMub25EaXNwb3NlQ2FsbGJhY2tzXztcbn07XG5cblxuLyoqXG4gKiBAZW51bSB7bnVtYmVyfSBEaWZmZXJlbnQgbW9uaXRvcmluZyBtb2RlcyBmb3IgRGlzcG9zYWJsZS5cbiAqL1xuZ29vZy5EaXNwb3NhYmxlLk1vbml0b3JpbmdNb2RlID0ge1xuICAvKipcbiAgICogTm8gbW9uaXRvcmluZy5cbiAgICovXG4gIE9GRjogMCxcbiAgLyoqXG4gICAqIENyZWF0aW5nIGFuZCBkaXNwb3NpbmcgdGhlIGdvb2cuRGlzcG9zYWJsZSBpbnN0YW5jZXMgaXMgbW9uaXRvcmVkLiBBbGxcbiAgICogZGlzcG9zYWJsZSBvYmplY3RzIG5lZWQgdG8gY2FsbCB0aGUge0Bjb2RlIGdvb2cuRGlzcG9zYWJsZX0gYmFzZVxuICAgKiBjb25zdHJ1Y3Rvci4gVGhlIFBFUk1BTkVOVCBtb2RlIG11c3QgYmUgc3dpdGNoZWQgb24gYmVmb3JlIGNyZWF0aW5nIGFueVxuICAgKiBnb29nLkRpc3Bvc2FibGUgaW5zdGFuY2VzLlxuICAgKi9cbiAgUEVSTUFORU5UOiAxLFxuICAvKipcbiAgICogSU5URVJBQ1RJVkUgbW9kZSBjYW4gYmUgc3dpdGNoZWQgb24gYW5kIG9mZiBvbiB0aGUgZmx5IHdpdGhvdXQgcHJvZHVjaW5nXG4gICAqIGVycm9ycy4gSXQgYWxzbyBkb2Vzbid0IHdhcm4gaWYgdGhlIGRpc3Bvc2FibGUgb2JqZWN0cyBkb24ndCBjYWxsIHRoZVxuICAgKiB7QGNvZGUgZ29vZy5EaXNwb3NhYmxlfSBiYXNlIGNvbnN0cnVjdG9yLlxuICAgKi9cbiAgSU5URVJBQ1RJVkU6IDJcbn07XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtudW1iZXJ9IFRoZSBtb25pdG9yaW5nIG1vZGUgb2YgdGhlIGdvb2cuRGlzcG9zYWJsZVxuICogICAgIGluc3RhbmNlcy4gRGVmYXVsdCBpcyBPRkYuIFN3aXRjaGluZyBvbiB0aGUgbW9uaXRvcmluZyBpcyBvbmx5XG4gKiAgICAgcmVjb21tZW5kZWQgZm9yIGRlYnVnZ2luZyBiZWNhdXNlIGl0IGhhcyBhIHNpZ25pZmljYW50IGltcGFjdCBvblxuICogICAgIHBlcmZvcm1hbmNlIGFuZCBtZW1vcnkgdXNhZ2UuIElmIHN3aXRjaGVkIG9mZiwgdGhlIG1vbml0b3JpbmcgY29kZVxuICogICAgIGNvbXBpbGVzIGRvd24gdG8gMCBieXRlcy5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cuRGlzcG9zYWJsZS5NT05JVE9SSU5HX01PREUnLCAwKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdG8gYXR0YWNoIGNyZWF0aW9uIHN0YWNrIHRvIGVhY2ggY3JlYXRlZCBkaXNwb3NhYmxlXG4gKiAgICAgaW5zdGFuY2U7IFRoaXMgaXMgb25seSByZWxldmFudCBmb3Igd2hlbiBNb25pdG9yaW5nTW9kZSAhPSBPRkYuXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLkRpc3Bvc2FibGUuSU5DTFVERV9TVEFDS19PTl9DUkVBVElPTicsIHRydWUpO1xuXG5cbi8qKlxuICogTWFwcyB0aGUgdW5pcXVlIElEIG9mIGV2ZXJ5IHVuZGlzcG9zZWQge0Bjb2RlIGdvb2cuRGlzcG9zYWJsZX0gb2JqZWN0IHRvXG4gKiB0aGUgb2JqZWN0IGl0c2VsZi5cbiAqIEB0eXBlIHshT2JqZWN0PG51bWJlciwgIWdvb2cuRGlzcG9zYWJsZT59XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLkRpc3Bvc2FibGUuaW5zdGFuY2VzXyA9IHt9O1xuXG5cbi8qKlxuICogQHJldHVybiB7IUFycmF5PCFnb29nLkRpc3Bvc2FibGU+fSBBbGwge0Bjb2RlIGdvb2cuRGlzcG9zYWJsZX0gb2JqZWN0cyB0aGF0XG4gKiAgICAgaGF2ZW4ndCBiZWVuIGRpc3Bvc2VkIG9mLlxuICovXG5nb29nLkRpc3Bvc2FibGUuZ2V0VW5kaXNwb3NlZE9iamVjdHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJldCA9IFtdO1xuICBmb3IgKHZhciBpZCBpbiBnb29nLkRpc3Bvc2FibGUuaW5zdGFuY2VzXykge1xuICAgIGlmIChnb29nLkRpc3Bvc2FibGUuaW5zdGFuY2VzXy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIHJldC5wdXNoKGdvb2cuRGlzcG9zYWJsZS5pbnN0YW5jZXNfW051bWJlcihpZCldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIHJlZ2lzdHJ5IG9mIHVuZGlzcG9zZWQgb2JqZWN0cyBidXQgZG9lc24ndCBkaXNwb3NlIG9mIHRoZW0uXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5jbGVhclVuZGlzcG9zZWRPYmplY3RzID0gZnVuY3Rpb24oKSB7XG4gIGdvb2cuRGlzcG9zYWJsZS5pbnN0YW5jZXNfID0ge307XG59O1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgb2JqZWN0IGhhcyBiZWVuIGRpc3Bvc2VkIG9mLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLkRpc3Bvc2FibGUucHJvdG90eXBlLmRpc3Bvc2VkXyA9IGZhbHNlO1xuXG5cbi8qKlxuICogQ2FsbGJhY2tzIHRvIGludm9rZSB3aGVuIHRoaXMgb2JqZWN0IGlzIGRpc3Bvc2VkLlxuICogQHR5cGUge0FycmF5PCFGdW5jdGlvbj59XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLkRpc3Bvc2FibGUucHJvdG90eXBlLm9uRGlzcG9zZUNhbGxiYWNrc187XG5cblxuLyoqXG4gKiBJZiBtb25pdG9yaW5nIHRoZSBnb29nLkRpc3Bvc2FibGUgaW5zdGFuY2VzIGlzIGVuYWJsZWQsIHN0b3JlcyB0aGUgY3JlYXRpb25cbiAqIHN0YWNrIHRyYWNlIG9mIHRoZSBEaXNwb3NhYmxlIGluc3RhbmNlLlxuICogQGNvbnN0IHtzdHJpbmd9XG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5wcm90b3R5cGUuY3JlYXRpb25TdGFjaztcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG9iamVjdCBoYXMgYmVlbiBkaXNwb3NlZCBvZi5cbiAqIEBvdmVycmlkZVxuICovXG5nb29nLkRpc3Bvc2FibGUucHJvdG90eXBlLmlzRGlzcG9zZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZGlzcG9zZWRfO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG9iamVjdCBoYXMgYmVlbiBkaXNwb3NlZCBvZi5cbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgI2lzRGlzcG9zZWR9IGluc3RlYWQuXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5wcm90b3R5cGUuZ2V0RGlzcG9zZWQgPSBnb29nLkRpc3Bvc2FibGUucHJvdG90eXBlLmlzRGlzcG9zZWQ7XG5cblxuLyoqXG4gKiBEaXNwb3NlcyBvZiB0aGUgb2JqZWN0LiBJZiB0aGUgb2JqZWN0IGhhc24ndCBhbHJlYWR5IGJlZW4gZGlzcG9zZWQgb2YsIGNhbGxzXG4gKiB7QGxpbmsgI2Rpc3Bvc2VJbnRlcm5hbH0uIENsYXNzZXMgdGhhdCBleHRlbmQge0Bjb2RlIGdvb2cuRGlzcG9zYWJsZX0gc2hvdWxkXG4gKiBvdmVycmlkZSB7QGxpbmsgI2Rpc3Bvc2VJbnRlcm5hbH0gaW4gb3JkZXIgdG8gZGVsZXRlIHJlZmVyZW5jZXMgdG8gQ09NXG4gKiBvYmplY3RzLCBET00gbm9kZXMsIGFuZCBvdGhlciBkaXNwb3NhYmxlIG9iamVjdHMuIFJlZW50cmFudC5cbiAqXG4gKiBAcmV0dXJuIHt2b2lkfSBOb3RoaW5nLlxuICogQG92ZXJyaWRlXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuZGlzcG9zZWRfKSB7XG4gICAgLy8gU2V0IGRpc3Bvc2VkXyB0byB0cnVlIGZpcnN0LCBpbiBjYXNlIGR1cmluZyB0aGUgY2hhaW4gb2YgZGlzcG9zYWwgdGhpc1xuICAgIC8vIGdldHMgZGlzcG9zZWQgcmVjdXJzaXZlbHkuXG4gICAgdGhpcy5kaXNwb3NlZF8gPSB0cnVlO1xuICAgIHRoaXMuZGlzcG9zZUludGVybmFsKCk7XG4gICAgaWYgKGdvb2cuRGlzcG9zYWJsZS5NT05JVE9SSU5HX01PREUgIT0gZ29vZy5EaXNwb3NhYmxlLk1vbml0b3JpbmdNb2RlLk9GRikge1xuICAgICAgdmFyIHVpZCA9IGdvb2cuZ2V0VWlkKHRoaXMpO1xuICAgICAgaWYgKGdvb2cuRGlzcG9zYWJsZS5NT05JVE9SSU5HX01PREUgPT1cbiAgICAgICAgICBnb29nLkRpc3Bvc2FibGUuTW9uaXRvcmluZ01vZGUuUEVSTUFORU5UICYmXG4gICAgICAgICAgIWdvb2cuRGlzcG9zYWJsZS5pbnN0YW5jZXNfLmhhc093blByb3BlcnR5KHVpZCkpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IodGhpcyArICcgZGlkIG5vdCBjYWxsIHRoZSBnb29nLkRpc3Bvc2FibGUgYmFzZSAnICtcbiAgICAgICAgICAgICdjb25zdHJ1Y3RvciBvciB3YXMgZGlzcG9zZWQgb2YgYWZ0ZXIgYSBjbGVhclVuZGlzcG9zZWRPYmplY3RzICcgK1xuICAgICAgICAgICAgJ2NhbGwnKTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSBnb29nLkRpc3Bvc2FibGUuaW5zdGFuY2VzX1t1aWRdO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIEFzc29jaWF0ZXMgYSBkaXNwb3NhYmxlIG9iamVjdCB3aXRoIHRoaXMgb2JqZWN0IHNvIHRoYXQgdGhleSB3aWxsIGJlIGRpc3Bvc2VkXG4gKiB0b2dldGhlci5cbiAqIEBwYXJhbSB7Z29vZy5kaXNwb3NhYmxlLklEaXNwb3NhYmxlfSBkaXNwb3NhYmxlIHRoYXQgd2lsbCBiZSBkaXNwb3NlZCB3aGVuXG4gKiAgICAgdGhpcyBvYmplY3QgaXMgZGlzcG9zZWQuXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5wcm90b3R5cGUucmVnaXN0ZXJEaXNwb3NhYmxlID0gZnVuY3Rpb24oZGlzcG9zYWJsZSkge1xuICB0aGlzLmFkZE9uRGlzcG9zZUNhbGxiYWNrKGdvb2cucGFydGlhbChnb29nLmRpc3Bvc2UsIGRpc3Bvc2FibGUpKTtcbn07XG5cblxuLyoqXG4gKiBJbnZva2VzIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiB0aGlzIG9iamVjdCBpcyBkaXNwb3NlZC4gQ2FsbGJhY2tzIGFyZVxuICogaW52b2tlZCBpbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSB3ZXJlIGFkZGVkLiBJZiBhIGNhbGxiYWNrIGlzIGFkZGVkIHRvXG4gKiBhbiBhbHJlYWR5IGRpc3Bvc2VkIERpc3Bvc2FibGUsIGl0IHdpbGwgYmUgY2FsbGVkIGltbWVkaWF0ZWx5LlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQpOj99IGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7VD19IG9wdF9zY29wZSBBbiBvcHRpb25hbCBzY29wZSB0byBjYWxsIHRoZSBjYWxsYmFjayBpbi5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5wcm90b3R5cGUuYWRkT25EaXNwb3NlQ2FsbGJhY2sgPSBmdW5jdGlvbihjYWxsYmFjaywgb3B0X3Njb3BlKSB7XG4gIGlmICh0aGlzLmRpc3Bvc2VkXykge1xuICAgIGNhbGxiYWNrLmNhbGwob3B0X3Njb3BlKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCF0aGlzLm9uRGlzcG9zZUNhbGxiYWNrc18pIHtcbiAgICB0aGlzLm9uRGlzcG9zZUNhbGxiYWNrc18gPSBbXTtcbiAgfVxuXG4gIHRoaXMub25EaXNwb3NlQ2FsbGJhY2tzXy5wdXNoKFxuICAgICAgZ29vZy5pc0RlZihvcHRfc2NvcGUpID8gZ29vZy5iaW5kKGNhbGxiYWNrLCBvcHRfc2NvcGUpIDogY2FsbGJhY2spO1xufTtcblxuXG4vKipcbiAqIERlbGV0ZXMgb3IgbnVsbHMgb3V0IGFueSByZWZlcmVuY2VzIHRvIENPTSBvYmplY3RzLCBET00gbm9kZXMsIG9yIG90aGVyXG4gKiBkaXNwb3NhYmxlIG9iamVjdHMuIENsYXNzZXMgdGhhdCBleHRlbmQge0Bjb2RlIGdvb2cuRGlzcG9zYWJsZX0gc2hvdWxkXG4gKiBvdmVycmlkZSB0aGlzIG1ldGhvZC5cbiAqIE5vdCByZWVudHJhbnQuIFRvIGF2b2lkIGNhbGxpbmcgaXQgdHdpY2UsIGl0IG11c3Qgb25seSBiZSBjYWxsZWQgZnJvbSB0aGVcbiAqIHN1YmNsYXNzJyB7QGNvZGUgZGlzcG9zZUludGVybmFsfSBtZXRob2QuIEV2ZXJ5d2hlcmUgZWxzZSB0aGUgcHVibGljXG4gKiB7QGNvZGUgZGlzcG9zZX0gbWV0aG9kIG11c3QgYmUgdXNlZC5cbiAqIEZvciBleGFtcGxlOlxuICogPHByZT5cbiAqICAgbXlwYWNrYWdlLk15Q2xhc3MgPSBmdW5jdGlvbigpIHtcbiAqICAgICBteXBhY2thZ2UuTXlDbGFzcy5iYXNlKHRoaXMsICdjb25zdHJ1Y3RvcicpO1xuICogICAgIC8vIENvbnN0cnVjdG9yIGxvZ2ljIHNwZWNpZmljIHRvIE15Q2xhc3MuXG4gKiAgICAgLi4uXG4gKiAgIH07XG4gKiAgIGdvb2cuaW5oZXJpdHMobXlwYWNrYWdlLk15Q2xhc3MsIGdvb2cuRGlzcG9zYWJsZSk7XG4gKlxuICogICBteXBhY2thZ2UuTXlDbGFzcy5wcm90b3R5cGUuZGlzcG9zZUludGVybmFsID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgLy8gRGlzcG9zZSBsb2dpYyBzcGVjaWZpYyB0byBNeUNsYXNzLlxuICogICAgIC4uLlxuICogICAgIC8vIENhbGwgc3VwZXJjbGFzcydzIGRpc3Bvc2VJbnRlcm5hbCBhdCB0aGUgZW5kIG9mIHRoZSBzdWJjbGFzcydzLCBsaWtlXG4gKiAgICAgLy8gaW4gQysrLCB0byBhdm9pZCBoYXJkLXRvLWNhdGNoIGlzc3Vlcy5cbiAqICAgICBteXBhY2thZ2UuTXlDbGFzcy5iYXNlKHRoaXMsICdkaXNwb3NlSW50ZXJuYWwnKTtcbiAqICAgfTtcbiAqIDwvcHJlPlxuICogQHByb3RlY3RlZFxuICovXG5nb29nLkRpc3Bvc2FibGUucHJvdG90eXBlLmRpc3Bvc2VJbnRlcm5hbCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5vbkRpc3Bvc2VDYWxsYmFja3NfKSB7XG4gICAgd2hpbGUgKHRoaXMub25EaXNwb3NlQ2FsbGJhY2tzXy5sZW5ndGgpIHtcbiAgICAgIHRoaXMub25EaXNwb3NlQ2FsbGJhY2tzXy5zaGlmdCgpKCk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBUcnVlIGlmIHdlIGNhbiB2ZXJpZnkgdGhlIG9iamVjdCBpcyBkaXNwb3NlZC5cbiAqIENhbGxzIHtAY29kZSBpc0Rpc3Bvc2VkfSBvbiB0aGUgYXJndW1lbnQgaWYgaXQgc3VwcG9ydHMgaXQuICBJZiBvYmpcbiAqIGlzIG5vdCBhbiBvYmplY3Qgd2l0aCBhbiBpc0Rpc3Bvc2VkKCkgbWV0aG9kLCByZXR1cm4gZmFsc2UuXG4gKiBAcGFyYW0geyp9IG9iaiBUaGUgb2JqZWN0IHRvIGludmVzdGlnYXRlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB3ZSBjYW4gdmVyaWZ5IHRoZSBvYmplY3QgaXMgZGlzcG9zZWQuXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5pc0Rpc3Bvc2VkID0gZnVuY3Rpb24ob2JqKSB7XG4gIGlmIChvYmogJiYgdHlwZW9mIG9iai5pc0Rpc3Bvc2VkID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb2JqLmlzRGlzcG9zZWQoKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5cbi8qKlxuICogQ2FsbHMge0Bjb2RlIGRpc3Bvc2V9IG9uIHRoZSBhcmd1bWVudCBpZiBpdCBzdXBwb3J0cyBpdC4gSWYgb2JqIGlzIG5vdCBhblxuICogICAgIG9iamVjdCB3aXRoIGEgZGlzcG9zZSgpIG1ldGhvZCwgdGhpcyBpcyBhIG5vLW9wLlxuICogQHBhcmFtIHsqfSBvYmogVGhlIG9iamVjdCB0byBkaXNwb3NlIG9mLlxuICovXG5nb29nLmRpc3Bvc2UgPSBmdW5jdGlvbihvYmopIHtcbiAgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqLmRpc3Bvc2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG9iai5kaXNwb3NlKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDYWxscyB7QGNvZGUgZGlzcG9zZX0gb24gZWFjaCBtZW1iZXIgb2YgdGhlIGxpc3QgdGhhdCBzdXBwb3J0cyBpdC4gKElmIHRoZVxuICogbWVtYmVyIGlzIGFuIEFycmF5TGlrZSwgdGhlbiB7QGNvZGUgZ29vZy5kaXNwb3NlQWxsKCl9IHdpbGwgYmUgY2FsbGVkXG4gKiByZWN1cnNpdmVseSBvbiBlYWNoIG9mIGl0cyBtZW1iZXJzLikgSWYgdGhlIG1lbWJlciBpcyBub3QgYW4gb2JqZWN0IHdpdGggYVxuICoge0Bjb2RlIGRpc3Bvc2UoKX0gbWV0aG9kLCB0aGVuIGl0IGlzIGlnbm9yZWQuXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIFRoZSBsaXN0LlxuICovXG5nb29nLmRpc3Bvc2VBbGwgPSBmdW5jdGlvbih2YXJfYXJncykge1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIGRpc3Bvc2FibGUgPSBhcmd1bWVudHNbaV07XG4gICAgaWYgKGdvb2cuaXNBcnJheUxpa2UoZGlzcG9zYWJsZSkpIHtcbiAgICAgIGdvb2cuZGlzcG9zZUFsbC5hcHBseShudWxsLCBkaXNwb3NhYmxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ29vZy5kaXNwb3NlKGRpc3Bvc2FibGUpO1xuICAgIH1cbiAgfVxufTtcbiIsIi8vIChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG5nb29nLnByb3ZpZGUoJ3c2OWIuRmlsZVNhdmVyJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuRGlzcG9zYWJsZScpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogQHBhcmFtIHshQmxvYn0gYmxvYiB0byBzYXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBmaWxlbmFtZS5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIHtnb29nLkRpc3Bvc2FibGV9XG4gICAqL1xuICB3NjliLkZpbGVTYXZlciA9IGZ1bmN0aW9uKGJsb2IsIG5hbWUpIHtcbiAgICAvLyBGaXJzdCB0cnkgYS5kb3dubG9hZCwgdGhlbiB3ZWIgZmlsZXN5c3RlbSwgdGhlbiBvYmplY3QgVVJMc1xuICAgIHRoaXMuYmxvYiA9IGJsb2I7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLm9iamVjdFVybF8gPSBudWxsO1xuICB9O1xuICB2YXIgRmlsZVNhdmVyID0gdzY5Yi5GaWxlU2F2ZXI7XG4gIGdvb2cuaW5oZXJpdHMoRmlsZVNhdmVyLCBnb29nLkRpc3Bvc2FibGUpO1xuICB2YXIgcHJvID0gdzY5Yi5GaWxlU2F2ZXIucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFCbG9ifSBibG9iIHRvIHNhdmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGZpbGVuYW1lLlxuICAgKiBAZXhwb3J0XG4gICAqL1xuICBGaWxlU2F2ZXIuc2F2ZUFzID0gZnVuY3Rpb24oYmxvYiwgbmFtZSkge1xuICAgIHZhciBzYXZlQmxvYiA9IG5hdmlnYXRvclsnbXNTYXZlQmxvYiddO1xuICAgIGlmIChzYXZlQmxvYikge1xuICAgICAgc2F2ZUJsb2IuY2FsbChuYXZpZ2F0b3IsIGJsb2IsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2F2ZXIgPSBuZXcgRmlsZVNhdmVyKGJsb2IsIG5hbWUpO1xuICAgICAgc2F2ZXIuc2F2ZSgpO1xuICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHNhdmVyLmRpc3Bvc2UoKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB3ZWF0aGVyIHNhdmVBcyBpcyBzdXBwb3J0ZWQuXG4gICovXG4gIEZpbGVTYXZlci5jaGVja1N1cHBvcnRfID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgcmV0dXJuIG5hdmlnYXRvclsnbXNTYXZlQmxvYiddIHx8ICgnZG93bmxvYWQnIGluIGEpO1xuICB9O1xuICBGaWxlU2F2ZXIuU1VQUE9SVEVEXyA9IEZpbGVTYXZlci5jaGVja1N1cHBvcnRfKCk7XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHdlYXRoZXIgc2F2ZUFzIGlzIHN1cHBvcnRlZC5cbiAgICogQGV4cG9ydFxuICAqL1xuICBGaWxlU2F2ZXIuaXNTdXBwb3J0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gRmlsZVNhdmVyLlNVUFBPUlRFRF87XG4gIH07XG5cbiAgLyoqXG4gICAqIFNpbXVsYXRlIG1vdXNlIGNsaWNrIG9uIG5vZGUuXG4gICAqL1xuICBGaWxlU2F2ZXIuY2xpY2sgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnRzJyk7XG4gICAgZXZlbnQuaW5pdE1vdXNlRXZlbnQoJ2NsaWNrJywgdHJ1ZSwgdHJ1ZSwgd2luZG93LFxuICAgICAgMCwgMCwgMCwgMCwgMCwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuICAgIHJldHVybiBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpOyAvLyBmYWxzZSBpZiBldmVudCB3YXMgY2FuY2VsbGVkXG4gIH07XG5cblxuICAvKipcbiAgICogQ3JlYXRlcyBsaW5rIGFuZCBmaXJlcyBjbGlja2V2ZW50IG9uIGl0LlxuICAgKi9cbiAgcHJvLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBpZiAoISgnZG93bmxvYWQnIGluIGEpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLm9iamVjdFVybF8pXG4gICAgICB0aGlzLm9iamVjdFVybF8gPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTCh0aGlzLmJsb2IpO1xuICAgIGEuaHJlZiA9IHRoaXMub2JqZWN0VXJsXztcbiAgICBhWydkb3dubG9hZCddID0gdGhpcy5uYW1lO1xuICAgIHJldHVybiBGaWxlU2F2ZXIuY2xpY2soYSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvLmRpc3Bvc2VJbnRlcm5hbCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLm9iamVjdFVybF8pXG4gICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLm9iamVjdFVybF8pO1xuICB9O1xuXG59KTtcblxuIiwiLy8gQ29weXJpZ2h0IDIwMDkgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBQcm92aWRlcyBhIGJhc2UgY2xhc3MgZm9yIGN1c3RvbSBFcnJvciBvYmplY3RzIHN1Y2ggdGhhdCB0aGVcbiAqIHN0YWNrIGlzIGNvcnJlY3RseSBtYWludGFpbmVkLlxuICpcbiAqIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byB0aHJvdyBnb29nLmRlYnVnLkVycm9yKG1zZykgZGlyZWN0bHksIEVycm9yKG1zZykgaXNcbiAqIHN1ZmZpY2llbnQuXG4gKlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5kZWJ1Zy5FcnJvcicpO1xuXG5cblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBjdXN0b20gZXJyb3Igb2JqZWN0cy5cbiAqIEBwYXJhbSB7Kj19IG9wdF9tc2cgVGhlIG1lc3NhZ2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBlcnJvci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge0Vycm9yfVxuICovXG5nb29nLmRlYnVnLkVycm9yID0gZnVuY3Rpb24ob3B0X21zZykge1xuXG4gIC8vIEF0dGVtcHQgdG8gZW5zdXJlIHRoZXJlIGlzIGEgc3RhY2sgdHJhY2UuXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIGdvb2cuZGVidWcuRXJyb3IpO1xuICB9IGVsc2Uge1xuICAgIHZhciBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIGlmIChzdGFjaykge1xuICAgICAgdGhpcy5zdGFjayA9IHN0YWNrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRfbXNnKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gU3RyaW5nKG9wdF9tc2cpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcmVwb3J0IHRoaXMgZXJyb3IgdG8gdGhlIHNlcnZlci4gU2V0dGluZyB0aGlzIHRvIGZhbHNlIHdpbGxcbiAgICogY2F1c2UgdGhlIGVycm9yIHJlcG9ydGVyIHRvIG5vdCByZXBvcnQgdGhlIGVycm9yIGJhY2sgdG8gdGhlIHNlcnZlcixcbiAgICogd2hpY2ggY2FuIGJlIHVzZWZ1bCBpZiB0aGUgY2xpZW50IGtub3dzIHRoYXQgdGhlIGVycm9yIGhhcyBhbHJlYWR5IGJlZW5cbiAgICogbG9nZ2VkIG9uIHRoZSBzZXJ2ZXIuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5yZXBvcnRFcnJvclRvU2VydmVyID0gdHJ1ZTtcbn07XG5nb29nLmluaGVyaXRzKGdvb2cuZGVidWcuRXJyb3IsIEVycm9yKTtcblxuXG4vKiogQG92ZXJyaWRlICovXG5nb29nLmRlYnVnLkVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0N1c3RvbUVycm9yJztcbiIsIi8vIENvcHlyaWdodCAyMDA2IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGVmaW5pdGlvbiBvZiBnb29nLmRvbS5Ob2RlVHlwZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZG9tLk5vZGVUeXBlJyk7XG5cblxuLyoqXG4gKiBDb25zdGFudHMgZm9yIHRoZSBub2RlVHlwZSBhdHRyaWJ1dGUgaW4gdGhlIE5vZGUgaW50ZXJmYWNlLlxuICpcbiAqIFRoZXNlIGNvbnN0YW50cyBtYXRjaCB0aG9zZSBzcGVjaWZpZWQgaW4gdGhlIE5vZGUgaW50ZXJmYWNlLiBUaGVzZSBhcmVcbiAqIHVzdWFsbHkgcHJlc2VudCBvbiB0aGUgTm9kZSBvYmplY3QgaW4gcmVjZW50IGJyb3dzZXJzLCBidXQgbm90IGluIG9sZGVyXG4gKiBicm93c2VycyAoc3BlY2lmaWNhbGx5LCBlYXJseSBJRXMpIGFuZCB0aHVzIGFyZSBnaXZlbiBoZXJlLlxuICpcbiAqIEluIHNvbWUgYnJvd3NlcnMgKGVhcmx5IElFcyksIHRoZXNlIGFyZSBub3QgZGVmaW5lZCBvbiB0aGUgTm9kZSBvYmplY3QsXG4gKiBzbyB0aGV5IGFyZSBwcm92aWRlZCBoZXJlLlxuICpcbiAqIFNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1Db3JlL2NvcmUuaHRtbCNJRC0xOTUwNjQxMjQ3XG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5nb29nLmRvbS5Ob2RlVHlwZSA9IHtcbiAgRUxFTUVOVDogMSxcbiAgQVRUUklCVVRFOiAyLFxuICBURVhUOiAzLFxuICBDREFUQV9TRUNUSU9OOiA0LFxuICBFTlRJVFlfUkVGRVJFTkNFOiA1LFxuICBFTlRJVFk6IDYsXG4gIFBST0NFU1NJTkdfSU5TVFJVQ1RJT046IDcsXG4gIENPTU1FTlQ6IDgsXG4gIERPQ1VNRU5UOiA5LFxuICBET0NVTUVOVF9UWVBFOiAxMCxcbiAgRE9DVU1FTlRfRlJBR01FTlQ6IDExLFxuICBOT1RBVElPTjogMTJcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAwNiBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFV0aWxpdGllcyBmb3Igc3RyaW5nIG1hbmlwdWxhdGlvbi5cbiAqIEBhdXRob3IgYXJ2QGdvb2dsZS5jb20gKEVyaWsgQXJ2aWRzc29uKVxuICovXG5cblxuLyoqXG4gKiBOYW1lc3BhY2UgZm9yIHN0cmluZyB1dGlsaXRpZXNcbiAqL1xuZ29vZy5wcm92aWRlKCdnb29nLnN0cmluZycpO1xuZ29vZy5wcm92aWRlKCdnb29nLnN0cmluZy5Vbmljb2RlJyk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBFbmFibGVzIEhUTUwgZXNjYXBpbmcgb2YgbG93ZXJjYXNlIGxldHRlciBcImVcIiB3aGljaCBoZWxwc1xuICogd2l0aCBkZXRlY3Rpb24gb2YgZG91YmxlLWVzY2FwaW5nIGFzIHRoaXMgbGV0dGVyIGlzIGZyZXF1ZW50bHkgdXNlZC5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cuc3RyaW5nLkRFVEVDVF9ET1VCTEVfRVNDQVBJTkcnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRvIGZvcmNlIG5vbi1kb20gaHRtbCB1bmVzY2FwaW5nLlxuICovXG5nb29nLmRlZmluZSgnZ29vZy5zdHJpbmcuRk9SQ0VfTk9OX0RPTV9IVE1MX1VORVNDQVBJTkcnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBDb21tb24gVW5pY29kZSBzdHJpbmcgY2hhcmFjdGVycy5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmdvb2cuc3RyaW5nLlVuaWNvZGUgPSB7XG4gIE5CU1A6ICdcXHhhMCdcbn07XG5cblxuLyoqXG4gKiBGYXN0IHByZWZpeC1jaGVja2VyLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNoZWNrLlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCBBIHN0cmluZyB0byBsb29rIGZvciBhdCB0aGUgc3RhcnQgb2Yge0Bjb2RlIHN0cn0uXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHtAY29kZSBzdHJ9IGJlZ2lucyB3aXRoIHtAY29kZSBwcmVmaXh9LlxuICovXG5nb29nLnN0cmluZy5zdGFydHNXaXRoID0gZnVuY3Rpb24oc3RyLCBwcmVmaXgpIHtcbiAgcmV0dXJuIHN0ci5sYXN0SW5kZXhPZihwcmVmaXgsIDApID09IDA7XG59O1xuXG5cbi8qKlxuICogRmFzdCBzdWZmaXgtY2hlY2tlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjaGVjay5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdWZmaXggQSBzdHJpbmcgdG8gbG9vayBmb3IgYXQgdGhlIGVuZCBvZiB7QGNvZGUgc3RyfS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYge0Bjb2RlIHN0cn0gZW5kcyB3aXRoIHtAY29kZSBzdWZmaXh9LlxuICovXG5nb29nLnN0cmluZy5lbmRzV2l0aCA9IGZ1bmN0aW9uKHN0ciwgc3VmZml4KSB7XG4gIHZhciBsID0gc3RyLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGg7XG4gIHJldHVybiBsID49IDAgJiYgc3RyLmluZGV4T2Yoc3VmZml4LCBsKSA9PSBsO1xufTtcblxuXG4vKipcbiAqIENhc2UtaW5zZW5zaXRpdmUgcHJlZml4LWNoZWNrZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4ICBBIHN0cmluZyB0byBsb29rIGZvciBhdCB0aGUgZW5kIG9mIHtAY29kZSBzdHJ9LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB7QGNvZGUgc3RyfSBiZWdpbnMgd2l0aCB7QGNvZGUgcHJlZml4fSAoaWdub3JpbmdcbiAqICAgICBjYXNlKS5cbiAqL1xuZ29vZy5zdHJpbmcuY2FzZUluc2Vuc2l0aXZlU3RhcnRzV2l0aCA9IGZ1bmN0aW9uKHN0ciwgcHJlZml4KSB7XG4gIHJldHVybiBnb29nLnN0cmluZy5jYXNlSW5zZW5zaXRpdmVDb21wYXJlKFxuICAgICAgcHJlZml4LCBzdHIuc3Vic3RyKDAsIHByZWZpeC5sZW5ndGgpKSA9PSAwO1xufTtcblxuXG4vKipcbiAqIENhc2UtaW5zZW5zaXRpdmUgc3VmZml4LWNoZWNrZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZ30gc3VmZml4IEEgc3RyaW5nIHRvIGxvb2sgZm9yIGF0IHRoZSBlbmQgb2Yge0Bjb2RlIHN0cn0uXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHtAY29kZSBzdHJ9IGVuZHMgd2l0aCB7QGNvZGUgc3VmZml4fSAoaWdub3JpbmdcbiAqICAgICBjYXNlKS5cbiAqL1xuZ29vZy5zdHJpbmcuY2FzZUluc2Vuc2l0aXZlRW5kc1dpdGggPSBmdW5jdGlvbihzdHIsIHN1ZmZpeCkge1xuICByZXR1cm4gZ29vZy5zdHJpbmcuY2FzZUluc2Vuc2l0aXZlQ29tcGFyZShcbiAgICAgIHN1ZmZpeCwgc3RyLnN1YnN0cihzdHIubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aCwgc3VmZml4Lmxlbmd0aCkpID09IDA7XG59O1xuXG5cbi8qKlxuICogQ2FzZS1pbnNlbnNpdGl2ZSBlcXVhbGl0eSBjaGVja2VyLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cjEgRmlyc3Qgc3RyaW5nIHRvIGNoZWNrLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cjIgU2Vjb25kIHN0cmluZyB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYge0Bjb2RlIHN0cjF9IGFuZCB7QGNvZGUgc3RyMn0gYXJlIHRoZSBzYW1lIHN0cmluZyxcbiAqICAgICBpZ25vcmluZyBjYXNlLlxuICovXG5nb29nLnN0cmluZy5jYXNlSW5zZW5zaXRpdmVFcXVhbHMgPSBmdW5jdGlvbihzdHIxLCBzdHIyKSB7XG4gIHJldHVybiBzdHIxLnRvTG93ZXJDYXNlKCkgPT0gc3RyMi50b0xvd2VyQ2FzZSgpO1xufTtcblxuXG4vKipcbiAqIERvZXMgc2ltcGxlIHB5dGhvbi1zdHlsZSBzdHJpbmcgc3Vic3RpdHV0aW9uLlxuICogc3VicyhcImZvbyVzIGhvdCVzXCIsIFwiYmFyXCIsIFwiZG9nXCIpIGJlY29tZXMgXCJmb29iYXIgaG90ZG9nXCIuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgY29udGFpbmluZyB0aGUgcGF0dGVybi5cbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgVGhlIGl0ZW1zIHRvIHN1YnN0aXR1dGUgaW50byB0aGUgcGF0dGVybi5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBjb3B5IG9mIHtAY29kZSBzdHJ9IGluIHdoaWNoIGVhY2ggb2NjdXJyZW5jZSBvZlxuICogICAgIHtAY29kZSAlc30gaGFzIGJlZW4gcmVwbGFjZWQgYW4gYXJndW1lbnQgZnJvbSB7QGNvZGUgdmFyX2FyZ3N9LlxuICovXG5nb29nLnN0cmluZy5zdWJzID0gZnVuY3Rpb24oc3RyLCB2YXJfYXJncykge1xuICB2YXIgc3BsaXRQYXJ0cyA9IHN0ci5zcGxpdCgnJXMnKTtcbiAgdmFyIHJldHVyblN0cmluZyA9ICcnO1xuXG4gIHZhciBzdWJzQXJndW1lbnRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgd2hpbGUgKHN1YnNBcmd1bWVudHMubGVuZ3RoICYmXG4gICAgICAgICAvLyBSZXBsYWNlIHVwIHRvIHRoZSBsYXN0IHNwbGl0IHBhcnQuIFdlIGFyZSBpbnNlcnRpbmcgaW4gdGhlXG4gICAgICAgICAvLyBwb3NpdGlvbnMgYmV0d2VlbiBzcGxpdCBwYXJ0cy5cbiAgICAgICAgIHNwbGl0UGFydHMubGVuZ3RoID4gMSkge1xuICAgIHJldHVyblN0cmluZyArPSBzcGxpdFBhcnRzLnNoaWZ0KCkgKyBzdWJzQXJndW1lbnRzLnNoaWZ0KCk7XG4gIH1cblxuICByZXR1cm4gcmV0dXJuU3RyaW5nICsgc3BsaXRQYXJ0cy5qb2luKCclcycpOyAvLyBKb2luIHVudXNlZCAnJXMnXG59O1xuXG5cbi8qKlxuICogQ29udmVydHMgbXVsdGlwbGUgd2hpdGVzcGFjZSBjaGFycyAoc3BhY2VzLCBub24tYnJlYWtpbmctc3BhY2VzLCBuZXcgbGluZXNcbiAqIGFuZCB0YWJzKSB0byBhIHNpbmdsZSBzcGFjZSwgYW5kIHN0cmlwcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBJbnB1dCBzdHJpbmcuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgY29weSBvZiB7QGNvZGUgc3RyfSB3aXRoIGNvbGxhcHNlZCB3aGl0ZXNwYWNlLlxuICovXG5nb29nLnN0cmluZy5jb2xsYXBzZVdoaXRlc3BhY2UgPSBmdW5jdGlvbihzdHIpIHtcbiAgLy8gU2luY2UgSUUgZG9lc24ndCBpbmNsdWRlIG5vbi1icmVha2luZy1zcGFjZSAoMHhhMCkgaW4gdGhlaXIgXFxzIGNoYXJhY3RlclxuICAvLyBjbGFzcyAoYXMgcmVxdWlyZWQgYnkgc2VjdGlvbiA3LjIgb2YgdGhlIEVDTUFTY3JpcHQgc3BlYyksIHdlIGV4cGxpY2l0bHlcbiAgLy8gaW5jbHVkZSBpdCBpbiB0aGUgcmVnZXhwIHRvIGVuZm9yY2UgY29uc2lzdGVudCBjcm9zcy1icm93c2VyIGJlaGF2aW9yLlxuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXHNcXHhhMF0rL2csICcgJykucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0cmluZyBpcyBlbXB0eSBvciBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VzLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB7QGNvZGUgc3RyfSBpcyBlbXB0eSBvciB3aGl0ZXNwYWNlIG9ubHkuXG4gKi9cbmdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2UgPSBmdW5jdGlvbihzdHIpIHtcbiAgLy8gdGVzdGluZyBsZW5ndGggPT0gMCBmaXJzdCBpcyBhY3R1YWxseSBzbG93ZXIgaW4gYWxsIGJyb3dzZXJzIChhYm91dCB0aGVcbiAgLy8gc2FtZSBpbiBPcGVyYSkuXG4gIC8vIFNpbmNlIElFIGRvZXNuJ3QgaW5jbHVkZSBub24tYnJlYWtpbmctc3BhY2UgKDB4YTApIGluIHRoZWlyIFxccyBjaGFyYWN0ZXJcbiAgLy8gY2xhc3MgKGFzIHJlcXVpcmVkIGJ5IHNlY3Rpb24gNy4yIG9mIHRoZSBFQ01BU2NyaXB0IHNwZWMpLCB3ZSBleHBsaWNpdGx5XG4gIC8vIGluY2x1ZGUgaXQgaW4gdGhlIHJlZ2V4cCB0byBlbmZvcmNlIGNvbnNpc3RlbnQgY3Jvc3MtYnJvd3NlciBiZWhhdmlvci5cbiAgcmV0dXJuIC9eW1xcc1xceGEwXSokLy50ZXN0KHN0cik7XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RyaW5nIGlzIGVtcHR5LlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB7QGNvZGUgc3RyfSBpcyBlbXB0eS5cbiAqL1xuZ29vZy5zdHJpbmcuaXNFbXB0eVN0cmluZyA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gc3RyLmxlbmd0aCA9PSAwO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0cmluZyBpcyBlbXB0eSBvciBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VzLlxuICpcbiAqIFRPRE8odXNlcik6IERlcHJlY2F0ZSB0aGlzIHdoZW4gY2xpZW50cyBoYXZlIGJlZW4gc3dpdGNoZWQgb3ZlciB0b1xuICogZ29vZy5zdHJpbmcuaXNFbXB0eU9yV2hpdGVzcGFjZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHtAY29kZSBzdHJ9IGlzIGVtcHR5IG9yIHdoaXRlc3BhY2Ugb25seS5cbiAqL1xuZ29vZy5zdHJpbmcuaXNFbXB0eSA9IGdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2U7XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdHJpbmcgaXMgbnVsbCwgdW5kZWZpbmVkLCBlbXB0eSBvciBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VzLlxuICogQHBhcmFtIHsqfSBzdHIgVGhlIHN0cmluZyB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIge0Bjb2RlIHN0cn0gaXMgbnVsbCwgdW5kZWZpbmVkLCBlbXB0eSwgb3JcbiAqICAgICB3aGl0ZXNwYWNlIG9ubHkuXG4gKiBAZGVwcmVjYXRlZCBVc2UgZ29vZy5zdHJpbmcuaXNFbXB0eU9yV2hpdGVzcGFjZShnb29nLnN0cmluZy5tYWtlU2FmZShzdHIpKVxuICogICAgIGluc3RlYWQuXG4gKi9cbmdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2VTYWZlID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBnb29nLnN0cmluZy5pc0VtcHR5T3JXaGl0ZXNwYWNlKGdvb2cuc3RyaW5nLm1ha2VTYWZlKHN0cikpO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0cmluZyBpcyBudWxsLCB1bmRlZmluZWQsIGVtcHR5IG9yIGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZXMuXG4gKlxuICogVE9ETyh1c2VyKTogRGVwcmVjYXRlIHRoaXMgd2hlbiBjbGllbnRzIGhhdmUgYmVlbiBzd2l0Y2hlZCBvdmVyIHRvXG4gKiBnb29nLnN0cmluZy5pc0VtcHR5T3JXaGl0ZXNwYWNlU2FmZS5cbiAqXG4gKiBAcGFyYW0geyp9IHN0ciBUaGUgc3RyaW5nIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB7QGNvZGUgc3RyfSBpcyBudWxsLCB1bmRlZmluZWQsIGVtcHR5LCBvclxuICogICAgIHdoaXRlc3BhY2Ugb25seS5cbiAqL1xuZ29vZy5zdHJpbmcuaXNFbXB0eVNhZmUgPSBnb29nLnN0cmluZy5pc0VtcHR5T3JXaGl0ZXNwYWNlU2FmZTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0cmluZyBpcyBhbGwgYnJlYWtpbmcgd2hpdGVzcGFjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHN0cmluZyBpcyBhbGwgYnJlYWtpbmcgd2hpdGVzcGFjZS5cbiAqL1xuZ29vZy5zdHJpbmcuaXNCcmVha2luZ1doaXRlc3BhY2UgPSBmdW5jdGlvbihzdHIpIHtcbiAgcmV0dXJuICEvW15cXHRcXG5cXHIgXS8udGVzdChzdHIpO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0cmluZyBjb250YWlucyBhbGwgbGV0dGVycy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgc3RyaW5nIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB7QGNvZGUgc3RyfSBjb25zaXN0cyBlbnRpcmVseSBvZiBsZXR0ZXJzLlxuICovXG5nb29nLnN0cmluZy5pc0FscGhhID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiAhL1teYS16QS1aXS8udGVzdChzdHIpO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0cmluZyBjb250YWlucyBvbmx5IG51bWJlcnMuXG4gKiBAcGFyYW0geyp9IHN0ciBzdHJpbmcgdG8gY2hlY2suIElmIG5vdCBhIHN0cmluZywgaXQgd2lsbCBiZVxuICogICAgIGNhc3RlZCB0byBvbmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHtAY29kZSBzdHJ9IGlzIG51bWVyaWMuXG4gKi9cbmdvb2cuc3RyaW5nLmlzTnVtZXJpYyA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gIS9bXjAtOV0vLnRlc3Qoc3RyKTtcbn07XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdHJpbmcgY29udGFpbnMgb25seSBudW1iZXJzIG9yIGxldHRlcnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIHN0cmluZyB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYge0Bjb2RlIHN0cn0gaXMgYWxwaGFudW1lcmljLlxuICovXG5nb29nLnN0cmluZy5pc0FscGhhTnVtZXJpYyA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gIS9bXmEtekEtWjAtOV0vLnRlc3Qoc3RyKTtcbn07XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBjaGFyYWN0ZXIgaXMgYSBzcGFjZSBjaGFyYWN0ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2ggQ2hhcmFjdGVyIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB7QGNvZGUgY2h9IGlzIGEgc3BhY2UuXG4gKi9cbmdvb2cuc3RyaW5nLmlzU3BhY2UgPSBmdW5jdGlvbihjaCkge1xuICByZXR1cm4gY2ggPT0gJyAnO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGNoYXJhY3RlciBpcyBhIHZhbGlkIHVuaWNvZGUgY2hhcmFjdGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGNoIENoYXJhY3RlciB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYge0Bjb2RlIGNofSBpcyBhIHZhbGlkIHVuaWNvZGUgY2hhcmFjdGVyLlxuICovXG5nb29nLnN0cmluZy5pc1VuaWNvZGVDaGFyID0gZnVuY3Rpb24oY2gpIHtcbiAgcmV0dXJuIGNoLmxlbmd0aCA9PSAxICYmIGNoID49ICcgJyAmJiBjaCA8PSAnficgfHxcbiAgICAgICAgIGNoID49ICdcXHUwMDgwJyAmJiBjaCA8PSAnXFx1RkZGRCc7XG59O1xuXG5cbi8qKlxuICogVGFrZXMgYSBzdHJpbmcgYW5kIHJlcGxhY2VzIG5ld2xpbmVzIHdpdGggYSBzcGFjZS4gTXVsdGlwbGUgbGluZXMgYXJlXG4gKiByZXBsYWNlZCB3aXRoIGEgc2luZ2xlIHNwYWNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIGZyb20gd2hpY2ggdG8gc3RyaXAgbmV3bGluZXMuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgY29weSBvZiB7QGNvZGUgc3RyfSBzdHJpcHBlZCBvZiBuZXdsaW5lcy5cbiAqL1xuZ29vZy5zdHJpbmcuc3RyaXBOZXdsaW5lcyA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhcXHJcXG58XFxyfFxcbikrL2csICcgJyk7XG59O1xuXG5cbi8qKlxuICogUmVwbGFjZXMgV2luZG93cyBhbmQgTWFjIG5ldyBsaW5lcyB3aXRoIHVuaXggc3R5bGU6IFxcciBvciBcXHJcXG4gd2l0aCBcXG4uXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gaW4gd2hpY2ggdG8gY2Fub25pY2FsaXplIG5ld2xpbmVzLlxuICogQHJldHVybiB7c3RyaW5nfSB7QGNvZGUgc3RyfSBBIGNvcHkgb2Yge0Bjb2RlfSB3aXRoIGNhbm9uaWNhbGl6ZWQgbmV3bGluZXMuXG4gKi9cbmdvb2cuc3RyaW5nLmNhbm9uaWNhbGl6ZU5ld2xpbmVzID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFxcclxcbnxcXHJ8XFxuKS9nLCAnXFxuJyk7XG59O1xuXG5cbi8qKlxuICogTm9ybWFsaXplcyB3aGl0ZXNwYWNlIGluIGEgc3RyaW5nLCByZXBsYWNpbmcgYWxsIHdoaXRlc3BhY2UgY2hhcnMgd2l0aFxuICogYSBzcGFjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyBpbiB3aGljaCB0byBub3JtYWxpemUgd2hpdGVzcGFjZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBjb3B5IG9mIHtAY29kZSBzdHJ9IHdpdGggYWxsIHdoaXRlc3BhY2Ugbm9ybWFsaXplZC5cbiAqL1xuZ29vZy5zdHJpbmcubm9ybWFsaXplV2hpdGVzcGFjZSA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1xceGEwfFxccy9nLCAnICcpO1xufTtcblxuXG4vKipcbiAqIE5vcm1hbGl6ZXMgc3BhY2VzIGluIGEgc3RyaW5nLCByZXBsYWNpbmcgYWxsIGNvbnNlY3V0aXZlIHNwYWNlcyBhbmQgdGFic1xuICogd2l0aCBhIHNpbmdsZSBzcGFjZS4gUmVwbGFjZXMgbm9uLWJyZWFraW5nIHNwYWNlIHdpdGggYSBzcGFjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyBpbiB3aGljaCB0byBub3JtYWxpemUgc3BhY2VzLlxuICogQHJldHVybiB7c3RyaW5nfSBBIGNvcHkgb2Yge0Bjb2RlIHN0cn0gd2l0aCBhbGwgY29uc2VjdXRpdmUgc3BhY2VzIGFuZCB0YWJzXG4gKiAgICByZXBsYWNlZCB3aXRoIGEgc2luZ2xlIHNwYWNlLlxuICovXG5nb29nLnN0cmluZy5ub3JtYWxpemVTcGFjZXMgPSBmdW5jdGlvbihzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHhhMHxbIFxcdF0rL2csICcgJyk7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgYnJlYWtpbmcgc3BhY2VzIGZyb20gdGhlIGxlZnQgYW5kIHJpZ2h0IG9mIHRoZSBzdHJpbmcgYW5kXG4gKiBjb2xsYXBzZXMgdGhlIHNlcXVlbmNlcyBvZiBicmVha2luZyBzcGFjZXMgaW4gdGhlIG1pZGRsZSBpbnRvIHNpbmdsZSBzcGFjZXMuXG4gKiBUaGUgb3JpZ2luYWwgYW5kIHRoZSByZXN1bHQgc3RyaW5ncyByZW5kZXIgdGhlIHNhbWUgd2F5IGluIEhUTUwuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEEgc3RyaW5nIGluIHdoaWNoIHRvIGNvbGxhcHNlIHNwYWNlcy5cbiAqIEByZXR1cm4ge3N0cmluZ30gQ29weSBvZiB0aGUgc3RyaW5nIHdpdGggbm9ybWFsaXplZCBicmVha2luZyBzcGFjZXMuXG4gKi9cbmdvb2cuc3RyaW5nLmNvbGxhcHNlQnJlYWtpbmdTcGFjZXMgPSBmdW5jdGlvbihzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXFx0XFxyXFxuIF0rL2csICcgJykucmVwbGFjZShcbiAgICAgIC9eW1xcdFxcclxcbiBdK3xbXFx0XFxyXFxuIF0rJC9nLCAnJyk7XG59O1xuXG5cbi8qKlxuICogVHJpbXMgd2hpdGUgc3BhY2VzIHRvIHRoZSBsZWZ0IGFuZCByaWdodCBvZiBhIHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byB0cmltLlxuICogQHJldHVybiB7c3RyaW5nfSBBIHRyaW1tZWQgY29weSBvZiB7QGNvZGUgc3RyfS5cbiAqL1xuZ29vZy5zdHJpbmcudHJpbSA9IChnb29nLlRSVVNURURfU0lURSAmJiBTdHJpbmcucHJvdG90eXBlLnRyaW0pID9cbiAgICBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHJldHVybiBzdHIudHJpbSgpO1xuICAgIH0gOlxuICAgIGZ1bmN0aW9uKHN0cikge1xuICAgICAgLy8gU2luY2UgSUUgZG9lc24ndCBpbmNsdWRlIG5vbi1icmVha2luZy1zcGFjZSAoMHhhMCkgaW4gdGhlaXIgXFxzXG4gICAgICAvLyBjaGFyYWN0ZXIgY2xhc3MgKGFzIHJlcXVpcmVkIGJ5IHNlY3Rpb24gNy4yIG9mIHRoZSBFQ01BU2NyaXB0IHNwZWMpLFxuICAgICAgLy8gd2UgZXhwbGljaXRseSBpbmNsdWRlIGl0IGluIHRoZSByZWdleHAgdG8gZW5mb3JjZSBjb25zaXN0ZW50XG4gICAgICAvLyBjcm9zcy1icm93c2VyIGJlaGF2aW9yLlxuICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eW1xcc1xceGEwXSt8W1xcc1xceGEwXSskL2csICcnKTtcbiAgICB9O1xuXG5cbi8qKlxuICogVHJpbXMgd2hpdGVzcGFjZXMgYXQgdGhlIGxlZnQgZW5kIG9mIGEgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGxlZnQgdHJpbS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSB0cmltbWVkIGNvcHkgb2Yge0Bjb2RlIHN0cn0uXG4gKi9cbmdvb2cuc3RyaW5nLnRyaW1MZWZ0ID0gZnVuY3Rpb24oc3RyKSB7XG4gIC8vIFNpbmNlIElFIGRvZXNuJ3QgaW5jbHVkZSBub24tYnJlYWtpbmctc3BhY2UgKDB4YTApIGluIHRoZWlyIFxccyBjaGFyYWN0ZXJcbiAgLy8gY2xhc3MgKGFzIHJlcXVpcmVkIGJ5IHNlY3Rpb24gNy4yIG9mIHRoZSBFQ01BU2NyaXB0IHNwZWMpLCB3ZSBleHBsaWNpdGx5XG4gIC8vIGluY2x1ZGUgaXQgaW4gdGhlIHJlZ2V4cCB0byBlbmZvcmNlIGNvbnNpc3RlbnQgY3Jvc3MtYnJvd3NlciBiZWhhdmlvci5cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eW1xcc1xceGEwXSsvLCAnJyk7XG59O1xuXG5cbi8qKlxuICogVHJpbXMgd2hpdGVzcGFjZXMgYXQgdGhlIHJpZ2h0IGVuZCBvZiBhIHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byByaWdodCB0cmltLlxuICogQHJldHVybiB7c3RyaW5nfSBBIHRyaW1tZWQgY29weSBvZiB7QGNvZGUgc3RyfS5cbiAqL1xuZ29vZy5zdHJpbmcudHJpbVJpZ2h0ID0gZnVuY3Rpb24oc3RyKSB7XG4gIC8vIFNpbmNlIElFIGRvZXNuJ3QgaW5jbHVkZSBub24tYnJlYWtpbmctc3BhY2UgKDB4YTApIGluIHRoZWlyIFxccyBjaGFyYWN0ZXJcbiAgLy8gY2xhc3MgKGFzIHJlcXVpcmVkIGJ5IHNlY3Rpb24gNy4yIG9mIHRoZSBFQ01BU2NyaXB0IHNwZWMpLCB3ZSBleHBsaWNpdGx5XG4gIC8vIGluY2x1ZGUgaXQgaW4gdGhlIHJlZ2V4cCB0byBlbmZvcmNlIGNvbnNpc3RlbnQgY3Jvc3MtYnJvd3NlciBiZWhhdmlvci5cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXFxzXFx4YTBdKyQvLCAnJyk7XG59O1xuXG5cbi8qKlxuICogQSBzdHJpbmcgY29tcGFyYXRvciB0aGF0IGlnbm9yZXMgY2FzZS5cbiAqIC0xID0gc3RyMSBsZXNzIHRoYW4gc3RyMlxuICogIDAgPSBzdHIxIGVxdWFscyBzdHIyXG4gKiAgMSA9IHN0cjEgZ3JlYXRlciB0aGFuIHN0cjJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyMSBUaGUgc3RyaW5nIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyMiBUaGUgc3RyaW5nIHRvIGNvbXBhcmUge0Bjb2RlIHN0cjF9IHRvLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgY29tcGFyYXRvciByZXN1bHQsIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAqL1xuZ29vZy5zdHJpbmcuY2FzZUluc2Vuc2l0aXZlQ29tcGFyZSA9IGZ1bmN0aW9uKHN0cjEsIHN0cjIpIHtcbiAgdmFyIHRlc3QxID0gU3RyaW5nKHN0cjEpLnRvTG93ZXJDYXNlKCk7XG4gIHZhciB0ZXN0MiA9IFN0cmluZyhzdHIyKS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmICh0ZXN0MSA8IHRlc3QyKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKHRlc3QxID09IHRlc3QyKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCBmb3Igc3BsaXR0aW5nIGEgc3RyaW5nIGludG8gc3Vic3RyaW5ncyBvZiBmcmFjdGlvbmFsXG4gKiBudW1iZXJzLCBpbnRlZ2VycywgYW5kIG5vbi1udW1lcmljIGNoYXJhY3RlcnMuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHJpbmcubnVtZXJhdGVDb21wYXJlUmVnRXhwXyA9IC8oXFwuXFxkKyl8KFxcZCspfChcXEQrKS9nO1xuXG5cbi8qKlxuICogU3RyaW5nIGNvbXBhcmlzb24gZnVuY3Rpb24gdGhhdCBoYW5kbGVzIG51bWJlcnMgaW4gYSB3YXkgaHVtYW5zIG1pZ2h0IGV4cGVjdC5cbiAqIFVzaW5nIHRoaXMgZnVuY3Rpb24sIHRoZSBzdHJpbmcgXCJGaWxlIDIuanBnXCIgc29ydHMgYmVmb3JlIFwiRmlsZSAxMC5qcGdcIi4gVGhlXG4gKiBjb21wYXJpc29uIGlzIG1vc3RseSBjYXNlLWluc2Vuc2l0aXZlLCB0aG91Z2ggc3RyaW5ncyB0aGF0IGFyZSBpZGVudGljYWxcbiAqIGV4Y2VwdCBmb3IgY2FzZSBhcmUgc29ydGVkIHdpdGggdGhlIHVwcGVyLWNhc2Ugc3RyaW5ncyBiZWZvcmUgbG93ZXItY2FzZS5cbiAqXG4gKiBUaGlzIGNvbXBhcmlzb24gZnVuY3Rpb24gaXMgc2lnbmlmaWNhbnRseSBzbG93ZXIgKGFib3V0IDUwMHgpIHRoYW4gZWl0aGVyXG4gKiB0aGUgZGVmYXVsdCBvciB0aGUgY2FzZS1pbnNlbnNpdGl2ZSBjb21wYXJlLiBJdCBzaG91bGQgbm90IGJlIHVzZWQgaW5cbiAqIHRpbWUtY3JpdGljYWwgY29kZSwgYnV0IHNob3VsZCBiZSBmYXN0IGVub3VnaCB0byBzb3J0IHNldmVyYWwgaHVuZHJlZCBzaG9ydFxuICogc3RyaW5ncyAobGlrZSBmaWxlbmFtZXMpIHdpdGggYSByZWFzb25hYmxlIGRlbGF5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIxIFRoZSBzdHJpbmcgdG8gY29tcGFyZSBpbiBhIG51bWVyaWNhbGx5IHNlbnNpdGl2ZSB3YXkuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyMiBUaGUgc3RyaW5nIHRvIGNvbXBhcmUge0Bjb2RlIHN0cjF9IHRvLlxuICogQHJldHVybiB7bnVtYmVyfSBsZXNzIHRoYW4gMCBpZiBzdHIxIDwgc3RyMiwgMCBpZiBzdHIxID09IHN0cjIsIGdyZWF0ZXIgdGhhblxuICogICAgIDAgaWYgc3RyMSA+IHN0cjIuXG4gKi9cbmdvb2cuc3RyaW5nLm51bWVyYXRlQ29tcGFyZSA9IGZ1bmN0aW9uKHN0cjEsIHN0cjIpIHtcbiAgaWYgKHN0cjEgPT0gc3RyMikge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGlmICghc3RyMSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoIXN0cjIpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIC8vIFVzaW5nIG1hdGNoIHRvIHNwbGl0IHRoZSBlbnRpcmUgc3RyaW5nIGFoZWFkIG9mIHRpbWUgdHVybnMgb3V0IHRvIGJlIGZhc3RlclxuICAvLyBmb3IgbW9zdCBpbnB1dHMgdGhhbiB1c2luZyBSZWdFeHAuZXhlYyBvciBpdGVyYXRpbmcgb3ZlciBlYWNoIGNoYXJhY3Rlci5cbiAgdmFyIHRva2VuczEgPSBzdHIxLnRvTG93ZXJDYXNlKCkubWF0Y2goZ29vZy5zdHJpbmcubnVtZXJhdGVDb21wYXJlUmVnRXhwXyk7XG4gIHZhciB0b2tlbnMyID0gc3RyMi50b0xvd2VyQ2FzZSgpLm1hdGNoKGdvb2cuc3RyaW5nLm51bWVyYXRlQ29tcGFyZVJlZ0V4cF8pO1xuXG4gIHZhciBjb3VudCA9IE1hdGgubWluKHRva2VuczEubGVuZ3RoLCB0b2tlbnMyLmxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgdmFyIGEgPSB0b2tlbnMxW2ldO1xuICAgIHZhciBiID0gdG9rZW5zMltpXTtcblxuICAgIC8vIENvbXBhcmUgcGFpcnMgb2YgdG9rZW5zLCByZXR1cm5pbmcgaWYgb25lIHRva2VuIHNvcnRzIGJlZm9yZSB0aGUgb3RoZXIuXG4gICAgaWYgKGEgIT0gYikge1xuXG4gICAgICAvLyBPbmx5IGlmIGJvdGggdG9rZW5zIGFyZSBpbnRlZ2VycyBpcyBhIHNwZWNpYWwgY29tcGFyaXNvbiByZXF1aXJlZC5cbiAgICAgIC8vIERlY2ltYWwgbnVtYmVycyBhcmUgc29ydGVkIGFzIHN0cmluZ3MgKGUuZy4sICcuMDknIDwgJy4xJykuXG4gICAgICB2YXIgbnVtMSA9IHBhcnNlSW50KGEsIDEwKTtcbiAgICAgIGlmICghaXNOYU4obnVtMSkpIHtcbiAgICAgICAgdmFyIG51bTIgPSBwYXJzZUludChiLCAxMCk7XG4gICAgICAgIGlmICghaXNOYU4obnVtMikgJiYgbnVtMSAtIG51bTIpIHtcbiAgICAgICAgICByZXR1cm4gbnVtMSAtIG51bTI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhIDwgYiA/IC0xIDogMTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiBvbmUgc3RyaW5nIGlzIGEgc3Vic3RyaW5nIG9mIHRoZSBvdGhlciwgdGhlIHNob3J0ZXIgc3RyaW5nIHNvcnRzIGZpcnN0LlxuICBpZiAodG9rZW5zMS5sZW5ndGggIT0gdG9rZW5zMi5sZW5ndGgpIHtcbiAgICByZXR1cm4gdG9rZW5zMS5sZW5ndGggLSB0b2tlbnMyLmxlbmd0aDtcbiAgfVxuXG4gIC8vIFRoZSB0d28gc3RyaW5ncyBtdXN0IGJlIGVxdWl2YWxlbnQgZXhjZXB0IGZvciBjYXNlIChwZXJmZWN0IGVxdWFsaXR5IGlzXG4gIC8vIHRlc3RlZCBhdCB0aGUgaGVhZCBvZiB0aGUgZnVuY3Rpb24uKSBSZXZlcnQgdG8gZGVmYXVsdCBBU0NJSS1iZXRpY2FsIHN0cmluZ1xuICAvLyBjb21wYXJpc29uIHRvIHN0YWJsaXplIHRoZSBzb3J0LlxuICByZXR1cm4gc3RyMSA8IHN0cjIgPyAtMSA6IDE7XG59O1xuXG5cbi8qKlxuICogVVJMLWVuY29kZXMgYSBzdHJpbmdcbiAqIEBwYXJhbSB7Kn0gc3RyIFRoZSBzdHJpbmcgdG8gdXJsLWVuY29kZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZW5jb2RlZCBjb3B5IG9mIHtAY29kZSBzdHJ9IHRoYXQgaXMgc2FmZSBmb3IgdXJscy5cbiAqICAgICBOb3RlIHRoYXQgJyMnLCAnOicsIGFuZCBvdGhlciBjaGFyYWN0ZXJzIHVzZWQgdG8gZGVsaW1pdCBwb3J0aW9uc1xuICogICAgIG9mIFVSTHMgKndpbGwqIGJlIGVuY29kZWQuXG4gKi9cbmdvb2cuc3RyaW5nLnVybEVuY29kZSA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhzdHIpKTtcbn07XG5cblxuLyoqXG4gKiBVUkwtZGVjb2RlcyB0aGUgc3RyaW5nLiBXZSBuZWVkIHRvIHNwZWNpYWxseSBoYW5kbGUgJysncyBiZWNhdXNlXG4gKiB0aGUgamF2YXNjcmlwdCBsaWJyYXJ5IGRvZXNuJ3QgY29udmVydCB0aGVtIHRvIHNwYWNlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byB1cmwgZGVjb2RlLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZGVjb2RlZCB7QGNvZGUgc3RyfS5cbiAqL1xuZ29vZy5zdHJpbmcudXJsRGVjb2RlID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBcXG4gdG8gPGJyPnMgb3IgPGJyIC8+cy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyBpbiB3aGljaCB0byBjb252ZXJ0IG5ld2xpbmVzLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3htbCBXaGV0aGVyIHRvIHVzZSBYTUwgY29tcGF0aWJsZSB0YWdzLlxuICogQHJldHVybiB7c3RyaW5nfSBBIGNvcHkgb2Yge0Bjb2RlIHN0cn0gd2l0aCBjb252ZXJ0ZWQgbmV3bGluZXMuXG4gKi9cbmdvb2cuc3RyaW5nLm5ld0xpbmVUb0JyID0gZnVuY3Rpb24oc3RyLCBvcHRfeG1sKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFxcclxcbnxcXHJ8XFxuKS9nLCBvcHRfeG1sID8gJzxiciAvPicgOiAnPGJyPicpO1xufTtcblxuXG4vKipcbiAqIEVzY2FwZXMgZG91YmxlIHF1b3RlICdcIicgYW5kIHNpbmdsZSBxdW90ZSAnXFwnJyBjaGFyYWN0ZXJzIGluIGFkZGl0aW9uIHRvXG4gKiAnJicsICc8JywgYW5kICc+JyBzbyB0aGF0IGEgc3RyaW5nIGNhbiBiZSBpbmNsdWRlZCBpbiBhbiBIVE1MIHRhZyBhdHRyaWJ1dGVcbiAqIHZhbHVlIHdpdGhpbiBkb3VibGUgb3Igc2luZ2xlIHF1b3Rlcy5cbiAqXG4gKiBJdCBzaG91bGQgYmUgbm90ZWQgdGhhdCA+IGRvZXNuJ3QgbmVlZCB0byBiZSBlc2NhcGVkIGZvciB0aGUgSFRNTCBvciBYTUwgdG9cbiAqIGJlIHZhbGlkLCBidXQgaXQgaGFzIGJlZW4gZGVjaWRlZCB0byBlc2NhcGUgaXQgZm9yIGNvbnNpc3RlbmN5IHdpdGggb3RoZXJcbiAqIGltcGxlbWVudGF0aW9ucy5cbiAqXG4gKiBXaXRoIGdvb2cuc3RyaW5nLkRFVEVDVF9ET1VCTEVfRVNDQVBJTkcsIHRoaXMgZnVuY3Rpb24gZXNjYXBlcyBhbHNvIHRoZVxuICogbG93ZXJjYXNlIGxldHRlciBcImVcIi5cbiAqXG4gKiBOT1RFKHVzZXIpOlxuICogSHRtbEVzY2FwZSBpcyBvZnRlbiBjYWxsZWQgZHVyaW5nIHRoZSBnZW5lcmF0aW9uIG9mIGxhcmdlIGJsb2NrcyBvZiBIVE1MLlxuICogVXNpbmcgc3RhdGljcyBmb3IgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYW5kIHN0cmluZ3MgaXMgYW4gb3B0aW1pemF0aW9uXG4gKiB0aGF0IGNhbiBtb3JlIHRoYW4gaGFsZiB0aGUgYW1vdW50IG9mIHRpbWUgSUUgc3BlbmRzIGluIHRoaXMgZnVuY3Rpb24gZm9yXG4gKiBsYXJnZSBhcHBzLCBzaW5jZSBzdHJpbmdzIGFuZCByZWdleGVzIGJvdGggY29udHJpYnV0ZSB0byBHQyBhbGxvY2F0aW9ucy5cbiAqXG4gKiBUZXN0aW5nIGZvciB0aGUgcHJlc2VuY2Ugb2YgYSBjaGFyYWN0ZXIgYmVmb3JlIGVzY2FwaW5nIGluY3JlYXNlcyB0aGUgbnVtYmVyXG4gKiBvZiBmdW5jdGlvbiBjYWxscywgYnV0IGFjdHVhbGx5IHByb3ZpZGVzIGEgc3BlZWQgaW5jcmVhc2UgZm9yIHRoZSBhdmVyYWdlXG4gKiBjYXNlIC0tIHNpbmNlIHRoZSBhdmVyYWdlIGNhc2Ugb2Z0ZW4gZG9lc24ndCByZXF1aXJlIHRoZSBlc2NhcGluZyBvZiBhbGwgNFxuICogY2hhcmFjdGVycyBhbmQgaW5kZXhPZigpIGlzIG11Y2ggY2hlYXBlciB0aGFuIHJlcGxhY2UoKS5cbiAqIFRoZSB3b3JzdCBjYXNlIGRvZXMgc3VmZmVyIHNsaWdodGx5IGZyb20gdGhlIGFkZGl0aW9uYWwgY2FsbHMsIHRoZXJlZm9yZSB0aGVcbiAqIG9wdF9pc0xpa2VseVRvQ29udGFpbkh0bWxDaGFycyBvcHRpb24gaGFzIGJlZW4gaW5jbHVkZWQgZm9yIHNpdHVhdGlvbnNcbiAqIHdoZXJlIGFsbCA0IEhUTUwgZW50aXRpZXMgYXJlIHZlcnkgbGlrZWx5IHRvIGJlIHByZXNlbnQgYW5kIG5lZWQgZXNjYXBpbmcuXG4gKlxuICogU29tZSBiZW5jaG1hcmtzICh0aW1lcyB0ZW5kZWQgdG8gZmx1Y3R1YXRlICstMC4wNW1zKTpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpcmVGb3ggICAgICAgICAgICAgICAgICAgICBJRTZcbiAqIChubyBjaGFycyAvIGF2ZXJhZ2UgKG1peCBvZiBjYXNlcykgLyBhbGwgNCBjaGFycylcbiAqIG5vIGNoZWNrcyAgICAgICAgICAgICAgICAgICAgIDAuMTMgLyAwLjIyIC8gMC4yMiAgICAgICAgIDAuMjMgLyAwLjUzIC8gMC44MFxuICogaW5kZXhPZiAgICAgICAgICAgICAgICAgICAgICAgMC4wOCAvIDAuMTcgLyAwLjI2ICAgICAgICAgMC4yMiAvIDAuNTQgLyAwLjg0XG4gKiBpbmRleE9mICsgcmUgdGVzdCAgICAgICAgICAgICAwLjA3IC8gMC4xNyAvIDAuMjggICAgICAgICAwLjE5IC8gMC41MCAvIDAuODVcbiAqXG4gKiBBbiBhZGRpdGlvbmFsIGFkdmFudGFnZSBvZiBjaGVja2luZyBpZiByZXBsYWNlIGFjdHVhbGx5IG5lZWRzIHRvIGJlIGNhbGxlZFxuICogaXMgYSByZWR1Y3Rpb24gaW4gdGhlIG51bWJlciBvZiBvYmplY3QgYWxsb2NhdGlvbnMsIHNvIGFzIHRoZSBzaXplIG9mIHRoZVxuICogYXBwbGljYXRpb24gZ3Jvd3MgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgdmFyaW91cyBtZXRob2RzIHdvdWxkIGluY3JlYXNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgc3RyaW5nIHRvIGJlIGVzY2FwZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaXNMaWtlbHlUb0NvbnRhaW5IdG1sQ2hhcnMgRG9uJ3QgcGVyZm9ybSBhIGNoZWNrIHRvIHNlZVxuICogICAgIGlmIHRoZSBjaGFyYWN0ZXIgbmVlZHMgcmVwbGFjaW5nIC0gdXNlIHRoaXMgb3B0aW9uIGlmIHlvdSBleHBlY3QgZWFjaCBvZlxuICogICAgIHRoZSBjaGFyYWN0ZXJzIHRvIGFwcGVhciBvZnRlbi4gTGVhdmUgZmFsc2UgaWYgeW91IGV4cGVjdCBmZXcgaHRtbFxuICogICAgIGNoYXJhY3RlcnMgdG8gb2NjdXIgaW4geW91ciBzdHJpbmdzLCBzdWNoIGFzIGlmIHlvdSBhcmUgZXNjYXBpbmcgSFRNTC5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBjb3B5IG9mIHtAY29kZSBzdHJ9LlxuICovXG5nb29nLnN0cmluZy5odG1sRXNjYXBlID0gZnVuY3Rpb24oc3RyLCBvcHRfaXNMaWtlbHlUb0NvbnRhaW5IdG1sQ2hhcnMpIHtcblxuICBpZiAob3B0X2lzTGlrZWx5VG9Db250YWluSHRtbENoYXJzKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoZ29vZy5zdHJpbmcuQU1QX1JFXywgJyZhbXA7JylcbiAgICAgICAgICAucmVwbGFjZShnb29nLnN0cmluZy5MVF9SRV8sICcmbHQ7JylcbiAgICAgICAgICAucmVwbGFjZShnb29nLnN0cmluZy5HVF9SRV8sICcmZ3Q7JylcbiAgICAgICAgICAucmVwbGFjZShnb29nLnN0cmluZy5RVU9UX1JFXywgJyZxdW90OycpXG4gICAgICAgICAgLnJlcGxhY2UoZ29vZy5zdHJpbmcuU0lOR0xFX1FVT1RFX1JFXywgJyYjMzk7JylcbiAgICAgICAgICAucmVwbGFjZShnb29nLnN0cmluZy5OVUxMX1JFXywgJyYjMDsnKTtcbiAgICBpZiAoZ29vZy5zdHJpbmcuREVURUNUX0RPVUJMRV9FU0NBUElORykge1xuICAgICAgc3RyID0gc3RyLnJlcGxhY2UoZ29vZy5zdHJpbmcuRV9SRV8sICcmIzEwMTsnKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcblxuICB9IGVsc2Uge1xuICAgIC8vIHF1aWNrIHRlc3QgaGVscHMgaW4gdGhlIGNhc2Ugd2hlbiB0aGVyZSBhcmUgbm8gY2hhcnMgdG8gcmVwbGFjZSwgaW5cbiAgICAvLyB3b3JzdCBjYXNlIHRoaXMgbWFrZXMgYmFyZWx5IGEgZGlmZmVyZW5jZSB0byB0aGUgdGltZSB0YWtlblxuICAgIGlmICghZ29vZy5zdHJpbmcuQUxMX1JFXy50ZXN0KHN0cikpIHJldHVybiBzdHI7XG5cbiAgICAvLyBzdHIuaW5kZXhPZiBpcyBmYXN0ZXIgdGhhbiByZWdleC50ZXN0IGluIHRoaXMgY2FzZVxuICAgIGlmIChzdHIuaW5kZXhPZignJicpICE9IC0xKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShnb29nLnN0cmluZy5BTVBfUkVfLCAnJmFtcDsnKTtcbiAgICB9XG4gICAgaWYgKHN0ci5pbmRleE9mKCc8JykgIT0gLTEpIHtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKGdvb2cuc3RyaW5nLkxUX1JFXywgJyZsdDsnKTtcbiAgICB9XG4gICAgaWYgKHN0ci5pbmRleE9mKCc+JykgIT0gLTEpIHtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKGdvb2cuc3RyaW5nLkdUX1JFXywgJyZndDsnKTtcbiAgICB9XG4gICAgaWYgKHN0ci5pbmRleE9mKCdcIicpICE9IC0xKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShnb29nLnN0cmluZy5RVU9UX1JFXywgJyZxdW90OycpO1xuICAgIH1cbiAgICBpZiAoc3RyLmluZGV4T2YoJ1xcJycpICE9IC0xKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShnb29nLnN0cmluZy5TSU5HTEVfUVVPVEVfUkVfLCAnJiMzOTsnKTtcbiAgICB9XG4gICAgaWYgKHN0ci5pbmRleE9mKCdcXHgwMCcpICE9IC0xKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShnb29nLnN0cmluZy5OVUxMX1JFXywgJyYjMDsnKTtcbiAgICB9XG4gICAgaWYgKGdvb2cuc3RyaW5nLkRFVEVDVF9ET1VCTEVfRVNDQVBJTkcgJiYgc3RyLmluZGV4T2YoJ2UnKSAhPSAtMSkge1xuICAgICAgc3RyID0gc3RyLnJlcGxhY2UoZ29vZy5zdHJpbmcuRV9SRV8sICcmIzEwMTsnKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufTtcblxuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IG1hdGNoZXMgYW4gYW1wZXJzYW5kLCBmb3IgdXNlIGluIGVzY2FwaW5nLlxuICogQGNvbnN0IHshUmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHJpbmcuQU1QX1JFXyA9IC8mL2c7XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIGEgbGVzcyB0aGFuIHNpZ24sIGZvciB1c2UgaW4gZXNjYXBpbmcuXG4gKiBAY29uc3QgeyFSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0cmluZy5MVF9SRV8gPSAvPC9nO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHRoYXQgbWF0Y2hlcyBhIGdyZWF0ZXIgdGhhbiBzaWduLCBmb3IgdXNlIGluIGVzY2FwaW5nLlxuICogQGNvbnN0IHshUmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHJpbmcuR1RfUkVfID0gLz4vZztcblxuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IG1hdGNoZXMgYSBkb3VibGUgcXVvdGUsIGZvciB1c2UgaW4gZXNjYXBpbmcuXG4gKiBAY29uc3QgeyFSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0cmluZy5RVU9UX1JFXyA9IC9cIi9nO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHRoYXQgbWF0Y2hlcyBhIHNpbmdsZSBxdW90ZSwgZm9yIHVzZSBpbiBlc2NhcGluZy5cbiAqIEBjb25zdCB7IVJlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3RyaW5nLlNJTkdMRV9RVU9URV9SRV8gPSAvJy9nO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHRoYXQgbWF0Y2hlcyBudWxsIGNoYXJhY3RlciwgZm9yIHVzZSBpbiBlc2NhcGluZy5cbiAqIEBjb25zdCB7IVJlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3RyaW5nLk5VTExfUkVfID0gL1xceDAwL2c7XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIGEgbG93ZXJjYXNlIGxldHRlciBcImVcIiwgZm9yIHVzZSBpbiBlc2NhcGluZy5cbiAqIEBjb25zdCB7IVJlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3RyaW5nLkVfUkVfID0gL2UvZztcblxuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IG1hdGNoZXMgYW55IGNoYXJhY3RlciB0aGF0IG5lZWRzIHRvIGJlIGVzY2FwZWQuXG4gKiBAY29uc3QgeyFSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0cmluZy5BTExfUkVfID0gKGdvb2cuc3RyaW5nLkRFVEVDVF9ET1VCTEVfRVNDQVBJTkcgP1xuICAgIC9bXFx4MDAmPD5cIidlXS8gOlxuICAgIC9bXFx4MDAmPD5cIiddLyk7XG5cblxuLyoqXG4gKiBVbmVzY2FwZXMgYW4gSFRNTCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiB1bmVzY2FwZWQgY29weSBvZiB7QGNvZGUgc3RyfS5cbiAqL1xuZ29vZy5zdHJpbmcudW5lc2NhcGVFbnRpdGllcyA9IGZ1bmN0aW9uKHN0cikge1xuICBpZiAoZ29vZy5zdHJpbmcuY29udGFpbnMoc3RyLCAnJicpKSB7XG4gICAgLy8gV2UgYXJlIGNhcmVmdWwgbm90IHRvIHVzZSBhIERPTSBpZiB3ZSBkbyBub3QgaGF2ZSBvbmUgb3Igd2UgZXhwbGljaXRseVxuICAgIC8vIHJlcXVlc3RlZCBub24tRE9NIGh0bWwgdW5lc2NhcGluZy5cbiAgICBpZiAoIWdvb2cuc3RyaW5nLkZPUkNFX05PTl9ET01fSFRNTF9VTkVTQ0FQSU5HICYmXG4gICAgICAgICdkb2N1bWVudCcgaW4gZ29vZy5nbG9iYWwpIHtcbiAgICAgIHJldHVybiBnb29nLnN0cmluZy51bmVzY2FwZUVudGl0aWVzVXNpbmdEb21fKHN0cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZhbGwgYmFjayBvbiBwdXJlIFhNTCBlbnRpdGllc1xuICAgICAgcmV0dXJuIGdvb2cuc3RyaW5nLnVuZXNjYXBlUHVyZVhtbEVudGl0aWVzXyhzdHIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vKipcbiAqIFVuZXNjYXBlcyBhIEhUTUwgc3RyaW5nIHVzaW5nIHRoZSBwcm92aWRlZCBkb2N1bWVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jdW1lbnQgQSBkb2N1bWVudCB0byB1c2UgaW4gZXNjYXBpbmcgdGhlIHN0cmluZy5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gdW5lc2NhcGVkIGNvcHkgb2Yge0Bjb2RlIHN0cn0uXG4gKi9cbmdvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXNXaXRoRG9jdW1lbnQgPSBmdW5jdGlvbihzdHIsIGRvY3VtZW50KSB7XG4gIGlmIChnb29nLnN0cmluZy5jb250YWlucyhzdHIsICcmJykpIHtcbiAgICByZXR1cm4gZ29vZy5zdHJpbmcudW5lc2NhcGVFbnRpdGllc1VzaW5nRG9tXyhzdHIsIGRvY3VtZW50KTtcbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vKipcbiAqIFVuZXNjYXBlcyBhbiBIVE1MIHN0cmluZyB1c2luZyBhIERPTSB0byByZXNvbHZlIG5vbi1YTUwsIG5vbi1udW1lcmljXG4gKiBlbnRpdGllcy4gVGhpcyBmdW5jdGlvbiBpcyBYU1Mtc2FmZSBhbmQgd2hpdGVzcGFjZS1wcmVzZXJ2aW5nLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byB1bmVzY2FwZS5cbiAqIEBwYXJhbSB7RG9jdW1lbnQ9fSBvcHRfZG9jdW1lbnQgQW4gb3B0aW9uYWwgZG9jdW1lbnQgdG8gdXNlIGZvciBjcmVhdGluZ1xuICogICAgIGVsZW1lbnRzLiBJZiB0aGlzIGlzIG5vdCBzcGVjaWZpZWQgdGhlbiB0aGUgZGVmYXVsdCB3aW5kb3cuZG9jdW1lbnRcbiAqICAgICB3aWxsIGJlIHVzZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB1bmVzY2FwZWQge0Bjb2RlIHN0cn0gc3RyaW5nLlxuICovXG5nb29nLnN0cmluZy51bmVzY2FwZUVudGl0aWVzVXNpbmdEb21fID0gZnVuY3Rpb24oc3RyLCBvcHRfZG9jdW1lbnQpIHtcbiAgLyoqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn0gKi9cbiAgdmFyIHNlZW4gPSB7JyZhbXA7JzogJyYnLCAnJmx0Oyc6ICc8JywgJyZndDsnOiAnPicsICcmcXVvdDsnOiAnXCInfTtcbiAgdmFyIGRpdjtcbiAgaWYgKG9wdF9kb2N1bWVudCkge1xuICAgIGRpdiA9IG9wdF9kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgfSBlbHNlIHtcbiAgICBkaXYgPSBnb29nLmdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgfVxuICAvLyBNYXRjaCBhcyBtYW55IHZhbGlkIGVudGl0eSBjaGFyYWN0ZXJzIGFzIHBvc3NpYmxlLiBJZiB0aGUgYWN0dWFsIGVudGl0eVxuICAvLyBoYXBwZW5zIHRvIGJlIHNob3J0ZXIsIGl0IHdpbGwgc3RpbGwgd29yayBhcyBpbm5lckhUTUwgd2lsbCByZXR1cm4gdGhlXG4gIC8vIHRyYWlsaW5nIGNoYXJhY3RlcnMgdW5jaGFuZ2VkLiBTaW5jZSB0aGUgZW50aXR5IGNoYXJhY3RlcnMgZG8gbm90IGluY2x1ZGVcbiAgLy8gb3BlbiBhbmdsZSBicmFja2V0LCB0aGVyZSBpcyBubyBjaGFuY2Ugb2YgWFNTIGZyb20gdGhlIGlubmVySFRNTCB1c2UuXG4gIC8vIFNpbmNlIG5vIHdoaXRlc3BhY2UgaXMgcGFzc2VkIHRvIGlubmVySFRNTCwgd2hpdGVzcGFjZSBpcyBwcmVzZXJ2ZWQuXG4gIHJldHVybiBzdHIucmVwbGFjZShnb29nLnN0cmluZy5IVE1MX0VOVElUWV9QQVRURVJOXywgZnVuY3Rpb24ocywgZW50aXR5KSB7XG4gICAgLy8gQ2hlY2sgZm9yIGNhY2hlZCBlbnRpdHkuXG4gICAgdmFyIHZhbHVlID0gc2VlbltzXTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgZm9yIG51bWVyaWMgZW50aXR5LlxuICAgIGlmIChlbnRpdHkuY2hhckF0KDApID09ICcjJykge1xuICAgICAgLy8gUHJlZml4IHdpdGggMCBzbyB0aGF0IGhleCBlbnRpdGllcyAoZS5nLiAmI3gxMCkgcGFyc2UgYXMgaGV4IG51bWJlcnMuXG4gICAgICB2YXIgbiA9IE51bWJlcignMCcgKyBlbnRpdHkuc3Vic3RyKDEpKTtcbiAgICAgIGlmICghaXNOYU4obikpIHtcbiAgICAgICAgdmFsdWUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG4pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBGYWxsIGJhY2sgdG8gaW5uZXJIVE1MIG90aGVyd2lzZS5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAvLyBBcHBlbmQgYSBub24tZW50aXR5IGNoYXJhY3RlciB0byBhdm9pZCBhIGJ1ZyBpbiBXZWJraXQgdGhhdCBwYXJzZXNcbiAgICAgIC8vIGFuIGludmFsaWQgZW50aXR5IGF0IHRoZSBlbmQgb2YgaW5uZXJIVE1MIHRleHQgYXMgdGhlIGVtcHR5IHN0cmluZy5cbiAgICAgIGRpdi5pbm5lckhUTUwgPSBzICsgJyAnO1xuICAgICAgLy8gVGhlbiByZW1vdmUgdGhlIHRyYWlsaW5nIGNoYXJhY3RlciBmcm9tIHRoZSByZXN1bHQuXG4gICAgICB2YWx1ZSA9IGRpdi5maXJzdENoaWxkLm5vZGVWYWx1ZS5zbGljZSgwLCAtMSk7XG4gICAgfVxuICAgIC8vIENhY2hlIGFuZCByZXR1cm4uXG4gICAgcmV0dXJuIHNlZW5bc10gPSB2YWx1ZTtcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogVW5lc2NhcGVzIFhNTCBlbnRpdGllcy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIHVuZXNjYXBlZCBjb3B5IG9mIHtAY29kZSBzdHJ9LlxuICovXG5nb29nLnN0cmluZy51bmVzY2FwZVB1cmVYbWxFbnRpdGllc18gPSBmdW5jdGlvbihzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mKFteO10rKTsvZywgZnVuY3Rpb24ocywgZW50aXR5KSB7XG4gICAgc3dpdGNoIChlbnRpdHkpIHtcbiAgICAgIGNhc2UgJ2FtcCc6XG4gICAgICAgIHJldHVybiAnJic7XG4gICAgICBjYXNlICdsdCc6XG4gICAgICAgIHJldHVybiAnPCc7XG4gICAgICBjYXNlICdndCc6XG4gICAgICAgIHJldHVybiAnPic7XG4gICAgICBjYXNlICdxdW90JzpcbiAgICAgICAgcmV0dXJuICdcIic7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoZW50aXR5LmNoYXJBdCgwKSA9PSAnIycpIHtcbiAgICAgICAgICAvLyBQcmVmaXggd2l0aCAwIHNvIHRoYXQgaGV4IGVudGl0aWVzIChlLmcuICYjeDEwKSBwYXJzZSBhcyBoZXguXG4gICAgICAgICAgdmFyIG4gPSBOdW1iZXIoJzAnICsgZW50aXR5LnN1YnN0cigxKSk7XG4gICAgICAgICAgaWYgKCFpc05hTihuKSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUobik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEZvciBpbnZhbGlkIGVudGl0aWVzIHdlIGp1c3QgcmV0dXJuIHRoZSBlbnRpdHlcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICB9KTtcbn07XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIGFuIEhUTUwgZW50aXR5LlxuICogU2VlIGFsc28gSFRNTDU6IFRva2VuaXphdGlvbiAvIFRva2VuaXppbmcgY2hhcmFjdGVyIHJlZmVyZW5jZXMuXG4gKiBAcHJpdmF0ZVxuICogQHR5cGUgeyFSZWdFeHB9XG4gKi9cbmdvb2cuc3RyaW5nLkhUTUxfRU5USVRZX1BBVFRFUk5fID0gLyYoW147XFxzPCZdKyk7Py9nO1xuXG5cbi8qKlxuICogRG8gZXNjYXBpbmcgb2Ygd2hpdGVzcGFjZSB0byBwcmVzZXJ2ZSBzcGF0aWFsIGZvcm1hdHRpbmcuIFdlIHVzZSBjaGFyYWN0ZXJcbiAqIGVudGl0eSAjMTYwIHRvIG1ha2UgaXQgc2FmZXIgZm9yIHhtbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyBpbiB3aGljaCB0byBlc2NhcGUgd2hpdGVzcGFjZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF94bWwgV2hldGhlciB0byB1c2UgWE1MIGNvbXBhdGlibGUgdGFncy5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBjb3B5IG9mIHtAY29kZSBzdHJ9LlxuICovXG5nb29nLnN0cmluZy53aGl0ZXNwYWNlRXNjYXBlID0gZnVuY3Rpb24oc3RyLCBvcHRfeG1sKSB7XG4gIC8vIFRoaXMgZG9lc24ndCB1c2UgZ29vZy5zdHJpbmcucHJlc2VydmVTcGFjZXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICByZXR1cm4gZ29vZy5zdHJpbmcubmV3TGluZVRvQnIoc3RyLnJlcGxhY2UoLyAgL2csICcgJiMxNjA7JyksIG9wdF94bWwpO1xufTtcblxuXG4vKipcbiAqIFByZXNlcnZlIHNwYWNlcyB0aGF0IHdvdWxkIGJlIG90aGVyd2lzZSBjb2xsYXBzZWQgaW4gSFRNTCBieSByZXBsYWNpbmcgdGhlbVxuICogd2l0aCBub24tYnJlYWtpbmcgc3BhY2UgVW5pY29kZSBjaGFyYWN0ZXJzLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIGluIHdoaWNoIHRvIHByZXNlcnZlIHdoaXRlc3BhY2UuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgY29weSBvZiB7QGNvZGUgc3RyfSB3aXRoIHByZXNlcnZlZCB3aGl0ZXNwYWNlLlxuICovXG5nb29nLnN0cmluZy5wcmVzZXJ2ZVNwYWNlcyA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhefFtcXG4gXSkgL2csICckMScgKyBnb29nLnN0cmluZy5Vbmljb2RlLk5CU1ApO1xufTtcblxuXG4vKipcbiAqIFN0cmlwIHF1b3RlIGNoYXJhY3RlcnMgYXJvdW5kIGEgc3RyaW5nLiAgVGhlIHNlY29uZCBhcmd1bWVudCBpcyBhIHN0cmluZyBvZlxuICogY2hhcmFjdGVycyB0byB0cmVhdCBhcyBxdW90ZXMuICBUaGlzIGNhbiBiZSBhIHNpbmdsZSBjaGFyYWN0ZXIgb3IgYSBzdHJpbmcgb2ZcbiAqIG11bHRpcGxlIGNoYXJhY3RlciBhbmQgaW4gdGhhdCBjYXNlIGVhY2ggb2YgdGhvc2UgYXJlIHRyZWF0ZWQgYXMgcG9zc2libGVcbiAqIHF1b3RlIGNoYXJhY3RlcnMuIEZvciBleGFtcGxlOlxuICpcbiAqIDxwcmU+XG4gKiBnb29nLnN0cmluZy5zdHJpcFF1b3RlcygnXCJhYmNcIicsICdcImAnKSAtLT4gJ2FiYydcbiAqIGdvb2cuc3RyaW5nLnN0cmlwUXVvdGVzKCdgYWJjYCcsICdcImAnKSAtLT4gJ2FiYydcbiAqIDwvcHJlPlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBzdHJpcC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBxdW90ZUNoYXJzIFRoZSBxdW90ZSBjaGFyYWN0ZXJzIHRvIHN0cmlwLlxuICogQHJldHVybiB7c3RyaW5nfSBBIGNvcHkgb2Yge0Bjb2RlIHN0cn0gd2l0aG91dCB0aGUgcXVvdGVzLlxuICovXG5nb29nLnN0cmluZy5zdHJpcFF1b3RlcyA9IGZ1bmN0aW9uKHN0ciwgcXVvdGVDaGFycykge1xuICB2YXIgbGVuZ3RoID0gcXVvdGVDaGFycy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcXVvdGVDaGFyID0gbGVuZ3RoID09IDEgPyBxdW90ZUNoYXJzIDogcXVvdGVDaGFycy5jaGFyQXQoaSk7XG4gICAgaWYgKHN0ci5jaGFyQXQoMCkgPT0gcXVvdGVDaGFyICYmIHN0ci5jaGFyQXQoc3RyLmxlbmd0aCAtIDEpID09IHF1b3RlQ2hhcikge1xuICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMSwgc3RyLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vKipcbiAqIFRydW5jYXRlcyBhIHN0cmluZyB0byBhIGNlcnRhaW4gbGVuZ3RoIGFuZCBhZGRzICcuLi4nIGlmIG5lY2Vzc2FyeS4gIFRoZVxuICogbGVuZ3RoIGFsc28gYWNjb3VudHMgZm9yIHRoZSBlbGxpcHNpcywgc28gYSBtYXhpbXVtIGxlbmd0aCBvZiAxMCBhbmQgYSBzdHJpbmdcbiAqICdIZWxsbyBXb3JsZCEnIHByb2R1Y2VzICdIZWxsbyBXLi4uJy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byB0cnVuY2F0ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjaGFycyBNYXggbnVtYmVyIG9mIGNoYXJhY3RlcnMuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfcHJvdGVjdEVzY2FwZWRDaGFyYWN0ZXJzIFdoZXRoZXIgdG8gcHJvdGVjdCBlc2NhcGVkXG4gKiAgICAgY2hhcmFjdGVycyBmcm9tIGJlaW5nIGN1dCBvZmYgaW4gdGhlIG1pZGRsZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRydW5jYXRlZCB7QGNvZGUgc3RyfSBzdHJpbmcuXG4gKi9cbmdvb2cuc3RyaW5nLnRydW5jYXRlID0gZnVuY3Rpb24oc3RyLCBjaGFycywgb3B0X3Byb3RlY3RFc2NhcGVkQ2hhcmFjdGVycykge1xuICBpZiAob3B0X3Byb3RlY3RFc2NhcGVkQ2hhcmFjdGVycykge1xuICAgIHN0ciA9IGdvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXMoc3RyKTtcbiAgfVxuXG4gIGlmIChzdHIubGVuZ3RoID4gY2hhcnMpIHtcbiAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGNoYXJzIC0gMykgKyAnLi4uJztcbiAgfVxuXG4gIGlmIChvcHRfcHJvdGVjdEVzY2FwZWRDaGFyYWN0ZXJzKSB7XG4gICAgc3RyID0gZ29vZy5zdHJpbmcuaHRtbEVzY2FwZShzdHIpO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLyoqXG4gKiBUcnVuY2F0ZSBhIHN0cmluZyBpbiB0aGUgbWlkZGxlLCBhZGRpbmcgXCIuLi5cIiBpZiBuZWNlc3NhcnksXG4gKiBhbmQgZmF2b3JpbmcgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHRydW5jYXRlIHRoZSBtaWRkbGUgb2YuXG4gKiBAcGFyYW0ge251bWJlcn0gY2hhcnMgTWF4IG51bWJlciBvZiBjaGFyYWN0ZXJzLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3Byb3RlY3RFc2NhcGVkQ2hhcmFjdGVycyBXaGV0aGVyIHRvIHByb3RlY3QgZXNjYXBlZFxuICogICAgIGNoYXJhY3RlcnMgZnJvbSBiZWluZyBjdXRvZmYgaW4gdGhlIG1pZGRsZS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X3RyYWlsaW5nQ2hhcnMgT3B0aW9uYWwgbnVtYmVyIG9mIHRyYWlsaW5nIGNoYXJhY3RlcnMgdG9cbiAqICAgICBsZWF2ZSBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIGluc3RlYWQgb2YgdHJ1bmNhdGluZyBhcyBjbG9zZSB0byB0aGVcbiAqICAgICBtaWRkbGUgYXMgcG9zc2libGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgdHJ1bmNhdGVkIGNvcHkgb2Yge0Bjb2RlIHN0cn0uXG4gKi9cbmdvb2cuc3RyaW5nLnRydW5jYXRlTWlkZGxlID0gZnVuY3Rpb24oc3RyLCBjaGFycyxcbiAgICBvcHRfcHJvdGVjdEVzY2FwZWRDaGFyYWN0ZXJzLCBvcHRfdHJhaWxpbmdDaGFycykge1xuICBpZiAob3B0X3Byb3RlY3RFc2NhcGVkQ2hhcmFjdGVycykge1xuICAgIHN0ciA9IGdvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXMoc3RyKTtcbiAgfVxuXG4gIGlmIChvcHRfdHJhaWxpbmdDaGFycyAmJiBzdHIubGVuZ3RoID4gY2hhcnMpIHtcbiAgICBpZiAob3B0X3RyYWlsaW5nQ2hhcnMgPiBjaGFycykge1xuICAgICAgb3B0X3RyYWlsaW5nQ2hhcnMgPSBjaGFycztcbiAgICB9XG4gICAgdmFyIGVuZFBvaW50ID0gc3RyLmxlbmd0aCAtIG9wdF90cmFpbGluZ0NoYXJzO1xuICAgIHZhciBzdGFydFBvaW50ID0gY2hhcnMgLSBvcHRfdHJhaWxpbmdDaGFycztcbiAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIHN0YXJ0UG9pbnQpICsgJy4uLicgKyBzdHIuc3Vic3RyaW5nKGVuZFBvaW50KTtcbiAgfSBlbHNlIGlmIChzdHIubGVuZ3RoID4gY2hhcnMpIHtcbiAgICAvLyBGYXZvciB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzdHJpbmc6XG4gICAgdmFyIGhhbGYgPSBNYXRoLmZsb29yKGNoYXJzIC8gMik7XG4gICAgdmFyIGVuZFBvcyA9IHN0ci5sZW5ndGggLSBoYWxmO1xuICAgIGhhbGYgKz0gY2hhcnMgJSAyO1xuICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgaGFsZikgKyAnLi4uJyArIHN0ci5zdWJzdHJpbmcoZW5kUG9zKTtcbiAgfVxuXG4gIGlmIChvcHRfcHJvdGVjdEVzY2FwZWRDaGFyYWN0ZXJzKSB7XG4gICAgc3RyID0gZ29vZy5zdHJpbmcuaHRtbEVzY2FwZShzdHIpO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLyoqXG4gKiBTcGVjaWFsIGNoYXJzIHRoYXQgbmVlZCB0byBiZSBlc2NhcGVkIGZvciBnb29nLnN0cmluZy5xdW90ZS5cbiAqIEBwcml2YXRlIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn1cbiAqL1xuZ29vZy5zdHJpbmcuc3BlY2lhbEVzY2FwZUNoYXJzXyA9IHtcbiAgJ1xcMCc6ICdcXFxcMCcsXG4gICdcXGInOiAnXFxcXGInLFxuICAnXFxmJzogJ1xcXFxmJyxcbiAgJ1xcbic6ICdcXFxcbicsXG4gICdcXHInOiAnXFxcXHInLFxuICAnXFx0JzogJ1xcXFx0JyxcbiAgJ1xceDBCJzogJ1xcXFx4MEInLCAvLyAnXFx2JyBpcyBub3Qgc3VwcG9ydGVkIGluIEpTY3JpcHRcbiAgJ1wiJzogJ1xcXFxcIicsXG4gICdcXFxcJzogJ1xcXFxcXFxcJ1xufTtcblxuXG4vKipcbiAqIENoYXJhY3RlciBtYXBwaW5ncyB1c2VkIGludGVybmFsbHkgZm9yIGdvb2cuc3RyaW5nLmVzY2FwZUNoYXIuXG4gKiBAcHJpdmF0ZSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gKi9cbmdvb2cuc3RyaW5nLmpzRXNjYXBlQ2FjaGVfID0ge1xuICAnXFwnJzogJ1xcXFxcXCcnXG59O1xuXG5cbi8qKlxuICogRW5jbG9zZXMgYSBzdHJpbmcgaW4gZG91YmxlIHF1b3RlcyBhbmQgZXNjYXBlcyBjaGFyYWN0ZXJzIHNvIHRoYXQgdGhlXG4gKiBzdHJpbmcgaXMgYSB2YWxpZCBKUyBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gcyBUaGUgc3RyaW5nIHRvIHF1b3RlLlxuICogQHJldHVybiB7c3RyaW5nfSBBIGNvcHkgb2Yge0Bjb2RlIHN9IHN1cnJvdW5kZWQgYnkgZG91YmxlIHF1b3Rlcy5cbiAqL1xuZ29vZy5zdHJpbmcucXVvdGUgPSBmdW5jdGlvbihzKSB7XG4gIHMgPSBTdHJpbmcocyk7XG4gIGlmIChzLnF1b3RlKSB7XG4gICAgcmV0dXJuIHMucXVvdGUoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2IgPSBbJ1wiJ107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2ggPSBzLmNoYXJBdChpKTtcbiAgICAgIHZhciBjYyA9IGNoLmNoYXJDb2RlQXQoMCk7XG4gICAgICBzYltpICsgMV0gPSBnb29nLnN0cmluZy5zcGVjaWFsRXNjYXBlQ2hhcnNfW2NoXSB8fFxuICAgICAgICAgICgoY2MgPiAzMSAmJiBjYyA8IDEyNykgPyBjaCA6IGdvb2cuc3RyaW5nLmVzY2FwZUNoYXIoY2gpKTtcbiAgICB9XG4gICAgc2IucHVzaCgnXCInKTtcbiAgICByZXR1cm4gc2Iuam9pbignJyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBUYWtlcyBhIHN0cmluZyBhbmQgcmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcgZm9yIHRoYXQgY2hhcmFjdGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcgcmVwcmVzZW50aW5nIHtAY29kZSBzdHJ9LlxuICovXG5nb29nLnN0cmluZy5lc2NhcGVTdHJpbmcgPSBmdW5jdGlvbihzdHIpIHtcbiAgdmFyIHNiID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgc2JbaV0gPSBnb29nLnN0cmluZy5lc2NhcGVDaGFyKHN0ci5jaGFyQXQoaSkpO1xuICB9XG4gIHJldHVybiBzYi5qb2luKCcnKTtcbn07XG5cblxuLyoqXG4gKiBUYWtlcyBhIGNoYXJhY3RlciBhbmQgcmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcgZm9yIHRoYXQgY2hhcmFjdGVyLiBGb3JcbiAqIGV4YW1wbGUgZXNjYXBlQ2hhcihTdHJpbmcuZnJvbUNoYXJDb2RlKDE1KSkgLT4gXCJcXFxceDBFXCIuXG4gKiBAcGFyYW0ge3N0cmluZ30gYyBUaGUgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcgcmVwcmVzZW50aW5nIHtAY29kZSBjfS5cbiAqL1xuZ29vZy5zdHJpbmcuZXNjYXBlQ2hhciA9IGZ1bmN0aW9uKGMpIHtcbiAgaWYgKGMgaW4gZ29vZy5zdHJpbmcuanNFc2NhcGVDYWNoZV8pIHtcbiAgICByZXR1cm4gZ29vZy5zdHJpbmcuanNFc2NhcGVDYWNoZV9bY107XG4gIH1cblxuICBpZiAoYyBpbiBnb29nLnN0cmluZy5zcGVjaWFsRXNjYXBlQ2hhcnNfKSB7XG4gICAgcmV0dXJuIGdvb2cuc3RyaW5nLmpzRXNjYXBlQ2FjaGVfW2NdID0gZ29vZy5zdHJpbmcuc3BlY2lhbEVzY2FwZUNoYXJzX1tjXTtcbiAgfVxuXG4gIHZhciBydiA9IGM7XG4gIHZhciBjYyA9IGMuY2hhckNvZGVBdCgwKTtcbiAgaWYgKGNjID4gMzEgJiYgY2MgPCAxMjcpIHtcbiAgICBydiA9IGM7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGFiIGlzIDkgYnV0IGhhbmRsZWQgYWJvdmVcbiAgICBpZiAoY2MgPCAyNTYpIHtcbiAgICAgIHJ2ID0gJ1xcXFx4JztcbiAgICAgIGlmIChjYyA8IDE2IHx8IGNjID4gMjU2KSB7XG4gICAgICAgIHJ2ICs9ICcwJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcnYgPSAnXFxcXHUnO1xuICAgICAgaWYgKGNjIDwgNDA5NikgeyAvLyBcXHUxMDAwXG4gICAgICAgIHJ2ICs9ICcwJztcbiAgICAgIH1cbiAgICB9XG4gICAgcnYgKz0gY2MudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gIH1cblxuICByZXR1cm4gZ29vZy5zdHJpbmcuanNFc2NhcGVDYWNoZV9bY10gPSBydjtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgY29udGFpbnMgYSBzdWJzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gc2VhcmNoLlxuICogQHBhcmFtIHtzdHJpbmd9IHN1YlN0cmluZyBUaGUgc3Vic3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHtAY29kZSBzdHJ9IGNvbnRhaW5zIHtAY29kZSBzdWJTdHJpbmd9LlxuICovXG5nb29nLnN0cmluZy5jb250YWlucyA9IGZ1bmN0aW9uKHN0ciwgc3ViU3RyaW5nKSB7XG4gIHJldHVybiBzdHIuaW5kZXhPZihzdWJTdHJpbmcpICE9IC0xO1xufTtcblxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIHN0cmluZyBjb250YWlucyBhIHN1YnN0cmluZywgaWdub3JpbmcgY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKiBAcGFyYW0ge3N0cmluZ30gc3ViU3RyaW5nIFRoZSBzdWJzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIge0Bjb2RlIHN0cn0gY29udGFpbnMge0Bjb2RlIHN1YlN0cmluZ30uXG4gKi9cbmdvb2cuc3RyaW5nLmNhc2VJbnNlbnNpdGl2ZUNvbnRhaW5zID0gZnVuY3Rpb24oc3RyLCBzdWJTdHJpbmcpIHtcbiAgcmV0dXJuIGdvb2cuc3RyaW5nLmNvbnRhaW5zKHN0ci50b0xvd2VyQ2FzZSgpLCBzdWJTdHJpbmcudG9Mb3dlckNhc2UoKSk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgbm9uLW92ZXJsYXBwaW5nIG9jY3VycmVuY2VzIG9mIHNzIGluIHMuXG4gKiBJZiBlaXRoZXIgcyBvciBzcyBldmFsdXRlcyB0byBmYWxzZSwgdGhlbiByZXR1cm5zIHplcm8uXG4gKiBAcGFyYW0ge3N0cmluZ30gcyBUaGUgc3RyaW5nIHRvIGxvb2sgaW4uXG4gKiBAcGFyYW0ge3N0cmluZ30gc3MgVGhlIHN0cmluZyB0byBsb29rIGZvci5cbiAqIEByZXR1cm4ge251bWJlcn0gTnVtYmVyIG9mIG9jY3VycmVuY2VzIG9mIHNzIGluIHMuXG4gKi9cbmdvb2cuc3RyaW5nLmNvdW50T2YgPSBmdW5jdGlvbihzLCBzcykge1xuICByZXR1cm4gcyAmJiBzcyA/IHMuc3BsaXQoc3MpLmxlbmd0aCAtIDEgOiAwO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYSBzdWJzdHJpbmcgb2YgYSBzcGVjaWZpZWQgbGVuZ3RoIGF0IGEgc3BlY2lmaWNcbiAqIGluZGV4IGluIGEgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHMgVGhlIGJhc2Ugc3RyaW5nIGZyb20gd2hpY2ggdG8gcmVtb3ZlLlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCBhdCB3aGljaCB0byByZW1vdmUgdGhlIHN1YnN0cmluZy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdHJpbmdMZW5ndGggVGhlIGxlbmd0aCBvZiB0aGUgc3Vic3RyaW5nIHRvIHJlbW92ZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBjb3B5IG9mIHtAY29kZSBzfSB3aXRoIHRoZSBzdWJzdHJpbmcgcmVtb3ZlZCBvciB0aGUgZnVsbFxuICogICAgIHN0cmluZyBpZiBub3RoaW5nIGlzIHJlbW92ZWQgb3IgdGhlIGlucHV0IGlzIGludmFsaWQuXG4gKi9cbmdvb2cuc3RyaW5nLnJlbW92ZUF0ID0gZnVuY3Rpb24ocywgaW5kZXgsIHN0cmluZ0xlbmd0aCkge1xuICB2YXIgcmVzdWx0U3RyID0gcztcbiAgLy8gSWYgdGhlIGluZGV4IGlzIGdyZWF0ZXIgb3IgZXF1YWwgdG8gMCB0aGVuIHJlbW92ZSBzdWJzdHJpbmdcbiAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCBzLmxlbmd0aCAmJiBzdHJpbmdMZW5ndGggPiAwKSB7XG4gICAgcmVzdWx0U3RyID0gcy5zdWJzdHIoMCwgaW5kZXgpICtcbiAgICAgICAgcy5zdWJzdHIoaW5kZXggKyBzdHJpbmdMZW5ndGgsIHMubGVuZ3RoIC0gaW5kZXggLSBzdHJpbmdMZW5ndGgpO1xuICB9XG4gIHJldHVybiByZXN1bHRTdHI7XG59O1xuXG5cbi8qKlxuICogIFJlbW92ZXMgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYSBzdWJzdHJpbmcgZnJvbSBhIHN0cmluZy5cbiAqICBAcGFyYW0ge3N0cmluZ30gcyBUaGUgYmFzZSBzdHJpbmcgZnJvbSB3aGljaCB0byByZW1vdmUuXG4gKiAgQHBhcmFtIHtzdHJpbmd9IHNzIFRoZSBzdHJpbmcgdG8gcmVtb3ZlLlxuICogIEByZXR1cm4ge3N0cmluZ30gQSBjb3B5IG9mIHtAY29kZSBzfSB3aXRoIHtAY29kZSBzc30gcmVtb3ZlZCBvciB0aGUgZnVsbFxuICogICAgICBzdHJpbmcgaWYgbm90aGluZyBpcyByZW1vdmVkLlxuICovXG5nb29nLnN0cmluZy5yZW1vdmUgPSBmdW5jdGlvbihzLCBzcykge1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKGdvb2cuc3RyaW5nLnJlZ0V4cEVzY2FwZShzcyksICcnKTtcbiAgcmV0dXJuIHMucmVwbGFjZShyZSwgJycpO1xufTtcblxuXG4vKipcbiAqICBSZW1vdmVzIGFsbCBvY2N1cnJlbmNlcyBvZiBhIHN1YnN0cmluZyBmcm9tIGEgc3RyaW5nLlxuICogIEBwYXJhbSB7c3RyaW5nfSBzIFRoZSBiYXNlIHN0cmluZyBmcm9tIHdoaWNoIHRvIHJlbW92ZS5cbiAqICBAcGFyYW0ge3N0cmluZ30gc3MgVGhlIHN0cmluZyB0byByZW1vdmUuXG4gKiAgQHJldHVybiB7c3RyaW5nfSBBIGNvcHkgb2Yge0Bjb2RlIHN9IHdpdGgge0Bjb2RlIHNzfSByZW1vdmVkIG9yIHRoZSBmdWxsXG4gKiAgICAgIHN0cmluZyBpZiBub3RoaW5nIGlzIHJlbW92ZWQuXG4gKi9cbmdvb2cuc3RyaW5nLnJlbW92ZUFsbCA9IGZ1bmN0aW9uKHMsIHNzKSB7XG4gIHZhciByZSA9IG5ldyBSZWdFeHAoZ29vZy5zdHJpbmcucmVnRXhwRXNjYXBlKHNzKSwgJ2cnKTtcbiAgcmV0dXJuIHMucmVwbGFjZShyZSwgJycpO1xufTtcblxuXG4vKipcbiAqIEVzY2FwZXMgY2hhcmFjdGVycyBpbiB0aGUgc3RyaW5nIHRoYXQgYXJlIG5vdCBzYWZlIHRvIHVzZSBpbiBhIFJlZ0V4cC5cbiAqIEBwYXJhbSB7Kn0gcyBUaGUgc3RyaW5nIHRvIGVzY2FwZS4gSWYgbm90IGEgc3RyaW5nLCBpdCB3aWxsIGJlIGNhc3RlZFxuICogICAgIHRvIG9uZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBSZWdFeHAgc2FmZSwgZXNjYXBlZCBjb3B5IG9mIHtAY29kZSBzfS5cbiAqL1xuZ29vZy5zdHJpbmcucmVnRXhwRXNjYXBlID0gZnVuY3Rpb24ocykge1xuICByZXR1cm4gU3RyaW5nKHMpLnJlcGxhY2UoLyhbLSgpXFxbXFxde30rPyouJFxcXnwsOiM8IVxcXFxdKS9nLCAnXFxcXCQxJykuXG4gICAgICByZXBsYWNlKC9cXHgwOC9nLCAnXFxcXHgwOCcpO1xufTtcblxuXG4vKipcbiAqIFJlcGVhdHMgYSBzdHJpbmcgbiB0aW1lcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0LlxuICogQHJldHVybiB7c3RyaW5nfSBBIHN0cmluZyBjb250YWluaW5nIHtAY29kZSBsZW5ndGh9IHJlcGV0aXRpb25zIG9mXG4gKiAgICAge0Bjb2RlIHN0cmluZ30uXG4gKi9cbmdvb2cuc3RyaW5nLnJlcGVhdCA9IChTdHJpbmcucHJvdG90eXBlLnJlcGVhdCkgP1xuICAgIGZ1bmN0aW9uKHN0cmluZywgbGVuZ3RoKSB7XG4gICAgICAvLyBUaGUgbmF0aXZlIG1ldGhvZCBpcyBvdmVyIDEwMCB0aW1lcyBmYXN0ZXIgdGhhbiB0aGUgYWx0ZXJuYXRpdmUuXG4gICAgICByZXR1cm4gc3RyaW5nLnJlcGVhdChsZW5ndGgpO1xuICAgIH0gOlxuICAgIGZ1bmN0aW9uKHN0cmluZywgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbmV3IEFycmF5KGxlbmd0aCArIDEpLmpvaW4oc3RyaW5nKTtcbiAgICB9O1xuXG5cbi8qKlxuICogUGFkcyBudW1iZXIgdG8gZ2l2ZW4gbGVuZ3RoIGFuZCBvcHRpb25hbGx5IHJvdW5kcyBpdCB0byBhIGdpdmVuIHByZWNpc2lvbi5cbiAqIEZvciBleGFtcGxlOlxuICogPHByZT5wYWROdW1iZXIoMS4yNSwgMiwgMykgLT4gJzAxLjI1MCdcbiAqIHBhZE51bWJlcigxLjI1LCAyKSAtPiAnMDEuMjUnXG4gKiBwYWROdW1iZXIoMS4yNSwgMiwgMSkgLT4gJzAxLjMnXG4gKiBwYWROdW1iZXIoMS4yNSwgMCkgLT4gJzEuMjUnPC9wcmU+XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIHBhZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIGRlc2lyZWQgbGVuZ3RoLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfcHJlY2lzaW9uIFRoZSBkZXNpcmVkIHByZWNpc2lvbi5cbiAqIEByZXR1cm4ge3N0cmluZ30ge0Bjb2RlIG51bX0gYXMgYSBzdHJpbmcgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAqL1xuZ29vZy5zdHJpbmcucGFkTnVtYmVyID0gZnVuY3Rpb24obnVtLCBsZW5ndGgsIG9wdF9wcmVjaXNpb24pIHtcbiAgdmFyIHMgPSBnb29nLmlzRGVmKG9wdF9wcmVjaXNpb24pID8gbnVtLnRvRml4ZWQob3B0X3ByZWNpc2lvbikgOiBTdHJpbmcobnVtKTtcbiAgdmFyIGluZGV4ID0gcy5pbmRleE9mKCcuJyk7XG4gIGlmIChpbmRleCA9PSAtMSkge1xuICAgIGluZGV4ID0gcy5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIGdvb2cuc3RyaW5nLnJlcGVhdCgnMCcsIE1hdGgubWF4KDAsIGxlbmd0aCAtIGluZGV4KSkgKyBzO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIG9iamVjdCwgd2l0aFxuICogbnVsbCBhbmQgdW5kZWZpbmVkIGJlaW5nIHJldHVybmVkIGFzIHRoZSBlbXB0eSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHsqfSBvYmogVGhlIG9iamVjdCB0byBjb252ZXJ0LlxuICogQHJldHVybiB7c3RyaW5nfSBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUge0Bjb2RlIG9ian0uXG4gKi9cbmdvb2cuc3RyaW5nLm1ha2VTYWZlID0gZnVuY3Rpb24ob2JqKSB7XG4gIHJldHVybiBvYmogPT0gbnVsbCA/ICcnIDogU3RyaW5nKG9iaik7XG59O1xuXG5cbi8qKlxuICogQ29uY2F0ZW5hdGVzIHN0cmluZyBleHByZXNzaW9ucy4gVGhpcyBpcyB1c2VmdWxcbiAqIHNpbmNlIHNvbWUgYnJvd3NlcnMgYXJlIHZlcnkgaW5lZmZpY2llbnQgd2hlbiBpdCBjb21lcyB0byB1c2luZyBwbHVzIHRvXG4gKiBjb25jYXQgc3RyaW5ncy4gQmUgY2FyZWZ1bCB3aGVuIHVzaW5nIG51bGwgYW5kIHVuZGVmaW5lZCBoZXJlIHNpbmNlXG4gKiB0aGVzZSB3aWxsIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0LiBJZiB5b3UgbmVlZCB0byByZXByZXNlbnQgdGhlc2VcbiAqIGJlIHN1cmUgdG8gY2FzdCB0aGUgYXJndW1lbnQgdG8gYSBTdHJpbmcgZmlyc3QuXG4gKiBGb3IgZXhhbXBsZTpcbiAqIDxwcmU+YnVpbGRTdHJpbmcoJ2EnLCAnYicsICdjJywgJ2QnKSAtPiAnYWJjZCdcbiAqIGJ1aWxkU3RyaW5nKG51bGwsIHVuZGVmaW5lZCkgLT4gJydcbiAqIDwvcHJlPlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBBIGxpc3Qgb2Ygc3RyaW5ncyB0byBjb25jYXRlbmF0ZS4gSWYgbm90IGEgc3RyaW5nLFxuICogICAgIGl0IHdpbGwgYmUgY2FzdGVkIHRvIG9uZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNvbmNhdGVuYXRpb24gb2Yge0Bjb2RlIHZhcl9hcmdzfS5cbiAqL1xuZ29vZy5zdHJpbmcuYnVpbGRTdHJpbmcgPSBmdW5jdGlvbih2YXJfYXJncykge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmpvaW4uY2FsbChhcmd1bWVudHMsICcnKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHdpdGggYXQgbGVhc3QgNjQtYml0cyBvZiByYW5kb21uZXNzLlxuICpcbiAqIERvZXNuJ3QgdHJ1c3QgSmF2YXNjcmlwdCdzIHJhbmRvbSBmdW5jdGlvbiBlbnRpcmVseS4gVXNlcyBhIGNvbWJpbmF0aW9uIG9mXG4gKiByYW5kb20gYW5kIGN1cnJlbnQgdGltZXN0YW1wLCBhbmQgdGhlbiBlbmNvZGVzIHRoZSBzdHJpbmcgaW4gYmFzZS0zNiB0b1xuICogbWFrZSBpdCBzaG9ydGVyLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gQSByYW5kb20gc3RyaW5nLCBlLmcuIHNuMXM3dmI0Z2NpYy5cbiAqL1xuZ29vZy5zdHJpbmcuZ2V0UmFuZG9tU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gMjE0NzQ4MzY0ODtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHgpLnRvU3RyaW5nKDM2KSArXG4gICAgICAgICBNYXRoLmFicyhNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB4KSBeIGdvb2cubm93KCkpLnRvU3RyaW5nKDM2KTtcbn07XG5cblxuLyoqXG4gKiBDb21wYXJlcyB0d28gdmVyc2lvbiBudW1iZXJzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdmVyc2lvbjEgVmVyc2lvbiBvZiBmaXJzdCBpdGVtLlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2ZXJzaW9uMiBWZXJzaW9uIG9mIHNlY29uZCBpdGVtLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gIDEgaWYge0Bjb2RlIHZlcnNpb24xfSBpcyBoaWdoZXIuXG4gKiAgICAgICAgICAgICAgICAgICAwIGlmIGFyZ3VtZW50cyBhcmUgZXF1YWwuXG4gKiAgICAgICAgICAgICAgICAgIC0xIGlmIHtAY29kZSB2ZXJzaW9uMn0gaXMgaGlnaGVyLlxuICovXG5nb29nLnN0cmluZy5jb21wYXJlVmVyc2lvbnMgPSBmdW5jdGlvbih2ZXJzaW9uMSwgdmVyc2lvbjIpIHtcbiAgdmFyIG9yZGVyID0gMDtcbiAgLy8gVHJpbSBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIGFuZCBzcGxpdCB0aGUgdmVyc2lvbnMgaW50b1xuICAvLyBzdWJ2ZXJzaW9ucy5cbiAgdmFyIHYxU3VicyA9IGdvb2cuc3RyaW5nLnRyaW0oU3RyaW5nKHZlcnNpb24xKSkuc3BsaXQoJy4nKTtcbiAgdmFyIHYyU3VicyA9IGdvb2cuc3RyaW5nLnRyaW0oU3RyaW5nKHZlcnNpb24yKSkuc3BsaXQoJy4nKTtcbiAgdmFyIHN1YkNvdW50ID0gTWF0aC5tYXgodjFTdWJzLmxlbmd0aCwgdjJTdWJzLmxlbmd0aCk7XG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBzdWJ2ZXJzaW9ucywgYXMgbG9uZyBhcyB0aGV5IGFwcGVhciB0byBiZSBlcXVpdmFsZW50LlxuICBmb3IgKHZhciBzdWJJZHggPSAwOyBvcmRlciA9PSAwICYmIHN1YklkeCA8IHN1YkNvdW50OyBzdWJJZHgrKykge1xuICAgIHZhciB2MVN1YiA9IHYxU3Vic1tzdWJJZHhdIHx8ICcnO1xuICAgIHZhciB2MlN1YiA9IHYyU3Vic1tzdWJJZHhdIHx8ICcnO1xuXG4gICAgLy8gU3BsaXQgdGhlIHN1YnZlcnNpb25zIGludG8gcGFpcnMgb2YgbnVtYmVycyBhbmQgcXVhbGlmaWVycyAobGlrZSAnYicpLlxuICAgIC8vIFR3byBkaWZmZXJlbnQgUmVnRXhwIG9iamVjdHMgYXJlIG5lZWRlZCBiZWNhdXNlIHRoZXkgYXJlIGJvdGggdXNpbmdcbiAgICAvLyB0aGUgJ2cnIGZsYWcuXG4gICAgdmFyIHYxQ29tcFBhcnNlciA9IG5ldyBSZWdFeHAoJyhcXFxcZCopKFxcXFxEKiknLCAnZycpO1xuICAgIHZhciB2MkNvbXBQYXJzZXIgPSBuZXcgUmVnRXhwKCcoXFxcXGQqKShcXFxcRCopJywgJ2cnKTtcbiAgICBkbyB7XG4gICAgICB2YXIgdjFDb21wID0gdjFDb21wUGFyc2VyLmV4ZWModjFTdWIpIHx8IFsnJywgJycsICcnXTtcbiAgICAgIHZhciB2MkNvbXAgPSB2MkNvbXBQYXJzZXIuZXhlYyh2MlN1YikgfHwgWycnLCAnJywgJyddO1xuICAgICAgLy8gQnJlYWsgaWYgdGhlcmUgYXJlIG5vIG1vcmUgbWF0Y2hlcy5cbiAgICAgIGlmICh2MUNvbXBbMF0ubGVuZ3RoID09IDAgJiYgdjJDb21wWzBdLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBQYXJzZSB0aGUgbnVtZXJpYyBwYXJ0IG9mIHRoZSBzdWJ2ZXJzaW9uLiBBIG1pc3NpbmcgbnVtYmVyIGlzXG4gICAgICAvLyBlcXVpdmFsZW50IHRvIDAuXG4gICAgICB2YXIgdjFDb21wTnVtID0gdjFDb21wWzFdLmxlbmd0aCA9PSAwID8gMCA6IHBhcnNlSW50KHYxQ29tcFsxXSwgMTApO1xuICAgICAgdmFyIHYyQ29tcE51bSA9IHYyQ29tcFsxXS5sZW5ndGggPT0gMCA/IDAgOiBwYXJzZUludCh2MkNvbXBbMV0sIDEwKTtcblxuICAgICAgLy8gQ29tcGFyZSB0aGUgc3VidmVyc2lvbiBjb21wb25lbnRzLiBUaGUgbnVtYmVyIGhhcyB0aGUgaGlnaGVzdFxuICAgICAgLy8gcHJlY2VkZW5jZS4gTmV4dCwgaWYgdGhlIG51bWJlcnMgYXJlIGVxdWFsLCBhIHN1YnZlcnNpb24gd2l0aG91dCBhbnlcbiAgICAgIC8vIHF1YWxpZmllciBpcyBhbHdheXMgaGlnaGVyIHRoYW4gYSBzdWJ2ZXJzaW9uIHdpdGggYW55IHF1YWxpZmllci4gTmV4dCxcbiAgICAgIC8vIHRoZSBxdWFsaWZpZXJzIGFyZSBjb21wYXJlZCBhcyBzdHJpbmdzLlxuICAgICAgb3JkZXIgPSBnb29nLnN0cmluZy5jb21wYXJlRWxlbWVudHNfKHYxQ29tcE51bSwgdjJDb21wTnVtKSB8fFxuICAgICAgICAgIGdvb2cuc3RyaW5nLmNvbXBhcmVFbGVtZW50c18odjFDb21wWzJdLmxlbmd0aCA9PSAwLFxuICAgICAgICAgICAgICB2MkNvbXBbMl0ubGVuZ3RoID09IDApIHx8XG4gICAgICAgICAgZ29vZy5zdHJpbmcuY29tcGFyZUVsZW1lbnRzXyh2MUNvbXBbMl0sIHYyQ29tcFsyXSk7XG4gICAgICAvLyBTdG9wIGFzIHNvb24gYXMgYW4gaW5lcXVhbGl0eSBpcyBkaXNjb3ZlcmVkLlxuICAgIH0gd2hpbGUgKG9yZGVyID09IDApO1xuICB9XG5cbiAgcmV0dXJuIG9yZGVyO1xufTtcblxuXG4vKipcbiAqIENvbXBhcmVzIGVsZW1lbnRzIG9mIGEgdmVyc2lvbiBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfGJvb2xlYW59IGxlZnQgQW4gZWxlbWVudCBmcm9tIGEgdmVyc2lvbiBudW1iZXIuXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8Ym9vbGVhbn0gcmlnaHQgQW4gZWxlbWVudCBmcm9tIGEgdmVyc2lvbiBudW1iZXIuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfSAgMSBpZiB7QGNvZGUgbGVmdH0gaXMgaGlnaGVyLlxuICogICAgICAgICAgICAgICAgICAgMCBpZiBhcmd1bWVudHMgYXJlIGVxdWFsLlxuICogICAgICAgICAgICAgICAgICAtMSBpZiB7QGNvZGUgcmlnaHR9IGlzIGhpZ2hlci5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3RyaW5nLmNvbXBhcmVFbGVtZW50c18gPSBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICBpZiAobGVmdCA8IHJpZ2h0KSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKGxlZnQgPiByaWdodCkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuXG4vKipcbiAqIFN0cmluZyBoYXNoIGZ1bmN0aW9uIHNpbWlsYXIgdG8gamF2YS5sYW5nLlN0cmluZy5oYXNoQ29kZSgpLlxuICogVGhlIGhhc2ggY29kZSBmb3IgYSBzdHJpbmcgaXMgY29tcHV0ZWQgYXNcbiAqIHNbMF0gKiAzMSBeIChuIC0gMSkgKyBzWzFdICogMzEgXiAobiAtIDIpICsgLi4uICsgc1tuIC0gMV0sXG4gKiB3aGVyZSBzW2ldIGlzIHRoZSBpdGggY2hhcmFjdGVyIG9mIHRoZSBzdHJpbmcgYW5kIG4gaXMgdGhlIGxlbmd0aCBvZlxuICogdGhlIHN0cmluZy4gV2UgbW9kIHRoZSByZXN1bHQgdG8gbWFrZSBpdCBiZXR3ZWVuIDAgKGluY2x1c2l2ZSkgYW5kIDJeMzJcbiAqIChleGNsdXNpdmUpLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBBIHN0cmluZy5cbiAqIEByZXR1cm4ge251bWJlcn0gSGFzaCB2YWx1ZSBmb3Ige0Bjb2RlIHN0cn0sIGJldHdlZW4gMCAoaW5jbHVzaXZlKSBhbmQgMl4zMlxuICogIChleGNsdXNpdmUpLiBUaGUgZW1wdHkgc3RyaW5nIHJldHVybnMgMC5cbiAqL1xuZ29vZy5zdHJpbmcuaGFzaENvZGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgdmFyIHJlc3VsdCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9ybWFsaXplIHRvIDQgYnl0ZSByYW5nZSwgMCAuLi4gMl4zMi5cbiAgICByZXN1bHQgPSAoMzEgKiByZXN1bHQgKyBzdHIuY2hhckNvZGVBdChpKSkgPj4+IDA7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqXG4gKiBUaGUgbW9zdCByZWNlbnQgdW5pcXVlIElELiB8MCBpcyBlcXVpdmFsZW50IHRvIE1hdGguZmxvb3IgaW4gdGhpcyBjYXNlLlxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3RyaW5nLnVuaXF1ZVN0cmluZ0NvdW50ZXJfID0gTWF0aC5yYW5kb20oKSAqIDB4ODAwMDAwMDAgfCAwO1xuXG5cbi8qKlxuICogR2VuZXJhdGVzIGFuZCByZXR1cm5zIGEgc3RyaW5nIHdoaWNoIGlzIHVuaXF1ZSBpbiB0aGUgY3VycmVudCBkb2N1bWVudC5cbiAqIFRoaXMgaXMgdXNlZnVsLCBmb3IgZXhhbXBsZSwgdG8gY3JlYXRlIHVuaXF1ZSBJRHMgZm9yIERPTSBlbGVtZW50cy5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSB1bmlxdWUgaWQuXG4gKi9cbmdvb2cuc3RyaW5nLmNyZWF0ZVVuaXF1ZVN0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJ2dvb2dfJyArIGdvb2cuc3RyaW5nLnVuaXF1ZVN0cmluZ0NvdW50ZXJfKys7XG59O1xuXG5cbi8qKlxuICogQ29udmVydHMgdGhlIHN1cHBsaWVkIHN0cmluZyB0byBhIG51bWJlciwgd2hpY2ggbWF5IGJlIEluZmluaXR5IG9yIE5hTi5cbiAqIFRoaXMgZnVuY3Rpb24gc3RyaXBzIHdoaXRlc3BhY2U6ICh0b051bWJlcignIDEyMycpID09PSAxMjMpXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgc2NpZW50aWZpYyBub3RhdGlvbjogKHRvTnVtYmVyKCcxZTEnKSA9PT0gMTApXG4gKlxuICogVGhpcyBpcyBiZXR0ZXIgdGhhbiBKYXZhc2NyaXB0J3MgYnVpbHQtaW4gY29udmVyc2lvbnMgYmVjYXVzZSwgc2FkbHk6XG4gKiAgICAgKE51bWJlcignICcpID09PSAwKSBhbmQgKHBhcnNlRmxvYXQoJzEyM2EnKSA9PT0gMTIzKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIHRoZSBzdXBwbGllZCBzdHJpbmcgcmVwcmVzZW50cywgb3IgTmFOLlxuICovXG5nb29nLnN0cmluZy50b051bWJlciA9IGZ1bmN0aW9uKHN0cikge1xuICB2YXIgbnVtID0gTnVtYmVyKHN0cik7XG4gIGlmIChudW0gPT0gMCAmJiBnb29nLnN0cmluZy5pc0VtcHR5T3JXaGl0ZXNwYWNlKHN0cikpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIHJldHVybiBudW07XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBzdHJpbmcgaXMgbG93ZXIgY2FtZWwgY2FzZSAoZS5nLiBcImlzRm9vQmFyXCIpLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIGFzc3VtZXMgdGhlIHN0cmluZyBpcyBlbnRpcmVseSBsZXR0ZXJzLlxuICogQHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSNWYXJpYXRpb25zX2FuZF9zeW5vbnltc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBzdHJpbmcgaXMgbG93ZXIgY2FtZWwgY2FzZS5cbiAqL1xuZ29vZy5zdHJpbmcuaXNMb3dlckNhbWVsQ2FzZSA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gL15bYS16XSsoW0EtWl1bYS16XSopKiQvLnRlc3Qoc3RyKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIHN0cmluZyBpcyB1cHBlciBjYW1lbCBjYXNlIChlLmcuIFwiRm9vQmFyQmF6XCIpLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIGFzc3VtZXMgdGhlIHN0cmluZyBpcyBlbnRpcmVseSBsZXR0ZXJzLlxuICogQHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSNWYXJpYXRpb25zX2FuZF9zeW5vbnltc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBzdHJpbmcgaXMgdXBwZXIgY2FtZWwgY2FzZS5cbiAqL1xuZ29vZy5zdHJpbmcuaXNVcHBlckNhbWVsQ2FzZSA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gL14oW0EtWl1bYS16XSopKyQvLnRlc3Qoc3RyKTtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBmcm9tIHNlbGVjdG9yLWNhc2UgdG8gY2FtZWxDYXNlIChlLmcuIGZyb21cbiAqIFwibXVsdGktcGFydC1zdHJpbmdcIiB0byBcIm11bHRpUGFydFN0cmluZ1wiKSwgdXNlZnVsIGZvciBjb252ZXJ0aW5nXG4gKiBDU1Mgc2VsZWN0b3JzIGFuZCBIVE1MIGRhdGFzZXQga2V5cyB0byB0aGVpciBlcXVpdmFsZW50IEpTIHByb3BlcnRpZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgaW4gc2VsZWN0b3ItY2FzZSBmb3JtLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3RyaW5nIGluIGNhbWVsQ2FzZSBmb3JtLlxuICovXG5nb29nLnN0cmluZy50b0NhbWVsQ2FzZSA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZSgvXFwtKFthLXpdKS9nLCBmdW5jdGlvbihhbGwsIG1hdGNoKSB7XG4gICAgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGZyb20gY2FtZWxDYXNlIHRvIHNlbGVjdG9yLWNhc2UgKGUuZy4gZnJvbVxuICogXCJtdWx0aVBhcnRTdHJpbmdcIiB0byBcIm11bHRpLXBhcnQtc3RyaW5nXCIpLCB1c2VmdWwgZm9yIGNvbnZlcnRpbmcgSlNcbiAqIHN0eWxlIGFuZCBkYXRhc2V0IHByb3BlcnRpZXMgdG8gZXF1aXZhbGVudCBDU1Mgc2VsZWN0b3JzIGFuZCBIVE1MIGtleXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgaW4gY2FtZWxDYXNlIGZvcm0uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmcgaW4gc2VsZWN0b3ItY2FzZSBmb3JtLlxuICovXG5nb29nLnN0cmluZy50b1NlbGVjdG9yQ2FzZSA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZSgvKFtBLVpdKS9nLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBpbnRvIFRpdGxlQ2FzZS4gRmlyc3QgY2hhcmFjdGVyIG9mIHRoZSBzdHJpbmcgaXMgYWx3YXlzXG4gKiBjYXBpdGFsaXplZCBpbiBhZGRpdGlvbiB0byB0aGUgZmlyc3QgbGV0dGVyIG9mIGV2ZXJ5IHN1YnNlcXVlbnQgd29yZC5cbiAqIFdvcmRzIGFyZSBkZWxpbWl0ZWQgYnkgb25lIG9yIG1vcmUgd2hpdGVzcGFjZXMgYnkgZGVmYXVsdC4gQ3VzdG9tIGRlbGltaXRlcnNcbiAqIGNhbiBvcHRpb25hbGx5IGJlIHNwZWNpZmllZCB0byByZXBsYWNlIHRoZSBkZWZhdWx0LCB3aGljaCBkb2Vzbid0IHByZXNlcnZlXG4gKiB3aGl0ZXNwYWNlIGRlbGltaXRlcnMgYW5kIGluc3RlYWQgbXVzdCBiZSBleHBsaWNpdGx5IGluY2x1ZGVkIGlmIG5lZWRlZC5cbiAqXG4gKiBEZWZhdWx0IGRlbGltaXRlciA9PiBcIiBcIjpcbiAqICAgIGdvb2cuc3RyaW5nLnRvVGl0bGVDYXNlKCdvbmVUd29UaHJlZScpICAgID0+ICdPbmVUd29UaHJlZSdcbiAqICAgIGdvb2cuc3RyaW5nLnRvVGl0bGVDYXNlKCdvbmUgdHdvIHRocmVlJykgID0+ICdPbmUgVHdvIFRocmVlJ1xuICogICAgZ29vZy5zdHJpbmcudG9UaXRsZUNhc2UoJyAgb25lICAgdHdvICAgJykgPT4gJyAgT25lICAgVHdvICAgJ1xuICogICAgZ29vZy5zdHJpbmcudG9UaXRsZUNhc2UoJ29uZV90d29fdGhyZWUnKSAgPT4gJ09uZV90d29fdGhyZWUnXG4gKiAgICBnb29nLnN0cmluZy50b1RpdGxlQ2FzZSgnb25lLXR3by10aHJlZScpICA9PiAnT25lLXR3by10aHJlZSdcbiAqXG4gKiBDdXN0b20gZGVsaW1pdGVyID0+IFwiXy0uXCI6XG4gKiAgICBnb29nLnN0cmluZy50b1RpdGxlQ2FzZSgnb25lVHdvVGhyZWUnLCAnXy0uJykgICAgICAgPT4gJ09uZVR3b1RocmVlJ1xuICogICAgZ29vZy5zdHJpbmcudG9UaXRsZUNhc2UoJ29uZSB0d28gdGhyZWUnLCAnXy0uJykgICAgID0+ICdPbmUgdHdvIHRocmVlJ1xuICogICAgZ29vZy5zdHJpbmcudG9UaXRsZUNhc2UoJyAgb25lICAgdHdvICAgJywgJ18tLicpICAgID0+ICcgIG9uZSAgIHR3byAgICdcbiAqICAgIGdvb2cuc3RyaW5nLnRvVGl0bGVDYXNlKCdvbmVfdHdvX3RocmVlJywgJ18tLicpICAgICA9PiAnT25lX1R3b19UaHJlZSdcbiAqICAgIGdvb2cuc3RyaW5nLnRvVGl0bGVDYXNlKCdvbmUtdHdvLXRocmVlJywgJ18tLicpICAgICA9PiAnT25lLVR3by1UaHJlZSdcbiAqICAgIGdvb2cuc3RyaW5nLnRvVGl0bGVDYXNlKCdvbmUuLi50d28uLi50aHJlZScsICdfLS4nKSA9PiAnT25lLi4uVHdvLi4uVGhyZWUnXG4gKiAgICBnb29nLnN0cmluZy50b1RpdGxlQ2FzZSgnb25lLiB0d28uIHRocmVlJywgJ18tLicpICAgPT4gJ09uZS4gdHdvLiB0aHJlZSdcbiAqICAgIGdvb2cuc3RyaW5nLnRvVGl0bGVDYXNlKCdvbmUtdHdvLnRocmVlJywgJ18tLicpICAgICA9PiAnT25lLVR3by5UaHJlZSdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB2YWx1ZSBpbiBjYW1lbENhc2UgZm9ybS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X2RlbGltaXRlcnMgQ3VzdG9tIGRlbGltaXRlciBjaGFyYWN0ZXIgc2V0IHVzZWQgdG9cbiAqICAgICAgZGlzdGluZ3Vpc2ggd29yZHMgaW4gdGhlIHN0cmluZyB2YWx1ZS4gRWFjaCBjaGFyYWN0ZXIgcmVwcmVzZW50cyBhXG4gKiAgICAgIHNpbmdsZSBkZWxpbWl0ZXIuIFdoZW4gcHJvdmlkZWQsIGRlZmF1bHQgd2hpdGVzcGFjZSBkZWxpbWl0ZXIgaXNcbiAqICAgICAgb3ZlcnJpZGRlbiBhbmQgbXVzdCBiZSBleHBsaWNpdGx5IGluY2x1ZGVkIGlmIG5lZWRlZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gU3RyaW5nIHZhbHVlIGluIFRpdGxlQ2FzZSBmb3JtLlxuICovXG5nb29nLnN0cmluZy50b1RpdGxlQ2FzZSA9IGZ1bmN0aW9uKHN0ciwgb3B0X2RlbGltaXRlcnMpIHtcbiAgdmFyIGRlbGltaXRlcnMgPSBnb29nLmlzU3RyaW5nKG9wdF9kZWxpbWl0ZXJzKSA/XG4gICAgICBnb29nLnN0cmluZy5yZWdFeHBFc2NhcGUob3B0X2RlbGltaXRlcnMpIDogJ1xcXFxzJztcblxuICAvLyBGb3IgSUU4LCB3ZSBuZWVkIHRvIHByZXZlbnQgdXNpbmcgYW4gZW1wdHkgY2hhcmFjdGVyIHNldC4gT3RoZXJ3aXNlLFxuICAvLyBpbmNvcnJlY3QgbWF0Y2hpbmcgd2lsbCBvY2N1ci5cbiAgZGVsaW1pdGVycyA9IGRlbGltaXRlcnMgPyAnfFsnICsgZGVsaW1pdGVycyArICddKycgOiAnJztcblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKF4nICsgZGVsaW1pdGVycyArICcpKFthLXpdKScsICdnJyk7XG4gIHJldHVybiBzdHIucmVwbGFjZShyZWdleHAsIGZ1bmN0aW9uKGFsbCwgcDEsIHAyKSB7XG4gICAgcmV0dXJuIHAxICsgcDIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogQ2FwaXRhbGl6ZXMgYSBzdHJpbmcsIGkuZS4gY29udmVydHMgdGhlIGZpcnN0IGxldHRlciB0byB1cHBlcmNhc2VcbiAqIGFuZCBhbGwgb3RoZXIgbGV0dGVycyB0byBsb3dlcmNhc2UsIGUuZy46XG4gKlxuICogZ29vZy5zdHJpbmcuY2FwaXRhbGl6ZSgnb25lJykgICAgID0+ICdPbmUnXG4gKiBnb29nLnN0cmluZy5jYXBpdGFsaXplKCdPTkUnKSAgICAgPT4gJ09uZSdcbiAqIGdvb2cuc3RyaW5nLmNhcGl0YWxpemUoJ29uZSB0d28nKSA9PiAnT25lIHR3bydcbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB0cmltIGluaXRpYWwgd2hpdGVzcGFjZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB2YWx1ZSB0byBjYXBpdGFsaXplLlxuICogQHJldHVybiB7c3RyaW5nfSBTdHJpbmcgdmFsdWUgd2l0aCBmaXJzdCBsZXR0ZXIgaW4gdXBwZXJjYXNlLlxuICovXG5nb29nLnN0cmluZy5jYXBpdGFsaXplID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyLmNoYXJBdCgwKSkudG9VcHBlckNhc2UoKSArXG4gICAgICBTdHJpbmcoc3RyLnN1YnN0cigxKSkudG9Mb3dlckNhc2UoKTtcbn07XG5cblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBpbiBkZWNpbWFsIG9yIGhleGlkZWNpbWFsICgnMHhGRkZGJykgZm9ybS5cbiAqXG4gKiBUbyBwYXJzZSBhIHBhcnRpY3VsYXIgcmFkaXgsIHBsZWFzZSB1c2UgcGFyc2VJbnQoc3RyaW5nLCByYWRpeCkgZGlyZWN0bHkuIFNlZVxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvcGFyc2VJbnRcbiAqXG4gKiBUaGlzIGlzIGEgd3JhcHBlciBmb3IgdGhlIGJ1aWx0LWluIHBhcnNlSW50IGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IHBhcnNlXG4gKiBudW1iZXJzIGFzIGJhc2UgMTAgb3IgYmFzZSAxNi4gIFNvbWUgSlMgaW1wbGVtZW50YXRpb25zIGFzc3VtZSBzdHJpbmdzXG4gKiBzdGFydGluZyB3aXRoIFwiMFwiIGFyZSBpbnRlbmRlZCB0byBiZSBvY3RhbC4gRVMzIGFsbG93ZWQgYnV0IGRpc2NvdXJhZ2VkXG4gKiB0aGlzIGJlaGF2aW9yLiBFUzUgZm9yYmlkcyBpdC4gIFRoaXMgZnVuY3Rpb24gZW11bGF0ZXMgdGhlIEVTNSBiZWhhdmlvci5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIE1vemlsbGEgSlMgUmVmZXJlbmNlOiBodHRwOi8vZ29vLmdsLzhSaUZqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfG51bGx8dW5kZWZpbmVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgcGFyc2VkLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyLCBwYXJzZWQuIElmIHRoZSBzdHJpbmcgZmFpbGVkIHRvIHBhcnNlLCB0aGlzXG4gKiAgICAgd2lsbCBiZSBOYU4uXG4gKi9cbmdvb2cuc3RyaW5nLnBhcnNlSW50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgLy8gRm9yY2UgZmluaXRlIG51bWJlcnMgdG8gc3RyaW5ncy5cbiAgaWYgKGlzRmluaXRlKHZhbHVlKSkge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChnb29nLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgIC8vIElmIHRoZSBzdHJpbmcgc3RhcnRzIHdpdGggJzB4JyBvciAnLTB4JywgcGFyc2UgYXMgaGV4LlxuICAgIHJldHVybiAvXlxccyotPzB4L2kudGVzdCh2YWx1ZSkgP1xuICAgICAgICBwYXJzZUludCh2YWx1ZSwgMTYpIDogcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgfVxuXG4gIHJldHVybiBOYU47XG59O1xuXG5cbi8qKlxuICogU3BsaXRzIGEgc3RyaW5nIG9uIGEgc2VwYXJhdG9yIGEgbGltaXRlZCBudW1iZXIgb2YgdGltZXMuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBtb3JlIHNpbWlsYXIgdG8gUHl0aG9uIG9yIEphdmEsIHdoZXJlIHRoZSBsaW1pdFxuICogcGFyYW1ldGVyIHNwZWNpZmllcyB0aGUgbWF4aW11bSBudW1iZXIgb2Ygc3BsaXRzIHJhdGhlciB0aGFuIHRydW5jYXRpbmdcbiAqIHRoZSBudW1iZXIgb2YgcmVzdWx0cy5cbiAqXG4gKiBTZWUgaHR0cDovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvc3RkdHlwZXMuaHRtbCNzdHIuc3BsaXRcbiAqIFNlZSBKYXZhRG9jOiBodHRwOi8vZ29vLmdsL0YyQXNZXG4gKiBTZWUgTW96aWxsYSByZWZlcmVuY2U6IGh0dHA6Ly9nb28uZ2wvZFpkWnNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBzcGxpdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbGltaXQgdG8gdGhlIG51bWJlciBvZiBzcGxpdHMuIFRoZSByZXN1bHRpbmcgYXJyYXlcbiAqICAgICB3aWxsIGhhdmUgYSBtYXhpbXVtIGxlbmd0aCBvZiBsaW1pdCsxLiAgTmVnYXRpdmUgbnVtYmVycyBhcmUgdGhlIHNhbWVcbiAqICAgICBhcyB6ZXJvLlxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59IFRoZSBzdHJpbmcsIHNwbGl0LlxuICovXG5cbmdvb2cuc3RyaW5nLnNwbGl0TGltaXQgPSBmdW5jdGlvbihzdHIsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KHNlcGFyYXRvcik7XG4gIHZhciByZXR1cm5WYWwgPSBbXTtcblxuICAvLyBPbmx5IGNvbnRpbnVlIGRvaW5nIHRoaXMgd2hpbGUgd2UgaGF2ZW4ndCBoaXQgdGhlIGxpbWl0IGFuZCB3ZSBoYXZlXG4gIC8vIHBhcnRzIGxlZnQuXG4gIHdoaWxlIChsaW1pdCA+IDAgJiYgcGFydHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuVmFsLnB1c2gocGFydHMuc2hpZnQoKSk7XG4gICAgbGltaXQtLTtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIGFyZSByZW1haW5pbmcgcGFydHMsIGFwcGVuZCB0aGVtIHRvIHRoZSBlbmQuXG4gIGlmIChwYXJ0cy5sZW5ndGgpIHtcbiAgICByZXR1cm5WYWwucHVzaChwYXJ0cy5qb2luKHNlcGFyYXRvcikpO1xuICB9XG5cbiAgcmV0dXJuIHJldHVyblZhbDtcbn07XG5cblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgTGV2ZW5zaHRlaW4gZWRpdCBkaXN0YW5jZSBiZXR3ZWVuIHR3byBzdHJpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd9IGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBiXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBlZGl0IGRpc3RhbmNlIGJldHdlZW4gdGhlIHR3byBzdHJpbmdzLlxuICovXG5nb29nLnN0cmluZy5lZGl0RGlzdGFuY2UgPSBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB2MCA9IFtdO1xuICB2YXIgdjEgPSBbXTtcblxuICBpZiAoYSA9PSBiKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoIWEubGVuZ3RoIHx8ICFiLmxlbmd0aCkge1xuICAgIHJldHVybiBNYXRoLm1heChhLmxlbmd0aCwgYi5sZW5ndGgpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aCArIDE7IGkrKykge1xuICAgIHYwW2ldID0gaTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIHYxWzBdID0gaSArIDE7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGIubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBjb3N0ID0gYVtpXSAhPSBiW2pdO1xuICAgICAgLy8gQ29zdCBmb3IgdGhlIHN1YnN0cmluZyBpcyB0aGUgbWluaW11bSBvZiBhZGRpbmcgb25lIGNoYXJhY3RlciwgcmVtb3ZpbmdcbiAgICAgIC8vIG9uZSBjaGFyYWN0ZXIsIG9yIGEgc3dhcC5cbiAgICAgIHYxW2ogKyAxXSA9IE1hdGgubWluKHYxW2pdICsgMSwgdjBbaiArIDFdICsgMSwgdjBbal0gKyBjb3N0KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHYwLmxlbmd0aDsgaisrKSB7XG4gICAgICB2MFtqXSA9IHYxW2pdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2MVtiLmxlbmd0aF07XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMDggVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBVdGlsaXRpZXMgdG8gY2hlY2sgdGhlIHByZWNvbmRpdGlvbnMsIHBvc3Rjb25kaXRpb25zIGFuZFxuICogaW52YXJpYW50cyBydW50aW1lLlxuICpcbiAqIE1ldGhvZHMgaW4gdGhpcyBwYWNrYWdlIHNob3VsZCBiZSBnaXZlbiBzcGVjaWFsIHRyZWF0bWVudCBieSB0aGUgY29tcGlsZXJcbiAqIGZvciB0eXBlLWluZmVyZW5jZS4gRm9yIGV4YW1wbGUsIDxjb2RlPmdvb2cuYXNzZXJ0cy5hc3NlcnQoZm9vKTwvY29kZT5cbiAqIHdpbGwgcmVzdHJpY3QgPGNvZGU+Zm9vPC9jb2RlPiB0byBhIHRydXRoeSB2YWx1ZS5cbiAqXG4gKiBUaGUgY29tcGlsZXIgaGFzIGFuIG9wdGlvbiB0byBkaXNhYmxlIGFzc2VydHMuIFNvIGNvZGUgbGlrZTpcbiAqIDxjb2RlPlxuICogdmFyIHggPSBnb29nLmFzc2VydHMuYXNzZXJ0KGZvbygpKTsgZ29vZy5hc3NlcnRzLmFzc2VydChiYXIoKSk7XG4gKiA8L2NvZGU+XG4gKiB3aWxsIGJlIHRyYW5zZm9ybWVkIGludG86XG4gKiA8Y29kZT5cbiAqIHZhciB4ID0gZm9vKCk7XG4gKiA8L2NvZGU+XG4gKiBUaGUgY29tcGlsZXIgd2lsbCBsZWF2ZSBpbiBmb28oKSAoYmVjYXVzZSBpdHMgcmV0dXJuIHZhbHVlIGlzIHVzZWQpLFxuICogYnV0IGl0IHdpbGwgcmVtb3ZlIGJhcigpIGJlY2F1c2UgaXQgYXNzdW1lcyBpdCBkb2VzIG5vdCBoYXZlIHNpZGUtZWZmZWN0cy5cbiAqXG4gKiBAYXV0aG9yIGFncmlldmVAZ29vZ2xlLmNvbSAoQW5kcmV3IEdyaWV2ZSlcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5wcm92aWRlKCdnb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3InKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLmRlYnVnLkVycm9yJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZG9tLk5vZGVUeXBlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuc3RyaW5nJyk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRvIHN0cmlwIG91dCBhc3NlcnRzIG9yIHRvIGxlYXZlIHRoZW0gaW4uXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMnLCBnb29nLkRFQlVHKTtcblxuXG5cbi8qKlxuICogRXJyb3Igb2JqZWN0IGZvciBmYWlsZWQgYXNzZXJ0aW9ucy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlUGF0dGVybiBUaGUgcGF0dGVybiB0aGF0IHdhcyB1c2VkIHRvIGZvcm0gbWVzc2FnZS5cbiAqIEBwYXJhbSB7IUFycmF5PCo+fSBtZXNzYWdlQXJncyBUaGUgaXRlbXMgdG8gc3Vic3RpdHV0ZSBpbnRvIHRoZSBwYXR0ZXJuLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7Z29vZy5kZWJ1Zy5FcnJvcn1cbiAqIEBmaW5hbFxuICovXG5nb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbihtZXNzYWdlUGF0dGVybiwgbWVzc2FnZUFyZ3MpIHtcbiAgbWVzc2FnZUFyZ3MudW5zaGlmdChtZXNzYWdlUGF0dGVybik7XG4gIGdvb2cuZGVidWcuRXJyb3IuY2FsbCh0aGlzLCBnb29nLnN0cmluZy5zdWJzLmFwcGx5KG51bGwsIG1lc3NhZ2VBcmdzKSk7XG4gIC8vIFJlbW92ZSB0aGUgbWVzc2FnZVBhdHRlcm4gYWZ0ZXJ3YXJkcyB0byBhdm9pZCBwZXJtYW5lbnRseSBtb2RpZnlpbmcgdGhlXG4gIC8vIHBhc3NlZCBpbiBhcnJheS5cbiAgbWVzc2FnZUFyZ3Muc2hpZnQoKTtcblxuICAvKipcbiAgICogVGhlIG1lc3NhZ2UgcGF0dGVybiB1c2VkIHRvIGZvcm1hdCB0aGUgZXJyb3IgbWVzc2FnZS4gRXJyb3IgaGFuZGxlcnMgY2FuXG4gICAqIHVzZSB0aGlzIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoZSBhc3NlcnRpb24uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLm1lc3NhZ2VQYXR0ZXJuID0gbWVzc2FnZVBhdHRlcm47XG59O1xuZ29vZy5pbmhlcml0cyhnb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3IsIGdvb2cuZGVidWcuRXJyb3IpO1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cuYXNzZXJ0cy5Bc3NlcnRpb25FcnJvci5wcm90b3R5cGUubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG5cblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBlcnJvciBoYW5kbGVyLlxuICogQHBhcmFtIHshZ29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yfSBlIFRoZSBleGNlcHRpb24gdG8gYmUgaGFuZGxlZC5cbiAqL1xuZ29vZy5hc3NlcnRzLkRFRkFVTFRfRVJST1JfSEFORExFUiA9IGZ1bmN0aW9uKGUpIHsgdGhyb3cgZTsgfTtcblxuXG4vKipcbiAqIFRoZSBoYW5kbGVyIHJlc3BvbnNpYmxlIGZvciB0aHJvd2luZyBvciBsb2dnaW5nIGFzc2VydGlvbiBlcnJvcnMuXG4gKiBAcHJpdmF0ZSB7ZnVuY3Rpb24oIWdvb2cuYXNzZXJ0cy5Bc3NlcnRpb25FcnJvcil9XG4gKi9cbmdvb2cuYXNzZXJ0cy5lcnJvckhhbmRsZXJfID0gZ29vZy5hc3NlcnRzLkRFRkFVTFRfRVJST1JfSEFORExFUjtcblxuXG4vKipcbiAqIFRocm93cyBhbiBleGNlcHRpb24gd2l0aCB0aGUgZ2l2ZW4gbWVzc2FnZSBhbmQgXCJBc3NlcnRpb24gZmFpbGVkXCIgcHJlZml4ZWRcbiAqIG9udG8gaXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVmYXVsdE1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gdXNlIGlmIGdpdmVuTWVzc2FnZSBpcyBlbXB0eS5cbiAqIEBwYXJhbSB7QXJyYXk8Kj59IGRlZmF1bHRBcmdzIFRoZSBzdWJzdGl0dXRpb24gYXJndW1lbnRzIGZvciBkZWZhdWx0TWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gZ2l2ZW5NZXNzYWdlIE1lc3NhZ2Ugc3VwcGxpZWQgYnkgdGhlIGNhbGxlci5cbiAqIEBwYXJhbSB7QXJyYXk8Kj59IGdpdmVuQXJncyBUaGUgc3Vic3RpdHV0aW9uIGFyZ3VtZW50cyBmb3IgZ2l2ZW5NZXNzYWdlLlxuICogQHRocm93cyB7Z29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yfSBXaGVuIHRoZSB2YWx1ZSBpcyBub3QgYSBudW1iZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmFzc2VydHMuZG9Bc3NlcnRGYWlsdXJlXyA9XG4gICAgZnVuY3Rpb24oZGVmYXVsdE1lc3NhZ2UsIGRlZmF1bHRBcmdzLCBnaXZlbk1lc3NhZ2UsIGdpdmVuQXJncykge1xuICB2YXIgbWVzc2FnZSA9ICdBc3NlcnRpb24gZmFpbGVkJztcbiAgaWYgKGdpdmVuTWVzc2FnZSkge1xuICAgIG1lc3NhZ2UgKz0gJzogJyArIGdpdmVuTWVzc2FnZTtcbiAgICB2YXIgYXJncyA9IGdpdmVuQXJncztcbiAgfSBlbHNlIGlmIChkZWZhdWx0TWVzc2FnZSkge1xuICAgIG1lc3NhZ2UgKz0gJzogJyArIGRlZmF1bHRNZXNzYWdlO1xuICAgIGFyZ3MgPSBkZWZhdWx0QXJncztcbiAgfVxuICAvLyBUaGUgJycgKyB3b3JrcyBhcm91bmQgYW4gT3BlcmEgMTAgYnVnIGluIHRoZSB1bml0IHRlc3RzLiBXaXRob3V0IGl0LFxuICAvLyBhIHN0YWNrIHRyYWNlIGlzIGFkZGVkIHRvIHZhciBtZXNzYWdlIGFib3ZlLiBXaXRoIHRoaXMsIGEgc3RhY2sgdHJhY2UgaXNcbiAgLy8gbm90IGFkZGVkIHVudGlsIHRoaXMgbGluZSAoaXQgY2F1c2VzIHRoZSBleHRyYSBnYXJiYWdlIHRvIGJlIGFkZGVkIGFmdGVyXG4gIC8vIHRoZSBhc3NlcnRpb24gbWVzc2FnZSBpbnN0ZWFkIG9mIGluIHRoZSBtaWRkbGUgb2YgaXQpLlxuICB2YXIgZSA9IG5ldyBnb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3IoJycgKyBtZXNzYWdlLCBhcmdzIHx8IFtdKTtcbiAgZ29vZy5hc3NlcnRzLmVycm9ySGFuZGxlcl8oZSk7XG59O1xuXG5cbi8qKlxuICogU2V0cyBhIGN1c3RvbSBlcnJvciBoYW5kbGVyIHRoYXQgY2FuIGJlIHVzZWQgdG8gY3VzdG9taXplIHRoZSBiZWhhdmlvciBvZlxuICogYXNzZXJ0aW9uIGZhaWx1cmVzLCBmb3IgZXhhbXBsZSBieSB0dXJuaW5nIGFsbCBhc3NlcnRpb24gZmFpbHVyZXMgaW50byBsb2dcbiAqIG1lc3NhZ2VzLlxuICogQHBhcmFtIHtmdW5jdGlvbighZ29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yKX0gZXJyb3JIYW5kbGVyXG4gKi9cbmdvb2cuYXNzZXJ0cy5zZXRFcnJvckhhbmRsZXIgPSBmdW5jdGlvbihlcnJvckhhbmRsZXIpIHtcbiAgaWYgKGdvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUUykge1xuICAgIGdvb2cuYXNzZXJ0cy5lcnJvckhhbmRsZXJfID0gZXJyb3JIYW5kbGVyO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBjb25kaXRpb24gZXZhbHVhdGVzIHRvIHRydWUgaWYgZ29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTIGlzXG4gKiB0cnVlLlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VH0gY29uZGl0aW9uIFRoZSBjb25kaXRpb24gdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9tZXNzYWdlIEVycm9yIG1lc3NhZ2UgaW4gY2FzZSBvZiBmYWlsdXJlLlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBUaGUgaXRlbXMgdG8gc3Vic3RpdHV0ZSBpbnRvIHRoZSBmYWlsdXJlIG1lc3NhZ2UuXG4gKiBAcmV0dXJuIHtUfSBUaGUgdmFsdWUgb2YgdGhlIGNvbmRpdGlvbi5cbiAqIEB0aHJvd3Mge2dvb2cuYXNzZXJ0cy5Bc3NlcnRpb25FcnJvcn0gV2hlbiB0aGUgY29uZGl0aW9uIGV2YWx1YXRlcyB0byBmYWxzZS5cbiAqL1xuZ29vZy5hc3NlcnRzLmFzc2VydCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgb3B0X21lc3NhZ2UsIHZhcl9hcmdzKSB7XG4gIGlmIChnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMgJiYgIWNvbmRpdGlvbikge1xuICAgIGdvb2cuYXNzZXJ0cy5kb0Fzc2VydEZhaWx1cmVfKCcnLCBudWxsLCBvcHRfbWVzc2FnZSxcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSk7XG4gIH1cbiAgcmV0dXJuIGNvbmRpdGlvbjtcbn07XG5cblxuLyoqXG4gKiBGYWlscyBpZiBnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMgaXMgdHJ1ZS4gVGhpcyBmdW5jdGlvbiBpcyB1c2VmdWwgaW4gY2FzZVxuICogd2hlbiB3ZSB3YW50IHRvIGFkZCBhIGNoZWNrIGluIHRoZSB1bnJlYWNoYWJsZSBhcmVhIGxpa2Ugc3dpdGNoLWNhc2VcbiAqIHN0YXRlbWVudDpcbiAqXG4gKiA8cHJlPlxuICogIHN3aXRjaCh0eXBlKSB7XG4gKiAgICBjYXNlIEZPTzogZG9Tb21ldGhpbmcoKTsgYnJlYWs7XG4gKiAgICBjYXNlIEJBUjogZG9Tb21ldGhpbmdFbHNlKCk7IGJyZWFrO1xuICogICAgZGVmYXVsdDogZ29vZy5hc3NlcnQuZmFpbCgnVW5yZWNvZ25pemVkIHR5cGU6ICcgKyB0eXBlKTtcbiAqICAgICAgLy8gV2UgaGF2ZSBvbmx5IDIgdHlwZXMgLSBcImRlZmF1bHQ6XCIgc2VjdGlvbiBpcyB1bnJlYWNoYWJsZSBjb2RlLlxuICogIH1cbiAqIDwvcHJlPlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X21lc3NhZ2UgRXJyb3IgbWVzc2FnZSBpbiBjYXNlIG9mIGZhaWx1cmUuXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIFRoZSBpdGVtcyB0byBzdWJzdGl0dXRlIGludG8gdGhlIGZhaWx1cmUgbWVzc2FnZS5cbiAqIEB0aHJvd3Mge2dvb2cuYXNzZXJ0cy5Bc3NlcnRpb25FcnJvcn0gRmFpbHVyZS5cbiAqL1xuZ29vZy5hc3NlcnRzLmZhaWwgPSBmdW5jdGlvbihvcHRfbWVzc2FnZSwgdmFyX2FyZ3MpIHtcbiAgaWYgKGdvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUUykge1xuICAgIGdvb2cuYXNzZXJ0cy5lcnJvckhhbmRsZXJfKG5ldyBnb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICdGYWlsdXJlJyArIChvcHRfbWVzc2FnZSA/ICc6ICcgKyBvcHRfbWVzc2FnZSA6ICcnKSxcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSB2YWx1ZSBpcyBhIG51bWJlciBpZiBnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMgaXMgdHJ1ZS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZSBFcnJvciBtZXNzYWdlIGluIGNhc2Ugb2YgZmFpbHVyZS5cbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgVGhlIGl0ZW1zIHRvIHN1YnN0aXR1dGUgaW50byB0aGUgZmFpbHVyZSBtZXNzYWdlLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgdmFsdWUsIGd1YXJhbnRlZWQgdG8gYmUgYSBudW1iZXIgd2hlbiBhc3NlcnRzIGVuYWJsZWQuXG4gKiBAdGhyb3dzIHtnb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3J9IFdoZW4gdGhlIHZhbHVlIGlzIG5vdCBhIG51bWJlci5cbiAqL1xuZ29vZy5hc3NlcnRzLmFzc2VydE51bWJlciA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfbWVzc2FnZSwgdmFyX2FyZ3MpIHtcbiAgaWYgKGdvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUUyAmJiAhZ29vZy5pc051bWJlcih2YWx1ZSkpIHtcbiAgICBnb29nLmFzc2VydHMuZG9Bc3NlcnRGYWlsdXJlXygnRXhwZWN0ZWQgbnVtYmVyIGJ1dCBnb3QgJXM6ICVzLicsXG4gICAgICAgIFtnb29nLnR5cGVPZih2YWx1ZSksIHZhbHVlXSwgb3B0X21lc3NhZ2UsXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMikpO1xuICB9XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHZhbHVlIGlzIGEgc3RyaW5nIGlmIGdvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUUyBpcyB0cnVlLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9tZXNzYWdlIEVycm9yIG1lc3NhZ2UgaW4gY2FzZSBvZiBmYWlsdXJlLlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBUaGUgaXRlbXMgdG8gc3Vic3RpdHV0ZSBpbnRvIHRoZSBmYWlsdXJlIG1lc3NhZ2UuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB2YWx1ZSwgZ3VhcmFudGVlZCB0byBiZSBhIHN0cmluZyB3aGVuIGFzc2VydHMgZW5hYmxlZC5cbiAqIEB0aHJvd3Mge2dvb2cuYXNzZXJ0cy5Bc3NlcnRpb25FcnJvcn0gV2hlbiB0aGUgdmFsdWUgaXMgbm90IGEgc3RyaW5nLlxuICovXG5nb29nLmFzc2VydHMuYXNzZXJ0U3RyaW5nID0gZnVuY3Rpb24odmFsdWUsIG9wdF9tZXNzYWdlLCB2YXJfYXJncykge1xuICBpZiAoZ29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTICYmICFnb29nLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgIGdvb2cuYXNzZXJ0cy5kb0Fzc2VydEZhaWx1cmVfKCdFeHBlY3RlZCBzdHJpbmcgYnV0IGdvdCAlczogJXMuJyxcbiAgICAgICAgW2dvb2cudHlwZU9mKHZhbHVlKSwgdmFsdWVdLCBvcHRfbWVzc2FnZSxcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSk7XG4gIH1cbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdmFsdWUgaXMgYSBmdW5jdGlvbiBpZiBnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMgaXMgdHJ1ZS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZSBFcnJvciBtZXNzYWdlIGluIGNhc2Ugb2YgZmFpbHVyZS5cbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgVGhlIGl0ZW1zIHRvIHN1YnN0aXR1dGUgaW50byB0aGUgZmFpbHVyZSBtZXNzYWdlLlxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBUaGUgdmFsdWUsIGd1YXJhbnRlZWQgdG8gYmUgYSBmdW5jdGlvbiB3aGVuIGFzc2VydHNcbiAqICAgICBlbmFibGVkLlxuICogQHRocm93cyB7Z29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yfSBXaGVuIHRoZSB2YWx1ZSBpcyBub3QgYSBmdW5jdGlvbi5cbiAqL1xuZ29vZy5hc3NlcnRzLmFzc2VydEZ1bmN0aW9uID0gZnVuY3Rpb24odmFsdWUsIG9wdF9tZXNzYWdlLCB2YXJfYXJncykge1xuICBpZiAoZ29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTICYmICFnb29nLmlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgZ29vZy5hc3NlcnRzLmRvQXNzZXJ0RmFpbHVyZV8oJ0V4cGVjdGVkIGZ1bmN0aW9uIGJ1dCBnb3QgJXM6ICVzLicsXG4gICAgICAgIFtnb29nLnR5cGVPZih2YWx1ZSksIHZhbHVlXSwgb3B0X21lc3NhZ2UsXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMikpO1xuICB9XG4gIHJldHVybiAvKiogQHR5cGUgeyFGdW5jdGlvbn0gKi8gKHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHZhbHVlIGlzIGFuIE9iamVjdCBpZiBnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMgaXMgdHJ1ZS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZSBFcnJvciBtZXNzYWdlIGluIGNhc2Ugb2YgZmFpbHVyZS5cbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgVGhlIGl0ZW1zIHRvIHN1YnN0aXR1dGUgaW50byB0aGUgZmFpbHVyZSBtZXNzYWdlLlxuICogQHJldHVybiB7IU9iamVjdH0gVGhlIHZhbHVlLCBndWFyYW50ZWVkIHRvIGJlIGEgbm9uLW51bGwgb2JqZWN0LlxuICogQHRocm93cyB7Z29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yfSBXaGVuIHRoZSB2YWx1ZSBpcyBub3QgYW4gb2JqZWN0LlxuICovXG5nb29nLmFzc2VydHMuYXNzZXJ0T2JqZWN0ID0gZnVuY3Rpb24odmFsdWUsIG9wdF9tZXNzYWdlLCB2YXJfYXJncykge1xuICBpZiAoZ29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTICYmICFnb29nLmlzT2JqZWN0KHZhbHVlKSkge1xuICAgIGdvb2cuYXNzZXJ0cy5kb0Fzc2VydEZhaWx1cmVfKCdFeHBlY3RlZCBvYmplY3QgYnV0IGdvdCAlczogJXMuJyxcbiAgICAgICAgW2dvb2cudHlwZU9mKHZhbHVlKSwgdmFsdWVdLFxuICAgICAgICBvcHRfbWVzc2FnZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSk7XG4gIH1cbiAgcmV0dXJuIC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHZhbHVlIGlzIGFuIEFycmF5IGlmIGdvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUUyBpcyB0cnVlLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9tZXNzYWdlIEVycm9yIG1lc3NhZ2UgaW4gY2FzZSBvZiBmYWlsdXJlLlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBUaGUgaXRlbXMgdG8gc3Vic3RpdHV0ZSBpbnRvIHRoZSBmYWlsdXJlIG1lc3NhZ2UuXG4gKiBAcmV0dXJuIHshQXJyYXk8Pz59IFRoZSB2YWx1ZSwgZ3VhcmFudGVlZCB0byBiZSBhIG5vbi1udWxsIGFycmF5LlxuICogQHRocm93cyB7Z29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yfSBXaGVuIHRoZSB2YWx1ZSBpcyBub3QgYW4gYXJyYXkuXG4gKi9cbmdvb2cuYXNzZXJ0cy5hc3NlcnRBcnJheSA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfbWVzc2FnZSwgdmFyX2FyZ3MpIHtcbiAgaWYgKGdvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUUyAmJiAhZ29vZy5pc0FycmF5KHZhbHVlKSkge1xuICAgIGdvb2cuYXNzZXJ0cy5kb0Fzc2VydEZhaWx1cmVfKCdFeHBlY3RlZCBhcnJheSBidXQgZ290ICVzOiAlcy4nLFxuICAgICAgICBbZ29vZy50eXBlT2YodmFsdWUpLCB2YWx1ZV0sIG9wdF9tZXNzYWdlLFxuICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpKTtcbiAgfVxuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8Pz59ICovICh2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSB2YWx1ZSBpcyBhIGJvb2xlYW4gaWYgZ29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTIGlzIHRydWUuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X21lc3NhZ2UgRXJyb3IgbWVzc2FnZSBpbiBjYXNlIG9mIGZhaWx1cmUuXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIFRoZSBpdGVtcyB0byBzdWJzdGl0dXRlIGludG8gdGhlIGZhaWx1cmUgbWVzc2FnZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRoZSB2YWx1ZSwgZ3VhcmFudGVlZCB0byBiZSBhIGJvb2xlYW4gd2hlbiBhc3NlcnRzIGFyZVxuICogICAgIGVuYWJsZWQuXG4gKiBAdGhyb3dzIHtnb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3J9IFdoZW4gdGhlIHZhbHVlIGlzIG5vdCBhIGJvb2xlYW4uXG4gKi9cbmdvb2cuYXNzZXJ0cy5hc3NlcnRCb29sZWFuID0gZnVuY3Rpb24odmFsdWUsIG9wdF9tZXNzYWdlLCB2YXJfYXJncykge1xuICBpZiAoZ29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTICYmICFnb29nLmlzQm9vbGVhbih2YWx1ZSkpIHtcbiAgICBnb29nLmFzc2VydHMuZG9Bc3NlcnRGYWlsdXJlXygnRXhwZWN0ZWQgYm9vbGVhbiBidXQgZ290ICVzOiAlcy4nLFxuICAgICAgICBbZ29vZy50eXBlT2YodmFsdWUpLCB2YWx1ZV0sIG9wdF9tZXNzYWdlLFxuICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpKTtcbiAgfVxuICByZXR1cm4gLyoqIEB0eXBlIHtib29sZWFufSAqLyAodmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdmFsdWUgaXMgYSBET00gRWxlbWVudCBpZiBnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMgaXMgdHJ1ZS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZSBFcnJvciBtZXNzYWdlIGluIGNhc2Ugb2YgZmFpbHVyZS5cbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgVGhlIGl0ZW1zIHRvIHN1YnN0aXR1dGUgaW50byB0aGUgZmFpbHVyZSBtZXNzYWdlLlxuICogQHJldHVybiB7IUVsZW1lbnR9IFRoZSB2YWx1ZSwgbGlrZWx5IHRvIGJlIGEgRE9NIEVsZW1lbnQgd2hlbiBhc3NlcnRzIGFyZVxuICogICAgIGVuYWJsZWQuXG4gKiBAdGhyb3dzIHtnb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3J9IFdoZW4gdGhlIHZhbHVlIGlzIG5vdCBhbiBFbGVtZW50LlxuICovXG5nb29nLmFzc2VydHMuYXNzZXJ0RWxlbWVudCA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfbWVzc2FnZSwgdmFyX2FyZ3MpIHtcbiAgaWYgKGdvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUUyAmJiAoIWdvb2cuaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB2YWx1ZS5ub2RlVHlwZSAhPSBnb29nLmRvbS5Ob2RlVHlwZS5FTEVNRU5UKSkge1xuICAgIGdvb2cuYXNzZXJ0cy5kb0Fzc2VydEZhaWx1cmVfKCdFeHBlY3RlZCBFbGVtZW50IGJ1dCBnb3QgJXM6ICVzLicsXG4gICAgICAgIFtnb29nLnR5cGVPZih2YWx1ZSksIHZhbHVlXSwgb3B0X21lc3NhZ2UsXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMikpO1xuICB9XG4gIHJldHVybiAvKiogQHR5cGUgeyFFbGVtZW50fSAqLyAodmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIHVzZXItZGVmaW5lZCB0eXBlIGlmXG4gKiBnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMgaXMgdHJ1ZS5cbiAqXG4gKiBUaGUgY29tcGlsZXIgbWF5IHRpZ2h0ZW4gdGhlIHR5cGUgcmV0dXJuZWQgYnkgdGhpcyBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3OiBULCAuLi4pfSB0eXBlIEEgdXNlci1kZWZpbmVkIGNvbnN0cnVjdG9yLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZSBFcnJvciBtZXNzYWdlIGluIGNhc2Ugb2YgZmFpbHVyZS5cbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgVGhlIGl0ZW1zIHRvIHN1YnN0aXR1dGUgaW50byB0aGUgZmFpbHVyZSBtZXNzYWdlLlxuICogQHRocm93cyB7Z29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yfSBXaGVuIHRoZSB2YWx1ZSBpcyBub3QgYW4gaW5zdGFuY2Ugb2ZcbiAqICAgICB0eXBlLlxuICogQHJldHVybiB7VH1cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuYXNzZXJ0cy5hc3NlcnRJbnN0YW5jZW9mID0gZnVuY3Rpb24odmFsdWUsIHR5cGUsIG9wdF9tZXNzYWdlLCB2YXJfYXJncykge1xuICBpZiAoZ29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTICYmICEodmFsdWUgaW5zdGFuY2VvZiB0eXBlKSkge1xuICAgIGdvb2cuYXNzZXJ0cy5kb0Fzc2VydEZhaWx1cmVfKCdFeHBlY3RlZCBpbnN0YW5jZW9mICVzIGJ1dCBnb3QgJXMuJyxcbiAgICAgICAgW2dvb2cuYXNzZXJ0cy5nZXRUeXBlXyh0eXBlKSwgZ29vZy5hc3NlcnRzLmdldFR5cGVfKHZhbHVlKV0sXG4gICAgICAgIG9wdF9tZXNzYWdlLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDMpKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIHRoYXQgbm8gZW51bWVyYWJsZSBrZXlzIGFyZSBwcmVzZW50IGluIE9iamVjdC5wcm90b3R5cGUuIFN1Y2gga2V5c1xuICogd291bGQgYnJlYWsgbW9zdCBjb2RlIHRoYXQgdXNlIHtAY29kZSBmb3IgKHZhciAuLi4gaW4gLi4uKX0gbG9vcHMuXG4gKi9cbmdvb2cuYXNzZXJ0cy5hc3NlcnRPYmplY3RQcm90b3R5cGVJc0ludGFjdCA9IGZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIGdvb2cuYXNzZXJ0cy5mYWlsKGtleSArICcgc2hvdWxkIG5vdCBiZSBlbnVtZXJhYmxlIGluIE9iamVjdC5wcm90b3R5cGUuJyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0eXBlIG9mIGEgdmFsdWUuIElmIGEgY29uc3RydWN0b3IgaXMgcGFzc2VkLCBhbmQgYSBzdWl0YWJsZVxuICogc3RyaW5nIGNhbm5vdCBiZSBmb3VuZCwgJ3Vua25vd24gdHlwZSBuYW1lJyB3aWxsIGJlIHJldHVybmVkLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBBIGNvbnN0cnVjdG9yLCBvYmplY3QsIG9yIHByaW1pdGl2ZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGJlc3QgZGlzcGxheSBuYW1lIGZvciB0aGUgdmFsdWUsIG9yICd1bmtub3duIHR5cGUgbmFtZScuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmFzc2VydHMuZ2V0VHlwZV8gPSBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIHJldHVybiB2YWx1ZS5kaXNwbGF5TmFtZSB8fCB2YWx1ZS5uYW1lIHx8ICd1bmtub3duIHR5cGUgbmFtZSc7XG4gIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICByZXR1cm4gdmFsdWUuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgdmFsdWUuY29uc3RydWN0b3IubmFtZSB8fFxuICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiB2YWx1ZTtcbiAgfVxufTtcbiIsIi8vIENvcHlyaWdodCAyMDEwIFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBnbG9iYWwgcmVnaXN0cnkgZm9yIGVudHJ5IHBvaW50cyBpbnRvIGEgcHJvZ3JhbSxcbiAqIHNvIHRoYXQgdGhleSBjYW4gYmUgaW5zdHJ1bWVudGVkLiBFYWNoIG1vZHVsZSBzaG91bGQgcmVnaXN0ZXIgdGhlaXJcbiAqIGVudHJ5IHBvaW50cyB3aXRoIHRoaXMgcmVnaXN0cnkuIERlc2lnbmVkIHRvIGJlIGNvbXBpbGVkIG91dFxuICogaWYgbm8gaW5zdHJ1bWVudGF0aW9uIGlzIHJlcXVlc3RlZC5cbiAqXG4gKiBFbnRyeSBwb2ludHMgbWF5IGJlIHJlZ2lzdGVyZWQgYmVmb3JlIG9yIGFmdGVyIGEgY2FsbCB0b1xuICogZ29vZy5kZWJ1Zy5lbnRyeVBvaW50UmVnaXN0cnkubW9uaXRvckFsbC4gSWYgYW4gZW50cnkgcG9pbnQgaXMgcmVnaXN0ZXJlZFxuICogbGF0ZXIsIHRoZSBleGlzdGluZyBtb25pdG9yIHdpbGwgaW5zdHJ1bWVudCB0aGUgbmV3IGVudHJ5IHBvaW50LlxuICpcbiAqIEBhdXRob3Igbmlja3NhbnRvc0Bnb29nbGUuY29tIChOaWNrIFNhbnRvcylcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZGVidWcuRW50cnlQb2ludE1vbml0b3InKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5kZWJ1Zy5lbnRyeVBvaW50UmVnaXN0cnknKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLmFzc2VydHMnKTtcblxuXG5cbi8qKlxuICogQGludGVyZmFjZVxuICovXG5nb29nLmRlYnVnLkVudHJ5UG9pbnRNb25pdG9yID0gZnVuY3Rpb24oKSB7fTtcblxuXG4vKipcbiAqIEluc3RydW1lbnRzIGEgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHshRnVuY3Rpb259IGZuIEEgZnVuY3Rpb24gdG8gaW5zdHJ1bWVudC5cbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gVGhlIGluc3RydW1lbnRlZCBmdW5jdGlvbi5cbiAqL1xuZ29vZy5kZWJ1Zy5FbnRyeVBvaW50TW9uaXRvci5wcm90b3R5cGUud3JhcDtcblxuXG4vKipcbiAqIFRyeSB0byByZW1vdmUgYW4gaW5zdHJ1bWVudGF0aW9uIHdyYXBwZXIgY3JlYXRlZCBieSB0aGlzIG1vbml0b3IuXG4gKiBJZiB0aGUgZnVuY3Rpb24gcGFzc2VkIHRvIHVud3JhcCBpcyBub3QgYSB3cmFwcGVyIGNyZWF0ZWQgYnkgdGhpc1xuICogbW9uaXRvciwgdGhlbiB3ZSB3aWxsIGRvIG5vdGhpbmcuXG4gKlxuICogTm90aWNlIHRoYXQgc29tZSB3cmFwcGVycyBtYXkgbm90IGJlIHVud3JhcHBhYmxlLiBGb3IgZXhhbXBsZSwgaWYgb3RoZXJcbiAqIG1vbml0b3JzIGhhdmUgYXBwbGllZCB0aGVpciBvd24gd3JhcHBlcnMsIHRoZW4gaXQgd2lsbCBiZSBpbXBvc3NpYmxlIHRvXG4gKiB1bndyYXAgdGhlbSBiZWNhdXNlIHRoZWlyIHdyYXBwZXJzIHdpbGwgaGF2ZSBjYXB0dXJlZCBvdXIgd3JhcHBlci5cbiAqXG4gKiBTbyBpdCBpcyBpbXBvcnRhbnQgdGhhdCBlbnRyeSBwb2ludHMgYXJlIHVud3JhcHBlZCBpbiB0aGUgcmV2ZXJzZVxuICogb3JkZXIgdGhhdCB0aGV5IHdlcmUgd3JhcHBlZC5cbiAqXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gZm4gQSBmdW5jdGlvbiB0byB1bndyYXAuXG4gKiBAcmV0dXJuIHshRnVuY3Rpb259IFRoZSB1bndyYXBwZWQgZnVuY3Rpb24sIG9yIHtAY29kZSBmbn0gaWYgaXQgd2FzIG5vdFxuICogICAgIGEgd3JhcHBlZCBmdW5jdGlvbiBjcmVhdGVkIGJ5IHRoaXMgbW9uaXRvci5cbiAqL1xuZ29vZy5kZWJ1Zy5FbnRyeVBvaW50TW9uaXRvci5wcm90b3R5cGUudW53cmFwO1xuXG5cbi8qKlxuICogQW4gYXJyYXkgb2YgZW50cnkgcG9pbnQgY2FsbGJhY2tzLlxuICogQHR5cGUgeyFBcnJheTxmdW5jdGlvbighRnVuY3Rpb24pPn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZGVidWcuZW50cnlQb2ludFJlZ2lzdHJ5LnJlZkxpc3RfID0gW107XG5cblxuLyoqXG4gKiBNb25pdG9ycyB0aGF0IHNob3VsZCB3cmFwIGFsbCB0aGUgZW50cnkgcG9pbnRzLlxuICogQHR5cGUgeyFBcnJheTwhZ29vZy5kZWJ1Zy5FbnRyeVBvaW50TW9uaXRvcj59XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmRlYnVnLmVudHJ5UG9pbnRSZWdpc3RyeS5tb25pdG9yc18gPSBbXTtcblxuXG4vKipcbiAqIFdoZXRoZXIgZ29vZy5kZWJ1Zy5lbnRyeVBvaW50UmVnaXN0cnkubW9uaXRvckFsbCBoYXMgZXZlciBiZWVuIGNhbGxlZC5cbiAqIENoZWNraW5nIHRoaXMgYWxsb3dzIHRoZSBjb21waWxlciB0byBvcHRpbWl6ZSBvdXQgdGhlIHJlZ2lzdHJhdGlvbnMuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZGVidWcuZW50cnlQb2ludFJlZ2lzdHJ5Lm1vbml0b3JzTWF5RXhpc3RfID0gZmFsc2U7XG5cblxuLyoqXG4gKiBSZWdpc3RlciBhbiBlbnRyeSBwb2ludCB3aXRoIHRoaXMgbW9kdWxlLlxuICpcbiAqIFRoZSBlbnRyeSBwb2ludCB3aWxsIGJlIGluc3RydW1lbnRlZCB3aGVuIGEgbW9uaXRvciBpcyBwYXNzZWQgdG9cbiAqIGdvb2cuZGVidWcuZW50cnlQb2ludFJlZ2lzdHJ5Lm1vbml0b3JBbGwuIElmIHRoaXMgaGFzIGFscmVhZHkgb2NjdXJyZWQsIHRoZVxuICogZW50cnkgcG9pbnQgaXMgaW5zdHJ1bWVudGVkIGltbWVkaWF0ZWx5LlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIUZ1bmN0aW9uKX0gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCBpcyBjYWxsZWRcbiAqICAgICB3aXRoIGEgdHJhbnNmb3JtaW5nIGZ1bmN0aW9uIHRvIGluc3RydW1lbnQgdGhlIGVudHJ5IHBvaW50LiBUaGUgY2FsbGJhY2tcbiAqICAgICBpcyByZXNwb25zaWJsZSBmb3Igd3JhcHBpbmcgdGhlIHJlbGV2YW50IGVudHJ5IHBvaW50IHdpdGggdGhlXG4gKiAgICAgdHJhbnNmb3JtaW5nIGZ1bmN0aW9uLlxuICovXG5nb29nLmRlYnVnLmVudHJ5UG9pbnRSZWdpc3RyeS5yZWdpc3RlciA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIC8vIERvbid0IHVzZSBwdXNoKCksIHNvIHRoYXQgdGhpcyBjYW4gYmUgY29tcGlsZWQgb3V0LlxuICBnb29nLmRlYnVnLmVudHJ5UG9pbnRSZWdpc3RyeS5yZWZMaXN0X1tcbiAgICAgIGdvb2cuZGVidWcuZW50cnlQb2ludFJlZ2lzdHJ5LnJlZkxpc3RfLmxlbmd0aF0gPSBjYWxsYmFjaztcbiAgLy8gSWYgbm8gb25lIGNhbGxzIG1vbml0b3JBbGwsIHRoaXMgY2FuIGJlIGNvbXBpbGVkIG91dC5cbiAgaWYgKGdvb2cuZGVidWcuZW50cnlQb2ludFJlZ2lzdHJ5Lm1vbml0b3JzTWF5RXhpc3RfKSB7XG4gICAgdmFyIG1vbml0b3JzID0gZ29vZy5kZWJ1Zy5lbnRyeVBvaW50UmVnaXN0cnkubW9uaXRvcnNfO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW9uaXRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNhbGxiYWNrKGdvb2cuYmluZChtb25pdG9yc1tpXS53cmFwLCBtb25pdG9yc1tpXSkpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIENvbmZpZ3VyZXMgYSBtb25pdG9yIHRvIHdyYXAgYWxsIGVudHJ5IHBvaW50cy5cbiAqXG4gKiBFbnRyeSBwb2ludHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIGFyZSBpbW1lZGlhdGVseSB3cmFwcGVkIGJ5XG4gKiB0aGUgbW9uaXRvci4gV2hlbiBhbiBlbnRyeSBwb2ludCBpcyByZWdpc3RlcmVkIGluIHRoZSBmdXR1cmUsIGl0IHdpbGwgYWxzb1xuICogYmUgd3JhcHBlZCBieSB0aGUgbW9uaXRvciB3aGVuIGl0IGlzIHJlZ2lzdGVyZWQuXG4gKlxuICogQHBhcmFtIHshZ29vZy5kZWJ1Zy5FbnRyeVBvaW50TW9uaXRvcn0gbW9uaXRvciBBbiBlbnRyeSBwb2ludCBtb25pdG9yLlxuICovXG5nb29nLmRlYnVnLmVudHJ5UG9pbnRSZWdpc3RyeS5tb25pdG9yQWxsID0gZnVuY3Rpb24obW9uaXRvcikge1xuICBnb29nLmRlYnVnLmVudHJ5UG9pbnRSZWdpc3RyeS5tb25pdG9yc01heUV4aXN0XyA9IHRydWU7XG4gIHZhciB0cmFuc2Zvcm1lciA9IGdvb2cuYmluZChtb25pdG9yLndyYXAsIG1vbml0b3IpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGdvb2cuZGVidWcuZW50cnlQb2ludFJlZ2lzdHJ5LnJlZkxpc3RfLmxlbmd0aDsgaSsrKSB7XG4gICAgZ29vZy5kZWJ1Zy5lbnRyeVBvaW50UmVnaXN0cnkucmVmTGlzdF9baV0odHJhbnNmb3JtZXIpO1xuICB9XG4gIGdvb2cuZGVidWcuZW50cnlQb2ludFJlZ2lzdHJ5Lm1vbml0b3JzXy5wdXNoKG1vbml0b3IpO1xufTtcblxuXG4vKipcbiAqIFRyeSB0byB1bm1vbml0b3IgYWxsIHRoZSBlbnRyeSBwb2ludHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkLiBJZlxuICogYW4gZW50cnkgcG9pbnQgaXMgcmVnaXN0ZXJlZCBpbiB0aGUgZnV0dXJlLCBpdCB3aWxsIG5vdCBiZSB3cmFwcGVkIGJ5IHRoZVxuICogbW9uaXRvciB3aGVuIGl0IGlzIHJlZ2lzdGVyZWQuIE5vdGUgdGhhdCB0aGlzIG1heSBmYWlsIGlmIHRoZSBlbnRyeSBwb2ludHNcbiAqIGhhdmUgYWRkaXRpb25hbCB3cmFwcGluZy5cbiAqXG4gKiBAcGFyYW0geyFnb29nLmRlYnVnLkVudHJ5UG9pbnRNb25pdG9yfSBtb25pdG9yIFRoZSBsYXN0IG1vbml0b3IgdG8gd3JhcFxuICogICAgIHRoZSBlbnRyeSBwb2ludHMuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIG1vbml0b3IgaXMgbm90IHRoZSBtb3N0IHJlY2VudGx5IGNvbmZpZ3VyZWQgbW9uaXRvci5cbiAqL1xuZ29vZy5kZWJ1Zy5lbnRyeVBvaW50UmVnaXN0cnkudW5tb25pdG9yQWxsSWZQb3NzaWJsZSA9IGZ1bmN0aW9uKG1vbml0b3IpIHtcbiAgdmFyIG1vbml0b3JzID0gZ29vZy5kZWJ1Zy5lbnRyeVBvaW50UmVnaXN0cnkubW9uaXRvcnNfO1xuICBnb29nLmFzc2VydHMuYXNzZXJ0KG1vbml0b3IgPT0gbW9uaXRvcnNbbW9uaXRvcnMubGVuZ3RoIC0gMV0sXG4gICAgICAnT25seSB0aGUgbW9zdCByZWNlbnQgbW9uaXRvciBjYW4gYmUgdW53cmFwcGVkLicpO1xuICB2YXIgdHJhbnNmb3JtZXIgPSBnb29nLmJpbmQobW9uaXRvci51bndyYXAsIG1vbml0b3IpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGdvb2cuZGVidWcuZW50cnlQb2ludFJlZ2lzdHJ5LnJlZkxpc3RfLmxlbmd0aDsgaSsrKSB7XG4gICAgZ29vZy5kZWJ1Zy5lbnRyeVBvaW50UmVnaXN0cnkucmVmTGlzdF9baV0odHJhbnNmb3JtZXIpO1xuICB9XG4gIG1vbml0b3JzLmxlbmd0aC0tO1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDA2IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0aWVzIGZvciBtYW5pcHVsYXRpbmcgYXJyYXlzLlxuICpcbiAqIEBhdXRob3IgYXJ2QGdvb2dsZS5jb20gKEVyaWsgQXJ2aWRzc29uKVxuICovXG5cblxuZ29vZy5wcm92aWRlKCdnb29nLmFycmF5Jyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuYXJyYXkuQXJyYXlMaWtlJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBOQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyBpbmRpY2F0ZXMgd2hldGhlciB0aGUgY29kZSBzaG91bGRcbiAqIHJlbHkgb24gQXJyYXkucHJvdG90eXBlIGZ1bmN0aW9ucywgaWYgYXZhaWxhYmxlLlxuICpcbiAqIFRoZSBBcnJheS5wcm90b3R5cGUgZnVuY3Rpb25zIGNhbiBiZSBkZWZpbmVkIGJ5IGV4dGVybmFsIGxpYnJhcmllcyBsaWtlXG4gKiBQcm90b3R5cGUgYW5kIHNldHRpbmcgdGhpcyBmbGFnIHRvIGZhbHNlIGZvcmNlcyBjbG9zdXJlIHRvIHVzZSBpdHMgb3duXG4gKiBnb29nLmFycmF5IGltcGxlbWVudGF0aW9uLlxuICpcbiAqIElmIHlvdXIgamF2YXNjcmlwdCBjYW4gYmUgbG9hZGVkIGJ5IGEgdGhpcmQgcGFydHkgc2l0ZSBhbmQgeW91IGFyZSB3YXJ5IGFib3V0XG4gKiByZWx5aW5nIG9uIHRoZSBwcm90b3R5cGUgZnVuY3Rpb25zLCBzcGVjaWZ5XG4gKiBcIi0tZGVmaW5lIGdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVM9ZmFsc2VcIiB0byB0aGUgSlNDb21waWxlci5cbiAqXG4gKiBTZXR0aW5nIGdvb2cuVFJVU1RFRF9TSVRFIHRvIGZhbHNlIHdpbGwgYXV0b21hdGljYWxseSBzZXRcbiAqIE5BVElWRV9BUlJBWV9QUk9UT1RZUEVTIHRvIGZhbHNlLlxuICovXG5nb29nLmRlZmluZSgnZ29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUycsIGdvb2cuVFJVU1RFRF9TSVRFKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IElmIHRydWUsIEpTQ29tcGlsZXIgd2lsbCB1c2UgdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBvZlxuICogYXJyYXkgZnVuY3Rpb25zIHdoZXJlIGFwcHJvcHJpYXRlIChlLmcuLCB7QGNvZGUgQXJyYXkjZmlsdGVyfSkgYW5kIHJlbW92ZSB0aGVcbiAqIHVudXNlZCBwdXJlIEpTIGltcGxlbWVudGF0aW9uLlxuICovXG5nb29nLmRlZmluZSgnZ29vZy5hcnJheS5BU1NVTUVfTkFUSVZFX0ZVTkNUSU9OUycsIGZhbHNlKTtcblxuXG4vKipcbiAqIEB0eXBlZGVmIHtBcnJheXxOb2RlTGlzdHxBcmd1bWVudHN8e2xlbmd0aDogbnVtYmVyfX1cbiAqL1xuZ29vZy5hcnJheS5BcnJheUxpa2U7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgaW4gYW4gYXJyYXkgd2l0aG91dCByZW1vdmluZyBpdC5cbiAqIFNhbWUgYXMgZ29vZy5hcnJheS5sYXN0LlxuICogQHBhcmFtIHtBcnJheTxUPnxnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyYXkgVGhlIGFycmF5LlxuICogQHJldHVybiB7VH0gTGFzdCBpdGVtIGluIGFycmF5LlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5hcnJheS5wZWVrID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBpbiBhbiBhcnJheSB3aXRob3V0IHJlbW92aW5nIGl0LlxuICogU2FtZSBhcyBnb29nLmFycmF5LnBlZWsuXG4gKiBAcGFyYW0ge0FycmF5PFQ+fGdvb2cuYXJyYXkuQXJyYXlMaWtlfSBhcnJheSBUaGUgYXJyYXkuXG4gKiBAcmV0dXJuIHtUfSBMYXN0IGl0ZW0gaW4gYXJyYXkuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLmFycmF5Lmxhc3QgPSBnb29nLmFycmF5LnBlZWs7XG5cblxuLyoqXG4gKiBSZWZlcmVuY2UgdG8gdGhlIG9yaWdpbmFsIHtAY29kZSBBcnJheS5wcm90b3R5cGV9LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5hcnJheS5BUlJBWV9QUk9UT1RZUEVfID0gQXJyYXkucHJvdG90eXBlO1xuXG5cbi8vIE5PVEUoYXJ2KTogU2luY2UgbW9zdCBvZiB0aGUgYXJyYXkgZnVuY3Rpb25zIGFyZSBnZW5lcmljIGl0IGFsbG93cyB5b3UgdG9cbi8vIHBhc3MgYW4gYXJyYXktbGlrZSBvYmplY3QuIFN0cmluZ3MgaGF2ZSBhIGxlbmd0aCBhbmQgYXJlIGNvbnNpZGVyZWQgYXJyYXktXG4vLyBsaWtlLiBIb3dldmVyLCB0aGUgJ2luJyBvcGVyYXRvciBkb2VzIG5vdCB3b3JrIG9uIHN0cmluZ3Mgc28gd2UgY2Fubm90IGp1c3Rcbi8vIHVzZSB0aGUgYXJyYXkgcGF0aCBldmVuIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIGluZGV4aW5nIGludG8gc3RyaW5ncy4gV2Vcbi8vIHRoZXJlZm9yZSBlbmQgdXAgc3BsaXR0aW5nIHRoZSBzdHJpbmcuXG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBhcnJheSB3aXRoIGEgc3BlY2lmaWVkIHZhbHVlLCBvclxuICogLTEgaWYgdGhlIGVsZW1lbnQgaXMgbm90IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIFNlZSB7QGxpbmsgaHR0cDovL3Rpbnl1cmwuY29tL2RldmVsb3Blci1tb3ppbGxhLW9yZy1hcnJheS1pbmRleG9mfVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VD58Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciBUaGUgYXJyYXkgdG8gYmUgc2VhcmNoZWQuXG4gKiBAcGFyYW0ge1R9IG9iaiBUaGUgb2JqZWN0IGZvciB3aGljaCB3ZSBhcmUgc2VhcmNoaW5nLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfZnJvbUluZGV4IFRoZSBpbmRleCBhdCB3aGljaCB0byBzdGFydCB0aGUgc2VhcmNoLiBJZlxuICogICAgIG9taXR0ZWQgdGhlIHNlYXJjaCBzdGFydHMgYXQgaW5kZXggMC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBtYXRjaGluZyBhcnJheSBlbGVtZW50LlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5hcnJheS5pbmRleE9mID0gZ29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyAmJlxuICAgICAgICAgICAgICAgICAgICAgKGdvb2cuYXJyYXkuQVNTVU1FX05BVElWRV9GVU5DVElPTlMgfHxcbiAgICAgICAgICAgICAgICAgICAgICBnb29nLmFycmF5LkFSUkFZX1BST1RPVFlQRV8uaW5kZXhPZikgP1xuICAgIGZ1bmN0aW9uKGFyciwgb2JqLCBvcHRfZnJvbUluZGV4KSB7XG4gICAgICBnb29nLmFzc2VydHMuYXNzZXJ0KGFyci5sZW5ndGggIT0gbnVsbCk7XG5cbiAgICAgIHJldHVybiBnb29nLmFycmF5LkFSUkFZX1BST1RPVFlQRV8uaW5kZXhPZi5jYWxsKGFyciwgb2JqLCBvcHRfZnJvbUluZGV4KTtcbiAgICB9IDpcbiAgICBmdW5jdGlvbihhcnIsIG9iaiwgb3B0X2Zyb21JbmRleCkge1xuICAgICAgdmFyIGZyb21JbmRleCA9IG9wdF9mcm9tSW5kZXggPT0gbnVsbCA/XG4gICAgICAgICAgMCA6IChvcHRfZnJvbUluZGV4IDwgMCA/XG4gICAgICAgICAgICAgICBNYXRoLm1heCgwLCBhcnIubGVuZ3RoICsgb3B0X2Zyb21JbmRleCkgOiBvcHRfZnJvbUluZGV4KTtcblxuICAgICAgaWYgKGdvb2cuaXNTdHJpbmcoYXJyKSkge1xuICAgICAgICAvLyBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiB1c2VzID09PSBzbyBvbmx5IHN0cmluZ3Mgc2hvdWxkIGJlIGZvdW5kLlxuICAgICAgICBpZiAoIWdvb2cuaXNTdHJpbmcob2JqKSB8fCBvYmoubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyci5pbmRleE9mKG9iaiwgZnJvbUluZGV4KTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IGZyb21JbmRleDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSBpbiBhcnIgJiYgYXJyW2ldID09PSBvYmopXG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkgd2l0aCBhIHNwZWNpZmllZCB2YWx1ZSwgb3JcbiAqIC0xIGlmIHRoZSBlbGVtZW50IGlzIG5vdCBwcmVzZW50IGluIHRoZSBhcnJheS5cbiAqXG4gKiBTZWUge0BsaW5rIGh0dHA6Ly90aW55dXJsLmNvbS9kZXZlbG9wZXItbW96aWxsYS1vcmctYXJyYXktbGFzdGluZGV4b2Z9XG4gKlxuICogQHBhcmFtIHshQXJyYXk8VD58IWdvb2cuYXJyYXkuQXJyYXlMaWtlfSBhcnIgVGhlIGFycmF5IHRvIGJlIHNlYXJjaGVkLlxuICogQHBhcmFtIHtUfSBvYmogVGhlIG9iamVjdCBmb3Igd2hpY2ggd2UgYXJlIHNlYXJjaGluZy5cbiAqIEBwYXJhbSB7P251bWJlcj19IG9wdF9mcm9tSW5kZXggVGhlIGluZGV4IGF0IHdoaWNoIHRvIHN0YXJ0IHRoZSBzZWFyY2guIElmXG4gKiAgICAgb21pdHRlZCB0aGUgc2VhcmNoIHN0YXJ0cyBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGluZGV4IG9mIHRoZSBsYXN0IG1hdGNoaW5nIGFycmF5IGVsZW1lbnQuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLmFycmF5Lmxhc3RJbmRleE9mID0gZ29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIChnb29nLmFycmF5LkFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXy5sYXN0SW5kZXhPZikgP1xuICAgIGZ1bmN0aW9uKGFyciwgb2JqLCBvcHRfZnJvbUluZGV4KSB7XG4gICAgICBnb29nLmFzc2VydHMuYXNzZXJ0KGFyci5sZW5ndGggIT0gbnVsbCk7XG5cbiAgICAgIC8vIEZpcmVmb3ggdHJlYXRzIHVuZGVmaW5lZCBhbmQgbnVsbCBhcyAwIGluIHRoZSBmcm9tSW5kZXggYXJndW1lbnQgd2hpY2hcbiAgICAgIC8vIGxlYWRzIGl0IHRvIGFsd2F5cyByZXR1cm4gLTFcbiAgICAgIHZhciBmcm9tSW5kZXggPSBvcHRfZnJvbUluZGV4ID09IG51bGwgPyBhcnIubGVuZ3RoIC0gMSA6IG9wdF9mcm9tSW5kZXg7XG4gICAgICByZXR1cm4gZ29vZy5hcnJheS5BUlJBWV9QUk9UT1RZUEVfLmxhc3RJbmRleE9mLmNhbGwoYXJyLCBvYmosIGZyb21JbmRleCk7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24oYXJyLCBvYmosIG9wdF9mcm9tSW5kZXgpIHtcbiAgICAgIHZhciBmcm9tSW5kZXggPSBvcHRfZnJvbUluZGV4ID09IG51bGwgPyBhcnIubGVuZ3RoIC0gMSA6IG9wdF9mcm9tSW5kZXg7XG5cbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IE1hdGgubWF4KDAsIGFyci5sZW5ndGggKyBmcm9tSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ29vZy5pc1N0cmluZyhhcnIpKSB7XG4gICAgICAgIC8vIEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZiB1c2VzID09PSBzbyBvbmx5IHN0cmluZ3Mgc2hvdWxkIGJlIGZvdW5kLlxuICAgICAgICBpZiAoIWdvb2cuaXNTdHJpbmcob2JqKSB8fCBvYmoubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyci5sYXN0SW5kZXhPZihvYmosIGZyb21JbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSBmcm9tSW5kZXg7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChpIGluIGFyciAmJiBhcnJbaV0gPT09IG9iailcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG5cbi8qKlxuICogQ2FsbHMgYSBmdW5jdGlvbiBmb3IgZWFjaCBlbGVtZW50IGluIGFuIGFycmF5LiBTa2lwcyBob2xlcyBpbiB0aGUgYXJyYXkuXG4gKiBTZWUge0BsaW5rIGh0dHA6Ly90aW55dXJsLmNvbS9kZXZlbG9wZXItbW96aWxsYS1vcmctYXJyYXktZm9yZWFjaH1cbiAqXG4gKiBAcGFyYW0ge0FycmF5PFQ+fGdvb2cuYXJyYXkuQXJyYXlMaWtlfSBhcnIgQXJyYXkgb3IgYXJyYXkgbGlrZSBvYmplY3Qgb3ZlclxuICogICAgIHdoaWNoIHRvIGl0ZXJhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbih0aGlzOiBTLCBULCBudW1iZXIsID8pOiA/fSBmIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBldmVyeVxuICogICAgIGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgMyBhcmd1bWVudHMgKHRoZSBlbGVtZW50LCB0aGUgaW5kZXggYW5kIHRoZVxuICogICAgIGFycmF5KS4gVGhlIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkLlxuICogQHBhcmFtIHtTPX0gb3B0X29iaiBUaGUgb2JqZWN0IHRvIGJlIHVzZWQgYXMgdGhlIHZhbHVlIG9mICd0aGlzJyB3aXRoaW4gZi5cbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZ29vZy5hcnJheS5mb3JFYWNoID0gZ29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyAmJlxuICAgICAgICAgICAgICAgICAgICAgKGdvb2cuYXJyYXkuQVNTVU1FX05BVElWRV9GVU5DVElPTlMgfHxcbiAgICAgICAgICAgICAgICAgICAgICBnb29nLmFycmF5LkFSUkFZX1BST1RPVFlQRV8uZm9yRWFjaCkgP1xuICAgIGZ1bmN0aW9uKGFyciwgZiwgb3B0X29iaikge1xuICAgICAgZ29vZy5hc3NlcnRzLmFzc2VydChhcnIubGVuZ3RoICE9IG51bGwpO1xuXG4gICAgICBnb29nLmFycmF5LkFSUkFZX1BST1RPVFlQRV8uZm9yRWFjaC5jYWxsKGFyciwgZiwgb3B0X29iaik7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24oYXJyLCBmLCBvcHRfb2JqKSB7XG4gICAgICB2YXIgbCA9IGFyci5sZW5ndGg7ICAvLyBtdXN0IGJlIGZpeGVkIGR1cmluZyBsb29wLi4uIHNlZSBkb2NzXG4gICAgICB2YXIgYXJyMiA9IGdvb2cuaXNTdHJpbmcoYXJyKSA/IGFyci5zcGxpdCgnJykgOiBhcnI7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoaSBpbiBhcnIyKSB7XG4gICAgICAgICAgZi5jYWxsKG9wdF9vYmosIGFycjJbaV0sIGksIGFycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG5cbi8qKlxuICogQ2FsbHMgYSBmdW5jdGlvbiBmb3IgZWFjaCBlbGVtZW50IGluIGFuIGFycmF5LCBzdGFydGluZyBmcm9tIHRoZSBsYXN0XG4gKiBlbGVtZW50IHJhdGhlciB0aGFuIHRoZSBmaXJzdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PFQ+fGdvb2cuYXJyYXkuQXJyYXlMaWtlfSBhcnIgQXJyYXkgb3IgYXJyYXlcbiAqICAgICBsaWtlIG9iamVjdCBvdmVyIHdoaWNoIHRvIGl0ZXJhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbih0aGlzOiBTLCBULCBudW1iZXIsID8pOiA/fSBmIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBldmVyeVxuICogICAgIGVsZW1lbnQuIFRoaXMgZnVuY3Rpb25cbiAqICAgICB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsIHRoZSBpbmRleCBhbmQgdGhlIGFycmF5KS4gVGhlIHJldHVyblxuICogICAgIHZhbHVlIGlzIGlnbm9yZWQuXG4gKiBAcGFyYW0ge1M9fSBvcHRfb2JqIFRoZSBvYmplY3QgdG8gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgJ3RoaXMnXG4gKiAgICAgd2l0aGluIGYuXG4gKiBAdGVtcGxhdGUgVCxTXG4gKi9cbmdvb2cuYXJyYXkuZm9yRWFjaFJpZ2h0ID0gZnVuY3Rpb24oYXJyLCBmLCBvcHRfb2JqKSB7XG4gIHZhciBsID0gYXJyLmxlbmd0aDsgIC8vIG11c3QgYmUgZml4ZWQgZHVyaW5nIGxvb3AuLi4gc2VlIGRvY3NcbiAgdmFyIGFycjIgPSBnb29nLmlzU3RyaW5nKGFycikgPyBhcnIuc3BsaXQoJycpIDogYXJyO1xuICBmb3IgKHZhciBpID0gbCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgaWYgKGkgaW4gYXJyMikge1xuICAgICAgZi5jYWxsKG9wdF9vYmosIGFycjJbaV0sIGksIGFycik7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogQ2FsbHMgYSBmdW5jdGlvbiBmb3IgZWFjaCBlbGVtZW50IGluIGFuIGFycmF5LCBhbmQgaWYgdGhlIGZ1bmN0aW9uIHJldHVybnNcbiAqIHRydWUgYWRkcyB0aGUgZWxlbWVudCB0byBhIG5ldyBhcnJheS5cbiAqXG4gKiBTZWUge0BsaW5rIGh0dHA6Ly90aW55dXJsLmNvbS9kZXZlbG9wZXItbW96aWxsYS1vcmctYXJyYXktZmlsdGVyfVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VD58Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciBBcnJheSBvciBhcnJheVxuICogICAgIGxpa2Ugb2JqZWN0IG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6UywgVCwgbnVtYmVyLCA/KTpib29sZWFufSBmIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvclxuICogICAgIGV2ZXJ5IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb25cbiAqICAgICB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsIHRoZSBpbmRleCBhbmQgdGhlIGFycmF5KSBhbmQgbXVzdFxuICogICAgIHJldHVybiBhIEJvb2xlYW4uIElmIHRoZSByZXR1cm4gdmFsdWUgaXMgdHJ1ZSB0aGUgZWxlbWVudCBpcyBhZGRlZCB0byB0aGVcbiAqICAgICByZXN1bHQgYXJyYXkuIElmIGl0IGlzIGZhbHNlIHRoZSBlbGVtZW50IGlzIG5vdCBpbmNsdWRlZC5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogVGhlIG9iamVjdCB0byBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBvZiAndGhpcydcbiAqICAgICB3aXRoaW4gZi5cbiAqIEByZXR1cm4geyFBcnJheTxUPn0gYSBuZXcgYXJyYXkgaW4gd2hpY2ggb25seSBlbGVtZW50cyB0aGF0IHBhc3NlZCB0aGUgdGVzdFxuICogICAgIGFyZSBwcmVzZW50LlxuICogQHRlbXBsYXRlIFQsU1xuICovXG5nb29nLmFycmF5LmZpbHRlciA9IGdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMgJiZcbiAgICAgICAgICAgICAgICAgICAgKGdvb2cuYXJyYXkuQVNTVU1FX05BVElWRV9GVU5DVElPTlMgfHxcbiAgICAgICAgICAgICAgICAgICAgIGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXy5maWx0ZXIpID9cbiAgICBmdW5jdGlvbihhcnIsIGYsIG9wdF9vYmopIHtcbiAgICAgIGdvb2cuYXNzZXJ0cy5hc3NlcnQoYXJyLmxlbmd0aCAhPSBudWxsKTtcblxuICAgICAgcmV0dXJuIGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXy5maWx0ZXIuY2FsbChhcnIsIGYsIG9wdF9vYmopO1xuICAgIH0gOlxuICAgIGZ1bmN0aW9uKGFyciwgZiwgb3B0X29iaikge1xuICAgICAgdmFyIGwgPSBhcnIubGVuZ3RoOyAgLy8gbXVzdCBiZSBmaXhlZCBkdXJpbmcgbG9vcC4uLiBzZWUgZG9jc1xuICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgdmFyIHJlc0xlbmd0aCA9IDA7XG4gICAgICB2YXIgYXJyMiA9IGdvb2cuaXNTdHJpbmcoYXJyKSA/IGFyci5zcGxpdCgnJykgOiBhcnI7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoaSBpbiBhcnIyKSB7XG4gICAgICAgICAgdmFyIHZhbCA9IGFycjJbaV07ICAvLyBpbiBjYXNlIGYgbXV0YXRlcyBhcnIyXG4gICAgICAgICAgaWYgKGYuY2FsbChvcHRfb2JqLCB2YWwsIGksIGFycikpIHtcbiAgICAgICAgICAgIHJlc1tyZXNMZW5ndGgrK10gPSB2YWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH07XG5cblxuLyoqXG4gKiBDYWxscyBhIGZ1bmN0aW9uIGZvciBlYWNoIGVsZW1lbnQgaW4gYW4gYXJyYXkgYW5kIGluc2VydHMgdGhlIHJlc3VsdCBpbnRvIGFcbiAqIG5ldyBhcnJheS5cbiAqXG4gKiBTZWUge0BsaW5rIGh0dHA6Ly90aW55dXJsLmNvbS9kZXZlbG9wZXItbW96aWxsYS1vcmctYXJyYXktbWFwfVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VkFMVUU+fGdvb2cuYXJyYXkuQXJyYXlMaWtlfSBhcnIgQXJyYXkgb3IgYXJyYXkgbGlrZSBvYmplY3RcbiAqICAgICBvdmVyIHdoaWNoIHRvIGl0ZXJhdGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VEhJUywgVkFMVUUsIG51bWJlciwgPyk6IFJFU1VMVH0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbFxuICogICAgIGZvciBldmVyeSBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIHRha2VzIDMgYXJndW1lbnRzICh0aGUgZWxlbWVudCxcbiAqICAgICB0aGUgaW5kZXggYW5kIHRoZSBhcnJheSkgYW5kIHNob3VsZCByZXR1cm4gc29tZXRoaW5nLiBUaGUgcmVzdWx0IHdpbGwgYmVcbiAqICAgICBpbnNlcnRlZCBpbnRvIGEgbmV3IGFycmF5LlxuICogQHBhcmFtIHtUSElTPX0gb3B0X29iaiBUaGUgb2JqZWN0IHRvIGJlIHVzZWQgYXMgdGhlIHZhbHVlIG9mICd0aGlzJyB3aXRoaW4gZi5cbiAqIEByZXR1cm4geyFBcnJheTxSRVNVTFQ+fSBhIG5ldyBhcnJheSB3aXRoIHRoZSByZXN1bHRzIGZyb20gZi5cbiAqIEB0ZW1wbGF0ZSBUSElTLCBWQUxVRSwgUkVTVUxUXG4gKi9cbmdvb2cuYXJyYXkubWFwID0gZ29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyAmJlxuICAgICAgICAgICAgICAgICAoZ29vZy5hcnJheS5BU1NVTUVfTkFUSVZFX0ZVTkNUSU9OUyB8fFxuICAgICAgICAgICAgICAgICAgZ29vZy5hcnJheS5BUlJBWV9QUk9UT1RZUEVfLm1hcCkgP1xuICAgIGZ1bmN0aW9uKGFyciwgZiwgb3B0X29iaikge1xuICAgICAgZ29vZy5hc3NlcnRzLmFzc2VydChhcnIubGVuZ3RoICE9IG51bGwpO1xuXG4gICAgICByZXR1cm4gZ29vZy5hcnJheS5BUlJBWV9QUk9UT1RZUEVfLm1hcC5jYWxsKGFyciwgZiwgb3B0X29iaik7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24oYXJyLCBmLCBvcHRfb2JqKSB7XG4gICAgICB2YXIgbCA9IGFyci5sZW5ndGg7ICAvLyBtdXN0IGJlIGZpeGVkIGR1cmluZyBsb29wLi4uIHNlZSBkb2NzXG4gICAgICB2YXIgcmVzID0gbmV3IEFycmF5KGwpO1xuICAgICAgdmFyIGFycjIgPSBnb29nLmlzU3RyaW5nKGFycikgPyBhcnIuc3BsaXQoJycpIDogYXJyO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGkgaW4gYXJyMikge1xuICAgICAgICAgIHJlc1tpXSA9IGYuY2FsbChvcHRfb2JqLCBhcnIyW2ldLCBpLCBhcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH07XG5cblxuLyoqXG4gKiBQYXNzZXMgZXZlcnkgZWxlbWVudCBvZiBhbiBhcnJheSBpbnRvIGEgZnVuY3Rpb24gYW5kIGFjY3VtdWxhdGVzIHRoZSByZXN1bHQuXG4gKlxuICogU2VlIHtAbGluayBodHRwOi8vdGlueXVybC5jb20vZGV2ZWxvcGVyLW1vemlsbGEtb3JnLWFycmF5LXJlZHVjZX1cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqIHZhciBhID0gWzEsIDIsIDMsIDRdO1xuICogZ29vZy5hcnJheS5yZWR1Y2UoYSwgZnVuY3Rpb24ociwgdiwgaSwgYXJyKSB7cmV0dXJuIHIgKyB2O30sIDApO1xuICogcmV0dXJucyAxMFxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VD58Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciBBcnJheSBvciBhcnJheVxuICogICAgIGxpa2Ugb2JqZWN0IG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTLCBSLCBULCBudW1iZXIsID8pIDogUn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3JcbiAqICAgICBldmVyeSBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uXG4gKiAgICAgdGFrZXMgNCBhcmd1bWVudHMgKHRoZSBmdW5jdGlvbidzIHByZXZpb3VzIHJlc3VsdCBvciB0aGUgaW5pdGlhbCB2YWx1ZSxcbiAqICAgICB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgYXJyYXkgZWxlbWVudCwgdGhlIGN1cnJlbnQgYXJyYXkgaW5kZXgsIGFuZCB0aGVcbiAqICAgICBhcnJheSBpdHNlbGYpXG4gKiAgICAgZnVuY3Rpb24ocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICogQHBhcmFtIHs/fSB2YWwgVGhlIGluaXRpYWwgdmFsdWUgdG8gcGFzcyBpbnRvIHRoZSBmdW5jdGlvbiBvbiB0aGUgZmlyc3QgY2FsbC5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogIFRoZSBvYmplY3QgdG8gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgJ3RoaXMnXG4gKiAgICAgd2l0aGluIGYuXG4gKiBAcmV0dXJuIHtSfSBSZXN1bHQgb2YgZXZhbHVhdGluZyBmIHJlcGVhdGVkbHkgYWNyb3NzIHRoZSB2YWx1ZXMgb2YgdGhlIGFycmF5LlxuICogQHRlbXBsYXRlIFQsUyxSXG4gKi9cbmdvb2cuYXJyYXkucmVkdWNlID0gZ29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyAmJlxuICAgICAgICAgICAgICAgICAgICAoZ29vZy5hcnJheS5BU1NVTUVfTkFUSVZFX0ZVTkNUSU9OUyB8fFxuICAgICAgICAgICAgICAgICAgICAgZ29vZy5hcnJheS5BUlJBWV9QUk9UT1RZUEVfLnJlZHVjZSkgP1xuICAgIGZ1bmN0aW9uKGFyciwgZiwgdmFsLCBvcHRfb2JqKSB7XG4gICAgICBnb29nLmFzc2VydHMuYXNzZXJ0KGFyci5sZW5ndGggIT0gbnVsbCk7XG4gICAgICBpZiAob3B0X29iaikge1xuICAgICAgICBmID0gZ29vZy5iaW5kKGYsIG9wdF9vYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXy5yZWR1Y2UuY2FsbChhcnIsIGYsIHZhbCk7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24oYXJyLCBmLCB2YWwsIG9wdF9vYmopIHtcbiAgICAgIHZhciBydmFsID0gdmFsO1xuICAgICAgZ29vZy5hcnJheS5mb3JFYWNoKGFyciwgZnVuY3Rpb24odmFsLCBpbmRleCkge1xuICAgICAgICBydmFsID0gZi5jYWxsKG9wdF9vYmosIHJ2YWwsIHZhbCwgaW5kZXgsIGFycik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBydmFsO1xuICAgIH07XG5cblxuLyoqXG4gKiBQYXNzZXMgZXZlcnkgZWxlbWVudCBvZiBhbiBhcnJheSBpbnRvIGEgZnVuY3Rpb24gYW5kIGFjY3VtdWxhdGVzIHRoZSByZXN1bHQsXG4gKiBzdGFydGluZyBmcm9tIHRoZSBsYXN0IGVsZW1lbnQgYW5kIHdvcmtpbmcgdG93YXJkcyB0aGUgZmlyc3QuXG4gKlxuICogU2VlIHtAbGluayBodHRwOi8vdGlueXVybC5jb20vZGV2ZWxvcGVyLW1vemlsbGEtb3JnLWFycmF5LXJlZHVjZXJpZ2h0fVxuICpcbiAqIEZvciBleGFtcGxlOlxuICogdmFyIGEgPSBbJ2EnLCAnYicsICdjJ107XG4gKiBnb29nLmFycmF5LnJlZHVjZVJpZ2h0KGEsIGZ1bmN0aW9uKHIsIHYsIGksIGFycikge3JldHVybiByICsgdjt9LCAnJyk7XG4gKiByZXR1cm5zICdjYmEnXG4gKlxuICogQHBhcmFtIHtBcnJheTxUPnxnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyIEFycmF5IG9yIGFycmF5XG4gKiAgICAgbGlrZSBvYmplY3Qgb3ZlciB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpTLCBSLCBULCBudW1iZXIsID8pIDogUn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3JcbiAqICAgICBldmVyeSBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uXG4gKiAgICAgdGFrZXMgNCBhcmd1bWVudHMgKHRoZSBmdW5jdGlvbidzIHByZXZpb3VzIHJlc3VsdCBvciB0aGUgaW5pdGlhbCB2YWx1ZSxcbiAqICAgICB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgYXJyYXkgZWxlbWVudCwgdGhlIGN1cnJlbnQgYXJyYXkgaW5kZXgsIGFuZCB0aGVcbiAqICAgICBhcnJheSBpdHNlbGYpXG4gKiAgICAgZnVuY3Rpb24ocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICogQHBhcmFtIHs/fSB2YWwgVGhlIGluaXRpYWwgdmFsdWUgdG8gcGFzcyBpbnRvIHRoZSBmdW5jdGlvbiBvbiB0aGUgZmlyc3QgY2FsbC5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogVGhlIG9iamVjdCB0byBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBvZiAndGhpcydcbiAqICAgICB3aXRoaW4gZi5cbiAqIEByZXR1cm4ge1J9IE9iamVjdCByZXR1cm5lZCBhcyBhIHJlc3VsdCBvZiBldmFsdWF0aW5nIGYgcmVwZWF0ZWRseSBhY3Jvc3MgdGhlXG4gKiAgICAgdmFsdWVzIG9mIHRoZSBhcnJheS5cbiAqIEB0ZW1wbGF0ZSBULFMsUlxuICovXG5nb29nLmFycmF5LnJlZHVjZVJpZ2h0ID0gZ29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIChnb29nLmFycmF5LkFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXy5yZWR1Y2VSaWdodCkgP1xuICAgIGZ1bmN0aW9uKGFyciwgZiwgdmFsLCBvcHRfb2JqKSB7XG4gICAgICBnb29nLmFzc2VydHMuYXNzZXJ0KGFyci5sZW5ndGggIT0gbnVsbCk7XG4gICAgICBpZiAob3B0X29iaikge1xuICAgICAgICBmID0gZ29vZy5iaW5kKGYsIG9wdF9vYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXy5yZWR1Y2VSaWdodC5jYWxsKGFyciwgZiwgdmFsKTtcbiAgICB9IDpcbiAgICBmdW5jdGlvbihhcnIsIGYsIHZhbCwgb3B0X29iaikge1xuICAgICAgdmFyIHJ2YWwgPSB2YWw7XG4gICAgICBnb29nLmFycmF5LmZvckVhY2hSaWdodChhcnIsIGZ1bmN0aW9uKHZhbCwgaW5kZXgpIHtcbiAgICAgICAgcnZhbCA9IGYuY2FsbChvcHRfb2JqLCBydmFsLCB2YWwsIGluZGV4LCBhcnIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcnZhbDtcbiAgICB9O1xuXG5cbi8qKlxuICogQ2FsbHMgZiBmb3IgZWFjaCBlbGVtZW50IG9mIGFuIGFycmF5LiBJZiBhbnkgY2FsbCByZXR1cm5zIHRydWUsIHNvbWUoKVxuICogcmV0dXJucyB0cnVlICh3aXRob3V0IGNoZWNraW5nIHRoZSByZW1haW5pbmcgZWxlbWVudHMpLiBJZiBhbGwgY2FsbHNcbiAqIHJldHVybiBmYWxzZSwgc29tZSgpIHJldHVybnMgZmFsc2UuXG4gKlxuICogU2VlIHtAbGluayBodHRwOi8vdGlueXVybC5jb20vZGV2ZWxvcGVyLW1vemlsbGEtb3JnLWFycmF5LXNvbWV9XG4gKlxuICogQHBhcmFtIHtBcnJheTxUPnxnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyIEFycmF5IG9yIGFycmF5XG4gKiAgICAgbGlrZSBvYmplY3Qgb3ZlciB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpTLCBULCBudW1iZXIsID8pIDogYm9vbGVhbn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3JcbiAqICAgICBmb3IgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsIHRoZVxuICogICAgIGluZGV4IGFuZCB0aGUgYXJyYXkpIGFuZCBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbi5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogIFRoZSBvYmplY3QgdG8gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgJ3RoaXMnXG4gKiAgICAgd2l0aGluIGYuXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgdGVzdC5cbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZ29vZy5hcnJheS5zb21lID0gZ29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyAmJlxuICAgICAgICAgICAgICAgICAgKGdvb2cuYXJyYXkuQVNTVU1FX05BVElWRV9GVU5DVElPTlMgfHxcbiAgICAgICAgICAgICAgICAgICBnb29nLmFycmF5LkFSUkFZX1BST1RPVFlQRV8uc29tZSkgP1xuICAgIGZ1bmN0aW9uKGFyciwgZiwgb3B0X29iaikge1xuICAgICAgZ29vZy5hc3NlcnRzLmFzc2VydChhcnIubGVuZ3RoICE9IG51bGwpO1xuXG4gICAgICByZXR1cm4gZ29vZy5hcnJheS5BUlJBWV9QUk9UT1RZUEVfLnNvbWUuY2FsbChhcnIsIGYsIG9wdF9vYmopO1xuICAgIH0gOlxuICAgIGZ1bmN0aW9uKGFyciwgZiwgb3B0X29iaikge1xuICAgICAgdmFyIGwgPSBhcnIubGVuZ3RoOyAgLy8gbXVzdCBiZSBmaXhlZCBkdXJpbmcgbG9vcC4uLiBzZWUgZG9jc1xuICAgICAgdmFyIGFycjIgPSBnb29nLmlzU3RyaW5nKGFycikgPyBhcnIuc3BsaXQoJycpIDogYXJyO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGkgaW4gYXJyMiAmJiBmLmNhbGwob3B0X29iaiwgYXJyMltpXSwgaSwgYXJyKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuXG4vKipcbiAqIENhbGwgZiBmb3IgZWFjaCBlbGVtZW50IG9mIGFuIGFycmF5LiBJZiBhbGwgY2FsbHMgcmV0dXJuIHRydWUsIGV2ZXJ5KClcbiAqIHJldHVybnMgdHJ1ZS4gSWYgYW55IGNhbGwgcmV0dXJucyBmYWxzZSwgZXZlcnkoKSByZXR1cm5zIGZhbHNlIGFuZFxuICogZG9lcyBub3QgY29udGludWUgdG8gY2hlY2sgdGhlIHJlbWFpbmluZyBlbGVtZW50cy5cbiAqXG4gKiBTZWUge0BsaW5rIGh0dHA6Ly90aW55dXJsLmNvbS9kZXZlbG9wZXItbW96aWxsYS1vcmctYXJyYXktZXZlcnl9XG4gKlxuICogQHBhcmFtIHtBcnJheTxUPnxnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyIEFycmF5IG9yIGFycmF5XG4gKiAgICAgbGlrZSBvYmplY3Qgb3ZlciB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpTLCBULCBudW1iZXIsID8pIDogYm9vbGVhbn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3JcbiAqICAgICBmb3IgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsIHRoZVxuICogICAgIGluZGV4IGFuZCB0aGUgYXJyYXkpIGFuZCBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbi5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogVGhlIG9iamVjdCB0byBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBvZiAndGhpcydcbiAqICAgICB3aXRoaW4gZi5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IGZhbHNlIGlmIGFueSBlbGVtZW50IGZhaWxzIHRoZSB0ZXN0LlxuICogQHRlbXBsYXRlIFQsU1xuICovXG5nb29nLmFycmF5LmV2ZXJ5ID0gZ29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyAmJlxuICAgICAgICAgICAgICAgICAgIChnb29nLmFycmF5LkFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TIHx8XG4gICAgICAgICAgICAgICAgICAgIGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXy5ldmVyeSkgP1xuICAgIGZ1bmN0aW9uKGFyciwgZiwgb3B0X29iaikge1xuICAgICAgZ29vZy5hc3NlcnRzLmFzc2VydChhcnIubGVuZ3RoICE9IG51bGwpO1xuXG4gICAgICByZXR1cm4gZ29vZy5hcnJheS5BUlJBWV9QUk9UT1RZUEVfLmV2ZXJ5LmNhbGwoYXJyLCBmLCBvcHRfb2JqKTtcbiAgICB9IDpcbiAgICBmdW5jdGlvbihhcnIsIGYsIG9wdF9vYmopIHtcbiAgICAgIHZhciBsID0gYXJyLmxlbmd0aDsgIC8vIG11c3QgYmUgZml4ZWQgZHVyaW5nIGxvb3AuLi4gc2VlIGRvY3NcbiAgICAgIHZhciBhcnIyID0gZ29vZy5pc1N0cmluZyhhcnIpID8gYXJyLnNwbGl0KCcnKSA6IGFycjtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChpIGluIGFycjIgJiYgIWYuY2FsbChvcHRfb2JqLCBhcnIyW2ldLCBpLCBhcnIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG5cbi8qKlxuICogQ291bnRzIHRoZSBhcnJheSBlbGVtZW50cyB0aGF0IGZ1bGZpbGwgdGhlIHByZWRpY2F0ZSwgaS5lLiBmb3Igd2hpY2ggdGhlXG4gKiBjYWxsYmFjayBmdW5jdGlvbiByZXR1cm5zIHRydWUuIFNraXBzIGhvbGVzIGluIHRoZSBhcnJheS5cbiAqXG4gKiBAcGFyYW0geyEoQXJyYXk8VD58Z29vZy5hcnJheS5BcnJheUxpa2UpfSBhcnIgQXJyYXkgb3IgYXJyYXkgbGlrZSBvYmplY3RcbiAqICAgICBvdmVyIHdoaWNoIHRvIGl0ZXJhdGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6IFMsIFQsIG51bWJlciwgPyk6IGJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yXG4gKiAgICAgZXZlcnkgZWxlbWVudC4gVGFrZXMgMyBhcmd1bWVudHMgKHRoZSBlbGVtZW50LCB0aGUgaW5kZXggYW5kIHRoZSBhcnJheSkuXG4gKiBAcGFyYW0ge1M9fSBvcHRfb2JqIFRoZSBvYmplY3QgdG8gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgJ3RoaXMnIHdpdGhpbiBmLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIHRoZSBtYXRjaGluZyBlbGVtZW50cy5cbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZ29vZy5hcnJheS5jb3VudCA9IGZ1bmN0aW9uKGFyciwgZiwgb3B0X29iaikge1xuICB2YXIgY291bnQgPSAwO1xuICBnb29nLmFycmF5LmZvckVhY2goYXJyLCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCwgYXJyKSB7XG4gICAgaWYgKGYuY2FsbChvcHRfb2JqLCBlbGVtZW50LCBpbmRleCwgYXJyKSkge1xuICAgICAgKytjb3VudDtcbiAgICB9XG4gIH0sIG9wdF9vYmopO1xuICByZXR1cm4gY291bnQ7XG59O1xuXG5cbi8qKlxuICogU2VhcmNoIGFuIGFycmF5IGZvciB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IHNhdGlzZmllcyBhIGdpdmVuIGNvbmRpdGlvbiBhbmRcbiAqIHJldHVybiB0aGF0IGVsZW1lbnQuXG4gKiBAcGFyYW0ge0FycmF5PFQ+fGdvb2cuYXJyYXkuQXJyYXlMaWtlfSBhcnIgQXJyYXkgb3IgYXJyYXlcbiAqICAgICBsaWtlIG9iamVjdCBvdmVyIHdoaWNoIHRvIGl0ZXJhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbih0aGlzOlMsIFQsIG51bWJlciwgPykgOiBib29sZWFufSBmIFRoZSBmdW5jdGlvbiB0byBjYWxsXG4gKiAgICAgZm9yIGV2ZXJ5IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgMyBhcmd1bWVudHMgKHRoZSBlbGVtZW50LCB0aGVcbiAqICAgICBpbmRleCBhbmQgdGhlIGFycmF5KSBhbmQgc2hvdWxkIHJldHVybiBhIGJvb2xlYW4uXG4gKiBAcGFyYW0ge1M9fSBvcHRfb2JqIEFuIG9wdGlvbmFsIFwidGhpc1wiIGNvbnRleHQgZm9yIHRoZSBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge1R8bnVsbH0gVGhlIGZpcnN0IGFycmF5IGVsZW1lbnQgdGhhdCBwYXNzZXMgdGhlIHRlc3QsIG9yIG51bGwgaWYgbm9cbiAqICAgICBlbGVtZW50IGlzIGZvdW5kLlxuICogQHRlbXBsYXRlIFQsU1xuICovXG5nb29nLmFycmF5LmZpbmQgPSBmdW5jdGlvbihhcnIsIGYsIG9wdF9vYmopIHtcbiAgdmFyIGkgPSBnb29nLmFycmF5LmZpbmRJbmRleChhcnIsIGYsIG9wdF9vYmopO1xuICByZXR1cm4gaSA8IDAgPyBudWxsIDogZ29vZy5pc1N0cmluZyhhcnIpID8gYXJyLmNoYXJBdChpKSA6IGFycltpXTtcbn07XG5cblxuLyoqXG4gKiBTZWFyY2ggYW4gYXJyYXkgZm9yIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgc2F0aXNmaWVzIGEgZ2l2ZW4gY29uZGl0aW9uIGFuZFxuICogcmV0dXJuIGl0cyBpbmRleC5cbiAqIEBwYXJhbSB7QXJyYXk8VD58Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciBBcnJheSBvciBhcnJheVxuICogICAgIGxpa2Ugb2JqZWN0IG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6UywgVCwgbnVtYmVyLCA/KSA6IGJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yXG4gKiAgICAgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvblxuICogICAgIHRha2VzIDMgYXJndW1lbnRzICh0aGUgZWxlbWVudCwgdGhlIGluZGV4IGFuZCB0aGUgYXJyYXkpIGFuZCBzaG91bGRcbiAqICAgICByZXR1cm4gYSBib29sZWFuLlxuICogQHBhcmFtIHtTPX0gb3B0X29iaiBBbiBvcHRpb25hbCBcInRoaXNcIiBjb250ZXh0IGZvciB0aGUgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBpbmRleCBvZiB0aGUgZmlyc3QgYXJyYXkgZWxlbWVudCB0aGF0IHBhc3NlcyB0aGUgdGVzdCxcbiAqICAgICBvciAtMSBpZiBubyBlbGVtZW50IGlzIGZvdW5kLlxuICogQHRlbXBsYXRlIFQsU1xuICovXG5nb29nLmFycmF5LmZpbmRJbmRleCA9IGZ1bmN0aW9uKGFyciwgZiwgb3B0X29iaikge1xuICB2YXIgbCA9IGFyci5sZW5ndGg7ICAvLyBtdXN0IGJlIGZpeGVkIGR1cmluZyBsb29wLi4uIHNlZSBkb2NzXG4gIHZhciBhcnIyID0gZ29vZy5pc1N0cmluZyhhcnIpID8gYXJyLnNwbGl0KCcnKSA6IGFycjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaSBpbiBhcnIyICYmIGYuY2FsbChvcHRfb2JqLCBhcnIyW2ldLCBpLCBhcnIpKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcblxuXG4vKipcbiAqIFNlYXJjaCBhbiBhcnJheSAoaW4gcmV2ZXJzZSBvcmRlcikgZm9yIHRoZSBsYXN0IGVsZW1lbnQgdGhhdCBzYXRpc2ZpZXMgYVxuICogZ2l2ZW4gY29uZGl0aW9uIGFuZCByZXR1cm4gdGhhdCBlbGVtZW50LlxuICogQHBhcmFtIHtBcnJheTxUPnxnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyIEFycmF5IG9yIGFycmF5XG4gKiAgICAgbGlrZSBvYmplY3Qgb3ZlciB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpTLCBULCBudW1iZXIsID8pIDogYm9vbGVhbn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbFxuICogICAgIGZvciBldmVyeSBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uXG4gKiAgICAgdGFrZXMgMyBhcmd1bWVudHMgKHRoZSBlbGVtZW50LCB0aGUgaW5kZXggYW5kIHRoZSBhcnJheSkgYW5kIHNob3VsZFxuICogICAgIHJldHVybiBhIGJvb2xlYW4uXG4gKiBAcGFyYW0ge1M9fSBvcHRfb2JqIEFuIG9wdGlvbmFsIFwidGhpc1wiIGNvbnRleHQgZm9yIHRoZSBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge1R8bnVsbH0gVGhlIGxhc3QgYXJyYXkgZWxlbWVudCB0aGF0IHBhc3NlcyB0aGUgdGVzdCwgb3IgbnVsbCBpZiBub1xuICogICAgIGVsZW1lbnQgaXMgZm91bmQuXG4gKiBAdGVtcGxhdGUgVCxTXG4gKi9cbmdvb2cuYXJyYXkuZmluZFJpZ2h0ID0gZnVuY3Rpb24oYXJyLCBmLCBvcHRfb2JqKSB7XG4gIHZhciBpID0gZ29vZy5hcnJheS5maW5kSW5kZXhSaWdodChhcnIsIGYsIG9wdF9vYmopO1xuICByZXR1cm4gaSA8IDAgPyBudWxsIDogZ29vZy5pc1N0cmluZyhhcnIpID8gYXJyLmNoYXJBdChpKSA6IGFycltpXTtcbn07XG5cblxuLyoqXG4gKiBTZWFyY2ggYW4gYXJyYXkgKGluIHJldmVyc2Ugb3JkZXIpIGZvciB0aGUgbGFzdCBlbGVtZW50IHRoYXQgc2F0aXNmaWVzIGFcbiAqIGdpdmVuIGNvbmRpdGlvbiBhbmQgcmV0dXJuIGl0cyBpbmRleC5cbiAqIEBwYXJhbSB7QXJyYXk8VD58Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciBBcnJheSBvciBhcnJheVxuICogICAgIGxpa2Ugb2JqZWN0IG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6UywgVCwgbnVtYmVyLCA/KSA6IGJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGxcbiAqICAgICBmb3IgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvblxuICogICAgIHRha2VzIDMgYXJndW1lbnRzICh0aGUgZWxlbWVudCwgdGhlIGluZGV4IGFuZCB0aGUgYXJyYXkpIGFuZCBzaG91bGRcbiAqICAgICByZXR1cm4gYSBib29sZWFuLlxuICogQHBhcmFtIHtTPX0gb3B0X29iaiBBbiBvcHRpb25hbCBcInRoaXNcIiBjb250ZXh0IGZvciB0aGUgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBpbmRleCBvZiB0aGUgbGFzdCBhcnJheSBlbGVtZW50IHRoYXQgcGFzc2VzIHRoZSB0ZXN0LFxuICogICAgIG9yIC0xIGlmIG5vIGVsZW1lbnQgaXMgZm91bmQuXG4gKiBAdGVtcGxhdGUgVCxTXG4gKi9cbmdvb2cuYXJyYXkuZmluZEluZGV4UmlnaHQgPSBmdW5jdGlvbihhcnIsIGYsIG9wdF9vYmopIHtcbiAgdmFyIGwgPSBhcnIubGVuZ3RoOyAgLy8gbXVzdCBiZSBmaXhlZCBkdXJpbmcgbG9vcC4uLiBzZWUgZG9jc1xuICB2YXIgYXJyMiA9IGdvb2cuaXNTdHJpbmcoYXJyKSA/IGFyci5zcGxpdCgnJykgOiBhcnI7XG4gIGZvciAodmFyIGkgPSBsIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoaSBpbiBhcnIyICYmIGYuY2FsbChvcHRfb2JqLCBhcnIyW2ldLCBpLCBhcnIpKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGFycmF5IGNvbnRhaW5zIHRoZSBnaXZlbiBvYmplY3QuXG4gKiBAcGFyYW0ge2dvb2cuYXJyYXkuQXJyYXlMaWtlfSBhcnIgVGhlIGFycmF5IHRvIHRlc3QgZm9yIHRoZSBwcmVzZW5jZSBvZiB0aGVcbiAqICAgICBlbGVtZW50LlxuICogQHBhcmFtIHsqfSBvYmogVGhlIG9iamVjdCBmb3Igd2hpY2ggdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgb2JqIGlzIHByZXNlbnQuXG4gKi9cbmdvb2cuYXJyYXkuY29udGFpbnMgPSBmdW5jdGlvbihhcnIsIG9iaikge1xuICByZXR1cm4gZ29vZy5hcnJheS5pbmRleE9mKGFyciwgb2JqKSA+PSAwO1xufTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGFycmF5IGlzIGVtcHR5LlxuICogQHBhcmFtIHtnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyIFRoZSBhcnJheSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBlbXB0eS5cbiAqL1xuZ29vZy5hcnJheS5pc0VtcHR5ID0gZnVuY3Rpb24oYXJyKSB7XG4gIHJldHVybiBhcnIubGVuZ3RoID09IDA7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBhcnJheS5cbiAqIEBwYXJhbSB7Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciBBcnJheSBvciBhcnJheSBsaWtlIG9iamVjdCB0byBjbGVhci5cbiAqL1xuZ29vZy5hcnJheS5jbGVhciA9IGZ1bmN0aW9uKGFycikge1xuICAvLyBGb3Igbm9uIHJlYWwgYXJyYXlzIHdlIGRvbid0IGhhdmUgdGhlIG1hZ2ljIGxlbmd0aCBzbyB3ZSBkZWxldGUgdGhlXG4gIC8vIGluZGljZXMuXG4gIGlmICghZ29vZy5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBkZWxldGUgYXJyW2ldO1xuICAgIH1cbiAgfVxuICBhcnIubGVuZ3RoID0gMDtcbn07XG5cblxuLyoqXG4gKiBQdXNoZXMgYW4gaXRlbSBpbnRvIGFuIGFycmF5LCBpZiBpdCdzIG5vdCBhbHJlYWR5IGluIHRoZSBhcnJheS5cbiAqIEBwYXJhbSB7QXJyYXk8VD59IGFyciBBcnJheSBpbnRvIHdoaWNoIHRvIGluc2VydCB0aGUgaXRlbS5cbiAqIEBwYXJhbSB7VH0gb2JqIFZhbHVlIHRvIGFkZC5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuYXJyYXkuaW5zZXJ0ID0gZnVuY3Rpb24oYXJyLCBvYmopIHtcbiAgaWYgKCFnb29nLmFycmF5LmNvbnRhaW5zKGFyciwgb2JqKSkge1xuICAgIGFyci5wdXNoKG9iaik7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBJbnNlcnRzIGFuIG9iamVjdCBhdCB0aGUgZ2l2ZW4gaW5kZXggb2YgdGhlIGFycmF5LlxuICogQHBhcmFtIHtnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyIFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0geyp9IG9iaiBUaGUgb2JqZWN0IHRvIGluc2VydC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2kgVGhlIGluZGV4IGF0IHdoaWNoIHRvIGluc2VydCB0aGUgb2JqZWN0LiBJZiBvbWl0dGVkLFxuICogICAgICB0cmVhdGVkIGFzIDAuIEEgbmVnYXRpdmUgaW5kZXggaXMgY291bnRlZCBmcm9tIHRoZSBlbmQgb2YgdGhlIGFycmF5LlxuICovXG5nb29nLmFycmF5Lmluc2VydEF0ID0gZnVuY3Rpb24oYXJyLCBvYmosIG9wdF9pKSB7XG4gIGdvb2cuYXJyYXkuc3BsaWNlKGFyciwgb3B0X2ksIDAsIG9iaik7XG59O1xuXG5cbi8qKlxuICogSW5zZXJ0cyBhdCB0aGUgZ2l2ZW4gaW5kZXggb2YgdGhlIGFycmF5LCBhbGwgZWxlbWVudHMgb2YgYW5vdGhlciBhcnJheS5cbiAqIEBwYXJhbSB7Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtnb29nLmFycmF5LkFycmF5TGlrZX0gZWxlbWVudHNUb0FkZCBUaGUgYXJyYXkgb2YgZWxlbWVudHMgdG8gYWRkLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaSBUaGUgaW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBvYmplY3QuIElmIG9taXR0ZWQsXG4gKiAgICAgIHRyZWF0ZWQgYXMgMC4gQSBuZWdhdGl2ZSBpbmRleCBpcyBjb3VudGVkIGZyb20gdGhlIGVuZCBvZiB0aGUgYXJyYXkuXG4gKi9cbmdvb2cuYXJyYXkuaW5zZXJ0QXJyYXlBdCA9IGZ1bmN0aW9uKGFyciwgZWxlbWVudHNUb0FkZCwgb3B0X2kpIHtcbiAgZ29vZy5wYXJ0aWFsKGdvb2cuYXJyYXkuc3BsaWNlLCBhcnIsIG9wdF9pLCAwKS5hcHBseShudWxsLCBlbGVtZW50c1RvQWRkKTtcbn07XG5cblxuLyoqXG4gKiBJbnNlcnRzIGFuIG9iamVjdCBpbnRvIGFuIGFycmF5IGJlZm9yZSBhIHNwZWNpZmllZCBvYmplY3QuXG4gKiBAcGFyYW0ge0FycmF5PFQ+fSBhcnIgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7VH0gb2JqIFRoZSBvYmplY3QgdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtUPX0gb3B0X29iajIgVGhlIG9iamVjdCBiZWZvcmUgd2hpY2ggb2JqIHNob3VsZCBiZSBpbnNlcnRlZC4gSWYgb2JqMlxuICogICAgIGlzIG9taXR0ZWQgb3Igbm90IGZvdW5kLCBvYmogaXMgaW5zZXJ0ZWQgYXQgdGhlIGVuZCBvZiB0aGUgYXJyYXkuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLmFycmF5Lmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uKGFyciwgb2JqLCBvcHRfb2JqMikge1xuICB2YXIgaTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMiB8fCAoaSA9IGdvb2cuYXJyYXkuaW5kZXhPZihhcnIsIG9wdF9vYmoyKSkgPCAwKSB7XG4gICAgYXJyLnB1c2gob2JqKTtcbiAgfSBlbHNlIHtcbiAgICBnb29nLmFycmF5Lmluc2VydEF0KGFyciwgb2JqLCBpKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYSBwYXJ0aWN1bGFyIHZhbHVlIGZyb20gYW4gYXJyYXkuXG4gKiBAcGFyYW0ge0FycmF5PFQ+fGdvb2cuYXJyYXkuQXJyYXlMaWtlfSBhcnIgQXJyYXkgZnJvbSB3aGljaCB0byByZW1vdmVcbiAqICAgICB2YWx1ZS5cbiAqIEBwYXJhbSB7VH0gb2JqIE9iamVjdCB0byByZW1vdmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFuIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLmFycmF5LnJlbW92ZSA9IGZ1bmN0aW9uKGFyciwgb2JqKSB7XG4gIHZhciBpID0gZ29vZy5hcnJheS5pbmRleE9mKGFyciwgb2JqKTtcbiAgdmFyIHJ2O1xuICBpZiAoKHJ2ID0gaSA+PSAwKSkge1xuICAgIGdvb2cuYXJyYXkucmVtb3ZlQXQoYXJyLCBpKTtcbiAgfVxuICByZXR1cm4gcnY7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBmcm9tIGFuIGFycmF5IHRoZSBlbGVtZW50IGF0IGluZGV4IGlcbiAqIEBwYXJhbSB7Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciBBcnJheSBvciBhcnJheSBsaWtlIG9iamVjdCBmcm9tIHdoaWNoIHRvXG4gKiAgICAgcmVtb3ZlIHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IGkgVGhlIGluZGV4IHRvIHJlbW92ZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW4gZWxlbWVudCB3YXMgcmVtb3ZlZC5cbiAqL1xuZ29vZy5hcnJheS5yZW1vdmVBdCA9IGZ1bmN0aW9uKGFyciwgaSkge1xuICBnb29nLmFzc2VydHMuYXNzZXJ0KGFyci5sZW5ndGggIT0gbnVsbCk7XG5cbiAgLy8gdXNlIGdlbmVyaWMgZm9ybSBvZiBzcGxpY2VcbiAgLy8gc3BsaWNlIHJldHVybnMgdGhlIHJlbW92ZWQgaXRlbXMgYW5kIGlmIHN1Y2Nlc3NmdWwgdGhlIGxlbmd0aCBvZiB0aGF0XG4gIC8vIHdpbGwgYmUgMVxuICByZXR1cm4gZ29vZy5hcnJheS5BUlJBWV9QUk9UT1RZUEVfLnNwbGljZS5jYWxsKGFyciwgaSwgMSkubGVuZ3RoID09IDE7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgZmlyc3QgdmFsdWUgdGhhdCBzYXRpc2ZpZXMgdGhlIGdpdmVuIGNvbmRpdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXk8VD58Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciBBcnJheSBvciBhcnJheVxuICogICAgIGxpa2Ugb2JqZWN0IG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6UywgVCwgbnVtYmVyLCA/KSA6IGJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGxcbiAqICAgICBmb3IgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvblxuICogICAgIHRha2VzIDMgYXJndW1lbnRzICh0aGUgZWxlbWVudCwgdGhlIGluZGV4IGFuZCB0aGUgYXJyYXkpIGFuZCBzaG91bGRcbiAqICAgICByZXR1cm4gYSBib29sZWFuLlxuICogQHBhcmFtIHtTPX0gb3B0X29iaiBBbiBvcHRpb25hbCBcInRoaXNcIiBjb250ZXh0IGZvciB0aGUgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFuIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gKiBAdGVtcGxhdGUgVCxTXG4gKi9cbmdvb2cuYXJyYXkucmVtb3ZlSWYgPSBmdW5jdGlvbihhcnIsIGYsIG9wdF9vYmopIHtcbiAgdmFyIGkgPSBnb29nLmFycmF5LmZpbmRJbmRleChhcnIsIGYsIG9wdF9vYmopO1xuICBpZiAoaSA+PSAwKSB7XG4gICAgZ29vZy5hcnJheS5yZW1vdmVBdChhcnIsIGkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCB2YWx1ZXMgdGhhdCBzYXRpc2Z5IHRoZSBnaXZlbiBjb25kaXRpb24uXG4gKiBAcGFyYW0ge0FycmF5PFQ+fGdvb2cuYXJyYXkuQXJyYXlMaWtlfSBhcnIgQXJyYXkgb3IgYXJyYXlcbiAqICAgICBsaWtlIG9iamVjdCBvdmVyIHdoaWNoIHRvIGl0ZXJhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbih0aGlzOlMsIFQsIG51bWJlciwgPykgOiBib29sZWFufSBmIFRoZSBmdW5jdGlvbiB0byBjYWxsXG4gKiAgICAgZm9yIGV2ZXJ5IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb25cbiAqICAgICB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsIHRoZSBpbmRleCBhbmQgdGhlIGFycmF5KSBhbmQgc2hvdWxkXG4gKiAgICAgcmV0dXJuIGEgYm9vbGVhbi5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogQW4gb3B0aW9uYWwgXCJ0aGlzXCIgY29udGV4dCBmb3IgdGhlIGZ1bmN0aW9uLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGl0ZW1zIHJlbW92ZWRcbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZ29vZy5hcnJheS5yZW1vdmVBbGxJZiA9IGZ1bmN0aW9uKGFyciwgZiwgb3B0X29iaikge1xuICB2YXIgcmVtb3ZlZENvdW50ID0gMDtcbiAgZ29vZy5hcnJheS5mb3JFYWNoUmlnaHQoYXJyLCBmdW5jdGlvbih2YWwsIGluZGV4KSB7XG4gICAgaWYgKGYuY2FsbChvcHRfb2JqLCB2YWwsIGluZGV4LCBhcnIpKSB7XG4gICAgICBpZiAoZ29vZy5hcnJheS5yZW1vdmVBdChhcnIsIGluZGV4KSkge1xuICAgICAgICByZW1vdmVkQ291bnQrKztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVtb3ZlZENvdW50O1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgYXJyYXkgdGhhdCBpcyB0aGUgcmVzdWx0IG9mIGpvaW5pbmcgdGhlIGFyZ3VtZW50cy4gIElmIGFycmF5c1xuICogYXJlIHBhc3NlZCB0aGVuIHRoZWlyIGl0ZW1zIGFyZSBhZGRlZCwgaG93ZXZlciwgaWYgbm9uLWFycmF5cyBhcmUgcGFzc2VkIHRoZXlcbiAqIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHJldHVybiBhcnJheSBhcyBpcy5cbiAqXG4gKiBOb3RlIHRoYXQgQXJyYXlMaWtlIG9iamVjdHMgd2lsbCBiZSBhZGRlZCBhcyBpcywgcmF0aGVyIHRoYW4gaGF2aW5nIHRoZWlyXG4gKiBpdGVtcyBhZGRlZC5cbiAqXG4gKiBnb29nLmFycmF5LmNvbmNhdChbMSwgMl0sIFszLCA0XSkgLT4gWzEsIDIsIDMsIDRdXG4gKiBnb29nLmFycmF5LmNvbmNhdCgwLCBbMSwgMl0pIC0+IFswLCAxLCAyXVxuICogZ29vZy5hcnJheS5jb25jYXQoWzEsIDJdLCBudWxsKSAtPiBbMSwgMiwgbnVsbF1cbiAqXG4gKiBUaGVyZSBpcyBidWcgaW4gYWxsIGN1cnJlbnQgdmVyc2lvbnMgb2YgSUUgKDYsIDcgYW5kIDgpIHdoZXJlIGFycmF5cyBjcmVhdGVkXG4gKiBpbiBhbiBpZnJhbWUgYmVjb21lIGNvcnJ1cHRlZCBzb29uIChub3QgaW1tZWRpYXRlbHkpIGFmdGVyIHRoZSBpZnJhbWUgaXNcbiAqIGRlc3Ryb3llZC4gVGhpcyBpcyBjb21tb24gaWYgbG9hZGluZyBkYXRhIHZpYSBnb29nLm5ldC5JZnJhbWVJbywgZm9yIGV4YW1wbGUuXG4gKiBUaGlzIGNvcnJ1cHRpb24gb25seSBhZmZlY3RzIHRoZSBjb25jYXQgbWV0aG9kIHdoaWNoIHdpbGwgc3RhcnQgdGhyb3dpbmdcbiAqIENhdGFzdHJvcGhpYyBFcnJvcnMgKCMtMjE0NzQxODExMykuXG4gKlxuICogU2VlIGh0dHA6Ly9lbmRvZmxvdy5jb20vc2NyYXRjaC9jb3JydXB0ZWQtYXJyYXlzLmh0bWwgZm9yIGEgdGVzdCBjYXNlLlxuICpcbiAqIEludGVybmFsbHkgZ29vZy5hcnJheSBzaG91bGQgdXNlIHRoaXMsIHNvIHRoYXQgYWxsIG1ldGhvZHMgd2lsbCBjb250aW51ZSB0b1xuICogd29yayBvbiB0aGVzZSBicm9rZW4gYXJyYXkgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIEl0ZW1zIHRvIGNvbmNhdGVuYXRlLiAgQXJyYXlzIHdpbGwgaGF2ZSBlYWNoIGl0ZW1cbiAqICAgICBhZGRlZCwgd2hpbGUgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyB3aWxsIGJlIGFkZGVkIGFzIGlzLlxuICogQHJldHVybiB7IUFycmF5PD8+fSBUaGUgbmV3IHJlc3VsdGFudCBhcnJheS5cbiAqL1xuZ29vZy5hcnJheS5jb25jYXQgPSBmdW5jdGlvbih2YXJfYXJncykge1xuICByZXR1cm4gZ29vZy5hcnJheS5BUlJBWV9QUk9UT1RZUEVfLmNvbmNhdC5hcHBseShcbiAgICAgIGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXywgYXJndW1lbnRzKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGFycmF5IHRoYXQgY29udGFpbnMgdGhlIGNvbnRlbnRzIG9mIGFsbCB0aGUgYXJyYXlzIHBhc3NlZC5cbiAqIEBwYXJhbSB7Li4uIUFycmF5PFQ+fSB2YXJfYXJnc1xuICogQHJldHVybiB7IUFycmF5PFQ+fVxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5hcnJheS5qb2luID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcbiAgcmV0dXJuIGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXy5jb25jYXQuYXBwbHkoXG4gICAgICBnb29nLmFycmF5LkFSUkFZX1BST1RPVFlQRV8sIGFyZ3VtZW50cyk7XG59O1xuXG5cbi8qKlxuICogQ29udmVydHMgYW4gb2JqZWN0IHRvIGFuIGFycmF5LlxuICogQHBhcmFtIHtBcnJheTxUPnxnb29nLmFycmF5LkFycmF5TGlrZX0gb2JqZWN0ICBUaGUgb2JqZWN0IHRvIGNvbnZlcnQgdG8gYW5cbiAqICAgICBhcnJheS5cbiAqIEByZXR1cm4geyFBcnJheTxUPn0gVGhlIG9iamVjdCBjb252ZXJ0ZWQgaW50byBhbiBhcnJheS4gSWYgb2JqZWN0IGhhcyBhXG4gKiAgICAgbGVuZ3RoIHByb3BlcnR5LCBldmVyeSBwcm9wZXJ0eSBpbmRleGVkIHdpdGggYSBub24tbmVnYXRpdmUgbnVtYmVyXG4gKiAgICAgbGVzcyB0aGFuIGxlbmd0aCB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHQuIElmIG9iamVjdCBkb2VzIG5vdFxuICogICAgIGhhdmUgYSBsZW5ndGggcHJvcGVydHksIGFuIGVtcHR5IGFycmF5IHdpbGwgYmUgcmV0dXJuZWQuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLmFycmF5LnRvQXJyYXkgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgdmFyIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7XG5cbiAgLy8gSWYgbGVuZ3RoIGlzIG5vdCBhIG51bWJlciB0aGUgZm9sbG93aW5nIGl0IGZhbHNlLiBUaGlzIGNhc2UgaXMga2VwdCBmb3JcbiAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgc2luY2UgdGhlcmUgYXJlIGNhbGxlcnMgdGhhdCBwYXNzIG9iamVjdHMgdGhhdCBhcmVcbiAgLy8gbm90IGFycmF5IGxpa2UuXG4gIGlmIChsZW5ndGggPiAwKSB7XG4gICAgdmFyIHJ2ID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcnZbaV0gPSBvYmplY3RbaV07XG4gICAgfVxuICAgIHJldHVybiBydjtcbiAgfVxuICByZXR1cm4gW107XG59O1xuXG5cbi8qKlxuICogRG9lcyBhIHNoYWxsb3cgY29weSBvZiBhbiBhcnJheS5cbiAqIEBwYXJhbSB7QXJyYXk8VD58Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciAgQXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QgdG9cbiAqICAgICBjbG9uZS5cbiAqIEByZXR1cm4geyFBcnJheTxUPn0gQ2xvbmUgb2YgdGhlIGlucHV0IGFycmF5LlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5hcnJheS5jbG9uZSA9IGdvb2cuYXJyYXkudG9BcnJheTtcblxuXG4vKipcbiAqIEV4dGVuZHMgYW4gYXJyYXkgd2l0aCBhbm90aGVyIGFycmF5LCBlbGVtZW50LCBvciBcImFycmF5IGxpa2VcIiBvYmplY3QuXG4gKiBUaGlzIGZ1bmN0aW9uIG9wZXJhdGVzICdpbi1wbGFjZScsIGl0IGRvZXMgbm90IGNyZWF0ZSBhIG5ldyBBcnJheS5cbiAqXG4gKiBFeGFtcGxlOlxuICogdmFyIGEgPSBbXTtcbiAqIGdvb2cuYXJyYXkuZXh0ZW5kKGEsIFswLCAxXSk7XG4gKiBhOyAvLyBbMCwgMV1cbiAqIGdvb2cuYXJyYXkuZXh0ZW5kKGEsIDIpO1xuICogYTsgLy8gWzAsIDEsIDJdXG4gKlxuICogQHBhcmFtIHtBcnJheTxWQUxVRT59IGFycjEgIFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0gey4uLihBcnJheTxWQUxVRT58VkFMVUUpfSB2YXJfYXJncyBUaGUgZWxlbWVudHMgb3IgYXJyYXlzIG9mIGVsZW1lbnRzXG4gKiAgICAgdG8gYWRkIHRvIGFycjEuXG4gKiBAdGVtcGxhdGUgVkFMVUVcbiAqL1xuZ29vZy5hcnJheS5leHRlbmQgPSBmdW5jdGlvbihhcnIxLCB2YXJfYXJncykge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhcnIyID0gYXJndW1lbnRzW2ldO1xuICAgIGlmIChnb29nLmlzQXJyYXlMaWtlKGFycjIpKSB7XG4gICAgICB2YXIgbGVuMSA9IGFycjEubGVuZ3RoIHx8IDA7XG4gICAgICB2YXIgbGVuMiA9IGFycjIubGVuZ3RoIHx8IDA7XG4gICAgICBhcnIxLmxlbmd0aCA9IGxlbjEgKyBsZW4yO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW4yOyBqKyspIHtcbiAgICAgICAgYXJyMVtsZW4xICsgal0gPSBhcnIyW2pdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhcnIxLnB1c2goYXJyMik7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogQWRkcyBvciByZW1vdmVzIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkuIFRoaXMgaXMgYSBnZW5lcmljIHZlcnNpb24gb2YgQXJyYXlcbiAqIHNwbGljZS4gVGhpcyBtZWFucyB0aGF0IGl0IG1pZ2h0IHdvcmsgb24gb3RoZXIgb2JqZWN0cyBzaW1pbGFyIHRvIGFycmF5cyxcbiAqIHN1Y2ggYXMgdGhlIGFyZ3VtZW50cyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtBcnJheTxUPnxnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyIFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge251bWJlcnx1bmRlZmluZWR9IGluZGV4IFRoZSBpbmRleCBhdCB3aGljaCB0byBzdGFydCBjaGFuZ2luZyB0aGVcbiAqICAgICBhcnJheS4gSWYgbm90IGRlZmluZWQsIHRyZWF0ZWQgYXMgMC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBob3dNYW55IEhvdyBtYW55IGVsZW1lbnRzIHRvIHJlbW92ZSAoMCBtZWFucyBubyByZW1vdmFsLiBBXG4gKiAgICAgdmFsdWUgYmVsb3cgMCBpcyB0cmVhdGVkIGFzIHplcm8gYW5kIHNvIGlzIGFueSBvdGhlciBub24gbnVtYmVyLiBOdW1iZXJzXG4gKiAgICAgYXJlIGZsb29yZWQpLlxuICogQHBhcmFtIHsuLi5UfSB2YXJfYXJncyBPcHRpb25hbCwgYWRkaXRpb25hbCBlbGVtZW50cyB0byBpbnNlcnQgaW50byB0aGVcbiAqICAgICBhcnJheS5cbiAqIEByZXR1cm4geyFBcnJheTxUPn0gdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLmFycmF5LnNwbGljZSA9IGZ1bmN0aW9uKGFyciwgaW5kZXgsIGhvd01hbnksIHZhcl9hcmdzKSB7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoYXJyLmxlbmd0aCAhPSBudWxsKTtcblxuICByZXR1cm4gZ29vZy5hcnJheS5BUlJBWV9QUk9UT1RZUEVfLnNwbGljZS5hcHBseShcbiAgICAgIGFyciwgZ29vZy5hcnJheS5zbGljZShhcmd1bWVudHMsIDEpKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGFycmF5IGZyb20gYSBzZWdtZW50IG9mIGFuIGFycmF5LiBUaGlzIGlzIGEgZ2VuZXJpYyB2ZXJzaW9uIG9mXG4gKiBBcnJheSBzbGljZS4gVGhpcyBtZWFucyB0aGF0IGl0IG1pZ2h0IHdvcmsgb24gb3RoZXIgb2JqZWN0cyBzaW1pbGFyIHRvXG4gKiBhcnJheXMsIHN1Y2ggYXMgdGhlIGFyZ3VtZW50cyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtBcnJheTxUPnxnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyIFRoZSBhcnJheSBmcm9tXG4gKiB3aGljaCB0byBjb3B5IGEgc2VnbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IGVsZW1lbnQgdG8gY29weS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2VuZCBUaGUgaW5kZXggYWZ0ZXIgdGhlIGxhc3QgZWxlbWVudCB0byBjb3B5LlxuICogQHJldHVybiB7IUFycmF5PFQ+fSBBIG5ldyBhcnJheSBjb250YWluaW5nIHRoZSBzcGVjaWZpZWQgc2VnbWVudCBvZiB0aGVcbiAqICAgICBvcmlnaW5hbCBhcnJheS5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuYXJyYXkuc2xpY2UgPSBmdW5jdGlvbihhcnIsIHN0YXJ0LCBvcHRfZW5kKSB7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoYXJyLmxlbmd0aCAhPSBudWxsKTtcblxuICAvLyBwYXNzaW5nIDEgYXJnIHRvIHNsaWNlIGlzIG5vdCB0aGUgc2FtZSBhcyBwYXNzaW5nIDIgd2hlcmUgdGhlIHNlY29uZCBpc1xuICAvLyBudWxsIG9yIHVuZGVmaW5lZCAoaW4gdGhhdCBjYXNlIHRoZSBzZWNvbmQgYXJndW1lbnQgaXMgdHJlYXRlZCBhcyAwKS5cbiAgLy8gd2UgY291bGQgdXNlIHNsaWNlIG9uIHRoZSBhcmd1bWVudHMgb2JqZWN0IGFuZCB0aGVuIHVzZSBhcHBseSBpbnN0ZWFkIG9mXG4gIC8vIHRlc3RpbmcgdGhlIGxlbmd0aFxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAyKSB7XG4gICAgcmV0dXJuIGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXy5zbGljZS5jYWxsKGFyciwgc3RhcnQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnb29nLmFycmF5LkFSUkFZX1BST1RPVFlQRV8uc2xpY2UuY2FsbChhcnIsIHN0YXJ0LCBvcHRfZW5kKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGR1cGxpY2F0ZXMgZnJvbSBhbiBhcnJheSAocmV0YWluaW5nIG9ubHkgdGhlIGZpcnN0XG4gKiBvY2N1cnJlbmNlIG9mIGVhY2ggYXJyYXkgZWxlbWVudCkuICBUaGlzIGZ1bmN0aW9uIG1vZGlmaWVzIHRoZVxuICogYXJyYXkgaW4gcGxhY2UgYW5kIGRvZXNuJ3QgY2hhbmdlIHRoZSBvcmRlciBvZiB0aGUgbm9uLWR1cGxpY2F0ZSBpdGVtcy5cbiAqXG4gKiBGb3Igb2JqZWN0cywgZHVwbGljYXRlcyBhcmUgaWRlbnRpZmllZCBhcyBoYXZpbmcgdGhlIHNhbWUgdW5pcXVlIElEIGFzXG4gKiBkZWZpbmVkIGJ5IHtAbGluayBnb29nLmdldFVpZH0uXG4gKlxuICogQWx0ZXJuYXRpdmVseSB5b3UgY2FuIHNwZWNpZnkgYSBjdXN0b20gaGFzaCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSB1bmlxdWVcbiAqIHZhbHVlIGZvciBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5IGl0IHNob3VsZCBjb25zaWRlciB1bmlxdWUuXG4gKlxuICogUnVudGltZTogTixcbiAqIFdvcnN0Y2FzZSBzcGFjZTogMk4gKG5vIGR1cGVzKVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VD58Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciBUaGUgYXJyYXkgZnJvbSB3aGljaCB0byByZW1vdmVcbiAqICAgICBkdXBsaWNhdGVzLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9ydiBBbiBvcHRpb25hbCBhcnJheSBpbiB3aGljaCB0byByZXR1cm4gdGhlIHJlc3VsdHMsXG4gKiAgICAgaW5zdGVhZCBvZiBwZXJmb3JtaW5nIHRoZSByZW1vdmFsIGlucGxhY2UuICBJZiBzcGVjaWZpZWQsIHRoZSBvcmlnaW5hbFxuICogICAgIGFycmF5IHdpbGwgcmVtYWluIHVuY2hhbmdlZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCk6c3RyaW5nPX0gb3B0X2hhc2hGbiBBbiBvcHRpb25hbCBmdW5jdGlvbiB0byB1c2UgdG9cbiAqICAgICBhcHBseSB0byBldmVyeSBpdGVtIGluIHRoZSBhcnJheS4gVGhpcyBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgdW5pcXVlXG4gKiAgICAgdmFsdWUgZm9yIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgaXQgc2hvdWxkIGNvbnNpZGVyIHVuaXF1ZS5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuYXJyYXkucmVtb3ZlRHVwbGljYXRlcyA9IGZ1bmN0aW9uKGFyciwgb3B0X3J2LCBvcHRfaGFzaEZuKSB7XG4gIHZhciByZXR1cm5BcnJheSA9IG9wdF9ydiB8fCBhcnI7XG4gIHZhciBkZWZhdWx0SGFzaEZuID0gZnVuY3Rpb24oaXRlbSkge1xuICAgIC8vIFByZWZpeCBlYWNoIHR5cGUgd2l0aCBhIHNpbmdsZSBjaGFyYWN0ZXIgcmVwcmVzZW50aW5nIHRoZSB0eXBlIHRvXG4gICAgLy8gcHJldmVudCBjb25mbGljdGluZyBrZXlzIChlLmcuIHRydWUgYW5kICd0cnVlJykuXG4gICAgcmV0dXJuIGdvb2cuaXNPYmplY3QoaXRlbSkgPyAnbycgKyBnb29nLmdldFVpZChpdGVtKSA6XG4gICAgICAgICh0eXBlb2YgaXRlbSkuY2hhckF0KDApICsgaXRlbTtcbiAgfTtcbiAgdmFyIGhhc2hGbiA9IG9wdF9oYXNoRm4gfHwgZGVmYXVsdEhhc2hGbjtcblxuICB2YXIgc2VlbiA9IHt9LCBjdXJzb3JJbnNlcnQgPSAwLCBjdXJzb3JSZWFkID0gMDtcbiAgd2hpbGUgKGN1cnNvclJlYWQgPCBhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBhcnJbY3Vyc29yUmVhZCsrXTtcbiAgICB2YXIga2V5ID0gaGFzaEZuKGN1cnJlbnQpO1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNlZW4sIGtleSkpIHtcbiAgICAgIHNlZW5ba2V5XSA9IHRydWU7XG4gICAgICByZXR1cm5BcnJheVtjdXJzb3JJbnNlcnQrK10gPSBjdXJyZW50O1xuICAgIH1cbiAgfVxuICByZXR1cm5BcnJheS5sZW5ndGggPSBjdXJzb3JJbnNlcnQ7XG59O1xuXG5cbi8qKlxuICogU2VhcmNoZXMgdGhlIHNwZWNpZmllZCBhcnJheSBmb3IgdGhlIHNwZWNpZmllZCB0YXJnZXQgdXNpbmcgdGhlIGJpbmFyeVxuICogc2VhcmNoIGFsZ29yaXRobS4gIElmIG5vIG9wdF9jb21wYXJlRm4gaXMgc3BlY2lmaWVkLCBlbGVtZW50cyBhcmUgY29tcGFyZWRcbiAqIHVzaW5nIDxjb2RlPmdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmU8L2NvZGU+LCB3aGljaCBjb21wYXJlcyB0aGUgZWxlbWVudHNcbiAqIHVzaW5nIHRoZSBidWlsdCBpbiA8IGFuZCA+IG9wZXJhdG9ycy4gIFRoaXMgd2lsbCBwcm9kdWNlIHRoZSBleHBlY3RlZFxuICogYmVoYXZpb3IgZm9yIGhvbW9nZW5lb3VzIGFycmF5cyBvZiBTdHJpbmcocykgYW5kIE51bWJlcihzKS4gVGhlIGFycmF5XG4gKiBzcGVjaWZpZWQgPGI+bXVzdDwvYj4gYmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciAoYXMgZGVmaW5lZCBieSB0aGVcbiAqIGNvbXBhcmlzb24gZnVuY3Rpb24pLiAgSWYgdGhlIGFycmF5IGlzIG5vdCBzb3J0ZWQsIHJlc3VsdHMgYXJlIHVuZGVmaW5lZC5cbiAqIElmIHRoZSBhcnJheSBjb250YWlucyBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgdGhlIHNwZWNpZmllZCB0YXJnZXQgdmFsdWUsIGFueVxuICogb2YgdGhlc2UgaW5zdGFuY2VzIG1heSBiZSBmb3VuZC5cbiAqXG4gKiBSdW50aW1lOiBPKGxvZyBuKVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VkFMVUU+fGdvb2cuYXJyYXkuQXJyYXlMaWtlfSBhcnIgVGhlIGFycmF5IHRvIGJlIHNlYXJjaGVkLlxuICogQHBhcmFtIHtUQVJHRVR9IHRhcmdldCBUaGUgc291Z2h0IHZhbHVlLlxuICogQHBhcmFtIHtmdW5jdGlvbihUQVJHRVQsIFZBTFVFKTogbnVtYmVyPX0gb3B0X2NvbXBhcmVGbiBPcHRpb25hbCBjb21wYXJpc29uXG4gKiAgICAgZnVuY3Rpb24gYnkgd2hpY2ggdGhlIGFycmF5IGlzIG9yZGVyZWQuIFNob3VsZCB0YWtlIDIgYXJndW1lbnRzIHRvXG4gKiAgICAgY29tcGFyZSwgYW5kIHJldHVybiBhIG5lZ2F0aXZlIG51bWJlciwgemVybywgb3IgYSBwb3NpdGl2ZSBudW1iZXJcbiAqICAgICBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbGVzcyB0aGFuLCBlcXVhbCB0bywgb3JcbiAqICAgICBncmVhdGVyIHRoYW4gdGhlIHNlY29uZC5cbiAqIEByZXR1cm4ge251bWJlcn0gTG93ZXN0IGluZGV4IG9mIHRoZSB0YXJnZXQgdmFsdWUgaWYgZm91bmQsIG90aGVyd2lzZVxuICogICAgICgtKGluc2VydGlvbiBwb2ludCkgLSAxKS4gVGhlIGluc2VydGlvbiBwb2ludCBpcyB3aGVyZSB0aGUgdmFsdWUgc2hvdWxkXG4gKiAgICAgYmUgaW5zZXJ0ZWQgaW50byBhcnIgdG8gcHJlc2VydmUgdGhlIHNvcnRlZCBwcm9wZXJ0eS4gIFJldHVybiB2YWx1ZSA+PSAwXG4gKiAgICAgaWZmIHRhcmdldCBpcyBmb3VuZC5cbiAqIEB0ZW1wbGF0ZSBUQVJHRVQsIFZBTFVFXG4gKi9cbmdvb2cuYXJyYXkuYmluYXJ5U2VhcmNoID0gZnVuY3Rpb24oYXJyLCB0YXJnZXQsIG9wdF9jb21wYXJlRm4pIHtcbiAgcmV0dXJuIGdvb2cuYXJyYXkuYmluYXJ5U2VhcmNoXyhhcnIsXG4gICAgICBvcHRfY29tcGFyZUZuIHx8IGdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmUsIGZhbHNlIC8qIGlzRXZhbHVhdG9yICovLFxuICAgICAgdGFyZ2V0KTtcbn07XG5cblxuLyoqXG4gKiBTZWxlY3RzIGFuIGluZGV4IGluIHRoZSBzcGVjaWZpZWQgYXJyYXkgdXNpbmcgdGhlIGJpbmFyeSBzZWFyY2ggYWxnb3JpdGhtLlxuICogVGhlIGV2YWx1YXRvciByZWNlaXZlcyBhbiBlbGVtZW50IGFuZCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGRlc2lyZWQgaW5kZXhcbiAqIGlzIGJlZm9yZSwgYXQsIG9yIGFmdGVyIGl0LiAgVGhlIGV2YWx1YXRvciBtdXN0IGJlIGNvbnNpc3RlbnQgKGZvcm1hbGx5LFxuICogZ29vZy5hcnJheS5tYXAoZ29vZy5hcnJheS5tYXAoYXJyLCBldmFsdWF0b3IsIG9wdF9vYmopLCBnb29nLm1hdGguc2lnbilcbiAqIG11c3QgYmUgbW9ub3RvbmljYWxseSBub24taW5jcmVhc2luZykuXG4gKlxuICogUnVudGltZTogTyhsb2cgbilcbiAqXG4gKiBAcGFyYW0ge0FycmF5PFZBTFVFPnxnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyIFRoZSBhcnJheSB0byBiZSBzZWFyY2hlZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpUSElTLCBWQUxVRSwgbnVtYmVyLCA/KTogbnVtYmVyfSBldmFsdWF0b3JcbiAqICAgICBFdmFsdWF0b3IgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsIHRoZSBpbmRleCBhbmRcbiAqICAgICB0aGUgYXJyYXkpLiBTaG91bGQgcmV0dXJuIGEgbmVnYXRpdmUgbnVtYmVyLCB6ZXJvLCBvciBhIHBvc2l0aXZlIG51bWJlclxuICogICAgIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBkZXNpcmVkIGluZGV4IGlzIGJlZm9yZSwgYXQsIG9yIGFmdGVyIHRoZVxuICogICAgIGVsZW1lbnQgcGFzc2VkIHRvIGl0LlxuICogQHBhcmFtIHtUSElTPX0gb3B0X29iaiBUaGUgb2JqZWN0IHRvIGJlIHVzZWQgYXMgdGhlIHZhbHVlIG9mICd0aGlzJ1xuICogICAgIHdpdGhpbiBldmFsdWF0b3IuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEluZGV4IG9mIHRoZSBsZWZ0bW9zdCBlbGVtZW50IG1hdGNoZWQgYnkgdGhlIGV2YWx1YXRvciwgaWZcbiAqICAgICBzdWNoIGV4aXN0czsgb3RoZXJ3aXNlICgtKGluc2VydGlvbiBwb2ludCkgLSAxKS4gVGhlIGluc2VydGlvbiBwb2ludCBpc1xuICogICAgIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBmb3Igd2hpY2ggdGhlIGV2YWx1YXRvciByZXR1cm5zIG5lZ2F0aXZlLFxuICogICAgIG9yIGFyci5sZW5ndGggaWYgbm8gc3VjaCBlbGVtZW50IGV4aXN0cy4gVGhlIHJldHVybiB2YWx1ZSBpcyBub24tbmVnYXRpdmVcbiAqICAgICBpZmYgYSBtYXRjaCBpcyBmb3VuZC5cbiAqIEB0ZW1wbGF0ZSBUSElTLCBWQUxVRVxuICovXG5nb29nLmFycmF5LmJpbmFyeVNlbGVjdCA9IGZ1bmN0aW9uKGFyciwgZXZhbHVhdG9yLCBvcHRfb2JqKSB7XG4gIHJldHVybiBnb29nLmFycmF5LmJpbmFyeVNlYXJjaF8oYXJyLCBldmFsdWF0b3IsIHRydWUgLyogaXNFdmFsdWF0b3IgKi8sXG4gICAgICB1bmRlZmluZWQgLyogb3B0X3RhcmdldCAqLywgb3B0X29iaik7XG59O1xuXG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgYSBiaW5hcnkgc2VhcmNoIGFsZ29yaXRobSB3aGljaCBrbm93cyBob3cgdG8gdXNlIGJvdGhcbiAqIGNvbXBhcmlzb24gZnVuY3Rpb25zIGFuZCBldmFsdWF0b3JzLiBJZiBhbiBldmFsdWF0b3IgaXMgcHJvdmlkZWQsIHdpbGwgY2FsbFxuICogdGhlIGV2YWx1YXRvciB3aXRoIHRoZSBnaXZlbiBvcHRpb25hbCBkYXRhIG9iamVjdCwgY29uZm9ybWluZyB0byB0aGVcbiAqIGludGVyZmFjZSBkZWZpbmVkIGluIGJpbmFyeVNlbGVjdC4gT3RoZXJ3aXNlLCBpZiBhIGNvbXBhcmlzb24gZnVuY3Rpb24gaXNcbiAqIHByb3ZpZGVkLCB3aWxsIGNhbGwgdGhlIGNvbXBhcmlzb24gZnVuY3Rpb24gYWdhaW5zdCB0aGUgZ2l2ZW4gZGF0YSBvYmplY3QuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBwdXJwb3NlZnVsbHkgZG9lcyBub3QgdXNlIGdvb2cuYmluZCBvciBnb29nLnBhcnRpYWwgZm9yXG4gKiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICpcbiAqIFJ1bnRpbWU6IE8obG9nIG4pXG4gKlxuICogQHBhcmFtIHtBcnJheTxWQUxVRT58Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciBUaGUgYXJyYXkgdG8gYmUgc2VhcmNoZWQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRBUkdFVCwgVkFMVUUpOiBudW1iZXJ8XG4gKiAgICAgICAgIGZ1bmN0aW9uKHRoaXM6VEhJUywgVkFMVUUsIG51bWJlciwgPyk6IG51bWJlcn0gY29tcGFyZUZuIEVpdGhlciBhblxuICogICAgIGV2YWx1YXRvciBvciBhIGNvbXBhcmlzb24gZnVuY3Rpb24sIGFzIGRlZmluZWQgYnkgYmluYXJ5U2VhcmNoXG4gKiAgICAgYW5kIGJpbmFyeVNlbGVjdCBhYm92ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNFdmFsdWF0b3IgV2hldGhlciB0aGUgZnVuY3Rpb24gaXMgYW4gZXZhbHVhdG9yIG9yIGFcbiAqICAgICBjb21wYXJpc29uIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtUQVJHRVQ9fSBvcHRfdGFyZ2V0IElmIHRoZSBmdW5jdGlvbiBpcyBhIGNvbXBhcmlzb24gZnVuY3Rpb24sIHRoZW5cbiAqICAgICB0aGlzIGlzIHRoZSB0YXJnZXQgdG8gYmluYXJ5IHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge1RISVM9fSBvcHRfc2VsZk9iaiBJZiB0aGUgZnVuY3Rpb24gaXMgYW4gZXZhbHVhdG9yLCB0aGlzIGlzIGFuXG4gICogICAgb3B0aW9uYWwgdGhpcyBvYmplY3QgZm9yIHRoZSBldmFsdWF0b3IuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IExvd2VzdCBpbmRleCBvZiB0aGUgdGFyZ2V0IHZhbHVlIGlmIGZvdW5kLCBvdGhlcndpc2VcbiAqICAgICAoLShpbnNlcnRpb24gcG9pbnQpIC0gMSkuIFRoZSBpbnNlcnRpb24gcG9pbnQgaXMgd2hlcmUgdGhlIHZhbHVlIHNob3VsZFxuICogICAgIGJlIGluc2VydGVkIGludG8gYXJyIHRvIHByZXNlcnZlIHRoZSBzb3J0ZWQgcHJvcGVydHkuICBSZXR1cm4gdmFsdWUgPj0gMFxuICogICAgIGlmZiB0YXJnZXQgaXMgZm91bmQuXG4gKiBAdGVtcGxhdGUgVEhJUywgVkFMVUUsIFRBUkdFVFxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5hcnJheS5iaW5hcnlTZWFyY2hfID0gZnVuY3Rpb24oYXJyLCBjb21wYXJlRm4sIGlzRXZhbHVhdG9yLCBvcHRfdGFyZ2V0LFxuICAgIG9wdF9zZWxmT2JqKSB7XG4gIHZhciBsZWZ0ID0gMDsgIC8vIGluY2x1c2l2ZVxuICB2YXIgcmlnaHQgPSBhcnIubGVuZ3RoOyAgLy8gZXhjbHVzaXZlXG4gIHZhciBmb3VuZDtcbiAgd2hpbGUgKGxlZnQgPCByaWdodCkge1xuICAgIHZhciBtaWRkbGUgPSAobGVmdCArIHJpZ2h0KSA+PiAxO1xuICAgIHZhciBjb21wYXJlUmVzdWx0O1xuICAgIGlmIChpc0V2YWx1YXRvcikge1xuICAgICAgY29tcGFyZVJlc3VsdCA9IGNvbXBhcmVGbi5jYWxsKG9wdF9zZWxmT2JqLCBhcnJbbWlkZGxlXSwgbWlkZGxlLCBhcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wYXJlUmVzdWx0ID0gY29tcGFyZUZuKG9wdF90YXJnZXQsIGFyclttaWRkbGVdKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVSZXN1bHQgPiAwKSB7XG4gICAgICBsZWZ0ID0gbWlkZGxlICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmlnaHQgPSBtaWRkbGU7XG4gICAgICAvLyBXZSBhcmUgbG9va2luZyBmb3IgdGhlIGxvd2VzdCBpbmRleCBzbyB3ZSBjYW4ndCByZXR1cm4gaW1tZWRpYXRlbHkuXG4gICAgICBmb3VuZCA9ICFjb21wYXJlUmVzdWx0O1xuICAgIH1cbiAgfVxuICAvLyBsZWZ0IGlzIHRoZSBpbmRleCBpZiBmb3VuZCwgb3IgdGhlIGluc2VydGlvbiBwb2ludCBvdGhlcndpc2UuXG4gIC8vIH5sZWZ0IGlzIGEgc2hvcnRoYW5kIGZvciAtbGVmdCAtIDEuXG4gIHJldHVybiBmb3VuZCA/IGxlZnQgOiB+bGVmdDtcbn07XG5cblxuLyoqXG4gKiBTb3J0cyB0aGUgc3BlY2lmaWVkIGFycmF5IGludG8gYXNjZW5kaW5nIG9yZGVyLiAgSWYgbm8gb3B0X2NvbXBhcmVGbiBpc1xuICogc3BlY2lmaWVkLCBlbGVtZW50cyBhcmUgY29tcGFyZWQgdXNpbmdcbiAqIDxjb2RlPmdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmU8L2NvZGU+LCB3aGljaCBjb21wYXJlcyB0aGUgZWxlbWVudHMgdXNpbmdcbiAqIHRoZSBidWlsdCBpbiA8IGFuZCA+IG9wZXJhdG9ycy4gIFRoaXMgd2lsbCBwcm9kdWNlIHRoZSBleHBlY3RlZCBiZWhhdmlvclxuICogZm9yIGhvbW9nZW5lb3VzIGFycmF5cyBvZiBTdHJpbmcocykgYW5kIE51bWJlcihzKSwgdW5saWtlIHRoZSBuYXRpdmUgc29ydCxcbiAqIGJ1dCB3aWxsIGdpdmUgdW5wcmVkaWN0YWJsZSByZXN1bHRzIGZvciBoZXRlcm9nZW5vdXMgbGlzdHMgb2Ygc3RyaW5ncyBhbmRcbiAqIG51bWJlcnMgd2l0aCBkaWZmZXJlbnQgbnVtYmVycyBvZiBkaWdpdHMuXG4gKlxuICogVGhpcyBzb3J0IGlzIG5vdCBndWFyYW50ZWVkIHRvIGJlIHN0YWJsZS5cbiAqXG4gKiBSdW50aW1lOiBTYW1lIGFzIDxjb2RlPkFycmF5LnByb3RvdHlwZS5zb3J0PC9jb2RlPlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VD59IGFyciBUaGUgYXJyYXkgdG8gYmUgc29ydGVkLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24oVCxUKTpudW1iZXI9fSBvcHRfY29tcGFyZUZuIE9wdGlvbmFsIGNvbXBhcmlzb25cbiAqICAgICBmdW5jdGlvbiBieSB3aGljaCB0aGVcbiAqICAgICBhcnJheSBpcyB0byBiZSBvcmRlcmVkLiBTaG91bGQgdGFrZSAyIGFyZ3VtZW50cyB0byBjb21wYXJlLCBhbmQgcmV0dXJuIGFcbiAqICAgICBuZWdhdGl2ZSBudW1iZXIsIHplcm8sIG9yIGEgcG9zaXRpdmUgbnVtYmVyIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZVxuICogICAgIGZpcnN0IGFyZ3VtZW50IGlzIGxlc3MgdGhhbiwgZXF1YWwgdG8sIG9yIGdyZWF0ZXIgdGhhbiB0aGUgc2Vjb25kLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5hcnJheS5zb3J0ID0gZnVuY3Rpb24oYXJyLCBvcHRfY29tcGFyZUZuKSB7XG4gIC8vIFRPRE8oYXJ2KTogVXBkYXRlIHR5cGUgYW5ub3RhdGlvbiBzaW5jZSBudWxsIGlzIG5vdCBhY2NlcHRlZC5cbiAgYXJyLnNvcnQob3B0X2NvbXBhcmVGbiB8fCBnb29nLmFycmF5LmRlZmF1bHRDb21wYXJlKTtcbn07XG5cblxuLyoqXG4gKiBTb3J0cyB0aGUgc3BlY2lmaWVkIGFycmF5IGludG8gYXNjZW5kaW5nIG9yZGVyIGluIGEgc3RhYmxlIHdheS4gIElmIG5vXG4gKiBvcHRfY29tcGFyZUZuIGlzIHNwZWNpZmllZCwgZWxlbWVudHMgYXJlIGNvbXBhcmVkIHVzaW5nXG4gKiA8Y29kZT5nb29nLmFycmF5LmRlZmF1bHRDb21wYXJlPC9jb2RlPiwgd2hpY2ggY29tcGFyZXMgdGhlIGVsZW1lbnRzIHVzaW5nXG4gKiB0aGUgYnVpbHQgaW4gPCBhbmQgPiBvcGVyYXRvcnMuICBUaGlzIHdpbGwgcHJvZHVjZSB0aGUgZXhwZWN0ZWQgYmVoYXZpb3JcbiAqIGZvciBob21vZ2VuZW91cyBhcnJheXMgb2YgU3RyaW5nKHMpIGFuZCBOdW1iZXIocykuXG4gKlxuICogUnVudGltZTogU2FtZSBhcyA8Y29kZT5BcnJheS5wcm90b3R5cGUuc29ydDwvY29kZT4sIHBsdXMgYW4gYWRkaXRpb25hbFxuICogTyhuKSBvdmVyaGVhZCBvZiBjb3B5aW5nIHRoZSBhcnJheSB0d2ljZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PFQ+fSBhcnIgVGhlIGFycmF5IHRvIGJlIHNvcnRlZC5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKFQsIFQpOiBudW1iZXI9fSBvcHRfY29tcGFyZUZuIE9wdGlvbmFsIGNvbXBhcmlzb24gZnVuY3Rpb25cbiAqICAgICBieSB3aGljaCB0aGUgYXJyYXkgaXMgdG8gYmUgb3JkZXJlZC4gU2hvdWxkIHRha2UgMiBhcmd1bWVudHMgdG8gY29tcGFyZSxcbiAqICAgICBhbmQgcmV0dXJuIGEgbmVnYXRpdmUgbnVtYmVyLCB6ZXJvLCBvciBhIHBvc2l0aXZlIG51bWJlciBkZXBlbmRpbmcgb25cbiAqICAgICB3aGV0aGVyIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBsZXNzIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlXG4gKiAgICAgc2Vjb25kLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5hcnJheS5zdGFibGVTb3J0ID0gZnVuY3Rpb24oYXJyLCBvcHRfY29tcGFyZUZuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgYXJyW2ldID0ge2luZGV4OiBpLCB2YWx1ZTogYXJyW2ldfTtcbiAgfVxuICB2YXIgdmFsdWVDb21wYXJlRm4gPSBvcHRfY29tcGFyZUZuIHx8IGdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmU7XG4gIGZ1bmN0aW9uIHN0YWJsZUNvbXBhcmVGbihvYmoxLCBvYmoyKSB7XG4gICAgcmV0dXJuIHZhbHVlQ29tcGFyZUZuKG9iajEudmFsdWUsIG9iajIudmFsdWUpIHx8IG9iajEuaW5kZXggLSBvYmoyLmluZGV4O1xuICB9O1xuICBnb29nLmFycmF5LnNvcnQoYXJyLCBzdGFibGVDb21wYXJlRm4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGFycltpXSA9IGFycltpXS52YWx1ZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFNvcnQgdGhlIHNwZWNpZmllZCBhcnJheSBpbnRvIGFzY2VuZGluZyBvcmRlciBiYXNlZCBvbiBpdGVtIGtleXNcbiAqIHJldHVybmVkIGJ5IHRoZSBzcGVjaWZpZWQga2V5IGZ1bmN0aW9uLlxuICogSWYgbm8gb3B0X2NvbXBhcmVGbiBpcyBzcGVjaWZpZWQsIHRoZSBrZXlzIGFyZSBjb21wYXJlZCBpbiBhc2NlbmRpbmcgb3JkZXJcbiAqIHVzaW5nIDxjb2RlPmdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmU8L2NvZGU+LlxuICpcbiAqIFJ1bnRpbWU6IE8oUyhmKG4pKSwgd2hlcmUgUyBpcyBydW50aW1lIG9mIDxjb2RlPmdvb2cuYXJyYXkuc29ydDwvY29kZT5cbiAqIGFuZCBmKG4pIGlzIHJ1bnRpbWUgb2YgdGhlIGtleSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PFQ+fSBhcnIgVGhlIGFycmF5IHRvIGJlIHNvcnRlZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCk6IEt9IGtleUZuIEZ1bmN0aW9uIHRha2luZyBhcnJheSBlbGVtZW50IGFuZCByZXR1cm5pbmdcbiAqICAgICBhIGtleSB1c2VkIGZvciBzb3J0aW5nIHRoaXMgZWxlbWVudC5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKEssIEspOiBudW1iZXI9fSBvcHRfY29tcGFyZUZuIE9wdGlvbmFsIGNvbXBhcmlzb24gZnVuY3Rpb25cbiAqICAgICBieSB3aGljaCB0aGUga2V5cyBhcmUgdG8gYmUgb3JkZXJlZC4gU2hvdWxkIHRha2UgMiBhcmd1bWVudHMgdG8gY29tcGFyZSxcbiAqICAgICBhbmQgcmV0dXJuIGEgbmVnYXRpdmUgbnVtYmVyLCB6ZXJvLCBvciBhIHBvc2l0aXZlIG51bWJlciBkZXBlbmRpbmcgb25cbiAqICAgICB3aGV0aGVyIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBsZXNzIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlXG4gKiAgICAgc2Vjb25kLlxuICogQHRlbXBsYXRlIFQsS1xuICovXG5nb29nLmFycmF5LnNvcnRCeUtleSA9IGZ1bmN0aW9uKGFyciwga2V5Rm4sIG9wdF9jb21wYXJlRm4pIHtcbiAgdmFyIGtleUNvbXBhcmVGbiA9IG9wdF9jb21wYXJlRm4gfHwgZ29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZTtcbiAgZ29vZy5hcnJheS5zb3J0KGFyciwgZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBrZXlDb21wYXJlRm4oa2V5Rm4oYSksIGtleUZuKGIpKTtcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogU29ydHMgYW4gYXJyYXkgb2Ygb2JqZWN0cyBieSB0aGUgc3BlY2lmaWVkIG9iamVjdCBrZXkgYW5kIGNvbXBhcmVcbiAqIGZ1bmN0aW9uLiBJZiBubyBjb21wYXJlIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCB0aGUga2V5IHZhbHVlcyBhcmVcbiAqIGNvbXBhcmVkIGluIGFzY2VuZGluZyBvcmRlciB1c2luZyA8Y29kZT5nb29nLmFycmF5LmRlZmF1bHRDb21wYXJlPC9jb2RlPi5cbiAqIFRoaXMgd29uJ3Qgd29yayBmb3Iga2V5cyB0aGF0IGdldCByZW5hbWVkIGJ5IHRoZSBjb21waWxlci4gU28gdXNlXG4gKiB7J2Zvbyc6IDEsICdiYXInOiAyfSByYXRoZXIgdGhhbiB7Zm9vOiAxLCBiYXI6IDJ9LlxuICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBhcnIgQW4gYXJyYXkgb2Ygb2JqZWN0cyB0byBzb3J0LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgb2JqZWN0IGtleSB0byBzb3J0IGJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbj19IG9wdF9jb21wYXJlRm4gVGhlIGZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIGtleVxuICogICAgIHZhbHVlcy5cbiAqL1xuZ29vZy5hcnJheS5zb3J0T2JqZWN0c0J5S2V5ID0gZnVuY3Rpb24oYXJyLCBrZXksIG9wdF9jb21wYXJlRm4pIHtcbiAgZ29vZy5hcnJheS5zb3J0QnlLZXkoYXJyLFxuICAgICAgZnVuY3Rpb24ob2JqKSB7IHJldHVybiBvYmpba2V5XTsgfSxcbiAgICAgIG9wdF9jb21wYXJlRm4pO1xufTtcblxuXG4vKipcbiAqIFRlbGxzIGlmIHRoZSBhcnJheSBpcyBzb3J0ZWQuXG4gKiBAcGFyYW0geyFBcnJheTxUPn0gYXJyIFRoZSBhcnJheS5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKFQsVCk6bnVtYmVyPX0gb3B0X2NvbXBhcmVGbiBGdW5jdGlvbiB0byBjb21wYXJlIHRoZVxuICogICAgIGFycmF5IGVsZW1lbnRzLlxuICogICAgIFNob3VsZCB0YWtlIDIgYXJndW1lbnRzIHRvIGNvbXBhcmUsIGFuZCByZXR1cm4gYSBuZWdhdGl2ZSBudW1iZXIsIHplcm8sXG4gKiAgICAgb3IgYSBwb3NpdGl2ZSBudW1iZXIgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGxlc3NcbiAqICAgICB0aGFuLCBlcXVhbCB0bywgb3IgZ3JlYXRlciB0aGFuIHRoZSBzZWNvbmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfc3RyaWN0IElmIHRydWUgbm8gZXF1YWwgZWxlbWVudHMgYXJlIGFsbG93ZWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBhcnJheSBpcyBzb3J0ZWQuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLmFycmF5LmlzU29ydGVkID0gZnVuY3Rpb24oYXJyLCBvcHRfY29tcGFyZUZuLCBvcHRfc3RyaWN0KSB7XG4gIHZhciBjb21wYXJlID0gb3B0X2NvbXBhcmVGbiB8fCBnb29nLmFycmF5LmRlZmF1bHRDb21wYXJlO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjb21wYXJlUmVzdWx0ID0gY29tcGFyZShhcnJbaSAtIDFdLCBhcnJbaV0pO1xuICAgIGlmIChjb21wYXJlUmVzdWx0ID4gMCB8fCBjb21wYXJlUmVzdWx0ID09IDAgJiYgb3B0X3N0cmljdCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBDb21wYXJlcyB0d28gYXJyYXlzIGZvciBlcXVhbGl0eS4gVHdvIGFycmF5cyBhcmUgY29uc2lkZXJlZCBlcXVhbCBpZiB0aGV5XG4gKiBoYXZlIHRoZSBzYW1lIGxlbmd0aCBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBlbGVtZW50cyBhcmUgZXF1YWwgYWNjb3JkaW5nIHRvXG4gKiB0aGUgY29tcGFyaXNvbiBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge2dvb2cuYXJyYXkuQXJyYXlMaWtlfSBhcnIxIFRoZSBmaXJzdCBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyMiBUaGUgc2Vjb25kIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb3B0X2VxdWFsc0ZuIE9wdGlvbmFsIGNvbXBhcmlzb24gZnVuY3Rpb24uXG4gKiAgICAgU2hvdWxkIHRha2UgMiBhcmd1bWVudHMgdG8gY29tcGFyZSwgYW5kIHJldHVybiB0cnVlIGlmIHRoZSBhcmd1bWVudHNcbiAqICAgICBhcmUgZXF1YWwuIERlZmF1bHRzIHRvIHtAbGluayBnb29nLmFycmF5LmRlZmF1bHRDb21wYXJlRXF1YWxpdHl9IHdoaWNoXG4gKiAgICAgY29tcGFyZXMgdGhlIGVsZW1lbnRzIHVzaW5nIHRoZSBidWlsdC1pbiAnPT09JyBvcGVyYXRvci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHR3byBhcnJheXMgYXJlIGVxdWFsLlxuICovXG5nb29nLmFycmF5LmVxdWFscyA9IGZ1bmN0aW9uKGFycjEsIGFycjIsIG9wdF9lcXVhbHNGbikge1xuICBpZiAoIWdvb2cuaXNBcnJheUxpa2UoYXJyMSkgfHwgIWdvb2cuaXNBcnJheUxpa2UoYXJyMikgfHxcbiAgICAgIGFycjEubGVuZ3RoICE9IGFycjIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsID0gYXJyMS5sZW5ndGg7XG4gIHZhciBlcXVhbHNGbiA9IG9wdF9lcXVhbHNGbiB8fCBnb29nLmFycmF5LmRlZmF1bHRDb21wYXJlRXF1YWxpdHk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKCFlcXVhbHNGbihhcnIxW2ldLCBhcnIyW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiAzLXdheSBhcnJheSBjb21wYXJlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHshQXJyYXk8VkFMVUU+fCFnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyMSBUaGUgZmlyc3QgYXJyYXkgdG9cbiAqICAgICBjb21wYXJlLlxuICogQHBhcmFtIHshQXJyYXk8VkFMVUU+fCFnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyMiBUaGUgc2Vjb25kIGFycmF5IHRvXG4gKiAgICAgY29tcGFyZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVkFMVUUsIFZBTFVFKTogbnVtYmVyPX0gb3B0X2NvbXBhcmVGbiBPcHRpb25hbCBjb21wYXJpc29uXG4gKiAgICAgZnVuY3Rpb24gYnkgd2hpY2ggdGhlIGFycmF5IGlzIHRvIGJlIG9yZGVyZWQuIFNob3VsZCB0YWtlIDIgYXJndW1lbnRzIHRvXG4gKiAgICAgY29tcGFyZSwgYW5kIHJldHVybiBhIG5lZ2F0aXZlIG51bWJlciwgemVybywgb3IgYSBwb3NpdGl2ZSBudW1iZXJcbiAqICAgICBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbGVzcyB0aGFuLCBlcXVhbCB0bywgb3JcbiAqICAgICBncmVhdGVyIHRoYW4gdGhlIHNlY29uZC5cbiAqIEByZXR1cm4ge251bWJlcn0gTmVnYXRpdmUgbnVtYmVyLCB6ZXJvLCBvciBhIHBvc2l0aXZlIG51bWJlciBkZXBlbmRpbmcgb25cbiAqICAgICB3aGV0aGVyIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBsZXNzIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlXG4gKiAgICAgc2Vjb25kLlxuICogQHRlbXBsYXRlIFZBTFVFXG4gKi9cbmdvb2cuYXJyYXkuY29tcGFyZTMgPSBmdW5jdGlvbihhcnIxLCBhcnIyLCBvcHRfY29tcGFyZUZuKSB7XG4gIHZhciBjb21wYXJlID0gb3B0X2NvbXBhcmVGbiB8fCBnb29nLmFycmF5LmRlZmF1bHRDb21wYXJlO1xuICB2YXIgbCA9IE1hdGgubWluKGFycjEubGVuZ3RoLCBhcnIyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNvbXBhcmUoYXJyMVtpXSwgYXJyMltpXSk7XG4gICAgaWYgKHJlc3VsdCAhPSAwKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZ29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZShhcnIxLmxlbmd0aCwgYXJyMi5sZW5ndGgpO1xufTtcblxuXG4vKipcbiAqIENvbXBhcmVzIGl0cyB0d28gYXJndW1lbnRzIGZvciBvcmRlciwgdXNpbmcgdGhlIGJ1aWx0IGluIDwgYW5kID5cbiAqIG9wZXJhdG9ycy5cbiAqIEBwYXJhbSB7VkFMVUV9IGEgVGhlIGZpcnN0IG9iamVjdCB0byBiZSBjb21wYXJlZC5cbiAqIEBwYXJhbSB7VkFMVUV9IGIgVGhlIHNlY29uZCBvYmplY3QgdG8gYmUgY29tcGFyZWQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEEgbmVnYXRpdmUgbnVtYmVyLCB6ZXJvLCBvciBhIHBvc2l0aXZlIG51bWJlciBhcyB0aGUgZmlyc3RcbiAqICAgICBhcmd1bWVudCBpcyBsZXNzIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlIHNlY29uZCxcbiAqICAgICByZXNwZWN0aXZlbHkuXG4gKiBAdGVtcGxhdGUgVkFMVUVcbiAqL1xuZ29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPiBiID8gMSA6IGEgPCBiID8gLTEgOiAwO1xufTtcblxuXG4vKipcbiAqIENvbXBhcmVzIGl0cyB0d28gYXJndW1lbnRzIGZvciBpbnZlcnNlIG9yZGVyLCB1c2luZyB0aGUgYnVpbHQgaW4gPCBhbmQgPlxuICogb3BlcmF0b3JzLlxuICogQHBhcmFtIHtWQUxVRX0gYSBUaGUgZmlyc3Qgb2JqZWN0IHRvIGJlIGNvbXBhcmVkLlxuICogQHBhcmFtIHtWQUxVRX0gYiBUaGUgc2Vjb25kIG9iamVjdCB0byBiZSBjb21wYXJlZC5cbiAqIEByZXR1cm4ge251bWJlcn0gQSBuZWdhdGl2ZSBudW1iZXIsIHplcm8sIG9yIGEgcG9zaXRpdmUgbnVtYmVyIGFzIHRoZSBmaXJzdFxuICogICAgIGFyZ3VtZW50IGlzIGdyZWF0ZXIgdGhhbiwgZXF1YWwgdG8sIG9yIGxlc3MgdGhhbiB0aGUgc2Vjb25kLFxuICogICAgIHJlc3BlY3RpdmVseS5cbiAqIEB0ZW1wbGF0ZSBWQUxVRVxuICovXG5nb29nLmFycmF5LmludmVyc2VEZWZhdWx0Q29tcGFyZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIC1nb29nLmFycmF5LmRlZmF1bHRDb21wYXJlKGEsIGIpO1xufTtcblxuXG4vKipcbiAqIENvbXBhcmVzIGl0cyB0d28gYXJndW1lbnRzIGZvciBlcXVhbGl0eSwgdXNpbmcgdGhlIGJ1aWx0IGluID09PSBvcGVyYXRvci5cbiAqIEBwYXJhbSB7Kn0gYSBUaGUgZmlyc3Qgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IGIgVGhlIHNlY29uZCBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHR3byBhcmd1bWVudHMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmVFcXVhbGl0eSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG5cbi8qKlxuICogSW5zZXJ0cyBhIHZhbHVlIGludG8gYSBzb3J0ZWQgYXJyYXkuIFRoZSBhcnJheSBpcyBub3QgbW9kaWZpZWQgaWYgdGhlXG4gKiB2YWx1ZSBpcyBhbHJlYWR5IHByZXNlbnQuXG4gKiBAcGFyYW0ge0FycmF5PFZBTFVFPnxnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7VkFMVUV9IHZhbHVlIFRoZSBvYmplY3QgdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtmdW5jdGlvbihWQUxVRSwgVkFMVUUpOiBudW1iZXI9fSBvcHRfY29tcGFyZUZuIE9wdGlvbmFsIGNvbXBhcmlzb25cbiAqICAgICBmdW5jdGlvbiBieSB3aGljaCB0aGUgYXJyYXkgaXMgb3JkZXJlZC4gU2hvdWxkIHRha2UgMiBhcmd1bWVudHMgdG9cbiAqICAgICBjb21wYXJlLCBhbmQgcmV0dXJuIGEgbmVnYXRpdmUgbnVtYmVyLCB6ZXJvLCBvciBhIHBvc2l0aXZlIG51bWJlclxuICogICAgIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBsZXNzIHRoYW4sIGVxdWFsIHRvLCBvclxuICogICAgIGdyZWF0ZXIgdGhhbiB0aGUgc2Vjb25kLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbiBlbGVtZW50IHdhcyBpbnNlcnRlZC5cbiAqIEB0ZW1wbGF0ZSBWQUxVRVxuICovXG5nb29nLmFycmF5LmJpbmFyeUluc2VydCA9IGZ1bmN0aW9uKGFycmF5LCB2YWx1ZSwgb3B0X2NvbXBhcmVGbikge1xuICB2YXIgaW5kZXggPSBnb29nLmFycmF5LmJpbmFyeVNlYXJjaChhcnJheSwgdmFsdWUsIG9wdF9jb21wYXJlRm4pO1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgZ29vZy5hcnJheS5pbnNlcnRBdChhcnJheSwgdmFsdWUsIC0oaW5kZXggKyAxKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYSB2YWx1ZSBmcm9tIGEgc29ydGVkIGFycmF5LlxuICogQHBhcmFtIHshQXJyYXk8VkFMVUU+fCFnb29nLmFycmF5LkFycmF5TGlrZX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7VkFMVUV9IHZhbHVlIFRoZSBvYmplY3QgdG8gcmVtb3ZlLlxuICogQHBhcmFtIHtmdW5jdGlvbihWQUxVRSwgVkFMVUUpOiBudW1iZXI9fSBvcHRfY29tcGFyZUZuIE9wdGlvbmFsIGNvbXBhcmlzb25cbiAqICAgICBmdW5jdGlvbiBieSB3aGljaCB0aGUgYXJyYXkgaXMgb3JkZXJlZC4gU2hvdWxkIHRha2UgMiBhcmd1bWVudHMgdG9cbiAqICAgICBjb21wYXJlLCBhbmQgcmV0dXJuIGEgbmVnYXRpdmUgbnVtYmVyLCB6ZXJvLCBvciBhIHBvc2l0aXZlIG51bWJlclxuICogICAgIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBsZXNzIHRoYW4sIGVxdWFsIHRvLCBvclxuICogICAgIGdyZWF0ZXIgdGhhbiB0aGUgc2Vjb25kLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbiBlbGVtZW50IHdhcyByZW1vdmVkLlxuICogQHRlbXBsYXRlIFZBTFVFXG4gKi9cbmdvb2cuYXJyYXkuYmluYXJ5UmVtb3ZlID0gZnVuY3Rpb24oYXJyYXksIHZhbHVlLCBvcHRfY29tcGFyZUZuKSB7XG4gIHZhciBpbmRleCA9IGdvb2cuYXJyYXkuYmluYXJ5U2VhcmNoKGFycmF5LCB2YWx1ZSwgb3B0X2NvbXBhcmVGbik7XG4gIHJldHVybiAoaW5kZXggPj0gMCkgPyBnb29nLmFycmF5LnJlbW92ZUF0KGFycmF5LCBpbmRleCkgOiBmYWxzZTtcbn07XG5cblxuLyoqXG4gKiBTcGxpdHMgYW4gYXJyYXkgaW50byBkaXNqb2ludCBidWNrZXRzIGFjY29yZGluZyB0byBhIHNwbGl0dGluZyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXk8VD59IGFycmF5IFRoZSBhcnJheS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTLCBULG51bWJlcixBcnJheTxUPik6P30gc29ydGVyIEZ1bmN0aW9uIHRvIGNhbGwgZm9yXG4gKiAgICAgZXZlcnkgZWxlbWVudC4gIFRoaXMgdGFrZXMgMyBhcmd1bWVudHMgKHRoZSBlbGVtZW50LCB0aGUgaW5kZXggYW5kIHRoZVxuICogICAgIGFycmF5KSBhbmQgbXVzdCByZXR1cm4gYSB2YWxpZCBvYmplY3Qga2V5IChhIHN0cmluZywgbnVtYmVyLCBldGMpLCBvclxuICogICAgIHVuZGVmaW5lZCwgaWYgdGhhdCBvYmplY3Qgc2hvdWxkIG5vdCBiZSBwbGFjZWQgaW4gYSBidWNrZXQuXG4gKiBAcGFyYW0ge1M9fSBvcHRfb2JqIFRoZSBvYmplY3QgdG8gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgJ3RoaXMnIHdpdGhpblxuICogICAgIHNvcnRlci5cbiAqIEByZXR1cm4geyFPYmplY3R9IEFuIG9iamVjdCwgd2l0aCBrZXlzIGJlaW5nIGFsbCBvZiB0aGUgdW5pcXVlIHJldHVybiB2YWx1ZXNcbiAqICAgICBvZiBzb3J0ZXIsIGFuZCB2YWx1ZXMgYmVpbmcgYXJyYXlzIGNvbnRhaW5pbmcgdGhlIGl0ZW1zIGZvclxuICogICAgIHdoaWNoIHRoZSBzcGxpdHRlciByZXR1cm5lZCB0aGF0IGtleS5cbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZ29vZy5hcnJheS5idWNrZXQgPSBmdW5jdGlvbihhcnJheSwgc29ydGVyLCBvcHRfb2JqKSB7XG4gIHZhciBidWNrZXRzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldO1xuICAgIHZhciBrZXkgPSBzb3J0ZXIuY2FsbChvcHRfb2JqLCB2YWx1ZSwgaSwgYXJyYXkpO1xuICAgIGlmIChnb29nLmlzRGVmKGtleSkpIHtcbiAgICAgIC8vIFB1c2ggdGhlIHZhbHVlIHRvIHRoZSByaWdodCBidWNrZXQsIGNyZWF0aW5nIGl0IGlmIG5lY2Vzc2FyeS5cbiAgICAgIHZhciBidWNrZXQgPSBidWNrZXRzW2tleV0gfHwgKGJ1Y2tldHNba2V5XSA9IFtdKTtcbiAgICAgIGJ1Y2tldC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVja2V0cztcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCBidWlsdCBmcm9tIHRoZSBwcm92aWRlZCBhcnJheSBhbmQgdGhlIGtleS1nZW5lcmF0aW9uXG4gKiBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXk8VD58Z29vZy5hcnJheS5BcnJheUxpa2V9IGFyciBBcnJheSBvciBhcnJheSBsaWtlIG9iamVjdCBvdmVyXG4gKiAgICAgd2hpY2ggdG8gaXRlcmF0ZSB3aG9zZSBlbGVtZW50cyB3aWxsIGJlIHRoZSB2YWx1ZXMgaW4gdGhlIG5ldyBvYmplY3QuXG4gKiBAcGFyYW0gez9mdW5jdGlvbih0aGlzOlMsIFQsIG51bWJlciwgPykgOiBzdHJpbmd9IGtleUZ1bmMgVGhlIGZ1bmN0aW9uIHRvXG4gKiAgICAgY2FsbCBmb3IgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsIHRoZVxuICogICAgIGluZGV4IGFuZCB0aGUgYXJyYXkpIGFuZCBzaG91bGQgcmV0dXJuIGEgc3RyaW5nIHRoYXQgd2lsbCBiZSB1c2VkIGFzIHRoZVxuICogICAgIGtleSBmb3IgdGhlIGVsZW1lbnQgaW4gdGhlIG5ldyBvYmplY3QuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIHRoZSBzYW1lXG4gKiAgICAga2V5IGZvciBtb3JlIHRoYW4gb25lIGVsZW1lbnQsIHRoZSB2YWx1ZSBmb3IgdGhhdCBrZXkgaXNcbiAqICAgICBpbXBsZW1lbnRhdGlvbi1kZWZpbmVkLlxuICogQHBhcmFtIHtTPX0gb3B0X29iaiBUaGUgb2JqZWN0IHRvIGJlIHVzZWQgYXMgdGhlIHZhbHVlIG9mICd0aGlzJ1xuICogICAgIHdpdGhpbiBrZXlGdW5jLlxuICogQHJldHVybiB7IU9iamVjdDxUPn0gVGhlIG5ldyBvYmplY3QuXG4gKiBAdGVtcGxhdGUgVCxTXG4gKi9cbmdvb2cuYXJyYXkudG9PYmplY3QgPSBmdW5jdGlvbihhcnIsIGtleUZ1bmMsIG9wdF9vYmopIHtcbiAgdmFyIHJldCA9IHt9O1xuICBnb29nLmFycmF5LmZvckVhY2goYXJyLCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIHJldFtrZXlGdW5jLmNhbGwob3B0X29iaiwgZWxlbWVudCwgaW5kZXgsIGFycildID0gZWxlbWVudDtcbiAgfSk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIHJhbmdlIG9mIG51bWJlcnMgaW4gYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi5cbiAqXG4gKiBSYW5nZSB0YWtlcyAxLCAyLCBvciAzIGFyZ3VtZW50czpcbiAqIDxwcmU+XG4gKiByYW5nZSg1KSBpcyB0aGUgc2FtZSBhcyByYW5nZSgwLCA1LCAxKSBhbmQgcHJvZHVjZXMgWzAsIDEsIDIsIDMsIDRdXG4gKiByYW5nZSgyLCA1KSBpcyB0aGUgc2FtZSBhcyByYW5nZSgyLCA1LCAxKSBhbmQgcHJvZHVjZXMgWzIsIDMsIDRdXG4gKiByYW5nZSgtMiwgLTUsIC0xKSBwcm9kdWNlcyBbLTIsIC0zLCAtNF1cbiAqIHJhbmdlKC0yLCAtNSwgMSkgcHJvZHVjZXMgW10sIHNpbmNlIHN0ZXBwaW5nIGJ5IDEgd291bGRuJ3QgZXZlciByZWFjaCAtNS5cbiAqIDwvcHJlPlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydE9yRW5kIFRoZSBzdGFydGluZyB2YWx1ZSBvZiB0aGUgcmFuZ2UgaWYgYW4gZW5kIGFyZ3VtZW50XG4gKiAgICAgaXMgcHJvdmlkZWQuIE90aGVyd2lzZSwgdGhlIHN0YXJ0IHZhbHVlIGlzIDAsIGFuZCB0aGlzIGlzIHRoZSBlbmQgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9lbmQgVGhlIG9wdGlvbmFsIGVuZCB2YWx1ZSBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9zdGVwIFRoZSBzdGVwIHNpemUgYmV0d2VlbiByYW5nZSB2YWx1ZXMuIERlZmF1bHRzIHRvIDFcbiAqICAgICBpZiBvcHRfc3RlcCBpcyB1bmRlZmluZWQgb3IgMC5cbiAqIEByZXR1cm4geyFBcnJheTxudW1iZXI+fSBBbiBhcnJheSBvZiBudW1iZXJzIGZvciB0aGUgcmVxdWVzdGVkIHJhbmdlLiBNYXkgYmVcbiAqICAgICBhbiBlbXB0eSBhcnJheSBpZiBhZGRpbmcgdGhlIHN0ZXAgd291bGQgbm90IGNvbnZlcmdlIHRvd2FyZCB0aGUgZW5kXG4gKiAgICAgdmFsdWUuXG4gKi9cbmdvb2cuYXJyYXkucmFuZ2UgPSBmdW5jdGlvbihzdGFydE9yRW5kLCBvcHRfZW5kLCBvcHRfc3RlcCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgdmFyIHN0YXJ0ID0gMDtcbiAgdmFyIGVuZCA9IHN0YXJ0T3JFbmQ7XG4gIHZhciBzdGVwID0gb3B0X3N0ZXAgfHwgMTtcbiAgaWYgKG9wdF9lbmQgIT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gc3RhcnRPckVuZDtcbiAgICBlbmQgPSBvcHRfZW5kO1xuICB9XG5cbiAgaWYgKHN0ZXAgKiAoZW5kIC0gc3RhcnQpIDwgMCkge1xuICAgIC8vIFNpZ24gbWlzbWF0Y2g6IHN0YXJ0ICsgc3RlcCB3aWxsIG5ldmVyIHJlYWNoIHRoZSBlbmQgdmFsdWUuXG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IHN0ZXApIHtcbiAgICAgIGFycmF5LnB1c2goaSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA+IGVuZDsgaSArPSBzdGVwKSB7XG4gICAgICBhcnJheS5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBjb25zaXN0aW5nIG9mIHRoZSBnaXZlbiB2YWx1ZSByZXBlYXRlZCBOIHRpbWVzLlxuICpcbiAqIEBwYXJhbSB7VkFMVUV9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXBlYXQuXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgcmVwZWF0IGNvdW50LlxuICogQHJldHVybiB7IUFycmF5PFZBTFVFPn0gQW4gYXJyYXkgd2l0aCB0aGUgcmVwZWF0ZWQgdmFsdWUuXG4gKiBAdGVtcGxhdGUgVkFMVUVcbiAqL1xuZ29vZy5hcnJheS5yZXBlYXQgPSBmdW5jdGlvbih2YWx1ZSwgbikge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBhcnJheVtpXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnNpc3Rpbmcgb2YgZXZlcnkgYXJndW1lbnQgd2l0aCBhbGwgYXJyYXlzXG4gKiBleHBhbmRlZCBpbi1wbGFjZSByZWN1cnNpdmVseS5cbiAqXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIFRoZSB2YWx1ZXMgdG8gZmxhdHRlbi5cbiAqIEByZXR1cm4geyFBcnJheTw/Pn0gQW4gYXJyYXkgY29udGFpbmluZyB0aGUgZmxhdHRlbmVkIHZhbHVlcy5cbiAqL1xuZ29vZy5hcnJheS5mbGF0dGVuID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcbiAgdmFyIENIVU5LX1NJWkUgPSA4MTkyO1xuXG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWxlbWVudCA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAoZ29vZy5pc0FycmF5KGVsZW1lbnQpKSB7XG4gICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGVsZW1lbnQubGVuZ3RoOyBjICs9IENIVU5LX1NJWkUpIHtcbiAgICAgICAgdmFyIGNodW5rID0gZ29vZy5hcnJheS5zbGljZShlbGVtZW50LCBjLCBjICsgQ0hVTktfU0laRSk7XG4gICAgICAgIHZhciByZWN1cnNlUmVzdWx0ID0gZ29vZy5hcnJheS5mbGF0dGVuLmFwcGx5KG51bGwsIGNodW5rKTtcbiAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCByZWN1cnNlUmVzdWx0Lmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2gocmVjdXJzZVJlc3VsdFtyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnB1c2goZWxlbWVudCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKlxuICogUm90YXRlcyBhbiBhcnJheSBpbi1wbGFjZS4gQWZ0ZXIgY2FsbGluZyB0aGlzIG1ldGhvZCwgdGhlIGVsZW1lbnQgYXRcbiAqIGluZGV4IGkgd2lsbCBiZSB0aGUgZWxlbWVudCBwcmV2aW91c2x5IGF0IGluZGV4IChpIC0gbikgJVxuICogYXJyYXkubGVuZ3RoLCBmb3IgYWxsIHZhbHVlcyBvZiBpIGJldHdlZW4gMCBhbmQgYXJyYXkubGVuZ3RoIC0gMSxcbiAqIGluY2x1c2l2ZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgc3VwcG9zZSBsaXN0IGNvbXByaXNlcyBbdCwgYSwgbiwgaywgc10uIEFmdGVyIGludm9raW5nXG4gKiByb3RhdGUoYXJyYXksIDEpIChvciByb3RhdGUoYXJyYXksIC00KSksIGFycmF5IHdpbGwgY29tcHJpc2UgW3MsIHQsIGEsIG4sIGtdLlxuICpcbiAqIEBwYXJhbSB7IUFycmF5PFQ+fSBhcnJheSBUaGUgYXJyYXkgdG8gcm90YXRlLlxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGFtb3VudCB0byByb3RhdGUuXG4gKiBAcmV0dXJuIHshQXJyYXk8VD59IFRoZSBhcnJheS5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuYXJyYXkucm90YXRlID0gZnVuY3Rpb24oYXJyYXksIG4pIHtcbiAgZ29vZy5hc3NlcnRzLmFzc2VydChhcnJheS5sZW5ndGggIT0gbnVsbCk7XG5cbiAgaWYgKGFycmF5Lmxlbmd0aCkge1xuICAgIG4gJT0gYXJyYXkubGVuZ3RoO1xuICAgIGlmIChuID4gMCkge1xuICAgICAgZ29vZy5hcnJheS5BUlJBWV9QUk9UT1RZUEVfLnVuc2hpZnQuYXBwbHkoYXJyYXksIGFycmF5LnNwbGljZSgtbiwgbikpO1xuICAgIH0gZWxzZSBpZiAobiA8IDApIHtcbiAgICAgIGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXy5wdXNoLmFwcGx5KGFycmF5LCBhcnJheS5zcGxpY2UoMCwgLW4pKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufTtcblxuXG4vKipcbiAqIE1vdmVzIG9uZSBpdGVtIG9mIGFuIGFycmF5IHRvIGEgbmV3IHBvc2l0aW9uIGtlZXBpbmcgdGhlIG9yZGVyIG9mIHRoZSByZXN0XG4gKiBvZiB0aGUgaXRlbXMuIEV4YW1wbGUgdXNlIGNhc2U6IGtlZXBpbmcgYSBsaXN0IG9mIEphdmFTY3JpcHQgb2JqZWN0c1xuICogc3luY2hyb25pemVkIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgbGlzdCBvZiBET00gZWxlbWVudHMgYWZ0ZXIgb25lIG9mIHRoZVxuICogZWxlbWVudHMgaGFzIGJlZW4gZHJhZ2dlZCB0byBhIG5ldyBwb3NpdGlvbi5cbiAqIEBwYXJhbSB7IShBcnJheXxBcmd1bWVudHN8e2xlbmd0aDpudW1iZXJ9KX0gYXJyIFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IEluZGV4IG9mIHRoZSBpdGVtIHRvIG1vdmUgYmV0d2VlbiAwIGFuZFxuICogICAgIHtAY29kZSBhcnIubGVuZ3RoIC0gMX0uXG4gKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBUYXJnZXQgaW5kZXggYmV0d2VlbiAwIGFuZCB7QGNvZGUgYXJyLmxlbmd0aCAtIDF9LlxuICovXG5nb29nLmFycmF5Lm1vdmVJdGVtID0gZnVuY3Rpb24oYXJyLCBmcm9tSW5kZXgsIHRvSW5kZXgpIHtcbiAgZ29vZy5hc3NlcnRzLmFzc2VydChmcm9tSW5kZXggPj0gMCAmJiBmcm9tSW5kZXggPCBhcnIubGVuZ3RoKTtcbiAgZ29vZy5hc3NlcnRzLmFzc2VydCh0b0luZGV4ID49IDAgJiYgdG9JbmRleCA8IGFyci5sZW5ndGgpO1xuICAvLyBSZW1vdmUgMSBpdGVtIGF0IGZyb21JbmRleC5cbiAgdmFyIHJlbW92ZWRJdGVtcyA9IGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXy5zcGxpY2UuY2FsbChhcnIsIGZyb21JbmRleCwgMSk7XG4gIC8vIEluc2VydCB0aGUgcmVtb3ZlZCBpdGVtIGF0IHRvSW5kZXguXG4gIGdvb2cuYXJyYXkuQVJSQVlfUFJPVE9UWVBFXy5zcGxpY2UuY2FsbChhcnIsIHRvSW5kZXgsIDAsIHJlbW92ZWRJdGVtc1swXSk7XG4gIC8vIFdlIGRvbid0IHVzZSBnb29nLmFycmF5Lmluc2VydEF0IGFuZCBnb29nLmFycmF5LnJlbW92ZUF0LCBiZWNhdXNlIHRoZXkncmVcbiAgLy8gc2lnbmlmaWNhbnRseSBzbG93ZXIgdGhhbiBzcGxpY2UuXG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBhcnJheSBmb3Igd2hpY2ggdGhlIGVsZW1lbnQgYXQgcG9zaXRpb24gaSBpcyBhbiBhcnJheSBvZiB0aGVcbiAqIGl0aCBlbGVtZW50IG9mIHRoZSBwcm92aWRlZCBhcnJheXMuICBUaGUgcmV0dXJuZWQgYXJyYXkgd2lsbCBvbmx5IGJlIGFzIGxvbmdcbiAqIGFzIHRoZSBzaG9ydGVzdCBhcnJheSBwcm92aWRlZDsgYWRkaXRpb25hbCB2YWx1ZXMgYXJlIGlnbm9yZWQuICBGb3IgZXhhbXBsZSxcbiAqIHRoZSByZXN1bHQgb2YgemlwcGluZyBbMSwgMl0gYW5kIFszLCA0LCA1XSBpcyBbWzEsM10sIFsyLCA0XV0uXG4gKlxuICogVGhpcyBpcyBzaW1pbGFyIHRvIHRoZSB6aXAoKSBmdW5jdGlvbiBpbiBQeXRob24uICBTZWUge0BsaW5rXG4gKiBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjemlwfVxuICpcbiAqIEBwYXJhbSB7Li4uIWdvb2cuYXJyYXkuQXJyYXlMaWtlfSB2YXJfYXJncyBBcnJheXMgdG8gYmUgY29tYmluZWQuXG4gKiBAcmV0dXJuIHshQXJyYXk8IUFycmF5PD8+Pn0gQSBuZXcgYXJyYXkgb2YgYXJyYXlzIGNyZWF0ZWQgZnJvbVxuICogICAgIHByb3ZpZGVkIGFycmF5cy5cbiAqL1xuZ29vZy5hcnJheS56aXAgPSBmdW5jdGlvbih2YXJfYXJncykge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgdHJ1ZTsgaSsrKSB7XG4gICAgdmFyIHZhbHVlID0gW107XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBhcmd1bWVudHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBhcnIgPSBhcmd1bWVudHNbal07XG4gICAgICAvLyBJZiBpIGlzIGxhcmdlciB0aGFuIHRoZSBhcnJheSBsZW5ndGgsIHRoaXMgaXMgdGhlIHNob3J0ZXN0IGFycmF5LlxuICAgICAgaWYgKGkgPj0gYXJyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFsdWUucHVzaChhcnJbaV0pO1xuICAgIH1cbiAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTaHVmZmxlcyB0aGUgdmFsdWVzIGluIHRoZSBzcGVjaWZpZWQgYXJyYXkgdXNpbmcgdGhlIEZpc2hlci1ZYXRlcyBpbi1wbGFjZVxuICogc2h1ZmZsZSAoYWxzbyBrbm93biBhcyB0aGUgS251dGggU2h1ZmZsZSkuIEJ5IGRlZmF1bHQsIGNhbGxzIE1hdGgucmFuZG9tKClcbiAqIGFuZCBzbyByZXNldHMgdGhlIHN0YXRlIG9mIHRoYXQgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IuIFNpbWlsYXJseSwgbWF5IHJlc2V0XG4gKiB0aGUgc3RhdGUgb2YgdGhlIGFueSBvdGhlciBzcGVjaWZpZWQgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IuXG4gKlxuICogUnVudGltZTogTyhuKVxuICpcbiAqIEBwYXJhbSB7IUFycmF5PD8+fSBhcnIgVGhlIGFycmF5IHRvIGJlIHNodWZmbGVkLlxuICogQHBhcmFtIHtmdW5jdGlvbigpOm51bWJlcj19IG9wdF9yYW5kRm4gT3B0aW9uYWwgcmFuZG9tIGZ1bmN0aW9uIHRvIHVzZSBmb3JcbiAqICAgICBzaHVmZmxpbmcuXG4gKiAgICAgVGFrZXMgbm8gYXJndW1lbnRzLCBhbmQgcmV0dXJucyBhIHJhbmRvbSBudW1iZXIgb24gdGhlIGludGVydmFsIFswLCAxKS5cbiAqICAgICBEZWZhdWx0cyB0byBNYXRoLnJhbmRvbSgpIHVzaW5nIEphdmFTY3JpcHQncyBidWlsdC1pbiBNYXRoIGxpYnJhcnkuXG4gKi9cbmdvb2cuYXJyYXkuc2h1ZmZsZSA9IGZ1bmN0aW9uKGFyciwgb3B0X3JhbmRGbikge1xuICB2YXIgcmFuZEZuID0gb3B0X3JhbmRGbiB8fCBNYXRoLnJhbmRvbTtcblxuICBmb3IgKHZhciBpID0gYXJyLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICAvLyBDaG9vc2UgYSByYW5kb20gYXJyYXkgaW5kZXggaW4gWzAsIGldIChpbmNsdXNpdmUgd2l0aCBpKS5cbiAgICB2YXIgaiA9IE1hdGguZmxvb3IocmFuZEZuKCkgKiAoaSArIDEpKTtcblxuICAgIHZhciB0bXAgPSBhcnJbaV07XG4gICAgYXJyW2ldID0gYXJyW2pdO1xuICAgIGFycltqXSA9IHRtcDtcbiAgfVxufTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZWxlbWVudHMgZnJvbSBhcnIsIGJhc2VkIG9uIHRoZSBpbmRleGVzIG9mIGVsZW1lbnRzXG4gKiBwcm92aWRlZCBieSBpbmRleF9hcnIuIEZvciBleGFtcGxlLCB0aGUgcmVzdWx0IG9mIGluZGV4IGNvcHlpbmdcbiAqIFsnYScsICdiJywgJ2MnXSB3aXRoIGluZGV4X2FyciBbMSwwLDAsMl0gaXMgWydiJywgJ2EnLCAnYScsICdjJ10uXG4gKlxuICogQHBhcmFtIHshQXJyYXk8VD59IGFyciBUaGUgYXJyYXkgdG8gZ2V0IGEgaW5kZXhlZCBjb3B5IGZyb20uXG4gKiBAcGFyYW0geyFBcnJheTxudW1iZXI+fSBpbmRleF9hcnIgQW4gYXJyYXkgb2YgaW5kZXhlcyB0byBnZXQgZnJvbSBhcnIuXG4gKiBAcmV0dXJuIHshQXJyYXk8VD59IEEgbmV3IGFycmF5IG9mIGVsZW1lbnRzIGZyb20gYXJyIGluIGluZGV4X2FyciBvcmRlci5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuYXJyYXkuY29weUJ5SW5kZXggPSBmdW5jdGlvbihhcnIsIGluZGV4X2Fycikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGdvb2cuYXJyYXkuZm9yRWFjaChpbmRleF9hcnIsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgcmVzdWx0LnB1c2goYXJyW2luZGV4XSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDEzIFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0aWVzIHVzZWQgYnkgZ29vZy5sYWJzLnVzZXJBZ2VudCB0b29scy4gVGhlc2UgZnVuY3Rpb25zXG4gKiBzaG91bGQgbm90IGJlIHVzZWQgb3V0c2lkZSBvZiBnb29nLmxhYnMudXNlckFnZW50LiouXG4gKlxuICpcbiAqIEBhdXRob3Igbm5hemVAZ29vZ2xlLmNvbSAoTmF0aGFuIE5hemUpXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLmxhYnMudXNlckFnZW50LnV0aWwnKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZycpO1xuXG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIHVzZXJBZ2VudCBzdHJpbmcgZnJvbSBuYXZpZ2F0b3IgaWYgaXQgZXhpc3RzLlxuICogSWYgbmF2aWdhdG9yIG9yIG5hdmlnYXRvci51c2VyQWdlbnQgc3RyaW5nIGlzIG1pc3NpbmcsIHJldHVybnMgYW4gZW1wdHlcbiAqIHN0cmluZy5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXROYXRpdmVVc2VyQWdlbnRTdHJpbmdfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBuYXZpZ2F0b3IgPSBnb29nLmxhYnMudXNlckFnZW50LnV0aWwuZ2V0TmF2aWdhdG9yXygpO1xuICBpZiAobmF2aWdhdG9yKSB7XG4gICAgdmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgaWYgKHVzZXJBZ2VudCkge1xuICAgICAgcmV0dXJuIHVzZXJBZ2VudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufTtcblxuXG4vKipcbiAqIEdldHRlciBmb3IgdGhlIG5hdGl2ZSBuYXZpZ2F0b3IuXG4gKiBUaGlzIGlzIGEgc2VwYXJhdGUgZnVuY3Rpb24gc28gaXQgY2FuIGJlIHN0dWJiZWQgb3V0IGluIHRlc3RpbmcuXG4gKiBAcmV0dXJuIHtOYXZpZ2F0b3J9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmxhYnMudXNlckFnZW50LnV0aWwuZ2V0TmF2aWdhdG9yXyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5nbG9iYWwubmF2aWdhdG9yO1xufTtcblxuXG4vKipcbiAqIEEgcG9zc2libGUgb3ZlcnJpZGUgZm9yIGFwcGxpY2F0aW9ucyB3aGljaCB3aXNoIHRvIG5vdCBjaGVja1xuICogbmF2aWdhdG9yLnVzZXJBZ2VudCBidXQgdXNlIGEgc3BlY2lmaWVkIHZhbHVlIGZvciBkZXRlY3Rpb24gaW5zdGVhZC5cbiAqIEBwcml2YXRlIHtzdHJpbmd9XG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQudXRpbC51c2VyQWdlbnRfID1cbiAgICBnb29nLmxhYnMudXNlckFnZW50LnV0aWwuZ2V0TmF0aXZlVXNlckFnZW50U3RyaW5nXygpO1xuXG5cbi8qKlxuICogQXBwbGljYXRpb25zIG1heSBvdmVycmlkZSBicm93c2VyIGRldGVjdGlvbiBvbiB0aGUgYnVpbHQgaW5cbiAqIG5hdmlnYXRvci51c2VyQWdlbnQgb2JqZWN0IGJ5IHNldHRpbmcgdGhpcyBzdHJpbmcuIFNldCB0byBudWxsIHRvIHVzZSB0aGVcbiAqIGJyb3dzZXIgb2JqZWN0IGluc3RlYWQuXG4gKiBAcGFyYW0gez9zdHJpbmc9fSBvcHRfdXNlckFnZW50IFRoZSBVc2VyLUFnZW50IG92ZXJyaWRlLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LnV0aWwuc2V0VXNlckFnZW50ID0gZnVuY3Rpb24ob3B0X3VzZXJBZ2VudCkge1xuICBnb29nLmxhYnMudXNlckFnZW50LnV0aWwudXNlckFnZW50XyA9IG9wdF91c2VyQWdlbnQgfHxcbiAgICAgIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXROYXRpdmVVc2VyQWdlbnRTdHJpbmdfKCk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgdXNlciBhZ2VudCBzdHJpbmcuXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXRVc2VyQWdlbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC51c2VyQWdlbnRfO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgY29udGFpbnMgdGhlIGdpdmVuIHN0cmluZywgaWdub3JpbmdcbiAqICAgICBjYXNlLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQgPSBmdW5jdGlvbihzdHIpIHtcbiAgdmFyIHVzZXJBZ2VudCA9IGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXRVc2VyQWdlbnQoKTtcbiAgcmV0dXJuIGdvb2cuc3RyaW5nLmNvbnRhaW5zKHVzZXJBZ2VudCwgc3RyKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGNvbnRhaW5zIHRoZSBnaXZlbiBzdHJpbmcuXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudElnbm9yZUNhc2UgPSBmdW5jdGlvbihzdHIpIHtcbiAgdmFyIHVzZXJBZ2VudCA9IGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXRVc2VyQWdlbnQoKTtcbiAgcmV0dXJuIGdvb2cuc3RyaW5nLmNhc2VJbnNlbnNpdGl2ZUNvbnRhaW5zKHVzZXJBZ2VudCwgc3RyKTtcbn07XG5cblxuLyoqXG4gKiBQYXJzZXMgdGhlIHVzZXIgYWdlbnQgaW50byB0dXBsZXMgZm9yIGVhY2ggc2VjdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyQWdlbnRcbiAqIEByZXR1cm4geyFBcnJheTwhQXJyYXk8c3RyaW5nPj59IFR1cGxlcyBvZiBrZXksIHZlcnNpb24sIGFuZCB0aGUgY29udGVudHNcbiAqICAgICBvZiB0aGUgcGFyZW50aGV0aWNhbC5cbiAqL1xuZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmV4dHJhY3RWZXJzaW9uVHVwbGVzID0gZnVuY3Rpb24odXNlckFnZW50KSB7XG4gIC8vIE1hdGNoZXMgZWFjaCBzZWN0aW9uIG9mIGEgdXNlciBhZ2VudCBzdHJpbmcuXG4gIC8vIEV4YW1wbGUgVUE6XG4gIC8vIE1vemlsbGEvNS4wIChpUGFkOyBVOyBDUFUgT1MgM18yXzEgbGlrZSBNYWMgT1MgWDsgZW4tdXMpXG4gIC8vIEFwcGxlV2ViS2l0LzUzMS4yMS4xMCAoS0hUTUwsIGxpa2UgR2Vja28pIE1vYmlsZS83QjQwNVxuICAvLyBUaGlzIGhhcyB0aHJlZSB2ZXJzaW9uIHR1cGxlczogTW96aWxsYSwgQXBwbGVXZWJLaXQsIGFuZCBNb2JpbGUuXG5cbiAgdmFyIHZlcnNpb25SZWdFeHAgPSBuZXcgUmVnRXhwKFxuICAgICAgLy8gS2V5LiBOb3RlIHRoYXQgYSBrZXkgbWF5IGhhdmUgYSBzcGFjZS5cbiAgICAgIC8vIChpLmUuICdNb2JpbGUgU2FmYXJpJyBpbiAnTW9iaWxlIFNhZmFyaS81LjAnKVxuICAgICAgJyhcXFxcd1tcXFxcdyBdKyknICtcblxuICAgICAgJy8nICsgICAgICAgICAgICAgICAgLy8gc2xhc2hcbiAgICAgICcoW15cXFxcc10rKScgKyAgICAgICAgLy8gdmVyc2lvbiAoaS5lLiAnNS4wYicpXG4gICAgICAnXFxcXHMqJyArICAgICAgICAgICAgIC8vIHdoaXRlc3BhY2VcbiAgICAgICcoPzpcXFxcKCguKj8pXFxcXCkpPycsICAvLyBwYXJlbnRoZXRpY2FsIGluZm8uIHBhcmVudGhlc2VzIG5vdCBtYXRjaGVkLlxuICAgICAgJ2cnKTtcblxuICB2YXIgZGF0YSA9IFtdO1xuICB2YXIgbWF0Y2g7XG5cbiAgLy8gSXRlcmF0ZSBhbmQgY29sbGVjdCB0aGUgdmVyc2lvbiB0dXBsZXMuICBFYWNoIGl0ZXJhdGlvbiB3aWxsIGJlIHRoZVxuICAvLyBuZXh0IHJlZ2V4IG1hdGNoLlxuICB3aGlsZSAobWF0Y2ggPSB2ZXJzaW9uUmVnRXhwLmV4ZWModXNlckFnZW50KSkge1xuICAgIGRhdGEucHVzaChbXG4gICAgICBtYXRjaFsxXSwgIC8vIGtleVxuICAgICAgbWF0Y2hbMl0sICAvLyB2YWx1ZVxuICAgICAgLy8gfHwgdW5kZWZpbmVkIGFzIHRoaXMgaXMgbm90IHVuZGVmaW5lZCBpbiBJRTcgYW5kIElFOFxuICAgICAgbWF0Y2hbM10gfHwgdW5kZWZpbmVkICAvLyBpbmZvXG4gICAgXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn07XG5cbiIsIi8vIENvcHlyaWdodCAyMDA2IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0aWVzIGZvciBtYW5pcHVsYXRpbmcgb2JqZWN0cy9tYXBzL2hhc2hlcy5cbiAqIEBhdXRob3IgYXJ2QGdvb2dsZS5jb20gKEVyaWsgQXJ2aWRzc29uKVxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5vYmplY3QnKTtcblxuXG4vKipcbiAqIENhbGxzIGEgZnVuY3Rpb24gZm9yIGVhY2ggZWxlbWVudCBpbiBhbiBvYmplY3QvbWFwL2hhc2guXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8SyxWPn0gb2JqIFRoZSBvYmplY3Qgb3ZlciB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsViw/LE9iamVjdDxLLFY+KTo/fSBmIFRoZSBmdW5jdGlvbiB0byBjYWxsXG4gKiAgICAgZm9yIGV2ZXJ5IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgMyBhcmd1bWVudHMgKHRoZSB2YWx1ZSwgdGhlXG4gKiAgICAga2V5IGFuZCB0aGUgb2JqZWN0KSBhbmQgdGhlIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkLlxuICogQHBhcmFtIHtUPX0gb3B0X29iaiBUaGlzIGlzIHVzZWQgYXMgdGhlICd0aGlzJyBvYmplY3Qgd2l0aGluIGYuXG4gKiBAdGVtcGxhdGUgVCxLLFZcbiAqL1xuZ29vZy5vYmplY3QuZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgZiwgb3B0X29iaikge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgZi5jYWxsKG9wdF9vYmosIG9ialtrZXldLCBrZXksIG9iaik7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDYWxscyBhIGZ1bmN0aW9uIGZvciBlYWNoIGVsZW1lbnQgaW4gYW4gb2JqZWN0L21hcC9oYXNoLiBJZiB0aGF0IGNhbGwgcmV0dXJuc1xuICogdHJ1ZSwgYWRkcyB0aGUgZWxlbWVudCB0byBhIG5ldyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8SyxWPn0gb2JqIFRoZSBvYmplY3Qgb3ZlciB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsViw/LE9iamVjdDxLLFY+KTpib29sZWFufSBmIFRoZSBmdW5jdGlvbiB0byBjYWxsXG4gKiAgICAgZm9yIGV2ZXJ5IGVsZW1lbnQuIFRoaXNcbiAqICAgICBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIHZhbHVlLCB0aGUga2V5IGFuZCB0aGUgb2JqZWN0KVxuICogICAgIGFuZCBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbi4gSWYgdGhlIHJldHVybiB2YWx1ZSBpcyB0cnVlIHRoZVxuICogICAgIGVsZW1lbnQgaXMgYWRkZWQgdG8gdGhlIHJlc3VsdCBvYmplY3QuIElmIGl0IGlzIGZhbHNlIHRoZVxuICogICAgIGVsZW1lbnQgaXMgbm90IGluY2x1ZGVkLlxuICogQHBhcmFtIHtUPX0gb3B0X29iaiBUaGlzIGlzIHVzZWQgYXMgdGhlICd0aGlzJyBvYmplY3Qgd2l0aGluIGYuXG4gKiBAcmV0dXJuIHshT2JqZWN0PEssVj59IGEgbmV3IG9iamVjdCBpbiB3aGljaCBvbmx5IGVsZW1lbnRzIHRoYXQgcGFzc2VkIHRoZVxuICogICAgIHRlc3QgYXJlIHByZXNlbnQuXG4gKiBAdGVtcGxhdGUgVCxLLFZcbiAqL1xuZ29vZy5vYmplY3QuZmlsdGVyID0gZnVuY3Rpb24ob2JqLCBmLCBvcHRfb2JqKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChmLmNhbGwob3B0X29iaiwgb2JqW2tleV0sIGtleSwgb2JqKSkge1xuICAgICAgcmVzW2tleV0gPSBvYmpba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cblxuLyoqXG4gKiBGb3IgZXZlcnkgZWxlbWVudCBpbiBhbiBvYmplY3QvbWFwL2hhc2ggY2FsbHMgYSBmdW5jdGlvbiBhbmQgaW5zZXJ0cyB0aGVcbiAqIHJlc3VsdCBpbnRvIGEgbmV3IG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCBvdmVyIHdoaWNoIHRvIGl0ZXJhdGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VCxWLD8sT2JqZWN0PEssVj4pOlJ9IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGxcbiAqICAgICBmb3IgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvblxuICogICAgIHRha2VzIDMgYXJndW1lbnRzICh0aGUgdmFsdWUsIHRoZSBrZXkgYW5kIHRoZSBvYmplY3QpXG4gKiAgICAgYW5kIHNob3VsZCByZXR1cm4gc29tZXRoaW5nLiBUaGUgcmVzdWx0IHdpbGwgYmUgaW5zZXJ0ZWRcbiAqICAgICBpbnRvIGEgbmV3IG9iamVjdC5cbiAqIEBwYXJhbSB7VD19IG9wdF9vYmogVGhpcyBpcyB1c2VkIGFzIHRoZSAndGhpcycgb2JqZWN0IHdpdGhpbiBmLlxuICogQHJldHVybiB7IU9iamVjdDxLLFI+fSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgcmVzdWx0cyBmcm9tIGYuXG4gKiBAdGVtcGxhdGUgVCxLLFYsUlxuICovXG5nb29nLm9iamVjdC5tYXAgPSBmdW5jdGlvbihvYmosIGYsIG9wdF9vYmopIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgcmVzW2tleV0gPSBmLmNhbGwob3B0X29iaiwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuXG4vKipcbiAqIENhbGxzIGEgZnVuY3Rpb24gZm9yIGVhY2ggZWxlbWVudCBpbiBhbiBvYmplY3QvbWFwL2hhc2guIElmIGFueVxuICogY2FsbCByZXR1cm5zIHRydWUsIHJldHVybnMgdHJ1ZSAod2l0aG91dCBjaGVja2luZyB0aGUgcmVzdCkuIElmXG4gKiBhbGwgY2FsbHMgcmV0dXJuIGZhbHNlLCByZXR1cm5zIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PEssVj59IG9iaiBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsViw/LE9iamVjdDxLLFY+KTpib29sZWFufSBmIFRoZSBmdW5jdGlvbiB0b1xuICogICAgIGNhbGwgZm9yIGV2ZXJ5IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb25cbiAqICAgICB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIHZhbHVlLCB0aGUga2V5IGFuZCB0aGUgb2JqZWN0KSBhbmQgc2hvdWxkXG4gKiAgICAgcmV0dXJuIGEgYm9vbGVhbi5cbiAqIEBwYXJhbSB7VD19IG9wdF9vYmogVGhpcyBpcyB1c2VkIGFzIHRoZSAndGhpcycgb2JqZWN0IHdpdGhpbiBmLlxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHRlc3QuXG4gKiBAdGVtcGxhdGUgVCxLLFZcbiAqL1xuZ29vZy5vYmplY3Quc29tZSA9IGZ1bmN0aW9uKG9iaiwgZiwgb3B0X29iaikge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGYuY2FsbChvcHRfb2JqLCBvYmpba2V5XSwga2V5LCBvYmopKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIENhbGxzIGEgZnVuY3Rpb24gZm9yIGVhY2ggZWxlbWVudCBpbiBhbiBvYmplY3QvbWFwL2hhc2guIElmXG4gKiBhbGwgY2FsbHMgcmV0dXJuIHRydWUsIHJldHVybnMgdHJ1ZS4gSWYgYW55IGNhbGwgcmV0dXJucyBmYWxzZSwgcmV0dXJuc1xuICogZmFsc2UgYXQgdGhpcyBwb2ludCBhbmQgZG9lcyBub3QgY29udGludWUgdG8gY2hlY2sgdGhlIHJlbWFpbmluZyBlbGVtZW50cy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6VCxWLD8sT2JqZWN0PEssVj4pOmJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uIHRvXG4gKiAgICAgY2FsbCBmb3IgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvblxuICogICAgIHRha2VzIDMgYXJndW1lbnRzICh0aGUgdmFsdWUsIHRoZSBrZXkgYW5kIHRoZSBvYmplY3QpIGFuZCBzaG91bGRcbiAqICAgICByZXR1cm4gYSBib29sZWFuLlxuICogQHBhcmFtIHtUPX0gb3B0X29iaiBUaGlzIGlzIHVzZWQgYXMgdGhlICd0aGlzJyBvYmplY3Qgd2l0aGluIGYuXG4gKiBAcmV0dXJuIHtib29sZWFufSBmYWxzZSBpZiBhbnkgZWxlbWVudCBmYWlscyB0aGUgdGVzdC5cbiAqIEB0ZW1wbGF0ZSBULEssVlxuICovXG5nb29nLm9iamVjdC5ldmVyeSA9IGZ1bmN0aW9uKG9iaiwgZiwgb3B0X29iaikge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKCFmLmNhbGwob3B0X29iaiwgb2JqW2tleV0sIGtleSwgb2JqKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Yga2V5LXZhbHVlIHBhaXJzIGluIHRoZSBvYmplY3QgbWFwLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCBmb3Igd2hpY2ggdG8gZ2V0IHRoZSBudW1iZXIgb2Yga2V5LXZhbHVlXG4gKiAgICAgcGFpcnMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2Yga2V5LXZhbHVlIHBhaXJzIGluIHRoZSBvYmplY3QgbWFwLlxuICovXG5nb29nLm9iamVjdC5nZXRDb3VudCA9IGZ1bmN0aW9uKG9iaikge1xuICAvLyBKUzEuNSBoYXMgX19jb3VudF9fIGJ1dCBpdCBoYXMgYmVlbiBkZXByZWNhdGVkIHNvIGl0IHJhaXNlcyBhIHdhcm5pbmcuLi5cbiAgLy8gaW4gb3RoZXIgd29yZHMgZG8gbm90IHVzZS4gQWxzbyBfX2NvdW50X18gb25seSBpbmNsdWRlcyB0aGUgZmllbGRzIG9uIHRoZVxuICAvLyBhY3R1YWwgb2JqZWN0IGFuZCBub3QgaW4gdGhlIHByb3RvdHlwZSBjaGFpbi5cbiAgdmFyIHJ2ID0gMDtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIHJ2Kys7XG4gIH1cbiAgcmV0dXJuIHJ2O1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgb25lIGtleSBmcm9tIHRoZSBvYmplY3QgbWFwLCBpZiBhbnkgZXhpc3RzLlxuICogRm9yIG1hcCBsaXRlcmFscyB0aGUgcmV0dXJuZWQga2V5IHdpbGwgYmUgdGhlIGZpcnN0IG9uZSBpbiBtb3N0IG9mIHRoZVxuICogYnJvd3NlcnMgKGEga25vdyBleGNlcHRpb24gaXMgS29ucXVlcm9yKS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcGljayBhIGtleSBmcm9tLlxuICogQHJldHVybiB7c3RyaW5nfHVuZGVmaW5lZH0gVGhlIGtleSBvciB1bmRlZmluZWQgaWYgdGhlIG9iamVjdCBpcyBlbXB0eS5cbiAqL1xuZ29vZy5vYmplY3QuZ2V0QW55S2V5ID0gZnVuY3Rpb24ob2JqKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICByZXR1cm4ga2V5O1xuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBvbmUgdmFsdWUgZnJvbSB0aGUgb2JqZWN0IG1hcCwgaWYgYW55IGV4aXN0cy5cbiAqIEZvciBtYXAgbGl0ZXJhbHMgdGhlIHJldHVybmVkIHZhbHVlIHdpbGwgYmUgdGhlIGZpcnN0IG9uZSBpbiBtb3N0IG9mIHRoZVxuICogYnJvd3NlcnMgKGEga25vdyBleGNlcHRpb24gaXMgS29ucXVlcm9yKS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCB0byBwaWNrIGEgdmFsdWUgZnJvbS5cbiAqIEByZXR1cm4ge1Z8dW5kZWZpbmVkfSBUaGUgdmFsdWUgb3IgdW5kZWZpbmVkIGlmIHRoZSBvYmplY3QgaXMgZW1wdHkuXG4gKiBAdGVtcGxhdGUgSyxWXG4gKi9cbmdvb2cub2JqZWN0LmdldEFueVZhbHVlID0gZnVuY3Rpb24ob2JqKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBvYmplY3QvaGFzaC9tYXAgY29udGFpbnMgdGhlIGdpdmVuIG9iamVjdCBhcyBhIHZhbHVlLlxuICogQW4gYWxpYXMgZm9yIGdvb2cub2JqZWN0LmNvbnRhaW5zVmFsdWUob2JqLCB2YWwpLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PEssVj59IG9iaiBUaGUgb2JqZWN0IGluIHdoaWNoIHRvIGxvb2sgZm9yIHZhbC5cbiAqIEBwYXJhbSB7Vn0gdmFsIFRoZSBvYmplY3QgZm9yIHdoaWNoIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB2YWwgaXMgcHJlc2VudC5cbiAqIEB0ZW1wbGF0ZSBLLFZcbiAqL1xuZ29vZy5vYmplY3QuY29udGFpbnMgPSBmdW5jdGlvbihvYmosIHZhbCkge1xuICByZXR1cm4gZ29vZy5vYmplY3QuY29udGFpbnNWYWx1ZShvYmosIHZhbCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWVzIG9mIHRoZSBvYmplY3QvbWFwL2hhc2guXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8SyxWPn0gb2JqIFRoZSBvYmplY3QgZnJvbSB3aGljaCB0byBnZXQgdGhlIHZhbHVlcy5cbiAqIEByZXR1cm4geyFBcnJheTxWPn0gVGhlIHZhbHVlcyBpbiB0aGUgb2JqZWN0L21hcC9oYXNoLlxuICogQHRlbXBsYXRlIEssVlxuICovXG5nb29nLm9iamVjdC5nZXRWYWx1ZXMgPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICByZXNbaSsrXSA9IG9ialtrZXldO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUga2V5cyBvZiB0aGUgb2JqZWN0L21hcC9oYXNoLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCBmcm9tIHdoaWNoIHRvIGdldCB0aGUga2V5cy5cbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fSBBcnJheSBvZiBwcm9wZXJ0eSBrZXlzLlxuICovXG5nb29nLm9iamVjdC5nZXRLZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgcmVzW2krK10gPSBrZXk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cblxuLyoqXG4gKiBHZXQgYSB2YWx1ZSBmcm9tIGFuIG9iamVjdCBtdWx0aXBsZSBsZXZlbHMgZGVlcC4gIFRoaXMgaXMgdXNlZnVsIGZvclxuICogcHVsbGluZyB2YWx1ZXMgZnJvbSBkZWVwbHkgbmVzdGVkIG9iamVjdHMsIHN1Y2ggYXMgSlNPTiByZXNwb25zZXMuXG4gKiBFeGFtcGxlIHVzYWdlOiBnZXRWYWx1ZUJ5S2V5cyhqc29uT2JqLCAnZm9vJywgJ2VudHJpZXMnLCAzKVxuICpcbiAqIEBwYXJhbSB7IU9iamVjdH0gb2JqIEFuIG9iamVjdCB0byBnZXQgdGhlIHZhbHVlIGZyb20uICBDYW4gYmUgYXJyYXktbGlrZS5cbiAqIEBwYXJhbSB7Li4uKHN0cmluZ3xudW1iZXJ8IUFycmF5PG51bWJlcnxzdHJpbmc+KX0gdmFyX2FyZ3MgQSBudW1iZXIgb2Yga2V5c1xuICogICAgIChhcyBzdHJpbmdzLCBvciBudW1iZXJzLCBmb3IgYXJyYXktbGlrZSBvYmplY3RzKS4gIENhbiBhbHNvIGJlXG4gKiAgICAgc3BlY2lmaWVkIGFzIGEgc2luZ2xlIGFycmF5IG9mIGtleXMuXG4gKiBAcmV0dXJuIHsqfSBUaGUgcmVzdWx0aW5nIHZhbHVlLiAgSWYsIGF0IGFueSBwb2ludCwgdGhlIHZhbHVlIGZvciBhIGtleVxuICogICAgIGlzIHVuZGVmaW5lZCwgcmV0dXJucyB1bmRlZmluZWQuXG4gKi9cbmdvb2cub2JqZWN0LmdldFZhbHVlQnlLZXlzID0gZnVuY3Rpb24ob2JqLCB2YXJfYXJncykge1xuICB2YXIgaXNBcnJheUxpa2UgPSBnb29nLmlzQXJyYXlMaWtlKHZhcl9hcmdzKTtcbiAgdmFyIGtleXMgPSBpc0FycmF5TGlrZSA/IHZhcl9hcmdzIDogYXJndW1lbnRzO1xuXG4gIC8vIFN0YXJ0IHdpdGggdGhlIDJuZCBwYXJhbWV0ZXIgZm9yIHRoZSB2YXJpYWJsZSBwYXJhbWV0ZXJzIHN5bnRheC5cbiAgZm9yICh2YXIgaSA9IGlzQXJyYXlMaWtlID8gMCA6IDE7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgb2JqID0gb2JqW2tleXNbaV1dO1xuICAgIGlmICghZ29vZy5pc0RlZihvYmopKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIG9iamVjdC9tYXAvaGFzaCBjb250YWlucyB0aGUgZ2l2ZW4ga2V5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCBpbiB3aGljaCB0byBsb29rIGZvciBrZXkuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IGZvciB3aGljaCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgSWYgdGhlIG1hcCBjb250YWlucyB0aGUga2V5LlxuICovXG5nb29nLm9iamVjdC5jb250YWluc0tleSA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gIHJldHVybiBrZXkgaW4gb2JqO1xufTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIG9iamVjdC9tYXAvaGFzaCBjb250YWlucyB0aGUgZ2l2ZW4gdmFsdWUuIFRoaXMgaXMgTyhuKS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCBpbiB3aGljaCB0byBsb29rIGZvciB2YWwuXG4gKiBAcGFyYW0ge1Z9IHZhbCBUaGUgdmFsdWUgZm9yIHdoaWNoIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBJZiB0aGUgbWFwIGNvbnRhaW5zIHRoZSB2YWx1ZS5cbiAqIEB0ZW1wbGF0ZSBLLFZcbiAqL1xuZ29vZy5vYmplY3QuY29udGFpbnNWYWx1ZSA9IGZ1bmN0aW9uKG9iaiwgdmFsKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqW2tleV0gPT0gdmFsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIFNlYXJjaGVzIGFuIG9iamVjdCBmb3IgYW4gZWxlbWVudCB0aGF0IHNhdGlzZmllcyB0aGUgZ2l2ZW4gY29uZGl0aW9uIGFuZFxuICogcmV0dXJucyBpdHMga2V5LlxuICogQHBhcmFtIHtPYmplY3Q8SyxWPn0gb2JqIFRoZSBvYmplY3QgdG8gc2VhcmNoIGluLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsVixzdHJpbmcsT2JqZWN0PEssVj4pOmJvb2xlYW59IGYgVGhlXG4gKiAgICAgIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGV2ZXJ5IGVsZW1lbnQuIFRha2VzIDMgYXJndW1lbnRzICh0aGUgdmFsdWUsXG4gKiAgICAgdGhlIGtleSBhbmQgdGhlIG9iamVjdCkgYW5kIHNob3VsZCByZXR1cm4gYSBib29sZWFuLlxuICogQHBhcmFtIHtUPX0gb3B0X3RoaXMgQW4gb3B0aW9uYWwgXCJ0aGlzXCIgY29udGV4dCBmb3IgdGhlIGZ1bmN0aW9uLlxuICogQHJldHVybiB7c3RyaW5nfHVuZGVmaW5lZH0gVGhlIGtleSBvZiBhbiBlbGVtZW50IGZvciB3aGljaCB0aGUgZnVuY3Rpb25cbiAqICAgICByZXR1cm5zIHRydWUgb3IgdW5kZWZpbmVkIGlmIG5vIHN1Y2ggZWxlbWVudCBpcyBmb3VuZC5cbiAqIEB0ZW1wbGF0ZSBULEssVlxuICovXG5nb29nLm9iamVjdC5maW5kS2V5ID0gZnVuY3Rpb24ob2JqLCBmLCBvcHRfdGhpcykge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGYuY2FsbChvcHRfdGhpcywgb2JqW2tleV0sIGtleSwgb2JqKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cblxuLyoqXG4gKiBTZWFyY2hlcyBhbiBvYmplY3QgZm9yIGFuIGVsZW1lbnQgdGhhdCBzYXRpc2ZpZXMgdGhlIGdpdmVuIGNvbmRpdGlvbiBhbmRcbiAqIHJldHVybnMgaXRzIHZhbHVlLlxuICogQHBhcmFtIHtPYmplY3Q8SyxWPn0gb2JqIFRoZSBvYmplY3QgdG8gc2VhcmNoIGluLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsVixzdHJpbmcsT2JqZWN0PEssVj4pOmJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uXG4gKiAgICAgdG8gY2FsbCBmb3IgZXZlcnkgZWxlbWVudC4gVGFrZXMgMyBhcmd1bWVudHMgKHRoZSB2YWx1ZSwgdGhlIGtleVxuICogICAgIGFuZCB0aGUgb2JqZWN0KSBhbmQgc2hvdWxkIHJldHVybiBhIGJvb2xlYW4uXG4gKiBAcGFyYW0ge1Q9fSBvcHRfdGhpcyBBbiBvcHRpb25hbCBcInRoaXNcIiBjb250ZXh0IGZvciB0aGUgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtWfSBUaGUgdmFsdWUgb2YgYW4gZWxlbWVudCBmb3Igd2hpY2ggdGhlIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSBvclxuICogICAgIHVuZGVmaW5lZCBpZiBubyBzdWNoIGVsZW1lbnQgaXMgZm91bmQuXG4gKiBAdGVtcGxhdGUgVCxLLFZcbiAqL1xuZ29vZy5vYmplY3QuZmluZFZhbHVlID0gZnVuY3Rpb24ob2JqLCBmLCBvcHRfdGhpcykge1xuICB2YXIga2V5ID0gZ29vZy5vYmplY3QuZmluZEtleShvYmosIGYsIG9wdF90aGlzKTtcbiAgcmV0dXJuIGtleSAmJiBvYmpba2V5XTtcbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBvYmplY3QvbWFwL2hhc2ggaXMgZW1wdHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIG9iaiBpcyBlbXB0eS5cbiAqL1xuZ29vZy5vYmplY3QuaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleSB2YWx1ZSBwYWlycyBmcm9tIHRoZSBvYmplY3QvbWFwL2hhc2guXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGNsZWFyLlxuICovXG5nb29nLm9iamVjdC5jbGVhciA9IGZ1bmN0aW9uKG9iaikge1xuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGRlbGV0ZSBvYmpbaV07XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIGEga2V5LXZhbHVlIHBhaXIgYmFzZWQgb24gdGhlIGtleS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgZnJvbSB3aGljaCB0byByZW1vdmUgdGhlIGtleS5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gcmVtb3ZlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhbiBlbGVtZW50IHdhcyByZW1vdmVkLlxuICovXG5nb29nLm9iamVjdC5yZW1vdmUgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICB2YXIgcnY7XG4gIGlmICgocnYgPSBrZXkgaW4gb2JqKSkge1xuICAgIGRlbGV0ZSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gcnY7XG59O1xuXG5cbi8qKlxuICogQWRkcyBhIGtleS12YWx1ZSBwYWlyIHRvIHRoZSBvYmplY3QuIFRocm93cyBhbiBleGNlcHRpb24gaWYgdGhlIGtleSBpc1xuICogYWxyZWFkeSBpbiB1c2UuIFVzZSBzZXQgaWYgeW91IHdhbnQgdG8gY2hhbmdlIGFuIGV4aXN0aW5nIHBhaXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8SyxWPn0gb2JqIFRoZSBvYmplY3QgdG8gd2hpY2ggdG8gYWRkIHRoZSBrZXktdmFsdWUgcGFpci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSB0byBhZGQuXG4gKiBAcGFyYW0ge1Z9IHZhbCBUaGUgdmFsdWUgdG8gYWRkLlxuICogQHRlbXBsYXRlIEssVlxuICovXG5nb29nLm9iamVjdC5hZGQgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgdGhyb3cgRXJyb3IoJ1RoZSBvYmplY3QgYWxyZWFkeSBjb250YWlucyB0aGUga2V5IFwiJyArIGtleSArICdcIicpO1xuICB9XG4gIGdvb2cub2JqZWN0LnNldChvYmosIGtleSwgdmFsKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGtleS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCBmcm9tIHdoaWNoIHRvIGdldCB0aGUgdmFsdWUuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgZm9yIHdoaWNoIHRvIGdldCB0aGUgdmFsdWUuXG4gKiBAcGFyYW0ge1I9fSBvcHRfdmFsIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgbm8gaXRlbSBpcyBmb3VuZCBmb3IgdGhlIGdpdmVuXG4gKiAgICAga2V5IChkZWZhdWx0IGlzIHVuZGVmaW5lZCkuXG4gKiBAcmV0dXJuIHtWfFJ8dW5kZWZpbmVkfSBUaGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBrZXkuXG4gKiBAdGVtcGxhdGUgSyxWLFJcbiAqL1xuZ29vZy5vYmplY3QuZ2V0ID0gZnVuY3Rpb24ob2JqLCBrZXksIG9wdF92YWwpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIG9wdF92YWw7XG59O1xuXG5cbi8qKlxuICogQWRkcyBhIGtleS12YWx1ZSBwYWlyIHRvIHRoZSBvYmplY3QvbWFwL2hhc2guXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8SyxWPn0gb2JqIFRoZSBvYmplY3QgdG8gd2hpY2ggdG8gYWRkIHRoZSBrZXktdmFsdWUgcGFpci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSB0byBhZGQuXG4gKiBAcGFyYW0ge1Z9IHZhbHVlIFRoZSB2YWx1ZSB0byBhZGQuXG4gKiBAdGVtcGxhdGUgSyxWXG4gKi9cbmdvb2cub2JqZWN0LnNldCA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICBvYmpba2V5XSA9IHZhbHVlO1xufTtcblxuXG4vKipcbiAqIEFkZHMgYSBrZXktdmFsdWUgcGFpciB0byB0aGUgb2JqZWN0L21hcC9oYXNoIGlmIGl0IGRvZXNuJ3QgZXhpc3QgeWV0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PEssVj59IG9iaiBUaGUgb2JqZWN0IHRvIHdoaWNoIHRvIGFkZCB0aGUga2V5LXZhbHVlIHBhaXIuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgdG8gYWRkLlxuICogQHBhcmFtIHtWfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYWRkIGlmIHRoZSBrZXkgd2Fzbid0IHByZXNlbnQuXG4gKiBAcmV0dXJuIHtWfSBUaGUgdmFsdWUgb2YgdGhlIGVudHJ5IGF0IHRoZSBlbmQgb2YgdGhlIGZ1bmN0aW9uLlxuICogQHRlbXBsYXRlIEssVlxuICovXG5nb29nLm9iamVjdC5zZXRJZlVuZGVmaW5lZCA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4ga2V5IGluIG9iaiA/IG9ialtrZXldIDogKG9ialtrZXldID0gdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIFNldHMgYSBrZXkgYW5kIHZhbHVlIHRvIGFuIG9iamVjdCBpZiB0aGUga2V5IGlzIG5vdCBzZXQuIFRoZSB2YWx1ZSB3aWxsIGJlXG4gKiB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBnaXZlbiBmdW5jdGlvbi4gSWYgdGhlIGtleSBhbHJlYWR5IGV4aXN0cywgdGhlXG4gKiBvYmplY3Qgd2lsbCBub3QgYmUgY2hhbmdlZCBhbmQgdGhlIGZ1bmN0aW9uIHdpbGwgbm90IGJlIGNhbGxlZCAodGhlIGZ1bmN0aW9uXG4gKiB3aWxsIGJlIGxhemlseSBldmFsdWF0ZWQgLS0gb25seSBjYWxsZWQgaWYgbmVjZXNzYXJ5KS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHVzZSB3aXRoIGEgbWFwIHVzZWQgYSBhcyBhIGNhY2hlLlxuICpcbiAqIEBwYXJhbSB7IU9iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCB0byB3aGljaCB0byBhZGQgdGhlIGtleS12YWx1ZSBwYWlyLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IHRvIGFkZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpWfSBmIFRoZSB2YWx1ZSB0byBhZGQgaWYgdGhlIGtleSB3YXNuJ3QgcHJlc2VudC5cbiAqIEByZXR1cm4ge1Z9IFRoZSB2YWx1ZSBvZiB0aGUgZW50cnkgYXQgdGhlIGVuZCBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAdGVtcGxhdGUgSyxWXG4gKi9cbmdvb2cub2JqZWN0LnNldFdpdGhSZXR1cm5WYWx1ZUlmTm90U2V0ID0gZnVuY3Rpb24ob2JqLCBrZXksIGYpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cblxuICB2YXIgdmFsID0gZigpO1xuICBvYmpba2V5XSA9IHZhbDtcbiAgcmV0dXJuIHZhbDtcbn07XG5cblxuLyoqXG4gKiBDb21wYXJlcyB0d28gb2JqZWN0cyBmb3IgZXF1YWxpdHkgdXNpbmcgPT09IG9uIHRoZSB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHshT2JqZWN0PEssVj59IGFcbiAqIEBwYXJhbSB7IU9iamVjdDxLLFY+fSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogQHRlbXBsYXRlIEssVlxuICovXG5nb29nLm9iamVjdC5lcXVhbHMgPSBmdW5jdGlvbihhLCBiKSB7XG4gIGZvciAodmFyIGsgaW4gYSkge1xuICAgIGlmICghKGsgaW4gYikgfHwgYVtrXSAhPT0gYltrXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBrIGluIGIpIHtcbiAgICBpZiAoIShrIGluIGEpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIERvZXMgYSBmbGF0IGNsb25lIG9mIHRoZSBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8SyxWPn0gb2JqIE9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm4geyFPYmplY3Q8SyxWPn0gQ2xvbmUgb2YgdGhlIGlucHV0IG9iamVjdC5cbiAqIEB0ZW1wbGF0ZSBLLFZcbiAqL1xuZ29vZy5vYmplY3QuY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgLy8gV2UgY2Fubm90IHVzZSB0aGUgcHJvdG90eXBlIHRyaWNrIGJlY2F1c2UgYSBsb3Qgb2YgbWV0aG9kcyBkZXBlbmQgb24gd2hlcmVcbiAgLy8gdGhlIGFjdHVhbCBrZXkgaXMgc2V0LlxuXG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIHJlc1trZXldID0gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIHJlcztcbiAgLy8gV2UgY291bGQgYWxzbyB1c2UgZ29vZy5taXhpbiBidXQgSSB3YW50ZWQgdGhpcyB0byBiZSBpbmRlcGVuZGVudCBmcm9tIHRoYXQuXG59O1xuXG5cbi8qKlxuICogQ2xvbmVzIGEgdmFsdWUuIFRoZSBpbnB1dCBtYXkgYmUgYW4gT2JqZWN0LCBBcnJheSwgb3IgYmFzaWMgdHlwZS4gT2JqZWN0cyBhbmRcbiAqIGFycmF5cyB3aWxsIGJlIGNsb25lZCByZWN1cnNpdmVseS5cbiAqXG4gKiBXQVJOSU5HUzpcbiAqIDxjb2RlPmdvb2cub2JqZWN0LnVuc2FmZUNsb25lPC9jb2RlPiBkb2VzIG5vdCBkZXRlY3QgcmVmZXJlbmNlIGxvb3BzLiBPYmplY3RzXG4gKiB0aGF0IHJlZmVyIHRvIHRoZW1zZWx2ZXMgd2lsbCBjYXVzZSBpbmZpbml0ZSByZWN1cnNpb24uXG4gKlxuICogPGNvZGU+Z29vZy5vYmplY3QudW5zYWZlQ2xvbmU8L2NvZGU+IGlzIHVuYXdhcmUgb2YgdW5pcXVlIGlkZW50aWZpZXJzLCBhbmRcbiAqIGNvcGllcyBVSURzIGNyZWF0ZWQgYnkgPGNvZGU+Z2V0VWlkPC9jb2RlPiBpbnRvIGNsb25lZCByZXN1bHRzLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEByZXR1cm4geyp9IEEgY2xvbmUgb2YgdGhlIGlucHV0IHZhbHVlLlxuICovXG5nb29nLm9iamVjdC51bnNhZmVDbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgdHlwZSA9IGdvb2cudHlwZU9mKG9iaik7XG4gIGlmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2FycmF5Jykge1xuICAgIGlmIChnb29nLmlzRnVuY3Rpb24ob2JqLmNsb25lKSkge1xuICAgICAgcmV0dXJuIG9iai5jbG9uZSgpO1xuICAgIH1cbiAgICB2YXIgY2xvbmUgPSB0eXBlID09ICdhcnJheScgPyBbXSA6IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGNsb25lW2tleV0gPSBnb29nLm9iamVjdC51bnNhZmVDbG9uZShvYmpba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBvYmplY3QgaW4gd2hpY2ggYWxsIHRoZSBrZXlzIGFuZCB2YWx1ZXMgYXJlIGludGVyY2hhbmdlZFxuICogKGtleXMgYmVjb21lIHZhbHVlcyBhbmQgdmFsdWVzIGJlY29tZSBrZXlzKS4gSWYgbXVsdGlwbGUga2V5cyBtYXAgdG8gdGhlXG4gKiBzYW1lIHZhbHVlLCB0aGUgY2hvc2VuIHRyYW5zcG9zZWQgdmFsdWUgaXMgaW1wbGVtZW50YXRpb24tZGVwZW5kZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byB0cmFuc3Bvc2UuXG4gKiBAcmV0dXJuIHshT2JqZWN0fSBUaGUgdHJhbnNwb3NlZCBvYmplY3QuXG4gKi9cbmdvb2cub2JqZWN0LnRyYW5zcG9zZSA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgdHJhbnNwb3NlZCA9IHt9O1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgdHJhbnNwb3NlZFtvYmpba2V5XV0gPSBrZXk7XG4gIH1cbiAgcmV0dXJuIHRyYW5zcG9zZWQ7XG59O1xuXG5cbi8qKlxuICogVGhlIG5hbWVzIG9mIHRoZSBmaWVsZHMgdGhhdCBhcmUgZGVmaW5lZCBvbiBPYmplY3QucHJvdG90eXBlLlxuICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLm9iamVjdC5QUk9UT1RZUEVfRklFTERTXyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG5cblxuLyoqXG4gKiBFeHRlbmRzIGFuIG9iamVjdCB3aXRoIGFub3RoZXIgb2JqZWN0LlxuICogVGhpcyBvcGVyYXRlcyAnaW4tcGxhY2UnOyBpdCBkb2VzIG5vdCBjcmVhdGUgYSBuZXcgT2JqZWN0LlxuICpcbiAqIEV4YW1wbGU6XG4gKiB2YXIgbyA9IHt9O1xuICogZ29vZy5vYmplY3QuZXh0ZW5kKG8sIHthOiAwLCBiOiAxfSk7XG4gKiBvOyAvLyB7YTogMCwgYjogMX1cbiAqIGdvb2cub2JqZWN0LmV4dGVuZChvLCB7YjogMiwgYzogM30pO1xuICogbzsgLy8ge2E6IDAsIGI6IDIsIGM6IDN9XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBUaGUgb2JqZWN0IHRvIG1vZGlmeS4gRXhpc3RpbmcgcHJvcGVydGllcyB3aWxsIGJlXG4gKiAgICAgb3ZlcndyaXR0ZW4gaWYgdGhleSBhcmUgYWxzbyBwcmVzZW50IGluIG9uZSBvZiB0aGUgb2JqZWN0cyBpblxuICogICAgIHtAY29kZSB2YXJfYXJnc30uXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gdmFyX2FyZ3MgVGhlIG9iamVjdHMgZnJvbSB3aGljaCB2YWx1ZXMgd2lsbCBiZSBjb3BpZWQuXG4gKi9cbmdvb2cub2JqZWN0LmV4dGVuZCA9IGZ1bmN0aW9uKHRhcmdldCwgdmFyX2FyZ3MpIHtcbiAgdmFyIGtleSwgc291cmNlO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuXG4gICAgLy8gRm9yIElFIHRoZSBmb3ItaW4tbG9vcCBkb2VzIG5vdCBjb250YWluIGFueSBwcm9wZXJ0aWVzIHRoYXQgYXJlIG5vdFxuICAgIC8vIGVudW1lcmFibGUgb24gdGhlIHByb3RvdHlwZSBvYmplY3QgKGZvciBleGFtcGxlIGlzUHJvdG90eXBlT2YgZnJvbVxuICAgIC8vIE9iamVjdC5wcm90b3R5cGUpIGFuZCBpdCB3aWxsIGFsc28gbm90IGluY2x1ZGUgJ3JlcGxhY2UnIG9uIG9iamVjdHMgdGhhdFxuICAgIC8vIGV4dGVuZCBTdHJpbmcgYW5kIGNoYW5nZSAncmVwbGFjZScgKG5vdCB0aGF0IGl0IGlzIGNvbW1vbiBmb3IgYW55b25lIHRvXG4gICAgLy8gZXh0ZW5kIGFueXRoaW5nIGV4Y2VwdCBPYmplY3QpLlxuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBnb29nLm9iamVjdC5QUk9UT1RZUEVfRklFTERTXy5sZW5ndGg7IGorKykge1xuICAgICAga2V5ID0gZ29vZy5vYmplY3QuUFJPVE9UWVBFX0ZJRUxEU19bal07XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IGJ1aWx0IGZyb20gdGhlIGtleS12YWx1ZSBwYWlycyBwcm92aWRlZCBhcyBhcmd1bWVudHMuXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGFuZCBpdCBpcyBhbiBhcnJheVxuICogICAgIHRoZW4gdGhpcyBpcyB1c2VkIGFzIHRoZSBhcmd1bWVudHMsICBvdGhlcndpc2UgZXZlbiBhcmd1bWVudHMgYXJlIHVzZWQgYXNcbiAqICAgICB0aGUgcHJvcGVydHkgbmFtZXMgYW5kIG9kZCBhcmd1bWVudHMgYXJlIHVzZWQgYXMgdGhlIHByb3BlcnR5IHZhbHVlcy5cbiAqIEByZXR1cm4geyFPYmplY3R9IFRoZSBuZXcgb2JqZWN0LlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIGFyZSB1bmV2ZW4gbnVtYmVyIG9mIGFyZ3VtZW50cyBvciB0aGVyZSBpcyBvbmx5IG9uZVxuICogICAgIG5vbiBhcnJheSBhcmd1bWVudC5cbiAqL1xuZ29vZy5vYmplY3QuY3JlYXRlID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcbiAgdmFyIGFyZ0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGlmIChhcmdMZW5ndGggPT0gMSAmJiBnb29nLmlzQXJyYXkoYXJndW1lbnRzWzBdKSkge1xuICAgIHJldHVybiBnb29nLm9iamVjdC5jcmVhdGUuYXBwbHkobnVsbCwgYXJndW1lbnRzWzBdKTtcbiAgfVxuXG4gIGlmIChhcmdMZW5ndGggJSAyKSB7XG4gICAgdGhyb3cgRXJyb3IoJ1VuZXZlbiBudW1iZXIgb2YgYXJndW1lbnRzJyk7XG4gIH1cblxuICB2YXIgcnYgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdMZW5ndGg7IGkgKz0gMikge1xuICAgIHJ2W2FyZ3VtZW50c1tpXV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICB9XG4gIHJldHVybiBydjtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB3aGVyZSB0aGUgcHJvcGVydHkgbmFtZXMgY29tZSBmcm9tIHRoZSBhcmd1bWVudHMgYnV0XG4gKiB0aGUgdmFsdWUgaXMgYWx3YXlzIHNldCB0byB0cnVlXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGFuZCBpdCBpcyBhbiBhcnJheVxuICogICAgIHRoZW4gdGhpcyBpcyB1c2VkIGFzIHRoZSBhcmd1bWVudHMsICBvdGhlcndpc2UgdGhlIGFyZ3VtZW50cyBhcmUgdXNlZFxuICogICAgIGFzIHRoZSBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm4geyFPYmplY3R9IFRoZSBuZXcgb2JqZWN0LlxuICovXG5nb29nLm9iamVjdC5jcmVhdGVTZXQgPSBmdW5jdGlvbih2YXJfYXJncykge1xuICB2YXIgYXJnTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKGFyZ0xlbmd0aCA9PSAxICYmIGdvb2cuaXNBcnJheShhcmd1bWVudHNbMF0pKSB7XG4gICAgcmV0dXJuIGdvb2cub2JqZWN0LmNyZWF0ZVNldC5hcHBseShudWxsLCBhcmd1bWVudHNbMF0pO1xuICB9XG5cbiAgdmFyIHJ2ID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnTGVuZ3RoOyBpKyspIHtcbiAgICBydlthcmd1bWVudHNbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcnY7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhbiBpbW11dGFibGUgdmlldyBvZiB0aGUgdW5kZXJseWluZyBvYmplY3QsIGlmIHRoZSBicm93c2VyXG4gKiBzdXBwb3J0cyBpbW11dGFibGUgb2JqZWN0cy5cbiAqXG4gKiBJbiBkZWZhdWx0IG1vZGUsIHdyaXRlcyB0byB0aGlzIHZpZXcgd2lsbCBmYWlsIHNpbGVudGx5LiBJbiBzdHJpY3QgbW9kZSxcbiAqIHRoZXkgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0geyFPYmplY3Q8SyxWPn0gb2JqIEFuIG9iamVjdC5cbiAqIEByZXR1cm4geyFPYmplY3Q8SyxWPn0gQW4gaW1tdXRhYmxlIHZpZXcgb2YgdGhhdCBvYmplY3QsIG9yIHRoZVxuICogICAgIG9yaWdpbmFsIG9iamVjdCBpZiB0aGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBpbW11dGFibGVzLlxuICogQHRlbXBsYXRlIEssVlxuICovXG5nb29nLm9iamVjdC5jcmVhdGVJbW11dGFibGVWaWV3ID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciByZXN1bHQgPSBvYmo7XG4gIGlmIChPYmplY3QuaXNGcm96ZW4gJiYgIU9iamVjdC5pc0Zyb3plbihvYmopKSB7XG4gICAgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShvYmopO1xuICAgIE9iamVjdC5mcmVlemUocmVzdWx0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IU9iamVjdH0gb2JqIEFuIG9iamVjdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBpcyBhbiBpbW11dGFibGUgdmlldyBvZiB0aGUgb2JqZWN0LlxuICovXG5nb29nLm9iamVjdC5pc0ltbXV0YWJsZVZpZXcgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuICEhT2JqZWN0LmlzRnJvemVuICYmIE9iamVjdC5pc0Zyb3plbihvYmopO1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDEzIFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ2xvc3VyZSB1c2VyIGFnZW50IGRldGVjdGlvbiAoQnJvd3NlcikuXG4gKiBAc2VlIDxhIGhyZWY9XCJodHRwOi8vd3d3LnVzZXJhZ2VudHN0cmluZy5jb20vXCI+VXNlciBhZ2VudCBzdHJpbmdzPC9hPlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcmVuZGVyaW5nIGVuZ2luZSwgcGxhdGZvcm0sIG9yIGRldmljZSBzZWUgdGhlIG90aGVyXG4gKiBzdWItbmFtZXNwYWNlcyBpbiBnb29nLmxhYnMudXNlckFnZW50LCBnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLFxuICogZ29vZy5sYWJzLnVzZXJBZ2VudC5kZXZpY2UgcmVzcGVjdGl2ZWx5LilcbiAqXG4gKiBAYXV0aG9yIG1hcnRvbmVAZ29vZ2xlLmNvbSAoQW5keSBNYXJ0b25lKVxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hcnJheScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmxhYnMudXNlckFnZW50LnV0aWwnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5vYmplY3QnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcnKTtcblxuXG4vLyBUT0RPKG5uYXplKTogUmVmYWN0b3IgdG8gcmVtb3ZlIGV4Y2Vzc2l2ZSBleGNsdXNpb24gbG9naWMgaW4gbWF0Y2hpbmdcbi8vIGZ1bmN0aW9ucy5cblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIE9wZXJhLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoT3BlcmFfID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoJ09wZXJhJykgfHxcbiAgICAgIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudCgnT1BSJyk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgSUUuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hJRV8gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudCgnVHJpZGVudCcpIHx8XG4gICAgICBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoJ01TSUUnKTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBFZGdlLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoRWRnZV8gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudCgnRWRnZScpO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIEZpcmVmb3guXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hGaXJlZm94XyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdGaXJlZm94Jyk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgU2FmYXJpLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoU2FmYXJpXyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdTYWZhcmknKSAmJlxuICAgICAgIShnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hDaHJvbWVfKCkgfHxcbiAgICAgICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQ29hc3RfKCkgfHxcbiAgICAgICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoT3BlcmFfKCkgfHxcbiAgICAgICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoRWRnZV8oKSB8fFxuICAgICAgICBnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNTaWxrKCkgfHxcbiAgICAgICAgZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdBbmRyb2lkJykpO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIENvYXN0IChPcGVyYSdzIFdlYmtpdC1iYXNlZFxuICogICAgIGlPUyBicm93c2VyKS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaENvYXN0XyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdDb2FzdCcpO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIGlPUyBXZWJ2aWV3LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoSW9zV2Vidmlld18gPSBmdW5jdGlvbigpIHtcbiAgLy8gaU9TIFdlYnZpZXcgZG9lcyBub3Qgc2hvdyB1cCBhcyBDaHJvbWUgb3IgU2FmYXJpLiBBbHNvIGNoZWNrIGZvciBPcGVyYSdzXG4gIC8vIFdlYktpdC1iYXNlZCBpT1MgYnJvd3NlciwgQ29hc3QuXG4gIHJldHVybiAoZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdpUGFkJykgfHxcbiAgICAgICAgICBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoJ2lQaG9uZScpKSAmJlxuICAgICAgIWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaFNhZmFyaV8oKSAmJlxuICAgICAgIWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaENocm9tZV8oKSAmJlxuICAgICAgIWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaENvYXN0XygpICYmXG4gICAgICBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoJ0FwcGxlV2ViS2l0Jyk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgQ2hyb21lLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQ2hyb21lXyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudCgnQ2hyb21lJykgfHxcbiAgICAgIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudCgnQ3JpT1MnKSkgJiZcbiAgICAgICFnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hPcGVyYV8oKSAmJlxuICAgICAgIWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaEVkZ2VfKCk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgdGhlIEFuZHJvaWQgYnJvd3Nlci5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaEFuZHJvaWRCcm93c2VyXyA9IGZ1bmN0aW9uKCkge1xuICAvLyBBbmRyb2lkIGNhbiBhcHBlYXIgaW4gdGhlIHVzZXIgYWdlbnQgc3RyaW5nIGZvciBDaHJvbWUgb24gQW5kcm9pZC5cbiAgLy8gVGhpcyBpcyBub3QgdGhlIEFuZHJvaWQgc3RhbmRhbG9uZSBicm93c2VyIGlmIGl0IGRvZXMuXG4gIHJldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoJ0FuZHJvaWQnKSAmJlxuICAgICAgIShnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNDaHJvbWUoKSB8fFxuICAgICAgICBnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNGaXJlZm94KCkgfHxcbiAgICAgICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzT3BlcmEoKSB8fFxuICAgICAgICBnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNTaWxrKCkpO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIE9wZXJhLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNPcGVyYSA9IGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaE9wZXJhXztcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIElFLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNJRSA9IGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaElFXztcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIEVkZ2UuXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0VkZ2UgPSBnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hFZGdlXztcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIEZpcmVmb3guXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0ZpcmVmb3ggPVxuICAgIGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaEZpcmVmb3hfO1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgU2FmYXJpLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNTYWZhcmkgPVxuICAgIGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaFNhZmFyaV87XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBDb2FzdCAoT3BlcmEncyBXZWJraXQtYmFzZWRcbiAqICAgICBpT1MgYnJvd3NlcikuXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0NvYXN0ID1cbiAgICBnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hDb2FzdF87XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBpT1MgV2Vidmlldy5cbiAqL1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzSW9zV2VidmlldyA9XG4gICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoSW9zV2Vidmlld187XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBDaHJvbWUuXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0Nocm9tZSA9XG4gICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQ2hyb21lXztcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIHRoZSBBbmRyb2lkIGJyb3dzZXIuXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0FuZHJvaWRCcm93c2VyID1cbiAgICBnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hBbmRyb2lkQnJvd3Nlcl87XG5cblxuLyoqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOlxuICogaHR0cDovL2RvY3MuYXdzLmFtYXpvbi5jb20vc2lsay9sYXRlc3QvZGV2ZWxvcGVyZ3VpZGUvdXNlci1hZ2VudC5odG1sXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBTaWxrLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNTaWxrID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoJ1NpbGsnKTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBicm93c2VyIHZlcnNpb24gb3IgZW1wdHkgc3RyaW5nIGlmIHZlcnNpb24gY2Fubm90IGJlXG4gKiAgICAgZGV0ZXJtaW5lZC4gTm90ZSB0aGF0IGZvciBJbnRlcm5ldCBFeHBsb3JlciwgdGhpcyByZXR1cm5zIHRoZSB2ZXJzaW9uIG9mXG4gKiAgICAgdGhlIGJyb3dzZXIsIG5vdCB0aGUgdmVyc2lvbiBvZiB0aGUgcmVuZGVyaW5nIGVuZ2luZS4gKElFIDggaW5cbiAqICAgICBjb21wYXRpYmlsaXR5IG1vZGUgd2lsbCByZXR1cm4gOC4wIHJhdGhlciB0aGFuIDcuMC4gVG8gZGV0ZXJtaW5lIHRoZVxuICogICAgIHJlbmRlcmluZyBlbmdpbmUgdmVyc2lvbiwgbG9vayBhdCBkb2N1bWVudC5kb2N1bWVudE1vZGUgaW5zdGVhZC4gU2VlXG4gKiAgICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjMTk2OTg4KHY9dnMuODUpLmFzcHggZm9yIG1vcmVcbiAqICAgICBkZXRhaWxzLilcbiAqL1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmdldFZlcnNpb24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHVzZXJBZ2VudFN0cmluZyA9IGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXRVc2VyQWdlbnQoKTtcbiAgLy8gU3BlY2lhbCBjYXNlIElFIHNpbmNlIElFJ3MgdmVyc2lvbiBpcyBpbnNpZGUgdGhlIHBhcmVudGhlc2lzIGFuZFxuICAvLyB3aXRob3V0IHRoZSAnLycuXG4gIGlmIChnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNJRSgpKSB7XG4gICAgcmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5nZXRJRVZlcnNpb25fKHVzZXJBZ2VudFN0cmluZyk7XG4gIH1cblxuICB2YXIgdmVyc2lvblR1cGxlcyA9IGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5leHRyYWN0VmVyc2lvblR1cGxlcyhcbiAgICAgIHVzZXJBZ2VudFN0cmluZyk7XG5cbiAgLy8gQ29uc3RydWN0IGEgbWFwIGZvciBlYXN5IGxvb2t1cC5cbiAgdmFyIHZlcnNpb25NYXAgPSB7fTtcbiAgZ29vZy5hcnJheS5mb3JFYWNoKHZlcnNpb25UdXBsZXMsIGZ1bmN0aW9uKHR1cGxlKSB7XG4gICAgLy8gTm90ZSB0aGF0IHRoZSB0dXBsZSBpcyBvZiBsZW5ndGggdGhyZWUsIGJ1dCB3ZSBvbmx5IGNhcmUgYWJvdXQgdGhlXG4gICAgLy8gZmlyc3QgdHdvLlxuICAgIHZhciBrZXkgPSB0dXBsZVswXTtcbiAgICB2YXIgdmFsdWUgPSB0dXBsZVsxXTtcbiAgICB2ZXJzaW9uTWFwW2tleV0gPSB2YWx1ZTtcbiAgfSk7XG5cbiAgdmFyIHZlcnNpb25NYXBIYXNLZXkgPSBnb29nLnBhcnRpYWwoZ29vZy5vYmplY3QuY29udGFpbnNLZXksIHZlcnNpb25NYXApO1xuXG4gIC8vIEdpdmVzIHRoZSB2YWx1ZSB3aXRoIHRoZSBmaXJzdCBrZXkgaXQgZmluZHMsIG90aGVyd2lzZSBlbXB0eSBzdHJpbmcuXG4gIGZ1bmN0aW9uIGxvb2tVcFZhbHVlV2l0aEtleXMoa2V5cykge1xuICAgIHZhciBrZXkgPSBnb29nLmFycmF5LmZpbmQoa2V5cywgdmVyc2lvbk1hcEhhc0tleSk7XG4gICAgcmV0dXJuIHZlcnNpb25NYXBba2V5XSB8fCAnJztcbiAgfVxuXG4gIC8vIENoZWNrIE9wZXJhIGJlZm9yZSBDaHJvbWUgc2luY2UgT3BlcmEgMTUrIGhhcyBcIkNocm9tZVwiIGluIHRoZSBzdHJpbmcuXG4gIC8vIFNlZVxuICAvLyBodHRwOi8vbXkub3BlcmEuY29tL09ESU4vYmxvZy8yMDEzLzA3LzE1L29wZXJhLXVzZXItYWdlbnQtc3RyaW5ncy1vcGVyYS0xNS1hbmQtYmV5b25kXG4gIGlmIChnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNPcGVyYSgpKSB7XG4gICAgLy8gT3BlcmEgMTAgaGFzIFZlcnNpb24vMTAuMCBidXQgT3BlcmEvOS44LCBzbyBsb29rIGZvciBcIlZlcnNpb25cIiBmaXJzdC5cbiAgICAvLyBPcGVyYSB1c2VzICdPUFInIGZvciBtb3JlIHJlY2VudCBVQXMuXG4gICAgcmV0dXJuIGxvb2tVcFZhbHVlV2l0aEtleXMoWydWZXJzaW9uJywgJ09wZXJhJywgJ09QUiddKTtcbiAgfVxuXG4gIC8vIENoZWNrIEVkZ2UgYmVmb3JlIENocm9tZSBzaW5jZSBpdCBoYXMgQ2hyb21lIGluIHRoZSBzdHJpbmcuXG4gIGlmIChnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNFZGdlKCkpIHtcbiAgICByZXR1cm4gbG9va1VwVmFsdWVXaXRoS2V5cyhbJ0VkZ2UnXSk7XG4gIH1cblxuICBpZiAoZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzQ2hyb21lKCkpIHtcbiAgICByZXR1cm4gbG9va1VwVmFsdWVXaXRoS2V5cyhbJ0Nocm9tZScsICdDcmlPUyddKTtcbiAgfVxuXG4gIC8vIFVzdWFsbHkgcHJvZHVjdHMgYnJvd3NlciB2ZXJzaW9ucyBhcmUgaW4gdGhlIHRoaXJkIHR1cGxlIGFmdGVyIFwiTW96aWxsYVwiXG4gIC8vIGFuZCB0aGUgZW5naW5lLlxuICB2YXIgdHVwbGUgPSB2ZXJzaW9uVHVwbGVzWzJdO1xuICByZXR1cm4gdHVwbGUgJiYgdHVwbGVbMV0gfHwgJyc7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2ZXJzaW9uIFRoZSB2ZXJzaW9uIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYnJvd3NlciB2ZXJzaW9uIGlzIGhpZ2hlciBvciB0aGUgc2FtZSBhcyB0aGVcbiAqICAgICBnaXZlbiB2ZXJzaW9uLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNWZXJzaW9uT3JIaWdoZXIgPSBmdW5jdGlvbih2ZXJzaW9uKSB7XG4gIHJldHVybiBnb29nLnN0cmluZy5jb21wYXJlVmVyc2lvbnMoZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmdldFZlcnNpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uKSA+PSAwO1xufTtcblxuXG4vKipcbiAqIERldGVybWluZXMgSUUgdmVyc2lvbi4gTW9yZSBpbmZvcm1hdGlvbjpcbiAqIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9iZzE4MjYyNSh2PXZzLjg1KS5hc3B4I3VhU3RyaW5nXG4gKiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaGg4NjkzMDEodj12cy44NSkuYXNweFxuICogaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWUvYXJjaGl2ZS8yMDEwLzAzLzIzL2ludHJvZHVjaW5nLWllOS1zLXVzZXItYWdlbnQtc3RyaW5nLmFzcHhcbiAqIGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llL2FyY2hpdmUvMjAwOS8wMS8wOS90aGUtaW50ZXJuZXQtZXhwbG9yZXItOC11c2VyLWFnZW50LXN0cmluZy11cGRhdGVkLWVkaXRpb24uYXNweFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyQWdlbnQgdGhlIFVzZXItQWdlbnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuZ2V0SUVWZXJzaW9uXyA9IGZ1bmN0aW9uKHVzZXJBZ2VudCkge1xuICAvLyBJRTExIG1heSBpZGVudGlmeSBpdHNlbGYgYXMgTVNJRSA5LjAgb3IgTVNJRSAxMC4wIGR1ZSB0byBhbiBJRSAxMSB1cGdyYWRlXG4gIC8vIGJ1Zy4gRXhhbXBsZSBVQTpcbiAgLy8gTW96aWxsYS81LjAgKE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKVxuICAvLyBsaWtlIEdlY2tvLlxuICAvLyBTZWUgaHR0cDovL3d3dy53aGF0aXNteWJyb3dzZXIuY29tL2RldmVsb3BlcnMvdW5rbm93bi11c2VyLWFnZW50LWZyYWdtZW50cy5cbiAgdmFyIHJ2ID0gL3J2OiAqKFtcXGRcXC5dKikvLmV4ZWModXNlckFnZW50KTtcbiAgaWYgKHJ2ICYmIHJ2WzFdKSB7XG4gICAgcmV0dXJuIHJ2WzFdO1xuICB9XG5cbiAgdmFyIHZlcnNpb24gPSAnJztcbiAgdmFyIG1zaWUgPSAvTVNJRSArKFtcXGRcXC5dKykvLmV4ZWModXNlckFnZW50KTtcbiAgaWYgKG1zaWUgJiYgbXNpZVsxXSkge1xuICAgIC8vIElFIGluIGNvbXBhdGliaWxpdHkgbW9kZSB1c3VhbGx5IGlkZW50aWZpZXMgaXRzZWxmIGFzIE1TSUUgNy4wOyBpbiB0aGlzXG4gICAgLy8gY2FzZSwgdXNlIHRoZSBUcmlkZW50IHZlcnNpb24gdG8gZGV0ZXJtaW5lIHRoZSB2ZXJzaW9uIG9mIElFLiBGb3IgbW9yZVxuICAgIC8vIGRldGFpbHMsIHNlZSB0aGUgbGlua3MgYWJvdmUuXG4gICAgdmFyIHRyaWRlbnRWZXJzaW9uID0gL1RyaWRlbnRcXC8oXFxkLlxcZCkvLmV4ZWModXNlckFnZW50KTtcbiAgICBpZiAobXNpZVsxXSA9PSAnNy4wJykge1xuICAgICAgaWYgKHRyaWRlbnRWZXJzaW9uICYmIHRyaWRlbnRWZXJzaW9uWzFdKSB7XG4gICAgICAgIHN3aXRjaCAodHJpZGVudFZlcnNpb25bMV0pIHtcbiAgICAgICAgICBjYXNlICc0LjAnOlxuICAgICAgICAgICAgdmVyc2lvbiA9ICc4LjAnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnNS4wJzpcbiAgICAgICAgICAgIHZlcnNpb24gPSAnOS4wJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJzYuMCc6XG4gICAgICAgICAgICB2ZXJzaW9uID0gJzEwLjAnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnNy4wJzpcbiAgICAgICAgICAgIHZlcnNpb24gPSAnMTEuMCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmVyc2lvbiA9ICc3LjAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2ZXJzaW9uID0gbXNpZVsxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZlcnNpb247XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTMgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBDbG9zdXJlIHVzZXIgYWdlbnQgZGV0ZWN0aW9uLlxuICogQHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VzZXJfYWdlbnRcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGJyb3dzZXIgYnJhbmQsIHBsYXRmb3JtLCBvciBkZXZpY2Ugc2VlIHRoZSBvdGhlclxuICogc3ViLW5hbWVzcGFjZXMgaW4gZ29vZy5sYWJzLnVzZXJBZ2VudCAoYnJvd3NlciwgcGxhdGZvcm0sIGFuZCBkZXZpY2UpLlxuICpcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cubGFicy51c2VyQWdlbnQuZW5naW5lJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hcnJheScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmxhYnMudXNlckFnZW50LnV0aWwnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcnKTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlbmRlcmluZyBlbmdpbmUgaXMgUHJlc3RvLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5pc1ByZXN0byA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdQcmVzdG8nKTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSByZW5kZXJpbmcgZW5naW5lIGlzIFRyaWRlbnQuXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzVHJpZGVudCA9IGZ1bmN0aW9uKCkge1xuICAvLyBJRSBvbmx5IHN0YXJ0ZWQgaW5jbHVkaW5nIHRoZSBUcmlkZW50IHRva2VuIGluIElFOC5cbiAgcmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudCgnVHJpZGVudCcpIHx8XG4gICAgICBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoJ01TSUUnKTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSByZW5kZXJpbmcgZW5naW5lIGlzIEVkZ2UuXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzRWRnZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdFZGdlJyk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVuZGVyaW5nIGVuZ2luZSBpcyBXZWJLaXQuXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzV2ViS2l0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnRJZ25vcmVDYXNlKCdXZWJLaXQnKSAmJlxuICAgICAgIWdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzRWRnZSgpO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlbmRlcmluZyBlbmdpbmUgaXMgR2Vja28uXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzR2Vja28gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudCgnR2Vja28nKSAmJlxuICAgICAgIWdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzV2ViS2l0KCkgJiZcbiAgICAgICFnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5pc1RyaWRlbnQoKSAmJlxuICAgICAgIWdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzRWRnZSgpO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHJlbmRlcmluZyBlbmdpbmUncyB2ZXJzaW9uIG9yIGVtcHR5IHN0cmluZyBpZiB2ZXJzaW9uXG4gKiAgICAgY2FuJ3QgYmUgZGV0ZXJtaW5lZC5cbiAqL1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuZ2V0VmVyc2lvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdXNlckFnZW50U3RyaW5nID0gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmdldFVzZXJBZ2VudCgpO1xuICBpZiAodXNlckFnZW50U3RyaW5nKSB7XG4gICAgdmFyIHR1cGxlcyA9IGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5leHRyYWN0VmVyc2lvblR1cGxlcyhcbiAgICAgICAgdXNlckFnZW50U3RyaW5nKTtcblxuICAgIHZhciBlbmdpbmVUdXBsZSA9IGdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmdldEVuZ2luZVR1cGxlXyh0dXBsZXMpO1xuICAgIGlmIChlbmdpbmVUdXBsZSkge1xuICAgICAgLy8gSW4gR2Vja28sIHRoZSB2ZXJzaW9uIHN0cmluZyBpcyBlaXRoZXIgaW4gdGhlIGJyb3dzZXIgaW5mbyBvciB0aGVcbiAgICAgIC8vIEZpcmVmb3ggdmVyc2lvbi4gIFNlZSBHZWNrbyB1c2VyIGFnZW50IHN0cmluZyByZWZlcmVuY2U6XG4gICAgICAvLyBodHRwOi8vZ29vLmdsL21VTHFhXG4gICAgICBpZiAoZW5naW5lVHVwbGVbMF0gPT0gJ0dlY2tvJykge1xuICAgICAgICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuZ2V0VmVyc2lvbkZvcktleV8oXG4gICAgICAgICAgICB0dXBsZXMsICdGaXJlZm94Jyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbmdpbmVUdXBsZVsxXTtcbiAgICB9XG5cbiAgICAvLyBNU0lFIGhhcyBvbmx5IG9uZSB2ZXJzaW9uIGlkZW50aWZpZXIsIGFuZCB0aGUgVHJpZGVudCB2ZXJzaW9uIGlzXG4gICAgLy8gc3BlY2lmaWVkIGluIHRoZSBwYXJlbnRoZXRpY2FsLiBJRSBFZGdlIGlzIGNvdmVyZWQgaW4gdGhlIGVuZ2luZSB0dXBsZVxuICAgIC8vIGRldGVjdGlvbi5cbiAgICB2YXIgYnJvd3NlclR1cGxlID0gdHVwbGVzWzBdO1xuICAgIHZhciBpbmZvO1xuICAgIGlmIChicm93c2VyVHVwbGUgJiYgKGluZm8gPSBicm93c2VyVHVwbGVbMl0pKSB7XG4gICAgICB2YXIgbWF0Y2ggPSAvVHJpZGVudFxcLyhbXlxccztdKykvLmV4ZWMoaW5mbyk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8IUFycmF5PHN0cmluZz4+fSB0dXBsZXMgRXh0cmFjdGVkIHZlcnNpb24gdHVwbGVzLlxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz58dW5kZWZpbmVkfSBUaGUgZW5naW5lIHR1cGxlIG9yIHVuZGVmaW5lZCBpZiBub3RcbiAqICAgICBmb3VuZC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmdldEVuZ2luZVR1cGxlXyA9IGZ1bmN0aW9uKHR1cGxlcykge1xuICBpZiAoIWdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzRWRnZSgpKSB7XG4gICAgcmV0dXJuIHR1cGxlc1sxXTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHR1cGxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0dXBsZSA9IHR1cGxlc1tpXTtcbiAgICBpZiAodHVwbGVbMF0gPT0gJ0VkZ2UnKSB7XG4gICAgICByZXR1cm4gdHVwbGU7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2ZXJzaW9uIFRoZSB2ZXJzaW9uIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVuZGVyaW5nIGVuZ2luZSB2ZXJzaW9uIGlzIGhpZ2hlciBvciB0aGUgc2FtZVxuICogICAgIGFzIHRoZSBnaXZlbiB2ZXJzaW9uLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5pc1ZlcnNpb25PckhpZ2hlciA9IGZ1bmN0aW9uKHZlcnNpb24pIHtcbiAgcmV0dXJuIGdvb2cuc3RyaW5nLmNvbXBhcmVWZXJzaW9ucyhnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5nZXRWZXJzaW9uKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbikgPj0gMDtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTwhQXJyYXk8c3RyaW5nPj59IHR1cGxlcyBWZXJzaW9uIHR1cGxlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSB0byBsb29rIGZvci5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHZlcnNpb24gc3RyaW5nIG9mIHRoZSBnaXZlbiBrZXksIGlmIHByZXNlbnQuXG4gKiAgICAgT3RoZXJ3aXNlLCB0aGUgZW1wdHkgc3RyaW5nLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuZ2V0VmVyc2lvbkZvcktleV8gPSBmdW5jdGlvbih0dXBsZXMsIGtleSkge1xuICAvLyBUT0RPKG5uYXplKTogTW92ZSB0byB1dGlsIGlmIHVzZWZ1bCBlbHNld2hlcmUuXG5cbiAgdmFyIHBhaXIgPSBnb29nLmFycmF5LmZpbmQodHVwbGVzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgcmV0dXJuIGtleSA9PSBwYWlyWzBdO1xuICB9KTtcblxuICByZXR1cm4gcGFpciAmJiBwYWlyWzFdIHx8ICcnO1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDEzIFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ2xvc3VyZSB1c2VyIGFnZW50IHBsYXRmb3JtIGRldGVjdGlvbi5cbiAqIEBzZWUgPGEgaHJlZj1cImh0dHA6Ly93d3cudXNlcmFnZW50c3RyaW5nLmNvbS9cIj5Vc2VyIGFnZW50IHN0cmluZ3M8L2E+XG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBicm93c2VyIGJyYW5kLCByZW5kZXJpbmcgZW5naW5lLCBvciBkZXZpY2Ugc2VlIHRoZVxuICogb3RoZXIgc3ViLW5hbWVzcGFjZXMgaW4gZ29vZy5sYWJzLnVzZXJBZ2VudCAoYnJvd3NlciwgZW5naW5lLCBhbmQgZGV2aWNlXG4gKiByZXNwZWN0aXZlbHkpLlxuICpcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0nKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLmxhYnMudXNlckFnZW50LnV0aWwnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcnKTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHBsYXRmb3JtIGlzIEFuZHJvaWQuXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNBbmRyb2lkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoJ0FuZHJvaWQnKTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBwbGF0Zm9ybSBpcyBpUG9kLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBvZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdpUG9kJyk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcGxhdGZvcm0gaXMgaVBob25lLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBob25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoJ2lQaG9uZScpICYmXG4gICAgICAhZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdpUG9kJykgJiZcbiAgICAgICFnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoJ2lQYWQnKTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBwbGF0Zm9ybSBpcyBpUGFkLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBhZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdpUGFkJyk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcGxhdGZvcm0gaXMgaU9TLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSW9zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBob25lKCkgfHxcbiAgICAgIGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNJcGFkKCkgfHxcbiAgICAgIGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNJcG9kKCk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcGxhdGZvcm0gaXMgTWFjLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzTWFjaW50b3NoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoJ01hY2ludG9zaCcpO1xufTtcblxuXG4vKipcbiAqIE5vdGU6IENocm9tZU9TIGlzIG5vdCBjb25zaWRlcmVkIHRvIGJlIExpbnV4IGFzIGl0IGRvZXMgbm90IHJlcG9ydCBpdHNlbGZcbiAqIGFzIExpbnV4IGluIHRoZSB1c2VyIGFnZW50IHN0cmluZy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHBsYXRmb3JtIGlzIExpbnV4LlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzTGludXggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudCgnTGludXgnKTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBwbGF0Zm9ybSBpcyBXaW5kb3dzLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzV2luZG93cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdXaW5kb3dzJyk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcGxhdGZvcm0gaXMgQ2hyb21lT1MuXG4gKi9cbmdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNDaHJvbWVPUyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdDck9TJyk7XG59O1xuXG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHBsYXRmb3JtLiBXZSBvbmx5IGRldGVybWluZSB0aGUgdmVyc2lvbiBmb3IgV2luZG93cyxcbiAqIE1hYywgYW5kIENocm9tZSBPUy4gSXQgZG9lc24ndCBtYWtlIG11Y2ggc2Vuc2Ugb24gTGludXguIEZvciBXaW5kb3dzLCB3ZSBvbmx5XG4gKiBsb29rIGF0IHRoZSBOVCB2ZXJzaW9uLiBOb24tTlQtYmFzZWQgdmVyc2lvbnMgKGUuZy4gOTUsIDk4LCBldGMuKSBhcmUgZ2l2ZW5cbiAqIHZlcnNpb24gMC4wLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHBsYXRmb3JtIHZlcnNpb24gb3IgZW1wdHkgc3RyaW5nIGlmIHZlcnNpb24gY2Fubm90IGJlXG4gKiAgICAgZGV0ZXJtaW5lZC5cbiAqL1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5nZXRWZXJzaW9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciB1c2VyQWdlbnRTdHJpbmcgPSBnb29nLmxhYnMudXNlckFnZW50LnV0aWwuZ2V0VXNlckFnZW50KCk7XG4gIHZhciB2ZXJzaW9uID0gJycsIHJlO1xuICBpZiAoZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc1dpbmRvd3MoKSkge1xuICAgIHJlID0gL1dpbmRvd3MgKD86TlR8UGhvbmUpIChbMC05Ll0rKS87XG4gICAgdmFyIG1hdGNoID0gcmUuZXhlYyh1c2VyQWdlbnRTdHJpbmcpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2ZXJzaW9uID0gJzAuMCc7XG4gICAgfVxuICB9IGVsc2UgaWYgKGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNJb3MoKSkge1xuICAgIHJlID0gLyg/OmlQaG9uZXxpUG9kfGlQYWR8Q1BVKVxccytPU1xccysoXFxTKykvO1xuICAgIHZhciBtYXRjaCA9IHJlLmV4ZWModXNlckFnZW50U3RyaW5nKTtcbiAgICAvLyBSZXBvcnQgdGhlIHZlcnNpb24gYXMgeC55LnogYW5kIG5vdCB4X3lfelxuICAgIHZlcnNpb24gPSBtYXRjaCAmJiBtYXRjaFsxXS5yZXBsYWNlKC9fL2csICcuJyk7XG4gIH0gZWxzZSBpZiAoZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc01hY2ludG9zaCgpKSB7XG4gICAgcmUgPSAvTWFjIE9TIFggKFswLTlfLl0rKS87XG4gICAgdmFyIG1hdGNoID0gcmUuZXhlYyh1c2VyQWdlbnRTdHJpbmcpO1xuICAgIC8vIE5vdGU6IHNvbWUgb2xkIHZlcnNpb25zIG9mIENhbWlubyBkbyBub3QgcmVwb3J0IGFuIE9TWCB2ZXJzaW9uLlxuICAgIC8vIERlZmF1bHQgdG8gMTAuXG4gICAgdmVyc2lvbiA9IG1hdGNoID8gbWF0Y2hbMV0ucmVwbGFjZSgvXy9nLCAnLicpIDogJzEwJztcbiAgfSBlbHNlIGlmIChnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzQW5kcm9pZCgpKSB7XG4gICAgcmUgPSAvQW5kcm9pZFxccysoW15cXCk7XSspKFxcKXw7KS87XG4gICAgdmFyIG1hdGNoID0gcmUuZXhlYyh1c2VyQWdlbnRTdHJpbmcpO1xuICAgIHZlcnNpb24gPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgfSBlbHNlIGlmIChnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzQ2hyb21lT1MoKSkge1xuICAgIHJlID0gLyg/OkNyT1NcXHMrKD86aTY4Nnx4ODZfNjQpXFxzKyhbMC05Ll0rKSkvO1xuICAgIHZhciBtYXRjaCA9IHJlLmV4ZWModXNlckFnZW50U3RyaW5nKTtcbiAgICB2ZXJzaW9uID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gIH1cbiAgcmV0dXJuIHZlcnNpb24gfHwgJyc7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2ZXJzaW9uIFRoZSB2ZXJzaW9uIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYnJvd3NlciB2ZXJzaW9uIGlzIGhpZ2hlciBvciB0aGUgc2FtZSBhcyB0aGVcbiAqICAgICBnaXZlbiB2ZXJzaW9uLlxuICovXG5nb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzVmVyc2lvbk9ySGlnaGVyID0gZnVuY3Rpb24odmVyc2lvbikge1xuICByZXR1cm4gZ29vZy5zdHJpbmcuY29tcGFyZVZlcnNpb25zKGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uZ2V0VmVyc2lvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24pID49IDA7XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMDYgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBSZW5kZXJpbmcgZW5naW5lIGRldGVjdGlvbi5cbiAqIEBzZWUgPGEgaHJlZj1cImh0dHA6Ly93d3cudXNlcmFnZW50c3RyaW5nLmNvbS9cIj5Vc2VyIGFnZW50IHN0cmluZ3M8L2E+XG4gKiBGb3IgaW5mb3JtYXRpb24gb24gdGhlIGJyb3dzZXIgYnJhbmQgKHN1Y2ggYXMgU2FmYXJpIHZlcnN1cyBDaHJvbWUpLCBzZWVcbiAqIGdvb2cudXNlckFnZW50LnByb2R1Y3QuXG4gKiBAYXV0aG9yIGFydkBnb29nbGUuY29tIChFcmlrIEFydmlkc3NvbilcbiAqIEBzZWUgLi4vZGVtb3MvdXNlcmFnZW50Lmh0bWxcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cudXNlckFnZW50Jyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy51c2VyQWdlbnQuZW5naW5lJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0nKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuc3RyaW5nJyk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHdlIGtub3cgYXQgY29tcGlsZS10aW1lIHRoYXQgdGhlIGJyb3dzZXIgaXMgSUUuXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5BU1NVTUVfSUUnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHdlIGtub3cgYXQgY29tcGlsZS10aW1lIHRoYXQgdGhlIGJyb3dzZXIgaXMgRURHRS5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cudXNlckFnZW50LkFTU1VNRV9FREdFJywgZmFsc2UpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB3ZSBrbm93IGF0IGNvbXBpbGUtdGltZSB0aGF0IHRoZSBicm93c2VyIGlzIEdFQ0tPLlxuICovXG5nb29nLmRlZmluZSgnZ29vZy51c2VyQWdlbnQuQVNTVU1FX0dFQ0tPJywgZmFsc2UpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB3ZSBrbm93IGF0IGNvbXBpbGUtdGltZSB0aGF0IHRoZSBicm93c2VyIGlzIFdFQktJVC5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cudXNlckFnZW50LkFTU1VNRV9XRUJLSVQnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHdlIGtub3cgYXQgY29tcGlsZS10aW1lIHRoYXQgdGhlIGJyb3dzZXIgaXMgYVxuICogICAgIG1vYmlsZSBkZXZpY2UgcnVubmluZyBXZWJLaXQgZS5nLiBpUGhvbmUgb3IgQW5kcm9pZC5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cudXNlckFnZW50LkFTU1VNRV9NT0JJTEVfV0VCS0lUJywgZmFsc2UpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB3ZSBrbm93IGF0IGNvbXBpbGUtdGltZSB0aGF0IHRoZSBicm93c2VyIGlzIE9QRVJBLlxuICovXG5nb29nLmRlZmluZSgnZ29vZy51c2VyQWdlbnQuQVNTVU1FX09QRVJBJywgZmFsc2UpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGVcbiAqICAgICB7QGNvZGUgZ29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXJ9XG4gKiAgICAgZnVuY3Rpb24gd2lsbCByZXR1cm4gdHJ1ZSBmb3IgYW55IHZlcnNpb24uXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5BU1NVTUVfQU5ZX1ZFUlNJT04nLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHdlIGtub3cgdGhlIGJyb3dzZXIgZW5naW5lIGF0IGNvbXBpbGUtdGltZS5cbiAqIEB0eXBlIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51c2VyQWdlbnQuQlJPV1NFUl9LTk9XTl8gPVxuICAgIGdvb2cudXNlckFnZW50LkFTU1VNRV9JRSB8fFxuICAgIGdvb2cudXNlckFnZW50LkFTU1VNRV9FREdFIHx8XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX0dFQ0tPIHx8XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX01PQklMRV9XRUJLSVQgfHxcbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfV0VCS0lUIHx8XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX09QRVJBO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgdXNlckFnZW50IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB1c2VyQWdlbnQgc3RyaW5nLlxuICovXG5nb29nLnVzZXJBZ2VudC5nZXRVc2VyQWdlbnRTdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXRVc2VyQWdlbnQoKTtcbn07XG5cblxuLyoqXG4gKiBUT0RPKG5uYXplKTogQ2hhbmdlIHR5cGUgdG8gXCJOYXZpZ2F0b3JcIiBhbmQgdXBkYXRlIGNvbXBpbGF0aW9uIHRhcmdldHMuXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuYXRpdmUgbmF2aWdhdG9yIG9iamVjdC5cbiAqL1xuZ29vZy51c2VyQWdlbnQuZ2V0TmF2aWdhdG9yID0gZnVuY3Rpb24oKSB7XG4gIC8vIE5lZWQgYSBsb2NhbCBuYXZpZ2F0b3IgcmVmZXJlbmNlIGluc3RlYWQgb2YgdXNpbmcgdGhlIGdsb2JhbCBvbmUsXG4gIC8vIHRvIGF2b2lkIHRoZSByYXJlIGNhc2Ugd2hlcmUgdGhleSByZWZlcmVuY2UgZGlmZmVyZW50IG9iamVjdHMuXG4gIC8vIChpbiBhIFdvcmtlclBvb2wsIGZvciBleGFtcGxlKS5cbiAgcmV0dXJuIGdvb2cuZ2xvYmFsWyduYXZpZ2F0b3InXSB8fCBudWxsO1xufTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgT3BlcmEuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQuT1BFUkEgPSBnb29nLnVzZXJBZ2VudC5CUk9XU0VSX0tOT1dOXyA/XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX09QRVJBIDpcbiAgICBnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNPcGVyYSgpO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBJbnRlcm5ldCBFeHBsb3Jlci5cbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnVzZXJBZ2VudC5JRSA9IGdvb2cudXNlckFnZW50LkJST1dTRVJfS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfSUUgOlxuICAgIGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0lFKCk7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIE1pY3Jvc29mdCBFZGdlLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LkVER0UgPSBnb29nLnVzZXJBZ2VudC5CUk9XU0VSX0tOT1dOXyA/XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX0VER0UgOlxuICAgIGdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzRWRnZSgpO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBNUyBJbnRlcm5ldCBFeHBsb3JlciBvciBNUyBFZGdlLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LkVER0VfT1JfSUUgPSBnb29nLnVzZXJBZ2VudC5FREdFIHx8IGdvb2cudXNlckFnZW50LklFO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBHZWNrby4gR2Vja28gaXMgdGhlIHJlbmRlcmluZyBlbmdpbmUgdXNlZCBieVxuICogTW96aWxsYSwgRmlyZWZveCwgYW5kIG90aGVycy5cbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnVzZXJBZ2VudC5HRUNLTyA9IGdvb2cudXNlckFnZW50LkJST1dTRVJfS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfR0VDS08gOlxuICAgIGdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzR2Vja28oKTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgV2ViS2l0LiBXZWJLaXQgaXMgdGhlIHJlbmRlcmluZyBlbmdpbmUgdGhhdFxuICogU2FmYXJpLCBBbmRyb2lkIGFuZCBvdGhlcnMgdXNlLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LldFQktJVCA9IGdvb2cudXNlckFnZW50LkJST1dTRVJfS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfV0VCS0lUIHx8IGdvb2cudXNlckFnZW50LkFTU1VNRV9NT0JJTEVfV0VCS0lUIDpcbiAgICBnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5pc1dlYktpdCgpO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBydW5uaW5nIG9uIGEgbW9iaWxlIGRldmljZS5cbiAqXG4gKiBUaGlzIGlzIGEgc2VwYXJhdGUgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9naWMgY2FuIGJlIHRlc3RlZC5cbiAqXG4gKiBUT0RPKG5uYXplKTogSW52ZXN0aWdhdGUgc3dhcHBpbmcgaW4gZ29vZy5sYWJzLnVzZXJBZ2VudC5kZXZpY2UuaXNNb2JpbGUoKS5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gYSBtb2JpbGUgZGV2aWNlLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51c2VyQWdlbnQuaXNNb2JpbGVfID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLnVzZXJBZ2VudC5XRUJLSVQgJiZcbiAgICAgICAgIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudCgnTW9iaWxlJyk7XG59O1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBydW5uaW5nIG9uIGEgbW9iaWxlIGRldmljZS5cbiAqXG4gKiBUT0RPKG5uYXplKTogQ29uc2lkZXIgZGVwcmVjYXRpbmcgTU9CSUxFIHdoZW4gbGFicy51c2VyQWdlbnRcbiAqICAgaXMgcHJvbW90ZWQgYXMgdGhlIGdlY2tvL3dlYmtpdCBsb2dpYyBpcyBsaWtlbHkgaW5hY2N1cmF0ZS5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQuTU9CSUxFID0gZ29vZy51c2VyQWdlbnQuQVNTVU1FX01PQklMRV9XRUJLSVQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvb2cudXNlckFnZW50LmlzTW9iaWxlXygpO1xuXG5cbi8qKlxuICogVXNlZCB3aGlsZSB0cmFuc2l0aW9uaW5nIGNvZGUgdG8gdXNlIFdFQktJVCBpbnN0ZWFkLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIGdvb2cudXNlckFnZW50LnByb2R1Y3QuU0FGQVJJfSBpbnN0ZWFkLlxuICogVE9ETyhuaWNrc2FudG9zKTogRGVsZXRlIHRoaXMgZnJvbSBnb29nLnVzZXJBZ2VudC5cbiAqL1xuZ29vZy51c2VyQWdlbnQuU0FGQVJJID0gZ29vZy51c2VyQWdlbnQuV0VCS0lUO1xuXG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgcGxhdGZvcm0gKG9wZXJhdGluZyBzeXN0ZW0pIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmdcbiAqICAgICBvbi4gRGVmYXVsdCB0byBlbXB0eSBzdHJpbmcgYmVjYXVzZSBuYXZpZ2F0b3IucGxhdGZvcm0gbWF5IG5vdCBiZSBkZWZpbmVkXG4gKiAgICAgKG9uIFJoaW5vLCBmb3IgZXhhbXBsZSkuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVzZXJBZ2VudC5kZXRlcm1pbmVQbGF0Zm9ybV8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIG5hdmlnYXRvciA9IGdvb2cudXNlckFnZW50LmdldE5hdmlnYXRvcigpO1xuICByZXR1cm4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci5wbGF0Zm9ybSB8fCAnJztcbn07XG5cblxuLyoqXG4gKiBUaGUgcGxhdGZvcm0gKG9wZXJhdGluZyBzeXN0ZW0pIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24uIERlZmF1bHQgdG9cbiAqIGVtcHR5IHN0cmluZyBiZWNhdXNlIG5hdmlnYXRvci5wbGF0Zm9ybSBtYXkgbm90IGJlIGRlZmluZWQgKG9uIFJoaW5vLCBmb3JcbiAqIGV4YW1wbGUpLlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZ29vZy51c2VyQWdlbnQuUExBVEZPUk0gPSBnb29nLnVzZXJBZ2VudC5kZXRlcm1pbmVQbGF0Zm9ybV8oKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBhIE1hY2ludG9zaCBvcGVyYXRpbmdcbiAqICAgICBzeXN0ZW0uXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5BU1NVTUVfTUFDJywgZmFsc2UpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBydW5uaW5nIG9uIGEgV2luZG93cyBvcGVyYXRpbmdcbiAqICAgICBzeXN0ZW0uXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5BU1NVTUVfV0lORE9XUycsIGZhbHNlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBhIExpbnV4IG9wZXJhdGluZ1xuICogICAgIHN5c3RlbS5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cudXNlckFnZW50LkFTU1VNRV9MSU5VWCcsIGZhbHNlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBhIFgxMSB3aW5kb3dpbmdcbiAqICAgICBzeXN0ZW0uXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5BU1NVTUVfWDExJywgZmFsc2UpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBydW5uaW5nIG9uIEFuZHJvaWQuXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5BU1NVTUVfQU5EUk9JRCcsIGZhbHNlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBhbiBpUGhvbmUuXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBIT05FJywgZmFsc2UpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBydW5uaW5nIG9uIGFuIGlQYWQuXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBBRCcsIGZhbHNlKTtcblxuXG4vKipcbiAqIEB0eXBlIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fID1cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfTUFDIHx8XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX1dJTkRPV1MgfHxcbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfTElOVVggfHxcbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfWDExIHx8XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX0FORFJPSUQgfHxcbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBIT05FIHx8XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX0lQQUQ7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gYSBNYWNpbnRvc2ggb3BlcmF0aW5nIHN5c3RlbS5cbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnVzZXJBZ2VudC5NQUMgPSBnb29nLnVzZXJBZ2VudC5QTEFURk9STV9LTk9XTl8gP1xuICAgIGdvb2cudXNlckFnZW50LkFTU1VNRV9NQUMgOiBnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzTWFjaW50b3NoKCk7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gYSBXaW5kb3dzIG9wZXJhdGluZyBzeXN0ZW0uXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQuV0lORE9XUyA9IGdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXyA/XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX1dJTkRPV1MgOlxuICAgIGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNXaW5kb3dzKCk7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIExpbnV4IHBlciB0aGUgbGVnYWN5IGJlaGF2aW9yIG9mXG4gKiBnb29nLnVzZXJBZ2VudC5MSU5VWCwgd2hpY2ggY29uc2lkZXJlZCBDaHJvbWVPUyB0byBhbHNvIGJlXG4gKiBMaW51eC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVzZXJBZ2VudC5pc0xlZ2FjeUxpbnV4XyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0xpbnV4KCkgfHxcbiAgICAgIGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNDaHJvbWVPUygpO1xufTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBhIExpbnV4IG9wZXJhdGluZyBzeXN0ZW0uXG4gKlxuICogTm90ZSB0aGF0IGdvb2cudXNlckFnZW50LkxJTlVYIGNvbnNpZGVycyBDaHJvbWVPUyB0byBiZSBMaW51eCxcbiAqIHdoaWxlIGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0gY29uc2lkZXJzIENocm9tZU9TIGFuZFxuICogTGludXggdG8gYmUgZGlmZmVyZW50IE9TZXMuXG4gKlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LkxJTlVYID0gZ29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfTElOVVggOlxuICAgIGdvb2cudXNlckFnZW50LmlzTGVnYWN5TGludXhfKCk7XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIGFuIFgxMSB3aW5kb3dpbmcgc3lzdGVtLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51c2VyQWdlbnQuaXNYMTFfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBuYXZpZ2F0b3IgPSBnb29nLnVzZXJBZ2VudC5nZXROYXZpZ2F0b3IoKTtcbiAgcmV0dXJuICEhbmF2aWdhdG9yICYmXG4gICAgICBnb29nLnN0cmluZy5jb250YWlucyhuYXZpZ2F0b3JbJ2FwcFZlcnNpb24nXSB8fCAnJywgJ1gxMScpO1xufTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBhIFgxMSB3aW5kb3dpbmcgc3lzdGVtLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LlgxMSA9IGdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXyA/XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX1gxMSA6XG4gICAgZ29vZy51c2VyQWdlbnQuaXNYMTFfKCk7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gQW5kcm9pZC5cbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnVzZXJBZ2VudC5BTkRST0lEID0gZ29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfQU5EUk9JRCA6XG4gICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0FuZHJvaWQoKTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBhbiBpUGhvbmUuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQuSVBIT05FID0gZ29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBIT05FIDpcbiAgICBnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBob25lKCk7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gYW4gaVBhZC5cbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnVzZXJBZ2VudC5JUEFEID0gZ29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBBRCA6XG4gICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwYWQoKTtcblxuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyB0aGF0IGRlc2NyaWJlcyB0aGUgdmVyc2lvbiBudW1iZXIgb2YgdGhlIHVzZXJcbiAqICAgICBhZ2VudC5cbiAqIEFzc3VtZXMgdXNlciBhZ2VudCBpcyBvcGVyYS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudXNlckFnZW50Lm9wZXJhVmVyc2lvbl8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHZlcnNpb24gPSBnb29nLmdsb2JhbC5vcGVyYS52ZXJzaW9uO1xuICB0cnkge1xuICAgIHJldHVybiB2ZXJzaW9uKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdmVyc2lvbjtcbiAgfVxufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyB0aGF0IGRlc2NyaWJlcyB0aGUgdmVyc2lvbiBudW1iZXIgb2YgdGhlIHVzZXJcbiAqICAgICBhZ2VudC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudXNlckFnZW50LmRldGVybWluZVZlcnNpb25fID0gZnVuY3Rpb24oKSB7XG4gIC8vIEFsbCBicm93c2VycyBoYXZlIGRpZmZlcmVudCB3YXlzIHRvIGRldGVjdCB0aGUgdmVyc2lvbiBhbmQgdGhleSBhbGwgaGF2ZVxuICAvLyBkaWZmZXJlbnQgbmFtaW5nIHNjaGVtZXMuXG5cbiAgaWYgKGdvb2cudXNlckFnZW50Lk9QRVJBICYmIGdvb2cuZ2xvYmFsWydvcGVyYSddKSB7XG4gICAgcmV0dXJuIGdvb2cudXNlckFnZW50Lm9wZXJhVmVyc2lvbl8oKTtcbiAgfVxuXG4gIC8vIHZlcnNpb24gaXMgYSBzdHJpbmcgcmF0aGVyIHRoYW4gYSBudW1iZXIgYmVjYXVzZSBpdCBtYXkgY29udGFpbiAnYicsICdhJyxcbiAgLy8gYW5kIHNvIG9uLlxuICB2YXIgdmVyc2lvbiA9ICcnO1xuICB2YXIgYXJyID0gZ29vZy51c2VyQWdlbnQuZ2V0VmVyc2lvblJlZ2V4UmVzdWx0XygpO1xuICBpZiAoYXJyKSB7XG4gICAgdmVyc2lvbiA9IGFyciA/IGFyclsxXSA6ICcnO1xuICB9XG5cbiAgaWYgKGdvb2cudXNlckFnZW50LklFKSB7XG4gICAgLy8gSUU5IGNhbiBiZSBpbiBkb2N1bWVudCBtb2RlIDkgYnV0IGJlIHJlcG9ydGluZyBhbiBpbmNvbnNpc3RlbnQgdXNlciBhZ2VudFxuICAgIC8vIHZlcnNpb24uICBJZiBpdCBpcyBpZGVudGlmeWluZyBhcyBhIHZlcnNpb24gbG93ZXIgdGhhbiA5IHdlIHRha2UgdGhlXG4gICAgLy8gZG9jdW1lbnRNb2RlIGFzIHRoZSB2ZXJzaW9uIGluc3RlYWQuICBJRTggaGFzIHNpbWlsYXIgYmVoYXZpb3IuXG4gICAgLy8gSXQgaXMgcmVjb21tZW5kZWQgdG8gc2V0IHRoZSBYLVVBLUNvbXBhdGlibGUgaGVhZGVyIHRvIGVuc3VyZSB0aGF0IElFOVxuICAgIC8vIHVzZXMgZG9jdW1lbnRNb2RlIDkuXG4gICAgdmFyIGRvY01vZGUgPSBnb29nLnVzZXJBZ2VudC5nZXREb2N1bWVudE1vZGVfKCk7XG4gICAgaWYgKGRvY01vZGUgPiBwYXJzZUZsb2F0KHZlcnNpb24pKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGRvY01vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2ZXJzaW9uO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge0FycmF5fHVuZGVmaW5lZH0gVGhlIHZlcnNpb24gcmVnZXggbWF0Y2hlcyBmcm9tIHBhcnNpbmcgdGhlIHVzZXJcbiAqICAgICBhZ2VudCBzdHJpbmcuIFRoZXNlIHJlZ2V4IHN0YXRlbWVudHMgbXVzdCBiZSBleGVjdXRlZCBpbmxpbmUgc28gdGhleSBjYW5cbiAqICAgICBiZSBjb21waWxlZCBvdXQgYnkgdGhlIGNsb3N1cmUgY29tcGlsZXIgd2l0aCB0aGUgcmVzdCBvZiB0aGUgdXNlcmFnZW50XG4gKiAgICAgZGV0ZWN0aW9uIGxvZ2ljIHdoZW4gQVNTVU1FXyogaXMgc3BlY2lmaWVkLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51c2VyQWdlbnQuZ2V0VmVyc2lvblJlZ2V4UmVzdWx0XyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdXNlckFnZW50ID0gZ29vZy51c2VyQWdlbnQuZ2V0VXNlckFnZW50U3RyaW5nKCk7XG4gIGlmIChnb29nLnVzZXJBZ2VudC5HRUNLTykge1xuICAgIHJldHVybiAvcnZcXDooW15cXCk7XSspKFxcKXw7KS8uZXhlYyh1c2VyQWdlbnQpO1xuICB9XG4gIGlmIChnb29nLnVzZXJBZ2VudC5FREdFKSB7XG4gICAgcmV0dXJuIC9FZGdlXFwvKFtcXGRcXC5dKykvLmV4ZWModXNlckFnZW50KTtcbiAgfVxuICBpZiAoZ29vZy51c2VyQWdlbnQuSUUpIHtcbiAgICByZXR1cm4gL1xcYig/Ok1TSUV8cnYpWzogXShbXlxcKTtdKykoXFwpfDspLy5leGVjKHVzZXJBZ2VudCk7XG4gIH1cbiAgaWYgKGdvb2cudXNlckFnZW50LldFQktJVCkge1xuICAgIC8vIFdlYktpdC8xMjUuNFxuICAgIHJldHVybiAvV2ViS2l0XFwvKFxcUyspLy5leGVjKHVzZXJBZ2VudCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBkb2N1bWVudCBtb2RlIChmb3IgdGVzdGluZykuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVzZXJBZ2VudC5nZXREb2N1bWVudE1vZGVfID0gZnVuY3Rpb24oKSB7XG4gIC8vIE5PVEUodXNlcik6IGdvb2cudXNlckFnZW50IG1heSBiZSB1c2VkIGluIGNvbnRleHQgd2hlcmUgdGhlcmUgaXMgbm8gRE9NLlxuICB2YXIgZG9jID0gZ29vZy5nbG9iYWxbJ2RvY3VtZW50J107XG4gIHJldHVybiBkb2MgPyBkb2NbJ2RvY3VtZW50TW9kZSddIDogdW5kZWZpbmVkO1xufTtcblxuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSB1c2VyIGFnZW50LiBUaGlzIGlzIGEgc3RyaW5nIGJlY2F1c2UgaXQgbWlnaHQgY29udGFpblxuICogJ2InIChhcyBpbiBiZXRhKSBhcyB3ZWxsIGFzIG11bHRpcGxlIGRvdHMuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5nb29nLnVzZXJBZ2VudC5WRVJTSU9OID0gZ29vZy51c2VyQWdlbnQuZGV0ZXJtaW5lVmVyc2lvbl8oKTtcblxuXG4vKipcbiAqIENvbXBhcmVzIHR3byB2ZXJzaW9uIG51bWJlcnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHYxIFZlcnNpb24gb2YgZmlyc3QgaXRlbS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2MiBWZXJzaW9uIG9mIHNlY29uZCBpdGVtLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gIDEgaWYgZmlyc3QgYXJndW1lbnQgaXMgaGlnaGVyXG4gKiAgICAgICAgICAgICAgICAgICAwIGlmIGFyZ3VtZW50cyBhcmUgZXF1YWxcbiAqICAgICAgICAgICAgICAgICAgLTEgaWYgc2Vjb25kIGFyZ3VtZW50IGlzIGhpZ2hlci5cbiAqIEBkZXByZWNhdGVkIFVzZSBnb29nLnN0cmluZy5jb21wYXJlVmVyc2lvbnMuXG4gKi9cbmdvb2cudXNlckFnZW50LmNvbXBhcmUgPSBmdW5jdGlvbih2MSwgdjIpIHtcbiAgcmV0dXJuIGdvb2cuc3RyaW5nLmNvbXBhcmVWZXJzaW9ucyh2MSwgdjIpO1xufTtcblxuXG4vKipcbiAqIENhY2hlIGZvciB7QGxpbmsgZ29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXJ9LlxuICogQ2FsbHMgdG8gY29tcGFyZVZlcnNpb25zIGFyZSBzdXJwcmlzaW5nbHkgZXhwZW5zaXZlIGFuZCwgYXMgYSBicm93c2VyJ3NcbiAqIHZlcnNpb24gbnVtYmVyIGlzIHVubGlrZWx5IHRvIGNoYW5nZSBkdXJpbmcgYSBzZXNzaW9uLCB3ZSBjYWNoZSB0aGUgcmVzdWx0cy5cbiAqIEBjb25zdFxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXJDYWNoZV8gPSB7fTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgdmVyc2lvbiBpcyBoaWdoZXIgb3IgdGhlIHNhbWUgYXMgdGhlIGdpdmVuIHZlcnNpb24uXG4gKiBOT1RFOiBXaGVuIGNoZWNraW5nIHRoZSB2ZXJzaW9uIG51bWJlcnMgZm9yIEZpcmVmb3ggYW5kIFNhZmFyaSwgYmUgc3VyZSB0b1xuICogdXNlIHRoZSBlbmdpbmUncyB2ZXJzaW9uLCBub3QgdGhlIGJyb3dzZXIncyB2ZXJzaW9uIG51bWJlci4gIEZvciBleGFtcGxlLFxuICogRmlyZWZveCAzLjAgY29ycmVzcG9uZHMgdG8gR2Vja28gMS45IGFuZCBTYWZhcmkgMy4wIHRvIFdlYmtpdCA1MjIuMTEuXG4gKiBPcGVyYSBhbmQgSW50ZXJuZXQgRXhwbG9yZXIgdmVyc2lvbnMgbWF0Y2ggdGhlIHByb2R1Y3QgcmVsZWFzZSBudW1iZXIuPGJyPlxuICogQHNlZSA8YSBocmVmPVwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TYWZhcmlfdmVyc2lvbl9oaXN0b3J5XCI+XG4gKiAgICAgV2Via2l0PC9hPlxuICogQHNlZSA8YSBocmVmPVwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HZWNrb19lbmdpbmVcIj5HZWNrbzwvYT5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHZlcnNpb24gVGhlIHZlcnNpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IHZlcnNpb24gaXMgaGlnaGVyIG9yIHRoZSBzYW1lIGFzXG4gKiAgICAgdGhlIGdpdmVuIHZlcnNpb24uXG4gKi9cbmdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyID0gZnVuY3Rpb24odmVyc2lvbikge1xuICByZXR1cm4gZ29vZy51c2VyQWdlbnQuQVNTVU1FX0FOWV9WRVJTSU9OIHx8XG4gICAgICBnb29nLnVzZXJBZ2VudC5pc1ZlcnNpb25PckhpZ2hlckNhY2hlX1t2ZXJzaW9uXSB8fFxuICAgICAgKGdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyQ2FjaGVfW3ZlcnNpb25dID1cbiAgICAgICAgICBnb29nLnN0cmluZy5jb21wYXJlVmVyc2lvbnMoZ29vZy51c2VyQWdlbnQuVkVSU0lPTiwgdmVyc2lvbikgPj0gMCk7XG59O1xuXG5cbi8qKlxuICogRGVwcmVjYXRlZCBhbGlhcyB0byB7QGNvZGUgZ29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXJ9LlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2ZXJzaW9uIFRoZSB2ZXJzaW9uIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlciBhZ2VudCB2ZXJzaW9uIGlzIGhpZ2hlciBvciB0aGUgc2FtZSBhc1xuICogICAgIHRoZSBnaXZlbiB2ZXJzaW9uLlxuICogQGRlcHJlY2F0ZWQgVXNlIGdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyKCkuXG4gKi9cbmdvb2cudXNlckFnZW50LmlzVmVyc2lvbiA9IGdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgSUUgZWZmZWN0aXZlIGRvY3VtZW50IG1vZGUgaXMgaGlnaGVyIG9yIHRoZSBzYW1lIGFzIHRoZSBnaXZlblxuICogZG9jdW1lbnQgbW9kZSB2ZXJzaW9uLlxuICogTk9URTogT25seSBmb3IgSUUsIHJldHVybiBmYWxzZSBmb3IgYW5vdGhlciBicm93c2VyLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBkb2N1bWVudE1vZGUgVGhlIGRvY3VtZW50IG1vZGUgdmVyc2lvbiB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIElFIGVmZmVjdGl2ZSBkb2N1bWVudCBtb2RlIGlzIGhpZ2hlciBvciB0aGVcbiAqICAgICBzYW1lIGFzIHRoZSBnaXZlbiB2ZXJzaW9uLlxuICovXG5nb29nLnVzZXJBZ2VudC5pc0RvY3VtZW50TW9kZU9ySGlnaGVyID0gZnVuY3Rpb24oZG9jdW1lbnRNb2RlKSB7XG4gIHJldHVybiBnb29nLnVzZXJBZ2VudC5ET0NVTUVOVF9NT0RFID49IGRvY3VtZW50TW9kZTtcbn07XG5cblxuLyoqXG4gKiBEZXByZWNhdGVkIGFsaWFzIHRvIHtAY29kZSBnb29nLnVzZXJBZ2VudC5pc0RvY3VtZW50TW9kZU9ySGlnaGVyfS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2ZXJzaW9uIFRoZSB2ZXJzaW9uIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgSUUgZWZmZWN0aXZlIGRvY3VtZW50IG1vZGUgaXMgaGlnaGVyIG9yIHRoZVxuICogICAgICBzYW1lIGFzIHRoZSBnaXZlbiB2ZXJzaW9uLlxuICogQGRlcHJlY2F0ZWQgVXNlIGdvb2cudXNlckFnZW50LmlzRG9jdW1lbnRNb2RlT3JIaWdoZXIoKS5cbiAqL1xuZ29vZy51c2VyQWdlbnQuaXNEb2N1bWVudE1vZGUgPSBnb29nLnVzZXJBZ2VudC5pc0RvY3VtZW50TW9kZU9ySGlnaGVyO1xuXG5cbi8qKlxuICogRm9yIElFIHZlcnNpb24gPCA3LCBkb2N1bWVudE1vZGUgaXMgdW5kZWZpbmVkLCBzbyBhdHRlbXB0IHRvIHVzZSB0aGVcbiAqIENTUzFDb21wYXQgcHJvcGVydHkgdG8gc2VlIGlmIHdlIGFyZSBpbiBzdGFuZGFyZHMgbW9kZS4gSWYgd2UgYXJlIGluXG4gKiBzdGFuZGFyZHMgbW9kZSwgdHJlYXQgdGhlIGJyb3dzZXIgdmVyc2lvbiBhcyB0aGUgZG9jdW1lbnQgbW9kZS4gT3RoZXJ3aXNlLFxuICogSUUgaXMgZW11bGF0aW5nIHZlcnNpb24gNS5cbiAqIEB0eXBlIHtudW1iZXJ8dW5kZWZpbmVkfVxuICogQGNvbnN0XG4gKi9cbmdvb2cudXNlckFnZW50LkRPQ1VNRU5UX01PREUgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBkb2MgPSBnb29nLmdsb2JhbFsnZG9jdW1lbnQnXTtcbiAgdmFyIG1vZGUgPSBnb29nLnVzZXJBZ2VudC5nZXREb2N1bWVudE1vZGVfKCk7XG4gIGlmICghZG9jIHx8ICFnb29nLnVzZXJBZ2VudC5JRSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIG1vZGUgfHwgKGRvY1snY29tcGF0TW9kZSddID09ICdDU1MxQ29tcGF0JyA/XG4gICAgICBwYXJzZUludChnb29nLnVzZXJBZ2VudC5WRVJTSU9OLCAxMCkgOiA1KTtcbn0pKCk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxMCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEJyb3dzZXIgY2FwYWJpbGl0eSBjaGVja3MgZm9yIHRoZSBkb20gcGFja2FnZS5cbiAqXG4gKi9cblxuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZG9tLkJyb3dzZXJGZWF0dXJlJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy51c2VyQWdlbnQnKTtcblxuXG4vKipcbiAqIEVudW0gb2YgYnJvd3NlciBjYXBhYmlsaXRpZXMuXG4gKiBAZW51bSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy5kb20uQnJvd3NlckZlYXR1cmUgPSB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIGF0dHJpYnV0ZXMgJ25hbWUnIGFuZCAndHlwZScgY2FuIGJlIGFkZGVkIHRvIGFuIGVsZW1lbnQgYWZ0ZXIgaXQnc1xuICAgKiBjcmVhdGVkLiBGYWxzZSBpbiBJbnRlcm5ldCBFeHBsb3JlciBwcmlvciB0byB2ZXJzaW9uIDkuXG4gICAqL1xuICBDQU5fQUREX05BTUVfT1JfVFlQRV9BVFRSSUJVVEVTOiAhZ29vZy51c2VyQWdlbnQuSUUgfHxcbiAgICAgIGdvb2cudXNlckFnZW50LmlzRG9jdW1lbnRNb2RlT3JIaWdoZXIoOSksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgd2UgY2FuIHVzZSBlbGVtZW50LmNoaWxkcmVuIHRvIGFjY2VzcyBhbiBlbGVtZW50J3MgRWxlbWVudFxuICAgKiBjaGlsZHJlbi4gQXZhaWxhYmxlIHNpbmNlIEdlY2tvIDEuOS4xLCBJRSA5LiAoSUU8OSBhbHNvIGluY2x1ZGVzIGNvbW1lbnRcbiAgICogbm9kZXMgaW4gdGhlIGNvbGxlY3Rpb24uKVxuICAgKi9cbiAgQ0FOX1VTRV9DSElMRFJFTl9BVFRSSUJVVEU6ICFnb29nLnVzZXJBZ2VudC5HRUNLTyAmJiAhZ29vZy51c2VyQWdlbnQuSUUgfHxcbiAgICAgIGdvb2cudXNlckFnZW50LklFICYmIGdvb2cudXNlckFnZW50LmlzRG9jdW1lbnRNb2RlT3JIaWdoZXIoOSkgfHxcbiAgICAgIGdvb2cudXNlckFnZW50LkdFQ0tPICYmIGdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyKCcxLjkuMScpLFxuXG4gIC8qKlxuICAgKiBPcGVyYSwgU2FmYXJpIDMsIGFuZCBJbnRlcm5ldCBFeHBsb3JlciA5IGFsbCBzdXBwb3J0IGlubmVyVGV4dCBidXQgdGhleVxuICAgKiBpbmNsdWRlIHRleHQgbm9kZXMgaW4gc2NyaXB0IGFuZCBzdHlsZSB0YWdzLiBOb3QgZG9jdW1lbnQtbW9kZS1kZXBlbmRlbnQuXG4gICAqL1xuICBDQU5fVVNFX0lOTkVSX1RFWFQ6IChcbiAgICAgIGdvb2cudXNlckFnZW50LklFICYmICFnb29nLnVzZXJBZ2VudC5pc1ZlcnNpb25PckhpZ2hlcignOScpKSxcblxuICAvKipcbiAgICogTVNJRSwgT3BlcmEsIGFuZCBTYWZhcmk+PTQgc3VwcG9ydCBlbGVtZW50LnBhcmVudEVsZW1lbnQgdG8gYWNjZXNzIGFuXG4gICAqIGVsZW1lbnQncyBwYXJlbnQgaWYgaXQgaXMgYW4gRWxlbWVudC5cbiAgICovXG4gIENBTl9VU0VfUEFSRU5UX0VMRU1FTlRfUFJPUEVSVFk6IGdvb2cudXNlckFnZW50LklFIHx8IGdvb2cudXNlckFnZW50Lk9QRVJBIHx8XG4gICAgICBnb29nLnVzZXJBZ2VudC5XRUJLSVQsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgTm9TY29wZSBlbGVtZW50cyBuZWVkIGEgc2NvcGVkIGVsZW1lbnQgd3JpdHRlbiBiZWZvcmUgdGhlbSBpblxuICAgKiBpbm5lckhUTUwuXG4gICAqIE1TRE46IGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzMzg5NyhWUy44NSkuYXNweCMxXG4gICAqL1xuICBJTk5FUl9IVE1MX05FRURTX1NDT1BFRF9FTEVNRU5UOiBnb29nLnVzZXJBZ2VudC5JRSxcblxuICAvKipcbiAgICogV2hldGhlciB3ZSB1c2UgbGVnYWN5IElFIHJhbmdlIEFQSS5cbiAgICovXG4gIExFR0FDWV9JRV9SQU5HRVM6IGdvb2cudXNlckFnZW50LklFICYmICFnb29nLnVzZXJBZ2VudC5pc0RvY3VtZW50TW9kZU9ySGlnaGVyKDkpXG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTMgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuRXZlbnRJZCcpO1xuXG5cblxuLyoqXG4gKiBBIHRlbXBsYXRlZCBjbGFzcyB0aGF0IGlzIHVzZWQgd2hlbiByZWdpc3RlcmluZyBmb3IgZXZlbnRzLiBUeXBpY2FsIHVzYWdlOlxuICogPGNvZGU+XG4gKiAgIC8qKiBAdHlwZSB7Z29vZy5ldmVudHMuRXZlbnRJZDxNeUV2ZW50T2JqPn1cbiAqICAgdmFyIG15RXZlbnRJZCA9IG5ldyBnb29nLmV2ZW50cy5FdmVudElkKFxuICogICAgICAgZ29vZy5ldmVudHMuZ2V0VW5pcXVlSWQoKCdzb21lRXZlbnQnKSk7XG4gKlxuICogICAvLyBObyBuZWVkIHRvIGNhc3Qgb3IgZGVjbGFyZSBoZXJlIHNpbmNlIHRoZSBjb21waWxlciBrbm93cyB0aGUgY29ycmVjdFxuICogICAvLyB0eXBlIG9mICdldnQnIChNeUV2ZW50T2JqKS5cbiAqICAgc29tZXRoaW5nLmxpc3RlbihteUV2ZW50SWQsIGZ1bmN0aW9uKGV2dCkge30pO1xuICogPC9jb2RlPlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudElkXG4gKiBAdGVtcGxhdGUgVFxuICogQGNvbnN0cnVjdG9yXG4gKiBAc3RydWN0XG4gKiBAZmluYWxcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRJZCA9IGZ1bmN0aW9uKGV2ZW50SWQpIHtcbiAgLyoqIEBjb25zdCAqLyB0aGlzLmlkID0gZXZlbnRJZDtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRJZC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuaWQ7XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMDUgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBBIGJhc2UgY2xhc3MgZm9yIGV2ZW50IG9iamVjdHMuXG4gKlxuICovXG5cblxuZ29vZy5wcm92aWRlKCdnb29nLmV2ZW50cy5FdmVudCcpO1xuZ29vZy5wcm92aWRlKCdnb29nLmV2ZW50cy5FdmVudExpa2UnKTtcblxuLyoqXG4gKiBnb29nLmV2ZW50cy5FdmVudCBubyBsb25nZXIgZGVwZW5kcyBvbiBnb29nLkRpc3Bvc2FibGUuIEtlZXAgcmVxdWlyaW5nXG4gKiBnb29nLkRpc3Bvc2FibGUgaGVyZSB0byBub3QgYnJlYWsgcHJvamVjdHMgd2hpY2ggYXNzdW1lIHRoaXMgZGVwZW5kZW5jeS5cbiAqIEBzdXBwcmVzcyB7ZXh0cmFSZXF1aXJlfVxuICovXG5nb29nLnJlcXVpcmUoJ2dvb2cuRGlzcG9zYWJsZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cy5FdmVudElkJyk7XG5cblxuLyoqXG4gKiBBIHR5cGVkZWYgZm9yIGV2ZW50IGxpa2Ugb2JqZWN0cyB0aGF0IGFyZSBkaXNwYXRjaGFibGUgdmlhIHRoZVxuICogZ29vZy5ldmVudHMuZGlzcGF0Y2hFdmVudCBmdW5jdGlvbi4gc3RyaW5ncyBhcmUgdHJlYXRlZCBhcyB0aGUgdHlwZSBmb3IgYVxuICogZ29vZy5ldmVudHMuRXZlbnQuIE9iamVjdHMgYXJlIHRyZWF0ZWQgYXMgYW4gZXh0ZW5zaW9uIG9mIGEgbmV3XG4gKiBnb29nLmV2ZW50cy5FdmVudCB3aXRoIHRoZSB0eXBlIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgYmVpbmcgdXNlZCBhcyB0aGUgdHlwZVxuICogb2YgdGhlIEV2ZW50LlxuICogQHR5cGVkZWYge3N0cmluZ3xPYmplY3R8Z29vZy5ldmVudHMuRXZlbnR8Z29vZy5ldmVudHMuRXZlbnRJZH1cbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRMaWtlO1xuXG5cblxuLyoqXG4gKiBBIGJhc2UgY2xhc3MgZm9yIGV2ZW50IG9iamVjdHMsIHNvIHRoYXQgdGhleSBjYW4gc3VwcG9ydCBwcmV2ZW50RGVmYXVsdCBhbmRcbiAqIHN0b3BQcm9wYWdhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZH0gdHlwZSBFdmVudCBUeXBlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfdGFyZ2V0IFJlZmVyZW5jZSB0byB0aGUgb2JqZWN0IHRoYXQgaXMgdGhlIHRhcmdldCBvZlxuICogICAgIHRoaXMgZXZlbnQuIEl0IGhhcyB0byBpbXBsZW1lbnQgdGhlIHtAY29kZSBFdmVudFRhcmdldH0gaW50ZXJmYWNlXG4gKiAgICAgZGVjbGFyZWQgYXQge0BsaW5rIGh0dHA6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL0V2ZW50VGFyZ2V0fS5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5nb29nLmV2ZW50cy5FdmVudCA9IGZ1bmN0aW9uKHR5cGUsIG9wdF90YXJnZXQpIHtcbiAgLyoqXG4gICAqIEV2ZW50IHR5cGUuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLnR5cGUgPSB0eXBlIGluc3RhbmNlb2YgZ29vZy5ldmVudHMuRXZlbnRJZCA/IFN0cmluZyh0eXBlKSA6IHR5cGU7XG5cbiAgLyoqXG4gICAqIFRPRE8odGJyZWlzYWNoZXIpOiBUaGUgdHlwZSBzaG91bGQgcHJvYmFibHkgYmVcbiAgICogRXZlbnRUYXJnZXR8Z29vZy5ldmVudHMuRXZlbnRUYXJnZXQuXG4gICAqXG4gICAqIFRhcmdldCBvZiB0aGUgZXZlbnQuXG4gICAqIEB0eXBlIHtPYmplY3R8dW5kZWZpbmVkfVxuICAgKi9cbiAgdGhpcy50YXJnZXQgPSBvcHRfdGFyZ2V0O1xuXG4gIC8qKlxuICAgKiBPYmplY3QgdGhhdCBoYWQgdGhlIGxpc3RlbmVyIGF0dGFjaGVkLlxuICAgKiBAdHlwZSB7T2JqZWN0fHVuZGVmaW5lZH1cbiAgICovXG4gIHRoaXMuY3VycmVudFRhcmdldCA9IHRoaXMudGFyZ2V0O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGNhbmNlbCB0aGUgZXZlbnQgaW4gaW50ZXJuYWwgY2FwdHVyZS9idWJibGUgcHJvY2Vzc2luZyBmb3IgSUUuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHVibGljXG4gICAqIEBzdXBwcmVzcyB7dW5kZXJzY29yZXx2aXNpYmlsaXR5fSBUZWNobmljYWxseSBwdWJsaWMsIGJ1dCByZWZlcmVuY2luZyB0aGlzXG4gICAqICAgICBvdXRzaWRlIHRoaXMgcGFja2FnZSBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZC5cbiAgICovXG4gIHRoaXMucHJvcGFnYXRpb25TdG9wcGVkXyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBkZWZhdWx0IGFjdGlvbiBoYXMgYmVlbiBwcmV2ZW50ZWQuXG4gICAqIFRoaXMgaXMgYSBwcm9wZXJ0eSB0byBtYXRjaCB0aGUgVzNDIHNwZWNpZmljYXRpb24gYXRcbiAgICoge0BsaW5rIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAgICogI2V2ZW50cy1ldmVudC10eXBlLWRlZmF1bHRQcmV2ZW50ZWR9LlxuICAgKiBNdXN0IGJlIHRyZWF0ZWQgYXMgcmVhZC1vbmx5IG91dHNpZGUgdGhlIGNsYXNzLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gdmFsdWUgZm9yIGluIGludGVybmFsIGNhcHR1cmUvYnViYmxlIHByb2Nlc3NpbmcgZm9yIElFLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHB1YmxpY1xuICAgKiBAc3VwcHJlc3Mge3VuZGVyc2NvcmV8dmlzaWJpbGl0eX0gVGVjaG5pY2FsbHkgcHVibGljLCBidXQgcmVmZXJlbmNpbmcgdGhpc1xuICAgKiAgICAgb3V0c2lkZSB0aGlzIHBhY2thZ2UgaXMgc3Ryb25nbHkgZGlzY291cmFnZWQuXG4gICAqL1xuICB0aGlzLnJldHVyblZhbHVlXyA9IHRydWU7XG59O1xuXG5cbi8qKlxuICogU3RvcHMgZXZlbnQgcHJvcGFnYXRpb24uXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50LnByb3RvdHlwZS5zdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcm9wYWdhdGlvblN0b3BwZWRfID0gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBQcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24sIGZvciBleGFtcGxlIGEgbGluayByZWRpcmVjdGluZyB0byBhIHVybC5cbiAqL1xuZ29vZy5ldmVudHMuRXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gIHRoaXMucmV0dXJuVmFsdWVfID0gZmFsc2U7XG59O1xuXG5cbi8qKlxuICogU3RvcHMgdGhlIHByb3BhZ2F0aW9uIG9mIHRoZSBldmVudC4gSXQgaXMgZXF1aXZhbGVudCB0b1xuICoge0Bjb2RlIGUuc3RvcFByb3BhZ2F0aW9uKCl9LCBidXQgY2FuIGJlIHVzZWQgYXMgdGhlIGNhbGxiYWNrIGFyZ3VtZW50IG9mXG4gKiB7QGxpbmsgZ29vZy5ldmVudHMubGlzdGVufSB3aXRob3V0IGRlY2xhcmluZyBhbm90aGVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHshZ29vZy5ldmVudHMuRXZlbnR9IGUgQW4gZXZlbnQuXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKGUpIHtcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbn07XG5cblxuLyoqXG4gKiBQcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24uIEl0IGlzIGVxdWl2YWxlbnQgdG9cbiAqIHtAY29kZSBlLnByZXZlbnREZWZhdWx0KCl9LCBidXQgY2FuIGJlIHVzZWQgYXMgdGhlIGNhbGxiYWNrIGFyZ3VtZW50IG9mXG4gKiB7QGxpbmsgZ29vZy5ldmVudHMubGlzdGVufSB3aXRob3V0IGRlY2xhcmluZyBhbm90aGVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHshZ29vZy5ldmVudHMuRXZlbnR9IGUgQW4gZXZlbnQuXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50LnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTAgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBFdmVudCBUeXBlcy5cbiAqXG4gKiBAYXV0aG9yIGFydkBnb29nbGUuY29tIChFcmlrIEFydmlkc3NvbilcbiAqL1xuXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuRXZlbnRUeXBlJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy51c2VyQWdlbnQnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBwcmVmaXhlZCBldmVudCBuYW1lIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBwcmVmaXhlZCBldmVudCBuYW1lLlxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZXxtaXNzaW5nUHJvdmlkZX1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZXZlbnRzLmdldFZlbmRvclByZWZpeGVkTmFtZV8gPSBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgcmV0dXJuIGdvb2cudXNlckFnZW50LldFQktJVCA/ICd3ZWJraXQnICsgZXZlbnROYW1lIDpcbiAgICAgIChnb29nLnVzZXJBZ2VudC5PUEVSQSA/ICdvJyArIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpIDpcbiAgICAgICAgICBldmVudE5hbWUudG9Mb3dlckNhc2UoKSk7XG59O1xuXG5cbi8qKlxuICogQ29uc3RhbnRzIGZvciBldmVudCBuYW1lcy5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50VHlwZSA9IHtcbiAgLy8gTW91c2UgZXZlbnRzXG4gIENMSUNLOiAnY2xpY2snLFxuICBSSUdIVENMSUNLOiAncmlnaHRjbGljaycsXG4gIERCTENMSUNLOiAnZGJsY2xpY2snLFxuICBNT1VTRURPV046ICdtb3VzZWRvd24nLFxuICBNT1VTRVVQOiAnbW91c2V1cCcsXG4gIE1PVVNFT1ZFUjogJ21vdXNlb3ZlcicsXG4gIE1PVVNFT1VUOiAnbW91c2VvdXQnLFxuICBNT1VTRU1PVkU6ICdtb3VzZW1vdmUnLFxuICBNT1VTRUVOVEVSOiAnbW91c2VlbnRlcicsXG4gIE1PVVNFTEVBVkU6ICdtb3VzZWxlYXZlJyxcbiAgLy8gU2VsZWN0IHN0YXJ0IGlzIG5vbi1zdGFuZGFyZC5cbiAgLy8gU2VlIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9tczUzNjk2OSh2PXZzLjg1KS5hc3B4LlxuICBTRUxFQ1RTVEFSVDogJ3NlbGVjdHN0YXJ0JywgLy8gSUUsIFNhZmFyaSwgQ2hyb21lXG5cbiAgLy8gV2hlZWwgZXZlbnRzXG4gIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLXdoZWVsZXZlbnRzXG4gIFdIRUVMOiAnd2hlZWwnLFxuXG4gIC8vIEtleSBldmVudHNcbiAgS0VZUFJFU1M6ICdrZXlwcmVzcycsXG4gIEtFWURPV046ICdrZXlkb3duJyxcbiAgS0VZVVA6ICdrZXl1cCcsXG5cbiAgLy8gRm9jdXNcbiAgQkxVUjogJ2JsdXInLFxuICBGT0NVUzogJ2ZvY3VzJyxcbiAgREVBQ1RJVkFURTogJ2RlYWN0aXZhdGUnLCAvLyBJRSBvbmx5XG4gIC8vIE5PVEU6IFRoZSBmb2xsb3dpbmcgdHdvIGV2ZW50cyBhcmUgbm90IHN0YWJsZSBpbiBjcm9zcy1icm93c2VyIHVzYWdlLlxuICAvLyAgICAgV2ViS2l0IGFuZCBPcGVyYSBpbXBsZW1lbnQgRE9NRm9jdXNJbi9PdXQuXG4gIC8vICAgICBJRSBpbXBsZW1lbnRzIGZvY3VzaW4vb3V0LlxuICAvLyAgICAgR2Vja28gaW1wbGVtZW50cyBuZWl0aGVyIHNlZSBidWcgYXRcbiAgLy8gICAgIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTM5NjkyNy5cbiAgLy8gVGhlIERPTSBFdmVudHMgTGV2ZWwgMyBEcmFmdCBkZXByZWNhdGVzIERPTUZvY3VzSW4gaW4gZmF2b3Igb2YgZm9jdXNpbjpcbiAgLy8gICAgIGh0dHA6Ly9kZXYudzMub3JnLzIwMDYvd2ViYXBpL0RPTS1MZXZlbC0zLUV2ZW50cy9odG1sL0RPTTMtRXZlbnRzLmh0bWxcbiAgLy8gWW91IGNhbiB1c2UgRk9DVVMgaW4gQ2FwdHVyZSBwaGFzZSB1bnRpbCBpbXBsZW1lbnRhdGlvbnMgY29udmVyZ2UuXG4gIEZPQ1VTSU46IGdvb2cudXNlckFnZW50LklFID8gJ2ZvY3VzaW4nIDogJ0RPTUZvY3VzSW4nLFxuICBGT0NVU09VVDogZ29vZy51c2VyQWdlbnQuSUUgPyAnZm9jdXNvdXQnIDogJ0RPTUZvY3VzT3V0JyxcblxuICAvLyBGb3Jtc1xuICBDSEFOR0U6ICdjaGFuZ2UnLFxuICBSRVNFVDogJ3Jlc2V0JyxcbiAgU0VMRUNUOiAnc2VsZWN0JyxcbiAgU1VCTUlUOiAnc3VibWl0JyxcbiAgSU5QVVQ6ICdpbnB1dCcsXG4gIFBST1BFUlRZQ0hBTkdFOiAncHJvcGVydHljaGFuZ2UnLCAvLyBJRSBvbmx5XG5cbiAgLy8gRHJhZyBhbmQgZHJvcFxuICBEUkFHU1RBUlQ6ICdkcmFnc3RhcnQnLFxuICBEUkFHOiAnZHJhZycsXG4gIERSQUdFTlRFUjogJ2RyYWdlbnRlcicsXG4gIERSQUdPVkVSOiAnZHJhZ292ZXInLFxuICBEUkFHTEVBVkU6ICdkcmFnbGVhdmUnLFxuICBEUk9QOiAnZHJvcCcsXG4gIERSQUdFTkQ6ICdkcmFnZW5kJyxcblxuICAvLyBUb3VjaCBldmVudHNcbiAgLy8gTm90ZSB0aGF0IG90aGVyIHRvdWNoIGV2ZW50cyBleGlzdCwgYnV0IHdlIHNob3VsZCBmb2xsb3cgdGhlIFczQyBsaXN0IGhlcmUuXG4gIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3RvdWNoLWV2ZW50cy8jbGlzdC1vZi10b3VjaGV2ZW50LXR5cGVzXG4gIFRPVUNIU1RBUlQ6ICd0b3VjaHN0YXJ0JyxcbiAgVE9VQ0hNT1ZFOiAndG91Y2htb3ZlJyxcbiAgVE9VQ0hFTkQ6ICd0b3VjaGVuZCcsXG4gIFRPVUNIQ0FOQ0VMOiAndG91Y2hjYW5jZWwnLFxuXG4gIC8vIE1pc2NcbiAgQkVGT1JFVU5MT0FEOiAnYmVmb3JldW5sb2FkJyxcbiAgQ09OU09MRU1FU1NBR0U6ICdjb25zb2xlbWVzc2FnZScsXG4gIENPTlRFWFRNRU5VOiAnY29udGV4dG1lbnUnLFxuICBET01DT05URU5UTE9BREVEOiAnRE9NQ29udGVudExvYWRlZCcsXG4gIEVSUk9SOiAnZXJyb3InLFxuICBIRUxQOiAnaGVscCcsXG4gIExPQUQ6ICdsb2FkJyxcbiAgTE9TRUNBUFRVUkU6ICdsb3NlY2FwdHVyZScsXG4gIE9SSUVOVEFUSU9OQ0hBTkdFOiAnb3JpZW50YXRpb25jaGFuZ2UnLFxuICBSRUFEWVNUQVRFQ0hBTkdFOiAncmVhZHlzdGF0ZWNoYW5nZScsXG4gIFJFU0laRTogJ3Jlc2l6ZScsXG4gIFNDUk9MTDogJ3Njcm9sbCcsXG4gIFVOTE9BRDogJ3VubG9hZCcsXG5cbiAgLy8gSFRNTCA1IEhpc3RvcnkgZXZlbnRzXG4gIC8vIFNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9icm93c2Vycy5odG1sI2V2ZW50LWRlZmluaXRpb25zLTBcbiAgSEFTSENIQU5HRTogJ2hhc2hjaGFuZ2UnLFxuICBQQUdFSElERTogJ3BhZ2VoaWRlJyxcbiAgUEFHRVNIT1c6ICdwYWdlc2hvdycsXG4gIFBPUFNUQVRFOiAncG9wc3RhdGUnLFxuXG4gIC8vIENvcHkgYW5kIFBhc3RlXG4gIC8vIFN1cHBvcnQgaXMgbGltaXRlZC4gTWFrZSBzdXJlIGl0IHdvcmtzIG9uIHlvdXIgZmF2b3JpdGUgYnJvd3NlclxuICAvLyBiZWZvcmUgdXNpbmcuXG4gIC8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvZG9tL2V2ZW50cy9jdXRjb3B5cGFzdGUuaHRtbFxuICBDT1BZOiAnY29weScsXG4gIFBBU1RFOiAncGFzdGUnLFxuICBDVVQ6ICdjdXQnLFxuICBCRUZPUkVDT1BZOiAnYmVmb3JlY29weScsXG4gIEJFRk9SRUNVVDogJ2JlZm9yZWN1dCcsXG4gIEJFRk9SRVBBU1RFOiAnYmVmb3JlcGFzdGUnLFxuXG4gIC8vIEhUTUw1IG9ubGluZS9vZmZsaW5lIGV2ZW50cy5cbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvb2ZmbGluZS13ZWJhcHBzLyNyZWxhdGVkXG4gIE9OTElORTogJ29ubGluZScsXG4gIE9GRkxJTkU6ICdvZmZsaW5lJyxcblxuICAvLyBIVE1MIDUgd29ya2VyIGV2ZW50c1xuICBNRVNTQUdFOiAnbWVzc2FnZScsXG4gIENPTk5FQ1Q6ICdjb25uZWN0JyxcblxuICAvLyBDU1MgYW5pbWF0aW9uIGV2ZW50cy5cbiAgLyoqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9ICovXG4gIEFOSU1BVElPTlNUQVJUOiBnb29nLmV2ZW50cy5nZXRWZW5kb3JQcmVmaXhlZE5hbWVfKCdBbmltYXRpb25TdGFydCcpLFxuICAvKiogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gKi9cbiAgQU5JTUFUSU9ORU5EOiBnb29nLmV2ZW50cy5nZXRWZW5kb3JQcmVmaXhlZE5hbWVfKCdBbmltYXRpb25FbmQnKSxcbiAgLyoqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9ICovXG4gIEFOSU1BVElPTklURVJBVElPTjogZ29vZy5ldmVudHMuZ2V0VmVuZG9yUHJlZml4ZWROYW1lXygnQW5pbWF0aW9uSXRlcmF0aW9uJyksXG5cbiAgLy8gQ1NTIHRyYW5zaXRpb24gZXZlbnRzLiBCYXNlZCBvbiB0aGUgYnJvd3NlciBzdXBwb3J0IGRlc2NyaWJlZCBhdDpcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vY3NzL2Nzc190cmFuc2l0aW9ucyNCcm93c2VyX2NvbXBhdGliaWxpdHlcbiAgLyoqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9ICovXG4gIFRSQU5TSVRJT05FTkQ6IGdvb2cuZXZlbnRzLmdldFZlbmRvclByZWZpeGVkTmFtZV8oJ1RyYW5zaXRpb25FbmQnKSxcblxuICAvLyBXM0MgUG9pbnRlciBFdmVudHNcbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvcG9pbnRlcmV2ZW50cy9cbiAgUE9JTlRFUkRPV046ICdwb2ludGVyZG93bicsXG4gIFBPSU5URVJVUDogJ3BvaW50ZXJ1cCcsXG4gIFBPSU5URVJDQU5DRUw6ICdwb2ludGVyY2FuY2VsJyxcbiAgUE9JTlRFUk1PVkU6ICdwb2ludGVybW92ZScsXG4gIFBPSU5URVJPVkVSOiAncG9pbnRlcm92ZXInLFxuICBQT0lOVEVST1VUOiAncG9pbnRlcm91dCcsXG4gIFBPSU5URVJFTlRFUjogJ3BvaW50ZXJlbnRlcicsXG4gIFBPSU5URVJMRUFWRTogJ3BvaW50ZXJsZWF2ZScsXG4gIEdPVFBPSU5URVJDQVBUVVJFOiAnZ290cG9pbnRlcmNhcHR1cmUnLFxuICBMT1NUUE9JTlRFUkNBUFRVUkU6ICdsb3N0cG9pbnRlcmNhcHR1cmUnLFxuXG4gIC8vIElFIHNwZWNpZmljIGV2ZW50cy5cbiAgLy8gU2VlIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDc3MjEwMyh2PXZzLjg1KS5hc3B4XG4gIC8vIE5vdGU6IHRoZXNlIGV2ZW50cyB3aWxsIGJlIHN1cHBsYW50ZWQgaW4gSUUxMS5cbiAgTVNHRVNUVVJFQ0hBTkdFOiAnTVNHZXN0dXJlQ2hhbmdlJyxcbiAgTVNHRVNUVVJFRU5EOiAnTVNHZXN0dXJlRW5kJyxcbiAgTVNHRVNUVVJFSE9MRDogJ01TR2VzdHVyZUhvbGQnLFxuICBNU0dFU1RVUkVTVEFSVDogJ01TR2VzdHVyZVN0YXJ0JyxcbiAgTVNHRVNUVVJFVEFQOiAnTVNHZXN0dXJlVGFwJyxcbiAgTVNHT1RQT0lOVEVSQ0FQVFVSRTogJ01TR290UG9pbnRlckNhcHR1cmUnLFxuICBNU0lORVJUSUFTVEFSVDogJ01TSW5lcnRpYVN0YXJ0JyxcbiAgTVNMT1NUUE9JTlRFUkNBUFRVUkU6ICdNU0xvc3RQb2ludGVyQ2FwdHVyZScsXG4gIE1TUE9JTlRFUkNBTkNFTDogJ01TUG9pbnRlckNhbmNlbCcsXG4gIE1TUE9JTlRFUkRPV046ICdNU1BvaW50ZXJEb3duJyxcbiAgTVNQT0lOVEVSRU5URVI6ICdNU1BvaW50ZXJFbnRlcicsXG4gIE1TUE9JTlRFUkhPVkVSOiAnTVNQb2ludGVySG92ZXInLFxuICBNU1BPSU5URVJMRUFWRTogJ01TUG9pbnRlckxlYXZlJyxcbiAgTVNQT0lOVEVSTU9WRTogJ01TUG9pbnRlck1vdmUnLFxuICBNU1BPSU5URVJPVVQ6ICdNU1BvaW50ZXJPdXQnLFxuICBNU1BPSU5URVJPVkVSOiAnTVNQb2ludGVyT3ZlcicsXG4gIE1TUE9JTlRFUlVQOiAnTVNQb2ludGVyVXAnLFxuXG4gIC8vIE5hdGl2ZSBJTUVzL2lucHV0IHRvb2xzIGV2ZW50cy5cbiAgVEVYVDogJ3RleHQnLFxuICBURVhUSU5QVVQ6ICd0ZXh0SW5wdXQnLFxuICBDT01QT1NJVElPTlNUQVJUOiAnY29tcG9zaXRpb25zdGFydCcsXG4gIENPTVBPU0lUSU9OVVBEQVRFOiAnY29tcG9zaXRpb251cGRhdGUnLFxuICBDT01QT1NJVElPTkVORDogJ2NvbXBvc2l0aW9uZW5kJyxcblxuICAvLyBXZWJ2aWV3IHRhZyBldmVudHNcbiAgLy8gU2VlIGh0dHA6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kZXYvYXBwcy93ZWJ2aWV3X3RhZy5odG1sXG4gIEVYSVQ6ICdleGl0JyxcbiAgTE9BREFCT1JUOiAnbG9hZGFib3J0JyxcbiAgTE9BRENPTU1JVDogJ2xvYWRjb21taXQnLFxuICBMT0FEUkVESVJFQ1Q6ICdsb2FkcmVkaXJlY3QnLFxuICBMT0FEU1RBUlQ6ICdsb2Fkc3RhcnQnLFxuICBMT0FEU1RPUDogJ2xvYWRzdG9wJyxcbiAgUkVTUE9OU0lWRTogJ3Jlc3BvbnNpdmUnLFxuICBTSVpFQ0hBTkdFRDogJ3NpemVjaGFuZ2VkJyxcbiAgVU5SRVNQT05TSVZFOiAndW5yZXNwb25zaXZlJyxcblxuICAvLyBIVE1MNSBQYWdlIFZpc2liaWxpdHkgQVBJLiAgU2VlIGRldGFpbHMgYXRcbiAgLy8ge0Bjb2RlIGdvb2cubGFicy5kb20uUGFnZVZpc2liaWxpdHlNb25pdG9yfS5cbiAgVklTSUJJTElUWUNIQU5HRTogJ3Zpc2liaWxpdHljaGFuZ2UnLFxuXG4gIC8vIExvY2FsU3RvcmFnZSBldmVudC5cbiAgU1RPUkFHRTogJ3N0b3JhZ2UnLFxuXG4gIC8vIERPTSBMZXZlbCAyIG11dGF0aW9uIGV2ZW50cyAoZGVwcmVjYXRlZCkuXG4gIERPTVNVQlRSRUVNT0RJRklFRDogJ0RPTVN1YnRyZWVNb2RpZmllZCcsXG4gIERPTU5PREVJTlNFUlRFRDogJ0RPTU5vZGVJbnNlcnRlZCcsXG4gIERPTU5PREVSRU1PVkVEOiAnRE9NTm9kZVJlbW92ZWQnLFxuICBET01OT0RFUkVNT1ZFREZST01ET0NVTUVOVDogJ0RPTU5vZGVSZW1vdmVkRnJvbURvY3VtZW50JyxcbiAgRE9NTk9ERUlOU0VSVEVESU5UT0RPQ1VNRU5UOiAnRE9NTm9kZUluc2VydGVkSW50b0RvY3VtZW50JyxcbiAgRE9NQVRUUk1PRElGSUVEOiAnRE9NQXR0ck1vZGlmaWVkJyxcbiAgRE9NQ0hBUkFDVEVSREFUQU1PRElGSUVEOiAnRE9NQ2hhcmFjdGVyRGF0YU1vZGlmaWVkJyxcblxuICAvLyBQcmludCBldmVudHMuXG4gIEJFRk9SRVBSSU5UOiAnYmVmb3JlcHJpbnQnLFxuICBBRlRFUlBSSU5UOiAnYWZ0ZXJwcmludCdcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAwOSBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFVzZWZ1bCBjb21waWxlciBpZGlvbXMuXG4gKlxuICogQGF1dGhvciBqb2hubGVuekBnb29nbGUuY29tIChKb2huIExlbnopXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLnJlZmxlY3QnKTtcblxuXG4vKipcbiAqIFN5bnRheCBmb3Igb2JqZWN0IGxpdGVyYWwgY2FzdHMuXG4gKiBAc2VlIGh0dHA6Ly9nby9qc2NvbXBpbGVyLXJlbmFtaW5nXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci93aWtpL1R5cGUtQmFzZWQtUHJvcGVydHktUmVuYW1pbmdcbiAqXG4gKiBVc2UgdGhpcyBpZiB5b3UgaGF2ZSBhbiBvYmplY3QgbGl0ZXJhbCB3aG9zZSBrZXlzIG5lZWQgdG8gaGF2ZSB0aGUgc2FtZSBuYW1lc1xuICogYXMgdGhlIHByb3BlcnRpZXMgb2Ygc29tZSBjbGFzcyBldmVuIGFmdGVyIHRoZXkgYXJlIHJlbmFtZWQgYnkgdGhlIGNvbXBpbGVyLlxuICpcbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSB0eXBlIFR5cGUgdG8gY2FzdCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IGxpdGVyYWwgdG8gY2FzdC5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIG9iamVjdCBsaXRlcmFsLlxuICovXG5nb29nLnJlZmxlY3Qub2JqZWN0ID0gZnVuY3Rpb24odHlwZSwgb2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cbi8qKlxuICogVG8gYXNzZXJ0IHRvIHRoZSBjb21waWxlciB0aGF0IGFuIG9wZXJhdGlvbiBpcyBuZWVkZWQgd2hlbiBpdCB3b3VsZFxuICogb3RoZXJ3aXNlIGJlIHN0cmlwcGVkLiBGb3IgZXhhbXBsZTpcbiAqIDxjb2RlPlxuICogICAgIC8vIEZvcmNlIGEgbGF5b3V0XG4gKiAgICAgZ29vZy5yZWZsZWN0LnNpbmtWYWx1ZShkaWFsb2cub2Zmc2V0SGVpZ2h0KTtcbiAqIDwvY29kZT5cbiAqIEB0eXBlIHshRnVuY3Rpb259XG4gKi9cbmdvb2cucmVmbGVjdC5zaW5rVmFsdWUgPSBmdW5jdGlvbih4KSB7XG4gIGdvb2cucmVmbGVjdC5zaW5rVmFsdWVbJyAnXSh4KTtcbiAgcmV0dXJuIHg7XG59O1xuXG5cbi8qKlxuICogVGhlIGNvbXBpbGVyIHNob3VsZCBvcHRpbWl6ZSB0aGlzIGZ1bmN0aW9uIGF3YXkgaWZmIG5vIG9uZSBldmVyIHVzZXNcbiAqIGdvb2cucmVmbGVjdC5zaW5rVmFsdWUuXG4gKi9cbmdvb2cucmVmbGVjdC5zaW5rVmFsdWVbJyAnXSA9IGdvb2cubnVsbEZ1bmN0aW9uO1xuXG5cbi8qKlxuICogQ2hlY2sgaWYgYSBwcm9wZXJ0eSBjYW4gYmUgYWNjZXNzZWQgd2l0aG91dCB0aHJvd2luZyBhbiBleGNlcHRpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvd25lciBvZiB0aGUgcHJvcGVydHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBUaGUgcHJvcGVydHkgbmFtZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHByb3BlcnR5IGlzIGFjY2Vzc2libGUuIFdpbGwgYWxzbyByZXR1cm4gdHJ1ZVxuICogICAgIGlmIG9iaiBpcyBudWxsLlxuICovXG5nb29nLnJlZmxlY3QuY2FuQWNjZXNzUHJvcGVydHkgPSBmdW5jdGlvbihvYmosIHByb3ApIHtcbiAgLyoqIEBwcmVzZXJ2ZVRyeSAqL1xuICB0cnkge1xuICAgIGdvb2cucmVmbGVjdC5zaW5rVmFsdWUob2JqW3Byb3BdKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDA1IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBwYXRjaGVkLCBzdGFuZGFyZGl6ZWQgZXZlbnQgb2JqZWN0IGZvciBicm93c2VyIGV2ZW50cy5cbiAqXG4gKiA8cHJlPlxuICogVGhlIHBhdGNoZWQgZXZlbnQgb2JqZWN0IGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgbWVtYmVyczpcbiAqIC0gdHlwZSAgICAgICAgICAge3N0cmluZ30gICAgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snXG4gKiAtIHRhcmdldCAgICAgICAgIHtPYmplY3R9ICAgIFRoZSBlbGVtZW50IHRoYXQgYWN0dWFsbHkgdHJpZ2dlcmVkIHRoZSBldmVudFxuICogLSBjdXJyZW50VGFyZ2V0ICB7T2JqZWN0fSAgICBUaGUgZWxlbWVudCB0aGUgbGlzdGVuZXIgaXMgYXR0YWNoZWQgdG9cbiAqIC0gcmVsYXRlZFRhcmdldCAge09iamVjdH0gICAgRm9yIG1vdXNlb3ZlciBhbmQgbW91c2VvdXQsIHRoZSBwcmV2aW91cyBvYmplY3RcbiAqIC0gb2Zmc2V0WCAgICAgICAge251bWJlcn0gICAgWC1jb29yZGluYXRlIHJlbGF0aXZlIHRvIHRhcmdldFxuICogLSBvZmZzZXRZICAgICAgICB7bnVtYmVyfSAgICBZLWNvb3JkaW5hdGUgcmVsYXRpdmUgdG8gdGFyZ2V0XG4gKiAtIGNsaWVudFggICAgICAgIHtudW1iZXJ9ICAgIFgtY29vcmRpbmF0ZSByZWxhdGl2ZSB0byB2aWV3cG9ydFxuICogLSBjbGllbnRZICAgICAgICB7bnVtYmVyfSAgICBZLWNvb3JkaW5hdGUgcmVsYXRpdmUgdG8gdmlld3BvcnRcbiAqIC0gc2NyZWVuWCAgICAgICAge251bWJlcn0gICAgWC1jb29yZGluYXRlIHJlbGF0aXZlIHRvIHRoZSBlZGdlIG9mIHRoZSBzY3JlZW5cbiAqIC0gc2NyZWVuWSAgICAgICAge251bWJlcn0gICAgWS1jb29yZGluYXRlIHJlbGF0aXZlIHRvIHRoZSBlZGdlIG9mIHRoZSBzY3JlZW5cbiAqIC0gYnV0dG9uICAgICAgICAge251bWJlcn0gICAgTW91c2UgYnV0dG9uLiBVc2UgaXNCdXR0b24oKSB0byB0ZXN0LlxuICogLSBrZXlDb2RlICAgICAgICB7bnVtYmVyfSAgICBLZXktY29kZVxuICogLSBjdHJsS2V5ICAgICAgICB7Ym9vbGVhbn0gICBXYXMgY3RybCBrZXkgZGVwcmVzc2VkXG4gKiAtIGFsdEtleSAgICAgICAgIHtib29sZWFufSAgIFdhcyBhbHQga2V5IGRlcHJlc3NlZFxuICogLSBzaGlmdEtleSAgICAgICB7Ym9vbGVhbn0gICBXYXMgc2hpZnQga2V5IGRlcHJlc3NlZFxuICogLSBtZXRhS2V5ICAgICAgICB7Ym9vbGVhbn0gICBXYXMgbWV0YSBrZXkgZGVwcmVzc2VkXG4gKiAtIGRlZmF1bHRQcmV2ZW50ZWQge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGRlZmF1bHQgYWN0aW9uIGhhcyBiZWVuIHByZXZlbnRlZFxuICogLSBzdGF0ZSAgICAgICAgICB7T2JqZWN0fSAgICBIaXN0b3J5IHN0YXRlIG9iamVjdFxuICpcbiAqIE5PVEU6IFRoZSBrZXlDb2RlIG1lbWJlciBjb250YWlucyB0aGUgcmF3IGJyb3dzZXIga2V5Q29kZS4gRm9yIG5vcm1hbGl6ZWRcbiAqIGtleSBhbmQgY2hhcmFjdGVyIGNvZGUgdXNlIHtAbGluayBnb29nLmV2ZW50cy5LZXlIYW5kbGVyfS5cbiAqIDwvcHJlPlxuICpcbiAqIEBhdXRob3IgYXJ2QGdvb2dsZS5jb20gKEVyaWsgQXJ2aWRzc29uKVxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50Jyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkJyb3dzZXJFdmVudC5Nb3VzZUJ1dHRvbicpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkJyb3dzZXJGZWF0dXJlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkV2ZW50Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkV2ZW50VHlwZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnJlZmxlY3QnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy51c2VyQWdlbnQnKTtcblxuXG5cbi8qKlxuICogQWNjZXB0cyBhIGJyb3dzZXIgZXZlbnQgb2JqZWN0IGFuZCBjcmVhdGVzIGEgcGF0Y2hlZCwgY3Jvc3MgYnJvd3NlciBldmVudFxuICogb2JqZWN0LlxuICogVGhlIGNvbnRlbnQgb2YgdGhpcyBvYmplY3Qgd2lsbCBub3QgYmUgaW5pdGlhbGl6ZWQgaWYgbm8gZXZlbnQgb2JqZWN0IGlzXG4gKiBwcm92aWRlZC4gSWYgdGhpcyBpcyB0aGUgY2FzZSwgaW5pdCgpIG5lZWRzIHRvIGJlIGludm9rZWQgc2VwYXJhdGVseS5cbiAqIEBwYXJhbSB7RXZlbnQ9fSBvcHRfZSBCcm93c2VyIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXQ9fSBvcHRfY3VycmVudFRhcmdldCBDdXJyZW50IHRhcmdldCBmb3IgZXZlbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtnb29nLmV2ZW50cy5FdmVudH1cbiAqL1xuZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50ID0gZnVuY3Rpb24ob3B0X2UsIG9wdF9jdXJyZW50VGFyZ2V0KSB7XG4gIGdvb2cuZXZlbnRzLkJyb3dzZXJFdmVudC5iYXNlKHRoaXMsICdjb25zdHJ1Y3RvcicsIG9wdF9lID8gb3B0X2UudHlwZSA6ICcnKTtcblxuICAvKipcbiAgICogVGFyZ2V0IHRoYXQgZmlyZWQgdGhlIGV2ZW50LlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHR5cGUge05vZGV9XG4gICAqL1xuICB0aGlzLnRhcmdldCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIE5vZGUgdGhhdCBoYWQgdGhlIGxpc3RlbmVyIGF0dGFjaGVkLlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHR5cGUge05vZGV8dW5kZWZpbmVkfVxuICAgKi9cbiAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcblxuICAvKipcbiAgICogRm9yIG1vdXNlb3ZlciBhbmQgbW91c2VvdXQgZXZlbnRzLCB0aGUgcmVsYXRlZCBvYmplY3QgZm9yIHRoZSBldmVudC5cbiAgICogQHR5cGUge05vZGV9XG4gICAqL1xuICB0aGlzLnJlbGF0ZWRUYXJnZXQgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBYLWNvb3JkaW5hdGUgcmVsYXRpdmUgdG8gdGFyZ2V0LlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5vZmZzZXRYID0gMDtcblxuICAvKipcbiAgICogWS1jb29yZGluYXRlIHJlbGF0aXZlIHRvIHRhcmdldC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMub2Zmc2V0WSA9IDA7XG5cbiAgLyoqXG4gICAqIFgtY29vcmRpbmF0ZSByZWxhdGl2ZSB0byB0aGUgd2luZG93LlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5jbGllbnRYID0gMDtcblxuICAvKipcbiAgICogWS1jb29yZGluYXRlIHJlbGF0aXZlIHRvIHRoZSB3aW5kb3cuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmNsaWVudFkgPSAwO1xuXG4gIC8qKlxuICAgKiBYLWNvb3JkaW5hdGUgcmVsYXRpdmUgdG8gdGhlIG1vbml0b3IuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnNjcmVlblggPSAwO1xuXG4gIC8qKlxuICAgKiBZLWNvb3JkaW5hdGUgcmVsYXRpdmUgdG8gdGhlIG1vbml0b3IuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnNjcmVlblkgPSAwO1xuXG4gIC8qKlxuICAgKiBXaGljaCBtb3VzZSBidXR0b24gd2FzIHByZXNzZWQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmJ1dHRvbiA9IDA7XG5cbiAgLyoqXG4gICAqIEtleWNvZGUgb2Yga2V5IHByZXNzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5rZXlDb2RlID0gMDtcblxuICAvKipcbiAgICogS2V5Y29kZSBvZiBrZXkgcHJlc3MuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmNoYXJDb2RlID0gMDtcblxuICAvKipcbiAgICogV2hldGhlciBjb250cm9sIHdhcyBwcmVzc2VkIGF0IHRpbWUgb2YgZXZlbnQuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5jdHJsS2V5ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgYWx0IHdhcyBwcmVzc2VkIGF0IHRpbWUgb2YgZXZlbnQuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5hbHRLZXkgPSBmYWxzZTtcblxuICAvKipcbiAgICogV2hldGhlciBzaGlmdCB3YXMgcHJlc3NlZCBhdCB0aW1lIG9mIGV2ZW50LlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuc2hpZnRLZXkgPSBmYWxzZTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgbWV0YSBrZXkgd2FzIHByZXNzZWQgYXQgdGltZSBvZiBldmVudC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLm1ldGFLZXkgPSBmYWxzZTtcblxuICAvKipcbiAgICogSGlzdG9yeSBzdGF0ZSBvYmplY3QsIG9ubHkgc2V0IGZvciBQb3BTdGF0ZSBldmVudHMgd2hlcmUgaXQncyBhIGNvcHkgb2YgdGhlXG4gICAqIHN0YXRlIG9iamVjdCBwcm92aWRlZCB0byBwdXNoU3RhdGUgb3IgcmVwbGFjZVN0YXRlLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgdGhpcy5zdGF0ZSA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGRlZmF1bHQgcGxhdGZvcm0gbW9kaWZpZXIga2V5IHdhcyBwcmVzc2VkIGF0IHRpbWUgb2YgZXZlbnQuXG4gICAqIChUaGlzIGlzIGNvbnRyb2wgZm9yIGFsbCBwbGF0Zm9ybXMgZXhjZXB0IE1hYywgd2hlcmUgaXQncyBNZXRhLilcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLnBsYXRmb3JtTW9kaWZpZXJLZXkgPSBmYWxzZTtcblxuICAvKipcbiAgICogVGhlIGJyb3dzZXIgZXZlbnQgb2JqZWN0LlxuICAgKiBAcHJpdmF0ZSB7RXZlbnR9XG4gICAqL1xuICB0aGlzLmV2ZW50XyA9IG51bGw7XG5cbiAgaWYgKG9wdF9lKSB7XG4gICAgdGhpcy5pbml0KG9wdF9lLCBvcHRfY3VycmVudFRhcmdldCk7XG4gIH1cbn07XG5nb29nLmluaGVyaXRzKGdvb2cuZXZlbnRzLkJyb3dzZXJFdmVudCwgZ29vZy5ldmVudHMuRXZlbnQpO1xuXG5cbi8qKlxuICogTm9ybWFsaXplZCBidXR0b24gY29uc3RhbnRzIGZvciB0aGUgbW91c2UuXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5nb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuTW91c2VCdXR0b24gPSB7XG4gIExFRlQ6IDAsXG4gIE1JRERMRTogMSxcbiAgUklHSFQ6IDJcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgZGF0YSBmb3IgbWFwcGluZyBtb3VzZSBidXR0b25zLlxuICogQHR5cGUgeyFBcnJheTxudW1iZXI+fVxuICovXG5nb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuSUVCdXR0b25NYXAgPSBbXG4gIDEsIC8vIExFRlRcbiAgNCwgLy8gTUlERExFXG4gIDIgIC8vIFJJR0hUXG5dO1xuXG5cbi8qKlxuICogQWNjZXB0cyBhIGJyb3dzZXIgZXZlbnQgb2JqZWN0IGFuZCBjcmVhdGVzIGEgcGF0Y2hlZCwgY3Jvc3MgYnJvd3NlciBldmVudFxuICogb2JqZWN0LlxuICogQHBhcmFtIHtFdmVudH0gZSBCcm93c2VyIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXQ9fSBvcHRfY3VycmVudFRhcmdldCBDdXJyZW50IHRhcmdldCBmb3IgZXZlbnQuXG4gKi9cbmdvb2cuZXZlbnRzLkJyb3dzZXJFdmVudC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKGUsIG9wdF9jdXJyZW50VGFyZ2V0KSB7XG4gIHZhciB0eXBlID0gdGhpcy50eXBlID0gZS50eXBlO1xuXG4gIC8qKlxuICAgKiBPbiB0b3VjaCBkZXZpY2VzIHVzZSB0aGUgZmlyc3QgXCJjaGFuZ2VkIHRvdWNoXCIgYXMgdGhlIHJlbGV2YW50IHRvdWNoLlxuICAgKiBAdHlwZSB7VG91Y2h9XG4gICAqL1xuICB2YXIgcmVsZXZhbnRUb3VjaCA9IGUuY2hhbmdlZFRvdWNoZXMgPyBlLmNoYW5nZWRUb3VjaGVzWzBdIDogbnVsbDtcblxuICAvLyBUT0RPKG5pY2tzYW50b3MpOiBDaGFuZ2UgdGhpcy50YXJnZXQgdG8gdHlwZSBFdmVudFRhcmdldC5cbiAgdGhpcy50YXJnZXQgPSAvKiogQHR5cGUge05vZGV9ICovIChlLnRhcmdldCkgfHwgZS5zcmNFbGVtZW50O1xuXG4gIC8vIFRPRE8obmlja3NhbnRvcyk6IENoYW5nZSB0aGlzLmN1cnJlbnRUYXJnZXQgdG8gdHlwZSBFdmVudFRhcmdldC5cbiAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gLyoqIEB0eXBlIHtOb2RlfSAqLyAob3B0X2N1cnJlbnRUYXJnZXQpO1xuXG4gIHZhciByZWxhdGVkVGFyZ2V0ID0gLyoqIEB0eXBlIHtOb2RlfSAqLyAoZS5yZWxhdGVkVGFyZ2V0KTtcbiAgaWYgKHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAvLyBUaGVyZSdzIGEgYnVnIGluIEZpcmVGb3ggd2hlcmUgc29tZXRpbWVzLCByZWxhdGVkVGFyZ2V0IHdpbGwgYmUgYVxuICAgIC8vIGNocm9tZSBlbGVtZW50LCBhbmQgYWNjZXNzaW5nIGFueSBwcm9wZXJ0eSBvZiBpdCB3aWxsIGdldCBhIHBlcm1pc3Npb25cbiAgICAvLyBkZW5pZWQgZXhjZXB0aW9uLiBTZWU6XG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDk3NzgwXG4gICAgaWYgKGdvb2cudXNlckFnZW50LkdFQ0tPKSB7XG4gICAgICBpZiAoIWdvb2cucmVmbGVjdC5jYW5BY2Nlc3NQcm9wZXJ0eShyZWxhdGVkVGFyZ2V0LCAnbm9kZU5hbWUnKSkge1xuICAgICAgICByZWxhdGVkVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVE9ETyhhcnYpOiBVc2UgZ29vZy5ldmVudHMuRXZlbnRUeXBlIHdoZW4gaXQgaGFzIGJlZW4gcmVmYWN0b3JlZCBpbnRvIGl0c1xuICAgIC8vIG93biBmaWxlLlxuICB9IGVsc2UgaWYgKHR5cGUgPT0gZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFT1ZFUikge1xuICAgIHJlbGF0ZWRUYXJnZXQgPSBlLmZyb21FbGVtZW50O1xuICB9IGVsc2UgaWYgKHR5cGUgPT0gZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFT1VUKSB7XG4gICAgcmVsYXRlZFRhcmdldCA9IGUudG9FbGVtZW50O1xuICB9XG5cbiAgdGhpcy5yZWxhdGVkVGFyZ2V0ID0gcmVsYXRlZFRhcmdldDtcblxuICBpZiAoIWdvb2cuaXNOdWxsKHJlbGV2YW50VG91Y2gpKSB7XG4gICAgdGhpcy5jbGllbnRYID0gcmVsZXZhbnRUb3VjaC5jbGllbnRYICE9PSB1bmRlZmluZWQgP1xuICAgICAgICByZWxldmFudFRvdWNoLmNsaWVudFggOiByZWxldmFudFRvdWNoLnBhZ2VYO1xuICAgIHRoaXMuY2xpZW50WSA9IHJlbGV2YW50VG91Y2guY2xpZW50WSAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgcmVsZXZhbnRUb3VjaC5jbGllbnRZIDogcmVsZXZhbnRUb3VjaC5wYWdlWTtcbiAgICB0aGlzLnNjcmVlblggPSByZWxldmFudFRvdWNoLnNjcmVlblggfHwgMDtcbiAgICB0aGlzLnNjcmVlblkgPSByZWxldmFudFRvdWNoLnNjcmVlblkgfHwgMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBXZWJraXQgZW1pdHMgYSBsYW1lIHdhcm5pbmcgd2hlbmV2ZXIgbGF5ZXJYL2xheWVyWSBpcyBhY2Nlc3NlZC5cbiAgICAvLyBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMDE3MzNcbiAgICB0aGlzLm9mZnNldFggPSAoZ29vZy51c2VyQWdlbnQuV0VCS0lUIHx8IGUub2Zmc2V0WCAhPT0gdW5kZWZpbmVkKSA/XG4gICAgICAgIGUub2Zmc2V0WCA6IGUubGF5ZXJYO1xuICAgIHRoaXMub2Zmc2V0WSA9IChnb29nLnVzZXJBZ2VudC5XRUJLSVQgfHwgZS5vZmZzZXRZICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgZS5vZmZzZXRZIDogZS5sYXllclk7XG4gICAgdGhpcy5jbGllbnRYID0gZS5jbGllbnRYICE9PSB1bmRlZmluZWQgPyBlLmNsaWVudFggOiBlLnBhZ2VYO1xuICAgIHRoaXMuY2xpZW50WSA9IGUuY2xpZW50WSAhPT0gdW5kZWZpbmVkID8gZS5jbGllbnRZIDogZS5wYWdlWTtcbiAgICB0aGlzLnNjcmVlblggPSBlLnNjcmVlblggfHwgMDtcbiAgICB0aGlzLnNjcmVlblkgPSBlLnNjcmVlblkgfHwgMDtcbiAgfVxuXG4gIHRoaXMuYnV0dG9uID0gZS5idXR0b247XG5cbiAgdGhpcy5rZXlDb2RlID0gZS5rZXlDb2RlIHx8IDA7XG4gIHRoaXMuY2hhckNvZGUgPSBlLmNoYXJDb2RlIHx8ICh0eXBlID09ICdrZXlwcmVzcycgPyBlLmtleUNvZGUgOiAwKTtcbiAgdGhpcy5jdHJsS2V5ID0gZS5jdHJsS2V5O1xuICB0aGlzLmFsdEtleSA9IGUuYWx0S2V5O1xuICB0aGlzLnNoaWZ0S2V5ID0gZS5zaGlmdEtleTtcbiAgdGhpcy5tZXRhS2V5ID0gZS5tZXRhS2V5O1xuICB0aGlzLnBsYXRmb3JtTW9kaWZpZXJLZXkgPSBnb29nLnVzZXJBZ2VudC5NQUMgPyBlLm1ldGFLZXkgOiBlLmN0cmxLZXk7XG4gIHRoaXMuc3RhdGUgPSBlLnN0YXRlO1xuICB0aGlzLmV2ZW50XyA9IGU7XG4gIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICB0aGlzLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBUZXN0cyB0byBzZWUgd2hpY2ggYnV0dG9uIHdhcyBwcmVzc2VkIGR1cmluZyB0aGUgZXZlbnQuIFRoaXMgaXMgcmVhbGx5IG9ubHlcbiAqIHVzZWZ1bCBpbiBJRSBhbmQgR2Vja28gYnJvd3NlcnMuIEFuZCBpbiBJRSwgaXQncyBvbmx5IHVzZWZ1bCBmb3JcbiAqIG1vdXNlZG93bi9tb3VzZXVwIGV2ZW50cywgYmVjYXVzZSBjbGljayBvbmx5IGZpcmVzIGZvciB0aGUgbGVmdCBtb3VzZSBidXR0b24uXG4gKlxuICogU2FmYXJpIDIgb25seSByZXBvcnRzIHRoZSBsZWZ0IGJ1dHRvbiBiZWluZyBjbGlja2VkLCBhbmQgdXNlcyB0aGUgdmFsdWUgJzEnXG4gKiBpbnN0ZWFkIG9mIDAuIE9wZXJhIG9ubHkgcmVwb3J0cyBhIG1vdXNlZG93biBldmVudCBmb3IgdGhlIG1pZGRsZSBidXR0b24sIGFuZFxuICogbm8gbW91c2UgZXZlbnRzIGZvciB0aGUgcmlnaHQgYnV0dG9uLiBPcGVyYSBoYXMgZGVmYXVsdCBiZWhhdmlvciBmb3IgbGVmdCBhbmRcbiAqIG1pZGRsZSBjbGljayB0aGF0IGNhbiBvbmx5IGJlIG92ZXJyaWRkZW4gdmlhIGEgY29uZmlndXJhdGlvbiBzZXR0aW5nLlxuICpcbiAqIFRoZXJlJ3MgYSBuaWNlIHRhYmxlIG9mIHRoaXMgbWVzcyBhdCBodHRwOi8vd3d3LnVuaXhwYXBhLmNvbS9qcy9tb3VzZS5odG1sLlxuICpcbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuQnJvd3NlckV2ZW50Lk1vdXNlQnV0dG9ufSBidXR0b24gVGhlIGJ1dHRvblxuICogICAgIHRvIHRlc3QgZm9yLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBidXR0b24gd2FzIHByZXNzZWQuXG4gKi9cbmdvb2cuZXZlbnRzLkJyb3dzZXJFdmVudC5wcm90b3R5cGUuaXNCdXR0b24gPSBmdW5jdGlvbihidXR0b24pIHtcbiAgaWYgKCFnb29nLmV2ZW50cy5Ccm93c2VyRmVhdHVyZS5IQVNfVzNDX0JVVFRPTikge1xuICAgIGlmICh0aGlzLnR5cGUgPT0gJ2NsaWNrJykge1xuICAgICAgcmV0dXJuIGJ1dHRvbiA9PSBnb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuTW91c2VCdXR0b24uTEVGVDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICEhKHRoaXMuZXZlbnRfLmJ1dHRvbiAmXG4gICAgICAgICAgZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LklFQnV0dG9uTWFwW2J1dHRvbl0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudF8uYnV0dG9uID09IGJ1dHRvbjtcbiAgfVxufTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhpcyBoYXMgYW4gXCJhY3Rpb25cIi1wcm9kdWNpbmcgbW91c2UgYnV0dG9uLlxuICpcbiAqIEJ5IGRlZmluaXRpb24sIHRoaXMgaW5jbHVkZXMgbGVmdC1jbGljayBvbiB3aW5kb3dzL2xpbnV4LCBhbmQgbGVmdC1jbGlja1xuICogd2l0aG91dCB0aGUgY3RybCBrZXkgb24gTWFjcy5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBUaGUgcmVzdWx0LlxuICovXG5nb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQucHJvdG90eXBlLmlzTW91c2VBY3Rpb25CdXR0b24gPSBmdW5jdGlvbigpIHtcbiAgLy8gV2Via2l0IGRvZXMgbm90IGN0cmwrY2xpY2sgdG8gYmUgYSByaWdodC1jbGljaywgc28gd2VcbiAgLy8gbm9ybWFsaXplIGl0IHRvIGJlaGF2ZSBsaWtlIEdlY2tvIGFuZCBPcGVyYS5cbiAgcmV0dXJuIHRoaXMuaXNCdXR0b24oZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50Lk1vdXNlQnV0dG9uLkxFRlQpICYmXG4gICAgICAhKGdvb2cudXNlckFnZW50LldFQktJVCAmJiBnb29nLnVzZXJBZ2VudC5NQUMgJiYgdGhpcy5jdHJsS2V5KTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LnByb3RvdHlwZS5zdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LnN1cGVyQ2xhc3NfLnN0b3BQcm9wYWdhdGlvbi5jYWxsKHRoaXMpO1xuICBpZiAodGhpcy5ldmVudF8uc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgdGhpcy5ldmVudF8uc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5ldmVudF8uY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5nb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG4gIGdvb2cuZXZlbnRzLkJyb3dzZXJFdmVudC5zdXBlckNsYXNzXy5wcmV2ZW50RGVmYXVsdC5jYWxsKHRoaXMpO1xuICB2YXIgYmUgPSB0aGlzLmV2ZW50XztcbiAgaWYgKCFiZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgIGJlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgaWYgKGdvb2cuZXZlbnRzLkJyb3dzZXJGZWF0dXJlLlNFVF9LRVlfQ09ERV9UT19QUkVWRU5UX0RFRkFVTFQpIHtcbiAgICAgIC8qKiBAcHJlc2VydmVUcnkgKi9cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIE1vc3Qga2V5cyBjYW4gYmUgcHJldmVudGVkIHVzaW5nIHJldHVyblZhbHVlLiBTb21lIHNwZWNpYWwga2V5c1xuICAgICAgICAvLyByZXF1aXJlIHNldHRpbmcgdGhlIGtleUNvZGUgdG8gLTEgYXMgd2VsbDpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gSW4gSUU3OlxuICAgICAgICAvLyBGMywgRjUsIEYxMCwgRjExLCBDdHJsK1AsIENydGwrTywgQ3RybCtGICh0aGVzZSBhcmUgdGFrZW4gZnJvbSBJRTYpXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEluIElFODpcbiAgICAgICAgLy8gQ3RybCtQLCBDcnRsK08sIEN0cmwrRiAoRjEtRjEyIGNhbm5vdCBiZSBzdG9wcGVkIHRocm91Z2ggdGhlIGV2ZW50KVxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSB0aGVyZWZvcmUgZG8gdGhpcyBmb3IgYWxsIGZ1bmN0aW9uIGtleXMgYXMgd2VsbCBhcyB3aGVuIEN0cmwga2V5XG4gICAgICAgIC8vIGlzIHByZXNzZWQuXG4gICAgICAgIHZhciBWS19GMSA9IDExMjtcbiAgICAgICAgdmFyIFZLX0YxMiA9IDEyMztcbiAgICAgICAgaWYgKGJlLmN0cmxLZXkgfHwgYmUua2V5Q29kZSA+PSBWS19GMSAmJiBiZS5rZXlDb2RlIDw9IFZLX0YxMikge1xuICAgICAgICAgIGJlLmtleUNvZGUgPSAtMTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgLy8gSUUgdGhyb3dzIGFuICdhY2Nlc3MgZGVuaWVkJyBleGNlcHRpb24gd2hlbiB0cnlpbmcgdG8gY2hhbmdlXG4gICAgICAgIC8vIGtleUNvZGUgaW4gc29tZSBzaXR1YXRpb25zIChlLmcuIHNyY0VsZW1lbnQgaXMgaW5wdXRbdHlwZT1maWxlXSxcbiAgICAgICAgLy8gb3Igc3JjRWxlbWVudCBpcyBhbiBhbmNob3IgdGFnIHJld3JpdHRlbiBieSBwYXJlbnQncyBpbm5lckhUTUwpLlxuICAgICAgICAvLyBEbyBub3RoaW5nIGluIHRoaXMgY2FzZS5cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmUucHJldmVudERlZmF1bHQoKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge0V2ZW50fSBUaGUgdW5kZXJseWluZyBicm93c2VyIGV2ZW50IG9iamVjdC5cbiAqL1xuZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LnByb3RvdHlwZS5nZXRCcm93c2VyRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZXZlbnRfO1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDEyIFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQW4gaW50ZXJmYWNlIGZvciBhIGxpc3RlbmFibGUgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAYXV0aG9yIGNocmlzaGVucnlAZ29vZ2xlLmNvbSAoQ2hyaXMgSGVucnkpXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLmV2ZW50cy5MaXN0ZW5hYmxlJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXknKTtcblxuLyoqIEBzdXBwcmVzcyB7ZXh0cmFSZXF1aXJlfSAqL1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cy5FdmVudElkJyk7XG5cblxuXG4vKipcbiAqIEEgbGlzdGVuYWJsZSBpbnRlcmZhY2UuIEEgbGlzdGVuYWJsZSBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgYWJpbGl0eVxuICogdG8gZGlzcGF0Y2gvYnJvYWRjYXN0IGV2ZW50cyB0byBcImV2ZW50IGxpc3RlbmVyc1wiIHJlZ2lzdGVyZWQgdmlhXG4gKiBsaXN0ZW4vbGlzdGVuT25jZS5cbiAqXG4gKiBUaGUgaW50ZXJmYWNlIGFsbG93cyBmb3IgYW4gZXZlbnQgcHJvcGFnYXRpb24gbWVjaGFuaXNtIHNpbWlsYXJcbiAqIHRvIG9uZSBvZmZlcmVkIGJ5IG5hdGl2ZSBicm93c2VyIGV2ZW50IHRhcmdldHMsIHN1Y2ggYXNcbiAqIGNhcHR1cmUvYnViYmxlIG1lY2hhbmlzbSwgc3RvcHBpbmcgcHJvcGFnYXRpb24sIGFuZCBwcmV2ZW50aW5nXG4gKiBkZWZhdWx0IGFjdGlvbnMuIENhcHR1cmUvYnViYmxlIG1lY2hhbmlzbSBkZXBlbmRzIG9uIHRoZSBhbmNlc3RvclxuICogdHJlZSBjb25zdHJ1Y3RlZCB2aWEge0Bjb2RlICNnZXRQYXJlbnRFdmVudFRhcmdldH07IHRoaXMgdHJlZVxuICogbXVzdCBiZSBkaXJlY3RlZCBhY3ljbGljIGdyYXBoLiBUaGUgbWVhbmluZyBvZiBkZWZhdWx0IGFjdGlvbihzKVxuICogaW4gcHJldmVudERlZmF1bHQgaXMgc3BlY2lmaWMgdG8gYSBwYXJ0aWN1bGFyIHVzZSBjYXNlLlxuICpcbiAqIEltcGxlbWVudGF0aW9ucyB0aGF0IGRvIG5vdCBzdXBwb3J0IGNhcHR1cmUvYnViYmxlIG9yIGNhbiBub3QgaGF2ZVxuICogYSBwYXJlbnQgbGlzdGVuYWJsZSBjYW4gc2ltcGx5IG5vdCBpbXBsZW1lbnQgYW55IGFiaWxpdHkgdG8gc2V0IHRoZVxuICogcGFyZW50IGxpc3RlbmFibGUgKGFuZCBoYXZlIHtAY29kZSAjZ2V0UGFyZW50RXZlbnRUYXJnZXR9IHJldHVyblxuICogbnVsbCkuXG4gKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhpcyBjbGFzcyBjYW4gYmUgdXNlZCB3aXRoIG9yIGluZGVwZW5kZW50bHkgZnJvbVxuICogZ29vZy5ldmVudHMuXG4gKlxuICogSW1wbGVtZW50YXRpb24gbXVzdCBjYWxsIHtAY29kZSAjYWRkSW1wbGVtZW50YXRpb24oaW1wbENsYXNzKX0uXG4gKlxuICogQGludGVyZmFjZVxuICogQHNlZSBnb29nLmV2ZW50c1xuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1FdmVudHMvZXZlbnRzLmh0bWxcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZSA9IGZ1bmN0aW9uKCkge307XG5cblxuLyoqXG4gKiBBbiBleHBhbmRvIHByb3BlcnR5IHRvIGluZGljYXRlIHRoYXQgYW4gb2JqZWN0IGltcGxlbWVudHNcbiAqIGdvb2cuZXZlbnRzLkxpc3RlbmFibGUuXG4gKlxuICogU2VlIGFkZEltcGxlbWVudGF0aW9uL2lzSW1wbGVtZW50ZWRCeS5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQGNvbnN0XG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGUuSU1QTEVNRU5URURfQllfUFJPUCA9XG4gICAgJ2Nsb3N1cmVfbGlzdGVuYWJsZV8nICsgKChNYXRoLnJhbmRvbSgpICogMWU2KSB8IDApO1xuXG5cbi8qKlxuICogTWFya3MgYSBnaXZlbiBjbGFzcyAoY29uc3RydWN0b3IpIGFzIGFuIGltcGxlbWVudGF0aW9uIG9mXG4gKiBMaXN0ZW5hYmxlLCBkbyB0aGF0IHdlIGNhbiBxdWVyeSB0aGF0IGZhY3QgYXQgcnVudGltZS4gVGhlIGNsYXNzXG4gKiBtdXN0IGhhdmUgYWxyZWFkeSBpbXBsZW1lbnRlZCB0aGUgaW50ZXJmYWNlLlxuICogQHBhcmFtIHshRnVuY3Rpb259IGNscyBUaGUgY2xhc3MgY29uc3RydWN0b3IuIFRoZSBjb3JyZXNwb25kaW5nXG4gKiAgICAgY2xhc3MgbXVzdCBoYXZlIGFscmVhZHkgaW1wbGVtZW50ZWQgdGhlIGludGVyZmFjZS5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5hZGRJbXBsZW1lbnRhdGlvbiA9IGZ1bmN0aW9uKGNscykge1xuICBjbHMucHJvdG90eXBlW2dvb2cuZXZlbnRzLkxpc3RlbmFibGUuSU1QTEVNRU5URURfQllfUFJPUF0gPSB0cnVlO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYSBnaXZlbiBpbnN0YW5jZSBpbXBsZW1lbnRzIExpc3RlbmFibGUuIFRoZVxuICogICAgIGNsYXNzL3N1cGVyY2xhc3Mgb2YgdGhlIGluc3RhbmNlIG11c3QgY2FsbCBhZGRJbXBsZW1lbnRhdGlvbi5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5pc0ltcGxlbWVudGVkQnkgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuICEhKG9iaiAmJiBvYmpbZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5JTVBMRU1FTlRFRF9CWV9QUk9QXSk7XG59O1xuXG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lci4gQSBsaXN0ZW5lciBjYW4gb25seSBiZSBhZGRlZCBvbmNlIHRvIGFuXG4gKiBvYmplY3QgYW5kIGlmIGl0IGlzIGFkZGVkIGFnYWluIHRoZSBrZXkgZm9yIHRoZSBsaXN0ZW5lciBpc1xuICogcmV0dXJuZWQuIE5vdGUgdGhhdCBpZiB0aGUgZXhpc3RpbmcgbGlzdGVuZXIgaXMgYSBvbmUtb2ZmIGxpc3RlbmVyXG4gKiAocmVnaXN0ZXJlZCB2aWEgbGlzdGVuT25jZSksIGl0IHdpbGwgbm8gbG9uZ2VyIGJlIGEgb25lLW9mZlxuICogbGlzdGVuZXIgYWZ0ZXIgYSBjYWxsIHRvIGxpc3RlbigpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPn0gdHlwZSBUaGUgZXZlbnQgdHlwZSBpZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTQ09QRSwgRVZFTlRPQkopOihib29sZWFufHVuZGVmaW5lZCl9IGxpc3RlbmVyIENhbGxiYWNrXG4gKiAgICAgbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3VzZUNhcHR1cmUgV2hldGhlciB0byBmaXJlIGluIGNhcHR1cmUgcGhhc2VcbiAqICAgICAoZGVmYXVsdHMgdG8gZmFsc2UpLlxuICogQHBhcmFtIHtTQ09QRT19IG9wdF9saXN0ZW5lclNjb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZVxuICogICAgIGxpc3RlbmVyLlxuICogQHJldHVybiB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX0gVW5pcXVlIGtleSBmb3IgdGhlIGxpc3RlbmVyLlxuICogQHRlbXBsYXRlIFNDT1BFLEVWRU5UT0JKXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGUucHJvdG90eXBlLmxpc3RlbjtcblxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBpcyByZW1vdmVkIGF1dG9tYXRpY2FsbHkgYWZ0ZXIgdGhlXG4gKiBsaXN0ZW5lciBmaXJlZCBvbmNlLlxuICpcbiAqIElmIGFuIGV4aXN0aW5nIGxpc3RlbmVyIGFscmVhZHkgZXhpc3RzLCBsaXN0ZW5PbmNlIHdpbGwgZG9cbiAqIG5vdGhpbmcuIEluIHBhcnRpY3VsYXIsIGlmIHRoZSBsaXN0ZW5lciB3YXMgcHJldmlvdXNseSByZWdpc3RlcmVkXG4gKiB2aWEgbGlzdGVuKCksIGxpc3Rlbk9uY2UoKSB3aWxsIG5vdCB0dXJuIHRoZSBsaXN0ZW5lciBpbnRvIGFcbiAqIG9uZS1vZmYgbGlzdGVuZXIuIFNpbWlsYXJseSwgaWYgdGhlcmUgaXMgYWxyZWFkeSBhbiBleGlzdGluZ1xuICogb25lLW9mZiBsaXN0ZW5lciwgbGlzdGVuT25jZSBkb2VzIG5vdCBtb2RpZnkgdGhlIGxpc3RlbmVycyAoaXQgaXNcbiAqIHN0aWxsIGEgb25jZSBsaXN0ZW5lcikuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+fSB0eXBlIFRoZSBldmVudCB0eXBlIGlkLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlNDT1BFLCBFVkVOVE9CSik6KGJvb2xlYW58dW5kZWZpbmVkKX0gbGlzdGVuZXIgQ2FsbGJhY2tcbiAqICAgICBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfdXNlQ2FwdHVyZSBXaGV0aGVyIHRvIGZpcmUgaW4gY2FwdHVyZSBwaGFzZVxuICogICAgIChkZWZhdWx0cyB0byBmYWxzZSkuXG4gKiBAcGFyYW0ge1NDT1BFPX0gb3B0X2xpc3RlbmVyU2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlXG4gKiAgICAgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHtnb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5fSBVbmlxdWUga2V5IGZvciB0aGUgbGlzdGVuZXIuXG4gKiBAdGVtcGxhdGUgU0NPUEUsRVZFTlRPQkpcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5wcm90b3R5cGUubGlzdGVuT25jZTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIgd2hpY2ggd2FzIGFkZGVkIHdpdGggbGlzdGVuKCkgb3IgbGlzdGVuT25jZSgpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPn0gdHlwZSBUaGUgZXZlbnQgdHlwZSBpZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTQ09QRSwgRVZFTlRPQkopOihib29sZWFufHVuZGVmaW5lZCl9IGxpc3RlbmVyIENhbGxiYWNrXG4gKiAgICAgbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3VzZUNhcHR1cmUgV2hldGhlciB0byBmaXJlIGluIGNhcHR1cmUgcGhhc2VcbiAqICAgICAoZGVmYXVsdHMgdG8gZmFsc2UpLlxuICogQHBhcmFtIHtTQ09QRT19IG9wdF9saXN0ZW5lclNjb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsXG4gKiAgICAgdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhbnkgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG4gKiBAdGVtcGxhdGUgU0NPUEUsRVZFTlRPQkpcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5wcm90b3R5cGUudW5saXN0ZW47XG5cblxuLyoqXG4gKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyIHdoaWNoIHdhcyBhZGRlZCB3aXRoIGxpc3RlbigpIGJ5IHRoZSBrZXlcbiAqIHJldHVybmVkIGJ5IGxpc3RlbigpLlxuICpcbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX0ga2V5IFRoZSBrZXkgcmV0dXJuZWQgYnlcbiAqICAgICBsaXN0ZW4oKSBvciBsaXN0ZW5PbmNlKCkuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGFueSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5wcm90b3R5cGUudW5saXN0ZW5CeUtleTtcblxuXG4vKipcbiAqIERpc3BhdGNoZXMgYW4gZXZlbnQgKG9yIGV2ZW50IGxpa2Ugb2JqZWN0KSBhbmQgY2FsbHMgYWxsIGxpc3RlbmVyc1xuICogbGlzdGVuaW5nIGZvciBldmVudHMgb2YgdGhpcyB0eXBlLiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQgaXMgZGVjaWRlZCBieSB0aGVcbiAqIHR5cGUgcHJvcGVydHkgb24gdGhlIGV2ZW50IG9iamVjdC5cbiAqXG4gKiBJZiBhbnkgb2YgdGhlIGxpc3RlbmVycyByZXR1cm5zIGZhbHNlIE9SIGNhbGxzIHByZXZlbnREZWZhdWx0IHRoZW4gdGhpc1xuICogZnVuY3Rpb24gd2lsbCByZXR1cm4gZmFsc2UuICBJZiBvbmUgb2YgdGhlIGNhcHR1cmUgbGlzdGVuZXJzIGNhbGxzXG4gKiBzdG9wUHJvcGFnYXRpb24sIHRoZW4gdGhlIGJ1YmJsZSBsaXN0ZW5lcnMgd29uJ3QgZmlyZS5cbiAqXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkV2ZW50TGlrZX0gZSBFdmVudCBvYmplY3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBJZiBhbnlvbmUgY2FsbGVkIHByZXZlbnREZWZhdWx0IG9uIHRoZSBldmVudCBvYmplY3QgKG9yXG4gKiAgICAgaWYgYW55IG9mIHRoZSBsaXN0ZW5lcnMgcmV0dXJucyBmYWxzZSkgdGhpcyB3aWxsIGFsc28gcmV0dXJuIGZhbHNlLlxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlLnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIGZyb20gdGhpcyBsaXN0ZW5hYmxlLiBJZiB0eXBlIGlzIHNwZWNpZmllZCxcbiAqIGl0IHdpbGwgb25seSByZW1vdmUgbGlzdGVuZXJzIG9mIHRoZSBwYXJ0aWN1bGFyIHR5cGUuIG90aGVyd2lzZSBhbGxcbiAqIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIHdpbGwgYmUgcmVtb3ZlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF90eXBlIFR5cGUgb2YgZXZlbnQgdG8gcmVtb3ZlLCBkZWZhdWx0IGlzIHRvXG4gKiAgICAgcmVtb3ZlIGFsbCB0eXBlcy5cbiAqIEByZXR1cm4ge251bWJlcn0gTnVtYmVyIG9mIGxpc3RlbmVycyByZW1vdmVkLlxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJlbnQgb2YgdGhpcyBldmVudCB0YXJnZXQgdG8gdXNlIGZvciBjYXB0dXJlL2J1YmJsZVxuICogbWVjaGFuaXNtLlxuICpcbiAqIE5PVEUoY2hyaXNoZW5yeSk6IFRoZSBuYW1lIHJlZmxlY3RzIHRoZSBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiBvZlxuICogY3VzdG9tIGV2ZW50IHRhcmdldCAoe0Bjb2RlIGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fSkuIFdlIGRlY2lkZWRcbiAqIHRoYXQgY2hhbmdpbmcgdGhlIG5hbWUgaXMgbm90IHdvcnRoIGl0LlxuICpcbiAqIEByZXR1cm4ge2dvb2cuZXZlbnRzLkxpc3RlbmFibGV9IFRoZSBwYXJlbnQgRXZlbnRUYXJnZXQgb3IgbnVsbCBpZlxuICogICAgIHRoZXJlIGlzIG5vIHBhcmVudC5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5wcm90b3R5cGUuZ2V0UGFyZW50RXZlbnRUYXJnZXQ7XG5cblxuLyoqXG4gKiBGaXJlcyBhbGwgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMgaW4gdGhpcyBsaXN0ZW5hYmxlIGZvciB0aGUgZ2l2ZW5cbiAqIHR5cGUgYW5kIGNhcHR1cmUgbW9kZSwgcGFzc2luZyB0aGVtIHRoZSBnaXZlbiBldmVudE9iamVjdC4gVGhpc1xuICogZG9lcyBub3QgcGVyZm9ybSBhY3R1YWwgY2FwdHVyZS9idWJibGUuIE9ubHkgaW1wbGVtZW50b3JzIG9mIHRoZVxuICogaW50ZXJmYWNlIHNob3VsZCBiZSB1c2luZyB0aGlzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPn0gdHlwZSBUaGUgdHlwZSBvZiB0aGVcbiAqICAgICBsaXN0ZW5lcnMgdG8gZmlyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FwdHVyZSBUaGUgY2FwdHVyZSBtb2RlIG9mIHRoZSBsaXN0ZW5lcnMgdG8gZmlyZS5cbiAqIEBwYXJhbSB7RVZFTlRPQkp9IGV2ZW50T2JqZWN0IFRoZSBldmVudCBvYmplY3QgdG8gZmlyZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYWxsIGxpc3RlbmVycyBzdWNjZWVkZWQgd2l0aG91dFxuICogICAgIGF0dGVtcHRpbmcgdG8gcHJldmVudCBkZWZhdWx0IGJlaGF2aW9yLiBJZiBhbnkgbGlzdGVuZXIgcmV0dXJuc1xuICogICAgIGZhbHNlIG9yIGNhbGxlZCBnb29nLmV2ZW50cy5FdmVudCNwcmV2ZW50RGVmYXVsdCwgdGhpcyByZXR1cm5zXG4gKiAgICAgZmFsc2UuXG4gKiBAdGVtcGxhdGUgRVZFTlRPQkpcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5wcm90b3R5cGUuZmlyZUxpc3RlbmVycztcblxuXG4vKipcbiAqIEdldHMgYWxsIGxpc3RlbmVycyBpbiB0aGlzIGxpc3RlbmFibGUgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZFxuICogY2FwdHVyZSBtb2RlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBsaXN0ZW5lcnMgdG8gZmlyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FwdHVyZSBUaGUgY2FwdHVyZSBtb2RlIG9mIHRoZSBsaXN0ZW5lcnMgdG8gZmlyZS5cbiAqIEByZXR1cm4geyFBcnJheTxnb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5Pn0gQW4gYXJyYXkgb2YgcmVnaXN0ZXJlZFxuICogICAgIGxpc3RlbmVycy5cbiAqIEB0ZW1wbGF0ZSBFVkVOVE9CSlxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlLnByb3RvdHlwZS5nZXRMaXN0ZW5lcnM7XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5IGZvciB0aGUgZXZlbnQgb3IgbnVsbCBpZiBubyBzdWNoXG4gKiBsaXN0ZW5lciBpcyBpbiB1c2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+fSB0eXBlIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICogICAgIHdpdGhvdXQgdGhlICdvbicgcHJlZml4LlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlNDT1BFLCBFVkVOVE9CSik6KGJvb2xlYW58dW5kZWZpbmVkKX0gbGlzdGVuZXIgVGhlXG4gKiAgICAgbGlzdGVuZXIgZnVuY3Rpb24gdG8gZ2V0LlxuICogQHBhcmFtIHtib29sZWFufSBjYXB0dXJlIFdoZXRoZXIgdGhlIGxpc3RlbmVyIGlzIGEgY2FwdHVyaW5nIGxpc3RlbmVyLlxuICogQHBhcmFtIHtTQ09QRT19IG9wdF9saXN0ZW5lclNjb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZVxuICogICAgIGxpc3RlbmVyLlxuICogQHJldHVybiB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX0gdGhlIGZvdW5kIGxpc3RlbmVyIG9yIG51bGwgaWYgbm90IGZvdW5kLlxuICogQHRlbXBsYXRlIFNDT1BFLEVWRU5UT0JKXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGUucHJvdG90eXBlLmdldExpc3RlbmVyO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGVyZSBpcyBhbnkgYWN0aXZlIGxpc3RlbmVycyBtYXRjaGluZyB0aGUgc3BlY2lmaWVkXG4gKiBzaWduYXR1cmUuIElmIGVpdGhlciB0aGUgdHlwZSBvciBjYXB0dXJlIHBhcmFtZXRlcnMgYXJlXG4gKiB1bnNwZWNpZmllZCwgdGhlIGZ1bmN0aW9uIHdpbGwgbWF0Y2ggb24gdGhlIHJlbWFpbmluZyBjcml0ZXJpYS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj49fSBvcHRfdHlwZSBFdmVudCB0eXBlLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NhcHR1cmUgV2hldGhlciB0byBjaGVjayBmb3IgY2FwdHVyZSBvciBidWJibGVcbiAqICAgICBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZXJlIGlzIGFueSBhY3RpdmUgbGlzdGVuZXJzIG1hdGNoaW5nXG4gKiAgICAgdGhlIHJlcXVlc3RlZCB0eXBlIGFuZC9vciBjYXB0dXJlIHBoYXNlLlxuICogQHRlbXBsYXRlIEVWRU5UT0JKXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGUucHJvdG90eXBlLmhhc0xpc3RlbmVyO1xuXG5cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgdGhhdCBkZXNjcmliZXMgYSBzaW5nbGUgcmVnaXN0ZXJlZCBsaXN0ZW5lci5cbiAqIEBpbnRlcmZhY2VcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleSA9IGZ1bmN0aW9uKCkge307XG5cblxuLyoqXG4gKiBDb3VudGVyIHVzZWQgdG8gY3JlYXRlIGEgdW5pcXVlIGtleVxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXkuY291bnRlcl8gPSAwO1xuXG5cbi8qKlxuICogUmVzZXJ2ZXMgYSBrZXkgdG8gYmUgdXNlZCBmb3IgTGlzdGVuYWJsZUtleSNrZXkgZmllbGQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEEgbnVtYmVyIHRvIGJlIHVzZWQgdG8gZmlsbCBMaXN0ZW5hYmxlS2V5I2tleVxuICogICAgIGZpZWxkLlxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5LnJlc2VydmVLZXkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICsrZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleS5jb3VudGVyXztcbn07XG5cblxuLyoqXG4gKiBUaGUgc291cmNlIGV2ZW50IHRhcmdldC5cbiAqIEB0eXBlIHshKE9iamVjdHxnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0KX1cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleS5wcm90b3R5cGUuc3JjO1xuXG5cbi8qKlxuICogVGhlIGV2ZW50IHR5cGUgdGhlIGxpc3RlbmVyIGlzIGxpc3RlbmluZyB0by5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXkucHJvdG90eXBlLnR5cGU7XG5cblxuLyoqXG4gKiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAdHlwZSB7ZnVuY3Rpb24oPyk6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24oPyk6P318bnVsbH1cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleS5wcm90b3R5cGUubGlzdGVuZXI7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBsaXN0ZW5lciB3b3JrcyBvbiBjYXB0dXJlIHBoYXNlLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXkucHJvdG90eXBlLmNhcHR1cmU7XG5cblxuLyoqXG4gKiBUaGUgJ3RoaXMnIG9iamVjdCBmb3IgdGhlIGxpc3RlbmVyIGZ1bmN0aW9uJ3Mgc2NvcGUuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5LnByb3RvdHlwZS5oYW5kbGVyO1xuXG5cbi8qKlxuICogQSBnbG9iYWxseSB1bmlxdWUgbnVtYmVyIHRvIGlkZW50aWZ5IHRoZSBrZXkuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5LnByb3RvdHlwZS5rZXk7XG4iLCIvLyBDb3B5cmlnaHQgMjAwNSBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IExpc3RlbmVyIG9iamVjdC5cbiAqIEBzZWUgLi4vZGVtb3MvZXZlbnRzLmh0bWxcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkxpc3RlbmVyJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleScpO1xuXG5cblxuLyoqXG4gKiBTaW1wbGUgY2xhc3MgdGhhdCBzdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgYSBsaXN0ZW5lclxuICogQHBhcmFtIHshRnVuY3Rpb259IGxpc3RlbmVyIENhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJveHkgV3JhcHBlciBmb3IgdGhlIGxpc3RlbmVyIHRoYXQgcGF0Y2hlcyB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9IHNyYyBTb3VyY2Ugb2JqZWN0IGZvclxuICogICAgIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEV2ZW50IHR5cGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNhcHR1cmUgV2hldGhlciBpbiBjYXB0dXJlIG9yIGJ1YmJsZSBwaGFzZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2hhbmRsZXIgT2JqZWN0IGluIHdob3NlIGNvbnRleHQgdG8gZXhlY3V0ZSB0aGUgY2FsbGJhY2suXG4gKiBAaW1wbGVtZW50cyB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5lciA9IGZ1bmN0aW9uKFxuICAgIGxpc3RlbmVyLCBwcm94eSwgc3JjLCB0eXBlLCBjYXB0dXJlLCBvcHRfaGFuZGxlcikge1xuICBpZiAoZ29vZy5ldmVudHMuTGlzdGVuZXIuRU5BQkxFX01PTklUT1JJTkcpIHtcbiAgICB0aGlzLmNyZWF0aW9uU3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgKi9cbiAgdGhpcy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuXG4gIC8qKlxuICAgKiBBIHdyYXBwZXIgb3ZlciB0aGUgb3JpZ2luYWwgbGlzdGVuZXIuIFRoaXMgaXMgdXNlZCBzb2xlbHkgdG9cbiAgICogaGFuZGxlIG5hdGl2ZSBicm93c2VyIGV2ZW50cyAoaXQgaXMgdXNlZCB0byBzaW11bGF0ZSB0aGUgY2FwdHVyZVxuICAgKiBwaGFzZSBhbmQgdG8gcGF0Y2ggdGhlIGV2ZW50IG9iamVjdCkuXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIHRoaXMucHJveHkgPSBwcm94eTtcblxuICAvKipcbiAgICogT2JqZWN0IG9yIG5vZGUgdGhhdCBjYWxsYmFjayBpcyBsaXN0ZW5pbmcgdG9cbiAgICogQHR5cGUge0V2ZW50VGFyZ2V0fGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9XG4gICAqL1xuICB0aGlzLnNyYyA9IHNyYztcblxuICAvKipcbiAgICogVGhlIGV2ZW50IHR5cGUuXG4gICAqIEBjb25zdCB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy50eXBlID0gdHlwZTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgbGlzdGVuZXIgaXMgYmVpbmcgY2FsbGVkIGluIHRoZSBjYXB0dXJlIG9yIGJ1YmJsZSBwaGFzZVxuICAgKiBAY29uc3Qge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmNhcHR1cmUgPSAhIWNhcHR1cmU7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIG9iamVjdCB3aG9zZSBjb250ZXh0IHRvIGV4ZWN1dGUgdGhlIGxpc3RlbmVyIGluXG4gICAqIEB0eXBlIHtPYmplY3R8dW5kZWZpbmVkfVxuICAgKi9cbiAgdGhpcy5oYW5kbGVyID0gb3B0X2hhbmRsZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBrZXkgb2YgdGhlIGxpc3RlbmVyLlxuICAgKiBAY29uc3Qge251bWJlcn1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB0aGlzLmtleSA9IGdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXkucmVzZXJ2ZUtleSgpO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlbW92ZSB0aGUgbGlzdGVuZXIgYWZ0ZXIgaXQgaGFzIGJlZW4gY2FsbGVkLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuY2FsbE9uY2UgPSBmYWxzZTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgbGlzdGVuZXIgaGFzIGJlZW4gcmVtb3ZlZC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLnJlbW92ZWQgPSBmYWxzZTtcbn07XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRvIGVuYWJsZSB0aGUgbW9uaXRvcmluZyBvZiB0aGVcbiAqICAgICBnb29nLmV2ZW50cy5MaXN0ZW5lciBpbnN0YW5jZXMuIFN3aXRjaGluZyBvbiB0aGUgbW9uaXRvcmluZyBpcyBvbmx5XG4gKiAgICAgcmVjb21tZW5kZWQgZm9yIGRlYnVnZ2luZyBiZWNhdXNlIGl0IGhhcyBhIHNpZ25pZmljYW50IGltcGFjdCBvblxuICogICAgIHBlcmZvcm1hbmNlIGFuZCBtZW1vcnkgdXNhZ2UuIElmIHN3aXRjaGVkIG9mZiwgdGhlIG1vbml0b3JpbmcgY29kZVxuICogICAgIGNvbXBpbGVzIGRvd24gdG8gMCBieXRlcy5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cuZXZlbnRzLkxpc3RlbmVyLkVOQUJMRV9NT05JVE9SSU5HJywgZmFsc2UpO1xuXG5cbi8qKlxuICogSWYgbW9uaXRvcmluZyB0aGUgZ29vZy5ldmVudHMuTGlzdGVuZXIgaW5zdGFuY2VzIGlzIGVuYWJsZWQsIHN0b3JlcyB0aGVcbiAqIGNyZWF0aW9uIHN0YWNrIHRyYWNlIG9mIHRoZSBEaXNwb3NhYmxlIGluc3RhbmNlLlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuZXIucHJvdG90eXBlLmNyZWF0aW9uU3RhY2s7XG5cblxuLyoqXG4gKiBNYXJrcyB0aGlzIGxpc3RlbmVyIGFzIHJlbW92ZWQuIFRoaXMgYWxzbyByZW1vdmUgcmVmZXJlbmNlcyBoZWxkIGJ5XG4gKiB0aGlzIGxpc3RlbmVyIG9iamVjdCAoc3VjaCBhcyBsaXN0ZW5lciBhbmQgZXZlbnQgc291cmNlKS5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuZXIucHJvdG90eXBlLm1hcmtBc1JlbW92ZWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZW1vdmVkID0gdHJ1ZTtcbiAgdGhpcy5saXN0ZW5lciA9IG51bGw7XG4gIHRoaXMucHJveHkgPSBudWxsO1xuICB0aGlzLnNyYyA9IG51bGw7XG4gIHRoaXMuaGFuZGxlciA9IG51bGw7XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTMgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBBIG1hcCBvZiBsaXN0ZW5lcnMgdGhhdCBwcm92aWRlcyB1dGlsaXR5IGZ1bmN0aW9ucyB0b1xuICogZGVhbCB3aXRoIGxpc3RlbmVycyBvbiBhbiBldmVudCB0YXJnZXQuIFVzZWQgYnlcbiAqIHtAY29kZSBnb29nLmV2ZW50cy5FdmVudFRhcmdldH0uXG4gKlxuICogV0FSTklORzogRG8gbm90IHVzZSB0aGlzIGNsYXNzIGZyb20gb3V0c2lkZSBnb29nLmV2ZW50cyBwYWNrYWdlLlxuICpcbiAqIEB2aXNpYmlsaXR5IHsvL2Nsb3N1cmUvZ29vZy9iaW4vc2l6ZXRlc3RzOl9fcGtnX199XG4gKiBAdmlzaWJpbGl0eSB7Ly9jbG9zdXJlL2dvb2cvZXZlbnRzOl9fcGtnX199XG4gKiBAdmlzaWJpbGl0eSB7Ly9jbG9zdXJlL2dvb2cvbGFicy9ldmVudHM6X19wa2dfX31cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkxpc3RlbmVyTWFwJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hcnJheScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cy5MaXN0ZW5lcicpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm9iamVjdCcpO1xuXG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGxpc3RlbmVyIG1hcC5cbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8Z29vZy5ldmVudHMuTGlzdGVuYWJsZX0gc3JjIFRoZSBzcmMgb2JqZWN0LlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZmluYWxcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAgPSBmdW5jdGlvbihzcmMpIHtcbiAgLyoqIEB0eXBlIHtFdmVudFRhcmdldHxnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfSAqL1xuICB0aGlzLnNyYyA9IHNyYztcblxuICAvKipcbiAgICogTWFwcyBvZiBldmVudCB0eXBlIHRvIGFuIGFycmF5IG9mIGxpc3RlbmVycy5cbiAgICogQHR5cGUge09iamVjdDxzdHJpbmcsICFBcnJheTwhZ29vZy5ldmVudHMuTGlzdGVuZXI+Pn1cbiAgICovXG4gIHRoaXMubGlzdGVuZXJzID0ge307XG5cbiAgLyoqXG4gICAqIFRoZSBjb3VudCBvZiB0eXBlcyBpbiB0aGlzIG1hcCB0aGF0IGhhdmUgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnR5cGVDb3VudF8gPSAwO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNvdW50IG9mIGV2ZW50IHR5cGVzIGluIHRoaXMgbWFwIHRoYXQgYWN0dWFsbHlcbiAqICAgICBoYXZlIHJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5lck1hcC5wcm90b3R5cGUuZ2V0VHlwZUNvdW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnR5cGVDb3VudF87XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfSBUb3RhbCBudW1iZXIgb2YgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmVyTWFwLnByb3RvdHlwZS5nZXRMaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb3VudCA9IDA7XG4gIGZvciAodmFyIHR5cGUgaW4gdGhpcy5saXN0ZW5lcnMpIHtcbiAgICBjb3VudCArPSB0aGlzLmxpc3RlbmVyc1t0eXBlXS5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIGNvdW50O1xufTtcblxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIuIEEgbGlzdGVuZXIgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSB0byBhblxuICogb2JqZWN0IGFuZCBpZiBpdCBpcyBhZGRlZCBhZ2FpbiB0aGUga2V5IGZvciB0aGUgbGlzdGVuZXIgaXNcbiAqIHJldHVybmVkLlxuICpcbiAqIE5vdGUgdGhhdCBhIG9uZS1vZmYgbGlzdGVuZXIgd2lsbCBub3QgY2hhbmdlIGFuIGV4aXN0aW5nIGxpc3RlbmVyLFxuICogaWYgYW55LiBPbiB0aGUgb3RoZXIgaGFuZCBhIG5vcm1hbCBsaXN0ZW5lciB3aWxsIGNoYW5nZSBleGlzdGluZ1xuICogb25lLW9mZiBsaXN0ZW5lciB0byBiZWNvbWUgYSBub3JtYWwgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWR9IHR5cGUgVGhlIGxpc3RlbmVyIGV2ZW50IHR5cGUuXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXIgVGhpcyBsaXN0ZW5lciBjYWxsYmFjayBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNhbGxPbmNlIFdoZXRoZXIgdGhlIGxpc3RlbmVyIGlzIGEgb25lLW9mZlxuICogICAgIGxpc3RlbmVyLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3VzZUNhcHR1cmUgVGhlIGNhcHR1cmUgbW9kZSBvZiB0aGUgbGlzdGVuZXIuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9saXN0ZW5lclNjb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZVxuICogICAgIGxpc3RlbmVyLlxuICogQHJldHVybiB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX0gVW5pcXVlIGtleSBmb3IgdGhlIGxpc3RlbmVyLlxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5lck1hcC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oXG4gICAgdHlwZSwgbGlzdGVuZXIsIGNhbGxPbmNlLCBvcHRfdXNlQ2FwdHVyZSwgb3B0X2xpc3RlbmVyU2NvcGUpIHtcbiAgdmFyIHR5cGVTdHIgPSB0eXBlLnRvU3RyaW5nKCk7XG4gIHZhciBsaXN0ZW5lckFycmF5ID0gdGhpcy5saXN0ZW5lcnNbdHlwZVN0cl07XG4gIGlmICghbGlzdGVuZXJBcnJheSkge1xuICAgIGxpc3RlbmVyQXJyYXkgPSB0aGlzLmxpc3RlbmVyc1t0eXBlU3RyXSA9IFtdO1xuICAgIHRoaXMudHlwZUNvdW50XysrO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyT2JqO1xuICB2YXIgaW5kZXggPSBnb29nLmV2ZW50cy5MaXN0ZW5lck1hcC5maW5kTGlzdGVuZXJJbmRleF8oXG4gICAgICBsaXN0ZW5lckFycmF5LCBsaXN0ZW5lciwgb3B0X3VzZUNhcHR1cmUsIG9wdF9saXN0ZW5lclNjb3BlKTtcbiAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICBsaXN0ZW5lck9iaiA9IGxpc3RlbmVyQXJyYXlbaW5kZXhdO1xuICAgIGlmICghY2FsbE9uY2UpIHtcbiAgICAgIC8vIEVuc3VyZSB0aGF0LCBpZiB0aGVyZSBpcyBhbiBleGlzdGluZyBjYWxsT25jZSBsaXN0ZW5lciwgaXQgaXMgbm9cbiAgICAgIC8vIGxvbmdlciBhIGNhbGxPbmNlIGxpc3RlbmVyLlxuICAgICAgbGlzdGVuZXJPYmouY2FsbE9uY2UgPSBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGlzdGVuZXJPYmogPSBuZXcgZ29vZy5ldmVudHMuTGlzdGVuZXIoXG4gICAgICAgIGxpc3RlbmVyLCBudWxsLCB0aGlzLnNyYywgdHlwZVN0ciwgISFvcHRfdXNlQ2FwdHVyZSwgb3B0X2xpc3RlbmVyU2NvcGUpO1xuICAgIGxpc3RlbmVyT2JqLmNhbGxPbmNlID0gY2FsbE9uY2U7XG4gICAgbGlzdGVuZXJBcnJheS5wdXNoKGxpc3RlbmVyT2JqKTtcbiAgfVxuICByZXR1cm4gbGlzdGVuZXJPYmo7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBhIG1hdGNoaW5nIGxpc3RlbmVyLlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWR9IHR5cGUgVGhlIGxpc3RlbmVyIGV2ZW50IHR5cGUuXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXIgVGhpcyBsaXN0ZW5lciBjYWxsYmFjayBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfdXNlQ2FwdHVyZSBUaGUgY2FwdHVyZSBtb2RlIG9mIHRoZSBsaXN0ZW5lci5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2xpc3RlbmVyU2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlXG4gKiAgICAgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGFueSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKFxuICAgIHR5cGUsIGxpc3RlbmVyLCBvcHRfdXNlQ2FwdHVyZSwgb3B0X2xpc3RlbmVyU2NvcGUpIHtcbiAgdmFyIHR5cGVTdHIgPSB0eXBlLnRvU3RyaW5nKCk7XG4gIGlmICghKHR5cGVTdHIgaW4gdGhpcy5saXN0ZW5lcnMpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQXJyYXkgPSB0aGlzLmxpc3RlbmVyc1t0eXBlU3RyXTtcbiAgdmFyIGluZGV4ID0gZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAuZmluZExpc3RlbmVySW5kZXhfKFxuICAgICAgbGlzdGVuZXJBcnJheSwgbGlzdGVuZXIsIG9wdF91c2VDYXB0dXJlLCBvcHRfbGlzdGVuZXJTY29wZSk7XG4gIGlmIChpbmRleCA+IC0xKSB7XG4gICAgdmFyIGxpc3RlbmVyT2JqID0gbGlzdGVuZXJBcnJheVtpbmRleF07XG4gICAgbGlzdGVuZXJPYmoubWFya0FzUmVtb3ZlZCgpO1xuICAgIGdvb2cuYXJyYXkucmVtb3ZlQXQobGlzdGVuZXJBcnJheSwgaW5kZXgpO1xuICAgIGlmIChsaXN0ZW5lckFycmF5Lmxlbmd0aCA9PSAwKSB7XG4gICAgICBkZWxldGUgdGhpcy5saXN0ZW5lcnNbdHlwZVN0cl07XG4gICAgICB0aGlzLnR5cGVDb3VudF8tLTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGdpdmVuIGxpc3RlbmVyIG9iamVjdC5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIHRvIHJlbW92ZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGxpc3RlbmVyIGlzIHJlbW92ZWQuXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmVyTWFwLnByb3RvdHlwZS5yZW1vdmVCeUtleSA9IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gIHZhciB0eXBlID0gbGlzdGVuZXIudHlwZTtcbiAgaWYgKCEodHlwZSBpbiB0aGlzLmxpc3RlbmVycykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcmVtb3ZlZCA9IGdvb2cuYXJyYXkucmVtb3ZlKHRoaXMubGlzdGVuZXJzW3R5cGVdLCBsaXN0ZW5lcik7XG4gIGlmIChyZW1vdmVkKSB7XG4gICAgbGlzdGVuZXIubWFya0FzUmVtb3ZlZCgpO1xuICAgIGlmICh0aGlzLmxpc3RlbmVyc1t0eXBlXS5sZW5ndGggPT0gMCkge1xuICAgICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzW3R5cGVdO1xuICAgICAgdGhpcy50eXBlQ291bnRfLS07XG4gICAgfVxuICB9XG4gIHJldHVybiByZW1vdmVkO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBmcm9tIHRoaXMgbWFwLiBJZiBvcHRfdHlwZSBpcyBwcm92aWRlZCwgb25seVxuICogbGlzdGVuZXJzIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIHR5cGUgYXJlIHJlbW92ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZD19IG9wdF90eXBlIFR5cGUgb2YgZXZlbnQgdG8gcmVtb3ZlLlxuICogQHJldHVybiB7bnVtYmVyfSBOdW1iZXIgb2YgbGlzdGVuZXJzIHJlbW92ZWQuXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmVyTWFwLnByb3RvdHlwZS5yZW1vdmVBbGwgPSBmdW5jdGlvbihvcHRfdHlwZSkge1xuICB2YXIgdHlwZVN0ciA9IG9wdF90eXBlICYmIG9wdF90eXBlLnRvU3RyaW5nKCk7XG4gIHZhciBjb3VudCA9IDA7XG4gIGZvciAodmFyIHR5cGUgaW4gdGhpcy5saXN0ZW5lcnMpIHtcbiAgICBpZiAoIXR5cGVTdHIgfHwgdHlwZSA9PSB0eXBlU3RyKSB7XG4gICAgICB2YXIgbGlzdGVuZXJBcnJheSA9IHRoaXMubGlzdGVuZXJzW3R5cGVdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lckFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICsrY291bnQ7XG4gICAgICAgIGxpc3RlbmVyQXJyYXlbaV0ubWFya0FzUmVtb3ZlZCgpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzW3R5cGVdO1xuICAgICAgdGhpcy50eXBlQ291bnRfLS07XG4gICAgfVxuICB9XG4gIHJldHVybiBjb3VudDtcbn07XG5cblxuLyoqXG4gKiBHZXRzIGFsbCBsaXN0ZW5lcnMgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4gdHlwZSBhbmQgY2FwdHVyZSBtb2RlLiBUaGVcbiAqIHJldHVybmVkIGFycmF5IGlzIGEgY29weSAoYnV0IHRoZSBsaXN0ZW5lciBvYmplY3RzIGFyZSBub3QpLlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWR9IHR5cGUgVGhlIHR5cGUgb2YgdGhlIGxpc3RlbmVyc1xuICogICAgIHRvIHJldHJpZXZlLlxuICogQHBhcmFtIHtib29sZWFufSBjYXB0dXJlIFRoZSBjYXB0dXJlIG1vZGUgb2YgdGhlIGxpc3RlbmVycyB0byByZXRyaWV2ZS5cbiAqIEByZXR1cm4geyFBcnJheTxnb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5Pn0gQW4gYXJyYXkgb2YgbWF0Y2hpbmdcbiAqICAgICBsaXN0ZW5lcnMuXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmVyTWFwLnByb3RvdHlwZS5nZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlLCBjYXB0dXJlKSB7XG4gIHZhciBsaXN0ZW5lckFycmF5ID0gdGhpcy5saXN0ZW5lcnNbdHlwZS50b1N0cmluZygpXTtcbiAgdmFyIHJ2ID0gW107XG4gIGlmIChsaXN0ZW5lckFycmF5KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lckFycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgbGlzdGVuZXJPYmogPSBsaXN0ZW5lckFycmF5W2ldO1xuICAgICAgaWYgKGxpc3RlbmVyT2JqLmNhcHR1cmUgPT0gY2FwdHVyZSkge1xuICAgICAgICBydi5wdXNoKGxpc3RlbmVyT2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJ2O1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIGdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXkgZm9yIHRoZSBldmVudCBvciBudWxsIGlmIG5vIHN1Y2hcbiAqIGxpc3RlbmVyIGlzIGluIHVzZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZH0gdHlwZSBUaGUgdHlwZSBvZiB0aGUgbGlzdGVuZXJcbiAqICAgICB0byByZXRyaWV2ZS5cbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgZnVuY3Rpb24gdG8gZ2V0LlxuICogQHBhcmFtIHtib29sZWFufSBjYXB0dXJlIFdoZXRoZXIgdGhlIGxpc3RlbmVyIGlzIGEgY2FwdHVyaW5nIGxpc3RlbmVyLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfbGlzdGVuZXJTY29wZSBPYmplY3QgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGVcbiAqICAgICBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge2dvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXl9IHRoZSBmb3VuZCBsaXN0ZW5lciBvciBudWxsIGlmIG5vdCBmb3VuZC5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAucHJvdG90eXBlLmdldExpc3RlbmVyID0gZnVuY3Rpb24oXG4gICAgdHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUsIG9wdF9saXN0ZW5lclNjb3BlKSB7XG4gIHZhciBsaXN0ZW5lckFycmF5ID0gdGhpcy5saXN0ZW5lcnNbdHlwZS50b1N0cmluZygpXTtcbiAgdmFyIGkgPSAtMTtcbiAgaWYgKGxpc3RlbmVyQXJyYXkpIHtcbiAgICBpID0gZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAuZmluZExpc3RlbmVySW5kZXhfKFxuICAgICAgICBsaXN0ZW5lckFycmF5LCBsaXN0ZW5lciwgY2FwdHVyZSwgb3B0X2xpc3RlbmVyU2NvcGUpO1xuICB9XG4gIHJldHVybiBpID4gLTEgPyBsaXN0ZW5lckFycmF5W2ldIDogbnVsbDtcbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZXJlIGlzIGEgbWF0Y2hpbmcgbGlzdGVuZXIuIElmIGVpdGhlciB0aGUgdHlwZSBvciBjYXB0dXJlXG4gKiBwYXJhbWV0ZXJzIGFyZSB1bnNwZWNpZmllZCwgdGhlIGZ1bmN0aW9uIHdpbGwgbWF0Y2ggb24gdGhlXG4gKiByZW1haW5pbmcgY3JpdGVyaWEuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWQ9fSBvcHRfdHlwZSBUaGUgdHlwZSBvZiB0aGUgbGlzdGVuZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfY2FwdHVyZSBUaGUgY2FwdHVyZSBtb2RlIG9mIHRoZSBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlcmUgaXMgYW4gYWN0aXZlIGxpc3RlbmVyIG1hdGNoaW5nXG4gKiAgICAgdGhlIHJlcXVlc3RlZCB0eXBlIGFuZC9vciBjYXB0dXJlIHBoYXNlLlxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5lck1hcC5wcm90b3R5cGUuaGFzTGlzdGVuZXIgPSBmdW5jdGlvbihcbiAgICBvcHRfdHlwZSwgb3B0X2NhcHR1cmUpIHtcbiAgdmFyIGhhc1R5cGUgPSBnb29nLmlzRGVmKG9wdF90eXBlKTtcbiAgdmFyIHR5cGVTdHIgPSBoYXNUeXBlID8gb3B0X3R5cGUudG9TdHJpbmcoKSA6ICcnO1xuICB2YXIgaGFzQ2FwdHVyZSA9IGdvb2cuaXNEZWYob3B0X2NhcHR1cmUpO1xuXG4gIHJldHVybiBnb29nLm9iamVjdC5zb21lKFxuICAgICAgdGhpcy5saXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyQXJyYXksIHR5cGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lckFycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgaWYgKCghaGFzVHlwZSB8fCBsaXN0ZW5lckFycmF5W2ldLnR5cGUgPT0gdHlwZVN0cikgJiZcbiAgICAgICAgICAgICAgKCFoYXNDYXB0dXJlIHx8IGxpc3RlbmVyQXJyYXlbaV0uY2FwdHVyZSA9PSBvcHRfY2FwdHVyZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xufTtcblxuXG4vKipcbiAqIEZpbmRzIHRoZSBpbmRleCBvZiBhIG1hdGNoaW5nIGdvb2cuZXZlbnRzLkxpc3RlbmVyIGluIHRoZSBnaXZlblxuICogbGlzdGVuZXJBcnJheS5cbiAqIEBwYXJhbSB7IUFycmF5PCFnb29nLmV2ZW50cy5MaXN0ZW5lcj59IGxpc3RlbmVyQXJyYXkgQXJyYXkgb2YgbGlzdGVuZXIuXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3VzZUNhcHR1cmUgVGhlIGNhcHR1cmUgZmxhZyBmb3IgdGhlIGxpc3RlbmVyLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfbGlzdGVuZXJTY29wZSBUaGUgbGlzdGVuZXIgc2NvcGUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgbGlzdGVuZXIgd2l0aGluIHRoZVxuICogICAgIGxpc3RlbmVyQXJyYXkuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5lck1hcC5maW5kTGlzdGVuZXJJbmRleF8gPSBmdW5jdGlvbihcbiAgICBsaXN0ZW5lckFycmF5LCBsaXN0ZW5lciwgb3B0X3VzZUNhcHR1cmUsIG9wdF9saXN0ZW5lclNjb3BlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJBcnJheS5sZW5ndGg7ICsraSkge1xuICAgIHZhciBsaXN0ZW5lck9iaiA9IGxpc3RlbmVyQXJyYXlbaV07XG4gICAgaWYgKCFsaXN0ZW5lck9iai5yZW1vdmVkICYmXG4gICAgICAgIGxpc3RlbmVyT2JqLmxpc3RlbmVyID09IGxpc3RlbmVyICYmXG4gICAgICAgIGxpc3RlbmVyT2JqLmNhcHR1cmUgPT0gISFvcHRfdXNlQ2FwdHVyZSAmJlxuICAgICAgICBsaXN0ZW5lck9iai5oYW5kbGVyID09IG9wdF9saXN0ZW5lclNjb3BlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDA1IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQW4gZXZlbnQgbWFuYWdlciBmb3IgYm90aCBuYXRpdmUgYnJvd3NlciBldmVudFxuICogdGFyZ2V0cyBhbmQgY3VzdG9tIEphdmFTY3JpcHQgZXZlbnQgdGFyZ2V0c1xuICogKHtAY29kZSBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfSkuIFRoaXMgcHJvdmlkZXMgYW4gYWJzdHJhY3Rpb25cbiAqIG92ZXIgYnJvd3NlcnMnIGV2ZW50IHN5c3RlbXMuXG4gKlxuICogSXQgYWxzbyBwcm92aWRlcyBhIHNpbXVsYXRpb24gb2YgVzNDIGV2ZW50IG1vZGVsJ3MgY2FwdHVyZSBwaGFzZSBpblxuICogSW50ZXJuZXQgRXhwbG9yZXIgKElFIDggYW5kIGJlbG93KS4gQ2F2ZWF0OiB0aGUgc2ltdWxhdGlvbiBkb2VzIG5vdFxuICogaW50ZXJhY3Qgd2VsbCB3aXRoIGxpc3RlbmVycyByZWdpc3RlcmVkIGRpcmVjdGx5IG9uIHRoZSBlbGVtZW50c1xuICogKGJ5cGFzc2luZyBnb29nLmV2ZW50cykgb3IgZXZlbiB3aXRoIGxpc3RlbmVycyByZWdpc3RlcmVkIHZpYVxuICogZ29vZy5ldmVudHMgaW4gYSBzZXBhcmF0ZSBKUyBiaW5hcnkuIEluIHRoZXNlIGNhc2VzLCB3ZSBwcm92aWRlXG4gKiBubyBvcmRlcmluZyBndWFyYW50ZWVzLlxuICpcbiAqIFRoZSBsaXN0ZW5lcnMgd2lsbCByZWNlaXZlIGEgXCJwYXRjaGVkXCIgZXZlbnQgb2JqZWN0LiBTdWNoIGV2ZW50IG9iamVjdFxuICogY29udGFpbnMgbm9ybWFsaXplZCB2YWx1ZXMgZm9yIGNlcnRhaW4gZXZlbnQgcHJvcGVydGllcyB0aGF0IGRpZmZlcnMgaW5cbiAqIGRpZmZlcmVudCBicm93c2Vycy5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICogPHByZT5cbiAqIGdvb2cuZXZlbnRzLmxpc3RlbihteU5vZGUsICdjbGljaycsIGZ1bmN0aW9uKGUpIHsgYWxlcnQoJ3dvbycpIH0pO1xuICogZ29vZy5ldmVudHMubGlzdGVuKG15Tm9kZSwgJ21vdXNlb3ZlcicsIG1vdXNlSGFuZGxlciwgdHJ1ZSk7XG4gKiBnb29nLmV2ZW50cy51bmxpc3RlbihteU5vZGUsICdtb3VzZW92ZXInLCBtb3VzZUhhbmRsZXIsIHRydWUpO1xuICogZ29vZy5ldmVudHMucmVtb3ZlQWxsKG15Tm9kZSk7XG4gKiA8L3ByZT5cbiAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gSUUgYW5kIGV2ZW50IG9iamVjdCBwYXRjaGluZ11cbiAqIEBhdXRob3IgYXJ2QGdvb2dsZS5jb20gKEVyaWsgQXJ2aWRzc29uKVxuICpcbiAqIEBzZWUgLi4vZGVtb3MvZXZlbnRzLmh0bWxcbiAqIEBzZWUgLi4vZGVtb3MvZXZlbnQtcHJvcGFnYXRpb24uaHRtbFxuICogQHNlZSAuLi9kZW1vcy9zdG9wZXZlbnQuaHRtbFxuICovXG5cbi8vIElNUExFTUVOVEFUSU9OIE5PVEVTOlxuLy8gZ29vZy5ldmVudHMgc3RvcmVzIGFuIGF1eGlsaWFyeSBkYXRhIHN0cnVjdHVyZSBvbiBlYWNoIEV2ZW50VGFyZ2V0XG4vLyBzb3VyY2UgYmVpbmcgbGlzdGVuZWQgb24uIFRoaXMgYWxsb3dzIHVzIHRvIHRha2UgYWR2YW50YWdlIG9mIEdDLFxuLy8gaGF2aW5nIHRoZSBkYXRhIHN0cnVjdHVyZSBHQydkIHdoZW4gdGhlIEV2ZW50VGFyZ2V0IGlzIEdDJ2QuIFRoaXNcbi8vIEdDIGJlaGF2aW9yIGlzIGVxdWl2YWxlbnQgdG8gdXNpbmcgVzNDIERPTSBFdmVudHMgZGlyZWN0bHkuXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuQ2FwdHVyZVNpbXVsYXRpb25Nb2RlJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLktleScpO1xuZ29vZy5wcm92aWRlKCdnb29nLmV2ZW50cy5MaXN0ZW5hYmxlVHlwZScpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmRlYnVnLmVudHJ5UG9pbnRSZWdpc3RyeScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuQnJvd3NlckZlYXR1cmUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuTGlzdGVuYWJsZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cy5MaXN0ZW5lck1hcCcpO1xuXG5nb29nLmZvcndhcmREZWNsYXJlKCdnb29nLmRlYnVnLkVycm9ySGFuZGxlcicpO1xuZ29vZy5mb3J3YXJkRGVjbGFyZSgnZ29vZy5ldmVudHMuRXZlbnRXcmFwcGVyJyk7XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7bnVtYmVyfGdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXl9XG4gKi9cbmdvb2cuZXZlbnRzLktleTtcblxuXG4vKipcbiAqIEB0eXBlZGVmIHtFdmVudFRhcmdldHxnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfVxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlVHlwZTtcblxuXG4vKipcbiAqIFByb3BlcnR5IG5hbWUgb24gYSBuYXRpdmUgZXZlbnQgdGFyZ2V0IGZvciB0aGUgbGlzdGVuZXIgbWFwXG4gKiBhc3NvY2lhdGVkIHdpdGggdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfVxuICovXG5nb29nLmV2ZW50cy5MSVNURU5FUl9NQVBfUFJPUF8gPSAnY2xvc3VyZV9sbV8nICsgKChNYXRoLnJhbmRvbSgpICogMWU2KSB8IDApO1xuXG5cbi8qKlxuICogU3RyaW5nIHVzZWQgdG8gcHJlcGVuZCB0byBJRSBldmVudCB0eXBlcy5cbiAqIEBjb25zdFxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ldmVudHMub25TdHJpbmdfID0gJ29uJztcblxuXG4vKipcbiAqIE1hcCBvZiBjb21wdXRlZCBcIm9uPGV2ZW50bmFtZT5cIiBzdHJpbmdzIGZvciBJRSBldmVudCB0eXBlcy4gQ2FjaGluZ1xuICogdGhpcyByZW1vdmVzIGFuIGV4dHJhIG9iamVjdCBhbGxvY2F0aW9uIGluIGdvb2cuZXZlbnRzLmxpc3RlbiB3aGljaFxuICogaW1wcm92ZXMgSUU2IHBlcmZvcm1hbmNlLlxuICogQGNvbnN0XG4gKiBAZGljdFxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ldmVudHMub25TdHJpbmdNYXBfID0ge307XG5cblxuLyoqXG4gKiBAZW51bSB7bnVtYmVyfSBEaWZmZXJlbnQgY2FwdHVyZSBzaW11bGF0aW9uIG1vZGUgZm9yIElFOC0uXG4gKi9cbmdvb2cuZXZlbnRzLkNhcHR1cmVTaW11bGF0aW9uTW9kZSA9IHtcbiAgLyoqXG4gICAqIERvZXMgbm90IHBlcmZvcm0gY2FwdHVyZSBzaW11bGF0aW9uLiBXaWxsIGFzc2VydHMgaW4gSUU4LSB3aGVuIHlvdVxuICAgKiBhZGQgY2FwdHVyZSBsaXN0ZW5lcnMuXG4gICAqL1xuICBPRkZfQU5EX0ZBSUw6IDAsXG5cbiAgLyoqXG4gICAqIERvZXMgbm90IHBlcmZvcm0gY2FwdHVyZSBzaW11bGF0aW9uLCBzaWxlbnRseSBpZ25vcmUgY2FwdHVyZVxuICAgKiBsaXN0ZW5lcnMuXG4gICAqL1xuICBPRkZfQU5EX1NJTEVOVDogMSxcblxuICAvKipcbiAgICogUGVyZm9ybXMgY2FwdHVyZSBzaW11bGF0aW9uLlxuICAgKi9cbiAgT046IDJcbn07XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtudW1iZXJ9IFRoZSBjYXB0dXJlIHNpbXVsYXRpb24gbW9kZSBmb3IgSUU4LS4gQnkgZGVmYXVsdCxcbiAqICAgICB0aGlzIGlzIE9OLlxuICovXG5nb29nLmRlZmluZSgnZ29vZy5ldmVudHMuQ0FQVFVSRV9TSU1VTEFUSU9OX01PREUnLCAyKTtcblxuXG4vKipcbiAqIEVzdGltYXRlZCBjb3VudCBvZiB0b3RhbCBuYXRpdmUgbGlzdGVuZXJzLlxuICogQHByaXZhdGUge251bWJlcn1cbiAqL1xuZ29vZy5ldmVudHMubGlzdGVuZXJDb3VudEVzdGltYXRlXyA9IDA7XG5cblxuLyoqXG4gKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIGZvciBhIHNwZWNpZmljIGV2ZW50IG9uIGEgbmF0aXZlIGV2ZW50XG4gKiB0YXJnZXQgKHN1Y2ggYXMgYSBET00gZWxlbWVudCkgb3IgYW4gb2JqZWN0IHRoYXQgaGFzIGltcGxlbWVudGVkXG4gKiB7QGxpbmsgZ29vZy5ldmVudHMuTGlzdGVuYWJsZX0uIEEgbGlzdGVuZXIgY2FuIG9ubHkgYmUgYWRkZWQgb25jZVxuICogdG8gYW4gb2JqZWN0IGFuZCBpZiBpdCBpcyBhZGRlZCBhZ2FpbiB0aGUga2V5IGZvciB0aGUgbGlzdGVuZXIgaXNcbiAqIHJldHVybmVkLiBOb3RlIHRoYXQgaWYgdGhlIGV4aXN0aW5nIGxpc3RlbmVyIGlzIGEgb25lLW9mZiBsaXN0ZW5lclxuICogKHJlZ2lzdGVyZWQgdmlhIGxpc3Rlbk9uY2UpLCBpdCB3aWxsIG5vIGxvbmdlciBiZSBhIG9uZS1vZmZcbiAqIGxpc3RlbmVyIGFmdGVyIGEgY2FsbCB0byBsaXN0ZW4oKS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9IHNyYyBUaGUgbm9kZSB0byBsaXN0ZW5cbiAqICAgICB0byBldmVudHMgb24uXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fFxuICogICAgICFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPnwhQXJyYXk8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+Pn1cbiAqICAgICB0eXBlIEV2ZW50IHR5cGUgb3IgYXJyYXkgb2YgZXZlbnQgdHlwZXMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VCwgRVZFTlRPQkopOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGx9XG4gKiAgICAgbGlzdGVuZXIgQ2FsbGJhY2sgbWV0aG9kLCBvciBhbiBvYmplY3Qgd2l0aCBhIGhhbmRsZUV2ZW50IGZ1bmN0aW9uLlxuICogICAgIFdBUk5JTkc6IHBhc3NpbmcgYW4gT2JqZWN0IGlzIG5vdyBzb2Z0bHkgZGVwcmVjYXRlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9jYXB0IFdoZXRoZXIgdG8gZmlyZSBpbiBjYXB0dXJlIHBoYXNlIChkZWZhdWx0cyB0b1xuICogICAgIGZhbHNlKS5cbiAqIEBwYXJhbSB7VD19IG9wdF9oYW5kbGVyIEVsZW1lbnQgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGUgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHtnb29nLmV2ZW50cy5LZXl9IFVuaXF1ZSBrZXkgZm9yIHRoZSBsaXN0ZW5lci5cbiAqIEB0ZW1wbGF0ZSBULEVWRU5UT0JKXG4gKi9cbmdvb2cuZXZlbnRzLmxpc3RlbiA9IGZ1bmN0aW9uKHNyYywgdHlwZSwgbGlzdGVuZXIsIG9wdF9jYXB0LCBvcHRfaGFuZGxlcikge1xuICBpZiAoZ29vZy5pc0FycmF5KHR5cGUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBnb29nLmV2ZW50cy5saXN0ZW4oc3JjLCB0eXBlW2ldLCBsaXN0ZW5lciwgb3B0X2NhcHQsIG9wdF9oYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsaXN0ZW5lciA9IGdvb2cuZXZlbnRzLndyYXBMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIGlmIChnb29nLmV2ZW50cy5MaXN0ZW5hYmxlLmlzSW1wbGVtZW50ZWRCeShzcmMpKSB7XG4gICAgcmV0dXJuIHNyYy5saXN0ZW4oXG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSAqLyAodHlwZSksXG4gICAgICAgIGxpc3RlbmVyLCBvcHRfY2FwdCwgb3B0X2hhbmRsZXIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnb29nLmV2ZW50cy5saXN0ZW5fKFxuICAgICAgICAvKiogQHR5cGUgeyFFdmVudFRhcmdldH0gKi8gKHNyYyksXG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSAqLyAodHlwZSksXG4gICAgICAgIGxpc3RlbmVyLCAvKiBjYWxsT25jZSAqLyBmYWxzZSwgb3B0X2NhcHQsIG9wdF9oYW5kbGVyKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIGEgc3BlY2lmaWMgZXZlbnQgb24gYSBuYXRpdmUgZXZlbnRcbiAqIHRhcmdldC4gQSBsaXN0ZW5lciBjYW4gb25seSBiZSBhZGRlZCBvbmNlIHRvIGFuIG9iamVjdCBhbmQgaWYgaXRcbiAqIGlzIGFkZGVkIGFnYWluIHRoZSBrZXkgZm9yIHRoZSBsaXN0ZW5lciBpcyByZXR1cm5lZC5cbiAqXG4gKiBOb3RlIHRoYXQgYSBvbmUtb2ZmIGxpc3RlbmVyIHdpbGwgbm90IGNoYW5nZSBhbiBleGlzdGluZyBsaXN0ZW5lcixcbiAqIGlmIGFueS4gT24gdGhlIG90aGVyIGhhbmQgYSBub3JtYWwgbGlzdGVuZXIgd2lsbCBjaGFuZ2UgZXhpc3RpbmdcbiAqIG9uZS1vZmYgbGlzdGVuZXIgdG8gYmVjb21lIGEgbm9ybWFsIGxpc3RlbmVyLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IHNyYyBUaGUgbm9kZSB0byBsaXN0ZW4gdG8gZXZlbnRzIG9uLlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWR9IHR5cGUgRXZlbnQgdHlwZS5cbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBsaXN0ZW5lciBDYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FsbE9uY2UgV2hldGhlciB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtb2ZmXG4gKiAgICAgbGlzdGVuZXIgb3Igb3RoZXJ3aXNlLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NhcHQgV2hldGhlciB0byBmaXJlIGluIGNhcHR1cmUgcGhhc2UgKGRlZmF1bHRzIHRvXG4gKiAgICAgZmFsc2UpLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfaGFuZGxlciBFbGVtZW50IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX0gVW5pcXVlIGtleSBmb3IgdGhlIGxpc3RlbmVyLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ldmVudHMubGlzdGVuXyA9IGZ1bmN0aW9uKFxuICAgIHNyYywgdHlwZSwgbGlzdGVuZXIsIGNhbGxPbmNlLCBvcHRfY2FwdCwgb3B0X2hhbmRsZXIpIHtcbiAgaWYgKCF0eXBlKSB7XG4gICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgZXZlbnQgdHlwZScpO1xuICB9XG5cbiAgdmFyIGNhcHR1cmUgPSAhIW9wdF9jYXB0O1xuICBpZiAoY2FwdHVyZSAmJiAhZ29vZy5ldmVudHMuQnJvd3NlckZlYXR1cmUuSEFTX1czQ19FVkVOVF9TVVBQT1JUKSB7XG4gICAgaWYgKGdvb2cuZXZlbnRzLkNBUFRVUkVfU0lNVUxBVElPTl9NT0RFID09XG4gICAgICAgIGdvb2cuZXZlbnRzLkNhcHR1cmVTaW11bGF0aW9uTW9kZS5PRkZfQU5EX0ZBSUwpIHtcbiAgICAgIGdvb2cuYXNzZXJ0cy5mYWlsKCdDYW4gbm90IHJlZ2lzdGVyIGNhcHR1cmUgbGlzdGVuZXIgaW4gSUU4LS4nKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAoZ29vZy5ldmVudHMuQ0FQVFVSRV9TSU1VTEFUSU9OX01PREUgPT1cbiAgICAgICAgZ29vZy5ldmVudHMuQ2FwdHVyZVNpbXVsYXRpb25Nb2RlLk9GRl9BTkRfU0lMRU5UKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJNYXAgPSBnb29nLmV2ZW50cy5nZXRMaXN0ZW5lck1hcF8oc3JjKTtcbiAgaWYgKCFsaXN0ZW5lck1hcCkge1xuICAgIHNyY1tnb29nLmV2ZW50cy5MSVNURU5FUl9NQVBfUFJPUF9dID0gbGlzdGVuZXJNYXAgPVxuICAgICAgICBuZXcgZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAoc3JjKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lck9iaiA9IGxpc3RlbmVyTWFwLmFkZChcbiAgICAgIHR5cGUsIGxpc3RlbmVyLCBjYWxsT25jZSwgb3B0X2NhcHQsIG9wdF9oYW5kbGVyKTtcblxuICAvLyBJZiB0aGUgbGlzdGVuZXJPYmogYWxyZWFkeSBoYXMgYSBwcm94eSwgaXQgaGFzIGJlZW4gc2V0IHVwXG4gIC8vIHByZXZpb3VzbHkuIFdlIHNpbXBseSByZXR1cm4uXG4gIGlmIChsaXN0ZW5lck9iai5wcm94eSkge1xuICAgIHJldHVybiBsaXN0ZW5lck9iajtcbiAgfVxuXG4gIHZhciBwcm94eSA9IGdvb2cuZXZlbnRzLmdldFByb3h5KCk7XG4gIGxpc3RlbmVyT2JqLnByb3h5ID0gcHJveHk7XG5cbiAgcHJveHkuc3JjID0gc3JjO1xuICBwcm94eS5saXN0ZW5lciA9IGxpc3RlbmVyT2JqO1xuXG4gIC8vIEF0dGFjaCB0aGUgcHJveHkgdGhyb3VnaCB0aGUgYnJvd3NlcidzIEFQSVxuICBpZiAoc3JjLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICBzcmMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLnRvU3RyaW5nKCksIHByb3h5LCBjYXB0dXJlKTtcbiAgfSBlbHNlIGlmIChzcmMuYXR0YWNoRXZlbnQpIHtcbiAgICAvLyBUaGUgZWxzZSBpZiBhYm92ZSB1c2VkIHRvIGJlIGFuIHVuY29uZGl0aW9uYWwgZWxzZS4gSXQgd291bGQgY2FsbFxuICAgIC8vIGV4Y2VwdGlvbiBvbiBJRTExLCBzcG9pbGluZyB0aGUgZGF5IG9mIHNvbWUgY2FsbGVycy4gVGhlIHByZXZpb3VzXG4gICAgLy8gaW5jYXJuYXRpb24gb2YgdGhpcyBjb2RlLCBmcm9tIDIwMDcsIGluZGljYXRlcyB0aGF0IGl0IHJlcGxhY2VkIGFuXG4gICAgLy8gZWFybGllciBzdGlsbCB2ZXJzaW9uIHRoYXQgY2F1c2VkIGV4Y2VzcyBhbGxvY2F0aW9ucyBvbiBJRTYuXG4gICAgc3JjLmF0dGFjaEV2ZW50KGdvb2cuZXZlbnRzLmdldE9uU3RyaW5nXyh0eXBlLnRvU3RyaW5nKCkpLCBwcm94eSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgRXJyb3IoJ2FkZEV2ZW50TGlzdGVuZXIgYW5kIGF0dGFjaEV2ZW50IGFyZSB1bmF2YWlsYWJsZS4nKTtcbiAgfVxuXG4gIGdvb2cuZXZlbnRzLmxpc3RlbmVyQ291bnRFc3RpbWF0ZV8rKztcbiAgcmV0dXJuIGxpc3RlbmVyT2JqO1xufTtcblxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiBmb3IgcmV0dXJuaW5nIGEgcHJveHkgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHshRnVuY3Rpb259IEEgbmV3IG9yIHJldXNlZCBmdW5jdGlvbiBvYmplY3QuXG4gKi9cbmdvb2cuZXZlbnRzLmdldFByb3h5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwcm94eUNhbGxiYWNrRnVuY3Rpb24gPSBnb29nLmV2ZW50cy5oYW5kbGVCcm93c2VyRXZlbnRfO1xuICAvLyBVc2UgYSBsb2NhbCB2YXIgZiB0byBwcmV2ZW50IG9uZSBhbGxvY2F0aW9uLlxuICB2YXIgZiA9IGdvb2cuZXZlbnRzLkJyb3dzZXJGZWF0dXJlLkhBU19XM0NfRVZFTlRfU1VQUE9SVCA/XG4gICAgICBmdW5jdGlvbihldmVudE9iamVjdCkge1xuICAgICAgICByZXR1cm4gcHJveHlDYWxsYmFja0Z1bmN0aW9uLmNhbGwoZi5zcmMsIGYubGlzdGVuZXIsIGV2ZW50T2JqZWN0KTtcbiAgICAgIH0gOlxuICAgICAgZnVuY3Rpb24oZXZlbnRPYmplY3QpIHtcbiAgICAgICAgdmFyIHYgPSBwcm94eUNhbGxiYWNrRnVuY3Rpb24uY2FsbChmLnNyYywgZi5saXN0ZW5lciwgZXZlbnRPYmplY3QpO1xuICAgICAgICAvLyBOT1RFKGNocmlzaGVucnkpOiBJbiBJRSwgd2UgaGFjayBpbiBhIGNhcHR1cmUgcGhhc2UuIEhvd2V2ZXIsIGlmXG4gICAgICAgIC8vIHRoZXJlIGlzIGlubGluZSBldmVudCBoYW5kbGVyIHdoaWNoIHRyaWVzIHRvIHByZXZlbnQgZGVmYXVsdCAoZm9yXG4gICAgICAgIC8vIGV4YW1wbGUgPGEgaHJlZj1cIi4uLlwiIG9uY2xpY2s9XCJyZXR1cm4gZmFsc2VcIj4uLi48L2E+KSBpbiBhXG4gICAgICAgIC8vIGRlc2NlbmRhbnQgZWxlbWVudCwgdGhlIHByZXZlbnQgZGVmYXVsdCB3aWxsIGJlIG92ZXJyaWRkZW5cbiAgICAgICAgLy8gYnkgdGhpcyBsaXN0ZW5lciBpZiB0aGlzIGxpc3RlbmVyIHdlcmUgdG8gcmV0dXJuIHRydWUuIEhlbmNlLCB3ZVxuICAgICAgICAvLyByZXR1cm4gdW5kZWZpbmVkLlxuICAgICAgICBpZiAoIXYpIHJldHVybiB2O1xuICAgICAgfTtcbiAgcmV0dXJuIGY7XG59O1xuXG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciBmb3IgYSBzcGVjaWZpYyBldmVudCBvbiBhIG5hdGl2ZSBldmVudFxuICogdGFyZ2V0IChzdWNoIGFzIGEgRE9NIGVsZW1lbnQpIG9yIGFuIG9iamVjdCB0aGF0IGhhcyBpbXBsZW1lbnRlZFxuICoge0BsaW5rIGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9LiBBZnRlciB0aGUgZXZlbnQgaGFzIGZpcmVkIHRoZSBldmVudFxuICogbGlzdGVuZXIgaXMgcmVtb3ZlZCBmcm9tIHRoZSB0YXJnZXQuXG4gKlxuICogSWYgYW4gZXhpc3RpbmcgbGlzdGVuZXIgYWxyZWFkeSBleGlzdHMsIGxpc3Rlbk9uY2Ugd2lsbCBkb1xuICogbm90aGluZy4gSW4gcGFydGljdWxhciwgaWYgdGhlIGxpc3RlbmVyIHdhcyBwcmV2aW91c2x5IHJlZ2lzdGVyZWRcbiAqIHZpYSBsaXN0ZW4oKSwgbGlzdGVuT25jZSgpIHdpbGwgbm90IHR1cm4gdGhlIGxpc3RlbmVyIGludG8gYVxuICogb25lLW9mZiBsaXN0ZW5lci4gU2ltaWxhcmx5LCBpZiB0aGVyZSBpcyBhbHJlYWR5IGFuIGV4aXN0aW5nXG4gKiBvbmUtb2ZmIGxpc3RlbmVyLCBsaXN0ZW5PbmNlIGRvZXMgbm90IG1vZGlmeSB0aGUgbGlzdGVuZXJzIChpdCBpc1xuICogc3RpbGwgYSBvbmNlIGxpc3RlbmVyKS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9IHNyYyBUaGUgbm9kZSB0byBsaXN0ZW5cbiAqICAgICB0byBldmVudHMgb24uXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fFxuICogICAgICFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPnwhQXJyYXk8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+Pn1cbiAqICAgICB0eXBlIEV2ZW50IHR5cGUgb3IgYXJyYXkgb2YgZXZlbnQgdHlwZXMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VCwgRVZFTlRPQkopOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGx9XG4gKiAgICAgbGlzdGVuZXIgQ2FsbGJhY2sgbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NhcHQgRmlyZSBpbiBjYXB0dXJlIHBoYXNlPy5cbiAqIEBwYXJhbSB7VD19IG9wdF9oYW5kbGVyIEVsZW1lbnQgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGUgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHtnb29nLmV2ZW50cy5LZXl9IFVuaXF1ZSBrZXkgZm9yIHRoZSBsaXN0ZW5lci5cbiAqIEB0ZW1wbGF0ZSBULEVWRU5UT0JKXG4gKi9cbmdvb2cuZXZlbnRzLmxpc3Rlbk9uY2UgPSBmdW5jdGlvbihzcmMsIHR5cGUsIGxpc3RlbmVyLCBvcHRfY2FwdCwgb3B0X2hhbmRsZXIpIHtcbiAgaWYgKGdvb2cuaXNBcnJheSh0eXBlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGg7IGkrKykge1xuICAgICAgZ29vZy5ldmVudHMubGlzdGVuT25jZShzcmMsIHR5cGVbaV0sIGxpc3RlbmVyLCBvcHRfY2FwdCwgb3B0X2hhbmRsZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxpc3RlbmVyID0gZ29vZy5ldmVudHMud3JhcExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgaWYgKGdvb2cuZXZlbnRzLkxpc3RlbmFibGUuaXNJbXBsZW1lbnRlZEJ5KHNyYykpIHtcbiAgICByZXR1cm4gc3JjLmxpc3Rlbk9uY2UoXG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSAqLyAodHlwZSksXG4gICAgICAgIGxpc3RlbmVyLCBvcHRfY2FwdCwgb3B0X2hhbmRsZXIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnb29nLmV2ZW50cy5saXN0ZW5fKFxuICAgICAgICAvKiogQHR5cGUgeyFFdmVudFRhcmdldH0gKi8gKHNyYyksXG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSAqLyAodHlwZSksXG4gICAgICAgIGxpc3RlbmVyLCAvKiBjYWxsT25jZSAqLyB0cnVlLCBvcHRfY2FwdCwgb3B0X2hhbmRsZXIpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB3aXRoIGEgc3BlY2lmaWMgZXZlbnQgd3JhcHBlciBvbiBhIERPTSBOb2RlIG9yIGFuXG4gKiBvYmplY3QgdGhhdCBoYXMgaW1wbGVtZW50ZWQge0BsaW5rIGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9LiBBIGxpc3RlbmVyIGNhblxuICogb25seSBiZSBhZGRlZCBvbmNlIHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9IHNyYyBUaGUgdGFyZ2V0IHRvXG4gKiAgICAgbGlzdGVuIHRvIGV2ZW50cyBvbi5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuRXZlbnRXcmFwcGVyfSB3cmFwcGVyIEV2ZW50IHdyYXBwZXIgdG8gdXNlLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsID8pOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGx9IGxpc3RlbmVyXG4gKiAgICAgQ2FsbGJhY2sgbWV0aG9kLCBvciBhbiBvYmplY3Qgd2l0aCBhIGhhbmRsZUV2ZW50IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NhcHQgV2hldGhlciB0byBmaXJlIGluIGNhcHR1cmUgcGhhc2UgKGRlZmF1bHRzIHRvXG4gKiAgICAgZmFsc2UpLlxuICogQHBhcmFtIHtUPX0gb3B0X2hhbmRsZXIgRWxlbWVudCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lci5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuZXZlbnRzLmxpc3RlbldpdGhXcmFwcGVyID0gZnVuY3Rpb24oc3JjLCB3cmFwcGVyLCBsaXN0ZW5lciwgb3B0X2NhcHQsXG4gICAgb3B0X2hhbmRsZXIpIHtcbiAgd3JhcHBlci5saXN0ZW4oc3JjLCBsaXN0ZW5lciwgb3B0X2NhcHQsIG9wdF9oYW5kbGVyKTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyIHdoaWNoIHdhcyBhZGRlZCB3aXRoIGxpc3RlbigpLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8Z29vZy5ldmVudHMuTGlzdGVuYWJsZX0gc3JjIFRoZSB0YXJnZXQgdG8gc3RvcFxuICogICAgIGxpc3RlbmluZyB0byBldmVudHMgb24uXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fFxuICogICAgICFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPnwhQXJyYXk8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+Pn1cbiAqICAgICB0eXBlIEV2ZW50IHR5cGUgb3IgYXJyYXkgb2YgZXZlbnQgdHlwZXMgdG8gdW5saXN0ZW4gdG8uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGx9IGxpc3RlbmVyIFRoZVxuICogICAgIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHJlbW92ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9jYXB0IEluIERPTS1jb21wbGlhbnQgYnJvd3NlcnMsIHRoaXMgZGV0ZXJtaW5lc1xuICogICAgIHdoZXRoZXIgdGhlIGxpc3RlbmVyIGlzIGZpcmVkIGR1cmluZyB0aGUgY2FwdHVyZSBvciBidWJibGUgcGhhc2Ugb2YgdGhlXG4gKiAgICAgZXZlbnQuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9oYW5kbGVyIEVsZW1lbnQgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGUgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHs/Ym9vbGVhbn0gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBsaXN0ZW5lciB3YXMgdGhlcmUgdG8gcmVtb3ZlLlxuICogQHRlbXBsYXRlIEVWRU5UT0JKXG4gKi9cbmdvb2cuZXZlbnRzLnVubGlzdGVuID0gZnVuY3Rpb24oc3JjLCB0eXBlLCBsaXN0ZW5lciwgb3B0X2NhcHQsIG9wdF9oYW5kbGVyKSB7XG4gIGlmIChnb29nLmlzQXJyYXkodHlwZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGdvb2cuZXZlbnRzLnVubGlzdGVuKHNyYywgdHlwZVtpXSwgbGlzdGVuZXIsIG9wdF9jYXB0LCBvcHRfaGFuZGxlcik7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGlzdGVuZXIgPSBnb29nLmV2ZW50cy53cmFwTGlzdGVuZXIobGlzdGVuZXIpO1xuICBpZiAoZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5pc0ltcGxlbWVudGVkQnkoc3JjKSkge1xuICAgIHJldHVybiBzcmMudW5saXN0ZW4oXG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSAqLyAodHlwZSksXG4gICAgICAgIGxpc3RlbmVyLCBvcHRfY2FwdCwgb3B0X2hhbmRsZXIpO1xuICB9XG5cbiAgaWYgKCFzcmMpIHtcbiAgICAvLyBUT0RPKGNocmlzaGVucnkpOiBXZSBzaG91bGQgdGlnaHRlbiB0aGUgQVBJIHRvIG9ubHkgYWNjZXB0XG4gICAgLy8gbm9uLW51bGwgb2JqZWN0cywgb3IgYWRkIGFuIGFzc2VydGlvbiBoZXJlLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBjYXB0dXJlID0gISFvcHRfY2FwdDtcbiAgdmFyIGxpc3RlbmVyTWFwID0gZ29vZy5ldmVudHMuZ2V0TGlzdGVuZXJNYXBfKFxuICAgICAgLyoqIEB0eXBlIHshRXZlbnRUYXJnZXR9ICovIChzcmMpKTtcbiAgaWYgKGxpc3RlbmVyTWFwKSB7XG4gICAgdmFyIGxpc3RlbmVyT2JqID0gbGlzdGVuZXJNYXAuZ2V0TGlzdGVuZXIoXG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSAqLyAodHlwZSksXG4gICAgICAgIGxpc3RlbmVyLCBjYXB0dXJlLCBvcHRfaGFuZGxlcik7XG4gICAgaWYgKGxpc3RlbmVyT2JqKSB7XG4gICAgICByZXR1cm4gZ29vZy5ldmVudHMudW5saXN0ZW5CeUtleShsaXN0ZW5lck9iaik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIgd2hpY2ggd2FzIGFkZGVkIHdpdGggbGlzdGVuKCkgYnkgdGhlIGtleVxuICogcmV0dXJuZWQgYnkgbGlzdGVuKCkuXG4gKlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5LZXl9IGtleSBUaGUga2V5IHJldHVybmVkIGJ5IGxpc3RlbigpIGZvciB0aGlzXG4gKiAgICAgZXZlbnQgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHtib29sZWFufSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGxpc3RlbmVyIHdhcyB0aGVyZSB0byByZW1vdmUuXG4gKi9cbmdvb2cuZXZlbnRzLnVubGlzdGVuQnlLZXkgPSBmdW5jdGlvbihrZXkpIHtcbiAgLy8gVE9ETyhjaHJpc2hlbnJ5KTogUmVtb3ZlIHRoaXMgY2hlY2sgd2hlbiB0ZXN0cyB0aGF0IHJlbHkgb24gdGhpc1xuICAvLyBhcmUgZml4ZWQuXG4gIGlmIChnb29nLmlzTnVtYmVyKGtleSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBrZXk7XG4gIGlmICghbGlzdGVuZXIgfHwgbGlzdGVuZXIucmVtb3ZlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBzcmMgPSBsaXN0ZW5lci5zcmM7XG4gIGlmIChnb29nLmV2ZW50cy5MaXN0ZW5hYmxlLmlzSW1wbGVtZW50ZWRCeShzcmMpKSB7XG4gICAgcmV0dXJuIHNyYy51bmxpc3RlbkJ5S2V5KGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciB0eXBlID0gbGlzdGVuZXIudHlwZTtcbiAgdmFyIHByb3h5ID0gbGlzdGVuZXIucHJveHk7XG4gIGlmIChzcmMucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgIHNyYy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIHByb3h5LCBsaXN0ZW5lci5jYXB0dXJlKTtcbiAgfSBlbHNlIGlmIChzcmMuZGV0YWNoRXZlbnQpIHtcbiAgICBzcmMuZGV0YWNoRXZlbnQoZ29vZy5ldmVudHMuZ2V0T25TdHJpbmdfKHR5cGUpLCBwcm94eSk7XG4gIH1cbiAgZ29vZy5ldmVudHMubGlzdGVuZXJDb3VudEVzdGltYXRlXy0tO1xuXG4gIHZhciBsaXN0ZW5lck1hcCA9IGdvb2cuZXZlbnRzLmdldExpc3RlbmVyTWFwXyhcbiAgICAgIC8qKiBAdHlwZSB7IUV2ZW50VGFyZ2V0fSAqLyAoc3JjKSk7XG4gIC8vIFRPRE8oY2hyaXNoZW5yeSk6IFRyeSB0byByZW1vdmUgdGhpcyBjb25kaXRpb25hbCBhbmQgZXhlY3V0ZSB0aGVcbiAgLy8gZmlyc3QgYnJhbmNoIGFsd2F5cy4gVGhpcyBzaG91bGQgYmUgc2FmZS5cbiAgaWYgKGxpc3RlbmVyTWFwKSB7XG4gICAgbGlzdGVuZXJNYXAucmVtb3ZlQnlLZXkobGlzdGVuZXIpO1xuICAgIGlmIChsaXN0ZW5lck1hcC5nZXRUeXBlQ291bnQoKSA9PSAwKSB7XG4gICAgICAvLyBOdWxsIHRoZSBzcmMsIGp1c3QgYmVjYXVzZSB0aGlzIGlzIHNpbXBsZSB0byBkbyAoYW5kIHVzZWZ1bFxuICAgICAgLy8gZm9yIElFIDw9IDcpLlxuICAgICAgbGlzdGVuZXJNYXAuc3JjID0gbnVsbDtcbiAgICAgIC8vIFdlIGRvbid0IHVzZSBkZWxldGUgaGVyZSBiZWNhdXNlIElFIGRvZXMgbm90IGFsbG93IGRlbGV0ZVxuICAgICAgLy8gb24gYSB3aW5kb3cgb2JqZWN0LlxuICAgICAgc3JjW2dvb2cuZXZlbnRzLkxJU1RFTkVSX01BUF9QUk9QX10gPSBudWxsO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsaXN0ZW5lci5tYXJrQXNSZW1vdmVkKCk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyIHdoaWNoIHdhcyBhZGRlZCB3aXRoIGxpc3RlbldpdGhXcmFwcGVyKCkuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldHxnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfSBzcmMgVGhlIHRhcmdldCB0byBzdG9wXG4gKiAgICAgbGlzdGVuaW5nIHRvIGV2ZW50cyBvbi5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuRXZlbnRXcmFwcGVyfSB3cmFwcGVyIEV2ZW50IHdyYXBwZXIgdG8gdXNlLlxuICogQHBhcmFtIHtmdW5jdGlvbig/KTo/fHtoYW5kbGVFdmVudDpmdW5jdGlvbig/KTo/fXxudWxsfSBsaXN0ZW5lciBUaGVcbiAqICAgICBsaXN0ZW5lciBmdW5jdGlvbiB0byByZW1vdmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfY2FwdCBJbiBET00tY29tcGxpYW50IGJyb3dzZXJzLCB0aGlzIGRldGVybWluZXNcbiAqICAgICB3aGV0aGVyIHRoZSBsaXN0ZW5lciBpcyBmaXJlZCBkdXJpbmcgdGhlIGNhcHR1cmUgb3IgYnViYmxlIHBoYXNlIG9mIHRoZVxuICogICAgIGV2ZW50LlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfaGFuZGxlciBFbGVtZW50IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICovXG5nb29nLmV2ZW50cy51bmxpc3RlbldpdGhXcmFwcGVyID0gZnVuY3Rpb24oc3JjLCB3cmFwcGVyLCBsaXN0ZW5lciwgb3B0X2NhcHQsXG4gICAgb3B0X2hhbmRsZXIpIHtcbiAgd3JhcHBlci51bmxpc3RlbihzcmMsIGxpc3RlbmVyLCBvcHRfY2FwdCwgb3B0X2hhbmRsZXIpO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBmcm9tIGFuIG9iamVjdC4gWW91IGNhbiBhbHNvIG9wdGlvbmFsbHlcbiAqIHJlbW92ZSBsaXN0ZW5lcnMgb2YgYSBwYXJ0aWN1bGFyIHR5cGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8dW5kZWZpbmVkfSBvYmogT2JqZWN0IHRvIHJlbW92ZSBsaXN0ZW5lcnMgZnJvbS4gTXVzdCBiZSBhblxuICogICAgIEV2ZW50VGFyZ2V0IG9yIGEgZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5cbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkPX0gb3B0X3R5cGUgVHlwZSBvZiBldmVudCB0byByZW1vdmUuXG4gKiAgICAgRGVmYXVsdCBpcyBhbGwgdHlwZXMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IE51bWJlciBvZiBsaXN0ZW5lcnMgcmVtb3ZlZC5cbiAqL1xuZ29vZy5ldmVudHMucmVtb3ZlQWxsID0gZnVuY3Rpb24ob2JqLCBvcHRfdHlwZSkge1xuICAvLyBUT0RPKGNocmlzaGVucnkpOiBDaGFuZ2UgdGhlIHR5cGUgb2Ygb2JqIHRvXG4gIC8vICghRXZlbnRUYXJnZXR8IWdvb2cuZXZlbnRzLkxpc3RlbmFibGUpLlxuXG4gIGlmICghb2JqKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5pc0ltcGxlbWVudGVkQnkob2JqKSkge1xuICAgIHJldHVybiBvYmoucmVtb3ZlQWxsTGlzdGVuZXJzKG9wdF90eXBlKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lck1hcCA9IGdvb2cuZXZlbnRzLmdldExpc3RlbmVyTWFwXyhcbiAgICAgIC8qKiBAdHlwZSB7IUV2ZW50VGFyZ2V0fSAqLyAob2JqKSk7XG4gIGlmICghbGlzdGVuZXJNYXApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBjb3VudCA9IDA7XG4gIHZhciB0eXBlU3RyID0gb3B0X3R5cGUgJiYgb3B0X3R5cGUudG9TdHJpbmcoKTtcbiAgZm9yICh2YXIgdHlwZSBpbiBsaXN0ZW5lck1hcC5saXN0ZW5lcnMpIHtcbiAgICBpZiAoIXR5cGVTdHIgfHwgdHlwZSA9PSB0eXBlU3RyKSB7XG4gICAgICAvLyBDbG9uZSBzbyB0aGF0IHdlIGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdW5saXN0ZW5CeUtleVxuICAgICAgLy8gY2hhbmdpbmcgdGhlIGNvbnRlbnQgb2YgdGhlIExpc3RlbmVyTWFwLlxuICAgICAgdmFyIGxpc3RlbmVycyA9IGxpc3RlbmVyTWFwLmxpc3RlbmVyc1t0eXBlXS5jb25jYXQoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChnb29nLmV2ZW50cy51bmxpc3RlbkJ5S2V5KGxpc3RlbmVyc1tpXSkpIHtcbiAgICAgICAgICArK2NvdW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjb3VudDtcbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0ZW5lcnMgZm9yIGEgZ2l2ZW4gb2JqZWN0LCB0eXBlIGFuZCBjYXB0dXJlIHBoYXNlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogT2JqZWN0IHRvIGdldCBsaXN0ZW5lcnMgZm9yLlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWR9IHR5cGUgRXZlbnQgdHlwZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FwdHVyZSBDYXB0dXJlIHBoYXNlPy5cbiAqIEByZXR1cm4ge0FycmF5PGdvb2cuZXZlbnRzLkxpc3RlbmVyPn0gQXJyYXkgb2YgbGlzdGVuZXIgb2JqZWN0cy5cbiAqL1xuZ29vZy5ldmVudHMuZ2V0TGlzdGVuZXJzID0gZnVuY3Rpb24ob2JqLCB0eXBlLCBjYXB0dXJlKSB7XG4gIGlmIChnb29nLmV2ZW50cy5MaXN0ZW5hYmxlLmlzSW1wbGVtZW50ZWRCeShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5nZXRMaXN0ZW5lcnModHlwZSwgY2FwdHVyZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIC8vIFRPRE8oY2hyaXNoZW5yeSk6IFdlIHNob3VsZCB0aWdodGVuIHRoZSBBUEkgdG8gYWNjZXB0XG4gICAgICAvLyAhRXZlbnRUYXJnZXR8Z29vZy5ldmVudHMuTGlzdGVuYWJsZSwgYW5kIGFkZCBhbiBhc3NlcnRpb24gaGVyZS5cbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJNYXAgPSBnb29nLmV2ZW50cy5nZXRMaXN0ZW5lck1hcF8oXG4gICAgICAgIC8qKiBAdHlwZSB7IUV2ZW50VGFyZ2V0fSAqLyAob2JqKSk7XG4gICAgcmV0dXJuIGxpc3RlbmVyTWFwID8gbGlzdGVuZXJNYXAuZ2V0TGlzdGVuZXJzKHR5cGUsIGNhcHR1cmUpIDogW107XG4gIH1cbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBnb29nLmV2ZW50cy5MaXN0ZW5lciBmb3IgdGhlIGV2ZW50IG9yIG51bGwgaWYgbm8gc3VjaCBsaXN0ZW5lciBpc1xuICogaW4gdXNlLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8Z29vZy5ldmVudHMuTGlzdGVuYWJsZX0gc3JjIFRoZSB0YXJnZXQgZnJvbVxuICogICAgIHdoaWNoIHRvIGdldCBsaXN0ZW5lcnMuXG4gKiBAcGFyYW0gez9zdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+fSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRVZFTlRPQkopOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGx9IGxpc3RlbmVyIFRoZVxuICogICAgIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIGdldC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9jYXB0IEluIERPTS1jb21wbGlhbnQgYnJvd3NlcnMsIHRoaXMgZGV0ZXJtaW5lc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hldGhlciB0aGUgbGlzdGVuZXIgaXMgZmlyZWQgZHVyaW5nIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwdHVyZSBvciBidWJibGUgcGhhc2Ugb2YgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfaGFuZGxlciBFbGVtZW50IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX0gdGhlIGZvdW5kIGxpc3RlbmVyIG9yIG51bGwgaWYgbm90IGZvdW5kLlxuICogQHRlbXBsYXRlIEVWRU5UT0JKXG4gKi9cbmdvb2cuZXZlbnRzLmdldExpc3RlbmVyID0gZnVuY3Rpb24oc3JjLCB0eXBlLCBsaXN0ZW5lciwgb3B0X2NhcHQsIG9wdF9oYW5kbGVyKSB7XG4gIC8vIFRPRE8oY2hyaXNoZW5yeSk6IENoYW5nZSB0eXBlIGZyb20gP3N0cmluZyB0byBzdHJpbmcsIG9yIGFkZCBhc3NlcnRpb24uXG4gIHR5cGUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHR5cGUpO1xuICBsaXN0ZW5lciA9IGdvb2cuZXZlbnRzLndyYXBMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIHZhciBjYXB0dXJlID0gISFvcHRfY2FwdDtcbiAgaWYgKGdvb2cuZXZlbnRzLkxpc3RlbmFibGUuaXNJbXBsZW1lbnRlZEJ5KHNyYykpIHtcbiAgICByZXR1cm4gc3JjLmdldExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlLCBvcHRfaGFuZGxlcik7XG4gIH1cblxuICBpZiAoIXNyYykge1xuICAgIC8vIFRPRE8oY2hyaXNoZW5yeSk6IFdlIHNob3VsZCB0aWdodGVuIHRoZSBBUEkgdG8gb25seSBhY2NlcHRcbiAgICAvLyBub24tbnVsbCBvYmplY3RzLCBvciBhZGQgYW4gYXNzZXJ0aW9uIGhlcmUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJNYXAgPSBnb29nLmV2ZW50cy5nZXRMaXN0ZW5lck1hcF8oXG4gICAgICAvKiogQHR5cGUgeyFFdmVudFRhcmdldH0gKi8gKHNyYykpO1xuICBpZiAobGlzdGVuZXJNYXApIHtcbiAgICByZXR1cm4gbGlzdGVuZXJNYXAuZ2V0TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUsIG9wdF9oYW5kbGVyKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgYW4gZXZlbnQgdGFyZ2V0IGhhcyBhbnkgYWN0aXZlIGxpc3RlbmVycyBtYXRjaGluZyB0aGVcbiAqIHNwZWNpZmllZCBzaWduYXR1cmUuIElmIGVpdGhlciB0aGUgdHlwZSBvciBjYXB0dXJlIHBhcmFtZXRlcnMgYXJlXG4gKiB1bnNwZWNpZmllZCwgdGhlIGZ1bmN0aW9uIHdpbGwgbWF0Y2ggb24gdGhlIHJlbWFpbmluZyBjcml0ZXJpYS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9IG9iaiBUYXJnZXQgdG8gZ2V0XG4gKiAgICAgbGlzdGVuZXJzIGZvci5cbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkPX0gb3B0X3R5cGUgRXZlbnQgdHlwZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9jYXB0dXJlIFdoZXRoZXIgdG8gY2hlY2sgZm9yIGNhcHR1cmUgb3IgYnViYmxlLXBoYXNlXG4gKiAgICAgbGlzdGVuZXJzLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhbiBldmVudCB0YXJnZXQgaGFzIG9uZSBvciBtb3JlIGxpc3RlbmVycyBtYXRjaGluZ1xuICogICAgIHRoZSByZXF1ZXN0ZWQgdHlwZSBhbmQvb3IgY2FwdHVyZSBwaGFzZS5cbiAqL1xuZ29vZy5ldmVudHMuaGFzTGlzdGVuZXIgPSBmdW5jdGlvbihvYmosIG9wdF90eXBlLCBvcHRfY2FwdHVyZSkge1xuICBpZiAoZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5pc0ltcGxlbWVudGVkQnkob2JqKSkge1xuICAgIHJldHVybiBvYmouaGFzTGlzdGVuZXIob3B0X3R5cGUsIG9wdF9jYXB0dXJlKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lck1hcCA9IGdvb2cuZXZlbnRzLmdldExpc3RlbmVyTWFwXyhcbiAgICAgIC8qKiBAdHlwZSB7IUV2ZW50VGFyZ2V0fSAqLyAob2JqKSk7XG4gIHJldHVybiAhIWxpc3RlbmVyTWFwICYmIGxpc3RlbmVyTWFwLmhhc0xpc3RlbmVyKG9wdF90eXBlLCBvcHRfY2FwdHVyZSk7XG59O1xuXG5cbi8qKlxuICogUHJvdmlkZXMgYSBuaWNlIHN0cmluZyBzaG93aW5nIHRoZSBub3JtYWxpemVkIGV2ZW50IG9iamVjdHMgcHVibGljIG1lbWJlcnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBlIEV2ZW50IE9iamVjdC5cbiAqIEByZXR1cm4ge3N0cmluZ30gU3RyaW5nIG9mIHRoZSBwdWJsaWMgbWVtYmVycyBvZiB0aGUgbm9ybWFsaXplZCBldmVudCBvYmplY3QuXG4gKi9cbmdvb2cuZXZlbnRzLmV4cG9zZSA9IGZ1bmN0aW9uKGUpIHtcbiAgdmFyIHN0ciA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gZSkge1xuICAgIGlmIChlW2tleV0gJiYgZVtrZXldLmlkKSB7XG4gICAgICBzdHIucHVzaChrZXkgKyAnID0gJyArIGVba2V5XSArICcgKCcgKyBlW2tleV0uaWQgKyAnKScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIucHVzaChrZXkgKyAnID0gJyArIGVba2V5XSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHIuam9pbignXFxuJyk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyB3aXRoIG9uIHByZXBlbmRlZCB0byB0aGUgc3BlY2lmaWVkIHR5cGUuIFRoaXMgaXMgdXNlZCBmb3IgSUVcbiAqIHdoaWNoIGV4cGVjdHMgXCJvblwiIHRvIGJlIHByZXBlbmRlZC4gVGhpcyBmdW5jdGlvbiBjYWNoZXMgdGhlIHN0cmluZyBpbiBvcmRlclxuICogdG8gYXZvaWQgZXh0cmEgYWxsb2NhdGlvbnMgaW4gc3RlYWR5IHN0YXRlLlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgRXZlbnQgdHlwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHR5cGUgc3RyaW5nIHdpdGggJ29uJyBwcmVwZW5kZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5nZXRPblN0cmluZ18gPSBmdW5jdGlvbih0eXBlKSB7XG4gIGlmICh0eXBlIGluIGdvb2cuZXZlbnRzLm9uU3RyaW5nTWFwXykge1xuICAgIHJldHVybiBnb29nLmV2ZW50cy5vblN0cmluZ01hcF9bdHlwZV07XG4gIH1cbiAgcmV0dXJuIGdvb2cuZXZlbnRzLm9uU3RyaW5nTWFwX1t0eXBlXSA9IGdvb2cuZXZlbnRzLm9uU3RyaW5nXyArIHR5cGU7XG59O1xuXG5cbi8qKlxuICogRmlyZXMgYW4gb2JqZWN0J3MgbGlzdGVuZXJzIG9mIGEgcGFydGljdWxhciB0eXBlIGFuZCBwaGFzZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogT2JqZWN0IHdob3NlIGxpc3RlbmVycyB0byBjYWxsLlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWR9IHR5cGUgRXZlbnQgdHlwZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FwdHVyZSBXaGljaCBldmVudCBwaGFzZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBldmVudE9iamVjdCBFdmVudCBvYmplY3QgdG8gYmUgcGFzc2VkIHRvIGxpc3RlbmVyLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbGwgbGlzdGVuZXJzIHJldHVybmVkIHRydWUgZWxzZSBmYWxzZS5cbiAqL1xuZ29vZy5ldmVudHMuZmlyZUxpc3RlbmVycyA9IGZ1bmN0aW9uKG9iaiwgdHlwZSwgY2FwdHVyZSwgZXZlbnRPYmplY3QpIHtcbiAgaWYgKGdvb2cuZXZlbnRzLkxpc3RlbmFibGUuaXNJbXBsZW1lbnRlZEJ5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqLmZpcmVMaXN0ZW5lcnModHlwZSwgY2FwdHVyZSwgZXZlbnRPYmplY3QpO1xuICB9XG5cbiAgcmV0dXJuIGdvb2cuZXZlbnRzLmZpcmVMaXN0ZW5lcnNfKG9iaiwgdHlwZSwgY2FwdHVyZSwgZXZlbnRPYmplY3QpO1xufTtcblxuXG4vKipcbiAqIEZpcmVzIGFuIG9iamVjdCdzIGxpc3RlbmVycyBvZiBhIHBhcnRpY3VsYXIgdHlwZSBhbmQgcGhhc2UuXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIE9iamVjdCB3aG9zZSBsaXN0ZW5lcnMgdG8gY2FsbC5cbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSB0eXBlIEV2ZW50IHR5cGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNhcHR1cmUgV2hpY2ggZXZlbnQgcGhhc2UuXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnRPYmplY3QgRXZlbnQgb2JqZWN0IHRvIGJlIHBhc3NlZCB0byBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYWxsIGxpc3RlbmVycyByZXR1cm5lZCB0cnVlIGVsc2UgZmFsc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5maXJlTGlzdGVuZXJzXyA9IGZ1bmN0aW9uKG9iaiwgdHlwZSwgY2FwdHVyZSwgZXZlbnRPYmplY3QpIHtcbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICB2YXIgcmV0dmFsID0gdHJ1ZTtcblxuICB2YXIgbGlzdGVuZXJNYXAgPSBnb29nLmV2ZW50cy5nZXRMaXN0ZW5lck1hcF8oXG4gICAgICAvKiogQHR5cGUge0V2ZW50VGFyZ2V0fSAqLyAob2JqKSk7XG4gIGlmIChsaXN0ZW5lck1hcCkge1xuICAgIC8vIFRPRE8oY2hyaXNoZW5yeSk6IE9yaWdpbmFsIGNvZGUgYXZvaWRzIGFycmF5IGNyZWF0aW9uIHdoZW4gdGhlcmVcbiAgICAvLyBpcyBubyBsaXN0ZW5lciwgc28gd2UgZG8gdGhlIHNhbWUuIElmIHRoaXMgb3B0aW1pemF0aW9uIHR1cm5zXG4gICAgLy8gb3V0IHRvIGJlIG5vdCByZXF1aXJlZCwgd2UgY2FuIHJlcGxhY2UgdGhpcyB3aXRoXG4gICAgLy8gbGlzdGVuZXJNYXAuZ2V0TGlzdGVuZXJzKHR5cGUsIGNhcHR1cmUpIGluc3RlYWQsIHdoaWNoIGlzIHNpbXBsZXIuXG4gICAgdmFyIGxpc3RlbmVyQXJyYXkgPSBsaXN0ZW5lck1hcC5saXN0ZW5lcnNbdHlwZS50b1N0cmluZygpXTtcbiAgICBpZiAobGlzdGVuZXJBcnJheSkge1xuICAgICAgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyQXJyYXkuY29uY2F0KCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVyQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJBcnJheVtpXTtcbiAgICAgICAgLy8gV2UgbWlnaHQgbm90IGhhdmUgYSBsaXN0ZW5lciBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG4gICAgICAgIGlmIChsaXN0ZW5lciAmJiBsaXN0ZW5lci5jYXB0dXJlID09IGNhcHR1cmUgJiYgIWxpc3RlbmVyLnJlbW92ZWQpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZ29vZy5ldmVudHMuZmlyZUxpc3RlbmVyKGxpc3RlbmVyLCBldmVudE9iamVjdCk7XG4gICAgICAgICAgcmV0dmFsID0gcmV0dmFsICYmIChyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0dmFsO1xufTtcblxuXG4vKipcbiAqIEZpcmVzIGEgbGlzdGVuZXIgd2l0aCBhIHNldCBvZiBhcmd1bWVudHNcbiAqXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkxpc3RlbmVyfSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgb2JqZWN0IHRvIGNhbGwuXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnRPYmplY3QgVGhlIGV2ZW50IG9iamVjdCB0byBwYXNzIHRvIHRoZSBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJlc3VsdCBvZiBsaXN0ZW5lci5cbiAqL1xuZ29vZy5ldmVudHMuZmlyZUxpc3RlbmVyID0gZnVuY3Rpb24obGlzdGVuZXIsIGV2ZW50T2JqZWN0KSB7XG4gIHZhciBsaXN0ZW5lckZuID0gbGlzdGVuZXIubGlzdGVuZXI7XG4gIHZhciBsaXN0ZW5lckhhbmRsZXIgPSBsaXN0ZW5lci5oYW5kbGVyIHx8IGxpc3RlbmVyLnNyYztcblxuICBpZiAobGlzdGVuZXIuY2FsbE9uY2UpIHtcbiAgICBnb29nLmV2ZW50cy51bmxpc3RlbkJ5S2V5KGxpc3RlbmVyKTtcbiAgfVxuICByZXR1cm4gbGlzdGVuZXJGbi5jYWxsKGxpc3RlbmVySGFuZGxlciwgZXZlbnRPYmplY3QpO1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIHRvdGFsIG51bWJlciBvZiBsaXN0ZW5lcnMgY3VycmVudGx5IGluIHRoZSBzeXN0ZW0uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IE51bWJlciBvZiBsaXN0ZW5lcnMuXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHJldHVybnMgZXN0aW1hdGVkIGNvdW50LCBub3cgdGhhdCBDbG9zdXJlIG5vIGxvbmdlclxuICogc3RvcmVzIGEgY2VudHJhbCBsaXN0ZW5lciByZWdpc3RyeS4gV2Ugc3RpbGwgcmV0dXJuIGFuIGVzdGltYXRpb25cbiAqIHRvIGtlZXAgZXhpc3RpbmcgbGlzdGVuZXItcmVsYXRlZCB0ZXN0cyBwYXNzaW5nLiBJbiB0aGUgbmVhciBmdXR1cmUsXG4gKiB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgcmVtb3ZlZC5cbiAqL1xuZ29vZy5ldmVudHMuZ2V0VG90YWxMaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmV2ZW50cy5saXN0ZW5lckNvdW50RXN0aW1hdGVfO1xufTtcblxuXG4vKipcbiAqIERpc3BhdGNoZXMgYW4gZXZlbnQgKG9yIGV2ZW50IGxpa2Ugb2JqZWN0KSBhbmQgY2FsbHMgYWxsIGxpc3RlbmVyc1xuICogbGlzdGVuaW5nIGZvciBldmVudHMgb2YgdGhpcyB0eXBlLiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQgaXMgZGVjaWRlZCBieSB0aGVcbiAqIHR5cGUgcHJvcGVydHkgb24gdGhlIGV2ZW50IG9iamVjdC5cbiAqXG4gKiBJZiBhbnkgb2YgdGhlIGxpc3RlbmVycyByZXR1cm5zIGZhbHNlIE9SIGNhbGxzIHByZXZlbnREZWZhdWx0IHRoZW4gdGhpc1xuICogZnVuY3Rpb24gd2lsbCByZXR1cm4gZmFsc2UuICBJZiBvbmUgb2YgdGhlIGNhcHR1cmUgbGlzdGVuZXJzIGNhbGxzXG4gKiBzdG9wUHJvcGFnYXRpb24sIHRoZW4gdGhlIGJ1YmJsZSBsaXN0ZW5lcnMgd29uJ3QgZmlyZS5cbiAqXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkxpc3RlbmFibGV9IHNyYyBUaGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5FdmVudExpa2V9IGUgRXZlbnQgb2JqZWN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gSWYgYW55b25lIGNhbGxlZCBwcmV2ZW50RGVmYXVsdCBvbiB0aGUgZXZlbnQgb2JqZWN0IChvclxuICogICAgIGlmIGFueSBvZiB0aGUgaGFuZGxlcnMgcmV0dXJucyBmYWxzZSkgdGhpcyB3aWxsIGFsc28gcmV0dXJuIGZhbHNlLlxuICogICAgIElmIHRoZXJlIGFyZSBubyBoYW5kbGVycywgb3IgaWYgYWxsIGhhbmRsZXJzIHJldHVybiB0cnVlLCB0aGlzIHJldHVybnNcbiAqICAgICB0cnVlLlxuICovXG5nb29nLmV2ZW50cy5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oc3JjLCBlKSB7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoXG4gICAgICBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlLmlzSW1wbGVtZW50ZWRCeShzcmMpLFxuICAgICAgJ0NhbiBub3QgdXNlIGdvb2cuZXZlbnRzLmRpc3BhdGNoRXZlbnQgd2l0aCAnICtcbiAgICAgICdub24tZ29vZy5ldmVudHMuTGlzdGVuYWJsZSBpbnN0YW5jZS4nKTtcbiAgcmV0dXJuIHNyYy5kaXNwYXRjaEV2ZW50KGUpO1xufTtcblxuXG4vKipcbiAqIEluc3RhbGxzIGV4Y2VwdGlvbiBwcm90ZWN0aW9uIGZvciB0aGUgYnJvd3NlciBldmVudCBlbnRyeSBwb2ludCB1c2luZyB0aGVcbiAqIGdpdmVuIGVycm9yIGhhbmRsZXIuXG4gKlxuICogQHBhcmFtIHtnb29nLmRlYnVnLkVycm9ySGFuZGxlcn0gZXJyb3JIYW5kbGVyIEVycm9yIGhhbmRsZXIgd2l0aCB3aGljaCB0b1xuICogICAgIHByb3RlY3QgdGhlIGVudHJ5IHBvaW50LlxuICovXG5nb29nLmV2ZW50cy5wcm90ZWN0QnJvd3NlckV2ZW50RW50cnlQb2ludCA9IGZ1bmN0aW9uKGVycm9ySGFuZGxlcikge1xuICBnb29nLmV2ZW50cy5oYW5kbGVCcm93c2VyRXZlbnRfID0gZXJyb3JIYW5kbGVyLnByb3RlY3RFbnRyeVBvaW50KFxuICAgICAgZ29vZy5ldmVudHMuaGFuZGxlQnJvd3NlckV2ZW50Xyk7XG59O1xuXG5cbi8qKlxuICogSGFuZGxlcyBhbiBldmVudCBhbmQgZGlzcGF0Y2hlcyBpdCB0byB0aGUgY29ycmVjdCBsaXN0ZW5lcnMuIFRoaXNcbiAqIGZ1bmN0aW9uIGlzIGEgcHJveHkgZm9yIHRoZSByZWFsIGxpc3RlbmVyIHRoZSB1c2VyIHNwZWNpZmllZC5cbiAqXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkxpc3RlbmVyfSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgb2JqZWN0LlxuICogQHBhcmFtIHtFdmVudD19IG9wdF9ldnQgT3B0aW9uYWwgZXZlbnQgb2JqZWN0IHRoYXQgZ2V0cyBwYXNzZWQgaW4gdmlhIHRoZVxuICogICAgIG5hdGl2ZSBldmVudCBoYW5kbGVycy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJlc3VsdCBvZiB0aGUgZXZlbnQgaGFuZGxlci5cbiAqIEB0aGlzIHtFdmVudFRhcmdldH0gVGhlIG9iamVjdCBvciBFbGVtZW50IHRoYXQgZmlyZWQgdGhlIGV2ZW50LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ldmVudHMuaGFuZGxlQnJvd3NlckV2ZW50XyA9IGZ1bmN0aW9uKGxpc3RlbmVyLCBvcHRfZXZ0KSB7XG4gIGlmIChsaXN0ZW5lci5yZW1vdmVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBTeW50aGVzaXplIGV2ZW50IHByb3BhZ2F0aW9uIGlmIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgVzNDXG4gIC8vIGV2ZW50IG1vZGVsLlxuICBpZiAoIWdvb2cuZXZlbnRzLkJyb3dzZXJGZWF0dXJlLkhBU19XM0NfRVZFTlRfU1VQUE9SVCkge1xuICAgIHZhciBpZUV2ZW50ID0gb3B0X2V2dCB8fFxuICAgICAgICAvKiogQHR5cGUge0V2ZW50fSAqLyAoZ29vZy5nZXRPYmplY3RCeU5hbWUoJ3dpbmRvdy5ldmVudCcpKTtcbiAgICB2YXIgZXZ0ID0gbmV3IGdvb2cuZXZlbnRzLkJyb3dzZXJFdmVudChpZUV2ZW50LCB0aGlzKTtcbiAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgdmFyIHJldHZhbCA9IHRydWU7XG5cbiAgICBpZiAoZ29vZy5ldmVudHMuQ0FQVFVSRV9TSU1VTEFUSU9OX01PREUgPT1cbiAgICAgICAgICAgIGdvb2cuZXZlbnRzLkNhcHR1cmVTaW11bGF0aW9uTW9kZS5PTikge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBub3QgbWFya2VkIHRoaXMgZXZlbnQgeWV0LCB3ZSBzaG91bGQgcGVyZm9ybSBjYXB0dXJlXG4gICAgICAvLyBzaW11bGF0aW9uLlxuICAgICAgaWYgKCFnb29nLmV2ZW50cy5pc01hcmtlZEllRXZlbnRfKGllRXZlbnQpKSB7XG4gICAgICAgIGdvb2cuZXZlbnRzLm1hcmtJZUV2ZW50XyhpZUV2ZW50KTtcblxuICAgICAgICB2YXIgYW5jZXN0b3JzID0gW107XG4gICAgICAgIGZvciAodmFyIHBhcmVudCA9IGV2dC5jdXJyZW50VGFyZ2V0OyBwYXJlbnQ7XG4gICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBhbmNlc3RvcnMucHVzaChwYXJlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmlyZSBjYXB0dXJlIGxpc3RlbmVycy5cbiAgICAgICAgdmFyIHR5cGUgPSBsaXN0ZW5lci50eXBlO1xuICAgICAgICBmb3IgKHZhciBpID0gYW5jZXN0b3JzLmxlbmd0aCAtIDE7ICFldnQucHJvcGFnYXRpb25TdG9wcGVkXyAmJiBpID49IDA7XG4gICAgICAgICAgICAgaS0tKSB7XG4gICAgICAgICAgZXZ0LmN1cnJlbnRUYXJnZXQgPSBhbmNlc3RvcnNbaV07XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGdvb2cuZXZlbnRzLmZpcmVMaXN0ZW5lcnNfKGFuY2VzdG9yc1tpXSwgdHlwZSwgdHJ1ZSwgZXZ0KTtcbiAgICAgICAgICByZXR2YWwgPSByZXR2YWwgJiYgcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmlyZSBidWJibGUgbGlzdGVuZXJzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSBjYW4gdGVjaG5pY2FsbHkgcmVseSBvbiBJRSB0byBwZXJmb3JtIGJ1YmJsZSBldmVudFxuICAgICAgICAvLyBwcm9wYWdhdGlvbi4gSG93ZXZlciwgaXQgdHVybnMgb3V0IHRoYXQgSUUgZmlyZXMgZXZlbnRzIGluXG4gICAgICAgIC8vIG9wcG9zaXRlIG9yZGVyIG9mIGF0dGFjaEV2ZW50IHJlZ2lzdHJhdGlvbiwgd2hpY2ggYnJva2VcbiAgICAgICAgLy8gc29tZSBjb2RlIGFuZCB0ZXN0cyB0aGF0IHJlbHkgb24gdGhlIG9yZGVyLiAoV2hpbGUgVzNDIERPTVxuICAgICAgICAvLyBMZXZlbCAyIEV2ZW50cyBUUiBsZWF2ZXMgdGhlIGV2ZW50IG9yZGVyaW5nIHVuc3BlY2lmaWVkLFxuICAgICAgICAvLyBtb2Rlcm4gYnJvd3NlcnMgYW5kIFczQyBET00gTGV2ZWwgMyBFdmVudHMgV29ya2luZyBEcmFmdFxuICAgICAgICAvLyBhY3R1YWxseSBzcGVjaWZ5IHRoZSBvcmRlciBhcyB0aGUgcmVnaXN0cmF0aW9uIG9yZGVyLilcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7ICFldnQucHJvcGFnYXRpb25TdG9wcGVkXyAmJiBpIDwgYW5jZXN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZXZ0LmN1cnJlbnRUYXJnZXQgPSBhbmNlc3RvcnNbaV07XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGdvb2cuZXZlbnRzLmZpcmVMaXN0ZW5lcnNfKGFuY2VzdG9yc1tpXSwgdHlwZSwgZmFsc2UsIGV2dCk7XG4gICAgICAgICAgcmV0dmFsID0gcmV0dmFsICYmIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR2YWwgPSBnb29nLmV2ZW50cy5maXJlTGlzdGVuZXIobGlzdGVuZXIsIGV2dCk7XG4gICAgfVxuICAgIHJldHVybiByZXR2YWw7XG4gIH1cblxuICAvLyBPdGhlcndpc2UsIHNpbXBseSBmaXJlIHRoZSBsaXN0ZW5lci5cbiAgcmV0dXJuIGdvb2cuZXZlbnRzLmZpcmVMaXN0ZW5lcihcbiAgICAgIGxpc3RlbmVyLCBuZXcgZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50KG9wdF9ldnQsIHRoaXMpKTtcbn07XG5cblxuLyoqXG4gKiBUaGlzIGlzIHVzZWQgdG8gbWFyayB0aGUgSUUgZXZlbnQgb2JqZWN0IHNvIHdlIGRvIG5vdCBkbyB0aGUgQ2xvc3VyZSBwYXNzXG4gKiB0d2ljZSBmb3IgYSBidWJibGluZyBldmVudC5cbiAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIElFIGJyb3dzZXIgZXZlbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5tYXJrSWVFdmVudF8gPSBmdW5jdGlvbihlKSB7XG4gIC8vIE9ubHkgdGhlIGtleUNvZGUgYW5kIHRoZSByZXR1cm5WYWx1ZSBjYW4gYmUgY2hhbmdlZC4gV2UgdXNlIGtleUNvZGUgZm9yXG4gIC8vIG5vbiBrZXlib2FyZCBldmVudHMuXG4gIC8vIGV2ZW50LnJldHVyblZhbHVlIGlzIGEgYml0IG1vcmUgdHJpY2t5LiBJdCBpcyB1bmRlZmluZWQgYnkgZGVmYXVsdC4gQVxuICAvLyBib29sZWFuIGZhbHNlIHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbi4gSW4gYSB3aW5kb3cub25iZWZvcmV1bmxvYWQgYW5kXG4gIC8vIHRoZSByZXR1cm5WYWx1ZSBpcyBub24gdW5kZWZpbmVkIGl0IHdpbGwgYmUgYWxlcnRlZC4gSG93ZXZlciwgd2Ugd2lsbCBvbmx5XG4gIC8vIG1vZGlmeSB0aGUgcmV0dXJuVmFsdWUgZm9yIGtleWJvYXJkIGV2ZW50cy4gV2UgY2FuIGdldCBhIHByb2JsZW0gaWYgbm9uXG4gIC8vIGNsb3N1cmUgZXZlbnRzIHNldHMgdGhlIGtleUNvZGUgb3IgdGhlIHJldHVyblZhbHVlXG5cbiAgdmFyIHVzZVJldHVyblZhbHVlID0gZmFsc2U7XG5cbiAgaWYgKGUua2V5Q29kZSA9PSAwKSB7XG4gICAgLy8gV2UgY2Fubm90IGNoYW5nZSB0aGUga2V5Q29kZSBpbiBjYXNlIHRoYXQgc3JjRWxlbWVudCBpcyBpbnB1dFt0eXBlPWZpbGVdLlxuICAgIC8vIFdlIGNvdWxkIHRlc3QgdGhhdCB0aGF0IGlzIHRoZSBjYXNlIGJ1dCB0aGF0IHdvdWxkIGFsbG9jYXRlIDMgb2JqZWN0cy5cbiAgICAvLyBJZiB3ZSB1c2UgdHJ5L2NhdGNoIHdlIHdpbGwgb25seSBhbGxvY2F0ZSBleHRyYSBvYmplY3RzIGluIHRoZSBjYXNlIG9mIGFcbiAgICAvLyBmYWlsdXJlLlxuICAgIC8qKiBAcHJlc2VydmVUcnkgKi9cbiAgICB0cnkge1xuICAgICAgZS5rZXlDb2RlID0gLTE7XG4gICAgICByZXR1cm47XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIHVzZVJldHVyblZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAodXNlUmV0dXJuVmFsdWUgfHxcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovIChlLnJldHVyblZhbHVlKSA9PSB1bmRlZmluZWQpIHtcbiAgICBlLnJldHVyblZhbHVlID0gdHJ1ZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFRoaXMgaXMgdXNlZCB0byBjaGVjayBpZiBhbiBJRSBldmVudCBoYXMgYWxyZWFkeSBiZWVuIGhhbmRsZWQgYnkgdGhlIENsb3N1cmVcbiAqIHN5c3RlbSBzbyB3ZSBkbyBub3QgZG8gdGhlIENsb3N1cmUgcGFzcyB0d2ljZSBmb3IgYSBidWJibGluZyBldmVudC5cbiAqIEBwYXJhbSB7RXZlbnR9IGUgIFRoZSBJRSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgb2JqZWN0IGhhcyBiZWVuIG1hcmtlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZXZlbnRzLmlzTWFya2VkSWVFdmVudF8gPSBmdW5jdGlvbihlKSB7XG4gIHJldHVybiBlLmtleUNvZGUgPCAwIHx8IGUucmV0dXJuVmFsdWUgIT0gdW5kZWZpbmVkO1xufTtcblxuXG4vKipcbiAqIENvdW50ZXIgdG8gY3JlYXRlIHVuaXF1ZSBldmVudCBpZHMuXG4gKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICovXG5nb29nLmV2ZW50cy51bmlxdWVJZENvdW50ZXJfID0gMDtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmlxdWUgZXZlbnQgaWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXIgVGhlIGlkZW50aWZpZXIuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgdW5pcXVlIGlkZW50aWZpZXIuXG4gKiBAaWRHZW5lcmF0b3JcbiAqL1xuZ29vZy5ldmVudHMuZ2V0VW5pcXVlSWQgPSBmdW5jdGlvbihpZGVudGlmaWVyKSB7XG4gIHJldHVybiBpZGVudGlmaWVyICsgJ18nICsgZ29vZy5ldmVudHMudW5pcXVlSWRDb3VudGVyXysrO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IHNyYyBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm4ge2dvb2cuZXZlbnRzLkxpc3RlbmVyTWFwfSBBIGxpc3RlbmVyIG1hcCBmb3IgdGhlIGdpdmVuXG4gKiAgICAgc291cmNlIG9iamVjdCwgb3IgbnVsbCBpZiBub25lIGV4aXN0cy5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZXZlbnRzLmdldExpc3RlbmVyTWFwXyA9IGZ1bmN0aW9uKHNyYykge1xuICB2YXIgbGlzdGVuZXJNYXAgPSBzcmNbZ29vZy5ldmVudHMuTElTVEVORVJfTUFQX1BST1BfXTtcbiAgLy8gSUUgc2VyaWFsaXplcyB0aGUgcHJvcGVydHkgYXMgd2VsbCAoZS5nLiB3aGVuIHNlcmlhbGl6aW5nIG91dGVyXG4gIC8vIEhUTUwpLiBTbyB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlIHZhbHVlIGlzIG9mIHRoZSBjb3JyZWN0IHR5cGUuXG4gIHJldHVybiBsaXN0ZW5lck1hcCBpbnN0YW5jZW9mIGdvb2cuZXZlbnRzLkxpc3RlbmVyTWFwID8gbGlzdGVuZXJNYXAgOiBudWxsO1xufTtcblxuXG4vKipcbiAqIEV4cGFuZG8gcHJvcGVydHkgZm9yIGxpc3RlbmVyIGZ1bmN0aW9uIHdyYXBwZXIgZm9yIE9iamVjdCB3aXRoXG4gKiBoYW5kbGVFdmVudC5cbiAqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfVxuICovXG5nb29nLmV2ZW50cy5MSVNURU5FUl9XUkFQUEVSX1BST1BfID0gJ19fY2xvc3VyZV9ldmVudHNfZm5fJyArXG4gICAgKChNYXRoLnJhbmRvbSgpICogMWU5KSA+Pj4gMCk7XG5cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIG9yIGFuXG4gKiAgICAgb2JqZWN0IHRoYXQgY29udGFpbnMgaGFuZGxlRXZlbnQgbWV0aG9kLlxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBFaXRoZXIgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIG9yIGEgZnVuY3Rpb24gdGhhdFxuICogICAgIGNhbGxzIG9iai5oYW5kbGVFdmVudC4gSWYgdGhlIHNhbWUgbGlzdGVuZXIgaXMgcGFzc2VkIHRvIHRoaXNcbiAqICAgICBmdW5jdGlvbiBtb3JlIHRoYW4gb25jZSwgdGhlIHNhbWUgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byBiZVxuICogICAgIHJldHVybmVkLlxuICovXG5nb29nLmV2ZW50cy53cmFwTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikge1xuICBnb29nLmFzc2VydHMuYXNzZXJ0KGxpc3RlbmVyLCAnTGlzdGVuZXIgY2FuIG5vdCBiZSBudWxsLicpO1xuXG4gIGlmIChnb29nLmlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyO1xuICB9XG5cbiAgZ29vZy5hc3NlcnRzLmFzc2VydChcbiAgICAgIGxpc3RlbmVyLmhhbmRsZUV2ZW50LCAnQW4gb2JqZWN0IGxpc3RlbmVyIG11c3QgaGF2ZSBoYW5kbGVFdmVudCBtZXRob2QuJyk7XG4gIGlmICghbGlzdGVuZXJbZ29vZy5ldmVudHMuTElTVEVORVJfV1JBUFBFUl9QUk9QX10pIHtcbiAgICBsaXN0ZW5lcltnb29nLmV2ZW50cy5MSVNURU5FUl9XUkFQUEVSX1BST1BfXSA9XG4gICAgICAgIGZ1bmN0aW9uKGUpIHsgcmV0dXJuIGxpc3RlbmVyLmhhbmRsZUV2ZW50KGUpOyB9O1xuICB9XG4gIHJldHVybiBsaXN0ZW5lcltnb29nLmV2ZW50cy5MSVNURU5FUl9XUkFQUEVSX1BST1BfXTtcbn07XG5cblxuLy8gUmVnaXN0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFuZGxlciBhcyBhbiBlbnRyeSBwb2ludCwgc28gdGhhdFxuLy8gaXQgY2FuIGJlIG1vbml0b3JlZCBmb3IgZXhjZXB0aW9uIGhhbmRsaW5nLCBldGMuXG5nb29nLmRlYnVnLmVudHJ5UG9pbnRSZWdpc3RyeS5yZWdpc3RlcihcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFGdW5jdGlvbik6ICFGdW5jdGlvbn0gdHJhbnNmb3JtZXIgVGhlIHRyYW5zZm9ybWluZ1xuICAgICAqICAgICBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbih0cmFuc2Zvcm1lcikge1xuICAgICAgZ29vZy5ldmVudHMuaGFuZGxlQnJvd3NlckV2ZW50XyA9IHRyYW5zZm9ybWVyKFxuICAgICAgICAgIGdvb2cuZXZlbnRzLmhhbmRsZUJyb3dzZXJFdmVudF8pO1xuICAgIH0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMDcgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBBIHV0aWxpdHkgY2xhc3MgZm9yIHJlcHJlc2VudGluZyB0d28tZGltZW5zaW9uYWwgc2l6ZXMuXG4gKiBAYXV0aG9yIGJyZW5uZW1hbkBnb29nbGUuY29tIChTaGF3biBCcmVubmVtYW4pXG4gKi9cblxuXG5nb29nLnByb3ZpZGUoJ2dvb2cubWF0aC5TaXplJyk7XG5cblxuXG4vKipcbiAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgc2l6ZXMgY29uc2lzdGluZyBvZiBhIHdpZHRoIGFuZCBoZWlnaHQuIFVuZGVmaW5lZFxuICogd2lkdGggYW5kIGhlaWdodCBzdXBwb3J0IGlzIGRlcHJlY2F0ZWQgYW5kIHJlc3VsdHMgaW4gY29tcGlsZXIgd2FybmluZy5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgSGVpZ2h0LlxuICogQHN0cnVjdFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmdvb2cubWF0aC5TaXplID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAvKipcbiAgICogV2lkdGhcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMud2lkdGggPSB3aWR0aDtcblxuICAvKipcbiAgICogSGVpZ2h0XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbn07XG5cblxuLyoqXG4gKiBDb21wYXJlcyBzaXplcyBmb3IgZXF1YWxpdHkuXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5TaXplfSBhIEEgU2l6ZS5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLlNpemV9IGIgQSBTaXplLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZmYgdGhlIHNpemVzIGhhdmUgZXF1YWwgd2lkdGhzIGFuZCBlcXVhbFxuICogICAgIGhlaWdodHMsIG9yIGlmIGJvdGggYXJlIG51bGwuXG4gKi9cbmdvb2cubWF0aC5TaXplLmVxdWFscyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgaWYgKGEgPT0gYikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICghYSB8fCAhYikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gYS53aWR0aCA9PSBiLndpZHRoICYmIGEuaGVpZ2h0ID09IGIuaGVpZ2h0O1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4geyFnb29nLm1hdGguU2l6ZX0gQSBuZXcgY29weSBvZiB0aGUgU2l6ZS5cbiAqL1xuZ29vZy5tYXRoLlNpemUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgZ29vZy5tYXRoLlNpemUodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xufTtcblxuXG5pZiAoZ29vZy5ERUJVRykge1xuICAvKipcbiAgICogUmV0dXJucyBhIG5pY2Ugc3RyaW5nIHJlcHJlc2VudGluZyBzaXplLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IEluIHRoZSBmb3JtICg1MCB4IDczKS5cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnb29nLm1hdGguU2l6ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJygnICsgdGhpcy53aWR0aCArICcgeCAnICsgdGhpcy5oZWlnaHQgKyAnKSc7XG4gIH07XG59XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBsb25nZXIgb2YgdGhlIHR3byBkaW1lbnNpb25zIGluIHRoZSBzaXplLlxuICovXG5nb29nLm1hdGguU2l6ZS5wcm90b3R5cGUuZ2V0TG9uZ2VzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5tYXgodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNob3J0ZXIgb2YgdGhlIHR3byBkaW1lbnNpb25zIGluIHRoZSBzaXplLlxuICovXG5nb29nLm1hdGguU2l6ZS5wcm90b3R5cGUuZ2V0U2hvcnRlc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE1hdGgubWluKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhcmVhIG9mIHRoZSBzaXplICh3aWR0aCAqIGhlaWdodCkuXG4gKi9cbmdvb2cubWF0aC5TaXplLnByb3RvdHlwZS5hcmVhID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLndpZHRoICogdGhpcy5oZWlnaHQ7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgcGVyaW1ldGVyIG9mIHRoZSBzaXplICh3aWR0aCArIGhlaWdodCkgKiAyLlxuICovXG5nb29nLm1hdGguU2l6ZS5wcm90b3R5cGUucGVyaW1ldGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAodGhpcy53aWR0aCArIHRoaXMuaGVpZ2h0KSAqIDI7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgcmF0aW8gb2YgdGhlIHNpemUncyB3aWR0aCB0byBpdHMgaGVpZ2h0LlxuICovXG5nb29nLm1hdGguU2l6ZS5wcm90b3R5cGUuYXNwZWN0UmF0aW8gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMud2lkdGggLyB0aGlzLmhlaWdodDtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzaXplIGhhcyB6ZXJvIGFyZWEsIGZhbHNlIGlmIGJvdGggZGltZW5zaW9uc1xuICogICAgIGFyZSBub24temVybyBudW1iZXJzLlxuICovXG5nb29nLm1hdGguU2l6ZS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMuYXJlYSgpO1xufTtcblxuXG4vKipcbiAqIENsYW1wcyB0aGUgd2lkdGggYW5kIGhlaWdodCBwYXJhbWV0ZXJzIHVwd2FyZCB0byBpbnRlZ2VyIHZhbHVlcy5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguU2l6ZX0gVGhpcyBzaXplIHdpdGggY2VpbCdkIGNvbXBvbmVudHMuXG4gKi9cbmdvb2cubWF0aC5TaXplLnByb3RvdHlwZS5jZWlsID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMud2lkdGggPSBNYXRoLmNlaWwodGhpcy53aWR0aCk7XG4gIHRoaXMuaGVpZ2h0ID0gTWF0aC5jZWlsKHRoaXMuaGVpZ2h0KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshZ29vZy5tYXRoLlNpemV9IHRhcmdldCBUaGUgdGFyZ2V0IHNpemUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoaXMgU2l6ZSBpcyB0aGUgc2FtZSBzaXplIG9yIHNtYWxsZXIgdGhhbiB0aGVcbiAqICAgICB0YXJnZXQgc2l6ZSBpbiBib3RoIGRpbWVuc2lvbnMuXG4gKi9cbmdvb2cubWF0aC5TaXplLnByb3RvdHlwZS5maXRzSW5zaWRlID0gZnVuY3Rpb24odGFyZ2V0KSB7XG4gIHJldHVybiB0aGlzLndpZHRoIDw9IHRhcmdldC53aWR0aCAmJiB0aGlzLmhlaWdodCA8PSB0YXJnZXQuaGVpZ2h0O1xufTtcblxuXG4vKipcbiAqIENsYW1wcyB0aGUgd2lkdGggYW5kIGhlaWdodCBwYXJhbWV0ZXJzIGRvd253YXJkIHRvIGludGVnZXIgdmFsdWVzLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5TaXplfSBUaGlzIHNpemUgd2l0aCBmbG9vcmVkIGNvbXBvbmVudHMuXG4gKi9cbmdvb2cubWF0aC5TaXplLnByb3RvdHlwZS5mbG9vciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLndpZHRoID0gTWF0aC5mbG9vcih0aGlzLndpZHRoKTtcbiAgdGhpcy5oZWlnaHQgPSBNYXRoLmZsb29yKHRoaXMuaGVpZ2h0KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogUm91bmRzIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IHBhcmFtZXRlcnMgdG8gaW50ZWdlciB2YWx1ZXMuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLlNpemV9IFRoaXMgc2l6ZSB3aXRoIHJvdW5kZWQgY29tcG9uZW50cy5cbiAqL1xuZ29vZy5tYXRoLlNpemUucHJvdG90eXBlLnJvdW5kID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMud2lkdGggPSBNYXRoLnJvdW5kKHRoaXMud2lkdGgpO1xuICB0aGlzLmhlaWdodCA9IE1hdGgucm91bmQodGhpcy5oZWlnaHQpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBTY2FsZXMgdGhpcyBzaXplIGJ5IHRoZSBnaXZlbiBzY2FsZSBmYWN0b3JzLiBUaGUgd2lkdGggYW5kIGhlaWdodCBhcmUgc2NhbGVkXG4gKiBieSB7QGNvZGUgc3h9IGFuZCB7QGNvZGUgb3B0X3N5fSByZXNwZWN0aXZlbHkuICBJZiB7QGNvZGUgb3B0X3N5fSBpcyBub3RcbiAqIGdpdmVuLCB0aGVuIHtAY29kZSBzeH0gaXMgdXNlZCBmb3IgYm90aCB0aGUgd2lkdGggYW5kIGhlaWdodC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzeCBUaGUgc2NhbGUgZmFjdG9yIHRvIHVzZSBmb3IgdGhlIHdpZHRoLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfc3kgVGhlIHNjYWxlIGZhY3RvciB0byB1c2UgZm9yIHRoZSBoZWlnaHQuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLlNpemV9IFRoaXMgU2l6ZSBvYmplY3QgYWZ0ZXIgc2NhbGluZy5cbiAqL1xuZ29vZy5tYXRoLlNpemUucHJvdG90eXBlLnNjYWxlID0gZnVuY3Rpb24oc3gsIG9wdF9zeSkge1xuICB2YXIgc3kgPSBnb29nLmlzTnVtYmVyKG9wdF9zeSkgPyBvcHRfc3kgOiBzeDtcbiAgdGhpcy53aWR0aCAqPSBzeDtcbiAgdGhpcy5oZWlnaHQgKj0gc3k7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIFVuaWZvcm1seSBzY2FsZXMgdGhlIHNpemUgdG8gcGVyZmVjdGx5IGNvdmVyIHRoZSBkaW1lbnNpb25zIG9mIGEgZ2l2ZW4gc2l6ZS5cbiAqIElmIHRoZSBzaXplIGlzIGFscmVhZHkgbGFyZ2VyIHRoYW4gdGhlIHRhcmdldCwgaXQgd2lsbCBiZSBzY2FsZWQgZG93biB0byB0aGVcbiAqIG1pbmltdW0gc2l6ZSBhdCB3aGljaCBpdCBzdGlsbCBjb3ZlcnMgdGhlIGVudGlyZSB0YXJnZXQuIFRoZSBvcmlnaW5hbCBhc3BlY3RcbiAqIHJhdGlvIHdpbGwgYmUgcHJlc2VydmVkLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYXNzdW1lcyB0aGF0IGJvdGggU2l6ZXMgY29udGFpbiBzdHJpY3RseSBwb3NpdGl2ZSBkaW1lbnNpb25zLlxuICogQHBhcmFtIHshZ29vZy5tYXRoLlNpemV9IHRhcmdldCBUaGUgdGFyZ2V0IHNpemUuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLlNpemV9IFRoaXMgU2l6ZSBvYmplY3QsIGFmdGVyIG9wdGlvbmFsIHNjYWxpbmcuXG4gKi9cbmdvb2cubWF0aC5TaXplLnByb3RvdHlwZS5zY2FsZVRvQ292ZXIgPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgdmFyIHMgPSB0aGlzLmFzcGVjdFJhdGlvKCkgPD0gdGFyZ2V0LmFzcGVjdFJhdGlvKCkgP1xuICAgICAgdGFyZ2V0LndpZHRoIC8gdGhpcy53aWR0aCA6XG4gICAgICB0YXJnZXQuaGVpZ2h0IC8gdGhpcy5oZWlnaHQ7XG5cbiAgcmV0dXJuIHRoaXMuc2NhbGUocyk7XG59O1xuXG5cbi8qKlxuICogVW5pZm9ybWx5IHNjYWxlcyB0aGUgc2l6ZSB0byBmaXQgaW5zaWRlIHRoZSBkaW1lbnNpb25zIG9mIGEgZ2l2ZW4gc2l6ZS4gVGhlXG4gKiBvcmlnaW5hbCBhc3BlY3QgcmF0aW8gd2lsbCBiZSBwcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgYm90aCBTaXplcyBjb250YWluIHN0cmljdGx5IHBvc2l0aXZlIGRpbWVuc2lvbnMuXG4gKiBAcGFyYW0geyFnb29nLm1hdGguU2l6ZX0gdGFyZ2V0IFRoZSB0YXJnZXQgc2l6ZS5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguU2l6ZX0gVGhpcyBTaXplIG9iamVjdCwgYWZ0ZXIgb3B0aW9uYWwgc2NhbGluZy5cbiAqL1xuZ29vZy5tYXRoLlNpemUucHJvdG90eXBlLnNjYWxlVG9GaXQgPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgdmFyIHMgPSB0aGlzLmFzcGVjdFJhdGlvKCkgPiB0YXJnZXQuYXNwZWN0UmF0aW8oKSA/XG4gICAgICB0YXJnZXQud2lkdGggLyB0aGlzLndpZHRoIDpcbiAgICAgIHRhcmdldC5oZWlnaHQgLyB0aGlzLmhlaWdodDtcblxuICByZXR1cm4gdGhpcy5zY2FsZShzKTtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAwOCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IE5hbWVzcGFjZSB3aXRoIGNyeXB0byByZWxhdGVkIGhlbHBlciBmdW5jdGlvbnMuXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLmNyeXB0Jyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hcnJheScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmFzc2VydHMnKTtcblxuXG4vKipcbiAqIFR1cm5zIGEgc3RyaW5nIGludG8gYW4gYXJyYXkgb2YgYnl0ZXM7IGEgXCJieXRlXCIgYmVpbmcgYSBKUyBudW1iZXIgaW4gdGhlXG4gKiByYW5nZSAwLTI1NS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHZhbHVlIHRvIGFycmlmeS5cbiAqIEByZXR1cm4geyFBcnJheTxudW1iZXI+fSBBcnJheSBvZiBudW1iZXJzIGNvcnJlc3BvbmRpbmcgdG8gdGhlXG4gKiAgICAgVUNTIGNoYXJhY3RlciBjb2RlcyBvZiBlYWNoIGNoYXJhY3RlciBpbiBzdHIuXG4gKi9cbmdvb2cuY3J5cHQuc3RyaW5nVG9CeXRlQXJyYXkgPSBmdW5jdGlvbihzdHIpIHtcbiAgdmFyIG91dHB1dCA9IFtdLCBwID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIHdoaWxlIChjID4gMHhmZikge1xuICAgICAgb3V0cHV0W3ArK10gPSBjICYgMHhmZjtcbiAgICAgIGMgPj49IDg7XG4gICAgfVxuICAgIG91dHB1dFtwKytdID0gYztcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuXG4vKipcbiAqIFR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxuICogY2hhcmFjdGVycyB0byB3aGljaCB0aGUgbnVtYmVycyBjb3JyZXNwb25kLlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBieXRlcyBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZyBjaGFyYWN0ZXJzLlxuICogQHJldHVybiB7c3RyaW5nfSBTdHJpbmdpZmljYXRpb24gb2YgdGhlIGFycmF5LlxuICovXG5nb29nLmNyeXB0LmJ5dGVBcnJheVRvU3RyaW5nID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIENIVU5LX1NJWkUgPSA4MTkyO1xuXG4gIC8vIFNwZWNpYWwtY2FzZSB0aGUgc2ltcGxlIGNhc2UgZm9yIHNwZWVkJ3Mgc2FrZS5cbiAgaWYgKGJ5dGVzLmxlbmd0aCA8PSBDSFVOS19TSVpFKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYnl0ZXMpO1xuICB9XG5cbiAgLy8gVGhlIHJlbWFpbmluZyBsb2dpYyBzcGxpdHMgY29udmVyc2lvbiBieSBjaHVua3Mgc2luY2VcbiAgLy8gRnVuY3Rpb24jYXBwbHkoKSBoYXMgYSBtYXhpbXVtIHBhcmFtZXRlciBjb3VudC5cbiAgLy8gU2VlIGRpc2N1c3Npb246IGh0dHA6Ly9nb28uZ2wvTHJXbVo5XG5cbiAgdmFyIHN0ciA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSBDSFVOS19TSVpFKSB7XG4gICAgdmFyIGNodW5rID0gZ29vZy5hcnJheS5zbGljZShieXRlcywgaSwgaSArIENIVU5LX1NJWkUpO1xuICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKTtcbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vKipcbiAqIFR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgaW50byB0aGUgaGV4IHN0cmluZyBnaXZlbiBieSB0aGUgY29uY2F0ZW5hdGlvbiBvZlxuICogdGhlIGhleCB2YWx1ZXMgdG8gd2hpY2ggdGhlIG51bWJlcnMgY29ycmVzcG9uZC5cbiAqIEBwYXJhbSB7VWludDhBcnJheXxBcnJheTxudW1iZXI+fSBhcnJheSBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZ1xuICogICAgIGNoYXJhY3RlcnMuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEhleCBzdHJpbmcuXG4gKi9cbmdvb2cuY3J5cHQuYnl0ZUFycmF5VG9IZXggPSBmdW5jdGlvbihhcnJheSkge1xuICByZXR1cm4gZ29vZy5hcnJheS5tYXAoYXJyYXksIGZ1bmN0aW9uKG51bUJ5dGUpIHtcbiAgICB2YXIgaGV4Qnl0ZSA9IG51bUJ5dGUudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiBoZXhCeXRlLmxlbmd0aCA+IDEgPyBoZXhCeXRlIDogJzAnICsgaGV4Qnl0ZTtcbiAgfSkuam9pbignJyk7XG59O1xuXG5cbi8qKlxuICogQ29udmVydHMgYSBoZXggc3RyaW5nIGludG8gYW4gaW50ZWdlciBhcnJheS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBoZXhTdHJpbmcgSGV4IHN0cmluZyBvZiAxNi1iaXQgaW50ZWdlcnMgKHR3byBjaGFyYWN0ZXJzXG4gKiAgICAgcGVyIGludGVnZXIpLlxuICogQHJldHVybiB7IUFycmF5PG51bWJlcj59IEFycmF5IG9mIHswLDI1NX0gaW50ZWdlcnMgZm9yIHRoZSBnaXZlbiBzdHJpbmcuXG4gKi9cbmdvb2cuY3J5cHQuaGV4VG9CeXRlQXJyYXkgPSBmdW5jdGlvbihoZXhTdHJpbmcpIHtcbiAgZ29vZy5hc3NlcnRzLmFzc2VydChoZXhTdHJpbmcubGVuZ3RoICUgMiA9PSAwLFxuICAgICAgICAgICAgICAgICAgICAgICdLZXkgc3RyaW5nIGxlbmd0aCBtdXN0IGJlIG11bHRpcGxlIG9mIDInKTtcbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhleFN0cmluZy5sZW5ndGg7IGkgKz0gMikge1xuICAgIGFyci5wdXNoKHBhcnNlSW50KGhleFN0cmluZy5zdWJzdHJpbmcoaSwgaSArIDIpLCAxNikpO1xuICB9XG4gIHJldHVybiBhcnI7XG59O1xuXG5cbi8qKlxuICogQ29udmVydHMgYSBKUyBzdHJpbmcgdG8gYSBVVEYtOCBcImJ5dGVcIiBhcnJheS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgMTYtYml0IHVuaWNvZGUgc3RyaW5nLlxuICogQHJldHVybiB7IUFycmF5PG51bWJlcj59IFVURi04IGJ5dGUgYXJyYXkuXG4gKi9cbmdvb2cuY3J5cHQuc3RyaW5nVG9VdGY4Qnl0ZUFycmF5ID0gZnVuY3Rpb24oc3RyKSB7XG4gIC8vIFRPRE8odXNlcik6IFVzZSBuYXRpdmUgaW1wbGVtZW50YXRpb25zIGlmL3doZW4gYXZhaWxhYmxlXG4gIHZhciBvdXQgPSBbXSwgcCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgb3V0W3ArK10gPSBjO1xuICAgIH0gZWxzZSBpZiAoYyA8IDIwNDgpIHtcbiAgICAgIG91dFtwKytdID0gKGMgPj4gNikgfCAxOTI7XG4gICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcbiAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xuICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBhIFVURi04IGJ5dGUgYXJyYXkgdG8gSmF2YVNjcmlwdCdzIDE2LWJpdCBVbmljb2RlLlxuICogQHBhcmFtIHtVaW50OEFycmF5fEFycmF5PG51bWJlcj59IGJ5dGVzIFVURi04IGJ5dGUgYXJyYXkuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IDE2LWJpdCBVbmljb2RlIHN0cmluZy5cbiAqL1xuZ29vZy5jcnlwdC51dGY4Qnl0ZUFycmF5VG9TdHJpbmcgPSBmdW5jdGlvbihieXRlcykge1xuICAvLyBUT0RPKHVzZXIpOiBVc2UgbmF0aXZlIGltcGxlbWVudGF0aW9ucyBpZi93aGVuIGF2YWlsYWJsZVxuICB2YXIgb3V0ID0gW10sIHBvcyA9IDAsIGMgPSAwO1xuICB3aGlsZSAocG9zIDwgYnl0ZXMubGVuZ3RoKSB7XG4gICAgdmFyIGMxID0gYnl0ZXNbcG9zKytdO1xuICAgIGlmIChjMSA8IDEyOCkge1xuICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMxKTtcbiAgICB9IGVsc2UgaWYgKGMxID4gMTkxICYmIGMxIDwgMjI0KSB7XG4gICAgICB2YXIgYzIgPSBieXRlc1twb3MrK107XG4gICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGMxICYgMzEpIDw8IDYgfCBjMiAmIDYzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGMyID0gYnl0ZXNbcG9zKytdO1xuICAgICAgdmFyIGMzID0gYnl0ZXNbcG9zKytdO1xuICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgICAgIChjMSAmIDE1KSA8PCAxMiB8IChjMiAmIDYzKSA8PCA2IHwgYzMgJiA2Myk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQuam9pbignJyk7XG59O1xuXG5cbi8qKlxuICogWE9SIHR3byBieXRlIGFycmF5cy5cbiAqIEBwYXJhbSB7IUFycmF5QnVmZmVyVmlld3whQXJyYXk8bnVtYmVyPn0gYnl0ZXMxIEJ5dGUgYXJyYXkgMS5cbiAqIEBwYXJhbSB7IUFycmF5QnVmZmVyVmlld3whQXJyYXk8bnVtYmVyPn0gYnl0ZXMyIEJ5dGUgYXJyYXkgMi5cbiAqIEByZXR1cm4geyFBcnJheTxudW1iZXI+fSBSZXN1bHRpbmcgWE9SIG9mIHRoZSB0d28gYnl0ZSBhcnJheXMuXG4gKi9cbmdvb2cuY3J5cHQueG9yQnl0ZUFycmF5ID0gZnVuY3Rpb24oYnl0ZXMxLCBieXRlczIpIHtcbiAgZ29vZy5hc3NlcnRzLmFzc2VydChcbiAgICAgIGJ5dGVzMS5sZW5ndGggPT0gYnl0ZXMyLmxlbmd0aCxcbiAgICAgICdYT1IgYXJyYXkgbGVuZ3RocyBtdXN0IG1hdGNoJyk7XG5cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzMS5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdC5wdXNoKGJ5dGVzMVtpXSBeIGJ5dGVzMltpXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAwNyBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEJhc2U2NCBlbi9kZWNvZGluZy4gTm90IG11Y2ggdG8gc2F5IGhlcmUgZXhjZXB0IHRoYXQgd2VcbiAqIHdvcmsgd2l0aCBkZWNvZGVkIHZhbHVlcyBpbiBhcnJheXMgb2YgYnl0ZXMuIEJ5IFwiYnl0ZVwiIEkgbWVhbiBhIG51bWJlclxuICogaW4gWzAsIDI1NV0uXG4gKlxuICogQGF1dGhvciBkb3VnaHRpZUBnb29nbGUuY29tIChHYXZpbiBEb3VnaHRpZSlcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuY3J5cHQuYmFzZTY0Jyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuY3J5cHQnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy51c2VyQWdlbnQnKTtcblxuLy8gU3RhdGljIGxvb2t1cCBtYXBzLCBsYXppbHkgcG9wdWxhdGVkIGJ5IGluaXRfKClcblxuXG4vKipcbiAqIE1hcHMgYnl0ZXMgdG8gY2hhcmFjdGVycy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmNyeXB0LmJhc2U2NC5ieXRlVG9DaGFyTWFwXyA9IG51bGw7XG5cblxuLyoqXG4gKiBNYXBzIGNoYXJhY3RlcnMgdG8gYnl0ZXMuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5jcnlwdC5iYXNlNjQuY2hhclRvQnl0ZU1hcF8gPSBudWxsO1xuXG5cbi8qKlxuICogTWFwcyBieXRlcyB0byB3ZWJzYWZlIGNoYXJhY3RlcnMuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5jcnlwdC5iYXNlNjQuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfID0gbnVsbDtcblxuXG4vKipcbiAqIE1hcHMgd2Vic2FmZSBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuY3J5cHQuYmFzZTY0LmNoYXJUb0J5dGVNYXBXZWJTYWZlXyA9IG51bGw7XG5cblxuLyoqXG4gKiBPdXIgZGVmYXVsdCBhbHBoYWJldCwgc2hhcmVkIGJldHdlZW5cbiAqIEVOQ09ERURfVkFMUyBhbmQgRU5DT0RFRF9WQUxTX1dFQlNBRkVcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmdvb2cuY3J5cHQuYmFzZTY0LkVOQ09ERURfVkFMU19CQVNFID1cbiAgICAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonICtcbiAgICAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonICtcbiAgICAnMDEyMzQ1Njc4OSc7XG5cblxuLyoqXG4gKiBPdXIgZGVmYXVsdCBhbHBoYWJldC4gVmFsdWUgNjQgKD0pIGlzIHNwZWNpYWw7IGl0IG1lYW5zIFwibm90aGluZy5cIlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZ29vZy5jcnlwdC5iYXNlNjQuRU5DT0RFRF9WQUxTID1cbiAgICBnb29nLmNyeXB0LmJhc2U2NC5FTkNPREVEX1ZBTFNfQkFTRSArICcrLz0nO1xuXG5cbi8qKlxuICogT3VyIHdlYnNhZmUgYWxwaGFiZXQuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5nb29nLmNyeXB0LmJhc2U2NC5FTkNPREVEX1ZBTFNfV0VCU0FGRSA9XG4gICAgZ29vZy5jcnlwdC5iYXNlNjQuRU5DT0RFRF9WQUxTX0JBU0UgKyAnLV8uJztcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhpcyBicm93c2VyIHN1cHBvcnRzIHRoZSBhdG9iIGFuZCBidG9hIGZ1bmN0aW9ucy4gVGhpcyBleHRlbnNpb25cbiAqIHN0YXJ0ZWQgYXQgTW96aWxsYSBidXQgaXMgbm93IGltcGxlbWVudGVkIGJ5IG1hbnkgYnJvd3NlcnMuIFdlIHVzZSB0aGVcbiAqIEFTU1VNRV8qIHZhcmlhYmxlcyB0byBhdm9pZCBwdWxsaW5nIGluIHRoZSBmdWxsIHVzZXJhZ2VudCBkZXRlY3Rpb24gbGlicmFyeVxuICogYnV0IHN0aWxsIGFsbG93aW5nIHRoZSBzdGFuZGFyZCBwZXItYnJvd3NlciBjb21waWxhdGlvbnMuXG4gKlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cuY3J5cHQuYmFzZTY0LkhBU19OQVRJVkVfU1VQUE9SVCA9IGdvb2cudXNlckFnZW50LkdFQ0tPIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nLnVzZXJBZ2VudC5XRUJLSVQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvb2cudXNlckFnZW50Lk9QRVJBIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YoZ29vZy5nbG9iYWwuYXRvYikgPT0gJ2Z1bmN0aW9uJztcblxuXG4vKipcbiAqIEJhc2U2NC1lbmNvZGUgYW4gYXJyYXkgb2YgYnl0ZXMuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fFVpbnQ4QXJyYXl9IGlucHV0IEFuIGFycmF5IG9mIGJ5dGVzIChudW1iZXJzIHdpdGhcbiAqICAgICB2YWx1ZSBpbiBbMCwgMjU1XSkgdG8gZW5jb2RlLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3dlYlNhZmUgQm9vbGVhbiBpbmRpY2F0aW5nIHdlIHNob3VsZCB1c2UgdGhlXG4gKiAgICAgYWx0ZXJuYXRpdmUgYWxwaGFiZXQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXG4gKi9cbmdvb2cuY3J5cHQuYmFzZTY0LmVuY29kZUJ5dGVBcnJheSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRfd2ViU2FmZSkge1xuICAvLyBBc3NlcnQgYXZvaWRzIHJ1bnRpbWUgZGVwZW5kZW5jeSBvbiBnb29nLmlzQXJyYXlMaWtlLCB3aGljaCBoZWxwcyByZWR1Y2VcbiAgLy8gc2l6ZSBvZiBqc2NvbXBpbGVyIG91dHB1dCwgYW5kIHdoaWNoIHlpZWxkcyBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UuXG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoZ29vZy5pc0FycmF5TGlrZShpbnB1dCksXG4gICAgICAgICAgICAgICAgICAgICAgJ2VuY29kZUJ5dGVBcnJheSB0YWtlcyBhbiBhcnJheSBhcyBhIHBhcmFtZXRlcicpO1xuXG4gIGdvb2cuY3J5cHQuYmFzZTY0LmluaXRfKCk7XG5cbiAgdmFyIGJ5dGVUb0NoYXJNYXAgPSBvcHRfd2ViU2FmZSA/XG4gICAgICAgICAgICAgICAgICAgICAgZ29vZy5jcnlwdC5iYXNlNjQuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfIDpcbiAgICAgICAgICAgICAgICAgICAgICBnb29nLmNyeXB0LmJhc2U2NC5ieXRlVG9DaGFyTWFwXztcblxuICB2YXIgb3V0cHV0ID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkgKz0gMykge1xuICAgIHZhciBieXRlMSA9IGlucHV0W2ldO1xuICAgIHZhciBoYXZlQnl0ZTIgPSBpICsgMSA8IGlucHV0Lmxlbmd0aDtcbiAgICB2YXIgYnl0ZTIgPSBoYXZlQnl0ZTIgPyBpbnB1dFtpICsgMV0gOiAwO1xuICAgIHZhciBoYXZlQnl0ZTMgPSBpICsgMiA8IGlucHV0Lmxlbmd0aDtcbiAgICB2YXIgYnl0ZTMgPSBoYXZlQnl0ZTMgPyBpbnB1dFtpICsgMl0gOiAwO1xuXG4gICAgdmFyIG91dEJ5dGUxID0gYnl0ZTEgPj4gMjtcbiAgICB2YXIgb3V0Qnl0ZTIgPSAoKGJ5dGUxICYgMHgwMykgPDwgNCkgfCAoYnl0ZTIgPj4gNCk7XG4gICAgdmFyIG91dEJ5dGUzID0gKChieXRlMiAmIDB4MEYpIDw8IDIpIHwgKGJ5dGUzID4+IDYpO1xuICAgIHZhciBvdXRCeXRlNCA9IGJ5dGUzICYgMHgzRjtcblxuICAgIGlmICghaGF2ZUJ5dGUzKSB7XG4gICAgICBvdXRCeXRlNCA9IDY0O1xuXG4gICAgICBpZiAoIWhhdmVCeXRlMikge1xuICAgICAgICBvdXRCeXRlMyA9IDY0O1xuICAgICAgfVxuICAgIH1cblxuICAgIG91dHB1dC5wdXNoKGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTFdLFxuICAgICAgICAgICAgICAgIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTJdLFxuICAgICAgICAgICAgICAgIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTNdLFxuICAgICAgICAgICAgICAgIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTRdKTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQuam9pbignJyk7XG59O1xuXG5cbi8qKlxuICogQmFzZTY0LWVuY29kZSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgQSBzdHJpbmcgdG8gZW5jb2RlLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3dlYlNhZmUgSWYgdHJ1ZSwgd2Ugc2hvdWxkIHVzZSB0aGVcbiAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZ29vZy5jcnlwdC5iYXNlNjQuZW5jb2RlU3RyaW5nID0gZnVuY3Rpb24oaW5wdXQsIG9wdF93ZWJTYWZlKSB7XG4gIC8vIFNob3J0Y3V0IGZvciBNb3ppbGxhIGJyb3dzZXJzIHRoYXQgaW1wbGVtZW50XG4gIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcbiAgaWYgKGdvb2cuY3J5cHQuYmFzZTY0LkhBU19OQVRJVkVfU1VQUE9SVCAmJiAhb3B0X3dlYlNhZmUpIHtcbiAgICByZXR1cm4gZ29vZy5nbG9iYWwuYnRvYShpbnB1dCk7XG4gIH1cbiAgcmV0dXJuIGdvb2cuY3J5cHQuYmFzZTY0LmVuY29kZUJ5dGVBcnJheShcbiAgICAgIGdvb2cuY3J5cHQuc3RyaW5nVG9CeXRlQXJyYXkoaW5wdXQpLCBvcHRfd2ViU2FmZSk7XG59O1xuXG5cbi8qKlxuICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgdG8gZGVjb2RlLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3dlYlNhZmUgVHJ1ZSBpZiB3ZSBzaG91bGQgdXNlIHRoZVxuICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxuICogQHJldHVybiB7c3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkZWNvZGVkIHZhbHVlLlxuICovXG5nb29nLmNyeXB0LmJhc2U2NC5kZWNvZGVTdHJpbmcgPSBmdW5jdGlvbihpbnB1dCwgb3B0X3dlYlNhZmUpIHtcbiAgLy8gU2hvcnRjdXQgZm9yIE1vemlsbGEgYnJvd3NlcnMgdGhhdCBpbXBsZW1lbnRcbiAgLy8gYSBuYXRpdmUgYmFzZTY0IGVuY29kZXIgaW4gdGhlIGZvcm0gb2YgXCJidG9hL2F0b2JcIlxuICBpZiAoZ29vZy5jcnlwdC5iYXNlNjQuSEFTX05BVElWRV9TVVBQT1JUICYmICFvcHRfd2ViU2FmZSkge1xuICAgIHJldHVybiBnb29nLmdsb2JhbC5hdG9iKGlucHV0KTtcbiAgfVxuICByZXR1cm4gZ29vZy5jcnlwdC5ieXRlQXJyYXlUb1N0cmluZyhcbiAgICAgIGdvb2cuY3J5cHQuYmFzZTY0LmRlY29kZVN0cmluZ1RvQnl0ZUFycmF5KGlucHV0LCBvcHRfd2ViU2FmZSkpO1xufTtcblxuXG4vKipcbiAqIEJhc2U2NC1kZWNvZGUgYSBzdHJpbmcuXG4gKlxuICogSW4gYmFzZS02NCBkZWNvZGluZywgZ3JvdXBzIG9mIGZvdXIgY2hhcmFjdGVycyBhcmUgY29udmVydGVkIGludG8gdGhyZWVcbiAqIGJ5dGVzLiAgSWYgdGhlIGVuY29kZXIgZGlkIG5vdCBhcHBseSBwYWRkaW5nLCB0aGUgaW5wdXQgbGVuZ3RoIG1heSBub3RcbiAqIGJlIGEgbXVsdGlwbGUgb2YgNC5cbiAqXG4gKiBJbiB0aGlzIGNhc2UsIHRoZSBsYXN0IGdyb3VwIHdpbGwgaGF2ZSBmZXdlciB0aGFuIDQgY2hhcmFjdGVycywgYW5kXG4gKiBwYWRkaW5nIHdpbGwgYmUgaW5mZXJyZWQuICBJZiB0aGUgZ3JvdXAgaGFzIG9uZSBvciB0d28gY2hhcmFjdGVycywgaXQgZGVjb2Rlc1xuICogdG8gb25lIGJ5dGUuICBJZiB0aGUgZ3JvdXAgaGFzIHRocmVlIGNoYXJhY3RlcnMsIGl0IGRlY29kZXMgdG8gdHdvIGJ5dGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBJbnB1dCB0byBkZWNvZGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfd2ViU2FmZSBUcnVlIGlmIHdlIHNob3VsZCB1c2UgdGhlIHdlYi1zYWZlIGFscGhhYmV0LlxuICogQHJldHVybiB7IUFycmF5PG51bWJlcj59IGJ5dGVzIHJlcHJlc2VudGluZyB0aGUgZGVjb2RlZCB2YWx1ZS5cbiAqL1xuZ29vZy5jcnlwdC5iYXNlNjQuZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXkgPSBmdW5jdGlvbihpbnB1dCwgb3B0X3dlYlNhZmUpIHtcbiAgZ29vZy5jcnlwdC5iYXNlNjQuaW5pdF8oKTtcblxuICB2YXIgY2hhclRvQnl0ZU1hcCA9IG9wdF93ZWJTYWZlID9cbiAgICAgICAgICAgICAgICAgICAgICBnb29nLmNyeXB0LmJhc2U2NC5jaGFyVG9CeXRlTWFwV2ViU2FmZV8gOlxuICAgICAgICAgICAgICAgICAgICAgIGdvb2cuY3J5cHQuYmFzZTY0LmNoYXJUb0J5dGVNYXBfO1xuXG4gIHZhciBvdXRwdXQgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgKSB7XG4gICAgdmFyIGJ5dGUxID0gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSsrKV07XG5cbiAgICB2YXIgaGF2ZUJ5dGUyID0gaSA8IGlucHV0Lmxlbmd0aDtcbiAgICB2YXIgYnl0ZTIgPSBoYXZlQnl0ZTIgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiAwO1xuICAgICsraTtcblxuICAgIHZhciBoYXZlQnl0ZTMgPSBpIDwgaW5wdXQubGVuZ3RoO1xuICAgIHZhciBieXRlMyA9IGhhdmVCeXRlMyA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xuICAgICsraTtcblxuICAgIHZhciBoYXZlQnl0ZTQgPSBpIDwgaW5wdXQubGVuZ3RoO1xuICAgIHZhciBieXRlNCA9IGhhdmVCeXRlNCA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xuICAgICsraTtcblxuICAgIGlmIChieXRlMSA9PSBudWxsIHx8IGJ5dGUyID09IG51bGwgfHxcbiAgICAgICAgYnl0ZTMgPT0gbnVsbCB8fCBieXRlNCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBFcnJvcigpO1xuICAgIH1cblxuICAgIHZhciBvdXRCeXRlMSA9IChieXRlMSA8PCAyKSB8IChieXRlMiA+PiA0KTtcbiAgICBvdXRwdXQucHVzaChvdXRCeXRlMSk7XG5cbiAgICBpZiAoYnl0ZTMgIT0gNjQpIHtcbiAgICAgIHZhciBvdXRCeXRlMiA9ICgoYnl0ZTIgPDwgNCkgJiAweEYwKSB8IChieXRlMyA+PiAyKTtcbiAgICAgIG91dHB1dC5wdXNoKG91dEJ5dGUyKTtcblxuICAgICAgaWYgKGJ5dGU0ICE9IDY0KSB7XG4gICAgICAgIHZhciBvdXRCeXRlMyA9ICgoYnl0ZTMgPDwgNikgJiAweEMwKSB8IGJ5dGU0O1xuICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cblxuLyoqXG4gKiBMYXp5IHN0YXRpYyBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi4gQ2FsbGVkIGJlZm9yZVxuICogYWNjZXNzaW5nIGFueSBvZiB0aGUgc3RhdGljIG1hcCB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmNyeXB0LmJhc2U2NC5pbml0XyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIWdvb2cuY3J5cHQuYmFzZTY0LmJ5dGVUb0NoYXJNYXBfKSB7XG4gICAgZ29vZy5jcnlwdC5iYXNlNjQuYnl0ZVRvQ2hhck1hcF8gPSB7fTtcbiAgICBnb29nLmNyeXB0LmJhc2U2NC5jaGFyVG9CeXRlTWFwXyA9IHt9O1xuICAgIGdvb2cuY3J5cHQuYmFzZTY0LmJ5dGVUb0NoYXJNYXBXZWJTYWZlXyA9IHt9O1xuICAgIGdvb2cuY3J5cHQuYmFzZTY0LmNoYXJUb0J5dGVNYXBXZWJTYWZlXyA9IHt9O1xuXG4gICAgLy8gV2Ugd2FudCBxdWljayBtYXBwaW5ncyBiYWNrIGFuZCBmb3J0aCwgc28gd2UgcHJlY29tcHV0ZSB0d28gbWFwcy5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdvb2cuY3J5cHQuYmFzZTY0LkVOQ09ERURfVkFMUy5sZW5ndGg7IGkrKykge1xuICAgICAgZ29vZy5jcnlwdC5iYXNlNjQuYnl0ZVRvQ2hhck1hcF9baV0gPVxuICAgICAgICAgIGdvb2cuY3J5cHQuYmFzZTY0LkVOQ09ERURfVkFMUy5jaGFyQXQoaSk7XG4gICAgICBnb29nLmNyeXB0LmJhc2U2NC5jaGFyVG9CeXRlTWFwX1tnb29nLmNyeXB0LmJhc2U2NC5ieXRlVG9DaGFyTWFwX1tpXV0gPSBpO1xuICAgICAgZ29vZy5jcnlwdC5iYXNlNjQuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldID1cbiAgICAgICAgICBnb29nLmNyeXB0LmJhc2U2NC5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSk7XG4gICAgICBnb29nLmNyeXB0LmJhc2U2NC5jaGFyVG9CeXRlTWFwV2ViU2FmZV9bXG4gICAgICAgICAgZ29vZy5jcnlwdC5iYXNlNjQuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldXSA9IGk7XG5cbiAgICAgIC8vIEJlIGZvcmdpdmluZyB3aGVuIGRlY29kaW5nIGFuZCBjb3JyZWN0bHkgZGVjb2RlIGJvdGggZW5jb2RpbmdzLlxuICAgICAgaWYgKGkgPj0gZ29vZy5jcnlwdC5iYXNlNjQuRU5DT0RFRF9WQUxTX0JBU0UubGVuZ3RoKSB7XG4gICAgICAgIGdvb2cuY3J5cHQuYmFzZTY0LmNoYXJUb0J5dGVNYXBfW1xuICAgICAgICAgICAgZ29vZy5jcnlwdC5iYXNlNjQuRU5DT0RFRF9WQUxTX1dFQlNBRkUuY2hhckF0KGkpXSA9IGk7XG4gICAgICAgIGdvb2cuY3J5cHQuYmFzZTY0LmNoYXJUb0J5dGVNYXBXZWJTYWZlX1tcbiAgICAgICAgICAgIGdvb2cuY3J5cHQuYmFzZTY0LkVOQ09ERURfVkFMUy5jaGFyQXQoaSldID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4iLCIvLyAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuZ29vZy5wcm92aWRlKCd3NjliLmltZ3Rvb2xzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmNyeXB0LmJhc2U2NCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm1hdGguU2l6ZScpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICB2YXIgXyA9IHc2OWIuaW1ndG9vbHM7XG4gIHZhciBTaXplID0gZ29vZy5tYXRoLlNpemU7XG4gIHZhciBiYXNlNjQgPSBnb29nLmNyeXB0LmJhc2U2NDtcblxuICAvKipcbiAgICogR2V0IGNvbnRlbnQgb2YgY2FudmFzIGFzIHBuZyBzdG9yZWQgaW4gYSBibG9iLlxuICAgKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXMgY2FudmFzIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oQmxvYil9IGNhbGxiYWNrIGNhbGxlZCB3aXRoIGJsb2IgZGF0YS5cbiAgICovXG4gIF8uZ2V0Q2FudmFzQXNCbG9iID0gZnVuY3Rpb24oY2FudmFzLCBjYWxsYmFjaykge1xuICAgIGlmIChjYW52YXNbJ3RvQmxvYiddKSB7XG4gICAgICAvLyB0b0Jsb2Igc3VwcG9ydGVkXG4gICAgICBjYW52YXNbJ3RvQmxvYiddKGNhbGxiYWNrKTtcbiAgICB9IGVsc2UgaWYgKGNhbnZhcy50b0RhdGFVUkwpIHtcbiAgICAgIHZhciB1cmwgPSBjYW52YXMudG9EYXRhVVJMKCk7XG4gICAgICB2YXIgcHJlZml4ID0gJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnO1xuICAgICAgaWYgKCFnb29nLnN0cmluZy5zdGFydHNXaXRoKHVybCwgcHJlZml4KSlcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIHZhciBkYXRhID0gdXJsLnN1YnN0cmluZyhwcmVmaXgubGVuZ3RoKTtcbiAgICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShiYXNlNjQuZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXkoZGF0YSkpO1xuICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbZGF0YV0sIHsndHlwZSc6ICdpbWFnZS9wbmcnfSk7XG4gICAgICBjYWxsYmFjayhibG9iKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBJbWFnZSBkYXRhIG9mIGdpdmVuIEltYWdlIG9iamVjdC4gU2FtZSBvcmlnaW4gcG9saWN5IGFwcGxpZXMgdG9cbiAgICogaW1hZ2Ugc3JjLiBJbWFnZSBoYXMgdG8gYmUgbG9hZGVkLiBJbWFnZSBpcyBzY2FsZWQgZG93biB0byBvcHRfbWF4U2l6ZVxuICAgKiBpZiBpdHMgd2lkdGggb3IgaGVpZ2h0IGlzIGxhcmdlci5cbiAgICogQHBhcmFtIHtJbWFnZXxIVE1MVmlkZW9FbGVtZW50fSBpbWcgaW1hZ2UuXG4gICAqIEBwYXJhbSB7KG51bWJlcnxTaXplKT19IG9wdF9tYXhTaXplIG1heCBzaXplIG9mIGFueSBkaW1lbnNpb24gaW4gcGl4ZWxzIG9yIFNpemUgb2JqZWN0XG4gICAqIHRoYXQgaW1nIGRhdGEgc2hvdWxkIGNvdmVyIChjcm9wcGluZyBib3R0b20tcmlnaHQgY29ybmVycykuXG4gICAqIEByZXR1cm4geyFJbWFnZURhdGF9IGltYWdlIGRhdGEuXG4gICAqL1xuICBfLmdldEltYWdlRGF0YSA9IGZ1bmN0aW9uKGltZywgb3B0X21heFNpemUpIHtcbiAgICB2YXIgc2l6ZSA9IG5ldyBTaXplKFxuICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbWcud2lkdGggfHwgaW1nLnZpZGVvV2lkdGgpLFxuICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbWcuaGVpZ2h0IHx8IGltZy52aWRlb0hlaWdodCkpO1xuXG4gICAgZ29vZy5hc3NlcnRzLmFzc2VydChzaXplLndpZHRoID4gMCAmJiBzaXplLmhlaWdodCA+IDApO1xuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBpZiAob3B0X21heFNpemUpIHtcbiAgICAgIGlmIChnb29nLmlzTnVtYmVyKG9wdF9tYXhTaXplKSkge1xuICAgICAgICBvcHRfbWF4U2l6ZSA9IG5ldyBTaXplKG9wdF9tYXhTaXplLCBvcHRfbWF4U2l6ZSk7XG4gICAgICAgIGlmICghc2l6ZS5maXRzSW5zaWRlKG9wdF9tYXhTaXplKSlcbiAgICAgICAgICBzaXplID0gc2l6ZS5zY2FsZVRvRml0KG9wdF9tYXhTaXplKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghc2l6ZS5maXRzSW5zaWRlKG9wdF9tYXhTaXplKSlcbiAgICAgICAgICBzaXplID0gc2l6ZS5zY2FsZVRvQ292ZXIob3B0X21heFNpemUpO1xuICAgICAgfVxuICAgICAgc2l6ZS5mbG9vcigpO1xuICAgIH1cbiAgICBjYW52YXMud2lkdGggPSBzaXplLndpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNvbnRleHQuZHJhd0ltYWdlKGltZywgMCwgMCwgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xuICAgIHJldHVybiBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCBzaXplLndpZHRoLCBzaXplLmhlaWdodCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNjYWxlcyBzaXplIGluLXBsYWNlIHRvIGZpdCBtYXggaWYgbGFyZ2VyIGtlZXBpbmcgdGhlIGFzcGVjdCByYXRpby5cbiAgICogQHBhcmFtIHtTaXplfSBzaXplIG9yaWdpbmFsIHNpemUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXggc2l6ZSBpbiBwaXhlbHMuXG4gICAqL1xuICBfLnNjYWxlSWZMYXJnZXIgPSBmdW5jdGlvbihzaXplLCBtYXgpIHtcbiAgICB2YXIgcyA9IE1hdGgubWluKG1heCAvIHNpemUud2lkdGgsIG1heCAvIHNpemUuaGVpZ2h0KTtcbiAgICBpZiAocyA8PSAxKSB7XG4gICAgICBzaXplLnNjYWxlKHMpLnJvdW5kKCk7XG4gICAgfVxuICB9O1xuXG4gIGdvb2cuZXhwb3J0U3ltYm9sKCd3NjliLmltZ3Rvb2xzLmdldEltYWdlRGF0YScsIF8uZ2V0SW1hZ2VEYXRhKTtcbiAgZ29vZy5leHBvcnRTeW1ib2woJ3c2OWIuaW1ndG9vbHMuZ2V0Q2FudmFzQXNCbG9iJywgXy5nZXRDYW52YXNBc0Jsb2IpO1xufSk7XG4iLCIvLyAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuZ29vZy5wcm92aWRlKCd3NjliLkxvY2FsVmlkZW9DYXB0dXJlcicpO1xuZ29vZy5yZXF1aXJlKCdnb29nLkRpc3Bvc2FibGUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubWF0aC5TaXplJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuaW1ndG9vbHMnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgdmFyIFNpemUgPSBnb29nLm1hdGguU2l6ZTtcbiAgdmFyIGltZ3Rvb2xzID0gdzY5Yi5pbWd0b29scztcbiAgLyoqXG4gICAqIFRPRE86IGFkZCBzdGFydC9zdG9wIG1ldGhvZHMgYW5kIHJlYWR5L2Vycm9yIGV2ZW50cy5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIHtnb29nLkRpc3Bvc2FibGV9XG4gICAqL1xuICB3NjliLkxvY2FsVmlkZW9DYXB0dXJlciA9IGZ1bmN0aW9uKCkge1xuICAgIGdvb2cuYmFzZSh0aGlzKTtcbiAgICB0aGlzLmJhY2tDYW52YXNfID0gLyoqIEB0eXBlIHtIVE1MQ2FudmFzRWxlbWVudH0gKi8gKFxuICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykpO1xuICAgIHRoaXMubWVkaWFWaWRlb18gPSAvKiogQHR5cGUge0hUTUxWaWRlb0VsZW1lbnR9ICovIChcbiAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJykpO1xuICAgIHRoaXMubWVkaWFWaWRlb18uc2V0QXR0cmlidXRlKCdhdXRvcGxheScsICd0cnVlJyk7XG4gICAgdGhpcy5iYWNrQ29udGV4dF8gPSAvKiogQHR5cGUge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gKi8gKFxuICAgICAgdGhpcy5iYWNrQ2FudmFzXy5nZXRDb250ZXh0KCcyZCcpKTtcbiAgfTtcbiAgdmFyIExvY2FsVmlkZW9DYXB0dXJlciA9IHc2OWIuTG9jYWxWaWRlb0NhcHR1cmVyO1xuICBnb29nLmluaGVyaXRzKExvY2FsVmlkZW9DYXB0dXJlciwgZ29vZy5EaXNwb3NhYmxlKTtcbiAgdmFyIHBybyA9IExvY2FsVmlkZW9DYXB0dXJlci5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEFsaWFzIHRvIGdldFVzZXJNZWRpYSBmdW5jdGlvbnMuXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIExvY2FsVmlkZW9DYXB0dXJlci5nZXRNZWRpYSA9IChcbiAgICBuYXZpZ2F0b3JbJ2dldFVzZXJNZWRpYSddIHx8XG4gICAgICBuYXZpZ2F0b3JbJ3dlYmtpdEdldFVzZXJNZWRpYSddIHx8XG4gICAgICBuYXZpZ2F0b3JbJ21vekdldFVzZXJNZWRpYSddIHx8XG4gICAgICBuYXZpZ2F0b3JbJ21zR2V0VXNlck1lZGlhJ10pO1xuXG4gIGlmIChMb2NhbFZpZGVvQ2FwdHVyZXIuZ2V0TWVkaWEpXG4gICAgTG9jYWxWaWRlb0NhcHR1cmVyLmdldE1lZGlhID1cbiAgICAgIExvY2FsVmlkZW9DYXB0dXJlci5nZXRNZWRpYS5iaW5kKG5hdmlnYXRvcik7XG5cbiAgLyoqXG4gICAqIENhbnZhcyB1c2VzIHRvIGNhbGwgZ2V0SW1hZ2VEYXRhIG9uLlxuICAgKiBAdHlwZSB7SFRNTENhbnZhc0VsZW1lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8uYmFja0NhbnZhc18gPSBudWxsO1xuICAvKipcbiAgICogUmVuZGVyaW5nIGNvbnRleHQgb2YgYmFjayBjYW52YXMuXG4gICAqIEB0eXBlIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8uYmFja0NvbnRleHRfID0gbnVsbDtcbiAgLyoqXG4gICAqIFZpZGVvIGVsZW1lbnQgdXNlZCB0byByZW5kZXIgdGhlIGdldFVzZXJNZWRpYSBzdHJlYW0uXG4gICAqIEB0eXBlIHtIVE1MVmlkZW9FbGVtZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvLm1lZGlhVmlkZW9fID0gbnVsbDtcblxuICBwcm8uc3RyZWFtXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0hUTUxWaWRlb0VsZW1lbnR9IHZpZGVvIGVsZW1lbnQuXG4gICAqL1xuICBwcm8uZ2V0VmlkZW8gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tZWRpYVZpZGVvXztcbiAgfTtcblxuICAvKipcbiAgICogU3RhcnQgY2FwdHVyaW5nIHZpZGVvLlxuICAgKi9cbiAgcHJvLnN0YXJ0ID0gZnVuY3Rpb24ocmVhZHkpIHtcbiAgICBnb29nLmV2ZW50cy5saXN0ZW5PbmNlKHRoaXMubWVkaWFWaWRlb18sICdjYW5wbGF5JywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLndhaXRGb3JWaWRlb1NpemVfKHJlYWR5KTtcbiAgICB9LCBmYWxzZSwgdGhpcyk7XG4gICAgdGhpcy5nZXRVc2VyTWVkaWEoKTtcbiAgfTtcblxuICAvKipcbiAgICogQ2FsbHMgcmVhZHkgd2hlbiB2aWRlb1NpemUgZ2V0cyBncmVhdGVyIHRoYW4gMC5cbiAgICogU29tZXRpbWVzIHRoZSB2aWRlbyBzaXplIGlzIDAgaW4gRmlyZUZveCBldmVuIGFmdGVyIGNhbnBsYXkgaGFzIGJlZW5cbiAgICogdHJpZ2dlcmVkLiBUaGlzIHdvcmtzIGFycm91bmQgdGhpcyBieSBwb2xsaW5nIHRoZSB2aWRlbyB3aXRoLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvLndhaXRGb3JWaWRlb1NpemVfID0gZnVuY3Rpb24ocmVhZHkpIHtcbiAgICBpZiAodGhpcy5tZWRpYVZpZGVvXy52aWRlb1dpZHRoID4gMCAmJiB0aGlzLm1lZGlhVmlkZW9fLnZpZGVvSGVpZ2h0ID4gMCkge1xuICAgICAgcmVhZHkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LnNldFRpbWVvdXQodGhpcy53YWl0Rm9yVmlkZW9TaXplXy5iaW5kKHRoaXMsIHJlYWR5KSwgMTAwKTtcbiAgICB9XG4gIH07XG5cblxuICAvKipcbiAgICogR2V0IEltYWdlIGRhdGEgb2YgY3VycmVudCBmcmFtZSBmcm9tIGxvY2FsIHZpZGVvIHN0cmVhbS5cbiAgICogSW1hZ2UgaXMgc2NhbGVkIGRvd24gdG8gb3B0X21heFNpemUgaWYgaXRzIHdpZHRoIG9yIGhlaWdodCBpcyBsYXJnZXIuXG4gICAqIEBwYXJhbSB7U2l6ZX0gc2l6ZSBkZXNpcmVkIHNpemUgb2YgaW1hZ2UuXG4gICAqIEByZXR1cm4ge0ltYWdlRGF0YX0gaW1hZ2UgZGF0YS5cbiAgICovXG4gIHByby5nZXRJbWFnZURhdGEgPSBmdW5jdGlvbihzaXplKSB7XG4gICAgdGhpcy5kcmF3QW5kR2V0Q2FudmFzKHNpemUpO1xuICAgIHJldHVybiB0aGlzLmJhY2tDb250ZXh0Xy5nZXRJbWFnZURhdGEoMCwgMCwgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgY2FudmFzIHdpdGggY3VycmVudCBmcmFtZSBmcm9tIGxvY2FsIHZpZGVvIHN0cmVhbS5cbiAgICogSW1hZ2UgaXMgc2NhbGVkIGRvd24gdG8gb3B0X21heFNpemUgaWYgaXRzIHdpZHRoIG9yIGhlaWdodCBpcyBsYXJnZXIuXG4gICAqIEBwYXJhbSB7U2l6ZX0gc2l6ZSBkZXNpcmVkIHNpemUgb2YgaW1hZ2UuXG4gICAqIEByZXR1cm4ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXMuXG4gICAqL1xuICBwcm8uZHJhd0FuZEdldENhbnZhcyA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICB2YXIgdmlkZW8gPSB0aGlzLm1lZGlhVmlkZW9fO1xuICAgIHZhciBjYW52YXMgPSB0aGlzLmJhY2tDYW52YXNfO1xuICAgIGdvb2cuYXNzZXJ0cy5hc3NlcnQodmlkZW8udmlkZW9XaWR0aCA+IDAgJiYgdmlkZW8udmlkZW9XaWR0aCA+IDApO1xuXG4gICAgLy8gUmVzY2FsZSBjYW52YXMgaWYgbmVlZGVkLlxuICAgIGlmIChjYW52YXMud2lkdGggIT0gc2l6ZS53aWR0aCB8fCBjYW52YXMuaGVpZ2h0ICE9IHNpemUuaGVpZ2h0KSB7XG4gICAgICBjYW52YXMud2lkdGggPSBzaXplLndpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuICAgIH1cbiAgICB2YXIgY29udGV4dCA9IHRoaXMuYmFja0NvbnRleHRfO1xuICAgIHRoaXMuZHJhd09uQ2FudmFzKGNhbnZhcywgY29udGV4dCk7XG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfTtcblxuICAvKipcbiAgICogRHJhd3MgdmlkZW8gb24gY2FudmFzLCBzY2FsaW5nIHRvIHRvIGZpdCBpbnRvIGNhbnZhcy5cbiAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gY2FudmFzIGNhbnZhcyB0byBkcmF3IG9uLlxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dCBjb250ZXh0IG9mIGNhbnZhcy5cbiAgICovXG4gIHByby5kcmF3T25DYW52YXMgPSBmdW5jdGlvbihjYW52YXMsIGNvbnRleHQpIHtcbiAgICB2YXIgdmlkZW8gPSB0aGlzLmdldFZpZGVvKCk7XG4gICAgdmFyIHdpZHRoID0gY2FudmFzLndpZHRoO1xuICAgIHZhciBoZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xuXG4gICAgLy8gU21hbGxlc3Qgc2NhbGUgdGhhdCBzY2FsZXMgdmlkZW8gdG8gZGVzaXJlZCBzaXplLlxuICAgIHZhciBzY2FsZSA9IE1hdGgubWF4KGhlaWdodCAvIHZpZGVvLnZpZGVvSGVpZ2h0LCB3aWR0aCAvIHZpZGVvLnZpZGVvV2lkdGgpO1xuICAgIC8vIGRyYXcgaW1hZ2UgY3JvcHBpbmcgd2hhdCBkb2VzIG5vdCBmaXQgb24gdGhlIHJpZ2h0L2JvdHRvbSBlZGdlcy5cbiAgICBjb250ZXh0LmRyYXdJbWFnZSh2aWRlbywgMCwgMCxcbiAgICAgIHZpZGVvLnZpZGVvV2lkdGggKiBzY2FsZSwgdmlkZW8udmlkZW9IZWlnaHQgKiBzY2FsZSk7XG5cbiAgfTtcblxuICAvKipcbiAgICogdmlkZW8gc3RyZWFtLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm8ub25HZXRNZWRpYVN1Y2Nlc3MgPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAvLyBJZiBkaXNwb3NlZCBzaW5jZSwgZG9udCBkbyBhbnl0aGluZy5cbiAgICBpZiAodGhpcy5tZWRpYVZpZGVvXyA9PT0gbnVsbClcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLm1lZGlhVmlkZW9fLnNyYyA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKHN0cmVhbSk7XG4gICAgdGhpcy5tZWRpYVZpZGVvXy5wbGF5KCk7XG4gICAgdGhpcy5zdHJlYW1fID0gc3RyZWFtO1xuICB9O1xuXG4gIC8qKlxuICAgKiBjb2RlIGVycm9yIGNvZGUuXG4gICAqL1xuICBwcm8ub25HZXRNZWRpYUVycm9yID0gZnVuY3Rpb24oY29kZSkge1xuICAgIHdpbmRvdy5jb25zb2xlLmxvZygnZXJyb3IgY29kZTonKTtcbiAgICB3aW5kb3cuY29uc29sZS5sb2coY29kZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyBnZXQgdXNlciBtZWRpYS5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBmdW5jdGlvbiBnb3RTb3VyY2VzKHNvdXJjZXMpIHtcbiAgICAgIHZhciBjb25zdHJhaW50ID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpXTtcbiAgICAgICAgaWYgKHNvdXJjZVsna2luZCddID09PSAndmlkZW8nICYmIHNvdXJjZVsnZmFjaW5nJ10gPT0gJ2Vudmlyb25tZW50Jykge1xuICAgICAgICAgIGNvbnN0cmFpbnQgPSB7J29wdGlvbmFsJzogW3snc291cmNlSWQnOiBzb3VyY2UuaWR9XX07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIExvY2FsVmlkZW9DYXB0dXJlci5nZXRNZWRpYSh7J3ZpZGVvJzogY29uc3RyYWludH0sXG4gICAgICAgIHNlbGYub25HZXRNZWRpYVN1Y2Nlc3MuYmluZChzZWxmKSxcbiAgICAgICAgc2VsZi5vbkdldE1lZGlhRXJyb3IuYmluZChzZWxmKSk7XG4gICAgfVxuICAgIGlmICh3aW5kb3dbJ01lZGlhU3RyZWFtVHJhY2snXSAmJiB3aW5kb3dbJ01lZGlhU3RyZWFtVHJhY2snXVsnZ2V0U291cmNlcyddKVxuICAgICAgd2luZG93WydNZWRpYVN0cmVhbVRyYWNrJ11bJ2dldFNvdXJjZXMnXShnb3RTb3VyY2VzKTtcbiAgICBlbHNlXG4gICAgICBnb3RTb3VyY2VzKFtdKTtcbiAgfTtcblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm8uZGlzcG9zZUludGVybmFsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVybCA9IHRoaXMubWVkaWFWaWRlb18uc3JjO1xuICAgIHRoaXMubWVkaWFWaWRlb18ucGF1c2UoKTtcbiAgICB0aGlzLm1lZGlhVmlkZW9fLnNyYyA9ICcnO1xuICAgIGlmICh3aW5kb3cuVVJMICYmIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKVxuICAgICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgICB0aGlzLm1lZGlhVmlkZW9fID0gbnVsbDtcbiAgICBpZiAodGhpcy5zdHJlYW1fKSB7XG4gICAgICBpZiAodGhpcy5zdHJlYW1fLnN0b3ApXG4gICAgICAgIHRoaXMuc3RyZWFtXy5zdG9wKCk7XG4gICAgICBpZiAodGhpcy5zdHJlYW1fWydnZXRUcmFja3MnXSkge1xuICAgICAgICB0aGlzLnN0cmVhbV9bJ2dldFRyYWNrcyddKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xuICAgICAgICAgIHRyYWNrLnN0b3AoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufSk7XG4iLCIvLyAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuXG5nb29nLnByb3ZpZGUoJ3c2OWIuaW1nLkJpdE1hdHJpeExpa2UnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgLyoqXG4gICAqIEludGVyZmFjZSBmb3IgcmVhZGFibGUgYml0bWF0cml4LlxuICAgKiBAaW50ZXJmYWNlXG4gICAqL1xuICB3NjliLmltZy5CaXRNYXRyaXhMaWtlID0gZnVuY3Rpb24oKSB7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn0gVGhlIHdpZHRoIG9mIHRoZSBtYXRyaXguXG4gICAqL1xuICB3NjliLmltZy5CaXRNYXRyaXhMaWtlLnByb3RvdHlwZS5nZXRXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBoZWlnaHQgb2YgdGhlIG1hdHJpeC5cbiAgICovXG4gIHc2OWIuaW1nLkJpdE1hdHJpeExpa2UucHJvdG90eXBlLmdldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0geCB4IHBvcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgeSBwb3MuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IGJpdCBhdCBnaXZlbiBwb3NpdGlvbi5cbiAgICovXG4gIHc2OWIuaW1nLkJpdE1hdHJpeExpa2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgfTtcbn0pO1xuIiwiLy8gKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcblxuZ29vZy5wcm92aWRlKCd3NjliLmltZy5SR0JBQml0TWF0cml4Jyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuaW1nLkJpdE1hdHJpeExpa2UnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgLyoqXG4gICAqIFdyYXBzIHJnYmEgaW1hZ2UgZGF0YSBpbiBhbiByZWFkLW9ubHkgQml0TWF0aXgtbGlrZSBpbnRlcmZhY2UuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBpbiBwaXhlbHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgaW4gcGl4ZWxzLlxuICAgKiBAcGFyYW0geyhVaW50OEFycmF5fFVpbnQ4Q2xhbXBlZEFycmF5KX0gZGF0YSBpbWFnZSBkYXRhIHdpdGhcbiAgICogdmFsdWVzIDI1NSA9IHdoaXRlLCAwID0gYmxhY2suXG4gICAqIGFycmF5LlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGltcGxlbWVudHMge3c2OWIuaW1nLkJpdE1hdHJpeExpa2V9XG4gICAqL1xuICB3NjliLmltZy5SR0JBQml0TWF0cml4ID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCwgZGF0YSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICB9O1xuICB2YXIgcHJvID0gdzY5Yi5pbWcuUkdCQUJpdE1hdHJpeC5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn0gVGhlIHdpZHRoIG9mIHRoZSBtYXRyaXguXG4gICAqL1xuICBwcm8uZ2V0V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy53aWR0aDtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgaGVpZ2h0IG9mIHRoZSBtYXRyaXguXG4gICAqL1xuICBwcm8uZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVpZ2h0O1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHggcG9zLlxuICAgKiBAcGFyYW0ge251bWJlcn0geSB5IHBvcy5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gYml0IGF0IGdpdmVuIHBvc2l0aW9uLlxuICAgKi9cbiAgcHJvLmdldCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgcG9zID0gNCAqICh5ICogdGhpcy53aWR0aCArIHgpO1xuICAgIGlmICh0aGlzLmRhdGFbcG9zXSA+IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH07XG5cblxufSk7XG4iLCIvLyAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuXG5nb29nLnByb3ZpZGUoJ3c2OWIuaW1nLlJHQkFJbWFnZURhdGEnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBpbiBwaXhlbHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgaW4gcGl4ZWxzLlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXk9fSBvcHRfZGF0YSBvcHRpb25hbCBpbWFnZSBkYXRhLiBEZWZhdWx0cyB0byBlbXB0eVxuICAgKiBhcnJheS5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB3NjliLmltZy5SR0JBSW1hZ2VEYXRhID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCwgb3B0X2RhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBvcHRfZGF0YSB8fCBuZXcgVWludDhBcnJheSg0ICogd2lkdGggKiBoZWlnaHQpO1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgfTtcbiAgdmFyIHBybyA9IHc2OWIuaW1nLlJHQkFJbWFnZURhdGEucHJvdG90eXBlO1xuXG4gIHByby5zZXQgPSBmdW5jdGlvbih4LCB5LCByZWQsIGdyZWVuLCBibHVlLCBvcHRfYWxwaGEpIHtcbiAgICB2YXIgcG9zID0gNCAqICh5ICogdGhpcy53aWR0aCArIHgpO1xuICAgIHRoaXMuZGF0YVtwb3NdID0gcmVkO1xuICAgIHRoaXMuZGF0YVtwb3MgKyAxXSA9IGdyZWVuO1xuICAgIHRoaXMuZGF0YVtwb3MgKyAyXSA9IGJsdWU7XG4gICAgdGhpcy5kYXRhW3BvcyArIDNdID0gb3B0X2FscGhhIHx8IDI1NTtcbiAgfTtcblxuICBwcm8uc2V0R3JheSA9IGZ1bmN0aW9uKHgsIHksIGdyYXkpIHtcbiAgICB0aGlzLnNldCh4LCB5LCBncmF5LCBncmF5LCBncmF5LCAyNTUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0geCBwb3MuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IHBvcy5cbiAgICogQHJldHVybiB7QXJyYXl9IFtyZWQsIGdyZWVuLCBibHVlLCBhbHBoYV0gdmFsdWVzLlxuICAgKi9cbiAgcHJvLmdldCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgcG9zID0gNCAqICh5ICogdGhpcy53aWR0aCArIHgpO1xuICAgIHJldHVybiBbdGhpcy5kYXRhW3Bvc10sIHRoaXMuZGF0YVtwb3MgKyAxXSxcbiAgICAgIHRoaXMuZGF0YVtwb3MgKyAyXSwgdGhpcy5kYXRhW3BvcyArIDNdXTtcbiAgfTtcbn0pO1xuIiwiLy8gKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbmdvb2cucHJvdmlkZSgndzY5Yi5pbWcuV2ViR0xQYXJhbXMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5vYmplY3QnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgLyoqXG4gICAqIEhlbHBzIHRvIGFwcGx5IHBhcmFtZXRlcnMgdG8gYSB3ZWJnbCBwcm9ncmFtbS5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2NvbmZpZyBpbml0aWFsIGNvbmZpZywgc2VlIHNldCgpLlxuICAgKi9cbiAgdzY5Yi5pbWcuV2ViR0xQYXJhbXMgPSBmdW5jdGlvbihvcHRfY29uZmlnKSB7XG4gICAgdGhpcy5kYXRhXyA9IHt9O1xuICAgIGlmIChvcHRfY29uZmlnKVxuICAgICAgdGhpcy5zZXQob3B0X2NvbmZpZyk7XG4gIH07XG4gIHZhciBwcm8gPSB3NjliLmltZy5XZWJHTFBhcmFtcy5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3c2OWIuaW1nLldlYkdMUGFyYW1zfSBwYXJhbXMgb2JqZWN0LlxuICAgKi9cbiAgcHJvLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmFtcyA9IG5ldyB3NjliLmltZy5XZWJHTFBhcmFtcygpO1xuICAgIHBhcmFtcy5kYXRhXyA9IGdvb2cub2JqZWN0LmNsb25lKHRoaXMuZGF0YV8pO1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgcGFyYW1ldGVycy4gRXhhbXBsZTpcbiAgICogeyd3aWR0aCc6IDEyLjQsXG4gICAqICdkaW1lbnNpb25zJzogWzEwMjQuMCwgNzE4LjBdXG4gICAqICdpbWFnZUlkJzogWydpJywgMV1cbiAgICogfVxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIG1hcHBpbmcgb2YgbmFtZXMgdG8gZWl0aGVyOlxuICAgICAqICBvbmUgb3IgbXVsdGlwbGUgZmxvYXQgdmFsdWVzLFxuICAgICAqIFsnaScsIDIxLCA0NSwgNl0gb25lIG9yIG11bHRpcGxlIGludGVnZXJzIHdpdGggYSBwcmVjZWVkaW5nICdpJy5cbiAgICogQHJldHVybiB7dzY5Yi5pbWcuV2ViR0xQYXJhbXN9IHRoaXMgZm9yIGNoYWluaW5nLlxuICAgKi9cbiAgcHJvLnNldCA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgIGdvb2cub2JqZWN0LmZvckVhY2goY29uZmlnLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCAmJiB2YWx1ZVswXSA9PSAnaScpXG4gICAgICAgIHRoaXMuc2V0SW50KGtleSwgdmFsdWUuc2xpY2UoMSkpO1xuICAgICAgZWxzZVxuICAgICAgICB0aGlzLnNldEZsb2F0KGtleSwgdmFsdWUpO1xuICAgIH0sIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBwYXJhbWV0ZXIgbmFtZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgcGFyYW0gdHlwZS5cbiAgICogQHBhcmFtIHsobnVtYmVyfEFycmF5LjxudW1iZXI+KX0gdmFsdWUgdG8gc2V0LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvLnNldEludGVybmFsXyA9IGZ1bmN0aW9uKG5hbWUsIHR5cGUsIHZhbHVlKSB7XG4gICAgdGhpcy5kYXRhX1tuYW1lXSA9IFt0eXBlLCB2YWx1ZV07XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGFzIHBhc3NlZCB0byBzaGFkZXIuXG4gICAqIEBwYXJhbSB7KG51bWJlcnxBcnJheS48bnVtYmVyPil9IHZhbHVlIGludGVnZXIuXG4gICAqIEByZXR1cm4ge3c2OWIuaW1nLldlYkdMUGFyYW1zfSB0aGlzIGZvciBjaGFpbmluZy5cbiAgICovXG4gIHByby5zZXRJbnQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBsZW4gPSB2YWx1ZS5sZW5ndGggfHwgMTtcbiAgICB0aGlzLnNldEludGVybmFsXyhuYW1lLCBsZW4gKyAnaScsIHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgYXMgcGFzc2VkIHRvIHNoYWRlci5cbiAgICogQHBhcmFtIHsobnVtYmVyfEFycmF5LjxudW1iZXI+KX0gdmFsdWUgZmxvYXQuXG4gICAqIEByZXR1cm4ge3c2OWIuaW1nLldlYkdMUGFyYW1zfSB0aGlzIGZvciBjaGFpbmluZy5cbiAgICovXG4gIHByby5zZXRGbG9hdCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGxlbiA9IHZhbHVlLmxlbmd0aCB8fCAxO1xuICAgIHRoaXMuc2V0SW50ZXJuYWxfKG5hbWUsIGxlbiArICdmJywgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHBhcmFtZXRlciBuYW1lLlxuICAgKiBAcmV0dXJuIHs/bnVtYmVyfSB2YWx1ZSBvciBudWxsLlxuICAgKi9cbiAgcHJvLmdldFZhbHVlID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciB0dXBsZSA9IHRoaXMuZGF0YV9bbmFtZV07XG4gICAgaWYgKHR1cGxlKVxuICAgICAgcmV0dXJuIHR1cGxlWzFdO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBcHBseSBwYXJhbWV0ZXJzIHRvIHByb2dyYW0uIFlvdSBuZWVkIHRvIGNhbGwgcHJvZ3JhbS51c2UoKSBhbmRcbiAgICogcHJvZ3JhbS5pbml0Q29tbW9uQXR0cmlidXRlcygpIHlvdXJzZWxmLlxuICAgKiBAcGFyYW0ge3c2OWIuaW1nLldlYkdMUHJvZ3JhbX0gcHJvZ3JhbSB3ZWJnbCBwcm9ncmFtLlxuICAgKi9cbiAgcHJvLmFwcGx5ID0gZnVuY3Rpb24ocHJvZ3JhbSkge1xuICAgIHZhciBzZXR0ZXJzID0gcHJvZ3JhbS5nZXROYW1lZFNldHRlckZ1bmN0aW9ucygpO1xuICAgIGdvb2cub2JqZWN0LmZvckVhY2godGhpcy5kYXRhXywgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHZhciB0eXBlID0gdmFsdWVbMF07XG4gICAgICB2YXIgdmFsdWVBcmdzID0gdmFsdWVbMV07XG4gICAgICBzZXR0ZXJzW3R5cGVdLmFwcGx5KHByb2dyYW0sIFtuYW1lXS5jb25jYXQodmFsdWVBcmdzKSk7XG4gICAgfSwgdGhpcyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNhbWUgYXMgYXBwbHkoKSBidXQgdGFrZXMgY2FyZSBvZiBjYWxsaW5nIHByb2dyYW0udXNlKCkgYW5kXG4gICAqIGluaXRDb21tb25BdHRyaWJ0dWVzKClcbiAgICogQHBhcmFtIHt3NjliLmltZy5XZWJHTFByb2dyYW19IHByb2dyYW0gd2ViZ2wgcHJvZ3JhbS5cbiAgICovXG4gIHByby51c2VBbmRBcHBseSA9IGZ1bmN0aW9uKHByb2dyYW0pIHtcbiAgICBwcm9ncmFtLnVzZSgpO1xuICAgIHByb2dyYW0uaW5pdENvbW1vbkF0dHJpYnV0ZXMoKTtcbiAgICB0aGlzLmFwcGx5KHByb2dyYW0pO1xuICB9O1xufSk7XG4iLCIvLyAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuXG5nb29nLnByb3ZpZGUoJ3c2OWIuaW1nLldlYkdMUGlwZWxpbmUnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgLyoqXG4gICAqIEhlbHBzIHRvIGV4ZWN1dGUgbXVsdGlwYXNzIHdlYmdsIHByb2dyYW1tcyBieSBhcHBseWluZyBtdWx0aXBsZSBwcm9ncmFtc1xuICAgKiBhbmQgcGFyYW1ldGVyIHN1Y2Nlc3NpdmVseS5cbiAgICogQHBhcmFtIHt3NjliLmltZy5XZWJHTEZpbHRlcn0gZmlsdGVyIHdlYmdsIGZpbHRlci5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB3NjliLmltZy5XZWJHTFBpcGVsaW5lID0gZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgdGhpcy5wYXNzZXNfID0gW107XG4gICAgdGhpcy5maWx0ZXJfID0gZmlsdGVyO1xuICB9O1xuICB2YXIgcHJvID0gdzY5Yi5pbWcuV2ViR0xQaXBlbGluZS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7dzY5Yi5pbWcuV2ViR0xQcm9ncmFtfSBwcm9ncmFtIHRvIHJ1bi5cbiAgICogQHBhcmFtIHt3NjliLmltZy5XZWJHTFBhcmFtc30gcGFyYW1ldGVycyB0byBhcHBseS5cbiAgICovXG4gIHByby5hZGRQYXNzID0gZnVuY3Rpb24ocHJvZ3JhbSwgcGFyYW1ldGVycykge1xuICAgIHRoaXMucGFzc2VzXy5wdXNoKFtwcm9ncmFtLCBwYXJhbWV0ZXJzXSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBjdXN0b20gcGFzcy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbihudW1iZXIsIG51bWJlciwgbnVtYmVyKX0gY2FsbGJhY2sgdGhhdCB0YWtlcyB0aHJlZVxuICAgKiBwYXJhbXRlcnM6XG4gICAqIC0gaW5wdXQgdGV4dHVyZSBpZC5cbiAgICogLSBvdXQgdGV4dHVyZSBpZFxuICAgKiAtIHdvcmtpbmcgdGV4dHVyZSBpZCAoZm9yIGludGVybWVkaWF0ZSByZXN1bHRzKS5cbiAgICovXG4gIHByby5hZGRDdXN0b21QYXNzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB0aGlzLnBhc3Nlc18ucHVzaChjYWxsYmFjayk7XG4gIH07XG5cblxuICBwcm8ucmVuZGVyID0gZnVuY3Rpb24oaW5UZXh0dXJlSWQsIG91dFRleHR1cmVJZCwgd29ya1RleHR1cmVJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdF9yZXN1bHRPblNjcmVlbikge1xuICAgIHZhciBwcmV2UHJvZ2FybSA9IG51bGw7XG4gICAgdmFyIGZpbHRlciA9IHRoaXMuZmlsdGVyXztcbiAgICB2YXIgbnVtUGFzc2VzID0gdGhpcy5wYXNzZXNfLmxlbmd0aDtcbiAgICB2YXIgcGluZ1BvbmdUZXh0dXJlSWRzO1xuICAgIC8vIEVuc3VyZXMgbGFzdCBwYXNzIGdvZXMgb24gb3V0VGV4dHVyZUlkLlxuICAgIGlmIChudW1QYXNzZXMgJSAyID09IDApXG4gICAgICBwaW5nUG9uZ1RleHR1cmVJZHMgPSBbd29ya1RleHR1cmVJZCwgb3V0VGV4dHVyZUlkXTtcbiAgICBlbHNlXG4gICAgICBwaW5nUG9uZ1RleHR1cmVJZHMgPSBbb3V0VGV4dHVyZUlkLCB3b3JrVGV4dHVyZUlkXTtcblxuICAgIHZhciBwcmV2VGV4dHVyZUlkID0gaW5UZXh0dXJlSWQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1QYXNzZXM7ICsraSkge1xuICAgICAgdmFyIHBhc3MgPSB0aGlzLnBhc3Nlc19baV07XG4gICAgICBpZiAocGFzcy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHByb2dyYW0gPSBwYXNzWzBdO1xuICAgICAgICB2YXIgcGFyYW1zID0gcGFzc1sxXTtcbiAgICAgICAgaWYgKHByb2dyYW0gIT0gcHJldlByb2dhcm0pIHtcbiAgICAgICAgICBwcm9ncmFtLnVzZSgpO1xuICAgICAgICAgIHByb2dyYW0uaW5pdENvbW1vbkF0dHJpYnV0ZXMoKTtcbiAgICAgICAgICBwcmV2UHJvZ2FybSA9IHByb2dyYW07XG4gICAgICAgIH1cbiAgICAgICAgcHJvZ3JhbS5zZXRVbmlmb3JtMWkoJ2ltYWdlSW4nLCBwcmV2VGV4dHVyZUlkKTtcbiAgICAgICAgcGFyYW1zLmFwcGx5KHByb2dyYW0pO1xuICAgICAgICBpZiAoaSA9PSBudW1QYXNzZXMgLSAxICYmIG9wdF9yZXN1bHRPblNjcmVlbikge1xuICAgICAgICAgIGZpbHRlci51bmJpbmRGcmFtZWJ1ZmZlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0ZXhJZCA9IHBpbmdQb25nVGV4dHVyZUlkc1tpICUgMl07XG4gICAgICAgICAgZmlsdGVyLmF0dGFjaFRleHR1cmVUb0ZCKHRleElkKTtcbiAgICAgICAgICBwcmV2VGV4dHVyZUlkID0gdGV4SWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9mZnNldCA9IHBhcmFtcy5nZXRWYWx1ZSgnb3V0T2Zmc2V0Jyk7XG4gICAgICAgIGZpbHRlci5zZXRWaWV3cG9ydChcbiAgICAgICAgICBvZmZzZXQgPyBvZmZzZXRbMF0gOiAwLFxuICAgICAgICAgIG9mZnNldCA/IG9mZnNldFsxXSA6IDAsXG4gICAgICAgICAgcGFyYW1zLmdldFZhbHVlKCd3aWR0aCcpLFxuICAgICAgICAgIHBhcmFtcy5nZXRWYWx1ZSgnaGVpZ2h0JykpO1xuICAgICAgICBwcm9ncmFtLmRyYXdSZWN0KCk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGN1c3RvbSBwYXNzXG4gICAgICAgIHZhciBvdXRUZXggPSBwaW5nUG9uZ1RleHR1cmVJZHNbaSAlIDJdO1xuICAgICAgICB2YXIgd29ya1RleCA9IHBpbmdQb25nVGV4dHVyZUlkc1soaSArIDEpICUgMl07XG4gICAgICAgIHBhc3MocHJldlRleHR1cmVJZCwgb3V0VGV4LCB3b3JrVGV4KTtcbiAgICAgICAgcHJldlRleHR1cmVJZCA9IG91dFRleDtcbiAgICAgIH1cblxuICAgIH1cbiAgfTtcblxuXG59KTtcbiIsImdvb2cucHJvdmlkZSgndzY5Yi5zaGFkZXJzLnJlY3RWZXJ0ZXgnKTtcbnc2OWIuc2hhZGVycy5yZWN0VmVydGV4ID0gJ2F0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uO1xcbicgK1xuICAndm9pZCBtYWluKHZvaWQpIHtcXG4nICtcbiAgJ2dsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XFxuJyArXG4gICd9Jztcbmdvb2cucHJvdmlkZSgndzY5Yi5zaGFkZXJzLnNjYWxlJyk7XG53NjliLnNoYWRlcnMuc2NhbGUgPSAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IHdpZHRoO1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCBoZWlnaHQ7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IGlud2lkdGg7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IGluaGVpZ2h0O1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCB0ZXh3aWR0aDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgdGV4aGVpZ2h0O1xcbicgK1xuICAndW5pZm9ybSB2ZWMyIGZyYWdDb29yZE9mZnNldDtcXG4nICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEIGltYWdlSW47XFxuJyArXG4gICd2ZWMyIGRpbSA9IHZlYzIod2lkdGgsIGhlaWdodCk7XFxuJyArXG4gICd2ZWMyIHRleGRpbSA9IHZlYzIodGV4d2lkdGgsIHRleGhlaWdodCk7XFxuJyArXG4gICd2ZWMyIGluZGltID0gdmVjMihpbndpZHRoLCBpbmhlaWdodCk7XFxuJyArXG4gICd2ZWMyIHRleHNjYWxlID0gaW5kaW0gLyB0ZXhkaW07XFxuJyArXG4gICd2ZWMyIGdldE5vcm1hbGl6ZWRGcmFnQ29vcmQoKSB7XFxuJyArXG4gICdyZXR1cm4gKGdsX0ZyYWdDb29yZC54eSAtIGZyYWdDb29yZE9mZnNldCkgKyAwLjU7XFxuJyArXG4gICd9XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IG91dE9mZnNldFg7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IGluT2Zmc2V0WDtcXG4nICtcbiAgJ3ZlYzIgb3V0T2Zmc2V0ID0gdmVjMihvdXRPZmZzZXRYLCAwKTtcXG4nICtcbiAgJ3ZlYzIgaW5PZmZzZXQgPSB2ZWMyKGluT2Zmc2V0WCwgMCkgLyB0ZXhkaW07XFxuJyArXG4gICd2ZWMyIHN0ZXBYID0gdmVjMigwLjcsIDApIC8gaW5kaW07XFxuJyArXG4gICd2ZWMyIHN0ZXBZID0gdmVjMigwLCAwLjcpIC8gaW5kaW07XFxuJyArXG4gICd2ZWMyIHNjYWxlID0gaW5kaW0gLyBkaW07XFxuJyArXG4gICd2ZWMzIGNvbWJpbmUodmVjMyBjb2xvcjEsIHZlYzMgY29sb3IyKSB7XFxuJyArXG4gICdyZXR1cm4gdmVjMyhcXG4nICtcbiAgJ21pbihjb2xvcjEueCwgY29sb3IyLngpLFxcbicgK1xuICAnbWF4KGNvbG9yMS55LCBjb2xvcjIueSksXFxuJyArXG4gICdjb2xvcjEueiArIGNvbG9yMi56KTtcXG4nICtcbiAgJ31cXG4nICtcbiAgJ3ZlYzMgc2FtcGxlKHZlYzIgcCwgdmVjMiBvZmZzZXQpIHtcXG4nICtcbiAgJ3ZlYzIgcG9zID0gKHAgKyBvZmZzZXQpO1xcbicgK1xuICAncG9zID0gbWluKHZlYzIoMS4wLCAxLjApLCBwb3MpO1xcbicgK1xuICAncG9zID0gbWF4KHZlYzIoMC4wLCAwLjApLCBwb3MpO1xcbicgK1xuICAncG9zID0gaW5PZmZzZXQgKyB0ZXhzY2FsZSAqIHBvcztcXG4nICtcbiAgJ3JldHVybiB0ZXh0dXJlMkQoaW1hZ2VJbiwgcG9zKS54eXo7XFxuJyArXG4gICd9XFxuJyArXG4gICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICd2ZWMyIHAgPSAoZ2V0Tm9ybWFsaXplZEZyYWdDb29yZCgpIC0gb3V0T2Zmc2V0KSAvIGRpbTtcXG4nICtcbiAgJ3ZlYzMgcmVzdWx0ID0gc2FtcGxlKHAsIC0gc3RlcFggLSBzdGVwWSk7XFxuJyArXG4gICdyZXN1bHQgPSBjb21iaW5lKHJlc3VsdCwgc2FtcGxlKHAsIHN0ZXBYICsgc3RlcFkpKTtcXG4nICtcbiAgJ3Jlc3VsdCA9IGNvbWJpbmUocmVzdWx0LCBzYW1wbGUocCwgc3RlcFggLSBzdGVwWSkpO1xcbicgK1xuICAncmVzdWx0ID0gY29tYmluZShyZXN1bHQsIHNhbXBsZShwLCAtc3RlcFggKyBzdGVwWSkpO1xcbicgK1xuICAncmVzdWx0LnogLz0gNC4wO1xcbicgK1xuICAnZ2xfRnJhZ0NvbG9yID0gdmVjNChyZXN1bHQsIDEuMCk7XFxuJyArXG4gICd9Jztcbmdvb2cucHJvdmlkZSgndzY5Yi5zaGFkZXJzLnRocmVzaG9sZCcpO1xudzY5Yi5zaGFkZXJzLnRocmVzaG9sZCA9ICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgd2lkdGg7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IGhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgaW53aWR0aDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgaW5oZWlnaHQ7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IHRleHdpZHRoO1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCB0ZXhoZWlnaHQ7XFxuJyArXG4gICd1bmlmb3JtIHZlYzIgZnJhZ0Nvb3JkT2Zmc2V0O1xcbicgK1xuICAndW5pZm9ybSBzYW1wbGVyMkQgaW1hZ2VJbjtcXG4nICtcbiAgJ3ZlYzIgZGltID0gdmVjMih3aWR0aCwgaGVpZ2h0KTtcXG4nICtcbiAgJ3ZlYzIgdGV4ZGltID0gdmVjMih0ZXh3aWR0aCwgdGV4aGVpZ2h0KTtcXG4nICtcbiAgJ3ZlYzIgaW5kaW0gPSB2ZWMyKGlud2lkdGgsIGluaGVpZ2h0KTtcXG4nICtcbiAgJ3ZlYzIgdGV4c2NhbGUgPSBpbmRpbSAvIHRleGRpbTtcXG4nICtcbiAgJ3ZlYzIgZ2V0Tm9ybWFsaXplZEZyYWdDb29yZCgpIHtcXG4nICtcbiAgJ3JldHVybiAoZ2xfRnJhZ0Nvb3JkLnh5IC0gZnJhZ0Nvb3JkT2Zmc2V0KSArIDAuNTtcXG4nICtcbiAgJ31cXG4nICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEIG9yaWdJbWFnZTtcXG4nICtcbiAgJ3ZlYzIgdGV4c2NhbGVCbGFja0xldmVscyA9IGluZGltIC8gdGV4ZGltO1xcbicgK1xuICAndm9pZCBtYWluKCkge1xcbicgK1xuICAndmVjMiBwID0gZ2V0Tm9ybWFsaXplZEZyYWdDb29yZCgpIC8gZGltO1xcbicgK1xuICAndmVjNCBjb2xvciA9IHRleHR1cmUyRChvcmlnSW1hZ2UsIHApO1xcbicgK1xuICAnZmxvYXQgZ3JheSA9IChjb2xvci5yICsgY29sb3IuZyArIGNvbG9yLmIpIC8gMy4wO1xcbicgK1xuICAnZmxvYXQgYmxhY2sgPSB0ZXh0dXJlMkQoaW1hZ2VJbiwgcCAqIHRleHNjYWxlQmxhY2tMZXZlbHMpLno7XFxuJyArXG4gICdmbG9hdCBiaW5hcnkgPSBncmF5ID4gYmxhY2sgPyAxLjAgOiAwLjA7XFxuJyArXG4gICdnbF9GcmFnQ29sb3IgPSB2ZWM0KGJpbmFyeSwgYmluYXJ5LCBiaW5hcnksIDEuMCk7XFxuJyArXG4gICd9Jztcbmdvb2cucHJvdmlkZSgndzY5Yi5zaGFkZXJzLmJpbmFyaXplQXZnMScpO1xudzY5Yi5zaGFkZXJzLmJpbmFyaXplQXZnMSA9ICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgd2lkdGg7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IGhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgaW53aWR0aDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgaW5oZWlnaHQ7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IHRleHdpZHRoO1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCB0ZXhoZWlnaHQ7XFxuJyArXG4gICd1bmlmb3JtIHZlYzIgZnJhZ0Nvb3JkT2Zmc2V0O1xcbicgK1xuICAndW5pZm9ybSBzYW1wbGVyMkQgaW1hZ2VJbjtcXG4nICtcbiAgJ3ZlYzIgZGltID0gdmVjMih3aWR0aCwgaGVpZ2h0KTtcXG4nICtcbiAgJ3ZlYzIgdGV4ZGltID0gdmVjMih0ZXh3aWR0aCwgdGV4aGVpZ2h0KTtcXG4nICtcbiAgJ3ZlYzIgaW5kaW0gPSB2ZWMyKGlud2lkdGgsIGluaGVpZ2h0KTtcXG4nICtcbiAgJ3ZlYzIgdGV4c2NhbGUgPSBpbmRpbSAvIHRleGRpbTtcXG4nICtcbiAgJ3ZlYzIgZ2V0Tm9ybWFsaXplZEZyYWdDb29yZCgpIHtcXG4nICtcbiAgJ3JldHVybiAoZ2xfRnJhZ0Nvb3JkLnh5IC0gZnJhZ0Nvb3JkT2Zmc2V0KSArIDAuNTtcXG4nICtcbiAgJ31cXG4nICtcbiAgJ3ZlYzIgbWlycm9yTWFyZ2luID0gMS4wIC8gaW5kaW07XFxuJyArXG4gICd2ZWMyIG1pcnJvckJvcmRlciA9IDEuMCAtIG1pcnJvck1hcmdpbjtcXG4nICtcbiAgJ3ZvaWQgbWlycm9yKGlub3V0IHZlYzIgcG9zKSB7XFxuJyArXG4gICdwb3MgPSBwb3MgLSBzdGVwKG1pcnJvckJvcmRlciwgcG9zKSAqIChwb3MgLSBtaXJyb3JCb3JkZXIpO1xcbicgK1xuICAncG9zICo9IDIuMCAqICgwLjUgLSBzdGVwKDAuMCwgLXBvcykpO1xcbicgK1xuICAnfVxcbicgK1xuICAndW5pZm9ybSB2ZWMyIHNhbXBsZURpcmVjdGlvbjtcXG4nICtcbiAgJ3ZlYzIgc2FtcGxlU3RlcCA9IHNhbXBsZURpcmVjdGlvbiAvIGluZGltO1xcbicgK1xuICAndm9pZCBhZGRTYW1wbGUoaW5vdXQgdmVjNCByZXN1bHQsIHZlYzIgcCwgZmxvYXQgb2Zmc2V0LCBmbG9hdCB3ZWlnaHQpIHtcXG4nICtcbiAgJ3ZlYzIgcG9zID0gKHAgKyBvZmZzZXQgKiBzYW1wbGVTdGVwKTtcXG4nICtcbiAgJ21pcnJvcihwb3MpO1xcbicgK1xuICAncG9zICo9IHRleHNjYWxlO1xcbicgK1xuICAndmVjNCBjb2xvciA9IHRleHR1cmUyRChpbWFnZUluLCBwb3MpO1xcbicgK1xuICAnZmxvYXQgZ3JheSA9IChjb2xvci5yICsgY29sb3IuZyArIGNvbG9yLmIpIC8gMy4wO1xcbicgK1xuICAncmVzdWx0LnIgPSBtaW4ocmVzdWx0LnIsIGdyYXkpO1xcbicgK1xuICAncmVzdWx0LmcgPSBtYXgocmVzdWx0LmcsIGdyYXkpO1xcbicgK1xuICAncmVzdWx0LmIgKz0gZ3JheSAqIHdlaWdodDtcXG4nICtcbiAgJ31cXG4nICtcbiAgJ3ZvaWQgZ2F1c3M5KGlub3V0IHZlYzQgcmVzdWx0LCB2ZWMyIHApIHtcXG4nICtcbiAgJ2FkZFNhbXBsZShyZXN1bHQsIHAsIC00LjAsIDAuMDQ1OSk7XFxuJyArXG4gICdhZGRTYW1wbGUocmVzdWx0LCBwLCAtMy4wLCAwLjA4MjIpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgLTIuMCwgMC4xMjQ3KTtcXG4nICtcbiAgJ2FkZFNhbXBsZShyZXN1bHQsIHAsIC0xLjAsIDAuMTYwMSk7XFxuJyArXG4gICdhZGRTYW1wbGUocmVzdWx0LCBwLCAwLjAsIDAuMTc0MSk7XFxuJyArXG4gICdhZGRTYW1wbGUocmVzdWx0LCBwLCAxLjAsIDAuMTYwMSk7XFxuJyArXG4gICdhZGRTYW1wbGUocmVzdWx0LCBwLCAyLjAsIDAuMTI0Nyk7XFxuJyArXG4gICdhZGRTYW1wbGUocmVzdWx0LCBwLCAzLjAsIDAuMDgyMik7XFxuJyArXG4gICdhZGRTYW1wbGUocmVzdWx0LCBwLCA0LjAsIDAuMDQ1OSk7XFxuJyArXG4gICd9XFxuJyArXG4gICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICd2ZWMyIHAgPSBnZXROb3JtYWxpemVkRnJhZ0Nvb3JkKCkgLyBkaW07XFxuJyArXG4gICd2ZWM0IHJlc3VsdCAgPSB2ZWM0KDEuMCwgMC4wLCAwLjAsIDEuMCk7XFxuJyArXG4gICdnYXVzczkocmVzdWx0LCBwKTtcXG4nICtcbiAgJ2dsX0ZyYWdDb2xvciA9IHJlc3VsdDtcXG4nICtcbiAgJ30nO1xuZ29vZy5wcm92aWRlKCd3NjliLnNoYWRlcnMuYmluYXJpemVHcm91cCcpO1xudzY5Yi5zaGFkZXJzLmJpbmFyaXplR3JvdXAgPSAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IHdpZHRoO1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCBoZWlnaHQ7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IGlud2lkdGg7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IGluaGVpZ2h0O1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCB0ZXh3aWR0aDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgdGV4aGVpZ2h0O1xcbicgK1xuICAndW5pZm9ybSB2ZWMyIGZyYWdDb29yZE9mZnNldDtcXG4nICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEIGltYWdlSW47XFxuJyArXG4gICd2ZWMyIGRpbSA9IHZlYzIod2lkdGgsIGhlaWdodCk7XFxuJyArXG4gICd2ZWMyIHRleGRpbSA9IHZlYzIodGV4d2lkdGgsIHRleGhlaWdodCk7XFxuJyArXG4gICd2ZWMyIGluZGltID0gdmVjMihpbndpZHRoLCBpbmhlaWdodCk7XFxuJyArXG4gICd2ZWMyIHRleHNjYWxlID0gaW5kaW0gLyB0ZXhkaW07XFxuJyArXG4gICd2ZWMyIGdldE5vcm1hbGl6ZWRGcmFnQ29vcmQoKSB7XFxuJyArXG4gICdyZXR1cm4gKGdsX0ZyYWdDb29yZC54eSAtIGZyYWdDb29yZE9mZnNldCkgKyAwLjU7XFxuJyArXG4gICd9XFxuJyArXG4gICd2ZWMyIG1pcnJvck1hcmdpbiA9IDEuMCAvIGluZGltO1xcbicgK1xuICAndmVjMiBtaXJyb3JCb3JkZXIgPSAxLjAgLSBtaXJyb3JNYXJnaW47XFxuJyArXG4gICd2b2lkIG1pcnJvcihpbm91dCB2ZWMyIHBvcykge1xcbicgK1xuICAncG9zID0gcG9zIC0gc3RlcChtaXJyb3JCb3JkZXIsIHBvcykgKiAocG9zIC0gbWlycm9yQm9yZGVyKTtcXG4nICtcbiAgJ3BvcyAqPSAyLjAgKiAoMC41IC0gc3RlcCgwLjAsIC1wb3MpKTtcXG4nICtcbiAgJ31cXG4nICtcbiAgJ3VuaWZvcm0gdmVjMiBzYW1wbGVEaXJlY3Rpb247XFxuJyArXG4gICd1bmlmb3JtIHZlYzIgb3V0T2Zmc2V0O1xcbicgK1xuICAndW5pZm9ybSB2ZWMyIGluT2Zmc2V0O1xcbicgK1xuICAndmVjMiBpbk9mZnNldE5vcm1hbGl6ZWQgPSBpbk9mZnNldCAvIHRleGRpbTtcXG4nICtcbiAgJ3ZlYzIgc2FtcGxlU3RlcCA9IHNhbXBsZURpcmVjdGlvbiAvIGluZGltO1xcbicgK1xuICAndm9pZCBhZGRTYW1wbGUoaW5vdXQgdmVjNCByZXN1bHQsIHZlYzIgcCwgZmxvYXQgb2Zmc2V0LCBmbG9hdCB3ZWlnaHQpIHtcXG4nICtcbiAgJ3ZlYzIgcG9zID0gKHAgKyBvZmZzZXQgKiBzYW1wbGVTdGVwKTtcXG4nICtcbiAgJ21pcnJvcihwb3MpO1xcbicgK1xuICAncG9zICo9IHRleHNjYWxlO1xcbicgK1xuICAncG9zICs9IGluT2Zmc2V0Tm9ybWFsaXplZDtcXG4nICtcbiAgJ3ZlYzQgY29sb3IgPSB0ZXh0dXJlMkQoaW1hZ2VJbiwgcG9zKTtcXG4nICtcbiAgJ3Jlc3VsdC5yID0gbWluKHJlc3VsdC5yLCBjb2xvci5yKTtcXG4nICtcbiAgJ3Jlc3VsdC5nID0gbWF4KHJlc3VsdC5nLCBjb2xvci5nKTtcXG4nICtcbiAgJ3Jlc3VsdC5iICs9IGNvbG9yLmIgKiB3ZWlnaHQ7XFxuJyArXG4gICd9XFxuJyArXG4gICd2b2lkIGdhdXNzOShpbm91dCB2ZWM0IHJlc3VsdCwgdmVjMiBwKSB7XFxuJyArXG4gICdhZGRTYW1wbGUocmVzdWx0LCBwLCAtNC4wLCAwLjA0NTkpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgLTMuMCwgMC4wODIyKTtcXG4nICtcbiAgJ2FkZFNhbXBsZShyZXN1bHQsIHAsIC0yLjAsIDAuMTI0Nyk7XFxuJyArXG4gICdhZGRTYW1wbGUocmVzdWx0LCBwLCAtMS4wLCAwLjE2MDEpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgMC4wLCAwLjE3NDEpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgMS4wLCAwLjE2MDEpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgMi4wLCAwLjEyNDcpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgMy4wLCAwLjA4MjIpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgNC4wLCAwLjA0NTkpO1xcbicgK1xuICAnfVxcbicgK1xuICAndm9pZCBtYWluKCkge1xcbicgK1xuICAndmVjMiBwID0gKGdldE5vcm1hbGl6ZWRGcmFnQ29vcmQoKSAtIG91dE9mZnNldCkgLyBkaW07XFxuJyArXG4gICd2ZWM0IHJlc3VsdCAgPSB2ZWM0KDAuMCwgMC4wLCAwLjAsIDEuMCk7XFxuJyArXG4gICdnYXVzczkocmVzdWx0LCBwKTtcXG4nICtcbiAgJy8vIC8vXFxuJyArXG4gICdnbF9GcmFnQ29sb3IgPSByZXN1bHQ7XFxuJyArXG4gICcvL1xcbicgK1xuICAnfSc7XG5nb29nLnByb3ZpZGUoJ3c2OWIuc2hhZGVycy5kZWJ1ZycpO1xudzY5Yi5zaGFkZXJzLmRlYnVnID0gJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCB3aWR0aDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgaGVpZ2h0O1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCBpbndpZHRoO1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCBpbmhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgdGV4d2lkdGg7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IHRleGhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gdmVjMiBmcmFnQ29vcmRPZmZzZXQ7XFxuJyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCBpbWFnZUluO1xcbicgK1xuICAndmVjMiBkaW0gPSB2ZWMyKHdpZHRoLCBoZWlnaHQpO1xcbicgK1xuICAndmVjMiB0ZXhkaW0gPSB2ZWMyKHRleHdpZHRoLCB0ZXhoZWlnaHQpO1xcbicgK1xuICAndmVjMiBpbmRpbSA9IHZlYzIoaW53aWR0aCwgaW5oZWlnaHQpO1xcbicgK1xuICAndmVjMiB0ZXhzY2FsZSA9IGluZGltIC8gdGV4ZGltO1xcbicgK1xuICAndmVjMiBnZXROb3JtYWxpemVkRnJhZ0Nvb3JkKCkge1xcbicgK1xuICAncmV0dXJuIChnbF9GcmFnQ29vcmQueHkgLSBmcmFnQ29vcmRPZmZzZXQpICsgMC41O1xcbicgK1xuICAnfVxcbicgK1xuICAndW5pZm9ybSB2ZWMyIG91dE9mZnNldDtcXG4nICtcbiAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgJ3ZlYzIgcCA9IChnZXROb3JtYWxpemVkRnJhZ0Nvb3JkKCkgLSBvdXRPZmZzZXQpIC8gZGltO1xcbicgK1xuICAndmVjNCBjb2xvciA9IHZlYzQoMS4wKTtcXG4nICtcbiAgJ2NvbG9yLnJnID0gcDtcXG4nICtcbiAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAnfSc7XG5nb29nLnByb3ZpZGUoJ3c2OWIuc2hhZGVycy5kdW1teScpO1xudzY5Yi5zaGFkZXJzLmR1bW15ID0gJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCB3aWR0aDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgaGVpZ2h0O1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCBpbndpZHRoO1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCBpbmhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgdGV4d2lkdGg7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IHRleGhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gdmVjMiBmcmFnQ29vcmRPZmZzZXQ7XFxuJyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCBpbWFnZUluO1xcbicgK1xuICAndmVjMiBkaW0gPSB2ZWMyKHdpZHRoLCBoZWlnaHQpO1xcbicgK1xuICAndmVjMiB0ZXhkaW0gPSB2ZWMyKHRleHdpZHRoLCB0ZXhoZWlnaHQpO1xcbicgK1xuICAndmVjMiBpbmRpbSA9IHZlYzIoaW53aWR0aCwgaW5oZWlnaHQpO1xcbicgK1xuICAndmVjMiB0ZXhzY2FsZSA9IGluZGltIC8gdGV4ZGltO1xcbicgK1xuICAndmVjMiBnZXROb3JtYWxpemVkRnJhZ0Nvb3JkKCkge1xcbicgK1xuICAncmV0dXJuIChnbF9GcmFnQ29vcmQueHkgLSBmcmFnQ29vcmRPZmZzZXQpICsgMC41O1xcbicgK1xuICAnfVxcbicgK1xuICAndmVjMiBtaXJyb3JNYXJnaW4gPSAxLjAgLyBpbmRpbTtcXG4nICtcbiAgJ3ZlYzIgbWlycm9yQm9yZGVyID0gMS4wIC0gbWlycm9yTWFyZ2luO1xcbicgK1xuICAndm9pZCBtaXJyb3IoaW5vdXQgdmVjMiBwb3MpIHtcXG4nICtcbiAgJ3BvcyA9IHBvcyAtIHN0ZXAobWlycm9yQm9yZGVyLCBwb3MpICogKHBvcyAtIG1pcnJvckJvcmRlcik7XFxuJyArXG4gICdwb3MgKj0gMi4wICogKDAuNSAtIHN0ZXAoMC4wLCAtcG9zKSk7XFxuJyArXG4gICd9XFxuJyArXG4gICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICd2ZWMyIHAgPSAoZ2V0Tm9ybWFsaXplZEZyYWdDb29yZCgpIC8gZGltKTtcXG4nICtcbiAgJ21pcnJvcihwKTtcXG4nICtcbiAgJ3AgKj0gdGV4c2NhbGU7XFxuJyArXG4gICdnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoaW1hZ2VJbiwgcCk7XFxuJyArXG4gICd9Jztcbmdvb2cucHJvdmlkZSgndzY5Yi5zaGFkZXJzLmVzdGltYXRlQmxhY2snKTtcbnc2OWIuc2hhZGVycy5lc3RpbWF0ZUJsYWNrID0gJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCB3aWR0aDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgaGVpZ2h0O1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCBpbndpZHRoO1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCBpbmhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgdGV4d2lkdGg7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IHRleGhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gdmVjMiBmcmFnQ29vcmRPZmZzZXQ7XFxuJyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCBpbWFnZUluO1xcbicgK1xuICAndmVjMiBkaW0gPSB2ZWMyKHdpZHRoLCBoZWlnaHQpO1xcbicgK1xuICAndmVjMiB0ZXhkaW0gPSB2ZWMyKHRleHdpZHRoLCB0ZXhoZWlnaHQpO1xcbicgK1xuICAndmVjMiBpbmRpbSA9IHZlYzIoaW53aWR0aCwgaW5oZWlnaHQpO1xcbicgK1xuICAndmVjMiB0ZXhzY2FsZSA9IGluZGltIC8gdGV4ZGltO1xcbicgK1xuICAndmVjMiBnZXROb3JtYWxpemVkRnJhZ0Nvb3JkKCkge1xcbicgK1xuICAncmV0dXJuIChnbF9GcmFnQ29vcmQueHkgLSBmcmFnQ29vcmRPZmZzZXQpICsgMC41O1xcbicgK1xuICAnfVxcbicgK1xuICAndmVjMiBtaXJyb3JNYXJnaW4gPSAxLjAgLyBpbmRpbTtcXG4nICtcbiAgJ3ZlYzIgbWlycm9yQm9yZGVyID0gMS4wIC0gbWlycm9yTWFyZ2luO1xcbicgK1xuICAndm9pZCBtaXJyb3IoaW5vdXQgdmVjMiBwb3MpIHtcXG4nICtcbiAgJ3BvcyA9IHBvcyAtIHN0ZXAobWlycm9yQm9yZGVyLCBwb3MpICogKHBvcyAtIG1pcnJvckJvcmRlcik7XFxuJyArXG4gICdwb3MgKj0gMi4wICogKDAuNSAtIHN0ZXAoMC4wLCAtcG9zKSk7XFxuJyArXG4gICd9XFxuJyArXG4gICd2ZWM0IHNhbXBsZUF0KHZlYzIgcG9zLCBmbG9hdCBzY2FsZSkge1xcbicgK1xuICAnbWlycm9yKHBvcyk7XFxuJyArXG4gICd2ZWMyIG9mZnNldCA9IHNjYWxlICogdmVjMihpbmRpbS54LCAwKSAvIHRleGRpbTtcXG4nICtcbiAgJ3BvcyA9IHBvcyAqIHRleHNjYWxlICsgb2Zmc2V0O1xcbicgK1xuICAncmV0dXJuIHRleHR1cmUyRChpbWFnZUluLCBwb3MpO1xcbicgK1xuICAnfVxcbicgK1xuICAnZmxvYXQgZ2V0RHluUmFuZ2UodmVjNCBjb2xvcikge1xcbicgK1xuICAncmV0dXJuIGNvbG9yLmcgLSBjb2xvci5yO1xcbicgK1xuICAnfVxcbicgK1xuICAndm9pZCBtYWluKCkge1xcbicgK1xuICAndmVjMiBwID0gZ2V0Tm9ybWFsaXplZEZyYWdDb29yZCgpIC8gZGltO1xcbicgK1xuICAndmVjNCBjb2xvcjtcXG4nICtcbiAgJ2Zsb2F0IG1pbkR5blJhbmdlID0gMC4zO1xcbicgK1xuICAnY29sb3IgPSBzYW1wbGVBdChwLCAwLjApO1xcbicgK1xuICAnaWYgKGdldER5blJhbmdlKGNvbG9yKSA8IG1pbkR5blJhbmdlKSB7XFxuJyArXG4gICdjb2xvciA9IHNhbXBsZUF0KHAsIDEuMCk7XFxuJyArXG4gICdpZiAoZ2V0RHluUmFuZ2UoY29sb3IpIDwgbWluRHluUmFuZ2UpIHtcXG4nICtcbiAgJ2NvbG9yID0gc2FtcGxlQXQocCwgMi4wKTtcXG4nICtcbiAgJ31cXG4nICtcbiAgJ31cXG4nICtcbiAgJ2NvbG9yLnogLT0gMC4wMjtcXG4nICtcbiAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAnfSc7XG5nb29nLnByb3ZpZGUoJ3c2OWIuc2hhZGVycy5leHRyYWN0Q2hhbm5lbCcpO1xudzY5Yi5zaGFkZXJzLmV4dHJhY3RDaGFubmVsID0gJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCB3aWR0aDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgaGVpZ2h0O1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCBpbndpZHRoO1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCBpbmhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgdGV4d2lkdGg7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IHRleGhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gdmVjMiBmcmFnQ29vcmRPZmZzZXQ7XFxuJyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCBpbWFnZUluO1xcbicgK1xuICAndmVjMiBkaW0gPSB2ZWMyKHdpZHRoLCBoZWlnaHQpO1xcbicgK1xuICAndmVjMiB0ZXhkaW0gPSB2ZWMyKHRleHdpZHRoLCB0ZXhoZWlnaHQpO1xcbicgK1xuICAndmVjMiBpbmRpbSA9IHZlYzIoaW53aWR0aCwgaW5oZWlnaHQpO1xcbicgK1xuICAndmVjMiB0ZXhzY2FsZSA9IGluZGltIC8gdGV4ZGltO1xcbicgK1xuICAndmVjMiBnZXROb3JtYWxpemVkRnJhZ0Nvb3JkKCkge1xcbicgK1xuICAncmV0dXJuIChnbF9GcmFnQ29vcmQueHkgLSBmcmFnQ29vcmRPZmZzZXQpICsgMC41O1xcbicgK1xuICAnfVxcbicgK1xuICAndW5pZm9ybSBpbnQgY2hhbm5lbDtcXG4nICtcbiAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgJ3ZlYzIgcCA9IChnZXROb3JtYWxpemVkRnJhZ0Nvb3JkKCkgLyBkaW0pO1xcbicgK1xuICAncCAqPSB0ZXhzY2FsZTtcXG4nICtcbiAgJ3ZlYzQgY29sb3IgPSB0ZXh0dXJlMkQoaW1hZ2VJbiwgcCk7XFxuJyArXG4gICdmbG9hdCBncmF5ID0gY29sb3IuYjtcXG4nICtcbiAgJ2dsX0ZyYWdDb2xvciA9IHZlYzQoZ3JheSwgZ3JheSwgZ3JheSwgMS4wKTtcXG4nICtcbiAgJ30nO1xuZ29vZy5wcm92aWRlKCd3NjliLnNoYWRlcnMuZnJhZ0Nvb3JkVGVzdCcpO1xudzY5Yi5zaGFkZXJzLmZyYWdDb29yZFRlc3QgPSAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuJyArXG4gICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICd2ZWM0IHJlc3VsdCA9IHZlYzQoMS4wKTtcXG4nICtcbiAgJ3Jlc3VsdC5yZyA9IGdsX0ZyYWdDb29yZC54eSAvIDEwLjA7XFxuJyArXG4gICdnbF9GcmFnQ29sb3IgPSByZXN1bHQ7XFxuJyArXG4gICd9Jztcbmdvb2cucHJvdmlkZSgndzY5Yi5zaGFkZXJzLmdhdXNzQmx1cicpO1xudzY5Yi5zaGFkZXJzLmdhdXNzQmx1ciA9ICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgd2lkdGg7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IGhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgaW53aWR0aDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgaW5oZWlnaHQ7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IHRleHdpZHRoO1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCB0ZXhoZWlnaHQ7XFxuJyArXG4gICd1bmlmb3JtIHZlYzIgZnJhZ0Nvb3JkT2Zmc2V0O1xcbicgK1xuICAndW5pZm9ybSBzYW1wbGVyMkQgaW1hZ2VJbjtcXG4nICtcbiAgJ3ZlYzIgZGltID0gdmVjMih3aWR0aCwgaGVpZ2h0KTtcXG4nICtcbiAgJ3ZlYzIgdGV4ZGltID0gdmVjMih0ZXh3aWR0aCwgdGV4aGVpZ2h0KTtcXG4nICtcbiAgJ3ZlYzIgaW5kaW0gPSB2ZWMyKGlud2lkdGgsIGluaGVpZ2h0KTtcXG4nICtcbiAgJ3ZlYzIgdGV4c2NhbGUgPSBpbmRpbSAvIHRleGRpbTtcXG4nICtcbiAgJ3ZlYzIgZ2V0Tm9ybWFsaXplZEZyYWdDb29yZCgpIHtcXG4nICtcbiAgJ3JldHVybiAoZ2xfRnJhZ0Nvb3JkLnh5IC0gZnJhZ0Nvb3JkT2Zmc2V0KSArIDAuNTtcXG4nICtcbiAgJ31cXG4nICtcbiAgJ3ZlYzIgbWlycm9yTWFyZ2luID0gMS4wIC8gaW5kaW07XFxuJyArXG4gICd2ZWMyIG1pcnJvckJvcmRlciA9IDEuMCAtIG1pcnJvck1hcmdpbjtcXG4nICtcbiAgJ3ZvaWQgbWlycm9yKGlub3V0IHZlYzIgcG9zKSB7XFxuJyArXG4gICdwb3MgPSBwb3MgLSBzdGVwKG1pcnJvckJvcmRlciwgcG9zKSAqIChwb3MgLSBtaXJyb3JCb3JkZXIpO1xcbicgK1xuICAncG9zICo9IDIuMCAqICgwLjUgLSBzdGVwKDAuMCwgLXBvcykpO1xcbicgK1xuICAnfVxcbicgK1xuICAndW5pZm9ybSB2ZWMyIHNhbXBsZURpcmVjdGlvbjtcXG4nICtcbiAgJ3VuaWZvcm0gdmVjMiBvdXRPZmZzZXQ7XFxuJyArXG4gICd1bmlmb3JtIHZlYzIgaW5PZmZzZXQ7XFxuJyArXG4gICd2ZWMyIHNhbXBsZVN0ZXAgPSBzYW1wbGVEaXJlY3Rpb24gLyB0ZXhkaW07XFxuJyArXG4gICd2ZWMyIGluT2Zmc2V0Tm9ybWFsaXplZCA9IGluT2Zmc2V0IC8gdGV4ZGltO1xcbicgK1xuICAndm9pZCBhZGRTYW1wbGUoaW5vdXQgdmVjNCByZXN1bHQsIHZlYzIgcCwgZmxvYXQgb2Zmc2V0LCBmbG9hdCB3ZWlnaHQpIHtcXG4nICtcbiAgJ3ZlYzIgcG9zID0gKHAgKyAob2Zmc2V0ICogc2FtcGxlU3RlcCkpO1xcbicgK1xuICAnbWlycm9yKHBvcyk7XFxuJyArXG4gICdwb3MgKj0gdGV4c2NhbGU7XFxuJyArXG4gICdwb3MgKz0gaW5PZmZzZXROb3JtYWxpemVkO1xcbicgK1xuICAndmVjNCBjb2xvciA9IHRleHR1cmUyRChpbWFnZUluLCBwb3MpO1xcbicgK1xuICAncmVzdWx0LnJnYiArPSBjb2xvci5yZ2IgKiB3ZWlnaHQ7XFxuJyArXG4gICd9XFxuJyArXG4gICd2b2lkIGdhdXNzOShpbm91dCB2ZWM0IHJlc3VsdCwgdmVjMiBwKSB7XFxuJyArXG4gICdhZGRTYW1wbGUocmVzdWx0LCBwLCAtNC4wLCAwLjA0NTkpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgLTMuMCwgMC4wODIyKTtcXG4nICtcbiAgJ2FkZFNhbXBsZShyZXN1bHQsIHAsIC0yLjAsIDAuMTI0Nyk7XFxuJyArXG4gICdhZGRTYW1wbGUocmVzdWx0LCBwLCAtMS4wLCAwLjE2MDEpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgMC4wLCAwLjE3NDEpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgMS4wLCAwLjE2MDEpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgMi4wLCAwLjEyNDcpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgMy4wLCAwLjA4MjIpO1xcbicgK1xuICAnYWRkU2FtcGxlKHJlc3VsdCwgcCwgNC4wLCAwLjA0NTkpO1xcbicgK1xuICAnfVxcbicgK1xuICAndm9pZCBtYWluKCkge1xcbicgK1xuICAndmVjMiBwID0gKGdldE5vcm1hbGl6ZWRGcmFnQ29vcmQoKSAtIG91dE9mZnNldCkgLyBkaW07XFxuJyArXG4gICd2ZWM0IHJlc3VsdCAgPSB2ZWM0KDAuMCwgMC4wLCAwLjAsIDEuMCk7XFxuJyArXG4gICdnYXVzczkocmVzdWx0LCBwKTtcXG4nICtcbiAgJ2dsX0ZyYWdDb2xvciA9IHJlc3VsdDtcXG4nICtcbiAgJ30nO1xuZ29vZy5wcm92aWRlKCd3NjliLnNoYWRlcnMuZ3JheXNjYWxlJyk7XG53NjliLnNoYWRlcnMuZ3JheXNjYWxlID0gJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCB3aWR0aDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgaGVpZ2h0O1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCBpbndpZHRoO1xcbicgK1xuICAndW5pZm9ybSBmbG9hdCBpbmhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gZmxvYXQgdGV4d2lkdGg7XFxuJyArXG4gICd1bmlmb3JtIGZsb2F0IHRleGhlaWdodDtcXG4nICtcbiAgJ3VuaWZvcm0gdmVjMiBmcmFnQ29vcmRPZmZzZXQ7XFxuJyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCBpbWFnZUluO1xcbicgK1xuICAndmVjMiBkaW0gPSB2ZWMyKHdpZHRoLCBoZWlnaHQpO1xcbicgK1xuICAndmVjMiB0ZXhkaW0gPSB2ZWMyKHRleHdpZHRoLCB0ZXhoZWlnaHQpO1xcbicgK1xuICAndmVjMiBpbmRpbSA9IHZlYzIoaW53aWR0aCwgaW5oZWlnaHQpO1xcbicgK1xuICAndmVjMiB0ZXhzY2FsZSA9IGluZGltIC8gdGV4ZGltO1xcbicgK1xuICAndmVjMiBnZXROb3JtYWxpemVkRnJhZ0Nvb3JkKCkge1xcbicgK1xuICAncmV0dXJuIChnbF9GcmFnQ29vcmQueHkgLSBmcmFnQ29vcmRPZmZzZXQpICsgMC41O1xcbicgK1xuICAnfVxcbicgK1xuICAndm9pZCBtYWluKCkge1xcbicgK1xuICAndmVjMiBwID0gKGdldE5vcm1hbGl6ZWRGcmFnQ29vcmQoKSAvIGRpbSk7XFxuJyArXG4gICdwICo9IHRleHNjYWxlO1xcbicgK1xuICAndmVjNCBjb2xvciA9IHRleHR1cmUyRChpbWFnZUluLCBwKTtcXG4nICtcbiAgJ2Zsb2F0IGdyYXkgPSAoY29sb3IuciArIGNvbG9yLmcgKyBjb2xvci5iKSAvIDMuMDtcXG4nICtcbiAgJ2dsX0ZyYWdDb2xvciA9IHZlYzQoZ3JheSwgZ3JheSwgZ3JheSwgMS4wKTtcXG4nICtcbiAgJ30nOyIsIi8vIChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5pbWcuV2ViR0xQcm9ncmFtJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuc2hhZGVycy5yZWN0VmVydGV4Jyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiBGaWx0ZXJzIGltYWdlcyB1c2luZyB3ZWJnbCBzaGFkZXJzLlxuICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgcmVuZGVyaW5nIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmcmFnbWVudFNvdXJjZSBmcmFnbWVudFNvdXJjZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfdmVydGV4U291cmNlIHZlcnRleCBzaGFkZXIuXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdzY5Yi5pbWcuV2ViR0xQcm9ncmFtID0gZnVuY3Rpb24oZ2wsIGZyYWdtZW50U291cmNlLCBvcHRfdmVydGV4U291cmNlKSB7XG4gICAgdGhpcy5jb250ZXh0XyA9IGdsO1xuICAgIHZhciB2ZXJ0ZXhTaGFkZXIgPSB0aGlzLmJ1aWxkU2hhZGVyXyhcbiAgICAgIG9wdF92ZXJ0ZXhTb3VyY2UgfHwgdzY5Yi5zaGFkZXJzLnJlY3RWZXJ0ZXgsIHRydWUpO1xuICAgIHZhciBmcmFnbWVudFNoYWRlciA9IHRoaXMuYnVpbGRTaGFkZXJfKGZyYWdtZW50U291cmNlLCBmYWxzZSk7XG4gICAgdmFyIHNoYWRlclByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIHZlcnRleFNoYWRlcik7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcbiAgICBnbC5saW5rUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcbiAgICBpZiAoIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIoc2hhZGVyUHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ291bGQgbm90IGxpbmsgc2hhZGVyIHByb2dyYW06ICcgK1xuICAgICAgICBnbC5nZXRQcm9ncmFtSW5mb0xvZyhzaGFkZXJQcm9ncmFtKSk7XG4gICAgfVxuICAgIHRoaXMuZ2xQcm9ncmFtID0gc2hhZGVyUHJvZ3JhbTtcbiAgfTtcbiAgdmFyIHBybyA9IHc2OWIuaW1nLldlYkdMUHJvZ3JhbS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIExpbmtlZCBzaGFkZXIgcHJvZ3JhbS5cbiAgICovXG4gIHByby5nbFByb2dyYW0gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCByZW5kZXJpbmcgY29udGV4dC5cbiAgICovXG4gIHByby5jb250ZXhfID0gbnVsbDtcblxuXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgY29tbW9uIHNoYWRlciBhdHRyaWJ1dGVzLlxuICAgKi9cbiAgcHJvLmluaXRDb21tb25BdHRyaWJ1dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdsID0gdGhpcy5jb250ZXh0XztcbiAgICB2YXIgcHJvZ3JhbSA9IHRoaXMuZ2xQcm9ncmFtO1xuICAgIHZhciBwb3NpdGlvbkxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgJ3Bvc2l0aW9uJyk7XG4gICAgdmFyIGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgIHZhciB2ZXJ0aWNlcyA9IFstMSwgLTEsIDEsIC0xLCAtMSwgMSwgLTEsIDEsIDEsIC0xLCAxLCAxXTtcblxuICAgIC8vc2V0IHBvc2l0aW9uIGF0dHJpYnV0ZSBkYXRhXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlcik7XG4gICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkodmVydGljZXMpLCBnbC5TVEFUSUNfRFJBVyk7XG4gICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocG9zaXRpb25Mb2NhdGlvbik7XG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihwb3NpdGlvbkxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgdGhpcyBwcm9ncmFtLlxuICAgKi9cbiAgcHJvLnVzZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY29udGV4dF8udXNlUHJvZ3JhbSh0aGlzLmdsUHJvZ3JhbSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIERyYXdzIHJlY3RhbmdlbGUuIEluaXRDb21tb25BdHRyaWJ1dGVzIG5lZWRzIHRvIGhhdmUgYmVlbiBjYWxsZWQgZmlyc3QuXG4gICAqL1xuICBwcm8uZHJhd1JlY3QgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZ2wgPSB0aGlzLmNvbnRleHRfO1xuICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCA2KTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdmFyaWFibGUgbmFtZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIGZsb2F0IHZhbHVlLlxuICAgKi9cbiAgcHJvLnNldFVuaWZvcm0xZiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5jb250ZXh0Xy5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nbFByb2dyYW0sIG5hbWUpO1xuICAgIHRoaXMuY29udGV4dF8udW5pZm9ybTFmKGxvY2F0aW9uLCB2YWx1ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZvciB2ZWMyLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB2YXJpYWJsZSBuYW1lLlxuICAgKiBAcGFyYW0ge251bWJlcn0geCBmbG9hdCB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgZmxvYXQgdmFsdWUuXG4gICAqL1xuICBwcm8uc2V0VW5pZm9ybTJmID0gZnVuY3Rpb24obmFtZSwgeCwgeSkge1xuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMuY29udGV4dF8uZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ2xQcm9ncmFtLCBuYW1lKTtcbiAgICB0aGlzLmNvbnRleHRfLnVuaWZvcm0yZihsb2NhdGlvbiwgeCwgeSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHZhcmlhYmxlIG5hbWUuXG4gICAqIEBwYXJhbSB7KEFycmF5LjxudW1iZXI+fEZsb2F0MzJBcnJheSl9IHZhbHVlIGZsb2F0IHZhbHVlLlxuICAgKi9cbiAgcHJvLnNldFVuaWZvcm0xZnYgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMuY29udGV4dF8uZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ2xQcm9ncmFtLCBuYW1lKTtcbiAgICB0aGlzLmNvbnRleHRfLnVuaWZvcm0xZnYobG9jYXRpb24sIHZhbHVlKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdmFyaWFibGUgbmFtZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIGludCB2YWx1ZS5cbiAgICovXG4gIHByby5zZXRVbmlmb3JtMWkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMuY29udGV4dF8uZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ2xQcm9ncmFtLCBuYW1lKTtcbiAgICB0aGlzLmNvbnRleHRfLnVuaWZvcm0xaShsb2NhdGlvbiwgdmFsdWUpO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge09iamVjdH0gbWFwcGluZyBvZiB0eXBlIG5hbWVzIHRvIHVuYm91bmQgc2V0dGVyIGZ1bmN0aW9ucy5cbiAgICovXG4gIHByby5nZXROYW1lZFNldHRlckZ1bmN0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWVkU2V0dGVyRm5zXztcbiAgfTtcblxuICAvKipcbiAgICogQHR5cGUge09iamVjdH0gbWFwcGluZyB0eXBlIG5hbWVzIHRvIHNldHRlciBmdW5jdGlvbnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8ubmFtZWRTZXR0ZXJGbnNfID0ge1xuICAgICcxaSc6IHByby5zZXRVbmlmb3JtMWksXG4gICAgJzFmJzogcHJvLnNldFVuaWZvcm0xZixcbiAgICAnMmYnOiBwcm8uc2V0VW5pZm9ybTJmXG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2Ugc2hhZGVyIHNvdXJjZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpc1ZlcnRleCB0cnVlIGZvciB2ZXJ0ZXggc2hhZGVyLCBmYWxzZSBmb3IgZnJhZ21lbnRcbiAgICogc2hhZGVyLlxuICAgKiBAcmV0dXJuIHtXZWJHTFNoYWRlcn0gc2hhZGVyLlxuICAgKi9cbiAgcHJvLmJ1aWxkU2hhZGVyXyA9IGZ1bmN0aW9uKHNvdXJjZSwgaXNWZXJ0ZXgpIHtcbiAgICB2YXIgZ2wgPSB0aGlzLmNvbnRleHRfO1xuICAgIHZhciBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoXG4gICAgICBpc1ZlcnRleCA/IGdsLlZFUlRFWF9TSEFERVIgOiBnbC5GUkFHTUVOVF9TSEFERVIpO1xuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XG4gICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ291bGQgbm90IGNvbXBpbGUgc2hhZGVyOiAnICtcbiAgICAgICAgZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYWRlcjtcbiAgfTtcblxufSk7XG5cbiIsIi8vIChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5pbWcuTm90U3VwcG9ydGVkRXJyb3InKTtcbmdvb2cucHJvdmlkZSgndzY5Yi5pbWcuV2ViR0xGaWx0ZXInKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5kZWJ1Zy5FcnJvcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLmltZy5SR0JBSW1hZ2VEYXRhJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuaW1nLldlYkdMUGFyYW1zJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuaW1nLldlYkdMUGlwZWxpbmUnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5pbWcuV2ViR0xQcm9ncmFtJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuc2hhZGVycy5mcmFnQ29vcmRUZXN0Jyk7XG5cblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgdmFyIFdlYkdMUHJvZ3JhbSA9IHc2OWIuaW1nLldlYkdMUHJvZ3JhbTtcbiAgdmFyIFJHQkFJbWFnZURhdGEgPSB3NjliLmltZy5SR0JBSW1hZ2VEYXRhO1xuICAvKipcbiAgICogVGhyb3duIHdoZW4gd2ViZ2wgaXMgbm90IHN1cHBvcnRlZC5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIHtnb29nLmRlYnVnLkVycm9yfVxuICAgKi9cbiAgdzY5Yi5pbWcuTm90U3VwcG9ydGVkRXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICBnb29nLmJhc2UodGhpcyk7XG4gIH07XG4gIGdvb2cuaW5oZXJpdHModzY5Yi5pbWcuTm90U3VwcG9ydGVkRXJyb3IsIGdvb2cuZGVidWcuRXJyb3IpO1xuICAvKiogQG92ZXJyaWRlICovXG4gIHc2OWIuaW1nLk5vdFN1cHBvcnRlZEVycm9yLnByb3RvdHlwZS5uYW1lID0gJ05vdFN1cHBvcnRlZCc7XG5cbiAgLyoqXG4gICAqIEZpbHRlcnMgaW1hZ2VzIHVzaW5nIHdlYmdsIHNoYWRlcnMuXG4gICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnQ9fSBvcHRfY2FudmFzIGNhbnZhcyB0byB1c2UuXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdzY5Yi5pbWcuV2ViR0xGaWx0ZXIgPSBmdW5jdGlvbihvcHRfY2FudmFzKSB7XG4gICAgdGhpcy50ZXh0dXJlcyA9IFtdO1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0hUTUxDYW52YXNFbGVtZW50fVxuICAgICAqL1xuICAgIHRoaXMuY2FudmFzXyA9IC8qKiBAdHlwZSB7SFRNTENhbnZhc0VsZW1lbnR9ICovIChcbiAgICAgIG9wdF9jYW52YXMgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykpO1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmNvbnRleHRfID0gLyoqIEB0eXBlIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9ICovIChcbiAgICAgICAgdGhpcy5jYW52YXNfLmdldENvbnRleHQoJ3dlYmdsJykgfHxcbiAgICAgICAgICB0aGlzLmNhbnZhc18uZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJykpO1xuICAgIH0gY2F0Y2ggKGlnbm9yZWQpIHtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmNvbnRleHRfKVxuICAgICAgdGhyb3cgbmV3IHc2OWIuaW1nLk5vdFN1cHBvcnRlZEVycm9yKCk7XG4gICAgdzY5Yi5pbWcuV2ViR0xGaWx0ZXIudGVzdEZyYWdDb29yZE9mZnNldCgpO1xuXG4gICAgdGhpcy5mcmFtZWJ1ZmZlcl8gPSB0aGlzLmNvbnRleHRfLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG4gIH07XG4gIHZhciBfID0gdzY5Yi5pbWcuV2ViR0xGaWx0ZXI7XG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXkuPG51bWJlcj59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfLmZyYWdDb29yZE9mZnNldF8gPSBudWxsO1xuICAvLyBTaW1wbGUgdmVydGV4IHNoYWRlci5cblxuICB2YXIgcHJvID0gdzY5Yi5pbWcuV2ViR0xGaWx0ZXIucHJvdG90eXBlO1xuXG5cbiAgLyoqXG4gICAqIFJlbmRlcmluZyBjb250ZXh0IG9mIGJhY2sgY2FudmFzLlxuICAgKiBAdHlwZSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvLmNvbnRleHRfID0gbnVsbDtcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggY2FudmFzIHdpZHRoLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IGNhbnZhcyBoZWlnaHQuXG4gICAqL1xuICBwcm8uc2V0U2l6ZSA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLmNhbnZhc18ud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmNhbnZhc18uaGVpZ2h0ID0gaGVpZ2h0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHdpZHRoLlxuICAgKi9cbiAgcHJvLmdldFdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzXy53aWR0aDtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBoZWlnaHQuXG4gICAqL1xuICBwcm8uZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzXy5oZWlnaHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB2aWV3cG9ydCBmb3IgbmV4dCByZW5kZXJpbmcgY2FsbC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggbGVmdCBvZmZzZXQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IGJvdHRvbSBvZmZzZXQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBzaXplLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IHNpemUuXG4gICAqL1xuICBwcm8uc2V0Vmlld3BvcnQgPSBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdGhpcy5jb250ZXh0Xy52aWV3cG9ydCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgfTtcblxuICAvKipcbiAgICogVW5iaW5kIGZyYW1lYnVmZmVyLlxuICAgKi9cbiAgcHJvLnVuYmluZEZyYW1lYnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdsID0gdGhpcy5jb250ZXh0XztcbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IHdlYmdsIGNvbnRleHQuXG4gICAqL1xuICBwcm8uZ2V0Q29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHRfO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaWQgdGV4dHVyZSBpZC5cbiAgICogQHJldHVybiB7V2ViR0xUZXh0dXJlfSB0ZXh0dXJlLlxuICAgKi9cbiAgcHJvLmdldFRleHR1cmUgPSBmdW5jdGlvbihpZCkge1xuICAgIHJldHVybiB0aGlzLnRleHR1cmVzW2lkXTtcbiAgfTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBudW0gdGV4dHVyZXMuIFRoZSBmaXJzdCB0ZXh0dXJlIGlzXG4gICAqL1xuICBwcm8uY3JlYXRlVGV4dHVyZXMgPSBmdW5jdGlvbihudW0pIHtcbiAgICB2YXIgd2lkdGggPSB0aGlzLmdldFdpZHRoKCk7XG4gICAgdmFyIGhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0KCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07ICsraSlcbiAgICAgIHRoaXMudGV4dHVyZXNbaV0gPSB0aGlzLmNyZWF0ZVRleHR1cmUoaSwgd2lkdGgsIGhlaWdodCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgVU5QQUNLX0ZMSVBfWV9XRUJHTCBwYXJhbWV0ZXIgb24gZ2l2ZW4gdGV4dHVyZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGlkIHRleHR1cmUgaWQuXG4gICAqL1xuICBwcm8uc2V0VGV4dHVyZUZsaXBwZWQgPSBmdW5jdGlvbihpZCkge1xuICAgIHZhciBnbCA9IHRoaXMuY29udGV4dF87XG4gICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCk7XG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy50ZXh0dXJlc1tpZF0pO1xuICAgIC8vIGZsaXBwZWQgY29vcmRpbmF0ZXNcbiAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCAxKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGV4dHVyZSB3aXRoIGRlZmF1bHQgcGFyYW1ldGVycy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGlkIHRleHR1cmUgdW5pdCBpZC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBvcHRfd2lkdGggaW4gcGl4ZWxzLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG9wdF9oZWlnaHQgaW4gcGl4c2Vscy5cbiAgICogQHJldHVybiB7V2ViR0xUZXh0dXJlfSB0ZXh0dXJlLlxuICAgKi9cbiAgcHJvLmNyZWF0ZVRleHR1cmUgPSBmdW5jdGlvbihpZCwgb3B0X3dpZHRoLCBvcHRfaGVpZ2h0KSB7XG4gICAgdmFyIGdsID0gdGhpcy5jb250ZXh0XztcbiAgICB2YXIgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcbiAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgaWQpO1xuICAgIC8vc2V0IHByb3BlcnRpZXMgZm9yIHRoZSB0ZXh0dXJlXG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUik7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XG5cbiAgICBpZiAob3B0X3dpZHRoICYmIG9wdF9oZWlnaHQpXG4gICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIG9wdF93aWR0aCwgb3B0X2hlaWdodCwgMCxcbiAgICAgICAgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XG5cbiAgICAvLyBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcblxuICAgIHJldHVybiB0ZXh0dXJlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBdHRhY2ggdGV4dHVyZSB0byBmcmFtZWJ1ZmZlci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHRleHR1cmVJZCB0ZXh0dXJlIGlkLlxuICAgKiBAcGFyYW0ge1dlYkdMRnJhbWVidWZmZXI9fSBvcHRfZnJhbWVidWZmZXIgZGVmYXVsdHMgdG8gdGhpcy5mcmFtZWJ1ZmZlci5cbiAgICovXG4gIHByby5hdHRhY2hUZXh0dXJlVG9GQiA9IGZ1bmN0aW9uKHRleHR1cmVJZCwgb3B0X2ZyYW1lYnVmZmVyKSB7XG4gICAgdmFyIGdsID0gdGhpcy5jb250ZXh0XztcbiAgICB2YXIgdGV4dHVyZSA9IHRoaXMudGV4dHVyZXNbdGV4dHVyZUlkXTtcbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG9wdF9mcmFtZWJ1ZmZlciB8fCB0aGlzLmZyYW1lYnVmZmVyXyk7XG4gICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLFxuICAgICAgZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSwgMCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgb2Zmc2V0IGZvciBub3JtYWxpemluZyBnbF9GcmFnQ29vcmQuXG4gICAqIEByZXR1cm4ge0FycmF5LjxudW1iZXI+fSBvZmZzZXQuXG4gICAqL1xuICBwcm8uZ2V0RnJhZ0Nvb3JkT2Zmc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF8uZnJhZ0Nvb3JkT2Zmc2V0XztcbiAgfTtcblxuICAvKipcbiAgICogR2V0IGltYWdlIGRhdGEgb2YgY2FudmFzLlxuICAgKiBAcmV0dXJuIHtSR0JBSW1hZ2VEYXRhfSBpbWFnZSBkYXRhLlxuICAgKi9cbiAgcHJvLmdldEltYWdlRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBnbCA9IHRoaXMuY29udGV4dF87XG4gICAgdmFyIHdpZHRoID0gdGhpcy5nZXRXaWR0aCgpO1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLmdldEhlaWdodCgpO1xuICAgIHZhciBpbWdkYXRhID0gbmV3IFVpbnQ4QXJyYXkoNCAqIHdpZHRoICogaGVpZ2h0KTtcbiAgICBnbC5yZWFkUGl4ZWxzKDAsIDAsIHdpZHRoLCBoZWlnaHQsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGltZ2RhdGEpO1xuICAgIHJldHVybiBuZXcgUkdCQUltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0LCBpbWdkYXRhKTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBXZWJHTCBpbXBsZW1lbnRhdGlvbiBzdXBwbHkgZGlmZmVyZW50IG9mZnNldHMgZm9yIGdsX0ZyYWdDb29yZCB0b1xuICAgKiBmcmFnbWVudCBzaGFkZXJzLiBGb3IgdGhlIGZpcnN0IHBpeGVsIHRoaXMgY2FuIGJlICgwLDApLCAoMC41LCAwLjUpXG4gICAqIG9yICgxLjAsIDEuMCkuIFdlIG5lZWQgdG8gdGFrZSB0aGlzIGludG8gYWNjb3VudCBpbiBvdXIgc2hhZGVycy5cbiAgICovXG4gIF8udGVzdEZyYWdDb29yZE9mZnNldCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChfLmZyYWdDb29yZE9mZnNldF8pXG4gICAgICByZXR1cm47XG4gICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIHZhciBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcpIHx8XG4gICAgICBjYW52YXMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJyk7XG4gICAgY2FudmFzLndpZHRoID0gMjA7XG4gICAgY2FudmFzLmhlaWdodCA9IDIwO1xuICAgIGNhbnZhcy5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICB2YXIgcHJvZ3JhbSA9IG5ldyBXZWJHTFByb2dyYW0oZ2wsIHc2OWIuc2hhZGVycy5mcmFnQ29vcmRUZXN0KTtcblxuICAgIHByb2dyYW0udXNlKCk7XG4gICAgcHJvZ3JhbS5pbml0Q29tbW9uQXR0cmlidXRlcygpO1xuXG5cbiAgICBwcm9ncmFtLmRyYXdSZWN0KCk7XG4gICAgdmFyIGltZ2RhdGEgPSBuZXcgVWludDhBcnJheSg0ICogY2FudmFzLndpZHRoICogY2FudmFzLmhlaWdodCk7XG4gICAgZ2wucmVhZFBpeGVscygwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQsIGdsLlJHQkEsXG4gICAgICBnbC5VTlNJR05FRF9CWVRFLCBpbWdkYXRhKTtcblxuICAgIGZ1bmN0aW9uIHJvdW5kKHZhbCkge1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQoMTAwICogdmFsIC8gMjU1KSAvIDEwO1xuICAgIH1cblxuICAgIHZhciB4T2Zmc2V0ID0gaW1nZGF0YVswXTtcbiAgICB2YXIgeU9mZnNldCA9IGltZ2RhdGFbMV07XG4gICAgLy8gYXNzdW1lIDAuMSBzdGVwcy5cbiAgICB4T2Zmc2V0ID0gcm91bmQoeE9mZnNldCk7XG4gICAgeU9mZnNldCA9IHJvdW5kKHlPZmZzZXQpO1xuICAgIF8uZnJhZ0Nvb3JkT2Zmc2V0XyA9IFt4T2Zmc2V0LCB5T2Zmc2V0XTtcbiAgICAvLyB3aW5kb3cuY29uc29sZS5sb2coJ2RldGVjdGVkIGZyYWdtZW50IGNvb3JkIG9mZnNldDogKCcgK1xuICAgIC8vICAgeE9mZnNldCArICcgJyArIHlPZmZzZXQgKyAnKScpO1xuICB9O1xuXG5cbn0pO1xuIiwiLy8gKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcblxuZ29vZy5yZXF1aXJlKCdnb29nLm1hdGguU2l6ZScpO1xuZ29vZy5wcm92aWRlKCd3NjliLmltZy5XZWJHTEJpbmFyaXplcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLmltZy5SR0JBQml0TWF0cml4Jyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuaW1nLlJHQkFJbWFnZURhdGEnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5pbWcuV2ViR0xGaWx0ZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5pbWcuV2ViR0xQYXJhbXMnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5pbWcuV2ViR0xQaXBlbGluZScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLmltZy5XZWJHTFByb2dyYW0nKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5zaGFkZXJzLmJpbmFyaXplQXZnMScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnNoYWRlcnMuYmluYXJpemVHcm91cCcpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnNoYWRlcnMuZGVidWcnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5zaGFkZXJzLmVzdGltYXRlQmxhY2snKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5zaGFkZXJzLmV4dHJhY3RDaGFubmVsJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuc2hhZGVycy5mcmFnQ29vcmRUZXN0Jyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuc2hhZGVycy5nYXVzc0JsdXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5zaGFkZXJzLmdyYXlzY2FsZScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnNoYWRlcnMucmVjdFZlcnRleCcpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnNoYWRlcnMuc2NhbGUnKTtcblxuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICB2YXIgV2ViR0xGaWx0ZXIgPSB3NjliLmltZy5XZWJHTEZpbHRlcjtcbiAgdmFyIFdlYkdMUHJvZ3JhbSA9IHc2OWIuaW1nLldlYkdMUHJvZ3JhbTtcbiAgdmFyIFdlYkdMUGFyYW1zID0gdzY5Yi5pbWcuV2ViR0xQYXJhbXM7XG4gIHZhciBXZWJHTFBpcGVsaW5lID0gdzY5Yi5pbWcuV2ViR0xQaXBlbGluZTtcbiAgdmFyIFJHQkFJbWFnZURhdGEgPSB3NjliLmltZy5SR0JBSW1hZ2VEYXRhO1xuICB2YXIgUkdCQUJpdE1hdHJpeCA9IHc2OWIuaW1nLlJHQkFCaXRNYXRyaXg7XG4gIC8qKlxuICAgKiBXZWJHTCBzaGFkZXIgYmFzZWQgaW1hZ2UgYmluYXJpemVyLlxuICAgKiBUaGUgYmFzaWMgaWRlYSBpcyB0byBlc3RpbWF0ZSBhbiBhdmVyYWdlIGJsYWNrIGxldmVsIGZvciBlYWNoIHBpeGVsIGJ5IGxvb2tpbmcgYXRcbiAgICogbmVpZ2hib3VyaW5nIHBpeGVscywgd2hpbGUgY2hvb3NpbmcgdGhlIG5laWdoYm91cmhvb2QgbGFyZ2UgZW5vdWdoIHRvIGNvdmVyIGEgc3VmZmljZW50bHlcbiAgICogbGFyZ2UgZHluYW1pYyByYW5nZS5cbiAgICogVGhlbiBzaW1wbHkgYXBwbHkgdGhyZXNob2xkaW5nIGJhc2VkIG9uIHRoYXQgdmFsdWUuXG4gICAqXG4gICAqIEluIGRldGFpbDpcbiAgICogLSBTdWNjZXNzaXZlbHkgYXBwbHkgc2hhZGVycyB0byBjb21wdXRlIGEgc2NhbGUgc3BhY2UgYW5kIHRoZSBkeW5hbWljIHJhbmdlXG4gICAqIChnYXVzc0JsdXIsIGJpbmFyaXplQXZnMSwgYmluYXJpemVHcm91cCkuXG4gICAqIC0gUnVuIGVzdGltYXRlQmxhY2sgc2hhZGVyIHRvIHBpY2sgYSBncmF5IGxldmVsIGVzdGltYXRpb24uIEl0IGp1c3QgY2hvb3NlcyB0aGVcbiAgICogZ3JheSBsZXZlbCBmcm9tIHRoZSBzbWFsbGVzdCBzY2FsZSB0aGF0IHN0aWxsIHNhdGlzZmllcyBhIGR5bmFtaWMgcmFuZ2UgY29uc3RyYWludC5cbiAgICogLSBSdW4gdGhyZXNob2xkaW5nIHNoYWRlciB0byBhcHBseSB0aHJlc2hvbGRpbmcgb24gaW5wdXQgaW1hZ2UgZ3JheSB2YWx1ZXMgd2l0aFxuICAgKiBibGFjayBsZXZlbCBlc3RpbWF0aW9ucy5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnQ9fSBvcHRfY2FudmFzIGNhbnZhcyB0byB1c2UuXG4gICAqL1xuICB3NjliLmltZy5XZWJHTEJpbmFyaXplciA9IGZ1bmN0aW9uKG9wdF9jYW52YXMpIHtcbiAgICB0aGlzLmZpbHRlcl8gPSBuZXcgV2ViR0xGaWx0ZXIob3B0X2NhbnZhcyk7XG4gIH07XG4gIHZhciBwcm8gPSB3NjliLmltZy5XZWJHTEJpbmFyaXplci5wcm90b3R5cGU7XG4gIHZhciBfID0gdzY5Yi5pbWcuV2ViR0xCaW5hcml6ZXI7XG4gIC8qKlxuICAgKiBAdHlwZSB7P2Jvb2xlYW59XG4gICAqL1xuICBfLmlzU3VwcG9ydGVkXyA9IG51bGw7XG5cbiAgcHJvLnBpcGVsaW5lXyA9IG51bGw7XG4gIHByby5zZXR1cENhbGxlZF8gPSBmYWxzZTtcbiAgLyoqXG4gICAqIElmIGNhbnZhcyBpcyBkaXNwbGF5ZWQgZGlyZWN0bHksIGlucHV0IGRhdGEgbmVlZHMgdG8gYmUgZmxpcHBlZCBhcm91bmRcbiAgICogeSBheGlzLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByby5mbGlwSW5wdXRfID0gZmFsc2U7XG5cblxuICAvKipcbiAgICogU2l6ZSBvZiBuYXRpdmUgaW5wdXQgaW1hZ2UvdmlkZW8uXG4gICAqIEB0eXBlIHs/Z29vZy5tYXRoLlNpemV9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8uaW5TaXplXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgZnJhZ21lbnQgc291cmNlLlxuICAgKiBAcmV0dXJuIHt3NjliLmltZy5XZWJHTFByb2dyYW19IGNvbXBpbGVkIHByb2dyYW0uXG4gICAqL1xuICBwcm8uZ2V0UHJvZ3JhbSA9IGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgIHJldHVybiBuZXcgV2ViR0xQcm9ncmFtKHRoaXMuZmlsdGVyXy5nZXRDb250ZXh0KCksIHNvdXJjZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmxpcCB3aGV0aGVyIHRvIGZsaXAgaW5wdXQgYXJyb3VuZCB5IGF4aXMuXG4gICAqL1xuICBwcm8uc2V0RmxpcElucHV0ID0gZnVuY3Rpb24oZmxpcCkge1xuICAgIHRoaXMuZmxpcElucHV0XyA9IGZsaXA7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHVwIGJpbmFyaXplciBmb3IgZ2l2ZW4gaW1hZ2UgZGltZW5zaW9ucy5cbiAgICogT25seSBjYWxsIHRoaXMgb25jZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIGluIHBpeGVscy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBpbiBwaXhlbHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luV2lkdGggaW4gcGl4ZWxzLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbkhlaWdodCBpbiBwaXhlbHMuXG4gICAqL1xuICBwcm8uc2V0dXAgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0LCBvcHRfaW5XaWR0aCwgb3B0X2luSGVpZ2h0KSB7XG4gICAgaWYgKCFvcHRfaW5IZWlnaHQpXG4gICAgICBvcHRfaW5IZWlnaHQgPSBoZWlnaHQ7XG4gICAgaWYgKCFvcHRfaW5XaWR0aClcbiAgICAgIG9wdF9pbldpZHRoID0gd2lkdGg7XG4gICAgaWYgKCF0aGlzLnNldHVwQ2FsbGVkXykge1xuICAgICAgLy8gY29tcGlsZSBzaGFkZXJzXG4gICAgICB0aGlzLnByb2dyYW1EeW5SYW5nZTEgPSB0aGlzLmdldFByb2dyYW0odzY5Yi5zaGFkZXJzLmJpbmFyaXplQXZnMSk7XG4gICAgICB0aGlzLnByb2dyYW1EeW5SYW5nZTIgPSB0aGlzLmdldFByb2dyYW0odzY5Yi5zaGFkZXJzLmJpbmFyaXplR3JvdXApO1xuICAgICAgdGhpcy5wcm9ncmFtRXN0aW1hdGVCbGFjayA9IHRoaXMuZ2V0UHJvZ3JhbSh3NjliLnNoYWRlcnMuZXN0aW1hdGVCbGFjayk7XG4gICAgICB0aGlzLnByb2dyYW1UaHJlc2hvbGQgPSB0aGlzLmdldFByb2dyYW0odzY5Yi5zaGFkZXJzLnRocmVzaG9sZCk7XG4gICAgICB0aGlzLnByb2dyYW1HYXVzcyA9IHRoaXMuZ2V0UHJvZ3JhbSh3NjliLnNoYWRlcnMuZ2F1c3NCbHVyKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc2V0dXBDYWxsZWRfIHx8XG4gICAgICB0aGlzLmZpbHRlcl8uZ2V0V2lkdGgoKSAhPSB3aWR0aCB8fFxuICAgICAgdGhpcy5maWx0ZXJfLmdldEhlaWdodCgpICE9IGhlaWdodCB8fFxuICAgICAgdGhpcy5pblNpemVfLndpZHRoICE9IG9wdF9pbldpZHRoIHx8XG4gICAgICB0aGlzLmluU2l6ZV8uaGVpZ2h0ICE9IG9wdF9pbkhlaWdodCkge1xuICAgICAgdGhpcy5maWx0ZXJfLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICB0aGlzLmluU2l6ZV8gPSBuZXcgZ29vZy5tYXRoLlNpemUob3B0X2luV2lkdGgsIG9wdF9pbkhlaWdodCk7XG4gICAgICB0aGlzLmZpbHRlcl8uY3JlYXRlVGV4dHVyZXMoMyk7XG4gICAgICBpZiAodGhpcy5mbGlwSW5wdXRfKVxuICAgICAgICB0aGlzLmZpbHRlcl8uc2V0VGV4dHVyZUZsaXBwZWQoMCk7XG4gICAgICB0aGlzLnBpcGVsaW5lXyA9IHRoaXMuY3JlYXRlUGlwZWxpbmUoKTtcbiAgICB9XG4gICAgdGhpcy5zZXR1cENhbGxlZF8gPSB0cnVlO1xuICB9O1xuXG4gIHByby5jcmVhdGVQaXBlbGluZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB3aWR0aCA9IHRoaXMuZmlsdGVyXy5nZXRXaWR0aCgpO1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLmZpbHRlcl8uZ2V0SGVpZ2h0KCk7XG4gICAgdmFyIGluU2l6ZSA9IHRoaXMuaW5TaXplXztcblxuICAgIHZhciBwaXBlbGluZSA9IG5ldyBXZWJHTFBpcGVsaW5lKHRoaXMuZmlsdGVyXyk7XG4gICAgLy8gU29tZSBzaGFkZXJzIHRoYXQgYXJlIHVzZWZ1bCBmb3IgZGVidWdnaW5nLlxuICAgIC8vIHZhciBncmF5c2NhbGUgPSBuZXcgV2ViR0xQcm9ncmFtKGdsLCB3NjliLnNoYWRlcnMuZ3JheXNjYWxlKTtcbiAgICAvLyB2YXIgZHVtbXkgPSB0aGlzLmdldFByb2dyYW0odzY5Yi5zaGFkZXJzLmR1bW15KTtcbiAgICAvLyB2YXIgZXh0cmFjdENoYW5uZWwgPSB0aGlzLmdldFByb2dyYW0odzY5Yi5zaGFkZXJzLmV4dHJhY3RDaGFubmVsKTtcbiAgICAvLyB2YXIgZGVidWcgPSBuZXcgV2ViR0xQcm9ncmFtKGdsLCB3NjliLnNoYWRlcnMuZGVidWcpO1xuICAgIHZhciBiYXNlUGFyYW1zID0gbmV3IFdlYkdMUGFyYW1zKFxuICAgICAge1xuICAgICAgICAnd2lkdGgnOiB3aWR0aCxcbiAgICAgICAgJ2hlaWdodCc6IGhlaWdodCxcbiAgICAgICAgJ2lud2lkdGgnOiB3aWR0aCxcbiAgICAgICAgJ2luaGVpZ2h0JzogaGVpZ2h0LFxuICAgICAgICAndGV4d2lkdGgnOiB3aWR0aCxcbiAgICAgICAgJ3RleGhlaWdodCc6IGhlaWdodCxcbiAgICAgICAgJ2luT2Zmc2V0JzogWzAsIDBdLFxuICAgICAgICAnb3V0T2Zmc2V0JzogWzAsIDBdLFxuICAgICAgICAnZnJhZ0Nvb3JkT2Zmc2V0JzogdGhpcy5maWx0ZXJfLmdldEZyYWdDb29yZE9mZnNldCgpXG4gICAgICB9KTtcbiAgICB2YXIgZG93blNjYWxlUG93ZXIgPSAzO1xuICAgIHZhciBzY2FsZWRXaXRoID0gTWF0aC5tYXgoMSwgd2lkdGggPj4gZG93blNjYWxlUG93ZXIpO1xuICAgIHZhciBzY2FsZWRIZWlnaHQgPSBNYXRoLm1heCgxLCBoZWlnaHQgPj4gZG93blNjYWxlUG93ZXIpO1xuICAgIHZhciBzbWFsbEltZ1BhcmFtcyA9IGJhc2VQYXJhbXMuY2xvbmUoKS5zZXQoe1xuICAgICAgJ3dpZHRoJzogc2NhbGVkV2l0aCxcbiAgICAgICdoZWlnaHQnOiBzY2FsZWRIZWlnaHQsXG4gICAgICAnaW53aWR0aCc6IHNjYWxlZFdpdGgsXG4gICAgICAnaW5oZWlnaHQnOiBzY2FsZWRIZWlnaHRcbiAgICB9KTtcblxuICAgIC8vIEFwcGx5IGdhdXNzIGFuZCBkb3duc2FtcGxlIHRvIHNjYWxlZFdpZHRoL0hlaWdodFxuICAgIHBpcGVsaW5lLmFkZFBhc3ModGhpcy5wcm9ncmFtR2F1c3MsXG4gICAgICBiYXNlUGFyYW1zLmNsb25lKCkuc2V0KHtcbiAgICAgICAgJ3dpZHRoJzogc2NhbGVkV2l0aCxcbiAgICAgICAgJ3NhbXBsZURpcmVjdGlvbic6IFswLCAxXSxcbiAgICAgICAgJ3RleHdpZHRoJzogaW5TaXplLndpZHRoLFxuICAgICAgICAndGV4aGVpZ2h0JzogaW5TaXplLmhlaWdodFxuICAgICAgfSkpO1xuXG4gICAgcGlwZWxpbmUuYWRkUGFzcyh0aGlzLnByb2dyYW1HYXVzcyxcbiAgICAgIHNtYWxsSW1nUGFyYW1zLmNsb25lKCkuc2V0KHtcbiAgICAgICAgJ2luaGVpZ2h0JzogaGVpZ2h0LFxuICAgICAgICAnc2FtcGxlRGlyZWN0aW9uJzogWzEsIDBdXG4gICAgICB9KSk7XG5cbiAgICAvLyBDb21wdXRlIG1vcmUgZHluYW1pYyByYW5nZXMgYW5kIHR3byBtb3JlIHNjYWxlcyBvbiBncmF5XG4gICAgLy8gbGV2ZWwgaW1hZ2UsIGluIGEgbGF5b3V0IG5leHQgdG8gZWFjaCBvdGhlci4gS2VybmVsIHNpemUgaW5jcmVhc2VzXG4gICAgLy8gZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgIHBpcGVsaW5lLmFkZFBhc3ModGhpcy5wcm9ncmFtRHluUmFuZ2UxLCBzbWFsbEltZ1BhcmFtcy5jbG9uZSgpLnNldCh7XG4gICAgICAnc2FtcGxlRGlyZWN0aW9uJzogWzAsIDFdXG4gICAgfSkpO1xuICAgIHBpcGVsaW5lLmFkZFBhc3ModGhpcy5wcm9ncmFtRHluUmFuZ2UyLCBzbWFsbEltZ1BhcmFtcy5jbG9uZSgpLnNldCh7XG4gICAgICAnc2FtcGxlRGlyZWN0aW9uJzogWzEsIDBdXG4gICAgfSkpO1xuXG4gICAgcGlwZWxpbmUuYWRkUGFzcyh0aGlzLnByb2dyYW1EeW5SYW5nZTIsIHNtYWxsSW1nUGFyYW1zLmNsb25lKCkuc2V0KHtcbiAgICAgICdzYW1wbGVEaXJlY3Rpb24nOiBbMCwgMl1cbiAgICB9KSk7XG4gICAgcGlwZWxpbmUuYWRkUGFzcyh0aGlzLnByb2dyYW1EeW5SYW5nZTIsIHNtYWxsSW1nUGFyYW1zLmNsb25lKCkuc2V0KHtcbiAgICAgICdzYW1wbGVEaXJlY3Rpb24nOiBbMiwgMF0sXG4gICAgICAnb3V0T2Zmc2V0JzogW3NjYWxlZFdpdGgsIDBdXG4gICAgfSkpO1xuXG4gICAgcGlwZWxpbmUuYWRkUGFzcyh0aGlzLnByb2dyYW1EeW5SYW5nZTIsIHNtYWxsSW1nUGFyYW1zLmNsb25lKCkuc2V0KHtcbiAgICAgICdzYW1wbGVEaXJlY3Rpb24nOiBbMCwgMl0sXG4gICAgICAnaW5PZmZzZXQnOiBbc2NhbGVkV2l0aCwgMF1cbiAgICB9KSk7XG4gICAgcGlwZWxpbmUuYWRkUGFzcyh0aGlzLnByb2dyYW1EeW5SYW5nZTIsIHNtYWxsSW1nUGFyYW1zLmNsb25lKCkuc2V0KHtcbiAgICAgICdzYW1wbGVEaXJlY3Rpb24nOiBbMiwgMF0sXG4gICAgICAnb3V0T2Zmc2V0JzogW3NjYWxlZFdpdGggKiAyLCAwXVxuICAgIH0pKTtcbiAgICAvLyBVc2Ugc2NhbGUgc3BhY2UgYW5kIGR5bmFtaWMgcmFuZ2UgZXN0aW1hdGlvbnMgdG8gZXN0aW1hdGUgYmxhY2sgbGV2ZWwuXG4gICAgcGlwZWxpbmUuYWRkUGFzcyh0aGlzLnByb2dyYW1Fc3RpbWF0ZUJsYWNrLCBzbWFsbEltZ1BhcmFtcyk7XG4gICAgLy8gcGlwZWxpbmUuYWRkUGFzcyhleHRyYWN0Q2hhbm5lbCxcbiAgICAvLyAgc21hbGxJbWdQYXJhbXMuY2xvbmUoKS5zZXRJbnQoJ2NoYW5uZWwnLCAyKSk7XG5cbiAgICBwaXBlbGluZS5hZGRQYXNzKHRoaXMucHJvZ3JhbVRocmVzaG9sZCwgc21hbGxJbWdQYXJhbXMuY2xvbmUoKVxuICAgICAgLnNldEludCgnb3JpZ0ltYWdlJywgMClcbiAgICAgIC5zZXQoe1xuICAgICAgICAnd2lkdGgnOiBpblNpemUud2lkdGgsICdoZWlnaHQnOiBpblNpemUuaGVpZ2h0LFxuICAgICAgICAnaW53aWR0aCc6IHNjYWxlZFdpdGgsICdpbmhlaWdodCc6IHNjYWxlZEhlaWdodFxuICAgICAgfSkpO1xuICAgIHJldHVybiBwaXBlbGluZTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHt3NjliLmltZy5SR0JBSW1hZ2VEYXRhfSBpbWFnZSBkYXRhLlxuICAgKi9cbiAgcHJvLmdldEltYWdlRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmZpbHRlcl8uZ2V0SW1hZ2VEYXRhKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3c2OWIuaW1nLlJHQkFCaXRNYXRyaXh9IGltYWdlIGRhdGEgd3JhcHBlZCBpbiBSR0JBQml0bWF0cml4LlxuICAgKi9cbiAgcHJvLmdldEJpdE1hdHJpeCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbWdkYXRhID0gdGhpcy5maWx0ZXJfLmdldEltYWdlRGF0YSgpO1xuICAgIHJldHVybiBuZXcgUkdCQUJpdE1hdHJpeChpbWdkYXRhLndpZHRoLCBpbWdkYXRhLmhlaWdodCwgaW1nZGF0YS5kYXRhKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHsoSW1hZ2V8SFRNTFZpZGVvRWxlbWVudHxSR0JBSW1hZ2VEYXRhfEltYWdlRGF0YSl9IGltYWdlIGltYWdlXG4gICAqIHRvIHJlbmRlci5cbiAgICovXG4gIHByby5yZW5kZXIgPSBmdW5jdGlvbihpbWFnZSkge1xuICAgIGlmICghdGhpcy5zZXR1cENhbGxlZF8pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbiAgICB2YXIgZ2wgPSB0aGlzLmZpbHRlcl8uZ2V0Q29udGV4dCgpO1xuICAgIC8vIGJpbmQgaW5wdXQgaW1hZ2UgdG8gdGV4dHVyZSAwLlxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMuZmlsdGVyXy5nZXRUZXh0dXJlKDApKTtcbiAgICBpZiAoaW1hZ2UgaW5zdGFuY2VvZiBSR0JBSW1hZ2VEYXRhKSB7XG4gICAgICAvLyBjdXN0b20gaW1hZ2UgZGF0YVxuICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLFxuICAgICAgICBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWFnZS5kYXRhKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgICAgIGltYWdlKTtcbiAgICB9XG5cbiAgICB0aGlzLnBpcGVsaW5lXy5yZW5kZXIoMCwgMSwgMiwgdHJ1ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBpbiBwaXhlbHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgaW4gcGl4ZWxzLlxuICAgKiBAcmV0dXJuIHt3NjliLmltZy5SR0JBSW1hZ2VEYXRhfSB0ZXN0IGltYWdlLlxuICAgKi9cbiAgXy5jcmVhdGVTdXBwb3J0Q2hlY2tJbWFnZSA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB2YXIgaW1nZGF0YSA9IG5ldyBVaW50OEFycmF5KDQgKiB3aWR0aCAqIGhlaWdodCk7XG4gICAgLy8gYnVpbGQgZ3JhZGllbnRcbiAgICBmb3IgKHZhciB5ID0gMDsgeSA8IGhlaWdodDsgKyt5KSB7XG4gICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHdpZHRoOyArK3gpIHtcbiAgICAgICAgdmFyIHBvcyA9IDQgKiAod2lkdGggKiB5ICsgeCk7XG4gICAgICAgIHZhciBncmF5ID0geDtcbiAgICAgICAgaW1nZGF0YVtwb3NdID0gZ3JheTtcbiAgICAgICAgaW1nZGF0YVtwb3MgKyAxXSA9IGdyYXk7XG4gICAgICAgIGltZ2RhdGFbcG9zICsgMl0gPSBncmF5O1xuICAgICAgICBpbWdkYXRhW3BvcyArIDNdID0gMjU1O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFJHQkFJbWFnZURhdGEod2lkdGgsIGhlaWdodCwgaW1nZGF0YSk7XG4gIH07XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBfLmlzU3VwcG9ydGVkID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gY3JlYXRlIHRlc3QgaW1hZ2VcbiAgICBpZiAoXy5pc1N1cHBvcnRlZF8gPT09IG51bGwpIHtcbiAgICAgIHZhciB3aWR0aCA9IDEwMDtcbiAgICAgIHZhciBoZWlnaHQgPSAyMDtcbiAgICAgIHZhciBpbWcgPSBfLmNyZWF0ZVN1cHBvcnRDaGVja0ltYWdlKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgLy8gc2V0IGNvbnRyYXN0IG9uIHNvbWUgcGl4ZWxzLlxuICAgICAgaW1nLnNldEdyYXkoMzAsIDQsIDE4KTtcbiAgICAgIGltZy5zZXRHcmF5KDkwLCA0LCA1MCk7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgYmluYXJpemVyID0gbmV3IHc2OWIuaW1nLldlYkdMQmluYXJpemVyKCk7XG4gICAgICAgIGJpbmFyaXplci5zZXRGbGlwSW5wdXQoZmFsc2UpO1xuICAgICAgICBiaW5hcml6ZXIuc2V0dXAod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGJpbmFyaXplci5yZW5kZXIoaW1nKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmRlYnVnKCdObyB3ZWJnbCBiaW5hcml6ZXIgc3VwcG9ydDonLCBlcnIpO1xuICAgICAgICBfLmlzU3VwcG9ydGVkXyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgYmluYXJ5ID0gYmluYXJpemVyLmdldEltYWdlRGF0YSgpO1xuICAgICAgLy8gQ2hlY2sgc29tZSBibGFjayBhbmQgd2hpdGUgdmFsdWVzLlxuICAgICAgXy5pc1N1cHBvcnRlZF8gPSAoYmluYXJ5LmdldCgzMCwgNClbMF0gPT0gMCAmJlxuICAgICAgYmluYXJ5LmdldCg5MCwgNClbMF0gPT0gMCAmJlxuICAgICAgYmluYXJ5LmdldCgzMSwgNClbMF0gPT0gMjU1ICYmXG4gICAgICBiaW5hcnkuZ2V0KDI5LCA0KVswXSA9PSAyNTUpO1xuICAgIH1cbiAgICByZXR1cm4gXy5pc1N1cHBvcnRlZF87XG4gIH07XG5cbn0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTMgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5UaGVuYWJsZScpO1xuXG5cblxuLyoqXG4gKiBQcm92aWRlcyBhIG1vcmUgc3RyaWN0IGludGVyZmFjZSBmb3IgVGhlbmFibGVzIGluIHRlcm1zIG9mXG4gKiBodHRwOi8vcHJvbWlzZXNhcGx1cy5jb20gZm9yIGludGVyb3Agd2l0aCB7QHNlZSBnb29nLlByb21pc2V9LlxuICpcbiAqIEBpbnRlcmZhY2VcbiAqIEBleHRlbmRzIHtJVGhlbmFibGU8VFlQRT59XG4gKiBAdGVtcGxhdGUgVFlQRVxuICovXG5nb29nLlRoZW5hYmxlID0gZnVuY3Rpb24oKSB7fTtcblxuXG4vKipcbiAqIEFkZHMgY2FsbGJhY2tzIHRoYXQgd2lsbCBvcGVyYXRlIG9uIHRoZSByZXN1bHQgb2YgdGhlIFRoZW5hYmxlLCByZXR1cm5pbmcgYVxuICogbmV3IGNoaWxkIFByb21pc2UuXG4gKlxuICogSWYgdGhlIFRoZW5hYmxlIGlzIGZ1bGZpbGxlZCwgdGhlIHtAY29kZSBvbkZ1bGZpbGxlZH0gY2FsbGJhY2sgd2lsbCBiZVxuICogaW52b2tlZCB3aXRoIHRoZSBmdWxmaWxsbWVudCB2YWx1ZSBhcyBhcmd1bWVudCwgYW5kIHRoZSBjaGlsZCBQcm9taXNlIHdpbGxcbiAqIGJlIGZ1bGZpbGxlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGNhbGxiYWNrLiBJZiB0aGUgY2FsbGJhY2sgdGhyb3dzXG4gKiBhbiBleGNlcHRpb24sIHRoZSBjaGlsZCBQcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgdGhyb3duIHZhbHVlXG4gKiBpbnN0ZWFkLlxuICpcbiAqIElmIHRoZSBUaGVuYWJsZSBpcyByZWplY3RlZCwgdGhlIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFjayB3aWxsIGJlIGludm9rZWRcbiAqIHdpdGggdGhlIHJlamVjdGlvbiByZWFzb24gYXMgYXJndW1lbnQsIGFuZCB0aGUgY2hpbGQgUHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkXG4gKiB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGNhbGxiYWNrIG9yIHRocm93biB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gez8oZnVuY3Rpb24odGhpczpUSElTLCBUWVBFKTogVkFMVUUpPX0gb3B0X29uRnVsZmlsbGVkIEFcbiAqICAgICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aXRoIHRoZSBmdWxmaWxsbWVudCB2YWx1ZSBpZiB0aGUgUHJvbWlzZVxuICogICAgIGlzIGZ1bGxmaWxsZWQuXG4gKiBAcGFyYW0gez8oZnVuY3Rpb24odGhpczpUSElTLCAqKTogKik9fSBvcHRfb25SZWplY3RlZCBBIGZ1bmN0aW9uIHRoYXQgd2lsbFxuICogICAgIGJlIGludm9rZWQgd2l0aCB0aGUgcmVqZWN0aW9uIHJlYXNvbiBpZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZC5cbiAqIEBwYXJhbSB7VEhJUz19IG9wdF9jb250ZXh0IEFuIG9wdGlvbmFsIGNvbnRleHQgb2JqZWN0IHRoYXQgd2lsbCBiZSB0aGVcbiAqICAgICBleGVjdXRpb24gY29udGV4dCBmb3IgdGhlIGNhbGxiYWNrcy4gQnkgZGVmYXVsdCwgZnVuY3Rpb25zIGFyZSBleGVjdXRlZFxuICogICAgIHdpdGggdGhlIGRlZmF1bHQgdGhpcy5cbiAqXG4gKiBAcmV0dXJuIHtSRVNVTFR9IEEgbmV3IFByb21pc2UgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIHJlc3VsdFxuICogICAgIG9mIHRoZSBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gY2FsbGJhY2suXG4gKiBAdGVtcGxhdGUgVkFMVUVcbiAqIEB0ZW1wbGF0ZSBUSElTXG4gKlxuICogV2hlbiBhIFByb21pc2UgKG9yIHRoZW5hYmxlKSBpcyByZXR1cm5lZCBmcm9tIHRoZSBmdWxmaWxsZWQgY2FsbGJhY2ssXG4gKiB0aGUgcmVzdWx0IGlzIHRoZSBwYXlsb2FkIG9mIHRoYXQgcHJvbWlzZSwgbm90IHRoZSBwcm9taXNlIGl0c2VsZi5cbiAqXG4gKiBAdGVtcGxhdGUgUkVTVUxUIDo9IHR5cGUoJ2dvb2cuUHJvbWlzZScsXG4gKiAgICAgY29uZChpc1Vua25vd24oVkFMVUUpLCB1bmtub3duKCksXG4gKiAgICAgICBtYXB1bmlvbihWQUxVRSwgKFYpID0+XG4gKiAgICAgICAgIGNvbmQoaXNUZW1wbGF0aXplZChWKSAmJiBzdWIocmF3VHlwZU9mKFYpLCAnSVRoZW5hYmxlJyksXG4gKiAgICAgICAgICAgdGVtcGxhdGVUeXBlT2YoViwgMCksXG4gKiAgICAgICAgICAgY29uZChzdWIoViwgJ1RoZW5hYmxlJyksXG4gKiAgICAgICAgICAgICAgdW5rbm93bigpLFxuICogICAgICAgICAgICAgIFYpKSkpKVxuICogID06XG4gKlxuICovXG5nb29nLlRoZW5hYmxlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24ob3B0X29uRnVsZmlsbGVkLCBvcHRfb25SZWplY3RlZCxcbiAgICBvcHRfY29udGV4dCkge307XG5cblxuLyoqXG4gKiBBbiBleHBhbmRvIHByb3BlcnR5IHRvIGluZGljYXRlIHRoYXQgYW4gb2JqZWN0IGltcGxlbWVudHNcbiAqIHtAY29kZSBnb29nLlRoZW5hYmxlfS5cbiAqXG4gKiB7QHNlZSBhZGRJbXBsZW1lbnRhdGlvbn0uXG4gKlxuICogQGNvbnN0XG4gKi9cbmdvb2cuVGhlbmFibGUuSU1QTEVNRU5URURfQllfUFJPUCA9ICckZ29vZ19UaGVuYWJsZSc7XG5cblxuLyoqXG4gKiBNYXJrcyBhIGdpdmVuIGNsYXNzIChjb25zdHJ1Y3RvcikgYXMgYW4gaW1wbGVtZW50YXRpb24gb2YgVGhlbmFibGUsIHNvXG4gKiB0aGF0IHdlIGNhbiBxdWVyeSB0aGF0IGZhY3QgYXQgcnVudGltZS4gVGhlIGNsYXNzIG11c3QgaGF2ZSBhbHJlYWR5XG4gKiBpbXBsZW1lbnRlZCB0aGUgaW50ZXJmYWNlLlxuICogRXhwb3J0cyBhICd0aGVuJyBtZXRob2Qgb24gdGhlIGNvbnN0cnVjdG9yIHByb3RvdHlwZSwgc28gdGhhdCB0aGUgb2JqZWN0c1xuICogYWxzbyBpbXBsZW1lbnQgdGhlIGV4dGVybiB7QHNlZSBnb29nLlRoZW5hYmxlfSBpbnRlcmZhY2UgZm9yIGludGVyb3Agd2l0aFxuICogb3RoZXIgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbnMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpnb29nLlRoZW5hYmxlLC4uLj8pfSBjdG9yIFRoZSBjbGFzcyBjb25zdHJ1Y3Rvci4gVGhlXG4gKiAgICAgY29ycmVzcG9uZGluZyBjbGFzcyBtdXN0IGhhdmUgYWxyZWFkeSBpbXBsZW1lbnRlZCB0aGUgaW50ZXJmYWNlLlxuICovXG5nb29nLlRoZW5hYmxlLmFkZEltcGxlbWVudGF0aW9uID0gZnVuY3Rpb24oY3Rvcikge1xuICBnb29nLmV4cG9ydFByb3BlcnR5KGN0b3IucHJvdG90eXBlLCAndGhlbicsIGN0b3IucHJvdG90eXBlLnRoZW4pO1xuICBpZiAoQ09NUElMRUQpIHtcbiAgICBjdG9yLnByb3RvdHlwZVtnb29nLlRoZW5hYmxlLklNUExFTUVOVEVEX0JZX1BST1BdID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZHMgZGljdGlvbmFyeSBhY2Nlc3MgaW4gdW5jb21waWxlZCBtb2RlLlxuICAgIGN0b3IucHJvdG90eXBlLiRnb29nX1RoZW5hYmxlID0gdHJ1ZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGEgZ2l2ZW4gaW5zdGFuY2UgaW1wbGVtZW50cyB7QGNvZGUgZ29vZy5UaGVuYWJsZX0uXG4gKiAgICAgVGhlIGNsYXNzL3N1cGVyY2xhc3Mgb2YgdGhlIGluc3RhbmNlIG11c3QgY2FsbCB7QGNvZGUgYWRkSW1wbGVtZW50YXRpb259LlxuICovXG5nb29nLlRoZW5hYmxlLmlzSW1wbGVtZW50ZWRCeSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAoIW9iamVjdCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIGlmIChDT01QSUxFRCkge1xuICAgICAgcmV0dXJuICEhb2JqZWN0W2dvb2cuVGhlbmFibGUuSU1QTEVNRU5URURfQllfUFJPUF07XG4gICAgfVxuICAgIHJldHVybiAhIW9iamVjdC4kZ29vZ19UaGVuYWJsZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFByb3BlcnR5IGFjY2VzcyBzZWVtcyB0byBiZSBmb3JiaWRkZW4uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTUgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTaW1wbGUgZnJlZWxpc3QuXG4gKlxuICogQW4gYW50ZXJhdGl2ZSB0byBnb29nLnN0cnVjdHMuU2ltcGxlUG9vbCwgaXQgaW1wb3NlcyB0aGUgcmVxdWlyZW1lbnQgdGhhdCB0aGVcbiAqIG9iamVjdHMgaW4gdGhlIGxpc3QgY29udGFpbiBhIFwibmV4dFwiIHByb3BlcnR5IHRoYXQgY2FuIGJlIHVzZWQgdG8gbWFpbnRhaW5cbiAqIHRoZSBwb29sLlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5hc3luYy5GcmVlTGlzdCcpO1xuXG5cbi8qKlxuICogQHRlbXBsYXRlIElURU1cbiAqL1xuZ29vZy5hc3luYy5GcmVlTGlzdCA9IGdvb2cuZGVmaW5lQ2xhc3MobnVsbCwge1xuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpOklURU19IGNyZWF0ZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKElURU0pOnZvaWR9IHJlc2V0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdFxuICAgKi9cbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uKGNyZWF0ZSwgcmVzZXQsIGxpbWl0KSB7XG4gICAgLyoqIEBjb25zdCB7bnVtYmVyfSAqL1xuICAgIHRoaXMubGltaXRfID0gbGltaXQ7XG4gICAgLyoqIEBjb25zdCB7ZnVuY3Rpb24oKX0gKi9cbiAgICB0aGlzLmNyZWF0ZV8gPSBjcmVhdGU7XG4gICAgLyoqIEBjb25zdCB7ZnVuY3Rpb24oSVRFTSk6dm9pZH0gKi9cbiAgICB0aGlzLnJlc2V0XyA9IHJlc2V0O1xuXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5vY2N1cGFudHNfID0gMDtcbiAgICAvKiogQHR5cGUge0lURU19ICovXG4gICAgdGhpcy5oZWFkXyA9IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0lURU19XG4gICAqL1xuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtO1xuICAgIGlmICh0aGlzLm9jY3VwYW50c18gPiAwKSB7XG4gICAgICB0aGlzLm9jY3VwYW50c18tLTtcbiAgICAgIGl0ZW0gPSB0aGlzLmhlYWRfO1xuICAgICAgdGhpcy5oZWFkXyA9IGl0ZW0ubmV4dDtcbiAgICAgIGl0ZW0ubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0gPSB0aGlzLmNyZWF0ZV8oKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SVRFTX0gaXRlbSBBbiBpdGVtIGF2YWlsYWJsZSBmb3IgcG9zc2libGUgZnV0dXJlIHJldXNlLlxuICAgKi9cbiAgcHV0OiBmdW5jdGlvbihpdGVtKSB7XG4gICAgdGhpcy5yZXNldF8oaXRlbSk7XG4gICAgaWYgKHRoaXMub2NjdXBhbnRzXyA8IHRoaXMubGltaXRfKSB7XG4gICAgICB0aGlzLm9jY3VwYW50c18rKztcbiAgICAgIGl0ZW0ubmV4dCA9IHRoaXMuaGVhZF87XG4gICAgICB0aGlzLmhlYWRfID0gaXRlbTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFZpc2libGUgZm9yIHRlc3RpbmcuXG4gICAqIEBwYWNrYWdlXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIG9jY3VwYW50czogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub2NjdXBhbnRzXztcbiAgfVxufSk7XG5cblxuXG4iLCIvLyBDb3B5cmlnaHQgMjAxNSBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuZ29vZy5wcm92aWRlKCdnb29nLmFzeW5jLldvcmtJdGVtJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuYXN5bmMuV29ya1F1ZXVlJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXN5bmMuRnJlZUxpc3QnKTtcblxuXG4vLyBUT0RPKGpvaG5sZW56KTogZ2VuZXJhbGl6ZSB0aGUgV29ya1F1ZXVlIGlmIHRoaXMgaXMgdXNlZCBieSBtb3JlXG4vLyB0aGFuIGdvb2cuYXN5bmMucnVuLlxuXG5cblxuLyoqXG4gKiBBIGxvdyBHQyB3b3JrcXVldWUuIFRoZSBrZXkgZWxlbWVudHMgb2YgdGhpcyBkZXNpZ246XG4gKiAgIC0gYXZvaWRzIHRoZSBuZWVkIGZvciBnb29nLmJpbmQgb3IgZXF1aXZhbGVudCBieSBjYXJyeWluZyBzY29wZVxuICogICAtIGF2b2lkcyB0aGUgbmVlZCBmb3IgYXJyYXkgcmVhbGxvY2F0aW9uIGJ5IHVzaW5nIGEgbGlua2VkIGxpc3RcbiAqICAgLSBtaW5pbWl6ZXMgd29yayBlbnRyeSBvYmplY3RzIGFsbG9jYXRpb24gYnkgcmVjeWNsaW5nIG9iamVjdHNcbiAqIEBjb25zdHJ1Y3RvclxuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKi9cbmdvb2cuYXN5bmMuV29ya1F1ZXVlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMud29ya0hlYWRfID0gbnVsbDtcbiAgdGhpcy53b3JrVGFpbF8gPSBudWxsO1xufTtcblxuXG4vKiogQGRlZmluZSB7bnVtYmVyfSBUaGUgbWF4aW11bSBudW1iZXIgb2YgZW50cmllcyB0byBrZWVwIGZvciByZWN5Y2xpbmcuICovXG5nb29nLmRlZmluZSgnZ29vZy5hc3luYy5Xb3JrUXVldWUuREVGQVVMVF9NQVhfVU5VU0VEJywgMTAwKTtcblxuXG4vKiogQGNvbnN0IEBwcml2YXRlIHtnb29nLmFzeW5jLkZyZWVMaXN0PGdvb2cuYXN5bmMuV29ya0l0ZW0+fSAqL1xuZ29vZy5hc3luYy5Xb3JrUXVldWUuZnJlZWxpc3RfID0gbmV3IGdvb2cuYXN5bmMuRnJlZUxpc3QoXG4gICAgZnVuY3Rpb24oKSB7cmV0dXJuIG5ldyBnb29nLmFzeW5jLldvcmtJdGVtKCk7IH0sXG4gICAgZnVuY3Rpb24oaXRlbSkge2l0ZW0ucmVzZXQoKX0sXG4gICAgZ29vZy5hc3luYy5Xb3JrUXVldWUuREVGQVVMVF9NQVhfVU5VU0VEKTtcblxuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm5cbiAqIEBwYXJhbSB7T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBzY29wZVxuICovXG5nb29nLmFzeW5jLldvcmtRdWV1ZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oZm4sIHNjb3BlKSB7XG4gIHZhciBpdGVtID0gdGhpcy5nZXRVbnVzZWRJdGVtXygpO1xuICBpdGVtLnNldChmbiwgc2NvcGUpO1xuXG4gIGlmICh0aGlzLndvcmtUYWlsXykge1xuICAgIHRoaXMud29ya1RhaWxfLm5leHQgPSBpdGVtO1xuICAgIHRoaXMud29ya1RhaWxfID0gaXRlbTtcbiAgfSBlbHNlIHtcbiAgICBnb29nLmFzc2VydHMuYXNzZXJ0KCF0aGlzLndvcmtIZWFkXyk7XG4gICAgdGhpcy53b3JrSGVhZF8gPSBpdGVtO1xuICAgIHRoaXMud29ya1RhaWxfID0gaXRlbTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2dvb2cuYXN5bmMuV29ya0l0ZW19XG4gKi9cbmdvb2cuYXN5bmMuV29ya1F1ZXVlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW0gPSBudWxsO1xuXG4gIGlmICh0aGlzLndvcmtIZWFkXykge1xuICAgIGl0ZW0gPSB0aGlzLndvcmtIZWFkXztcbiAgICB0aGlzLndvcmtIZWFkXyA9IHRoaXMud29ya0hlYWRfLm5leHQ7XG4gICAgaWYgKCF0aGlzLndvcmtIZWFkXykge1xuICAgICAgdGhpcy53b3JrVGFpbF8gPSBudWxsO1xuICAgIH1cbiAgICBpdGVtLm5leHQgPSBudWxsO1xuICB9XG4gIHJldHVybiBpdGVtO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7Z29vZy5hc3luYy5Xb3JrSXRlbX0gaXRlbVxuICovXG5nb29nLmFzeW5jLldvcmtRdWV1ZS5wcm90b3R5cGUucmV0dXJuVW51c2VkID0gZnVuY3Rpb24oaXRlbSkge1xuICBnb29nLmFzeW5jLldvcmtRdWV1ZS5mcmVlbGlzdF8ucHV0KGl0ZW0pO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2dvb2cuYXN5bmMuV29ya0l0ZW19XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmFzeW5jLldvcmtRdWV1ZS5wcm90b3R5cGUuZ2V0VW51c2VkSXRlbV8gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdvb2cuYXN5bmMuV29ya1F1ZXVlLmZyZWVsaXN0Xy5nZXQoKTtcbn07XG5cblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKi9cbmdvb2cuYXN5bmMuV29ya0l0ZW0gPSBmdW5jdGlvbigpIHtcbiAgLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKX0gKi9cbiAgdGhpcy5mbiA9IG51bGw7XG4gIC8qKiBAdHlwZSB7T2JqZWN0fG51bGx8dW5kZWZpbmVkfSAqL1xuICB0aGlzLnNjb3BlID0gbnVsbDtcbiAgLyoqIEB0eXBlIHs/Z29vZy5hc3luYy5Xb3JrSXRlbX0gKi9cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuXG4gKiBAcGFyYW0ge09iamVjdHxudWxsfHVuZGVmaW5lZH0gc2NvcGVcbiAqL1xuZ29vZy5hc3luYy5Xb3JrSXRlbS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oZm4sIHNjb3BlKSB7XG4gIHRoaXMuZm4gPSBmbjtcbiAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICB0aGlzLm5leHQgPSBudWxsO1xufTtcblxuXG4vKiogUmVzZXQgdGhlIHdvcmsgaXRlbSBzbyB0aGV5IGRvbid0IHByZXZlbnQgR0MgYmVmb3JlIHJldXNlICovXG5nb29nLmFzeW5jLldvcmtJdGVtLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmZuID0gbnVsbDtcbiAgdGhpcy5zY29wZSA9IG51bGw7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMDcgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEZWZpbmVzIHRoZSBnb29nLmRvbS5UYWdOYW1lIGVudW0uICBUaGlzIGVudW1lcmF0ZXNcbiAqIGFsbCBIVE1MIHRhZyBuYW1lcyBzcGVjaWZpZWQgaW4gZWl0aGVyIHRoZSB0aGUgVzNDIEhUTUwgNC4wMSBpbmRleCBvZlxuICogZWxlbWVudHMgb3IgdGhlIEhUTUw1IGRyYWZ0IHNwZWNpZmljYXRpb24uXG4gKlxuICogUmVmZXJlbmNlczpcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0MDEvaW5kZXgvZWxlbWVudHMuaHRtbFxuICogaHR0cDovL2Rldi53My5vcmcvaHRtbDUvc3BlYy9zZWN0aW9uLWluZGV4Lmh0bWxcbiAqXG4gKi9cbmdvb2cucHJvdmlkZSgnZ29vZy5kb20uVGFnTmFtZScpO1xuXG5cbi8qKlxuICogRW51bSBvZiBhbGwgaHRtbCB0YWcgbmFtZXMgc3BlY2lmaWVkIGJ5IHRoZSBXM0MgSFRNTDQuMDEgYW5kIEhUTUw1XG4gKiBzcGVjaWZpY2F0aW9ucy5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmdvb2cuZG9tLlRhZ05hbWUgPSB7XG4gIEE6ICdBJyxcbiAgQUJCUjogJ0FCQlInLFxuICBBQ1JPTllNOiAnQUNST05ZTScsXG4gIEFERFJFU1M6ICdBRERSRVNTJyxcbiAgQVBQTEVUOiAnQVBQTEVUJyxcbiAgQVJFQTogJ0FSRUEnLFxuICBBUlRJQ0xFOiAnQVJUSUNMRScsXG4gIEFTSURFOiAnQVNJREUnLFxuICBBVURJTzogJ0FVRElPJyxcbiAgQjogJ0InLFxuICBCQVNFOiAnQkFTRScsXG4gIEJBU0VGT05UOiAnQkFTRUZPTlQnLFxuICBCREk6ICdCREknLFxuICBCRE86ICdCRE8nLFxuICBCSUc6ICdCSUcnLFxuICBCTE9DS1FVT1RFOiAnQkxPQ0tRVU9URScsXG4gIEJPRFk6ICdCT0RZJyxcbiAgQlI6ICdCUicsXG4gIEJVVFRPTjogJ0JVVFRPTicsXG4gIENBTlZBUzogJ0NBTlZBUycsXG4gIENBUFRJT046ICdDQVBUSU9OJyxcbiAgQ0VOVEVSOiAnQ0VOVEVSJyxcbiAgQ0lURTogJ0NJVEUnLFxuICBDT0RFOiAnQ09ERScsXG4gIENPTDogJ0NPTCcsXG4gIENPTEdST1VQOiAnQ09MR1JPVVAnLFxuICBDT01NQU5EOiAnQ09NTUFORCcsXG4gIERBVEE6ICdEQVRBJyxcbiAgREFUQUxJU1Q6ICdEQVRBTElTVCcsXG4gIEREOiAnREQnLFxuICBERUw6ICdERUwnLFxuICBERVRBSUxTOiAnREVUQUlMUycsXG4gIERGTjogJ0RGTicsXG4gIERJQUxPRzogJ0RJQUxPRycsXG4gIERJUjogJ0RJUicsXG4gIERJVjogJ0RJVicsXG4gIERMOiAnREwnLFxuICBEVDogJ0RUJyxcbiAgRU06ICdFTScsXG4gIEVNQkVEOiAnRU1CRUQnLFxuICBGSUVMRFNFVDogJ0ZJRUxEU0VUJyxcbiAgRklHQ0FQVElPTjogJ0ZJR0NBUFRJT04nLFxuICBGSUdVUkU6ICdGSUdVUkUnLFxuICBGT05UOiAnRk9OVCcsXG4gIEZPT1RFUjogJ0ZPT1RFUicsXG4gIEZPUk06ICdGT1JNJyxcbiAgRlJBTUU6ICdGUkFNRScsXG4gIEZSQU1FU0VUOiAnRlJBTUVTRVQnLFxuICBIMTogJ0gxJyxcbiAgSDI6ICdIMicsXG4gIEgzOiAnSDMnLFxuICBINDogJ0g0JyxcbiAgSDU6ICdINScsXG4gIEg2OiAnSDYnLFxuICBIRUFEOiAnSEVBRCcsXG4gIEhFQURFUjogJ0hFQURFUicsXG4gIEhHUk9VUDogJ0hHUk9VUCcsXG4gIEhSOiAnSFInLFxuICBIVE1MOiAnSFRNTCcsXG4gIEk6ICdJJyxcbiAgSUZSQU1FOiAnSUZSQU1FJyxcbiAgSU1HOiAnSU1HJyxcbiAgSU5QVVQ6ICdJTlBVVCcsXG4gIElOUzogJ0lOUycsXG4gIElTSU5ERVg6ICdJU0lOREVYJyxcbiAgS0JEOiAnS0JEJyxcbiAgS0VZR0VOOiAnS0VZR0VOJyxcbiAgTEFCRUw6ICdMQUJFTCcsXG4gIExFR0VORDogJ0xFR0VORCcsXG4gIExJOiAnTEknLFxuICBMSU5LOiAnTElOSycsXG4gIE1BUDogJ01BUCcsXG4gIE1BUks6ICdNQVJLJyxcbiAgTUFUSDogJ01BVEgnLFxuICBNRU5VOiAnTUVOVScsXG4gIE1FVEE6ICdNRVRBJyxcbiAgTUVURVI6ICdNRVRFUicsXG4gIE5BVjogJ05BVicsXG4gIE5PRlJBTUVTOiAnTk9GUkFNRVMnLFxuICBOT1NDUklQVDogJ05PU0NSSVBUJyxcbiAgT0JKRUNUOiAnT0JKRUNUJyxcbiAgT0w6ICdPTCcsXG4gIE9QVEdST1VQOiAnT1BUR1JPVVAnLFxuICBPUFRJT046ICdPUFRJT04nLFxuICBPVVRQVVQ6ICdPVVRQVVQnLFxuICBQOiAnUCcsXG4gIFBBUkFNOiAnUEFSQU0nLFxuICBQUkU6ICdQUkUnLFxuICBQUk9HUkVTUzogJ1BST0dSRVNTJyxcbiAgUTogJ1EnLFxuICBSUDogJ1JQJyxcbiAgUlQ6ICdSVCcsXG4gIFJVQlk6ICdSVUJZJyxcbiAgUzogJ1MnLFxuICBTQU1QOiAnU0FNUCcsXG4gIFNDUklQVDogJ1NDUklQVCcsXG4gIFNFQ1RJT046ICdTRUNUSU9OJyxcbiAgU0VMRUNUOiAnU0VMRUNUJyxcbiAgU01BTEw6ICdTTUFMTCcsXG4gIFNPVVJDRTogJ1NPVVJDRScsXG4gIFNQQU46ICdTUEFOJyxcbiAgU1RSSUtFOiAnU1RSSUtFJyxcbiAgU1RST05HOiAnU1RST05HJyxcbiAgU1RZTEU6ICdTVFlMRScsXG4gIFNVQjogJ1NVQicsXG4gIFNVTU1BUlk6ICdTVU1NQVJZJyxcbiAgU1VQOiAnU1VQJyxcbiAgU1ZHOiAnU1ZHJyxcbiAgVEFCTEU6ICdUQUJMRScsXG4gIFRCT0RZOiAnVEJPRFknLFxuICBURDogJ1REJyxcbiAgVEVNUExBVEU6ICdURU1QTEFURScsXG4gIFRFWFRBUkVBOiAnVEVYVEFSRUEnLFxuICBURk9PVDogJ1RGT09UJyxcbiAgVEg6ICdUSCcsXG4gIFRIRUFEOiAnVEhFQUQnLFxuICBUSU1FOiAnVElNRScsXG4gIFRJVExFOiAnVElUTEUnLFxuICBUUjogJ1RSJyxcbiAgVFJBQ0s6ICdUUkFDSycsXG4gIFRUOiAnVFQnLFxuICBVOiAnVScsXG4gIFVMOiAnVUwnLFxuICBWQVI6ICdWQVInLFxuICBWSURFTzogJ1ZJREVPJyxcbiAgV0JSOiAnV0JSJ1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDA4IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0aWVzIGZvciBjcmVhdGluZyBmdW5jdGlvbnMuIExvb3NlbHkgaW5zcGlyZWQgYnkgdGhlXG4gKiBqYXZhIGNsYXNzZXM6IGh0dHA6Ly9nb28uZ2wvR00wSG11IGFuZCBodHRwOi8vZ29vLmdsLzZrN25JOC5cbiAqXG4gKiBAYXV0aG9yIG5pY2tzYW50b3NAZ29vZ2xlLmNvbSAoTmljayBTYW50b3MpXG4gKi9cblxuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZnVuY3Rpb25zJyk7XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhbHdheXMgcmV0dXJucyB0aGUgc2FtZSB2YWx1ZS5cbiAqIEBwYXJhbSB7VH0gcmV0VmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybi5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKCk6VH0gVGhlIG5ldyBmdW5jdGlvbi5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuZnVuY3Rpb25zLmNvbnN0YW50ID0gZnVuY3Rpb24ocmV0VmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiByZXRWYWx1ZTtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJucyBmYWxzZS5cbiAqIEB0eXBlIHtmdW5jdGlvbiguLi4pOiBib29sZWFufVxuICovXG5nb29nLmZ1bmN0aW9ucy5GQUxTRSA9IGdvb2cuZnVuY3Rpb25zLmNvbnN0YW50KGZhbHNlKTtcblxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm5zIHRydWUuXG4gKiBAdHlwZSB7ZnVuY3Rpb24oLi4uKTogYm9vbGVhbn1cbiAqL1xuZ29vZy5mdW5jdGlvbnMuVFJVRSA9IGdvb2cuZnVuY3Rpb25zLmNvbnN0YW50KHRydWUpO1xuXG5cbi8qKlxuICogQWx3YXlzIHJldHVybnMgTlVMTC5cbiAqIEB0eXBlIHtmdW5jdGlvbiguLi4pOiBudWxsfVxuICovXG5nb29nLmZ1bmN0aW9ucy5OVUxMID0gZ29vZy5mdW5jdGlvbnMuY29uc3RhbnQobnVsbCk7XG5cblxuLyoqXG4gKiBBIHNpbXBsZSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IG9mIHdoYXRldmVyIGlzIHBhc3NlZFxuICogaW50byBpdC5cbiAqIEBwYXJhbSB7VD19IG9wdF9yZXR1cm5WYWx1ZSBUaGUgc2luZ2xlIHZhbHVlIHRoYXQgd2lsbCBiZSByZXR1cm5lZC5cbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgT3B0aW9uYWwgdHJhaWxpbmcgYXJndW1lbnRzLiBUaGVzZSBhcmUgaWdub3JlZC5cbiAqIEByZXR1cm4ge1R9IFRoZSBmaXJzdCBhcmd1bWVudCBwYXNzZWQgaW4sIG9yIHVuZGVmaW5lZCBpZiBub3RoaW5nIHdhcyBwYXNzZWQuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLmZ1bmN0aW9ucy5pZGVudGl0eSA9IGZ1bmN0aW9uKG9wdF9yZXR1cm5WYWx1ZSwgdmFyX2FyZ3MpIHtcbiAgcmV0dXJuIG9wdF9yZXR1cm5WYWx1ZTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhbHdheXMgdGhyb3dzIGFuIGVycm9yIHdpdGggdGhlIGdpdmVuIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gVGhlIGVycm9yLXRocm93aW5nIGZ1bmN0aW9uLlxuICovXG5nb29nLmZ1bmN0aW9ucy5lcnJvciA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRocm93IEVycm9yKG1lc3NhZ2UpO1xuICB9O1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHRocm93cyB0aGUgZ2l2ZW4gb2JqZWN0LlxuICogQHBhcmFtIHsqfSBlcnIgQW4gb2JqZWN0IHRvIGJlIHRocm93bi5cbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gVGhlIGVycm9yLXRocm93aW5nIGZ1bmN0aW9uLlxuICovXG5nb29nLmZ1bmN0aW9ucy5mYWlsID0gZnVuY3Rpb24oZXJyKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBHaXZlbiBhIGZ1bmN0aW9uLCBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IGtlZXBzIG9wdF9udW1BcmdzIGFyZ3VtZW50cyBhbmRcbiAqIHNpbGVudGx5IGRpc2NhcmRzIGFsbCBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGYgVGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfbnVtQXJncyBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBrZWVwLiBEZWZhdWx0cyB0byAwLlxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBBIHZlcnNpb24gb2YgZiB0aGF0IG9ubHkga2VlcHMgdGhlIGZpcnN0IG9wdF9udW1BcmdzXG4gKiAgICAgYXJndW1lbnRzLlxuICovXG5nb29nLmZ1bmN0aW9ucy5sb2NrID0gZnVuY3Rpb24oZiwgb3B0X251bUFyZ3MpIHtcbiAgb3B0X251bUFyZ3MgPSBvcHRfbnVtQXJncyB8fCAwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGYuYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCBvcHRfbnVtQXJncykpO1xuICB9O1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXRzIG50aCBhcmd1bWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBwb3NpdGlvbiBvZiB0aGUgcmV0dXJuIGFyZ3VtZW50LlxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBBIG5ldyBmdW5jdGlvbi5cbiAqL1xuZ29vZy5mdW5jdGlvbnMubnRoID0gZnVuY3Rpb24obikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50c1tuXTtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBHaXZlbiBhIGZ1bmN0aW9uLCBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gdGhhdCBzd2FsbG93cyBpdHMgcmV0dXJuIHZhbHVlXG4gKiBhbmQgcmVwbGFjZXMgaXQgd2l0aCBhIG5ldyBvbmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmIEEgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1R9IHJldFZhbHVlIEEgbmV3IHJldHVybiB2YWx1ZS5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKC4uLj8pOlR9IEEgbmV3IGZ1bmN0aW9uLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5mdW5jdGlvbnMud2l0aFJldHVyblZhbHVlID0gZnVuY3Rpb24oZiwgcmV0VmFsdWUpIHtcbiAgcmV0dXJuIGdvb2cuZnVuY3Rpb25zLnNlcXVlbmNlKGYsIGdvb2cuZnVuY3Rpb25zLmNvbnN0YW50KHJldFZhbHVlKSk7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB3aGV0aGVyIGl0cyBhcmd1ZW1lbnQgZXF1YWxzIHRoZSBnaXZlbiB2YWx1ZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogdmFyIGtleSA9IGdvb2cub2JqZWN0LmZpbmRLZXkob2JqLCBnb29nLmZ1bmN0aW9ucy5lcXVhbFRvKCduZWVkbGUnKSk7XG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZSB0by5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF91c2VMb29zZUNvbXBhcmlzb24gV2hldGhlciB0byB1c2UgYSBsb29zZSAoPT0pXG4gKiAgICAgY29tcGFyaXNvbiByYXRoZXIgdGhhbiBhIHN0cmljdCAoPT09KSBvbmUuIERlZmF1bHRzIHRvIGZhbHNlLlxuICogQHJldHVybiB7ZnVuY3Rpb24oKik6Ym9vbGVhbn0gVGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZ29vZy5mdW5jdGlvbnMuZXF1YWxUbyA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfdXNlTG9vc2VDb21wYXJpc29uKSB7XG4gIHJldHVybiBmdW5jdGlvbihvdGhlcikge1xuICAgIHJldHVybiBvcHRfdXNlTG9vc2VDb21wYXJpc29uID8gKHZhbHVlID09IG90aGVyKSA6ICh2YWx1ZSA9PT0gb3RoZXIpO1xuICB9O1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGNvbXBvc2l0aW9uIG9mIHRoZSBmdW5jdGlvbnMgcGFzc2VkIGluLlxuICogRm9yIGV4YW1wbGUsIChnb29nLmZ1bmN0aW9ucy5jb21wb3NlKGYsIGcpKShhKSBpcyBlcXVpdmFsZW50IHRvIGYoZyhhKSkuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLj8pOlR9IGZuIFRoZSBmaW5hbCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IHZhcl9hcmdzIEEgbGlzdCBvZiBmdW5jdGlvbnMuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbiguLi4/KTpUfSBUaGUgY29tcG9zaXRpb24gb2YgYWxsIGlucHV0cy5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuZnVuY3Rpb25zLmNvbXBvc2UgPSBmdW5jdGlvbihmbiwgdmFyX2FyZ3MpIHtcbiAgdmFyIGZ1bmN0aW9ucyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbmd0aCA9IGZ1bmN0aW9ucy5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIHJlc3VsdCA9IGZ1bmN0aW9uc1tsZW5ndGggLSAxXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSBsZW5ndGggLSAyOyBpID49IDA7IGktLSkge1xuICAgICAgcmVzdWx0ID0gZnVuY3Rpb25zW2ldLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjYWxscyB0aGUgZnVuY3Rpb25zIHBhc3NlZCBpbiBpbiBzZXF1ZW5jZSwgYW5kXG4gKiByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgbGFzdCBmdW5jdGlvbi4gRm9yIGV4YW1wbGUsXG4gKiAoZ29vZy5mdW5jdGlvbnMuc2VxdWVuY2UoZiwgZykpKHgpIGlzIGVxdWl2YWxlbnQgdG8gZih4KSxnKHgpLlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gdmFyX2FyZ3MgQSBsaXN0IG9mIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gQSBmdW5jdGlvbiB0aGF0IGNhbGxzIGFsbCBpbnB1dHMgaW4gc2VxdWVuY2UuXG4gKi9cbmdvb2cuZnVuY3Rpb25zLnNlcXVlbmNlID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcbiAgdmFyIGZ1bmN0aW9ucyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbmd0aCA9IGZ1bmN0aW9ucy5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdCA9IGZ1bmN0aW9uc1tpXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdHJ1ZSBpZiBlYWNoIG9mIGl0cyBjb21wb25lbnRzIGV2YWx1YXRlc1xuICogdG8gdHJ1ZS4gVGhlIGNvbXBvbmVudHMgYXJlIGV2YWx1YXRlZCBpbiBvcmRlciwgYW5kIHRoZSBldmFsdWF0aW9uIHdpbGwgYmVcbiAqIHNob3J0LWNpcmN1aXRlZCBhcyBzb29uIGFzIGEgZnVuY3Rpb24gcmV0dXJucyBmYWxzZS5cbiAqIEZvciBleGFtcGxlLCAoZ29vZy5mdW5jdGlvbnMuYW5kKGYsIGcpKSh4KSBpcyBlcXVpdmFsZW50IHRvIGYoeCkgJiYgZyh4KS5cbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IHZhcl9hcmdzIEEgbGlzdCBvZiBmdW5jdGlvbnMuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbiguLi4/KTpib29sZWFufSBBIGZ1bmN0aW9uIHRoYXQgQU5EcyBpdHMgY29tcG9uZW50XG4gKiAgICAgIGZ1bmN0aW9ucy5cbiAqL1xuZ29vZy5mdW5jdGlvbnMuYW5kID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcbiAgdmFyIGZ1bmN0aW9ucyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbmd0aCA9IGZ1bmN0aW9ucy5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWZ1bmN0aW9uc1tpXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0cnVlIGlmIGFueSBvZiBpdHMgY29tcG9uZW50cyBldmFsdWF0ZXNcbiAqIHRvIHRydWUuIFRoZSBjb21wb25lbnRzIGFyZSBldmFsdWF0ZWQgaW4gb3JkZXIsIGFuZCB0aGUgZXZhbHVhdGlvbiB3aWxsIGJlXG4gKiBzaG9ydC1jaXJjdWl0ZWQgYXMgc29vbiBhcyBhIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZS5cbiAqIEZvciBleGFtcGxlLCAoZ29vZy5mdW5jdGlvbnMub3IoZiwgZykpKHgpIGlzIGVxdWl2YWxlbnQgdG8gZih4KSB8fCBnKHgpLlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gdmFyX2FyZ3MgQSBsaXN0IG9mIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKC4uLj8pOmJvb2xlYW59IEEgZnVuY3Rpb24gdGhhdCBPUnMgaXRzIGNvbXBvbmVudFxuICogICAgZnVuY3Rpb25zLlxuICovXG5nb29nLmZ1bmN0aW9ucy5vciA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XG4gIHZhciBmdW5jdGlvbnMgPSBhcmd1bWVudHM7XG4gIHZhciBsZW5ndGggPSBmdW5jdGlvbnMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGZ1bmN0aW9uc1tpXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgQm9vbGVhbiBvcHBvc2l0ZSBvZiBhIHByb3ZpZGVkIGZ1bmN0aW9uLlxuICogRm9yIGV4YW1wbGUsIChnb29nLmZ1bmN0aW9ucy5ub3QoZikpKHgpIGlzIGVxdWl2YWxlbnQgdG8gIWYoeCkuXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gZiBUaGUgb3JpZ2luYWwgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbiguLi4/KTpib29sZWFufSBBIGZ1bmN0aW9uIHRoYXQgZGVsZWdhdGVzIHRvIGYgYW5kIHJldHVybnNcbiAqIG9wcG9zaXRlLlxuICovXG5nb29nLmZ1bmN0aW9ucy5ub3QgPSBmdW5jdGlvbihmKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBHZW5lcmljIGZhY3RvcnkgZnVuY3Rpb24gdG8gY29uc3RydWN0IGFuIG9iamVjdCBnaXZlbiB0aGUgY29uc3RydWN0b3JcbiAqIGFuZCB0aGUgYXJndW1lbnRzLiBJbnRlbmRlZCB0byBiZSBib3VuZCB0byBjcmVhdGUgb2JqZWN0IGZhY3Rvcmllcy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIHZhciBmYWN0b3J5ID0gZ29vZy5wYXJ0aWFsKGdvb2cuZnVuY3Rpb25zLmNyZWF0ZSwgQ2xhc3MpO1xuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3OlQsIC4uLil9IGNvbnN0cnVjdG9yIFRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIE9iamVjdC5cbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgVGhlIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLlxuICogQHJldHVybiB7VH0gQSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGNsYXNzIGdpdmVuIGluIHtAY29kZSBjb25zdHJ1Y3Rvcn0uXG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLmZ1bmN0aW9ucy5jcmVhdGUgPSBmdW5jdGlvbihjb25zdHJ1Y3RvciwgdmFyX2FyZ3MpIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZmluYWxcbiAgICovXG4gIHZhciB0ZW1wID0gZnVuY3Rpb24oKSB7fTtcbiAgdGVtcC5wcm90b3R5cGUgPSBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgLy8gb2JqIHdpbGwgaGF2ZSBjb25zdHJ1Y3RvcidzIHByb3RvdHlwZSBpbiBpdHMgY2hhaW4gYW5kXG4gIC8vICdvYmogaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcicgd2lsbCBiZSB0cnVlLlxuICB2YXIgb2JqID0gbmV3IHRlbXAoKTtcblxuICAvLyBvYmogaXMgaW5pdGlhbGl6ZWQgYnkgY29uc3RydWN0b3IuXG4gIC8vIGFyZ3VtZW50cyBpcyBvbmx5IGFycmF5LWxpa2Ugc28gbGFja3Mgc2hpZnQoKSwgYnV0IGNhbiBiZSB1c2VkIHdpdGhcbiAgLy8gdGhlIEFycmF5IHByb3RvdHlwZSBmdW5jdGlvbi5cbiAgY29uc3RydWN0b3IuYXBwbHkob2JqLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoZSByZXR1cm4gdmFsdWUgY2FjaGUgc2hvdWxkIGJlIHVzZWQuXG4gKiAgICBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgdG8gZGlzYWJsZSBjYWNoZXMgd2hlbiB0ZXN0aW5nLlxuICovXG5nb29nLmRlZmluZSgnZ29vZy5mdW5jdGlvbnMuQ0FDSEVfUkVUVVJOX1ZBTFVFJywgdHJ1ZSk7XG5cblxuLyoqXG4gKiBHaXZlcyBhIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCBjYWNoZXMgdGhlIHJldHVybiB2YWx1ZSBvZiBhIHBhcmFtZXRlcmxlc3NcbiAqIGZ1bmN0aW9uIHdoZW4gZmlyc3QgY2FsbGVkLlxuICpcbiAqIFdoZW4gY2FsbGVkIGZvciB0aGUgZmlyc3QgdGltZSwgdGhlIGdpdmVuIGZ1bmN0aW9uIGlzIGNhbGxlZCBhbmQgaXRzXG4gKiByZXR1cm4gdmFsdWUgaXMgY2FjaGVkICh0aHVzIHRoaXMgaXMgb25seSBhcHByb3ByaWF0ZSBmb3IgaWRlbXBvdGVudFxuICogZnVuY3Rpb25zKS4gIFN1YnNlcXVlbnQgY2FsbHMgd2lsbCByZXR1cm4gdGhlIGNhY2hlZCByZXR1cm4gdmFsdWUuIFRoaXNcbiAqIGFsbG93cyB0aGUgZXZhbHVhdGlvbiBvZiBleHBlbnNpdmUgZnVuY3Rpb25zIHRvIGJlIGRlbGF5ZWQgdW50aWwgZmlyc3QgdXNlZC5cbiAqXG4gKiBUbyBjYWNoZSB0aGUgcmV0dXJuIHZhbHVlcyBvZiBmdW5jdGlvbnMgd2l0aCBwYXJhbWV0ZXJzLCBzZWUgZ29vZy5tZW1vaXplLlxuICpcbiAqIEBwYXJhbSB7IWZ1bmN0aW9uKCk6VH0gZm4gQSBmdW5jdGlvbiB0byBsYXppbHkgZXZhbHVhdGUuXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oKTpUfSBBIHdyYXBwZWQgdmVyc2lvbiB0aGUgZnVuY3Rpb24uXG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLmZ1bmN0aW9ucy5jYWNoZVJldHVyblZhbHVlID0gZnVuY3Rpb24oZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICB2YXIgdmFsdWU7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGlmICghZ29vZy5mdW5jdGlvbnMuQ0FDSEVfUkVUVVJOX1ZBTFVFKSB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9XG5cbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgdmFsdWUgPSBmbigpO1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBXcmFwcyBhIGZ1bmN0aW9uIHRvIGFsbG93IGl0IHRvIGJlIGNhbGxlZCwgYXQgbW9zdCwgb25jZS4gQWxsXG4gKiBhZGRpdGlvbmFsIGNhbGxzIGFyZSBuby1vcHMuXG4gKlxuICogVGhpcyBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBpbml0aWFsaXphdGlvbiBmdW5jdGlvbnNcbiAqIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCwgYXQgbW9zdCwgb25jZS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6Kn0gZiBGdW5jdGlvbiB0byBjYWxsLlxuICogQHJldHVybiB7ZnVuY3Rpb24oKTp1bmRlZmluZWR9IFdyYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmdvb2cuZnVuY3Rpb25zLm9uY2UgPSBmdW5jdGlvbihmKSB7XG4gIC8vIEtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIGZ1bmN0aW9uIHRoYXQgd2UgbnVsbCBvdXQgd2hlbiB3ZSdyZSBkb25lIHdpdGhcbiAgLy8gaXQgLS0gdGhhdCB3YXksIHRoZSBmdW5jdGlvbiBjYW4gYmUgR0MnZCB3aGVuIHdlJ3JlIGRvbmUgd2l0aCBpdC5cbiAgdmFyIGlubmVyID0gZjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGlmIChpbm5lcikge1xuICAgICAgdmFyIHRtcCA9IGlubmVyO1xuICAgICAgaW5uZXIgPSBudWxsO1xuICAgICAgdG1wKCk7XG4gICAgfVxuICB9O1xufTtcblxuXG4vKipcbiAqIFdyYXBzIGEgZnVuY3Rpb24gdG8gYWxsb3cgaXQgdG8gYmUgY2FsbGVkLCBhdCBtb3N0LCBvbmNlIGZvciBlYWNoIHNlcXVlbmNlIG9mXG4gKiBjYWxscyBmaXJlZCByZXBlYXRlZGx5IHNvIGxvbmcgYXMgdGhleSBhcmUgZmlyZWQgbGVzcyB0aGFuIGEgc3BlY2lmaWVkXG4gKiBpbnRlcnZhbCBhcGFydCAoaW4gbWlsbGlzZWNvbmRzKS4gV2hldGhlciBpdCByZWNlaXZlcyBvbmUgc2lnbmFsIG9yIG11bHRpcGxlLFxuICogaXQgd2lsbCBhbHdheXMgd2FpdCB1bnRpbCBhIGZ1bGwgaW50ZXJ2YWwgaGFzIGVsYXBzZWQgc2luY2UgdGhlIGxhc3Qgc2lnbmFsXG4gKiBiZWZvcmUgcGVyZm9ybWluZyB0aGUgYWN0aW9uLlxuICpcbiAqIFRoaXMgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3IgYnVsa2luZyB1cCByZXBlYXRlZCB1c2VyIGFjdGlvbnMgKGUuZy4gb25seVxuICogcmVmcmVzaGluZyBhIHZpZXcgb25jZSBhIHVzZXIgZmluaXNoZXMgdHlwaW5nIHJhdGhlciB0aGFuIHVwZGF0aW5nIHdpdGggZXZlcnlcbiAqIGtleXN0cm9rZSkuIEZvciBtb3JlIHN0YXRlZnVsIGRlYm91bmNpbmcgd2l0aCBzdXBwb3J0IGZvciBwYXVzaW5nLCByZXN1bWluZyxcbiAqIGFuZCBjYW5jZWxpbmcgZGVib3VuY2VkIGFjdGlvbnMsIHVzZSB7QGNvZGUgZ29vZy5hc3luYy5EZWJvdW5jZXJ9LlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTQ09QRSk6Kn0gZiBGdW5jdGlvbiB0byBjYWxsLlxuICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsIEludGVydmFsIG92ZXIgd2hpY2ggdG8gZGVib3VuY2UuIFRoZSBmdW5jdGlvbiB3aWxsXG4gKiAgICAgb25seSBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGZ1bGwgaW50ZXJ2YWwgaGFzIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgY2FsbC5cbiAqIEBwYXJhbSB7U0NPUEU9fSBvcHRfc2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGZ1bmN0aW9uLlxuICogQHJldHVybiB7ZnVuY3Rpb24oKTp1bmRlZmluZWR9IFdyYXBwZWQgZnVuY3Rpb24uXG4gKiBAdGVtcGxhdGUgU0NPUEVcbiAqL1xuZ29vZy5mdW5jdGlvbnMuZGVib3VuY2UgPSBmdW5jdGlvbihmLCBpbnRlcnZhbCwgb3B0X3Njb3BlKSB7XG4gIGlmIChvcHRfc2NvcGUpIHtcbiAgICBmID0gZ29vZy5iaW5kKGYsIG9wdF9zY29wZSk7XG4gIH1cbiAgdmFyIHRpbWVvdXQgPSBudWxsO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZ29vZy5nbG9iYWwuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBnb29nLmdsb2JhbC5zZXRUaW1lb3V0KGYsIGludGVydmFsKTtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBXcmFwcyBhIGZ1bmN0aW9uIHRvIGFsbG93IGl0IHRvIGJlIGNhbGxlZCwgYXQgbW9zdCwgb25jZSBwZXIgaW50ZXJ2YWxcbiAqIChzcGVjaWZpZWQgaW4gbWlsbGlzZWNvbmRzKS4gSWYgaXQgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdoaWxlIGl0IGlzXG4gKiB3YWl0aW5nLCBpdCB3aWxsIG9ubHkgcGVyZm9ybSB0aGUgYWN0aW9uIG9uY2UgYXQgdGhlIGVuZCBvZiB0aGUgaW50ZXJ2YWwuXG4gKlxuICogVGhpcyBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBsaW1pdGluZyByZXBlYXRlZCB1c2VyIHJlcXVlc3RzIChlLmcuXG4gKiBwcmV2ZW50aW5nIGEgdXNlciBmcm9tIHNwYW1taW5nIGEgc2VydmVyIHdpdGggZnJlcXVlbnQgdmlldyByZWZyZXNoZXMpLiBGb3JcbiAqIG1vcmUgc3RhdGVmdWwgdGhyb3R0bGluZyB3aXRoIHN1cHBvcnQgZm9yIHBhdXNpbmcsIHJlc3VtaW5nLCBhbmQgY2FuY2VsaW5nXG4gKiB0aHJvdHRsZWQgYWN0aW9ucywgdXNlIHtAY29kZSBnb29nLmFzeW5jLlRocm90dGxlfS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6U0NPUEUpOip9IGYgRnVuY3Rpb24gdG8gY2FsbC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbCBJbnRlcnZhbCBvdmVyIHdoaWNoIHRvIHRocm90dGxlLiBUaGUgZnVuY3Rpb24gY2FuXG4gKiAgICAgb25seSBiZSBjYWxsZWQgb25jZSBwZXIgaW50ZXJ2YWwuXG4gKiBAcGFyYW0ge1NDT1BFPX0gb3B0X3Njb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKCk6dW5kZWZpbmVkfSBXcmFwcGVkIGZ1bmN0aW9uLlxuICogQHRlbXBsYXRlIFNDT1BFXG4gKi9cbmdvb2cuZnVuY3Rpb25zLnRocm90dGxlID0gZnVuY3Rpb24oZiwgaW50ZXJ2YWwsIG9wdF9zY29wZSkge1xuICBpZiAob3B0X3Njb3BlKSB7XG4gICAgZiA9IGdvb2cuYmluZChmLCBvcHRfc2NvcGUpO1xuICB9XG4gIHZhciB0aW1lb3V0ID0gbnVsbDtcbiAgdmFyIHNob3VsZEZpcmUgPSBmYWxzZTtcbiAgdmFyIGZpcmUgPSBmdW5jdGlvbigpIHtcbiAgICB0aW1lb3V0ID0gZ29vZy5nbG9iYWwuc2V0VGltZW91dChoYW5kbGVUaW1lb3V0LCBpbnRlcnZhbCk7XG4gICAgZigpO1xuICB9O1xuICB2YXIgaGFuZGxlVGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIGlmIChzaG91bGRGaXJlKSB7XG4gICAgICBzaG91bGRGaXJlID0gZmFsc2U7XG4gICAgICBmaXJlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgIGZpcmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkRmlyZSA9IHRydWU7XG4gICAgfVxuICB9O1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDEzIFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgUHJvdmlkZXMgYSBmdW5jdGlvbiB0byBzY2hlZHVsZSBydW5uaW5nIGEgZnVuY3Rpb24gYXMgc29vblxuICogYXMgcG9zc2libGUgYWZ0ZXIgdGhlIGN1cnJlbnQgSlMgZXhlY3V0aW9uIHN0b3BzIGFuZCB5aWVsZHMgdG8gdGhlIGV2ZW50XG4gKiBsb29wLlxuICpcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuYXN5bmMubmV4dFRpY2snKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5hc3luYy50aHJvd0V4Y2VwdGlvbicpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuZGVidWcuZW50cnlQb2ludFJlZ2lzdHJ5Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZG9tLlRhZ05hbWUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5mdW5jdGlvbnMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy51c2VyQWdlbnQuZW5naW5lJyk7XG5cblxuLyoqXG4gKiBUaHJvdyBhbiBpdGVtIHdpdGhvdXQgaW50ZXJydXB0aW5nIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBjb250ZXh0LiAgRm9yXG4gKiBleGFtcGxlLCBpZiBwcm9jZXNzaW5nIGEgZ3JvdXAgb2YgaXRlbXMgaW4gYSBsb29wLCBzb21ldGltZXMgaXQgaXMgdXNlZnVsXG4gKiB0byByZXBvcnQgYW4gZXJyb3Igd2hpbGUgc3RpbGwgYWxsb3dpbmcgdGhlIHJlc3Qgb2YgdGhlIGJhdGNoIHRvIGJlXG4gKiBwcm9jZXNzZWQuXG4gKiBAcGFyYW0geyp9IGV4Y2VwdGlvblxuICovXG5nb29nLmFzeW5jLnRocm93RXhjZXB0aW9uID0gZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gIC8vIEVhY2ggdGhyb3cgbmVlZHMgdG8gYmUgaW4gaXRzIG93biBjb250ZXh0LlxuICBnb29nLmdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0aHJvdyBleGNlcHRpb247IH0sIDApO1xufTtcblxuXG4vKipcbiAqIEZpcmVzIHRoZSBwcm92aWRlZCBjYWxsYmFja3MgYXMgc29vbiBhcyBwb3NzaWJsZSBhZnRlciB0aGUgY3VycmVudCBKU1xuICogZXhlY3V0aW9uIGNvbnRleHQuIHNldFRpbWVvdXQo4oCmLCAwKSB0YWtlcyBhdCBsZWFzdCA0bXMgd2hlbiBjYWxsZWQgZnJvbVxuICogd2l0aGluIGFub3RoZXIgc2V0VGltZW91dCjigKYsIDApIGZvciBsZWdhY3kgcmVhc29ucy5cbiAqXG4gKiBUaGlzIHdpbGwgbm90IHNjaGVkdWxlIHRoZSBjYWxsYmFjayBhcyBhIG1pY3JvdGFzayAoaS5lLiBhIHRhc2sgdGhhdCBjYW5cbiAqIHByZWVtcHQgdXNlciBpbnB1dCBvciBuZXR3b3JraW5nIGNhbGxiYWNrcykuIEl0IGlzIG1lYW50IHRvIGVtdWxhdGUgd2hhdFxuICogc2V0VGltZW91dChfLCAwKSB3b3VsZCBkbyBpZiBpdCB3ZXJlIG5vdCB0aHJvdHRsZWQuIElmIHlvdSBkZXNpcmUgbWljcm90YXNrXG4gKiBiZWhhdmlvciwgdXNlIHtAc2VlIGdvb2cuUHJvbWlzZX0gaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6U0NPUEUpfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbiB0byBmaXJlIGFzIHNvb24gYXNcbiAqICAgICBwb3NzaWJsZS5cbiAqIEBwYXJhbSB7U0NPUEU9fSBvcHRfY29udGV4dCBPYmplY3QgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGUgbGlzdGVuZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfdXNlU2V0SW1tZWRpYXRlIEF2b2lkIHRoZSBJRSB3b3JrYXJvdW5kIHRoYXRcbiAqICAgICBlbnN1cmVzIGNvcnJlY3RuZXNzIGF0IHRoZSBjb3N0IG9mIHNwZWVkLiBTZWUgY29tbWVudHMgZm9yIGRldGFpbHMuXG4gKiBAdGVtcGxhdGUgU0NPUEVcbiAqL1xuZ29vZy5hc3luYy5uZXh0VGljayA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBvcHRfY29udGV4dCwgb3B0X3VzZVNldEltbWVkaWF0ZSkge1xuICB2YXIgY2IgPSBjYWxsYmFjaztcbiAgaWYgKG9wdF9jb250ZXh0KSB7XG4gICAgY2IgPSBnb29nLmJpbmQoY2FsbGJhY2ssIG9wdF9jb250ZXh0KTtcbiAgfVxuICBjYiA9IGdvb2cuYXN5bmMubmV4dFRpY2sud3JhcENhbGxiYWNrXyhjYik7XG4gIC8vIHdpbmRvdy5zZXRJbW1lZGlhdGUgd2FzIGludHJvZHVjZWQgYW5kIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCBieSBJRTEwKyxcbiAgLy8gYnV0IGR1ZSB0byBhIGJ1ZyBpbiB0aGUgaW1wbGVtZW50YXRpb24gaXQgaXMgbm90IGd1YXJhbnRlZWQgdGhhdFxuICAvLyBzZXRJbW1lZGlhdGUgaXMgZmFzdGVyIHRoYW4gc2V0VGltZW91dCBub3IgdGhhdCBzZXRJbW1lZGlhdGUgTiBpcyBiZWZvcmVcbiAgLy8gc2V0SW1tZWRpYXRlIE4rMS4gVGhhdCBpcyB3aHkgd2UgZG8gbm90IHVzZSB0aGUgbmF0aXZlIHZlcnNpb24gaWZcbiAgLy8gYXZhaWxhYmxlLiBXZSBkbywgaG93ZXZlciwgY2FsbCBzZXRJbW1lZGlhdGUgaWYgaXQgaXMgYSBub3JtYWwgZnVuY3Rpb25cbiAgLy8gYmVjYXVzZSB0aGF0IGluZGljYXRlcyB0aGF0IGl0IGhhcyBiZWVuIHJlcGxhY2VkIGJ5IGdvb2cudGVzdGluZy5Nb2NrQ2xvY2tcbiAgLy8gd2hpY2ggd2UgZG8gd2FudCB0byBzdXBwb3J0LlxuICAvLyBTZWVcbiAgLy8gaHR0cDovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzgwMTgyMy9zZXRpbW1lZGlhdGUtYW5kLW1lc3NhZ2VjaGFubmVsLWFyZS1icm9rZW4taW4taWUxMFxuICAvL1xuICAvLyBOb3RlIHdlIGRvIGFsbG93IGNhbGxlcnMgdG8gYWxzbyByZXF1ZXN0IHNldEltbWVkaWF0ZSBpZiB0aGV5IGFyZSB3aWxsaW5nXG4gIC8vIHRvIGFjY2VwdCB0aGUgcG9zc2libGUgdHJhZGVvZmZzIG9mIGluY29ycmVjdG5lc3MgaW4gZXhjaGFuZ2UgZm9yIHNwZWVkLlxuICAvLyBUaGUgSUUgZmFsbGJhY2sgb2YgcmVhZHlzdGF0ZSBjaGFuZ2UgaXMgbXVjaCBzbG93ZXIuXG4gIGlmIChnb29nLmlzRnVuY3Rpb24oZ29vZy5nbG9iYWwuc2V0SW1tZWRpYXRlKSAmJlxuICAgICAgLy8gT3B0IGluLlxuICAgICAgKG9wdF91c2VTZXRJbW1lZGlhdGUgfHxcbiAgICAgIC8vIG9yIGl0IGlzbid0IGEgYnJvd3NlciBvciB0aGUgZW52aXJvbm1lbnQgaXMgd2VpcmRcbiAgICAgICFnb29nLmdsb2JhbC5XaW5kb3cgfHwgIWdvb2cuZ2xvYmFsLldpbmRvdy5wcm90b3R5cGUgfHxcbiAgICAgIC8vIG9yIHNvbWV0aGluZyByZWRlZmluZWQgc2V0SW1tZWRpYXRlIGluIHdoaWNoIGNhc2Ugd2UgKFlPTE8pIGRlY2lkZVxuICAgICAgLy8gdG8gdXNlIGl0IChUaGlzIGlzIHNvIHRoYXQgd2UgdXNlIHRoZSBtb2NrQ2xvY2sgc2V0SW1tZWRpYXRlLiBzaWdoKS5cbiAgICAgIGdvb2cuZ2xvYmFsLldpbmRvdy5wcm90b3R5cGUuc2V0SW1tZWRpYXRlICE9IGdvb2cuZ2xvYmFsLnNldEltbWVkaWF0ZSkpIHtcbiAgICBnb29nLmdsb2JhbC5zZXRJbW1lZGlhdGUoY2IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIExvb2sgZm9yIGFuZCBjYWNoZSB0aGUgY3VzdG9tIGZhbGxiYWNrIHZlcnNpb24gb2Ygc2V0SW1tZWRpYXRlLlxuICBpZiAoIWdvb2cuYXN5bmMubmV4dFRpY2suc2V0SW1tZWRpYXRlXykge1xuICAgIGdvb2cuYXN5bmMubmV4dFRpY2suc2V0SW1tZWRpYXRlXyA9XG4gICAgICAgIGdvb2cuYXN5bmMubmV4dFRpY2suZ2V0U2V0SW1tZWRpYXRlRW11bGF0b3JfKCk7XG4gIH1cbiAgZ29vZy5hc3luYy5uZXh0VGljay5zZXRJbW1lZGlhdGVfKGNiKTtcbn07XG5cblxuLyoqXG4gKiBDYWNoZSBmb3IgdGhlIHNldEltbWVkaWF0ZSBpbXBsZW1lbnRhdGlvbi5cbiAqIEB0eXBlIHtmdW5jdGlvbihmdW5jdGlvbigpKX1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuYXN5bmMubmV4dFRpY2suc2V0SW1tZWRpYXRlXztcblxuXG4vKipcbiAqIERldGVybWluZXMgdGhlIGJlc3QgcG9zc2libGUgaW1wbGVtZW50YXRpb24gdG8gcnVuIGEgZnVuY3Rpb24gYXMgc29vbiBhc1xuICogdGhlIEpTIGV2ZW50IGxvb3AgaXMgaWRsZS5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKGZ1bmN0aW9uKCkpfSBUaGUgXCJzZXRJbW1lZGlhdGVcIiBpbXBsZW1lbnRhdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuYXN5bmMubmV4dFRpY2suZ2V0U2V0SW1tZWRpYXRlRW11bGF0b3JfID0gZnVuY3Rpb24oKSB7XG4gIC8vIENyZWF0ZSBhIHByaXZhdGUgbWVzc2FnZSBjaGFubmVsIGFuZCB1c2UgaXQgdG8gcG9zdE1lc3NhZ2UgZW1wdHkgbWVzc2FnZXNcbiAgLy8gdG8gb3Vyc2VsdmVzLlxuICB2YXIgQ2hhbm5lbCA9IGdvb2cuZ2xvYmFsWydNZXNzYWdlQ2hhbm5lbCddO1xuICAvLyBJZiBNZXNzYWdlQ2hhbm5lbCBpcyBub3QgYXZhaWxhYmxlIGFuZCB3ZSBhcmUgaW4gYSBicm93c2VyLCBpbXBsZW1lbnRcbiAgLy8gYW4gaWZyYW1lIGJhc2VkIHBvbHlmaWxsIGluIGJyb3dzZXJzIHRoYXQgaGF2ZSBwb3N0TWVzc2FnZSBhbmRcbiAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lci4gVGhlIGxhdHRlciBleGNsdWRlcyBJRTggYmVjYXVzZSBpdCBoYXMgYVxuICAvLyBzeW5jaHJvbm91cyBwb3N0TWVzc2FnZSBpbXBsZW1lbnRhdGlvbi5cbiAgaWYgKHR5cGVvZiBDaGFubmVsID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICYmXG4gICAgICAvLyBQcmVzdG8gKFRoZSBvbGQgcHJlLWJsaW5rIE9wZXJhIGVuZ2luZSkgaGFzIHByb2JsZW1zIHdpdGggaWZyYW1lc1xuICAgICAgLy8gYW5kIGNvbnRlbnRXaW5kb3cuXG4gICAgICAhZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNQcmVzdG8oKSkge1xuICAgIC8qKiBAY29uc3RydWN0b3IgKi9cbiAgICBDaGFubmVsID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBNYWtlIGFuIGVtcHR5LCBpbnZpc2libGUgaWZyYW1lLlxuICAgICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZ29vZy5kb20uVGFnTmFtZS5JRlJBTUUpO1xuICAgICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICBpZnJhbWUuc3JjID0gJyc7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgIHZhciB3aW4gPSBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICAgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7XG4gICAgICBkb2Mub3BlbigpO1xuICAgICAgZG9jLndyaXRlKCcnKTtcbiAgICAgIGRvYy5jbG9zZSgpO1xuICAgICAgLy8gRG8gbm90IHBvc3QgYW55dGhpbmcgc2Vuc2l0aXZlIG92ZXIgdGhpcyBjaGFubmVsLCBhcyB0aGUgd29ya2Fyb3VuZCBmb3JcbiAgICAgIC8vIHBhZ2VzIHdpdGggZmlsZTogb3JpZ2luIGNvdWxkIGFsbG93IHRoYXQgaW5mb3JtYXRpb24gdG8gYmUgbW9kaWZpZWQgb3JcbiAgICAgIC8vIGludGVyY2VwdGVkLlxuICAgICAgdmFyIG1lc3NhZ2UgPSAnY2FsbEltbWVkaWF0ZScgKyBNYXRoLnJhbmRvbSgpO1xuICAgICAgLy8gVGhlIHNhbWUgb3JpZ2luIHBvbGljeSByZWplY3RzIGF0dGVtcHRzIHRvIHBvc3RNZXNzYWdlIGZyb20gZmlsZTogdXJsc1xuICAgICAgLy8gdW5sZXNzIHRoZSBvcmlnaW4gaXMgJyonLlxuICAgICAgLy8gVE9ETyhiLzE2MzM1NDQxKTogVXNlICcqJyBvcmlnaW4gZm9yIGRhdGE6IGFuZCBvdGhlciBzaW1pbGFyIHByb3RvY29scy5cbiAgICAgIHZhciBvcmlnaW4gPSB3aW4ubG9jYXRpb24ucHJvdG9jb2wgPT0gJ2ZpbGU6JyA/XG4gICAgICAgICAgJyonIDogd2luLmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIHdpbi5sb2NhdGlvbi5ob3N0O1xuICAgICAgdmFyIG9ubWVzc2FnZSA9IGdvb2cuYmluZChmdW5jdGlvbihlKSB7XG4gICAgICAgIC8vIFZhbGlkYXRlIG9yaWdpbiBhbmQgbWVzc2FnZSB0byBtYWtlIHN1cmUgdGhhdCB0aGlzIG1lc3NhZ2Ugd2FzXG4gICAgICAgIC8vIGludGVuZGVkIGZvciB1cy4gSWYgdGhlIG9yaWdpbiBpcyBzZXQgdG8gJyonIChzZWUgYWJvdmUpIG9ubHkgdGhlXG4gICAgICAgIC8vIG1lc3NhZ2UgbmVlZHMgdG8gbWF0Y2ggc2luY2UsIGZvciBleGFtcGxlLCAnKicgIT0gJ2ZpbGU6Ly8nLiBBbGxvd2luZ1xuICAgICAgICAvLyB0aGUgd2lsZGNhcmQgaXMgb2ssIGFzIHdlIGFyZSBub3QgY29uY2VybmVkIHdpdGggc2VjdXJpdHkgaGVyZS5cbiAgICAgICAgaWYgKChvcmlnaW4gIT0gJyonICYmIGUub3JpZ2luICE9IG9yaWdpbikgfHwgZS5kYXRhICE9IG1lc3NhZ2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1sncG9ydDEnXS5vbm1lc3NhZ2UoKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBvbm1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgIHRoaXNbJ3BvcnQxJ10gPSB7fTtcbiAgICAgIHRoaXNbJ3BvcnQyJ10gPSB7XG4gICAgICAgIHBvc3RNZXNzYWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB3aW4ucG9zdE1lc3NhZ2UobWVzc2FnZSwgb3JpZ2luKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICghZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzSUUoKSkpIHtcbiAgICAvLyBFeGNsdWRlIGFsbCBvZiBJRSBkdWUgdG9cbiAgICAvLyBodHRwOi8vY29kZWZvcmhpcmUuY29tLzIwMTMvMDkvMjEvc2V0aW1tZWRpYXRlLWFuZC1tZXNzYWdlY2hhbm5lbC1icm9rZW4tb24taW50ZXJuZXQtZXhwbG9yZXItMTAvXG4gICAgLy8gd2hpY2ggYWxsb3dzIHN0YXJ2aW5nIHBvc3RNZXNzYWdlIHdpdGggYSBidXN5IHNldFRpbWVvdXQgbG9vcC5cbiAgICAvLyBUaGlzIGN1cnJlbnRseSBhZmZlY3RzIElFMTAgYW5kIElFMTEgd2hpY2ggd291bGQgb3RoZXJ3aXNlIGJlIGFibGVcbiAgICAvLyB0byB1c2UgdGhlIHBvc3RNZXNzYWdlIGJhc2VkIGZhbGxiYWNrcy5cbiAgICB2YXIgY2hhbm5lbCA9IG5ldyBDaGFubmVsKCk7XG4gICAgLy8gVXNlIGEgZmlmbyBsaW5rZWQgbGlzdCB0byBjYWxsIGNhbGxiYWNrcyBpbiB0aGUgcmlnaHQgb3JkZXIuXG4gICAgdmFyIGhlYWQgPSB7fTtcbiAgICB2YXIgdGFpbCA9IGhlYWQ7XG4gICAgY2hhbm5lbFsncG9ydDEnXS5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChnb29nLmlzRGVmKGhlYWQubmV4dCkpIHtcbiAgICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgICAgdmFyIGNiID0gaGVhZC5jYjtcbiAgICAgICAgaGVhZC5jYiA9IG51bGw7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24oY2IpIHtcbiAgICAgIHRhaWwubmV4dCA9IHtcbiAgICAgICAgY2I6IGNiXG4gICAgICB9O1xuICAgICAgdGFpbCA9IHRhaWwubmV4dDtcbiAgICAgIGNoYW5uZWxbJ3BvcnQyJ10ucG9zdE1lc3NhZ2UoMCk7XG4gICAgfTtcbiAgfVxuICAvLyBJbXBsZW1lbnRhdGlvbiBmb3IgSUU2KzogU2NyaXB0IGVsZW1lbnRzIGZpcmUgYW4gYXN5bmNocm9ub3VzXG4gIC8vIG9ucmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aGVuIGluc2VydGVkIGludG8gdGhlIERPTS5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgJ29ucmVhZHlzdGF0ZWNoYW5nZScgaW5cbiAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZ29vZy5kb20uVGFnTmFtZS5TQ1JJUFQpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGNiKSB7XG4gICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChnb29nLmRvbS5UYWdOYW1lLlNDUklQVCk7XG4gICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIENsZWFuIHVwIGFuZCBjYWxsIHRoZSBjYWxsYmFjay5cbiAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgIGNiKCk7XG4gICAgICAgIGNiID0gbnVsbDtcbiAgICAgIH07XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICB9O1xuICB9XG4gIC8vIEZhbGwgYmFjayB0byBzZXRUaW1lb3V0IHdpdGggMC4gSW4gYnJvd3NlcnMgdGhpcyBjcmVhdGVzIGEgZGVsYXkgb2YgNW1zXG4gIC8vIG9yIG1vcmUuXG4gIHJldHVybiBmdW5jdGlvbihjYikge1xuICAgIGdvb2cuZ2xvYmFsLnNldFRpbWVvdXQoY2IsIDApO1xuICB9O1xufTtcblxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IGlzIG92ZXJyaWRlZCB0byBwcm90ZWN0IGNhbGxiYWNrcyB3aXRoIGVudHJ5IHBvaW50XG4gKiBtb25pdG9yIGlmIHRoZSBhcHBsaWNhdGlvbiBtb25pdG9ycyBlbnRyeSBwb2ludHMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgYXMgc29vbiBhcyBwb3NzaWJsZS5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKCl9IFRoZSB3cmFwcGVkIGNhbGxiYWNrLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5hc3luYy5uZXh0VGljay53cmFwQ2FsbGJhY2tfID0gZ29vZy5mdW5jdGlvbnMuaWRlbnRpdHk7XG5cblxuLy8gUmVnaXN0ZXIgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGFzIGFuIGVudHJ5IHBvaW50LCBzbyB0aGF0IGl0IGNhbiBiZVxuLy8gbW9uaXRvcmVkIGZvciBleGNlcHRpb24gaGFuZGxpbmcsIGV0Yy4gVGhpcyBoYXMgdG8gYmUgZG9uZSBpbiB0aGlzIGZpbGVcbi8vIHNpbmNlIGl0IHJlcXVpcmVzIHNwZWNpYWwgY29kZSB0byBoYW5kbGUgYWxsIGJyb3dzZXJzLlxuZ29vZy5kZWJ1Zy5lbnRyeVBvaW50UmVnaXN0cnkucmVnaXN0ZXIoXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighRnVuY3Rpb24pOiAhRnVuY3Rpb259IHRyYW5zZm9ybWVyIFRoZSB0cmFuc2Zvcm1pbmdcbiAgICAgKiAgICAgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24odHJhbnNmb3JtZXIpIHtcbiAgICAgIGdvb2cuYXN5bmMubmV4dFRpY2sud3JhcENhbGxiYWNrXyA9IHRyYW5zZm9ybWVyO1xuICAgIH0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTMgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTaW1wbGUgbm90aWZpZXJzIGZvciB0aGUgQ2xvc3VyZSB0ZXN0aW5nIGZyYW1ld29yay5cbiAqXG4gKiBAYXV0aG9yIGpvaG5sZW56QGdvb2dsZS5jb20gKEpvaG4gTGVueilcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cudGVzdGluZy53YXRjaGVycycpO1xuXG5cbi8qKiBAcHJpdmF0ZSB7IUFycmF5PGZ1bmN0aW9uKCk+fSAqL1xuZ29vZy50ZXN0aW5nLndhdGNoZXJzLnJlc2V0V2F0Y2hlcnNfID0gW107XG5cblxuLyoqXG4gKiBGaXJlcyBjbG9jayByZXNldCB3YXRjaGluZyBmdW5jdGlvbnMuXG4gKi9cbmdvb2cudGVzdGluZy53YXRjaGVycy5zaWduYWxDbG9ja1Jlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3YXRjaGVycyA9IGdvb2cudGVzdGluZy53YXRjaGVycy5yZXNldFdhdGNoZXJzXztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB3YXRjaGVycy5sZW5ndGg7IGkrKykge1xuICAgIGdvb2cudGVzdGluZy53YXRjaGVycy5yZXNldFdhdGNoZXJzX1tpXSgpO1xuICB9XG59O1xuXG5cbi8qKlxuICogRW5xdWV1ZXMgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgY2xvY2sgdXNlZCBmb3Igc2V0VGltZW91dCBpcyByZXNldC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm5cbiAqL1xuZ29vZy50ZXN0aW5nLndhdGNoZXJzLndhdGNoQ2xvY2tSZXNldCA9IGZ1bmN0aW9uKGZuKSB7XG4gIGdvb2cudGVzdGluZy53YXRjaGVycy5yZXNldFdhdGNoZXJzXy5wdXNoKGZuKTtcbn07XG5cbiIsIi8vIENvcHlyaWdodCAyMDEzIFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5nb29nLnByb3ZpZGUoJ2dvb2cuYXN5bmMucnVuJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hc3luYy5Xb3JrUXVldWUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5hc3luYy5uZXh0VGljaycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmFzeW5jLnRocm93RXhjZXB0aW9uJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cudGVzdGluZy53YXRjaGVycycpO1xuXG5cbi8qKlxuICogRmlyZXMgdGhlIHByb3ZpZGVkIGNhbGxiYWNrIGp1c3QgYmVmb3JlIHRoZSBjdXJyZW50IGNhbGxzdGFjayB1bndpbmRzLCBvciBhc1xuICogc29vbiBhcyBwb3NzaWJsZSBhZnRlciB0aGUgY3VycmVudCBKUyBleGVjdXRpb24gY29udGV4dC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpUSElTKX0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7VEhJUz19IG9wdF9jb250ZXh0IE9iamVjdCB0byB1c2UgYXMgdGhlIFwidGhpcyB2YWx1ZVwiIHdoZW4gY2FsbGluZ1xuICogICAgIHRoZSBwcm92aWRlZCBmdW5jdGlvbi5cbiAqIEB0ZW1wbGF0ZSBUSElTXG4gKi9cbmdvb2cuYXN5bmMucnVuID0gZnVuY3Rpb24oY2FsbGJhY2ssIG9wdF9jb250ZXh0KSB7XG4gIGlmICghZ29vZy5hc3luYy5ydW4uc2NoZWR1bGVfKSB7XG4gICAgZ29vZy5hc3luYy5ydW4uaW5pdGlhbGl6ZVJ1bm5lcl8oKTtcbiAgfVxuICBpZiAoIWdvb2cuYXN5bmMucnVuLndvcmtRdWV1ZVNjaGVkdWxlZF8pIHtcbiAgICAvLyBOb3RoaW5nIGlzIGN1cnJlbnRseSBzY2hlZHVsZWQsIHNjaGVkdWxlIGl0IG5vdy5cbiAgICBnb29nLmFzeW5jLnJ1bi5zY2hlZHVsZV8oKTtcbiAgICBnb29nLmFzeW5jLnJ1bi53b3JrUXVldWVTY2hlZHVsZWRfID0gdHJ1ZTtcbiAgfVxuXG4gIGdvb2cuYXN5bmMucnVuLndvcmtRdWV1ZV8uYWRkKGNhbGxiYWNrLCBvcHRfY29udGV4dCk7XG59O1xuXG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIGZ1bmN0aW9uIHRvIHVzZSB0byBwcm9jZXNzIHRoZSB3b3JrIHF1ZXVlLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5hc3luYy5ydW4uaW5pdGlhbGl6ZVJ1bm5lcl8gPSBmdW5jdGlvbigpIHtcbiAgLy8gSWYgbmF0aXZlIFByb21pc2VzIGFyZSBhdmFpbGFibGUgaW4gdGhlIGJyb3dzZXIsIGp1c3Qgc2NoZWR1bGUgdGhlIGNhbGxiYWNrXG4gIC8vIG9uIGEgZnVsZmlsbGVkIHByb21pc2UsIHdoaWNoIGlzIHNwZWNpZmllZCB0byBiZSBhc3luYywgYnV0IGFzIGZhc3QgYXNcbiAgLy8gcG9zc2libGUuXG4gIGlmIChnb29nLmdsb2JhbC5Qcm9taXNlICYmIGdvb2cuZ2xvYmFsLlByb21pc2UucmVzb2x2ZSkge1xuICAgIHZhciBwcm9taXNlID0gZ29vZy5nbG9iYWwuUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgZ29vZy5hc3luYy5ydW4uc2NoZWR1bGVfID0gZnVuY3Rpb24oKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZ29vZy5hc3luYy5ydW4ucHJvY2Vzc1dvcmtRdWV1ZSk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBnb29nLmFzeW5jLnJ1bi5zY2hlZHVsZV8gPSBmdW5jdGlvbigpIHtcbiAgICAgIGdvb2cuYXN5bmMubmV4dFRpY2soZ29vZy5hc3luYy5ydW4ucHJvY2Vzc1dvcmtRdWV1ZSk7XG4gICAgfTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEZvcmNlcyBnb29nLmFzeW5jLnJ1biB0byB1c2UgbmV4dFRpY2sgaW5zdGVhZCBvZiBQcm9taXNlLlxuICpcbiAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgZG9uZSBpbiB1bml0IHRlc3RzLiBJdCdzIHVzZWZ1bCBiZWNhdXNlIE1vY2tDbG9ja1xuICogcmVwbGFjZXMgbmV4dFRpY2ssIGJ1dCBub3QgdGhlIGJyb3dzZXIgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiwgc28gaXQgYWxsb3dzXG4gKiBQcm9taXNlLWJhc2VkIGNvZGUgdG8gYmUgdGVzdGVkIHdpdGggTW9ja0Nsb2NrLlxuICpcbiAqIEhvd2V2ZXIsIHdlIGFsc28gd2FudCB0byBydW4gcHJvbWlzZXMgaWYgdGhlIE1vY2tDbG9jayBpcyBubyBsb25nZXIgaW5cbiAqIGNvbnRyb2wgc28gd2Ugc2NoZWR1bGUgYSBiYWNrdXAgXCJzZXRUaW1lb3V0XCIgdG8gdGhlIHVubW9ja2VkIHRpbWVvdXQgaWZcbiAqIHByb3ZpZGVkLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oZnVuY3Rpb24oKSk9fSBvcHRfcmVhbFNldFRpbWVvdXRcbiAqL1xuZ29vZy5hc3luYy5ydW4uZm9yY2VOZXh0VGljayA9IGZ1bmN0aW9uKG9wdF9yZWFsU2V0VGltZW91dCkge1xuICBnb29nLmFzeW5jLnJ1bi5zY2hlZHVsZV8gPSBmdW5jdGlvbigpIHtcbiAgICBnb29nLmFzeW5jLm5leHRUaWNrKGdvb2cuYXN5bmMucnVuLnByb2Nlc3NXb3JrUXVldWUpO1xuICAgIGlmIChvcHRfcmVhbFNldFRpbWVvdXQpIHtcbiAgICAgIG9wdF9yZWFsU2V0VGltZW91dChnb29nLmFzeW5jLnJ1bi5wcm9jZXNzV29ya1F1ZXVlKTtcbiAgICB9XG4gIH07XG59O1xuXG5cbi8qKlxuICogVGhlIGZ1bmN0aW9uIHVzZWQgdG8gc2NoZWR1bGUgd29yayBhc3luY2hyb25vdXNlbHkuXG4gKiBAcHJpdmF0ZSB7ZnVuY3Rpb24oKX1cbiAqL1xuZ29vZy5hc3luYy5ydW4uc2NoZWR1bGVfO1xuXG5cbi8qKiBAcHJpdmF0ZSB7Ym9vbGVhbn0gKi9cbmdvb2cuYXN5bmMucnVuLndvcmtRdWV1ZVNjaGVkdWxlZF8gPSBmYWxzZTtcblxuXG4vKiogQHByaXZhdGUgeyFnb29nLmFzeW5jLldvcmtRdWV1ZX0gKi9cbmdvb2cuYXN5bmMucnVuLndvcmtRdWV1ZV8gPSBuZXcgZ29vZy5hc3luYy5Xb3JrUXVldWUoKTtcblxuXG5pZiAoZ29vZy5ERUJVRykge1xuICAvKipcbiAgICogUmVzZXQgdGhlIHdvcmsgcXVldWUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnb29nLmFzeW5jLnJ1bi5yZXNldFF1ZXVlXyA9IGZ1bmN0aW9uKCkge1xuICAgIGdvb2cuYXN5bmMucnVuLndvcmtRdWV1ZVNjaGVkdWxlZF8gPSBmYWxzZTtcbiAgICBnb29nLmFzeW5jLnJ1bi53b3JrUXVldWVfID0gbmV3IGdvb2cuYXN5bmMuV29ya1F1ZXVlKCk7XG4gIH07XG5cbiAgLy8gSWYgdGhlcmUgaXMgYSBjbG9jayBpbXBsZW1lbmF0aW9uIGluIHVzZSBmb3IgdGVzdGluZ1xuICAvLyBhbmQgaXQgaXMgcmVzZXQsIHJlc2V0IHRoZSBxdWV1ZS5cbiAgZ29vZy50ZXN0aW5nLndhdGNoZXJzLndhdGNoQ2xvY2tSZXNldChnb29nLmFzeW5jLnJ1bi5yZXNldFF1ZXVlXyk7XG59XG5cblxuLyoqXG4gKiBSdW4gYW55IHBlbmRpbmcgZ29vZy5hc3luYy5ydW4gd29yayBpdGVtcy4gVGhpcyBmdW5jdGlvbiBpcyBub3QgaW50ZW5kZWRcbiAqIGZvciBnZW5lcmFsIHVzZSwgYnV0IGZvciB1c2UgYnkgZW50cnkgcG9pbnQgaGFuZGxlcnMgdG8gcnVuIGl0ZW1zIGFoZWFkIG9mXG4gKiBnb29nLmFzeW5jLm5leHRUaWNrLlxuICovXG5nb29nLmFzeW5jLnJ1bi5wcm9jZXNzV29ya1F1ZXVlID0gZnVuY3Rpb24oKSB7XG4gIC8vIE5PVEU6IGFkZGl0aW9uYWwgd29yayBxdWV1ZSBpdGVtcyBtYXkgYmUgYWRkZWQgd2hpbGUgcHJvY2Vzc2luZy5cbiAgdmFyIGl0ZW0gPSBudWxsO1xuICB3aGlsZSAoaXRlbSA9IGdvb2cuYXN5bmMucnVuLndvcmtRdWV1ZV8ucmVtb3ZlKCkpIHtcbiAgICB0cnkge1xuICAgICAgaXRlbS5mbi5jYWxsKGl0ZW0uc2NvcGUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGdvb2cuYXN5bmMudGhyb3dFeGNlcHRpb24oZSk7XG4gICAgfVxuICAgIGdvb2cuYXN5bmMucnVuLndvcmtRdWV1ZV8ucmV0dXJuVW51c2VkKGl0ZW0pO1xuICB9XG5cbiAgLy8gVGhlcmUgYXJlIG5vIG1vcmUgd29yayBpdGVtcywgYWxsb3cgcHJvY2Vzc2luZyB0byBiZSBzY2hlZHVsZWQgYWdhaW4uXG4gIGdvb2cuYXN5bmMucnVuLndvcmtRdWV1ZVNjaGVkdWxlZF8gPSBmYWxzZTtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAxMyBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuZ29vZy5wcm92aWRlKCdnb29nLnByb21pc2UuUmVzb2x2ZXInKTtcblxuXG5cbi8qKlxuICogUmVzb2x2ZXIgaW50ZXJmYWNlIGZvciBwcm9taXNlcy4gVGhlIHJlc29sdmVyIGlzIGEgY29udmVuaWVuY2UgaW50ZXJmYWNlIHRoYXRcbiAqIGJ1bmRsZXMgdGhlIHByb21pc2UgYW5kIGl0cyBhc3NvY2lhdGVkIHJlc29sdmUgYW5kIHJlamVjdCBmdW5jdGlvbnMgdG9nZXRoZXIsXG4gKiBmb3IgY2FzZXMgd2hlcmUgdGhlIHJlc29sdmVyIG5lZWRzIHRvIGJlIHBlcnNpc3RlZCBpbnRlcm5hbGx5LlxuICpcbiAqIEBpbnRlcmZhY2VcbiAqIEB0ZW1wbGF0ZSBUWVBFXG4gKi9cbmdvb2cucHJvbWlzZS5SZXNvbHZlciA9IGZ1bmN0aW9uKCkge307XG5cblxuLyoqXG4gKiBUaGUgcHJvbWlzZSB0aGF0IGNyZWF0ZWQgdGhpcyByZXNvbHZlci5cbiAqIEB0eXBlIHshZ29vZy5Qcm9taXNlPFRZUEU+fVxuICovXG5nb29nLnByb21pc2UuUmVzb2x2ZXIucHJvdG90eXBlLnByb21pc2U7XG5cblxuLyoqXG4gKiBSZXNvbHZlcyB0aGlzIHJlc29sdmVyIHdpdGggdGhlIHNwZWNpZmllZCB2YWx1ZS5cbiAqIEB0eXBlIHtmdW5jdGlvbigoVFlQRXxnb29nLlByb21pc2U8VFlQRT58VGhlbmFibGUpPSl9XG4gKi9cbmdvb2cucHJvbWlzZS5SZXNvbHZlci5wcm90b3R5cGUucmVzb2x2ZTtcblxuXG4vKipcbiAqIFJlamVjdHMgdGhpcyByZXNvbHZlciB3aXRoIHRoZSBzcGVjaWZpZWQgcmVhc29uLlxuICogQHR5cGUge2Z1bmN0aW9uKCo9KTogdm9pZH1cbiAqL1xuZ29vZy5wcm9taXNlLlJlc29sdmVyLnByb3RvdHlwZS5yZWplY3Q7XG4iLCIvLyBDb3B5cmlnaHQgMjAxMyBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuZ29vZy5wcm92aWRlKCdnb29nLlByb21pc2UnKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLlRoZW5hYmxlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmFzeW5jLkZyZWVMaXN0Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXN5bmMucnVuJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXN5bmMudGhyb3dFeGNlcHRpb24nKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5kZWJ1Zy5FcnJvcicpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnByb21pc2UuUmVzb2x2ZXInKTtcblxuXG5cbi8qKlxuICogUHJvbWlzZXMgcHJvdmlkZSBhIHJlc3VsdCB0aGF0IG1heSBiZSByZXNvbHZlZCBhc3luY2hyb25vdXNseS4gQSBQcm9taXNlIG1heVxuICogYmUgcmVzb2x2ZWQgYnkgYmVpbmcgZnVsZmlsbGVkIHdpdGggYSBmdWxmaWxsbWVudCB2YWx1ZSwgcmVqZWN0ZWQgd2l0aCBhXG4gKiByZWplY3Rpb24gcmVhc29uLCBvciBibG9ja2VkIGJ5IGFub3RoZXIgUHJvbWlzZS4gQSBQcm9taXNlIGlzIHNhaWQgdG8gYmVcbiAqIHNldHRsZWQgaWYgaXQgaXMgZWl0aGVyIGZ1bGZpbGxlZCBvciByZWplY3RlZC4gT25jZSBzZXR0bGVkLCB0aGUgUHJvbWlzZVxuICogcmVzdWx0IGlzIGltbXV0YWJsZS5cbiAqXG4gKiBQcm9taXNlcyBtYXkgcmVwcmVzZW50IHJlc3VsdHMgb2YgYW55IHR5cGUsIGluY2x1ZGluZyB1bmRlZmluZWQuIFJlamVjdGlvblxuICogcmVhc29ucyBhcmUgdHlwaWNhbGx5IEVycm9ycywgYnV0IG1heSBhbHNvIGJlIG9mIGFueSB0eXBlLiBDbG9zdXJlIFByb21pc2VzXG4gKiBhbGxvdyBmb3Igb3B0aW9uYWwgdHlwZSBhbm5vdGF0aW9ucyB0aGF0IGVuZm9yY2UgdGhhdCBmdWxmaWxsbWVudCB2YWx1ZXMgYXJlXG4gKiBvZiB0aGUgYXBwcm9wcmlhdGUgdHlwZXMgYXQgY29tcGlsZSB0aW1lLlxuICpcbiAqIFRoZSByZXN1bHQgb2YgYSBQcm9taXNlIGlzIGFjY2Vzc2libGUgYnkgY2FsbGluZyB7QGNvZGUgdGhlbn0gYW5kIHJlZ2lzdGVyaW5nXG4gKiB7QGNvZGUgb25GdWxmaWxsZWR9IGFuZCB7QGNvZGUgb25SZWplY3RlZH0gY2FsbGJhY2tzLiBPbmNlIHRoZSBQcm9taXNlXG4gKiBpcyBzZXR0bGVkLCB0aGUgcmVsZXZhbnQgY2FsbGJhY2tzIGFyZSBpbnZva2VkIHdpdGggdGhlIGZ1bGZpbGxtZW50IHZhbHVlIG9yXG4gKiByZWplY3Rpb24gcmVhc29uIGFzIGFyZ3VtZW50LiBDYWxsYmFja3MgYXJlIGFsd2F5cyBpbnZva2VkIGluIHRoZSBvcmRlciB0aGV5XG4gKiB3ZXJlIHJlZ2lzdGVyZWQsIGV2ZW4gd2hlbiBhZGRpdGlvbmFsIHtAY29kZSB0aGVufSBjYWxscyBhcmUgbWFkZSBmcm9tIGluc2lkZVxuICogYW5vdGhlciBjYWxsYmFjay4gQSBjYWxsYmFjayBpcyBhbHdheXMgcnVuIGFzeW5jaHJvbm91c2x5IHNvbWV0aW1lIGFmdGVyIHRoZVxuICogc2NvcGUgY29udGFpbmluZyB0aGUgcmVnaXN0ZXJpbmcge0Bjb2RlIHRoZW59IGludm9jYXRpb24gaGFzIHJldHVybmVkLlxuICpcbiAqIElmIGEgUHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIGFub3RoZXIgUHJvbWlzZSwgdGhlIGZpcnN0IFByb21pc2Ugd2lsbCBibG9ja1xuICogdW50aWwgdGhlIHNlY29uZCBpcyBzZXR0bGVkLCBhbmQgdGhlbiBhc3N1bWVzIHRoZSBzYW1lIHJlc3VsdCBhcyB0aGUgc2Vjb25kXG4gKiBQcm9taXNlLiBUaGlzIGFsbG93cyBQcm9taXNlcyB0byBkZXBlbmQgb24gdGhlIHJlc3VsdHMgb2Ygb3RoZXIgUHJvbWlzZXMsXG4gKiBsaW5raW5nIHRvZ2V0aGVyIG11bHRpcGxlIGFzeW5jaHJvbm91cyBvcGVyYXRpb25zLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBQcm9taXNlcy9BKyBzcGVjaWZpY2F0aW9uIGFuZFxuICogcGFzc2VzIHRoYXQgc3BlY2lmaWNhdGlvbidzIGNvbmZvcm1hbmNlIHRlc3Qgc3VpdGUuIEEgQ2xvc3VyZSBQcm9taXNlIG1heSBiZVxuICogcmVzb2x2ZWQgd2l0aCBhIFByb21pc2UgaW5zdGFuY2UgKG9yIHN1ZmZpY2llbnRseSBjb21wYXRpYmxlIFByb21pc2UtbGlrZVxuICogb2JqZWN0KSBjcmVhdGVkIGJ5IG90aGVyIFByb21pc2UgaW1wbGVtZW50YXRpb25zLiBGcm9tIHRoZSBzcGVjaWZpY2F0aW9uLFxuICogUHJvbWlzZS1saWtlIG9iamVjdHMgYXJlIGtub3duIGFzIFwiVGhlbmFibGVzXCIuXG4gKlxuICogQHNlZSBodHRwOi8vcHJvbWlzZXNhcGx1cy5jb20vXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihcbiAqICAgICAgICAgICAgIHRoaXM6UkVTT0xWRVJfQ09OVEVYVCxcbiAqICAgICAgICAgICAgIGZ1bmN0aW9uKChUWVBFfElUaGVuYWJsZTxUWVBFPnxUaGVuYWJsZSk9KSxcbiAqICAgICAgICAgICAgIGZ1bmN0aW9uKCo9KSk6IHZvaWR9IHJlc29sdmVyXG4gKiAgICAgSW5pdGlhbGl6YXRpb24gZnVuY3Rpb24gdGhhdCBpcyBpbnZva2VkIGltbWVkaWF0ZWx5IHdpdGgge0Bjb2RlIHJlc29sdmV9XG4gKiAgICAgYW5kIHtAY29kZSByZWplY3R9IGZ1bmN0aW9ucyBhcyBhcmd1bWVudHMuIFRoZSBQcm9taXNlIGlzIHJlc29sdmVkIG9yXG4gKiAgICAgcmVqZWN0ZWQgd2l0aCB0aGUgZmlyc3QgYXJndW1lbnQgcGFzc2VkIHRvIGVpdGhlciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7UkVTT0xWRVJfQ09OVEVYVD19IG9wdF9jb250ZXh0IEFuIG9wdGlvbmFsIGNvbnRleHQgZm9yIGV4ZWN1dGluZyB0aGVcbiAqICAgICByZXNvbHZlciBmdW5jdGlvbi4gSWYgdW5zcGVjaWZpZWQsIHRoZSByZXNvbHZlciBmdW5jdGlvbiB3aWxsIGJlIGV4ZWN1dGVkXG4gKiAgICAgaW4gdGhlIGRlZmF1bHQgc2NvcGUuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzdHJ1Y3RcbiAqIEBmaW5hbFxuICogQGltcGxlbWVudHMge2dvb2cuVGhlbmFibGU8VFlQRT59XG4gKiBAdGVtcGxhdGUgVFlQRSxSRVNPTFZFUl9DT05URVhUXG4gKi9cbmdvb2cuUHJvbWlzZSA9IGZ1bmN0aW9uKHJlc29sdmVyLCBvcHRfY29udGV4dCkge1xuICAvKipcbiAgICogVGhlIGludGVybmFsIHN0YXRlIG9mIHRoaXMgUHJvbWlzZS4gRWl0aGVyIFBFTkRJTkcsIEZVTEZJTExFRCwgUkVKRUNURUQsIG9yXG4gICAqIEJMT0NLRUQuXG4gICAqIEBwcml2YXRlIHtnb29nLlByb21pc2UuU3RhdGVffVxuICAgKi9cbiAgdGhpcy5zdGF0ZV8gPSBnb29nLlByb21pc2UuU3RhdGVfLlBFTkRJTkc7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXR0bGVkIHJlc3VsdCBvZiB0aGUgUHJvbWlzZS4gSW1tdXRhYmxlIG9uY2Ugc2V0IHdpdGggZWl0aGVyIGFcbiAgICogZnVsZmlsbG1lbnQgdmFsdWUgb3IgcmVqZWN0aW9uIHJlYXNvbi5cbiAgICogQHByaXZhdGUgeyp9XG4gICAqL1xuICB0aGlzLnJlc3VsdF8gPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEZvciBQcm9taXNlcyBjcmVhdGVkIGJ5IGNhbGxpbmcge0Bjb2RlIHRoZW4oKX0sIHRoZSBvcmlnaW5hdGluZyBwYXJlbnQuXG4gICAqIEBwcml2YXRlIHtnb29nLlByb21pc2V9XG4gICAqL1xuICB0aGlzLnBhcmVudF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbGlua2VkIGxpc3Qgb2Yge0Bjb2RlIG9uRnVsZmlsbGVkfSBhbmQge0Bjb2RlIG9uUmVqZWN0ZWR9IGNhbGxiYWNrc1xuICAgKiBhZGRlZCB0byB0aGlzIFByb21pc2UgYnkgY2FsbHMgdG8ge0Bjb2RlIHRoZW4oKX0uXG4gICAqIEBwcml2YXRlIHs/Z29vZy5Qcm9taXNlLkNhbGxiYWNrRW50cnlffVxuICAgKi9cbiAgdGhpcy5jYWxsYmFja0VudHJpZXNfID0gbnVsbDtcblxuICAvKipcbiAgICogVGhlIHRhaWwgb2YgdGhlIGxpbmtlZCBsaXN0IG9mIHtAY29kZSBvbkZ1bGZpbGxlZH0gYW5kIHtAY29kZSBvblJlamVjdGVkfVxuICAgKiBjYWxsYmFja3MgYWRkZWQgdG8gdGhpcyBQcm9taXNlIGJ5IGNhbGxzIHRvIHtAY29kZSB0aGVuKCl9LlxuICAgKiBAcHJpdmF0ZSB7P2dvb2cuUHJvbWlzZS5DYWxsYmFja0VudHJ5X31cbiAgICovXG4gIHRoaXMuY2FsbGJhY2tFbnRyaWVzVGFpbF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBQcm9taXNlIGlzIGluIHRoZSBxdWV1ZSBvZiBQcm9taXNlcyB0byBleGVjdXRlLlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuZXhlY3V0aW5nXyA9IGZhbHNlO1xuXG4gIGlmIChnb29nLlByb21pc2UuVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSA+IDApIHtcbiAgICAvKipcbiAgICAgKiBBIHRpbWVvdXQgSUQgdXNlZCB3aGVuIHRoZSB7QGNvZGUgVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWX0gaXMgZ3JlYXRlclxuICAgICAqIHRoYW4gMCBtaWxsaXNlY29uZHMuIFRoZSBJRCBpcyBzZXQgd2hlbiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgYW5kXG4gICAgICogY2xlYXJlZCBvbmx5IGlmIGFuIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFjayBpcyBpbnZva2VkIGZvciB0aGVcbiAgICAgKiBQcm9taXNlIChvciBvbmUgb2YgaXRzIGRlc2NlbmRhbnRzKSBiZWZvcmUgdGhlIGRlbGF5IGlzIGV4Y2VlZGVkLlxuICAgICAqXG4gICAgICogSWYgdGhlIHJlamVjdGlvbiBpcyBub3QgaGFuZGxlZCBiZWZvcmUgdGhlIHRpbWVvdXQgY29tcGxldGVzLCB0aGVcbiAgICAgKiByZWplY3Rpb24gcmVhc29uIGlzIHBhc3NlZCB0byB0aGUgdW5oYW5kbGVkIHJlamVjdGlvbiBoYW5kbGVyLlxuICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy51bmhhbmRsZWRSZWplY3Rpb25JZF8gPSAwO1xuICB9IGVsc2UgaWYgKGdvb2cuUHJvbWlzZS5VTkhBTkRMRURfUkVKRUNUSU9OX0RFTEFZID09IDApIHtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSB7QGNvZGUgVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWX0gaXMgc2V0IHRvIDAgbWlsbGlzZWNvbmRzLCBhXG4gICAgICogYm9vbGVhbiB0aGF0IGlzIHNldCBpZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgYW5kIHJlc2V0IHRvIGZhbHNlIGlmIGFuXG4gICAgICoge0Bjb2RlIG9uUmVqZWN0ZWR9IGNhbGxiYWNrIGlzIGludm9rZWQgZm9yIHRoZSBQcm9taXNlIChvciBvbmUgb2YgaXRzXG4gICAgICogZGVzY2VuZGFudHMpLiBJZiB0aGUgcmVqZWN0aW9uIGlzIG5vdCBoYW5kbGVkIGJlZm9yZSB0aGUgbmV4dCB0aW1lc3RlcCxcbiAgICAgKiB0aGUgcmVqZWN0aW9uIHJlYXNvbiBpcyBwYXNzZWQgdG8gdGhlIHVuaGFuZGxlZCByZWplY3Rpb24gaGFuZGxlci5cbiAgICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmhhZFVuaGFuZGxlZFJlamVjdGlvbl8gPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChnb29nLlByb21pc2UuTE9OR19TVEFDS19UUkFDRVMpIHtcbiAgICAvKipcbiAgICAgKiBBIGxpc3Qgb2Ygc3RhY2sgdHJhY2UgZnJhbWVzIHBvaW50aW5nIHRvIHRoZSBsb2NhdGlvbnMgd2hlcmUgdGhpcyBQcm9taXNlXG4gICAgICogd2FzIGNyZWF0ZWQgb3IgaGFkIGNhbGxiYWNrcyBhZGRlZCB0byBpdC4gU2F2ZWQgdG8gYWRkIGFkZGl0aW9uYWwgY29udGV4dFxuICAgICAqIHRvIHN0YWNrIHRyYWNlcyB3aGVuIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gICAgICogQHByaXZhdGUgeyFBcnJheTxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMuc3RhY2tfID0gW107XG4gICAgdGhpcy5hZGRTdGFja1RyYWNlXyhuZXcgRXJyb3IoJ2NyZWF0ZWQnKSk7XG5cbiAgICAvKipcbiAgICAgKiBJbmRleCBvZiB0aGUgbW9zdCByZWNlbnRseSBleGVjdXRlZCBzdGFjayBmcmFtZSBlbnRyeS5cbiAgICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuY3VycmVudFN0ZXBfID0gMDtcbiAgfVxuXG4gIC8vIEFzIGFuIG9wdGltaXphdGlvbiwgd2UgY2FuIHNraXAgdGhpcyBpZiByZXNvbHZlciBpcyBnb29nLm51bGxGdW5jdGlvbi5cbiAgLy8gVGhpcyB2YWx1ZSBpcyBwYXNzZWQgaW50ZXJuYWxseSB3aGVuIGNyZWF0aW5nIGEgcHJvbWlzZSB3aGljaCB3aWxsIGJlXG4gIC8vIHJlc29sdmVkIHRocm91Z2ggYSBtb3JlIG9wdGltaXplZCBwYXRoLlxuICBpZiAocmVzb2x2ZXIgIT0gZ29vZy5udWxsRnVuY3Rpb24pIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgcmVzb2x2ZXIuY2FsbChcbiAgICAgICAgICBvcHRfY29udGV4dCxcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgc2VsZi5yZXNvbHZlXyhnb29nLlByb21pc2UuU3RhdGVfLkZVTEZJTExFRCwgdmFsdWUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgICBpZiAoZ29vZy5ERUJVRyAmJlxuICAgICAgICAgICAgICAgICEocmVhc29uIGluc3RhbmNlb2YgZ29vZy5Qcm9taXNlLkNhbmNlbGxhdGlvbkVycm9yKSkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFByb21pc2Ugd2FzIHJlamVjdGVkLiBTdGVwIHVwIG9uZSBjYWxsIGZyYW1lIHRvIHNlZSB3aHkuXG4gICAgICAgICAgICAgICAgaWYgKHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvbWlzZSByZWplY3RlZC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBPbmx5IHRocm93biBzbyBicm93c2VyIGRldiB0b29scyBjYW4gY2F0Y2ggcmVqZWN0aW9ucyBvZlxuICAgICAgICAgICAgICAgIC8vIHByb21pc2VzIHdoZW4gdGhlIG9wdGlvbiB0byBicmVhayBvbiBjYXVnaHQgZXhjZXB0aW9ucyBpc1xuICAgICAgICAgICAgICAgIC8vIGFjdGl2YXRlZC5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5yZXNvbHZlXyhnb29nLlByb21pc2UuU3RhdGVfLlJFSkVDVEVELCByZWFzb24pO1xuICAgICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMucmVzb2x2ZV8oZ29vZy5Qcm9taXNlLlN0YXRlXy5SRUpFQ1RFRCwgZSk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0cmFjZXMgb2Yge0Bjb2RlIHRoZW59IGNhbGxzIHNob3VsZCBiZSBpbmNsdWRlZCBpblxuICogZXhjZXB0aW9ucyB0aHJvd25cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cuUHJvbWlzZS5MT05HX1NUQUNLX1RSQUNFUycsIGZhbHNlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge251bWJlcn0gVGhlIGRlbGF5IGluIG1pbGxpc2Vjb25kcyBiZWZvcmUgYSByZWplY3RlZCBQcm9taXNlJ3MgcmVhc29uXG4gKiBpcyBwYXNzZWQgdG8gdGhlIHJlamVjdGlvbiBoYW5kbGVyLiBCeSBkZWZhdWx0LCB0aGUgcmVqZWN0aW9uIGhhbmRsZXJcbiAqIHJldGhyb3dzIHRoZSByZWplY3Rpb24gcmVhc29uIHNvIHRoYXQgaXQgYXBwZWFycyBpbiB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgb3JcbiAqIHtAY29kZSB3aW5kb3cub25lcnJvcn0gaGFuZGxlci5cbiAqXG4gKiBSZWplY3Rpb25zIGFyZSByZXRocm93biBhcyBxdWlja2x5IGFzIHBvc3NpYmxlIGJ5IGRlZmF1bHQuIEEgbmVnYXRpdmUgdmFsdWVcbiAqIGRpc2FibGVzIHJlamVjdGlvbiBoYW5kbGluZyBlbnRpcmVseS5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cuUHJvbWlzZS5VTkhBTkRMRURfUkVKRUNUSU9OX0RFTEFZJywgMCk7XG5cblxuLyoqXG4gKiBUaGUgcG9zc2libGUgaW50ZXJuYWwgc3RhdGVzIGZvciBhIFByb21pc2UuIFRoZXNlIHN0YXRlcyBhcmUgbm90IGRpcmVjdGx5XG4gKiBvYnNlcnZhYmxlIHRvIGV4dGVybmFsIGNhbGxlcnMuXG4gKiBAZW51bSB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5Qcm9taXNlLlN0YXRlXyA9IHtcbiAgLyoqIFRoZSBQcm9taXNlIGlzIHdhaXRpbmcgZm9yIHJlc29sdXRpb24uICovXG4gIFBFTkRJTkc6IDAsXG5cbiAgLyoqIFRoZSBQcm9taXNlIGlzIGJsb2NrZWQgd2FpdGluZyBmb3IgdGhlIHJlc3VsdCBvZiBhbm90aGVyIFRoZW5hYmxlLiAqL1xuICBCTE9DS0VEOiAxLFxuXG4gIC8qKiBUaGUgUHJvbWlzZSBoYXMgYmVlbiByZXNvbHZlZCB3aXRoIGEgZnVsZmlsbG1lbnQgdmFsdWUuICovXG4gIEZVTEZJTExFRDogMixcblxuICAvKiogVGhlIFByb21pc2UgaGFzIGJlZW4gcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbiByZWFzb24uICovXG4gIFJFSkVDVEVEOiAzXG59O1xuXG5cblxuLyoqXG4gKiBFbnRyaWVzIGluIHRoZSBjYWxsYmFjayBjaGFpbi4gRWFjaCBjYWxsIHRvIHtAY29kZSB0aGVufSxcbiAqIHtAY29kZSB0aGVuQ2F0Y2h9LCBvciB7QGNvZGUgdGhlbkFsd2F5c30gY3JlYXRlcyBhbiBlbnRyeSBjb250YWluaW5nIHRoZVxuICogZnVuY3Rpb25zIHRoYXQgbWF5IGJlIGludm9rZWQgb25jZSB0aGUgUHJvbWlzZSBpcyBzZXR0bGVkLlxuICpcbiAqIEBwcml2YXRlIEBmaW5hbCBAc3RydWN0IEBjb25zdHJ1Y3RvclxuICovXG5nb29nLlByb21pc2UuQ2FsbGJhY2tFbnRyeV8gPSBmdW5jdGlvbigpIHtcbiAgLyoqIEB0eXBlIHs/Z29vZy5Qcm9taXNlfSAqL1xuICB0aGlzLmNoaWxkID0gbnVsbDtcbiAgLyoqIEB0eXBlIHtGdW5jdGlvbn0gKi9cbiAgdGhpcy5vbkZ1bGZpbGxlZCA9IG51bGw7XG4gIC8qKiBAdHlwZSB7RnVuY3Rpb259ICovXG4gIHRoaXMub25SZWplY3RlZCA9IG51bGw7XG4gIC8qKiBAdHlwZSB7P30gKi9cbiAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgLyoqIEB0eXBlIHs/Z29vZy5Qcm9taXNlLkNhbGxiYWNrRW50cnlffSAqL1xuICB0aGlzLm5leHQgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBBIGJvb2xlYW4gdmFsdWUgdG8gaW5kaWNhdGUgdGhpcyBpcyBhIFwidGhlbkFsd2F5c1wiIGNhbGxiYWNrIGVudHJ5LlxuICAgKiBVbmxpa2UgYSBub3JtYWwgXCJ0aGVuL3RoZW5Wb2lkXCIgYSBcInRoZW5BbHdheXMgZG9lc24ndCBwYXJ0aWNpcGF0ZVxuICAgKiBpbiBcImNhbmNlbFwiIGNvbnNpZGVyYXRpb25zIGJ1dCBpcyBzaW1wbHkgYW4gb2JzZXJ2ZXIgYW5kIHJlcXVpcmVzXG4gICAqIHNwZWNpYWwgaGFuZGxpbmcuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5hbHdheXMgPSBmYWxzZTtcbn07XG5cblxuLyoqIGNsZWFyIHRoZSBvYmplY3QgcHJpb3IgdG8gcmV1c2UgKi9cbmdvb2cuUHJvbWlzZS5DYWxsYmFja0VudHJ5Xy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jaGlsZCA9IG51bGw7XG4gIHRoaXMub25GdWxmaWxsZWQgPSBudWxsO1xuICB0aGlzLm9uUmVqZWN0ZWQgPSBudWxsO1xuICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICB0aGlzLmFsd2F5cyA9IGZhbHNlO1xufTtcblxuXG4vKipcbiAqIEBkZWZpbmUge251bWJlcn0gVGhlIG51bWJlciBvZiBjdXJyZW50bHkgdW51c2VkIG9iamVjdHMgdG8ga2VlcCBhcm91bmQgZm9yXG4gKiAgICByZXVzZS5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cuUHJvbWlzZS5ERUZBVUxUX01BWF9VTlVTRUQnLCAxMDApO1xuXG5cbi8qKiBAY29uc3QgQHByaXZhdGUge2dvb2cuYXN5bmMuRnJlZUxpc3Q8IWdvb2cuUHJvbWlzZS5DYWxsYmFja0VudHJ5Xz59ICovXG5nb29nLlByb21pc2UuZnJlZWxpc3RfID0gbmV3IGdvb2cuYXN5bmMuRnJlZUxpc3QoXG4gICAgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IGdvb2cuUHJvbWlzZS5DYWxsYmFja0VudHJ5XygpO1xuICAgIH0sXG4gICAgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaXRlbS5yZXNldCgpO1xuICAgIH0sXG4gICAgZ29vZy5Qcm9taXNlLkRFRkFVTFRfTUFYX1VOVVNFRCk7XG5cblxuLyoqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZ1bGZpbGxlZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3RlZFxuICogQHBhcmFtIHs/fSBjb250ZXh0XG4gKiBAcmV0dXJuIHshZ29vZy5Qcm9taXNlLkNhbGxiYWNrRW50cnlffVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5Qcm9taXNlLmdldENhbGxiYWNrRW50cnlfID0gZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIGNvbnRleHQpIHtcbiAgdmFyIGVudHJ5ID0gZ29vZy5Qcm9taXNlLmZyZWVsaXN0Xy5nZXQoKTtcbiAgZW50cnkub25GdWxmaWxsZWQgPSBvbkZ1bGZpbGxlZDtcbiAgZW50cnkub25SZWplY3RlZCA9IG9uUmVqZWN0ZWQ7XG4gIGVudHJ5LmNvbnRleHQgPSBjb250ZXh0O1xuICByZXR1cm4gZW50cnk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshZ29vZy5Qcm9taXNlLkNhbGxiYWNrRW50cnlffSBlbnRyeVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5Qcm9taXNlLnJldHVybkVudHJ5XyA9IGZ1bmN0aW9uKGVudHJ5KSB7XG4gIGdvb2cuUHJvbWlzZS5mcmVlbGlzdF8ucHV0KGVudHJ5KTtcbn07XG5cblxuLy8gTk9URTogdGhpcyBpcyB0aGUgc2FtZSB0ZW1wbGF0ZSBleHByZXNzaW9uIGFzIGlzIHVzZWQgZm9yXG4vLyBnb29nLklUaGVuYWJsZS5wcm90b3R5cGUudGhlblxuXG5cbi8qKlxuICogQHBhcmFtIHtWQUxVRT19IG9wdF92YWx1ZVxuICogQHJldHVybiB7UkVTVUxUfSBBIG5ldyBQcm9taXNlIHRoYXQgaXMgaW1tZWRpYXRlbHkgcmVzb2x2ZWRcbiAqICAgICB3aXRoIHRoZSBnaXZlbiB2YWx1ZS4gSWYgdGhlIGlucHV0IHZhbHVlIGlzIGFscmVhZHkgYSBnb29nLlByb21pc2UsIGl0XG4gKiAgICAgd2lsbCBiZSByZXR1cm5lZCBpbW1lZGlhdGVseSB3aXRob3V0IGNyZWF0aW5nIGEgbmV3IGluc3RhbmNlLlxuICogQHRlbXBsYXRlIFZBTFVFXG4gKiBAdGVtcGxhdGUgUkVTVUxUIDo9IHR5cGUoJ2dvb2cuUHJvbWlzZScsXG4gKiAgICAgY29uZChpc1Vua25vd24oVkFMVUUpLCB1bmtub3duKCksXG4gKiAgICAgICBtYXB1bmlvbihWQUxVRSwgKFYpID0+XG4gKiAgICAgICAgIGNvbmQoaXNUZW1wbGF0aXplZChWKSAmJiBzdWIocmF3VHlwZU9mKFYpLCAnSVRoZW5hYmxlJyksXG4gKiAgICAgICAgICAgdGVtcGxhdGVUeXBlT2YoViwgMCksXG4gKiAgICAgICAgICAgY29uZChzdWIoViwgJ1RoZW5hYmxlJyksXG4gKiAgICAgICAgICAgICAgdW5rbm93bigpLFxuICogICAgICAgICAgICAgIFYpKSkpKVxuICogPTpcbiAqL1xuZ29vZy5Qcm9taXNlLnJlc29sdmUgPSBmdW5jdGlvbihvcHRfdmFsdWUpIHtcbiAgaWYgKG9wdF92YWx1ZSBpbnN0YW5jZW9mIGdvb2cuUHJvbWlzZSkge1xuICAgIC8vIEF2b2lkIGNyZWF0aW5nIGEgbmV3IG9iamVjdCBpZiB3ZSBhbHJlYWR5IGhhdmUgYSBwcm9taXNlIG9iamVjdFxuICAgIC8vIG9mIHRoZSBjb3JyZWN0IHR5cGUuXG4gICAgcmV0dXJuIG9wdF92YWx1ZTtcbiAgfVxuXG4gIC8vIFBhc3NpbmcgZ29vZy5udWxsRnVuY3Rpb24gd2lsbCBjYXVzZSB0aGUgY29uc3RydWN0b3IgdG8gdGFrZSBhbiBvcHRpbWl6ZWRcbiAgLy8gcGF0aCB0aGF0IHNraXBzIGNhbGxpbmcgdGhlIHJlc29sdmVyIGZ1bmN0aW9uLlxuICB2YXIgcHJvbWlzZSA9IG5ldyBnb29nLlByb21pc2UoZ29vZy5udWxsRnVuY3Rpb24pO1xuICBwcm9taXNlLnJlc29sdmVfKGdvb2cuUHJvbWlzZS5TdGF0ZV8uRlVMRklMTEVELCBvcHRfdmFsdWUpO1xuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyo9fSBvcHRfcmVhc29uXG4gKiBAcmV0dXJuIHshZ29vZy5Qcm9taXNlfSBBIG5ldyBQcm9taXNlIHRoYXQgaXMgaW1tZWRpYXRlbHkgcmVqZWN0ZWQgd2l0aCB0aGVcbiAqICAgICBnaXZlbiByZWFzb24uXG4gKi9cbmdvb2cuUHJvbWlzZS5yZWplY3QgPSBmdW5jdGlvbihvcHRfcmVhc29uKSB7XG4gIHJldHVybiBuZXcgZ29vZy5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlamVjdChvcHRfcmVhc29uKTtcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG9cbiAqIHtAY29kZSBnb29nLlByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCl9LCBidXQgaXRcbiAqIGF2b2lkcyBjcmVhdGluZyBhbiB1bm5lY2Vzc2FyeSB3cmFwcGVyIFByb21pc2Ugd2hlbiB7QGNvZGUgdmFsdWV9IGlzIGFscmVhZHlcbiAqIHRoZW5hYmxlLlxuICpcbiAqIEBwYXJhbSB7Pyhnb29nLlRoZW5hYmxlPFRZUEU+fFRoZW5hYmxlfFRZUEUpfSB2YWx1ZVxuICogQHBhcmFtIHtmdW5jdGlvbihUWVBFKTogP30gb25GdWxmaWxsZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKik6ICp9IG9uUmVqZWN0ZWRcbiAqIEB0ZW1wbGF0ZSBUWVBFXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlByb21pc2UucmVzb2x2ZVRoZW5fID0gZnVuY3Rpb24odmFsdWUsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gIHZhciBpc1RoZW5hYmxlID0gZ29vZy5Qcm9taXNlLm1heWJlVGhlbl8oXG4gICAgICB2YWx1ZSwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG51bGwpO1xuICBpZiAoIWlzVGhlbmFibGUpIHtcbiAgICBnb29nLmFzeW5jLnJ1bihnb29nLnBhcnRpYWwob25GdWxmaWxsZWQsIHZhbHVlKSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTw/KGdvb2cuUHJvbWlzZTxUWVBFPnxnb29nLlRoZW5hYmxlPFRZUEU+fFRoZW5hYmxlfCopPn1cbiAqICAgICBwcm9taXNlc1xuICogQHJldHVybiB7IWdvb2cuUHJvbWlzZTxUWVBFPn0gQSBQcm9taXNlIHRoYXQgcmVjZWl2ZXMgdGhlIHJlc3VsdCBvZiB0aGVcbiAqICAgICBmaXJzdCBQcm9taXNlIChvciBQcm9taXNlLWxpa2UpIGlucHV0IHRvIHNldHRsZSBpbW1lZGlhdGVseSBhZnRlciBpdFxuICogICAgIHNldHRsZXMuXG4gKiBAdGVtcGxhdGUgVFlQRVxuICovXG5nb29nLlByb21pc2UucmFjZSA9IGZ1bmN0aW9uKHByb21pc2VzKSB7XG4gIHJldHVybiBuZXcgZ29vZy5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmICghcHJvbWlzZXMubGVuZ3RoKSB7XG4gICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBwcm9taXNlOyBpIDwgcHJvbWlzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlc1tpXTtcbiAgICAgIGdvb2cuUHJvbWlzZS5yZXNvbHZlVGhlbl8ocHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PD8oZ29vZy5Qcm9taXNlPFRZUEU+fGdvb2cuVGhlbmFibGU8VFlQRT58VGhlbmFibGV8Kik+fVxuICogICAgIHByb21pc2VzXG4gKiBAcmV0dXJuIHshZ29vZy5Qcm9taXNlPCFBcnJheTxUWVBFPj59IEEgUHJvbWlzZSB0aGF0IHJlY2VpdmVzIGEgbGlzdCBvZlxuICogICAgIGV2ZXJ5IGZ1bGZpbGxlZCB2YWx1ZSBvbmNlIGV2ZXJ5IGlucHV0IFByb21pc2UgKG9yIFByb21pc2UtbGlrZSkgaXNcbiAqICAgICBzdWNjZXNzZnVsbHkgZnVsZmlsbGVkLCBvciBpcyByZWplY3RlZCB3aXRoIHRoZSBmaXJzdCByZWplY3Rpb24gcmVhc29uXG4gKiAgICAgaW1tZWRpYXRlbHkgYWZ0ZXIgaXQgaXMgcmVqZWN0ZWQuXG4gKiBAdGVtcGxhdGUgVFlQRVxuICovXG5nb29nLlByb21pc2UuYWxsID0gZnVuY3Rpb24ocHJvbWlzZXMpIHtcbiAgcmV0dXJuIG5ldyBnb29nLlByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHRvRnVsZmlsbCA9IHByb21pc2VzLmxlbmd0aDtcbiAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICBpZiAoIXRvRnVsZmlsbCkge1xuICAgICAgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvbkZ1bGZpbGwgPSBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICAgIHRvRnVsZmlsbC0tO1xuICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgaWYgKHRvRnVsZmlsbCA9PSAwKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWVzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG9uUmVqZWN0ID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICByZWplY3QocmVhc29uKTtcbiAgICB9O1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIHByb21pc2U7IGkgPCBwcm9taXNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2VzW2ldO1xuICAgICAgZ29vZy5Qcm9taXNlLnJlc29sdmVUaGVuXyhcbiAgICAgICAgICBwcm9taXNlLCBnb29nLnBhcnRpYWwob25GdWxmaWxsLCBpKSwgb25SZWplY3QpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8Pyhnb29nLlByb21pc2U8VFlQRT58Z29vZy5UaGVuYWJsZTxUWVBFPnxUaGVuYWJsZXwqKT59XG4gKiAgICAgcHJvbWlzZXNcbiAqIEByZXR1cm4geyFnb29nLlByb21pc2U8IUFycmF5PHtcbiAqICAgICBmdWxmaWxsZWQ6IGJvb2xlYW4sXG4gKiAgICAgdmFsdWU6IChUWVBFfHVuZGVmaW5lZCksXG4gKiAgICAgcmVhc29uOiAoKnx1bmRlZmluZWQpfT4+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgbGlzdCBvZlxuICogICAgICAgICByZXN1bHQgb2JqZWN0cyBvbmNlIGFsbCBpbnB1dCBQcm9taXNlcyAob3IgUHJvbWlzZS1saWtlKSBoYXZlXG4gKiAgICAgICAgIHNldHRsZWQuIEVhY2ggcmVzdWx0IG9iamVjdCBjb250YWlucyBhICdmdWxmaWxsZWQnIGJvb2xlYW4gaW5kaWNhdGluZ1xuICogICAgICAgICB3aGV0aGVyIGFuIGlucHV0IFByb21pc2Ugd2FzIGZ1bGZpbGxlZCBvciByZWplY3RlZC4gRm9yIGZ1bGZpbGxlZFxuICogICAgICAgICBQcm9taXNlcywgdGhlIHJlc3VsdGluZyB2YWx1ZSBpcyBzdG9yZWQgaW4gdGhlICd2YWx1ZScgZmllbGQuIEZvclxuICogICAgICAgICByZWplY3RlZCBQcm9taXNlcywgdGhlIHJlamVjdGlvbiByZWFzb24gaXMgc3RvcmVkIGluIHRoZSAncmVhc29uJ1xuICogICAgICAgICBmaWVsZC5cbiAqIEB0ZW1wbGF0ZSBUWVBFXG4gKi9cbmdvb2cuUHJvbWlzZS5hbGxTZXR0bGVkID0gZnVuY3Rpb24ocHJvbWlzZXMpIHtcbiAgcmV0dXJuIG5ldyBnb29nLlByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHRvU2V0dGxlID0gcHJvbWlzZXMubGVuZ3RoO1xuICAgIHZhciByZXN1bHRzID0gW107XG5cbiAgICBpZiAoIXRvU2V0dGxlKSB7XG4gICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvblNldHRsZWQgPSBmdW5jdGlvbihpbmRleCwgZnVsZmlsbGVkLCByZXN1bHQpIHtcbiAgICAgIHRvU2V0dGxlLS07XG4gICAgICByZXN1bHRzW2luZGV4XSA9IGZ1bGZpbGxlZCA/XG4gICAgICAgICAge2Z1bGZpbGxlZDogdHJ1ZSwgdmFsdWU6IHJlc3VsdH0gOlxuICAgICAgICAgIHtmdWxmaWxsZWQ6IGZhbHNlLCByZWFzb246IHJlc3VsdH07XG4gICAgICBpZiAodG9TZXR0bGUgPT0gMCkge1xuICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBpID0gMCwgcHJvbWlzZTsgaSA8IHByb21pc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZXNbaV07XG4gICAgICBnb29nLlByb21pc2UucmVzb2x2ZVRoZW5fKHByb21pc2UsXG4gICAgICAgICAgZ29vZy5wYXJ0aWFsKG9uU2V0dGxlZCwgaSwgdHJ1ZSAvKiBmdWxmaWxsZWQgKi8pLFxuICAgICAgICAgIGdvb2cucGFydGlhbChvblNldHRsZWQsIGksIGZhbHNlIC8qIGZ1bGZpbGxlZCAqLykpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8Pyhnb29nLlByb21pc2U8VFlQRT58Z29vZy5UaGVuYWJsZTxUWVBFPnxUaGVuYWJsZXwqKT59XG4gKiAgICAgcHJvbWlzZXNcbiAqIEByZXR1cm4geyFnb29nLlByb21pc2U8VFlQRT59IEEgUHJvbWlzZSB0aGF0IHJlY2VpdmVzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3RcbiAqICAgICBpbnB1dCB0byBiZSBmdWxmaWxsZWQsIG9yIGlzIHJlamVjdGVkIHdpdGggYSBsaXN0IG9mIGV2ZXJ5IHJlamVjdGlvblxuICogICAgIHJlYXNvbiBpZiBhbGwgaW5wdXRzIGFyZSByZWplY3RlZC5cbiAqIEB0ZW1wbGF0ZSBUWVBFXG4gKi9cbmdvb2cuUHJvbWlzZS5maXJzdEZ1bGZpbGxlZCA9IGZ1bmN0aW9uKHByb21pc2VzKSB7XG4gIHJldHVybiBuZXcgZ29vZy5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciB0b1JlamVjdCA9IHByb21pc2VzLmxlbmd0aDtcbiAgICB2YXIgcmVhc29ucyA9IFtdO1xuXG4gICAgaWYgKCF0b1JlamVjdCkge1xuICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvbkZ1bGZpbGwgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIHZhciBvblJlamVjdCA9IGZ1bmN0aW9uKGluZGV4LCByZWFzb24pIHtcbiAgICAgIHRvUmVqZWN0LS07XG4gICAgICByZWFzb25zW2luZGV4XSA9IHJlYXNvbjtcbiAgICAgIGlmICh0b1JlamVjdCA9PSAwKSB7XG4gICAgICAgIHJlamVjdChyZWFzb25zKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIHByb21pc2U7IGkgPCBwcm9taXNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2VzW2ldO1xuICAgICAgZ29vZy5Qcm9taXNlLnJlc29sdmVUaGVuXyhcbiAgICAgICAgICBwcm9taXNlLCBvbkZ1bGZpbGwsIGdvb2cucGFydGlhbChvblJlamVjdCwgaSkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7IWdvb2cucHJvbWlzZS5SZXNvbHZlcjxUWVBFPn0gUmVzb2x2ZXIgd3JhcHBpbmcgdGhlIHByb21pc2UgYW5kIGl0c1xuICogICAgIHJlc29sdmUgLyByZWplY3QgZnVuY3Rpb25zLiBSZXNvbHZpbmcgb3IgcmVqZWN0aW5nIHRoZSByZXNvbHZlclxuICogICAgIHJlc29sdmVzIG9yIHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAdGVtcGxhdGUgVFlQRVxuICovXG5nb29nLlByb21pc2Uud2l0aFJlc29sdmVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHZhciBwcm9taXNlID0gbmV3IGdvb2cuUHJvbWlzZShmdW5jdGlvbihycywgcmopIHtcbiAgICByZXNvbHZlID0gcnM7XG4gICAgcmVqZWN0ID0gcmo7XG4gIH0pO1xuICByZXR1cm4gbmV3IGdvb2cuUHJvbWlzZS5SZXNvbHZlcl8ocHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbn07XG5cblxuLyoqXG4gKiBBZGRzIGNhbGxiYWNrcyB0aGF0IHdpbGwgb3BlcmF0ZSBvbiB0aGUgcmVzdWx0IG9mIHRoZSBQcm9taXNlLCByZXR1cm5pbmcgYVxuICogbmV3IGNoaWxkIFByb21pc2UuXG4gKlxuICogSWYgdGhlIFByb21pc2UgaXMgZnVsZmlsbGVkLCB0aGUge0Bjb2RlIG9uRnVsZmlsbGVkfSBjYWxsYmFjayB3aWxsIGJlIGludm9rZWRcbiAqIHdpdGggdGhlIGZ1bGZpbGxtZW50IHZhbHVlIGFzIGFyZ3VtZW50LCBhbmQgdGhlIGNoaWxkIFByb21pc2Ugd2lsbCBiZVxuICogZnVsZmlsbGVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgY2FsbGJhY2suIElmIHRoZSBjYWxsYmFjayB0aHJvd3MgYW5cbiAqIGV4Y2VwdGlvbiwgdGhlIGNoaWxkIFByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSB0aHJvd24gdmFsdWUgaW5zdGVhZC5cbiAqXG4gKiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgdGhlIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFjayB3aWxsIGJlIGludm9rZWRcbiAqIHdpdGggdGhlIHJlamVjdGlvbiByZWFzb24gYXMgYXJndW1lbnQsIGFuZCB0aGUgY2hpbGQgUHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkXG4gKiB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb3IgcmVqZWN0ZWQgd2l0aCB0aGUgdGhyb3duIHZhbHVlIG9mIHRoZSBjYWxsYmFjay5cbiAqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24oXG4gICAgb3B0X29uRnVsZmlsbGVkLCBvcHRfb25SZWplY3RlZCwgb3B0X2NvbnRleHQpIHtcblxuICBpZiAob3B0X29uRnVsZmlsbGVkICE9IG51bGwpIHtcbiAgICBnb29nLmFzc2VydHMuYXNzZXJ0RnVuY3Rpb24ob3B0X29uRnVsZmlsbGVkLFxuICAgICAgICAnb3B0X29uRnVsZmlsbGVkIHNob3VsZCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG4gIGlmIChvcHRfb25SZWplY3RlZCAhPSBudWxsKSB7XG4gICAgZ29vZy5hc3NlcnRzLmFzc2VydEZ1bmN0aW9uKG9wdF9vblJlamVjdGVkLFxuICAgICAgICAnb3B0X29uUmVqZWN0ZWQgc2hvdWxkIGJlIGEgZnVuY3Rpb24uIERpZCB5b3UgcGFzcyBvcHRfY29udGV4dCAnICtcbiAgICAgICAgJ2FzIHRoZSBzZWNvbmQgYXJndW1lbnQgaW5zdGVhZCBvZiB0aGUgdGhpcmQ/Jyk7XG4gIH1cblxuICBpZiAoZ29vZy5Qcm9taXNlLkxPTkdfU1RBQ0tfVFJBQ0VTKSB7XG4gICAgdGhpcy5hZGRTdGFja1RyYWNlXyhuZXcgRXJyb3IoJ3RoZW4nKSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5hZGRDaGlsZFByb21pc2VfKFxuICAgICAgZ29vZy5pc0Z1bmN0aW9uKG9wdF9vbkZ1bGZpbGxlZCkgPyBvcHRfb25GdWxmaWxsZWQgOiBudWxsLFxuICAgICAgZ29vZy5pc0Z1bmN0aW9uKG9wdF9vblJlamVjdGVkKSA/IG9wdF9vblJlamVjdGVkIDogbnVsbCxcbiAgICAgIG9wdF9jb250ZXh0KTtcbn07XG5nb29nLlRoZW5hYmxlLmFkZEltcGxlbWVudGF0aW9uKGdvb2cuUHJvbWlzZSk7XG5cblxuLyoqXG4gKiBBZGRzIGNhbGxiYWNrcyB0aGF0IHdpbGwgb3BlcmF0ZSBvbiB0aGUgcmVzdWx0IG9mIHRoZSBQcm9taXNlIHdpdGhvdXRcbiAqIHJldHVybmluZyBhIGNoaWxkIFByb21pc2UgKHVubGlrZSBcInRoZW5cIikuXG4gKlxuICogSWYgdGhlIFByb21pc2UgaXMgZnVsZmlsbGVkLCB0aGUge0Bjb2RlIG9uRnVsZmlsbGVkfSBjYWxsYmFjayB3aWxsIGJlIGludm9rZWRcbiAqIHdpdGggdGhlIGZ1bGZpbGxtZW50IHZhbHVlIGFzIGFyZ3VtZW50LlxuICpcbiAqIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCB0aGUge0Bjb2RlIG9uUmVqZWN0ZWR9IGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZFxuICogd2l0aCB0aGUgcmVqZWN0aW9uIHJlYXNvbiBhcyBhcmd1bWVudC5cbiAqXG4gKiBAcGFyYW0gez8oZnVuY3Rpb24odGhpczpUSElTLCBUWVBFKTo/KT19IG9wdF9vbkZ1bGZpbGxlZCBBXG4gKiAgICAgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgd2l0aCB0aGUgZnVsZmlsbG1lbnQgdmFsdWUgaWYgdGhlIFByb21pc2VcbiAqICAgICBpcyBmdWxmaWxsZWQuXG4gKiBAcGFyYW0gez8oZnVuY3Rpb24odGhpczpUSElTLCAqKTogKik9fSBvcHRfb25SZWplY3RlZCBBIGZ1bmN0aW9uIHRoYXQgd2lsbFxuICogICAgIGJlIGludm9rZWQgd2l0aCB0aGUgcmVqZWN0aW9uIHJlYXNvbiBpZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZC5cbiAqIEBwYXJhbSB7VEhJUz19IG9wdF9jb250ZXh0IEFuIG9wdGlvbmFsIGNvbnRleHQgb2JqZWN0IHRoYXQgd2lsbCBiZSB0aGVcbiAqICAgICBleGVjdXRpb24gY29udGV4dCBmb3IgdGhlIGNhbGxiYWNrcy4gQnkgZGVmYXVsdCwgZnVuY3Rpb25zIGFyZSBleGVjdXRlZFxuICogICAgIHdpdGggdGhlIGRlZmF1bHQgdGhpcy5cbiAqIEBwYWNrYWdlXG4gKiBAdGVtcGxhdGUgVEhJU1xuICovXG5nb29nLlByb21pc2UucHJvdG90eXBlLnRoZW5Wb2lkID0gZnVuY3Rpb24oXG4gICAgb3B0X29uRnVsZmlsbGVkLCBvcHRfb25SZWplY3RlZCwgb3B0X2NvbnRleHQpIHtcblxuICBpZiAob3B0X29uRnVsZmlsbGVkICE9IG51bGwpIHtcbiAgICBnb29nLmFzc2VydHMuYXNzZXJ0RnVuY3Rpb24ob3B0X29uRnVsZmlsbGVkLFxuICAgICAgICAnb3B0X29uRnVsZmlsbGVkIHNob3VsZCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG4gIGlmIChvcHRfb25SZWplY3RlZCAhPSBudWxsKSB7XG4gICAgZ29vZy5hc3NlcnRzLmFzc2VydEZ1bmN0aW9uKG9wdF9vblJlamVjdGVkLFxuICAgICAgICAnb3B0X29uUmVqZWN0ZWQgc2hvdWxkIGJlIGEgZnVuY3Rpb24uIERpZCB5b3UgcGFzcyBvcHRfY29udGV4dCAnICtcbiAgICAgICAgJ2FzIHRoZSBzZWNvbmQgYXJndW1lbnQgaW5zdGVhZCBvZiB0aGUgdGhpcmQ/Jyk7XG4gIH1cblxuICBpZiAoZ29vZy5Qcm9taXNlLkxPTkdfU1RBQ0tfVFJBQ0VTKSB7XG4gICAgdGhpcy5hZGRTdGFja1RyYWNlXyhuZXcgRXJyb3IoJ3RoZW4nKSk7XG4gIH1cblxuICAvLyBOb3RlOiBubyBkZWZhdWx0IHJlamVjdGlvbiBoYW5kbGVyIGlzIHByb3ZpZGVkIGhlcmUgYXMgd2UgbmVlZCB0b1xuICAvLyBkaXN0aW5ndWlzaCB1bmhhbmRsZWQgcmVqZWN0aW9ucy5cbiAgdGhpcy5hZGRDYWxsYmFja0VudHJ5Xyhnb29nLlByb21pc2UuZ2V0Q2FsbGJhY2tFbnRyeV8oXG4gICAgICBvcHRfb25GdWxmaWxsZWQgfHwgZ29vZy5udWxsRnVuY3Rpb24sXG4gICAgICBvcHRfb25SZWplY3RlZCB8fCBudWxsLFxuICAgICAgb3B0X2NvbnRleHQpKTtcbn07XG5cblxuLyoqXG4gKiBBZGRzIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgUHJvbWlzZSBpcyBzZXR0bGVkIChmdWxmaWxsZWRcbiAqIG9yIHJlamVjdGVkKS4gVGhlIGNhbGxiYWNrIHJlY2VpdmVzIG5vIGFyZ3VtZW50LCBhbmQgbm8gbmV3IGNoaWxkIFByb21pc2UgaXNcbiAqIGNyZWF0ZWQuIFRoaXMgaXMgdXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IGNsZWFudXAgdGFrZXMgcGxhY2UgYWZ0ZXIgY2VydGFpblxuICogYXN5bmNocm9ub3VzIG9wZXJhdGlvbnMuIENhbGxiYWNrcyBhZGRlZCB3aXRoIHtAY29kZSB0aGVuQWx3YXlzfSB3aWxsIGJlXG4gKiBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciB3aXRoIG90aGVyIGNhbGxzIHRvIHtAY29kZSB0aGVufSxcbiAqIHtAY29kZSB0aGVuQWx3YXlzfSwgb3Ige0Bjb2RlIHRoZW5DYXRjaH0uXG4gKlxuICogU2luY2UgaXQgZG9lcyBub3QgcHJvZHVjZSBhIG5ldyBjaGlsZCBQcm9taXNlLCBjYW5jZWxsYXRpb24gcHJvcGFnYXRpb24gaXNcbiAqIG5vdCBwcmV2ZW50ZWQgYnkgYWRkaW5nIGNhbGxiYWNrcyB3aXRoIHtAY29kZSB0aGVuQWx3YXlzfS4gQSBQcm9taXNlIHRoYXQgaGFzXG4gKiBhIGNsZWFudXAgaGFuZGxlciBhZGRlZCB3aXRoIHtAY29kZSB0aGVuQWx3YXlzfSB3aWxsIGJlIGNhbmNlbGVkIGlmIGFsbCBvZlxuICogaXRzIGNoaWxkcmVuIGNyZWF0ZWQgYnkge0Bjb2RlIHRoZW59IChvciB7QGNvZGUgdGhlbkNhdGNofSkgYXJlIGNhbmNlbGVkLlxuICogQWRkaXRpb25hbGx5LCBzaW5jZSBhbnkgcmVqZWN0aW9ucyBhcmUgbm90IHBhc3NlZCB0byB0aGUgY2FsbGJhY2ssIGl0IGRvZXNcbiAqIG5vdCBzdG9wIHRoZSB1bmhhbmRsZWQgcmVqZWN0aW9uIGhhbmRsZXIgZnJvbSBydW5uaW5nLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpUSElTKTogdm9pZH0gb25TZXR0bGVkIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWRcbiAqICAgICB3aGVuIHRoZSBQcm9taXNlIGlzIHNldHRsZWQgKGZ1bGZpbGxlZCBvciByZWplY3RlZCkuXG4gKiBAcGFyYW0ge1RISVM9fSBvcHRfY29udGV4dCBBbiBvcHRpb25hbCBjb250ZXh0IG9iamVjdCB0aGF0IHdpbGwgYmUgdGhlXG4gKiAgICAgZXhlY3V0aW9uIGNvbnRleHQgZm9yIHRoZSBjYWxsYmFja3MuIEJ5IGRlZmF1bHQsIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWRcbiAqICAgICBpbiB0aGUgZ2xvYmFsIHNjb3BlLlxuICogQHJldHVybiB7IWdvb2cuUHJvbWlzZTxUWVBFPn0gVGhpcyBQcm9taXNlLCBmb3IgY2hhaW5pbmcgYWRkaXRpb25hbCBjYWxscy5cbiAqIEB0ZW1wbGF0ZSBUSElTXG4gKi9cbmdvb2cuUHJvbWlzZS5wcm90b3R5cGUudGhlbkFsd2F5cyA9IGZ1bmN0aW9uKG9uU2V0dGxlZCwgb3B0X2NvbnRleHQpIHtcbiAgaWYgKGdvb2cuUHJvbWlzZS5MT05HX1NUQUNLX1RSQUNFUykge1xuICAgIHRoaXMuYWRkU3RhY2tUcmFjZV8obmV3IEVycm9yKCd0aGVuQWx3YXlzJykpO1xuICB9XG5cbiAgdmFyIGVudHJ5ID0gZ29vZy5Qcm9taXNlLmdldENhbGxiYWNrRW50cnlfKG9uU2V0dGxlZCwgb25TZXR0bGVkLCBvcHRfY29udGV4dCk7XG4gIGVudHJ5LmFsd2F5cyA9IHRydWU7XG4gIHRoaXMuYWRkQ2FsbGJhY2tFbnRyeV8oZW50cnkpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBBZGRzIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGludm9rZWQgb25seSBpZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpc1xuICogaXMgZXF1aXZhbGVudCB0byB7QGNvZGUgdGhlbihudWxsLCBvblJlamVjdGVkKX0uXG4gKlxuICogQHBhcmFtIHshZnVuY3Rpb24odGhpczpUSElTLCAqKTogKn0gb25SZWplY3RlZCBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZVxuICogICAgIGludm9rZWQgd2l0aCB0aGUgcmVqZWN0aW9uIHJlYXNvbiBpZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZC5cbiAqIEBwYXJhbSB7VEhJUz19IG9wdF9jb250ZXh0IEFuIG9wdGlvbmFsIGNvbnRleHQgb2JqZWN0IHRoYXQgd2lsbCBiZSB0aGVcbiAqICAgICBleGVjdXRpb24gY29udGV4dCBmb3IgdGhlIGNhbGxiYWNrcy4gQnkgZGVmYXVsdCwgZnVuY3Rpb25zIGFyZSBleGVjdXRlZFxuICogICAgIGluIHRoZSBnbG9iYWwgc2NvcGUuXG4gKiBAcmV0dXJuIHshZ29vZy5Qcm9taXNlfSBBIG5ldyBQcm9taXNlIHRoYXQgd2lsbCByZWNlaXZlIHRoZSByZXN1bHQgb2YgdGhlXG4gKiAgICAgY2FsbGJhY2suXG4gKiBAdGVtcGxhdGUgVEhJU1xuICovXG5nb29nLlByb21pc2UucHJvdG90eXBlLnRoZW5DYXRjaCA9IGZ1bmN0aW9uKG9uUmVqZWN0ZWQsIG9wdF9jb250ZXh0KSB7XG4gIGlmIChnb29nLlByb21pc2UuTE9OR19TVEFDS19UUkFDRVMpIHtcbiAgICB0aGlzLmFkZFN0YWNrVHJhY2VfKG5ldyBFcnJvcigndGhlbkNhdGNoJykpO1xuICB9XG4gIHJldHVybiB0aGlzLmFkZENoaWxkUHJvbWlzZV8obnVsbCwgb25SZWplY3RlZCwgb3B0X2NvbnRleHQpO1xufTtcblxuXG4vKipcbiAqIENhbmNlbHMgdGhlIFByb21pc2UgaWYgaXQgaXMgc3RpbGwgcGVuZGluZyBieSByZWplY3RpbmcgaXQgd2l0aCBhIGNhbmNlbFxuICogRXJyb3IuIE5vIGFjdGlvbiBpcyBwZXJmb3JtZWQgaWYgdGhlIFByb21pc2UgaXMgYWxyZWFkeSByZXNvbHZlZC5cbiAqXG4gKiBBbGwgY2hpbGQgUHJvbWlzZXMgb2YgdGhlIGNhbmNlbGVkIFByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gKiBjYW5jZWwgZXJyb3IsIGFzIHdpdGggbm9ybWFsIFByb21pc2UgcmVqZWN0aW9uLiBJZiB0aGUgUHJvbWlzZSB0byBiZSBjYW5jZWxlZFxuICogaXMgdGhlIG9ubHkgY2hpbGQgb2YgYSBwZW5kaW5nIFByb21pc2UsIHRoZSBwYXJlbnQgUHJvbWlzZSB3aWxsIGFsc28gYmVcbiAqIGNhbmNlbGVkLiBDYW5jZWxsYXRpb24gbWF5IHByb3BhZ2F0ZSB1cHdhcmQgdGhyb3VnaCBtdWx0aXBsZSBnZW5lcmF0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9tZXNzYWdlIEFuIG9wdGlvbmFsIGRlYnVnZ2luZyBtZXNzYWdlIGZvciBkZXNjcmliaW5nIHRoZVxuICogICAgIGNhbmNlbGxhdGlvbiByZWFzb24uXG4gKi9cbmdvb2cuUHJvbWlzZS5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24ob3B0X21lc3NhZ2UpIHtcbiAgaWYgKHRoaXMuc3RhdGVfID09IGdvb2cuUHJvbWlzZS5TdGF0ZV8uUEVORElORykge1xuICAgIGdvb2cuYXN5bmMucnVuKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVyciA9IG5ldyBnb29nLlByb21pc2UuQ2FuY2VsbGF0aW9uRXJyb3Iob3B0X21lc3NhZ2UpO1xuICAgICAgdGhpcy5jYW5jZWxJbnRlcm5hbF8oZXJyKTtcbiAgICB9LCB0aGlzKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENhbmNlbHMgdGhpcyBQcm9taXNlIHdpdGggdGhlIGdpdmVuIGVycm9yLlxuICpcbiAqIEBwYXJhbSB7IUVycm9yfSBlcnIgVGhlIGNhbmNlbGxhdGlvbiBlcnJvci5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuUHJvbWlzZS5wcm90b3R5cGUuY2FuY2VsSW50ZXJuYWxfID0gZnVuY3Rpb24oZXJyKSB7XG4gIGlmICh0aGlzLnN0YXRlXyA9PSBnb29nLlByb21pc2UuU3RhdGVfLlBFTkRJTkcpIHtcbiAgICBpZiAodGhpcy5wYXJlbnRfKSB7XG4gICAgICAvLyBDYW5jZWwgdGhlIFByb21pc2UgYW5kIHJlbW92ZSBpdCBmcm9tIHRoZSBwYXJlbnQncyBjaGlsZCBsaXN0LlxuICAgICAgdGhpcy5wYXJlbnRfLmNhbmNlbENoaWxkXyh0aGlzLCBlcnIpO1xuICAgICAgdGhpcy5wYXJlbnRfID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZXNvbHZlXyhnb29nLlByb21pc2UuU3RhdGVfLlJFSkVDVEVELCBlcnIpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIENhbmNlbHMgYSBjaGlsZCBQcm9taXNlIGZyb20gdGhlIGxpc3Qgb2YgY2FsbGJhY2sgZW50cmllcy4gSWYgdGhlIFByb21pc2UgaGFzXG4gKiBub3QgYWxyZWFkeSBiZWVuIHJlc29sdmVkLCByZWplY3QgaXQgd2l0aCBhIGNhbmNlbCBlcnJvci4gSWYgdGhlcmUgYXJlIG5vXG4gKiBvdGhlciBjaGlsZHJlbiBpbiB0aGUgbGlzdCBvZiBjYWxsYmFjayBlbnRyaWVzLCBwcm9wYWdhdGUgdGhlIGNhbmNlbGxhdGlvblxuICogYnkgY2FuY2VsaW5nIHRoaXMgUHJvbWlzZSBhcyB3ZWxsLlxuICpcbiAqIEBwYXJhbSB7IWdvb2cuUHJvbWlzZX0gY2hpbGRQcm9taXNlIFRoZSBQcm9taXNlIHRvIGNhbmNlbC5cbiAqIEBwYXJhbSB7IUVycm9yfSBlcnIgVGhlIGNhbmNlbCBlcnJvciB0byB1c2UgZm9yIHJlamVjdGluZyB0aGUgUHJvbWlzZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuUHJvbWlzZS5wcm90b3R5cGUuY2FuY2VsQ2hpbGRfID0gZnVuY3Rpb24oY2hpbGRQcm9taXNlLCBlcnIpIHtcbiAgaWYgKCF0aGlzLmNhbGxiYWNrRW50cmllc18pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGNoaWxkQ291bnQgPSAwO1xuICB2YXIgY2hpbGRFbnRyeSA9IG51bGw7XG4gIHZhciBiZWZvcmVDaGlsZEVudHJ5ID0gbnVsbDtcblxuICAvLyBGaW5kIHRoZSBjYWxsYmFjayBlbnRyeSBmb3IgdGhlIGNoaWxkUHJvbWlzZSwgYW5kIGNvdW50IHdoZXRoZXIgdGhlcmUgYXJlXG4gIC8vIGFkZGl0aW9uYWwgY2hpbGQgUHJvbWlzZXMuXG4gIGZvciAodmFyIGVudHJ5ID0gdGhpcy5jYWxsYmFja0VudHJpZXNfOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uZXh0KSB7XG4gICAgaWYgKCFlbnRyeS5hbHdheXMpIHtcbiAgICAgIGNoaWxkQ291bnQrKztcbiAgICAgIGlmIChlbnRyeS5jaGlsZCA9PSBjaGlsZFByb21pc2UpIHtcbiAgICAgICAgY2hpbGRFbnRyeSA9IGVudHJ5O1xuICAgICAgfVxuICAgICAgaWYgKGNoaWxkRW50cnkgJiYgY2hpbGRDb3VudCA+IDEpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghY2hpbGRFbnRyeSkge1xuICAgICAgYmVmb3JlQ2hpbGRFbnRyeSA9IGVudHJ5O1xuICAgIH1cbiAgfVxuXG4gIC8vIENhbiBhIGNoaWxkIGVudHJ5IGJlIG1pc3Npbmc/XG5cbiAgLy8gSWYgdGhlIGNoaWxkIFByb21pc2Ugd2FzIHRoZSBvbmx5IGNoaWxkLCBjYW5jZWwgdGhpcyBQcm9taXNlIGFzIHdlbGwuXG4gIC8vIE90aGVyd2lzZSwgcmVqZWN0IG9ubHkgdGhlIGNoaWxkIFByb21pc2Ugd2l0aCB0aGUgY2FuY2VsIGVycm9yLlxuICBpZiAoY2hpbGRFbnRyeSkge1xuICAgIGlmICh0aGlzLnN0YXRlXyA9PSBnb29nLlByb21pc2UuU3RhdGVfLlBFTkRJTkcgJiYgY2hpbGRDb3VudCA9PSAxKSB7XG4gICAgICB0aGlzLmNhbmNlbEludGVybmFsXyhlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYmVmb3JlQ2hpbGRFbnRyeSkge1xuICAgICAgICB0aGlzLnJlbW92ZUVudHJ5QWZ0ZXJfKGJlZm9yZUNoaWxkRW50cnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wb3BFbnRyeV8oKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5leGVjdXRlQ2FsbGJhY2tfKFxuICAgICAgICAgIGNoaWxkRW50cnksIGdvb2cuUHJvbWlzZS5TdGF0ZV8uUkVKRUNURUQsIGVycik7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogQWRkcyBhIGNhbGxiYWNrIGVudHJ5IHRvIHRoZSBjdXJyZW50IFByb21pc2UsIGFuZCBzY2hlZHVsZXMgY2FsbGJhY2tcbiAqIGV4ZWN1dGlvbiBpZiB0aGUgUHJvbWlzZSBoYXMgYWxyZWFkeSBiZWVuIHNldHRsZWQuXG4gKlxuICogQHBhcmFtIHtnb29nLlByb21pc2UuQ2FsbGJhY2tFbnRyeV99IGNhbGxiYWNrRW50cnkgUmVjb3JkIGNvbnRhaW5pbmdcbiAqICAgICB7QGNvZGUgb25GdWxmaWxsZWR9IGFuZCB7QGNvZGUgb25SZWplY3RlZH0gY2FsbGJhY2tzIHRvIGV4ZWN1dGUgYWZ0ZXJcbiAqICAgICB0aGUgUHJvbWlzZSBpcyBzZXR0bGVkLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5Qcm9taXNlLnByb3RvdHlwZS5hZGRDYWxsYmFja0VudHJ5XyA9IGZ1bmN0aW9uKGNhbGxiYWNrRW50cnkpIHtcbiAgaWYgKCF0aGlzLmhhc0VudHJ5XygpICYmXG4gICAgICAodGhpcy5zdGF0ZV8gPT0gZ29vZy5Qcm9taXNlLlN0YXRlXy5GVUxGSUxMRUQgfHxcbiAgICAgICB0aGlzLnN0YXRlXyA9PSBnb29nLlByb21pc2UuU3RhdGVfLlJFSkVDVEVEKSkge1xuICAgIHRoaXMuc2NoZWR1bGVDYWxsYmFja3NfKCk7XG4gIH1cbiAgdGhpcy5xdWV1ZUVudHJ5XyhjYWxsYmFja0VudHJ5KTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2hpbGQgUHJvbWlzZSBhbmQgYWRkcyBpdCB0byB0aGUgY2FsbGJhY2sgZW50cnkgbGlzdC4gVGhlIHJlc3VsdCBvZlxuICogdGhlIGNoaWxkIFByb21pc2UgaXMgZGV0ZXJtaW5lZCBieSB0aGUgc3RhdGUgb2YgdGhlIHBhcmVudCBQcm9taXNlIGFuZCB0aGVcbiAqIHJlc3VsdCBvZiB0aGUge0Bjb2RlIG9uRnVsZmlsbGVkfSBvciB7QGNvZGUgb25SZWplY3RlZH0gY2FsbGJhY2tzIGFzXG4gKiBzcGVjaWZpZWQgaW4gdGhlIFByb21pc2UgcmVzb2x1dGlvbiBwcm9jZWR1cmUuXG4gKlxuICogQHNlZSBodHRwOi8vcHJvbWlzZXNhcGx1cy5jb20vI3RoZV9fbWV0aG9kXG4gKlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpUSElTLCBUWVBFKTpcbiAqICAgICAgICAgIChSRVNVTFR8Z29vZy5Qcm9taXNlPFJFU1VMVD58VGhlbmFibGUpfSBvbkZ1bGZpbGxlZCBBIGNhbGxiYWNrIHRoYXRcbiAqICAgICB3aWxsIGJlIGludm9rZWQgaWYgdGhlIFByb21pc2UgaXMgZnVsbGZpbGxlZCwgb3IgbnVsbC5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6VEhJUywgKik6ICp9IG9uUmVqZWN0ZWQgQSBjYWxsYmFjayB0aGF0IHdpbGwgYmVcbiAqICAgICBpbnZva2VkIGlmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBvciBudWxsLlxuICogQHBhcmFtIHtUSElTPX0gb3B0X2NvbnRleHQgQW4gb3B0aW9uYWwgZXhlY3V0aW9uIGNvbnRleHQgZm9yIHRoZSBjYWxsYmFja3MuXG4gKiAgICAgaW4gdGhlIGRlZmF1bHQgY2FsbGluZyBjb250ZXh0LlxuICogQHJldHVybiB7IWdvb2cuUHJvbWlzZX0gVGhlIGNoaWxkIFByb21pc2UuXG4gKiBAdGVtcGxhdGUgUkVTVUxULFRISVNcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuUHJvbWlzZS5wcm90b3R5cGUuYWRkQ2hpbGRQcm9taXNlXyA9IGZ1bmN0aW9uKFxuICAgIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvcHRfY29udGV4dCkge1xuXG4gIC8qKiBAdHlwZSB7Z29vZy5Qcm9taXNlLkNhbGxiYWNrRW50cnlffSAqL1xuICB2YXIgY2FsbGJhY2tFbnRyeSA9IGdvb2cuUHJvbWlzZS5nZXRDYWxsYmFja0VudHJ5XyhudWxsLCBudWxsLCBudWxsKTtcblxuICBjYWxsYmFja0VudHJ5LmNoaWxkID0gbmV3IGdvb2cuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAvLyBJbnZva2Ugb25GdWxmaWxsZWQsIG9yIHJlc29sdmUgd2l0aCB0aGUgcGFyZW50J3MgdmFsdWUgaWYgYWJzZW50LlxuICAgIGNhbGxiYWNrRW50cnkub25GdWxmaWxsZWQgPSBvbkZ1bGZpbGxlZCA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gb25GdWxmaWxsZWQuY2FsbChvcHRfY29udGV4dCwgdmFsdWUpO1xuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfSA6IHJlc29sdmU7XG5cbiAgICAvLyBJbnZva2Ugb25SZWplY3RlZCwgb3IgcmVqZWN0IHdpdGggdGhlIHBhcmVudCdzIHJlYXNvbiBpZiBhYnNlbnQuXG4gICAgY2FsbGJhY2tFbnRyeS5vblJlamVjdGVkID0gb25SZWplY3RlZCA/IGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG9uUmVqZWN0ZWQuY2FsbChvcHRfY29udGV4dCwgcmVhc29uKTtcbiAgICAgICAgaWYgKCFnb29nLmlzRGVmKHJlc3VsdCkgJiZcbiAgICAgICAgICAgIHJlYXNvbiBpbnN0YW5jZW9mIGdvb2cuUHJvbWlzZS5DYW5jZWxsYXRpb25FcnJvcikge1xuICAgICAgICAgIC8vIFByb3BhZ2F0ZSBjYW5jZWxsYXRpb24gdG8gY2hpbGRyZW4gaWYgbm8gb3RoZXIgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0gOiByZWplY3Q7XG4gIH0pO1xuXG4gIGNhbGxiYWNrRW50cnkuY2hpbGQucGFyZW50XyA9IHRoaXM7XG4gIHRoaXMuYWRkQ2FsbGJhY2tFbnRyeV8oY2FsbGJhY2tFbnRyeSk7XG4gIHJldHVybiBjYWxsYmFja0VudHJ5LmNoaWxkO1xufTtcblxuXG4vKipcbiAqIFVuYmxvY2tzIHRoZSBQcm9taXNlIGFuZCBmdWxmaWxscyBpdCB3aXRoIHRoZSBnaXZlbiB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge1RZUEV9IHZhbHVlXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlByb21pc2UucHJvdG90eXBlLnVuYmxvY2tBbmRGdWxmaWxsXyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5zdGF0ZV8gPT0gZ29vZy5Qcm9taXNlLlN0YXRlXy5CTE9DS0VEKTtcbiAgdGhpcy5zdGF0ZV8gPSBnb29nLlByb21pc2UuU3RhdGVfLlBFTkRJTkc7XG4gIHRoaXMucmVzb2x2ZV8oZ29vZy5Qcm9taXNlLlN0YXRlXy5GVUxGSUxMRUQsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBVbmJsb2NrcyB0aGUgUHJvbWlzZSBhbmQgcmVqZWN0cyBpdCB3aXRoIHRoZSBnaXZlbiByZWplY3Rpb24gcmVhc29uLlxuICpcbiAqIEBwYXJhbSB7Kn0gcmVhc29uXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlByb21pc2UucHJvdG90eXBlLnVuYmxvY2tBbmRSZWplY3RfID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5zdGF0ZV8gPT0gZ29vZy5Qcm9taXNlLlN0YXRlXy5CTE9DS0VEKTtcbiAgdGhpcy5zdGF0ZV8gPSBnb29nLlByb21pc2UuU3RhdGVfLlBFTkRJTkc7XG4gIHRoaXMucmVzb2x2ZV8oZ29vZy5Qcm9taXNlLlN0YXRlXy5SRUpFQ1RFRCwgcmVhc29uKTtcbn07XG5cblxuLyoqXG4gKiBBdHRlbXB0cyB0byByZXNvbHZlIGEgUHJvbWlzZSB3aXRoIGEgZ2l2ZW4gcmVzb2x1dGlvbiBzdGF0ZSBhbmQgdmFsdWUuIFRoaXNcbiAqIGlzIGEgbm8tb3AgaWYgdGhlIGdpdmVuIFByb21pc2UgaGFzIGFscmVhZHkgYmVlbiByZXNvbHZlZC5cbiAqXG4gKiBJZiB0aGUgZ2l2ZW4gcmVzdWx0IGlzIGEgVGhlbmFibGUgKHN1Y2ggYXMgYW5vdGhlciBQcm9taXNlKSwgdGhlIFByb21pc2Ugd2lsbFxuICogYmUgc2V0dGxlZCB3aXRoIHRoZSBzYW1lIHN0YXRlIGFuZCByZXN1bHQgYXMgdGhlIFRoZW5hYmxlIG9uY2UgaXQgaXMgaXRzZWxmXG4gKiBzZXR0bGVkLlxuICpcbiAqIElmIHRoZSBnaXZlbiByZXN1bHQgaXMgbm90IGEgVGhlbmFibGUsIHRoZSBQcm9taXNlIHdpbGwgYmUgc2V0dGxlZCAoZnVsZmlsbGVkXG4gKiBvciByZWplY3RlZCkgd2l0aCB0aGF0IHJlc3VsdCBiYXNlZCBvbiB0aGUgZ2l2ZW4gc3RhdGUuXG4gKlxuICogQHNlZSBodHRwOi8vcHJvbWlzZXNhcGx1cy5jb20vI3RoZV9wcm9taXNlX3Jlc29sdXRpb25fcHJvY2VkdXJlXG4gKlxuICogQHBhcmFtIHtnb29nLlByb21pc2UuU3RhdGVffSBzdGF0ZVxuICogQHBhcmFtIHsqfSB4IFRoZSByZXN1bHQgdG8gYXBwbHkgdG8gdGhlIFByb21pc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlByb21pc2UucHJvdG90eXBlLnJlc29sdmVfID0gZnVuY3Rpb24oc3RhdGUsIHgpIHtcbiAgaWYgKHRoaXMuc3RhdGVfICE9IGdvb2cuUHJvbWlzZS5TdGF0ZV8uUEVORElORykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzID09IHgpIHtcbiAgICBzdGF0ZSA9IGdvb2cuUHJvbWlzZS5TdGF0ZV8uUkVKRUNURUQ7XG4gICAgeCA9IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2UgY2Fubm90IHJlc29sdmUgdG8gaXRzZWxmJyk7XG4gIH1cblxuICB0aGlzLnN0YXRlXyA9IGdvb2cuUHJvbWlzZS5TdGF0ZV8uQkxPQ0tFRDtcbiAgdmFyIGlzVGhlbmFibGUgPSBnb29nLlByb21pc2UubWF5YmVUaGVuXyhcbiAgICAgIHgsIHRoaXMudW5ibG9ja0FuZEZ1bGZpbGxfLCB0aGlzLnVuYmxvY2tBbmRSZWplY3RfLCB0aGlzKTtcbiAgaWYgKGlzVGhlbmFibGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnJlc3VsdF8gPSB4O1xuICB0aGlzLnN0YXRlXyA9IHN0YXRlO1xuICAvLyBTaW5jZSB3ZSBjYW4gbm8gbG9uZ2VyIGJlIGNhbmNlbGVkLCByZW1vdmUgbGluayB0byBwYXJlbnQsIHNvIHRoYXQgdGhlXG4gIC8vIGNoaWxkIHByb21pc2UgZG9lcyBub3Qga2VlcCB0aGUgcGFyZW50IHByb21pc2UgYWxpdmUuXG4gIHRoaXMucGFyZW50XyA9IG51bGw7XG4gIHRoaXMuc2NoZWR1bGVDYWxsYmFja3NfKCk7XG5cbiAgaWYgKHN0YXRlID09IGdvb2cuUHJvbWlzZS5TdGF0ZV8uUkVKRUNURUQgJiZcbiAgICAgICEoeCBpbnN0YW5jZW9mIGdvb2cuUHJvbWlzZS5DYW5jZWxsYXRpb25FcnJvcikpIHtcbiAgICBnb29nLlByb21pc2UuYWRkVW5oYW5kbGVkUmVqZWN0aW9uXyh0aGlzLCB4KTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEludm9rZXMgdGhlIFwidGhlblwiIG1ldGhvZCBvZiBhbiBpbnB1dCB2YWx1ZSBpZiB0aGF0IHZhbHVlIGlzIGEgVGhlbmFibGUuIFRoaXNcbiAqIGlzIGEgbm8tb3AgaWYgdGhlIHZhbHVlIGlzIG5vdCB0aGVuYWJsZS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIEEgcG90ZW50aWFsbHkgdGhlbmFibGUgdmFsdWUuXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gb25GdWxmaWxsZWRcbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBvblJlamVjdGVkXG4gKiBAcGFyYW0geyp9IGNvbnRleHRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGlucHV0IHZhbHVlIHdhcyB0aGVuYWJsZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuUHJvbWlzZS5tYXliZVRoZW5fID0gZnVuY3Rpb24odmFsdWUsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBjb250ZXh0KSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGdvb2cuUHJvbWlzZSkge1xuICAgIHZhbHVlLnRoZW5Wb2lkKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBjb250ZXh0KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChnb29nLlRoZW5hYmxlLmlzSW1wbGVtZW50ZWRCeSh2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IC8qKiBAdHlwZSB7IWdvb2cuVGhlbmFibGV9ICovICh2YWx1ZSk7XG4gICAgdmFsdWUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgY29udGV4dCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoZ29vZy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHRoZW4gPSB2YWx1ZVsndGhlbiddO1xuICAgICAgaWYgKGdvb2cuaXNGdW5jdGlvbih0aGVuKSkge1xuICAgICAgICBnb29nLlByb21pc2UudHJ5VGhlbl8oXG4gICAgICAgICAgICB2YWx1ZSwgdGhlbiwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBvblJlamVjdGVkLmNhbGwoY29udGV4dCwgZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gY2FsbCB0aGUge0Bjb2RlIHRoZW59IG1ldGhvZCBvbiBhbiBvYmplY3QgaW4gdGhlIGhvcGVzIHRoYXQgaXQgaXNcbiAqIGEgUHJvbWlzZS1jb21wYXRpYmxlIGluc3RhbmNlLiBUaGlzIGFsbG93cyBpbnRlcm9wZXJhdGlvbiBiZXR3ZWVuIGRpZmZlcmVudFxuICogUHJvbWlzZSBpbXBsZW1lbnRhdGlvbnMsIGhvd2V2ZXIgYSBub24tY29tcGxpYW50IG9iamVjdCBtYXkgY2F1c2UgYSBQcm9taXNlXG4gKiB0byBoYW5nIGluZGVmaW5pdGVseS4gSWYgdGhlIHtAY29kZSB0aGVufSBtZXRob2QgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdGhlXG4gKiBkZXBlbmRlbnQgUHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHRocm93biB2YWx1ZS5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzBcbiAqXG4gKiBAcGFyYW0ge1RoZW5hYmxlfSB0aGVuYWJsZSBBbiBvYmplY3Qgd2l0aCBhIHtAY29kZSB0aGVufSBtZXRob2QgdGhhdCBtYXkgYmVcbiAqICAgICBjb21wYXRpYmxlIHdpdGggdGhlIFByb21pc2UvQSsgc3BlY2lmaWNhdGlvbi5cbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSB0aGVuIFRoZSB7QGNvZGUgdGhlbn0gbWV0aG9kIG9mIHRoZSBUaGVuYWJsZSBvYmplY3QuXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gb25GdWxmaWxsZWRcbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBvblJlamVjdGVkXG4gKiBAcGFyYW0geyp9IGNvbnRleHRcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuUHJvbWlzZS50cnlUaGVuXyA9IGZ1bmN0aW9uKFxuICAgIHRoZW5hYmxlLCB0aGVuLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgY29udGV4dCkge1xuXG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgdmFyIHJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgb25GdWxmaWxsZWQuY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZWplY3QgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIG9uUmVqZWN0ZWQuY2FsbChjb250ZXh0LCByZWFzb24pO1xuICAgIH1cbiAgfTtcblxuICB0cnkge1xuICAgIHRoZW4uY2FsbCh0aGVuYWJsZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlamVjdChlKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBwZW5kaW5nIGNhbGxiYWNrcyBvZiBhIHNldHRsZWQgUHJvbWlzZSBhZnRlciBhIHRpbWVvdXQuXG4gKlxuICogU2VjdGlvbiAyLjIuNCBvZiB0aGUgUHJvbWlzZXMvQSsgc3BlY2lmaWNhdGlvbiByZXF1aXJlcyB0aGF0IFByb21pc2VcbiAqIGNhbGxiYWNrcyBtdXN0IG9ubHkgYmUgaW52b2tlZCBmcm9tIGEgY2FsbCBzdGFjayB0aGF0IG9ubHkgY29udGFpbnMgUHJvbWlzZVxuICogaW1wbGVtZW50YXRpb24gY29kZSwgd2hpY2ggd2UgYWNjb21wbGlzaCBieSBpbnZva2luZyBjYWxsYmFjayBleGVjdXRpb24gYWZ0ZXJcbiAqIGEgdGltZW91dC4gSWYge0Bjb2RlIHN0YXJ0RXhlY3V0aW9uX30gaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGZvciB0aGUgc2FtZVxuICogUHJvbWlzZSwgdGhlIGNhbGxiYWNrIGNoYWluIHdpbGwgYmUgZXZhbHVhdGVkIG9ubHkgb25jZS4gQWRkaXRpb25hbCBjYWxsYmFja3NcbiAqIG1heSBiZSBhZGRlZCBkdXJpbmcgdGhlIGV2YWx1YXRpb24gcGhhc2UsIGFuZCB3aWxsIGJlIGV4ZWN1dGVkIGluIHRoZSBzYW1lXG4gKiBldmVudCBsb29wLlxuICpcbiAqIEFsbCBQcm9taXNlcyBhZGRlZCB0byB0aGUgd2FpdGluZyBsaXN0IGR1cmluZyB0aGUgc2FtZSBicm93c2VyIGV2ZW50IGxvb3BcbiAqIHdpbGwgYmUgZXhlY3V0ZWQgaW4gb25lIGJhdGNoIHRvIGF2b2lkIHVzaW5nIGEgc2VwYXJhdGUgdGltZW91dCBwZXIgUHJvbWlzZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlByb21pc2UucHJvdG90eXBlLnNjaGVkdWxlQ2FsbGJhY2tzXyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuZXhlY3V0aW5nXykge1xuICAgIHRoaXMuZXhlY3V0aW5nXyA9IHRydWU7XG4gICAgZ29vZy5hc3luYy5ydW4odGhpcy5leGVjdXRlQ2FsbGJhY2tzXywgdGhpcyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZXJlIGFyZSBhbnkgcGVuZGluZyBjYWxsYmFja3MgcXVldWVkLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5Qcm9taXNlLnByb3RvdHlwZS5oYXNFbnRyeV8gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhdGhpcy5jYWxsYmFja0VudHJpZXNfO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7Z29vZy5Qcm9taXNlLkNhbGxiYWNrRW50cnlffSBlbnRyeVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5Qcm9taXNlLnByb3RvdHlwZS5xdWV1ZUVudHJ5XyA9IGZ1bmN0aW9uKGVudHJ5KSB7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoZW50cnkub25GdWxmaWxsZWQgIT0gbnVsbCk7XG5cbiAgaWYgKHRoaXMuY2FsbGJhY2tFbnRyaWVzVGFpbF8pIHtcbiAgICB0aGlzLmNhbGxiYWNrRW50cmllc1RhaWxfLm5leHQgPSBlbnRyeTtcbiAgICB0aGlzLmNhbGxiYWNrRW50cmllc1RhaWxfID0gZW50cnk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSXQgdGhlIHdvcmsgcXVldWUgd2FzIGVtcHR5IHNldCB0aGUgaGVhZCB0b28uXG4gICAgdGhpcy5jYWxsYmFja0VudHJpZXNfID0gZW50cnk7XG4gICAgdGhpcy5jYWxsYmFja0VudHJpZXNUYWlsXyA9IGVudHJ5O1xuICB9XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Z29vZy5Qcm9taXNlLkNhbGxiYWNrRW50cnlffSBlbnRyeVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5Qcm9taXNlLnByb3RvdHlwZS5wb3BFbnRyeV8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGVudHJ5ID0gbnVsbDtcbiAgaWYgKHRoaXMuY2FsbGJhY2tFbnRyaWVzXykge1xuICAgIGVudHJ5ID0gdGhpcy5jYWxsYmFja0VudHJpZXNfO1xuICAgIHRoaXMuY2FsbGJhY2tFbnRyaWVzXyA9IGVudHJ5Lm5leHQ7XG4gICAgZW50cnkubmV4dCA9IG51bGw7XG4gIH1cbiAgLy8gSXQgdGhlIHdvcmsgcXVldWUgaXMgZW1wdHkgY2xlYXIgdGhlIHRhaWwgdG9vLlxuICBpZiAoIXRoaXMuY2FsbGJhY2tFbnRyaWVzXykge1xuICAgIHRoaXMuY2FsbGJhY2tFbnRyaWVzVGFpbF8gPSBudWxsO1xuICB9XG5cbiAgaWYgKGVudHJ5ICE9IG51bGwpIHtcbiAgICBnb29nLmFzc2VydHMuYXNzZXJ0KGVudHJ5Lm9uRnVsZmlsbGVkICE9IG51bGwpO1xuICB9XG4gIHJldHVybiBlbnRyeTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge2dvb2cuUHJvbWlzZS5DYWxsYmFja0VudHJ5X30gcHJldmlvdXNcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuUHJvbWlzZS5wcm90b3R5cGUucmVtb3ZlRW50cnlBZnRlcl8gPSBmdW5jdGlvbihwcmV2aW91cykge1xuICBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuY2FsbGJhY2tFbnRyaWVzXyk7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQocHJldmlvdXMgIT0gbnVsbCk7XG4gIC8vIElmIHRoZSBsYXN0IGVudHJ5IGlzIGJlaW5nIHJlbW92ZWQsIHVwZGF0ZSB0aGUgdGFpbFxuICBpZiAocHJldmlvdXMubmV4dCA9PSB0aGlzLmNhbGxiYWNrRW50cmllc1RhaWxfKSB7XG4gICAgdGhpcy5jYWxsYmFja0VudHJpZXNUYWlsXyA9IHByZXZpb3VzO1xuICB9XG5cbiAgcHJldmlvdXMubmV4dCA9IHByZXZpb3VzLm5leHQubmV4dDtcbn07XG5cblxuLyoqXG4gKiBFeGVjdXRlcyBhbGwgcGVuZGluZyBjYWxsYmFja3MgZm9yIHRoaXMgUHJvbWlzZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlByb21pc2UucHJvdG90eXBlLmV4ZWN1dGVDYWxsYmFja3NfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBlbnRyeSA9IG51bGw7XG4gIHdoaWxlIChlbnRyeSA9IHRoaXMucG9wRW50cnlfKCkpIHtcbiAgICBpZiAoZ29vZy5Qcm9taXNlLkxPTkdfU1RBQ0tfVFJBQ0VTKSB7XG4gICAgICB0aGlzLmN1cnJlbnRTdGVwXysrO1xuICAgIH1cbiAgICB0aGlzLmV4ZWN1dGVDYWxsYmFja18oZW50cnksIHRoaXMuc3RhdGVfLCB0aGlzLnJlc3VsdF8pO1xuICB9XG4gIHRoaXMuZXhlY3V0aW5nXyA9IGZhbHNlO1xufTtcblxuXG4vKipcbiAqIEV4ZWN1dGVzIGEgcGVuZGluZyBjYWxsYmFjayBmb3IgdGhpcyBQcm9taXNlLiBJbnZva2VzIGFuIHtAY29kZSBvbkZ1bGZpbGxlZH1cbiAqIG9yIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFjayBiYXNlZCBvbiB0aGUgc2V0dGxlZCBzdGF0ZSBvZiB0aGUgUHJvbWlzZS5cbiAqXG4gKiBAcGFyYW0geyFnb29nLlByb21pc2UuQ2FsbGJhY2tFbnRyeV99IGNhbGxiYWNrRW50cnkgQW4gZW50cnkgY29udGFpbmluZyB0aGVcbiAqICAgICBvbkZ1bGZpbGxlZCBhbmQvb3Igb25SZWplY3RlZCBjYWxsYmFja3MgZm9yIHRoaXMgc3RlcC5cbiAqIEBwYXJhbSB7Z29vZy5Qcm9taXNlLlN0YXRlX30gc3RhdGUgVGhlIHJlc29sdXRpb24gc3RhdHVzIG9mIHRoZSBQcm9taXNlLFxuICogICAgIGVpdGhlciBGVUxGSUxMRUQgb3IgUkVKRUNURUQuXG4gKiBAcGFyYW0geyp9IHJlc3VsdCBUaGUgc2V0dGxlZCByZXN1bHQgb2YgdGhlIFByb21pc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlByb21pc2UucHJvdG90eXBlLmV4ZWN1dGVDYWxsYmFja18gPSBmdW5jdGlvbihcbiAgICBjYWxsYmFja0VudHJ5LCBzdGF0ZSwgcmVzdWx0KSB7XG4gIC8vIENhbmNlbCBhbiB1bmhhbmRsZWQgcmVqZWN0aW9uIGlmIHRoZSB0aGVuL3RoZW5Wb2lkIGNhbGwgaGFkIGFuIG9uUmVqZWN0ZWQuXG4gIGlmIChzdGF0ZSA9PSBnb29nLlByb21pc2UuU3RhdGVfLlJFSkVDVEVEICYmXG4gICAgICBjYWxsYmFja0VudHJ5Lm9uUmVqZWN0ZWQgJiYgIWNhbGxiYWNrRW50cnkuYWx3YXlzKSB7XG4gICAgdGhpcy5yZW1vdmVVbmhhbmRsZWRSZWplY3Rpb25fKCk7XG4gIH1cblxuICBpZiAoY2FsbGJhY2tFbnRyeS5jaGlsZCkge1xuICAgIC8vIFdoZW4gdGhlIHBhcmVudCBpcyBzZXR0bGVkLCB0aGUgY2hpbGQgbm8gbG9uZ2VyIG5lZWRzIHRvIGhvbGQgb24gdG8gaXQsXG4gICAgLy8gYXMgdGhlIHBhcmVudCBjYW4gbm8gbG9uZ2VyIGJlIGNhbmNlbGVkLlxuICAgIGNhbGxiYWNrRW50cnkuY2hpbGQucGFyZW50XyA9IG51bGw7XG4gICAgZ29vZy5Qcm9taXNlLmludm9rZUNhbGxiYWNrXyhjYWxsYmFja0VudHJ5LCBzdGF0ZSwgcmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDYWxsYmFja3MgY3JlYXRlZCB3aXRoIHRoZW5BbHdheXMgb3IgdGhlblZvaWQgZG8gbm90IGhhdmUgdGhlIHJlamVjdGlvblxuICAgIC8vIGhhbmRsaW5nIGNvZGUgbm9ybWFsbHkgc2V0IHVwIGluIHRoZSBjaGlsZCBQcm9taXNlLlxuICAgIHRyeSB7XG4gICAgICBjYWxsYmFja0VudHJ5LmFsd2F5cyA/XG4gICAgICAgICAgY2FsbGJhY2tFbnRyeS5vbkZ1bGZpbGxlZC5jYWxsKGNhbGxiYWNrRW50cnkuY29udGV4dCkgOlxuICAgICAgICAgIGdvb2cuUHJvbWlzZS5pbnZva2VDYWxsYmFja18oY2FsbGJhY2tFbnRyeSwgc3RhdGUsIHJlc3VsdCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBnb29nLlByb21pc2UuaGFuZGxlUmVqZWN0aW9uXy5jYWxsKG51bGwsIGVycik7XG4gICAgfVxuICB9XG4gIGdvb2cuUHJvbWlzZS5yZXR1cm5FbnRyeV8oY2FsbGJhY2tFbnRyeSk7XG59O1xuXG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIG9uRnVsZmlsbGVkIG9yIG9uUmVqZWN0ZWQgY2FsbGJhY2sgZm9yIGEgY2FsbGJhY2tFbnRyeS5cbiAqXG4gKiBAcGFyYW0geyFnb29nLlByb21pc2UuQ2FsbGJhY2tFbnRyeV99IGNhbGxiYWNrRW50cnlcbiAqIEBwYXJhbSB7Z29vZy5Qcm9taXNlLlN0YXRlX30gc3RhdGVcbiAqIEBwYXJhbSB7Kn0gcmVzdWx0XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlByb21pc2UuaW52b2tlQ2FsbGJhY2tfID0gZnVuY3Rpb24oY2FsbGJhY2tFbnRyeSwgc3RhdGUsIHJlc3VsdCkge1xuICBpZiAoc3RhdGUgPT0gZ29vZy5Qcm9taXNlLlN0YXRlXy5GVUxGSUxMRUQpIHtcbiAgICBjYWxsYmFja0VudHJ5Lm9uRnVsZmlsbGVkLmNhbGwoY2FsbGJhY2tFbnRyeS5jb250ZXh0LCByZXN1bHQpO1xuICB9IGVsc2UgaWYgKGNhbGxiYWNrRW50cnkub25SZWplY3RlZCkge1xuICAgIGNhbGxiYWNrRW50cnkub25SZWplY3RlZC5jYWxsKGNhbGxiYWNrRW50cnkuY29udGV4dCwgcmVzdWx0KTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFJlY29yZHMgYSBzdGFjayB0cmFjZSBlbnRyeSBmb3IgZnVuY3Rpb25zIHRoYXQgY2FsbCB7QGNvZGUgdGhlbn0gb3IgdGhlXG4gKiBQcm9taXNlIGNvbnN0cnVjdG9yLiBNYXkgYmUgZGlzYWJsZWQgYnkgdW5zZXR0aW5nIHtAY29kZSBMT05HX1NUQUNLX1RSQUNFU30uXG4gKlxuICogQHBhcmFtIHshRXJyb3J9IGVyciBBbiBFcnJvciBvYmplY3QgY3JlYXRlZCBieSB0aGUgY2FsbGluZyBmdW5jdGlvbiBmb3JcbiAqICAgICBwcm92aWRpbmcgYSBzdGFjayB0cmFjZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuUHJvbWlzZS5wcm90b3R5cGUuYWRkU3RhY2tUcmFjZV8gPSBmdW5jdGlvbihlcnIpIHtcbiAgaWYgKGdvb2cuUHJvbWlzZS5MT05HX1NUQUNLX1RSQUNFUyAmJiBnb29nLmlzU3RyaW5nKGVyci5zdGFjaykpIHtcbiAgICAvLyBFeHRyYWN0IHRoZSB0aGlyZCBsaW5lIG9mIHRoZSBzdGFjayB0cmFjZSwgd2hpY2ggaXMgdGhlIGVudHJ5IGZvciB0aGVcbiAgICAvLyB1c2VyIGZ1bmN0aW9uIHRoYXQgY2FsbGVkIGludG8gUHJvbWlzZSBjb2RlLlxuICAgIHZhciB0cmFjZSA9IGVyci5zdGFjay5zcGxpdCgnXFxuJywgNClbM107XG4gICAgdmFyIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcblxuICAgIC8vIFBhZCB0aGUgbWVzc2FnZSB0byBhbGlnbiB0aGUgdHJhY2VzLlxuICAgIG1lc3NhZ2UgKz0gQXJyYXkoMTEgLSBtZXNzYWdlLmxlbmd0aCkuam9pbignICcpO1xuICAgIHRoaXMuc3RhY2tfLnB1c2gobWVzc2FnZSArIHRyYWNlKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEFkZHMgZXh0cmEgc3RhY2sgdHJhY2UgaW5mb3JtYXRpb24gdG8gYW4gZXhjZXB0aW9uIGZvciB0aGUgbGlzdCBvZlxuICogYXN5bmNocm9ub3VzIHtAY29kZSB0aGVufSBjYWxscyB0aGF0IGhhdmUgYmVlbiBydW4gZm9yIHRoaXMgUHJvbWlzZS4gU3RhY2tcbiAqIHRyYWNlIGluZm9ybWF0aW9uIGlzIHJlY29yZGVkIGluIHtAc2VlICNhZGRTdGFja1RyYWNlX30sIGFuZCBhcHBlbmRlZCB0b1xuICogcmV0aHJvd24gZXJyb3JzIHdoZW4ge0Bjb2RlIExPTkdfU1RBQ0tfVFJBQ0VTfSBpcyBlbmFibGVkLlxuICpcbiAqIEBwYXJhbSB7Kn0gZXJyIEFuIHVuaGFuZGxlZCBleGNlcHRpb24gY2FwdHVyZWQgZHVyaW5nIGNhbGxiYWNrIGV4ZWN1dGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuUHJvbWlzZS5wcm90b3R5cGUuYXBwZW5kTG9uZ1N0YWNrXyA9IGZ1bmN0aW9uKGVycikge1xuICBpZiAoZ29vZy5Qcm9taXNlLkxPTkdfU1RBQ0tfVFJBQ0VTICYmXG4gICAgICBlcnIgJiYgZ29vZy5pc1N0cmluZyhlcnIuc3RhY2spICYmIHRoaXMuc3RhY2tfLmxlbmd0aCkge1xuICAgIHZhciBsb25nVHJhY2UgPSBbJ1Byb21pc2UgdHJhY2U6J107XG5cbiAgICBmb3IgKHZhciBwcm9taXNlID0gdGhpczsgcHJvbWlzZTsgcHJvbWlzZSA9IHByb21pc2UucGFyZW50Xykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMuY3VycmVudFN0ZXBfOyBpID49IDA7IGktLSkge1xuICAgICAgICBsb25nVHJhY2UucHVzaChwcm9taXNlLnN0YWNrX1tpXSk7XG4gICAgICB9XG4gICAgICBsb25nVHJhY2UucHVzaCgnVmFsdWU6ICcgK1xuICAgICAgICAgICdbJyArIChwcm9taXNlLnN0YXRlXyA9PSBnb29nLlByb21pc2UuU3RhdGVfLlJFSkVDVEVEID9cbiAgICAgICAgICAgICAgJ1JFSkVDVEVEJyA6ICdGVUxGSUxMRUQnKSArICddICcgK1xuICAgICAgICAgICc8JyArIFN0cmluZyhwcm9taXNlLnJlc3VsdF8pICsgJz4nKTtcbiAgICB9XG4gICAgZXJyLnN0YWNrICs9ICdcXG5cXG4nICsgbG9uZ1RyYWNlLmpvaW4oJ1xcbicpO1xuICB9XG59O1xuXG5cbi8qKlxuICogTWFya3MgdGhpcyByZWplY3RlZCBQcm9taXNlIGFzIGhhdmluZyBiZWluZyBoYW5kbGVkLiBBbHNvIG1hcmtzIGFueSBwYXJlbnRcbiAqIFByb21pc2VzIGluIHRoZSByZWplY3RlZCBzdGF0ZSBhcyBoYW5kbGVkLiBUaGUgcmVqZWN0aW9uIGhhbmRsZXIgd2lsbCBub1xuICogbG9uZ2VyIGJlIGludm9rZWQgZm9yIHRoaXMgUHJvbWlzZSAoaWYgaXQgaGFzIG5vdCBiZWVuIGNhbGxlZCBhbHJlYWR5KS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlByb21pc2UucHJvdG90eXBlLnJlbW92ZVVuaGFuZGxlZFJlamVjdGlvbl8gPSBmdW5jdGlvbigpIHtcbiAgaWYgKGdvb2cuUHJvbWlzZS5VTkhBTkRMRURfUkVKRUNUSU9OX0RFTEFZID4gMCkge1xuICAgIGZvciAodmFyIHAgPSB0aGlzOyBwICYmIHAudW5oYW5kbGVkUmVqZWN0aW9uSWRfOyBwID0gcC5wYXJlbnRfKSB7XG4gICAgICBnb29nLmdsb2JhbC5jbGVhclRpbWVvdXQocC51bmhhbmRsZWRSZWplY3Rpb25JZF8pO1xuICAgICAgcC51bmhhbmRsZWRSZWplY3Rpb25JZF8gPSAwO1xuICAgIH1cbiAgfSBlbHNlIGlmIChnb29nLlByb21pc2UuVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSA9PSAwKSB7XG4gICAgZm9yICh2YXIgcCA9IHRoaXM7IHAgJiYgcC5oYWRVbmhhbmRsZWRSZWplY3Rpb25fOyBwID0gcC5wYXJlbnRfKSB7XG4gICAgICBwLmhhZFVuaGFuZGxlZFJlamVjdGlvbl8gPSBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBNYXJrcyB0aGlzIHJlamVjdGVkIFByb21pc2UgYXMgdW5oYW5kbGVkLiBJZiBubyB7QGNvZGUgb25SZWplY3RlZH0gY2FsbGJhY2tcbiAqIGlzIGNhbGxlZCBmb3IgdGhpcyBQcm9taXNlIGJlZm9yZSB0aGUge0Bjb2RlIFVOSEFORExFRF9SRUpFQ1RJT05fREVMQVl9XG4gKiBleHBpcmVzLCB0aGUgcmVhc29uIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSB1bmhhbmRsZWQgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZVxuICogaGFuZGxlciB0eXBpY2FsbHkgcmV0aHJvd3MgdGhlIHJlamVjdGlvbiByZWFzb24gc28gdGhhdCBpdCBiZWNvbWVzIHZpc2libGUgaW5cbiAqIHRoZSBkZXZlbG9wZXIgY29uc29sZS5cbiAqXG4gKiBAcGFyYW0geyFnb29nLlByb21pc2V9IHByb21pc2UgVGhlIHJlamVjdGVkIFByb21pc2UuXG4gKiBAcGFyYW0geyp9IHJlYXNvbiBUaGUgUHJvbWlzZSByZWplY3Rpb24gcmVhc29uLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5Qcm9taXNlLmFkZFVuaGFuZGxlZFJlamVjdGlvbl8gPSBmdW5jdGlvbihwcm9taXNlLCByZWFzb24pIHtcbiAgaWYgKGdvb2cuUHJvbWlzZS5VTkhBTkRMRURfUkVKRUNUSU9OX0RFTEFZID4gMCkge1xuICAgIHByb21pc2UudW5oYW5kbGVkUmVqZWN0aW9uSWRfID0gZ29vZy5nbG9iYWwuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIHByb21pc2UuYXBwZW5kTG9uZ1N0YWNrXyhyZWFzb24pO1xuICAgICAgZ29vZy5Qcm9taXNlLmhhbmRsZVJlamVjdGlvbl8uY2FsbChudWxsLCByZWFzb24pO1xuICAgIH0sIGdvb2cuUHJvbWlzZS5VTkhBTkRMRURfUkVKRUNUSU9OX0RFTEFZKTtcblxuICB9IGVsc2UgaWYgKGdvb2cuUHJvbWlzZS5VTkhBTkRMRURfUkVKRUNUSU9OX0RFTEFZID09IDApIHtcbiAgICBwcm9taXNlLmhhZFVuaGFuZGxlZFJlamVjdGlvbl8gPSB0cnVlO1xuICAgIGdvb2cuYXN5bmMucnVuKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHByb21pc2UuaGFkVW5oYW5kbGVkUmVqZWN0aW9uXykge1xuICAgICAgICBwcm9taXNlLmFwcGVuZExvbmdTdGFja18ocmVhc29uKTtcbiAgICAgICAgZ29vZy5Qcm9taXNlLmhhbmRsZVJlamVjdGlvbl8uY2FsbChudWxsLCByZWFzb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5cbi8qKlxuICogQSBtZXRob2QgdGhhdCBpcyBpbnZva2VkIHdpdGggdGhlIHJlamVjdGlvbiByZWFzb25zIGZvciBQcm9taXNlcyB0aGF0IGFyZVxuICogcmVqZWN0ZWQgYnV0IGhhdmUgbm8ge0Bjb2RlIG9uUmVqZWN0ZWR9IGNhbGxiYWNrcyByZWdpc3RlcmVkIHlldC5cbiAqIEB0eXBlIHtmdW5jdGlvbigqKX1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuUHJvbWlzZS5oYW5kbGVSZWplY3Rpb25fID0gZ29vZy5hc3luYy50aHJvd0V4Y2VwdGlvbjtcblxuXG4vKipcbiAqIFNldHMgYSBoYW5kbGVyIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCByZWFzb25zIGZyb20gdW5oYW5kbGVkIHJlamVjdGVkXG4gKiBQcm9taXNlcy4gSWYgdGhlIHJlamVjdGVkIFByb21pc2UgKG9yIG9uZSBvZiBpdHMgZGVzY2VuZGFudHMpIGhhcyBhblxuICoge0Bjb2RlIG9uUmVqZWN0ZWR9IGNhbGxiYWNrIHJlZ2lzdGVyZWQsIHRoZSByZWplY3Rpb24gd2lsbCBiZSBjb25zaWRlcmVkXG4gKiBoYW5kbGVkLCBhbmQgdGhlIHJlamVjdGlvbiBoYW5kbGVyIHdpbGwgbm90IGJlIGNhbGxlZC5cbiAqXG4gKiBCeSBkZWZhdWx0LCB1bmhhbmRsZWQgcmVqZWN0aW9ucyBhcmUgcmV0aHJvd24gc28gdGhhdCB0aGUgZXJyb3IgbWF5IGJlXG4gKiBjYXB0dXJlZCBieSB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgb3IgYSB7QGNvZGUgd2luZG93Lm9uZXJyb3J9IGhhbmRsZXIuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbigqKX0gaGFuZGxlciBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCByZWFzb25zIGZyb21cbiAqICAgICByZWplY3RlZCBQcm9taXNlcy4gRGVmYXVsdHMgdG8ge0Bjb2RlIGdvb2cuYXN5bmMudGhyb3dFeGNlcHRpb259LlxuICovXG5nb29nLlByb21pc2Uuc2V0VW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgZ29vZy5Qcm9taXNlLmhhbmRsZVJlamVjdGlvbl8gPSBoYW5kbGVyO1xufTtcblxuXG5cbi8qKlxuICogRXJyb3IgdXNlZCBhcyBhIHJlamVjdGlvbiByZWFzb24gZm9yIGNhbmNlbGVkIFByb21pc2VzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X21lc3NhZ2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge2dvb2cuZGVidWcuRXJyb3J9XG4gKiBAZmluYWxcbiAqL1xuZ29vZy5Qcm9taXNlLkNhbmNlbGxhdGlvbkVycm9yID0gZnVuY3Rpb24ob3B0X21lc3NhZ2UpIHtcbiAgZ29vZy5Qcm9taXNlLkNhbmNlbGxhdGlvbkVycm9yLmJhc2UodGhpcywgJ2NvbnN0cnVjdG9yJywgb3B0X21lc3NhZ2UpO1xufTtcbmdvb2cuaW5oZXJpdHMoZ29vZy5Qcm9taXNlLkNhbmNlbGxhdGlvbkVycm9yLCBnb29nLmRlYnVnLkVycm9yKTtcblxuXG4vKiogQG92ZXJyaWRlICovXG5nb29nLlByb21pc2UuQ2FuY2VsbGF0aW9uRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnY2FuY2VsJztcblxuXG5cbi8qKlxuICogSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgdGhlIHJlc29sdmVyIGludGVyZmFjZS5cbiAqXG4gKiBAcGFyYW0geyFnb29nLlByb21pc2U8VFlQRT59IHByb21pc2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKFRZUEV8Z29vZy5Qcm9taXNlPFRZUEU+fFRoZW5hYmxlKT0pfSByZXNvbHZlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCo9KTogdm9pZH0gcmVqZWN0XG4gKiBAaW1wbGVtZW50cyB7Z29vZy5wcm9taXNlLlJlc29sdmVyPFRZUEU+fVxuICogQGZpbmFsIEBzdHJ1Y3RcbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqIEB0ZW1wbGF0ZSBUWVBFXG4gKi9cbmdvb2cuUHJvbWlzZS5SZXNvbHZlcl8gPSBmdW5jdGlvbihwcm9taXNlLCByZXNvbHZlLCByZWplY3QpIHtcbiAgLyoqIEBjb25zdCAqL1xuICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuXG4gIC8qKiBAY29uc3QgKi9cbiAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcblxuICAvKiogQGNvbnN0ICovXG4gIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDA3IEJvYiBJcHBvbGl0by4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vIE1vZGlmaWNhdGlvbnMgQ29weXJpZ2h0IDIwMDkgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzXG4vLyBSZXNlcnZlZC5cblxuLyoqXG4gKiBAbGljZW5zZSBQb3J0aW9ucyBvZiB0aGlzIGNvZGUgYXJlIGZyb20gTW9jaGlLaXQsIHJlY2VpdmVkIGJ5XG4gKiBUaGUgQ2xvc3VyZSBBdXRob3JzIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gQWxsIG90aGVyIGNvZGUgaXMgQ29weXJpZ2h0XG4gKiAyMDA1LTIwMDkgVGhlIENsb3N1cmUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ2xhc3NlcyBmb3IgdHJhY2tpbmcgYXN5bmNocm9ub3VzIG9wZXJhdGlvbnMgYW5kIGhhbmRsaW5nIHRoZVxuICogcmVzdWx0cy4gVGhlIERlZmVycmVkIG9iamVjdCBoZXJlIGlzIHBhdHRlcm5lZCBhZnRlciB0aGUgRGVmZXJyZWQgb2JqZWN0IGluXG4gKiB0aGUgVHdpc3RlZCBweXRob24gbmV0d29ya2luZyBmcmFtZXdvcmsuXG4gKlxuICogU2VlOiBodHRwOi8vdHdpc3RlZG1hdHJpeC5jb20vcHJvamVjdHMvY29yZS9kb2N1bWVudGF0aW9uL2hvd3RvL2RlZmVyLmh0bWxcbiAqXG4gKiBCYXNlZCBvbiB0aGUgRG9qbyBjb2RlIHdoaWNoIGluIHR1cm4gaXMgYmFzZWQgb24gdGhlIE1vY2hpS2l0IGNvZGUuXG4gKlxuICogQGF1dGhvciBhcnZAZ29vZ2xlLmNvbSAoRXJpayBBcnZpZHNzb24pXG4gKiBAYXV0aG9yIGJyZW5uZW1hbkBnb29nbGUuY29tIChTaGF3biBCcmVubmVtYW4pXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLmFzeW5jLkRlZmVycmVkJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuYXN5bmMuRGVmZXJyZWQuQWxyZWFkeUNhbGxlZEVycm9yJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuYXN5bmMuRGVmZXJyZWQuQ2FuY2VsZWRFcnJvcicpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuUHJvbWlzZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLlRoZW5hYmxlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXJyYXknKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZGVidWcuRXJyb3InKTtcblxuXG5cbi8qKlxuICogQSBEZWZlcnJlZCByZXByZXNlbnRzIHRoZSByZXN1bHQgb2YgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbi4gQSBEZWZlcnJlZFxuICogaW5zdGFuY2UgaGFzIG5vIHJlc3VsdCB3aGVuIGl0IGlzIGNyZWF0ZWQsIGFuZCBpcyBcImZpcmVkXCIgKGdpdmVuIGFuIGluaXRpYWxcbiAqIHJlc3VsdCkgYnkgY2FsbGluZyB7QGNvZGUgY2FsbGJhY2t9IG9yIHtAY29kZSBlcnJiYWNrfS5cbiAqXG4gKiBPbmNlIGZpcmVkLCB0aGUgcmVzdWx0IGlzIHBhc3NlZCB0aHJvdWdoIGEgc2VxdWVuY2Ugb2YgY2FsbGJhY2sgZnVuY3Rpb25zXG4gKiByZWdpc3RlcmVkIHdpdGgge0Bjb2RlIGFkZENhbGxiYWNrfSBvciB7QGNvZGUgYWRkRXJyYmFja30uIFRoZSBmdW5jdGlvbnMgbWF5XG4gKiBtdXRhdGUgdGhlIHJlc3VsdCBiZWZvcmUgaXQgaXMgcGFzc2VkIHRvIHRoZSBuZXh0IGZ1bmN0aW9uIGluIHRoZSBzZXF1ZW5jZS5cbiAqXG4gKiBDYWxsYmFja3MgYW5kIGVycmJhY2tzIG1heSBiZSBhZGRlZCBhdCBhbnkgdGltZSwgaW5jbHVkaW5nIGFmdGVyIHRoZSBEZWZlcnJlZFxuICogaGFzIGJlZW4gXCJmaXJlZFwiLiBJZiB0aGVyZSBhcmUgbm8gcGVuZGluZyBhY3Rpb25zIGluIHRoZSBleGVjdXRpb24gc2VxdWVuY2VcbiAqIG9mIGEgZmlyZWQgRGVmZXJyZWQsIGFueSBuZXcgY2FsbGJhY2sgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhc3RcbiAqIGNvbXB1dGVkIHJlc3VsdC4gQWRkaW5nIGEgY2FsbGJhY2sgZnVuY3Rpb24gaXMgdGhlIG9ubHkgd2F5IHRvIGFjY2VzcyB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgRGVmZXJyZWQuXG4gKlxuICogSWYgYSBEZWZlcnJlZCBvcGVyYXRpb24gaXMgY2FuY2VsZWQsIGFuIG9wdGlvbmFsIHVzZXItcHJvdmlkZWQgY2FuY2VsbGF0aW9uXG4gKiBmdW5jdGlvbiBpcyBpbnZva2VkIHdoaWNoIG1heSBwZXJmb3JtIGFueSBzcGVjaWFsIGNsZWFudXAsIGZvbGxvd2VkIGJ5IGZpcmluZ1xuICogdGhlIERlZmVycmVkJ3MgZXJyYmFjayBzZXF1ZW5jZSB3aXRoIGEge0Bjb2RlIENhbmNlbGVkRXJyb3J9LiBJZiB0aGVcbiAqIERlZmVycmVkIGhhcyBhbHJlYWR5IGZpcmVkLCBjYW5jZWxsYXRpb24gaXMgaWdub3JlZC5cbiAqXG4gKiBEZWZlcnJlZHMgbWF5IGJlIHRlbXBsYXRlZCB0byBhIHNwZWNpZmljIHR5cGUgdGhleSBwcm9kdWNlIHVzaW5nIGdlbmVyaWNzXG4gKiB3aXRoIHN5bnRheCBzdWNoIGFzOlxuICogPGNvZGU+XG4gKiAgIC8qKiBAdHlwZSB7Z29vZy5hc3luYy5EZWZlcnJlZDxzdHJpbmc+fSAqJiM0NztcbiAqICAgdmFyIGQgPSBuZXcgZ29vZy5hc3luYy5EZWZlcnJlZCgpO1xuICogICAvLyBDb21waWxlciBjYW4gaW5mZXIgdGhhdCBmb28gaXMgYSBzdHJpbmcuXG4gKiAgIGQuYWRkQ2FsbGJhY2soZnVuY3Rpb24oZm9vKSB7Li4ufSk7XG4gKiAgIGQuY2FsbGJhY2soJ3N0cmluZycpOyAgLy8gQ2hlY2tlZCB0byBiZSBwYXNzZWQgYSBzdHJpbmdcbiAqIDwvY29kZT5cbiAqIFNpbmNlIGRlZmVycmVkcyBhcmUgb2Z0ZW4gdXNlZCB0byBwcm9kdWNlIGRpZmZlcmVudCB2YWx1ZXMgYWNyb3NzIGEgY2hhaW4sXG4gKiB0aGUgdHlwZSBpbmZvcm1hdGlvbiBpcyBub3QgcHJvcGFnYXRlZCBhY3Jvc3MgY2hhaW5zLCBidXQgcmF0aGVyIG9ubHlcbiAqIGFzc29jaWF0ZWQgd2l0aCBzcGVjaWZpY2FsbHkgY2FzdCBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBvcHRfb25DYW5jZWxGdW5jdGlvbiBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgaWYgdGhlXG4gKiAgICAgRGVmZXJyZWQgaXMgY2FuY2VsZWQuIElmIHByb3ZpZGVkLCB0aGlzIGZ1bmN0aW9uIHJ1bnMgYmVmb3JlIHRoZVxuICogICAgIERlZmVycmVkIGlzIGZpcmVkIHdpdGggYSB7QGNvZGUgQ2FuY2VsZWRFcnJvcn0uXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9kZWZhdWx0U2NvcGUgVGhlIGRlZmF1bHQgb2JqZWN0IGNvbnRleHQgdG8gY2FsbFxuICogICAgIGNhbGxiYWNrcyBhbmQgZXJyYmFja3MgaW4uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIHtnb29nLlRoZW5hYmxlPFZBTFVFPn1cbiAqIEB0ZW1wbGF0ZSBWQUxVRVxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkID0gZnVuY3Rpb24ob3B0X29uQ2FuY2VsRnVuY3Rpb24sIG9wdF9kZWZhdWx0U2NvcGUpIHtcbiAgLyoqXG4gICAqIEVudHJpZXMgaW4gdGhlIHNlcXVlbmNlIGFyZSBhcnJheXMgY29udGFpbmluZyBhIGNhbGxiYWNrLCBhbiBlcnJiYWNrLCBhbmRcbiAgICogYW4gb3B0aW9uYWwgc2NvcGUuIFRoZSBjYWxsYmFjayBvciBlcnJiYWNrIGluIGFuIGVudHJ5IG1heSBiZSBudWxsLlxuICAgKiBAdHlwZSB7IUFycmF5PCFBcnJheT59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNlcXVlbmNlXyA9IFtdO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbCBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIGlmIHRoZSBEZWZlcnJlZCBpcyBjYW5jZWxlZC5cbiAgICogQHR5cGUge0Z1bmN0aW9ufHVuZGVmaW5lZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMub25DYW5jZWxGdW5jdGlvbl8gPSBvcHRfb25DYW5jZWxGdW5jdGlvbjtcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgc2NvcGUgdG8gZXhlY3V0ZSBjYWxsYmFja3MgYW5kIGVycmJhY2tzIGluLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kZWZhdWx0U2NvcGVfID0gb3B0X2RlZmF1bHRTY29wZSB8fCBudWxsO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBEZWZlcnJlZCBoYXMgYmVlbiBmaXJlZC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmZpcmVkXyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBsYXN0IHJlc3VsdCBpbiB0aGUgZXhlY3V0aW9uIHNlcXVlbmNlIHdhcyBhbiBlcnJvci5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmhhZEVycm9yXyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBEZWZlcnJlZCByZXN1bHQsIHVwZGF0ZWQgYXMgY2FsbGJhY2tzIGFuZCBlcnJiYWNrcyBhcmVcbiAgICogZXhlY3V0ZWQuXG4gICAqIEB0eXBlIHsqfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yZXN1bHRfID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBEZWZlcnJlZCBpcyBibG9ja2VkIHdhaXRpbmcgb24gYW5vdGhlciBEZWZlcnJlZCB0byBmaXJlLiBJZiBhXG4gICAqIGNhbGxiYWNrIG9yIGVycmJhY2sgcmV0dXJucyBhIERlZmVycmVkIGFzIGEgcmVzdWx0LCB0aGUgZXhlY3V0aW9uIHNlcXVlbmNlXG4gICAqIGlzIGJsb2NrZWQgdW50aWwgdGhhdCBEZWZlcnJlZCByZXN1bHQgYmVjb21lcyBhdmFpbGFibGUuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5ibG9ja2VkXyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoaXMgRGVmZXJyZWQgaXMgYmxvY2tpbmcgZXhlY3V0aW9uIG9mIGFub3RoZXIgRGVmZXJyZWQuIElmIHRoaXNcbiAgICogaW5zdGFuY2Ugd2FzIHJldHVybmVkIGFzIGEgcmVzdWx0IGluIGFub3RoZXIgRGVmZXJyZWQncyBleGVjdXRpb25cbiAgICogc2VxdWVuY2UsdGhhdCBvdGhlciBEZWZlcnJlZCBiZWNvbWVzIGJsb2NrZWQgdW50aWwgdGhpcyBpbnN0YW5jZSdzXG4gICAqIGV4ZWN1dGlvbiBzZXF1ZW5jZSBjb21wbGV0ZXMuIE5vIGFkZGl0aW9uYWwgY2FsbGJhY2tzIG1heSBiZSBhZGRlZCB0byBhXG4gICAqIERlZmVycmVkIG9uY2UgaXQgaXMgYmxvY2tpbmcgYW5vdGhlciBpbnN0YW5jZS5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmJsb2NraW5nXyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBEZWZlcnJlZCBoYXMgYmVlbiBjYW5jZWxlZCB3aXRob3V0IGhhdmluZyBhIGN1c3RvbSBjYW5jZWxcbiAgICogZnVuY3Rpb24uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zaWxlbnRseUNhbmNlbGVkXyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBJZiBhbiBlcnJvciBpcyB0aHJvd24gZHVyaW5nIERlZmVycmVkIGV4ZWN1dGlvbiB3aXRoIG5vIGVycmJhY2sgdG8gY2F0Y2hcbiAgICogaXQsIHRoZSBlcnJvciBpcyByZXRocm93biBhZnRlciBhIHRpbWVvdXQuIFJlcG9ydGluZyB0aGUgZXJyb3IgYWZ0ZXIgYVxuICAgKiB0aW1lb3V0IGFsbG93cyBleGVjdXRpb24gdG8gY29udGludWUgaW4gdGhlIGNhbGxpbmcgY29udGV4dCAoZW1wdHkgd2hlblxuICAgKiBubyBlcnJvciBpcyBzY2hlZHVsZWQpLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy51bmhhbmRsZWRFcnJvcklkXyA9IDA7XG5cbiAgLyoqXG4gICAqIElmIHRoaXMgRGVmZXJyZWQgd2FzIGNyZWF0ZWQgYnkgYnJhbmNoKCksIHRoaXMgd2lsbCBiZSB0aGUgXCJwYXJlbnRcIlxuICAgKiBEZWZlcnJlZC5cbiAgICogQHR5cGUge2dvb2cuYXN5bmMuRGVmZXJyZWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnBhcmVudF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIERlZmVycmVkIG9iamVjdHMgdGhhdCBoYXZlIGJlZW4gYnJhbmNoZWQgb2ZmIHRoaXMgb25lLiBUaGlzXG4gICAqIHdpbGwgYmUgZGVjcmVtZW50ZWQgd2hlbmV2ZXIgYSBicmFuY2ggaXMgZmlyZWQgb3IgY2FuY2VsZWQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmJyYW5jaGVzXyA9IDA7XG5cbiAgaWYgKGdvb2cuYXN5bmMuRGVmZXJyZWQuTE9OR19TVEFDS19UUkFDRVMpIHtcbiAgICAvKipcbiAgICAgKiBIb2xkcyB0aGUgc3RhY2sgdHJhY2UgYXQgdGltZSBvZiBkZWZlcnJlZCBjcmVhdGlvbiBpZiB0aGUgSlMgZW5naW5lXG4gICAgICogcHJvdmlkZXMgdGhlIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlIEFQSS5cbiAgICAgKiBAcHJpdmF0ZSB7P3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmNvbnN0cnVjdG9yU3RhY2tfID0gbnVsbDtcbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIHZhciB0YXJnZXQgPSB7IHN0YWNrOiAnJyB9O1xuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGFyZ2V0LCBnb29nLmFzeW5jLkRlZmVycmVkKTtcbiAgICAgIC8vIENoZWNrIGlmIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlIHdvcmtlZC4gSXQgZmFpbHMgaW4gZ2pzdGVzdC5cbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0LnN0YWNrID09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIFJlbW92ZSBmaXJzdCBsaW5lIGFuZCBmb3JjZSBzdHJpbmdpZnkgdG8gcHJldmVudCBtZW1vcnkgbGVhayBkdWUgdG9cbiAgICAgICAgLy8gaG9sZGluZyBvbiB0byBhY3R1YWwgc3RhY2sgZnJhbWVzLlxuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yU3RhY2tfID0gdGFyZ2V0LnN0YWNrLnJlcGxhY2UoL15bXlxcbl0qXFxuLywgJycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdW5oYW5kbGVkIGVycm9ycyBzaG91bGQgYWx3YXlzIGdldCByZXRocm93biB0byB0aGVcbiAqIGdsb2JhbCBzY29wZS4gRGVmYXVsdHMgdG8gdGhlIHZhbHVlIG9mIGdvb2cuREVCVUcuXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLmFzeW5jLkRlZmVycmVkLlNUUklDVF9FUlJPUlMnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRvIGF0dGVtcHQgdG8gbWFrZSBzdGFjayB0cmFjZXMgbG9uZy4gIERlZmF1bHRzIHRvXG4gKiB0aGUgdmFsdWUgb2YgZ29vZy5ERUJVRy5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cuYXN5bmMuRGVmZXJyZWQuTE9OR19TVEFDS19UUkFDRVMnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBDYW5jZWxzIGEgRGVmZXJyZWQgdGhhdCBoYXMgbm90IHlldCBiZWVuIGZpcmVkLCBvciBpcyBibG9ja2VkIG9uIGFub3RoZXJcbiAqIGRlZmVycmVkIG9wZXJhdGlvbi4gSWYgdGhpcyBEZWZlcnJlZCBpcyB3YWl0aW5nIGZvciBhIGJsb2NraW5nIERlZmVycmVkIHRvXG4gKiBmaXJlLCB0aGUgYmxvY2tpbmcgRGVmZXJyZWQgd2lsbCBhbHNvIGJlIGNhbmNlbGVkLlxuICpcbiAqIElmIHRoaXMgRGVmZXJyZWQgd2FzIGNyZWF0ZWQgYnkgY2FsbGluZyBicmFuY2goKSBvbiBhIHBhcmVudCBEZWZlcnJlZCB3aXRoXG4gKiBvcHRfcHJvcGFnYXRlQ2FuY2VsIHNldCB0byB0cnVlLCB0aGUgcGFyZW50IG1heSBhbHNvIGJlIGNhbmNlbGVkLiBJZlxuICogb3B0X2RlZXBDYW5jZWwgaXMgc2V0LCBjYW5jZWwoKSB3aWxsIGJlIGNhbGxlZCBvbiB0aGUgcGFyZW50IChhcyB3ZWxsIGFzIGFueVxuICogb3RoZXIgYW5jZXN0b3JzIGlmIHRoZSBwYXJlbnQgaXMgYWxzbyBhIGJyYW5jaCkuIElmIG9uZSBvciBtb3JlIGJyYW5jaGVzIHdlcmVcbiAqIGNyZWF0ZWQgd2l0aCBvcHRfcHJvcGFnYXRlQ2FuY2VsIHNldCB0byB0cnVlLCB0aGUgcGFyZW50IHdpbGwgYmUgY2FuY2VsZWQgaWZcbiAqIGNhbmNlbCgpIGlzIGNhbGxlZCBvbiBhbGwgb2YgdGhvc2UgYnJhbmNoZXMuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2RlZXBDYW5jZWwgSWYgdHJ1ZSwgY2FuY2VscyB0aGlzIERlZmVycmVkJ3MgcGFyZW50IGV2ZW5cbiAqICAgICBpZiBjYW5jZWwoKSBoYXNuJ3QgYmVlbiBjYWxsZWQgb24gc29tZSBvZiB0aGUgcGFyZW50J3MgYnJhbmNoZXMuIEhhcyBub1xuICogICAgIGVmZmVjdCBvbiBhIGJyYW5jaCB3aXRob3V0IG9wdF9wcm9wYWdhdGVDYW5jZWwgc2V0IHRvIHRydWUuXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uKG9wdF9kZWVwQ2FuY2VsKSB7XG4gIGlmICghdGhpcy5oYXNGaXJlZCgpKSB7XG4gICAgaWYgKHRoaXMucGFyZW50Xykge1xuICAgICAgLy8gR2V0IHJpZCBvZiB0aGUgcGFyZW50IHJlZmVyZW5jZSBiZWZvcmUgcG90ZW50aWFsbHkgcnVubmluZyB0aGUgcGFyZW50J3NcbiAgICAgIC8vIGNhbmNlbGVyIGZ1bmN0aW9uIHRvIGVuc3VyZSB0aGF0IHRoaXMgY2FuY2VsbGF0aW9uIGlzbid0XG4gICAgICAvLyBkb3VibGUtY291bnRlZC5cbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudF87XG4gICAgICBkZWxldGUgdGhpcy5wYXJlbnRfO1xuICAgICAgaWYgKG9wdF9kZWVwQ2FuY2VsKSB7XG4gICAgICAgIHBhcmVudC5jYW5jZWwob3B0X2RlZXBDYW5jZWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50LmJyYW5jaENhbmNlbF8oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5vbkNhbmNlbEZ1bmN0aW9uXykge1xuICAgICAgLy8gQ2FsbCBpbiB1c2VyLXNwZWNpZmllZCBzY29wZS5cbiAgICAgIHRoaXMub25DYW5jZWxGdW5jdGlvbl8uY2FsbCh0aGlzLmRlZmF1bHRTY29wZV8sIHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNpbGVudGx5Q2FuY2VsZWRfID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmhhc0ZpcmVkKCkpIHtcbiAgICAgIHRoaXMuZXJyYmFjayhuZXcgZ29vZy5hc3luYy5EZWZlcnJlZC5DYW5jZWxlZEVycm9yKHRoaXMpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodGhpcy5yZXN1bHRfIGluc3RhbmNlb2YgZ29vZy5hc3luYy5EZWZlcnJlZCkge1xuICAgIHRoaXMucmVzdWx0Xy5jYW5jZWwoKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEhhbmRsZSBhIHNpbmdsZSBicmFuY2ggYmVpbmcgY2FuY2VsZWQuIE9uY2UgYWxsIGJyYW5jaGVzIGFyZSBjYW5jZWxlZCwgdGhpc1xuICogRGVmZXJyZWQgd2lsbCBiZSBjYW5jZWxlZCBhcyB3ZWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQucHJvdG90eXBlLmJyYW5jaENhbmNlbF8gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5icmFuY2hlc18tLTtcbiAgaWYgKHRoaXMuYnJhbmNoZXNfIDw9IDApIHtcbiAgICB0aGlzLmNhbmNlbCgpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ2FsbGVkIGFmdGVyIGEgYmxvY2tpbmcgRGVmZXJyZWQgZmlyZXMuIFVuYmxvY2tzIHRoaXMgRGVmZXJyZWQgYW5kIHJlc3VtZXNcbiAqIGl0cyBleGVjdXRpb24gc2VxdWVuY2UuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBpc1N1Y2Nlc3MgV2hldGhlciB0aGUgcmVzdWx0IGlzIGEgc3VjY2VzcyBvciBhbiBlcnJvci5cbiAqIEBwYXJhbSB7Kn0gcmVzIFRoZSByZXN1bHQgb2YgdGhlIGJsb2NraW5nIERlZmVycmVkLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5hc3luYy5EZWZlcnJlZC5wcm90b3R5cGUuY29udGludWVfID0gZnVuY3Rpb24oaXNTdWNjZXNzLCByZXMpIHtcbiAgdGhpcy5ibG9ja2VkXyA9IGZhbHNlO1xuICB0aGlzLnVwZGF0ZVJlc3VsdF8oaXNTdWNjZXNzLCByZXMpO1xufTtcblxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgcmVzdWx0IGJhc2VkIG9uIHRoZSBzdWNjZXNzIG9yIGZhaWx1cmUgb2YgdGhlIGxhc3QgYWN0aW9uXG4gKiBpbiB0aGUgZXhlY3V0aW9uIHNlcXVlbmNlLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdWNjZXNzIFdoZXRoZXIgdGhlIG5ldyByZXN1bHQgaXMgYSBzdWNjZXNzIG9yIGFuIGVycm9yLlxuICogQHBhcmFtIHsqfSByZXMgVGhlIHJlc3VsdC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQucHJvdG90eXBlLnVwZGF0ZVJlc3VsdF8gPSBmdW5jdGlvbihpc1N1Y2Nlc3MsIHJlcykge1xuICB0aGlzLmZpcmVkXyA9IHRydWU7XG4gIHRoaXMucmVzdWx0XyA9IHJlcztcbiAgdGhpcy5oYWRFcnJvcl8gPSAhaXNTdWNjZXNzO1xuICB0aGlzLmZpcmVfKCk7XG59O1xuXG5cbi8qKlxuICogVmVyaWZpZXMgdGhhdCB0aGUgRGVmZXJyZWQgaGFzIG5vdCB5ZXQgYmVlbiBmaXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHRocm93cyB7RXJyb3J9IElmIHRoaXMgaGFzIGFscmVhZHkgYmVlbiBmaXJlZC5cbiAqL1xuZ29vZy5hc3luYy5EZWZlcnJlZC5wcm90b3R5cGUuY2hlY2tfID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmhhc0ZpcmVkKCkpIHtcbiAgICBpZiAoIXRoaXMuc2lsZW50bHlDYW5jZWxlZF8pIHtcbiAgICAgIHRocm93IG5ldyBnb29nLmFzeW5jLkRlZmVycmVkLkFscmVhZHlDYWxsZWRFcnJvcih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5zaWxlbnRseUNhbmNlbGVkXyA9IGZhbHNlO1xuICB9XG59O1xuXG5cbi8qKlxuICogRmlyZSB0aGUgZXhlY3V0aW9uIHNlcXVlbmNlIGZvciB0aGlzIERlZmVycmVkIGJ5IHBhc3NpbmcgdGhlIHN0YXJ0aW5nIHJlc3VsdFxuICogdG8gdGhlIGZpcnN0IHJlZ2lzdGVyZWQgY2FsbGJhY2suXG4gKiBAcGFyYW0ge1ZBTFVFPX0gb3B0X3Jlc3VsdCBUaGUgc3RhcnRpbmcgcmVzdWx0LlxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLnByb3RvdHlwZS5jYWxsYmFjayA9IGZ1bmN0aW9uKG9wdF9yZXN1bHQpIHtcbiAgdGhpcy5jaGVja18oKTtcbiAgdGhpcy5hc3NlcnROb3REZWZlcnJlZF8ob3B0X3Jlc3VsdCk7XG4gIHRoaXMudXBkYXRlUmVzdWx0Xyh0cnVlIC8qIGlzU3VjY2VzcyAqLywgb3B0X3Jlc3VsdCk7XG59O1xuXG5cbi8qKlxuICogRmlyZSB0aGUgZXhlY3V0aW9uIHNlcXVlbmNlIGZvciB0aGlzIERlZmVycmVkIGJ5IHBhc3NpbmcgdGhlIHN0YXJ0aW5nIGVycm9yXG4gKiByZXN1bHQgdG8gdGhlIGZpcnN0IHJlZ2lzdGVyZWQgZXJyYmFjay5cbiAqIEBwYXJhbSB7Kj19IG9wdF9yZXN1bHQgVGhlIHN0YXJ0aW5nIGVycm9yLlxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLnByb3RvdHlwZS5lcnJiYWNrID0gZnVuY3Rpb24ob3B0X3Jlc3VsdCkge1xuICB0aGlzLmNoZWNrXygpO1xuICB0aGlzLmFzc2VydE5vdERlZmVycmVkXyhvcHRfcmVzdWx0KTtcbiAgdGhpcy5tYWtlU3RhY2tUcmFjZUxvbmdfKG9wdF9yZXN1bHQpO1xuICB0aGlzLnVwZGF0ZVJlc3VsdF8oZmFsc2UgLyogaXNTdWNjZXNzICovLCBvcHRfcmVzdWx0KTtcbn07XG5cblxuLyoqXG4gKiBBdHRlbXB0IHRvIG1ha2UgdGhlIGVycm9yJ3Mgc3RhY2sgdHJhY2UgYmUgbG9uZyBpbiB0aGF0IGl0IGNvbnRhaW5zIHRoZVxuICogc3RhY2sgdHJhY2UgZnJvbSB0aGUgcG9pbnQgd2hlcmUgdGhlIGRlZmVycmVkIHdhcyBjcmVhdGVkIG9uIHRvcCBvZiB0aGVcbiAqIGN1cnJlbnQgc3RhY2sgdHJhY2UgdG8gZ2l2ZSBhZGRpdGlvbmFsIGNvbnRleHQuXG4gKiBAcGFyYW0geyp9IGVycm9yXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLnByb3RvdHlwZS5tYWtlU3RhY2tUcmFjZUxvbmdfID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgaWYgKCFnb29nLmFzeW5jLkRlZmVycmVkLkxPTkdfU1RBQ0tfVFJBQ0VTKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0aGlzLmNvbnN0cnVjdG9yU3RhY2tfICYmIGdvb2cuaXNPYmplY3QoZXJyb3IpICYmIGVycm9yLnN0YWNrICYmXG4gICAgICAvLyBTdGFjayBsb29rcyBsaWtlIGl0IHdhcyBzeXN0ZW0gZ2VuZXJhdGVkLiBTZWVcbiAgICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3Avdjgvd2lraS9KYXZhU2NyaXB0U3RhY2tUcmFjZUFwaVxuICAgICAgKC9eW15cXG5dKyhcXG4gICBbXlxcbl0rKSsvKS50ZXN0KGVycm9yLnN0YWNrKSkge1xuICAgIGVycm9yLnN0YWNrID0gZXJyb3Iuc3RhY2sgKyAnXFxuREVGRVJSRUQgT1BFUkFUSU9OOlxcbicgK1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yU3RhY2tfO1xuICB9XG59O1xuXG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IGFuIG9iamVjdCBpcyBub3QgYSBEZWZlcnJlZC5cbiAqIEBwYXJhbSB7Kn0gb2JqIFRoZSBvYmplY3QgdG8gdGVzdC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBUaHJvd3MgYW4gZXhjZXB0aW9uIGlmIHRoZSBvYmplY3QgaXMgYSBEZWZlcnJlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQucHJvdG90eXBlLmFzc2VydE5vdERlZmVycmVkXyA9IGZ1bmN0aW9uKG9iaikge1xuICBnb29nLmFzc2VydHMuYXNzZXJ0KFxuICAgICAgIShvYmogaW5zdGFuY2VvZiBnb29nLmFzeW5jLkRlZmVycmVkKSxcbiAgICAgICdBbiBleGVjdXRpb24gc2VxdWVuY2UgbWF5IG5vdCBiZSBpbml0aWF0ZWQgd2l0aCBhIGJsb2NraW5nIERlZmVycmVkLicpO1xufTtcblxuXG4vKipcbiAqIFJlZ2lzdGVyIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdpdGggYSBzdWNjZXNzZnVsIHJlc3VsdC4gSWYgbm9cbiAqIHZhbHVlIGlzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbiwgdGhlIHJlc3VsdCB2YWx1ZSBpcyB1bmNoYW5nZWQuIElmXG4gKiBhIG5ldyB2YWx1ZSBpcyByZXR1cm5lZCwgaXQgYmVjb21lcyB0aGUgRGVmZXJyZWQgcmVzdWx0IGFuZCB3aWxsIGJlIHBhc3NlZCB0b1xuICogdGhlIG5leHQgY2FsbGJhY2sgaW4gdGhlIGV4ZWN1dGlvbiBzZXF1ZW5jZS5cbiAqXG4gKiBJZiB0aGUgZnVuY3Rpb24gdGhyb3dzIGFuIGVycm9yLCB0aGUgZXJyb3IgYmVjb21lcyB0aGUgbmV3IHJlc3VsdCBhbmQgd2lsbCBiZVxuICogcGFzc2VkIHRvIHRoZSBuZXh0IGVycmJhY2sgaW4gdGhlIGV4ZWN1dGlvbiBjaGFpbi5cbiAqXG4gKiBJZiB0aGUgZnVuY3Rpb24gcmV0dXJucyBhIERlZmVycmVkLCB0aGUgZXhlY3V0aW9uIHNlcXVlbmNlIHdpbGwgYmUgYmxvY2tlZFxuICogdW50aWwgdGhhdCBEZWZlcnJlZCBmaXJlcy4gSXRzIHJlc3VsdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgbmV4dCBjYWxsYmFjayAob3JcbiAqIGVycmJhY2sgaWYgaXQgaXMgYW4gZXJyb3IgcmVzdWx0KSBpbiB0aGlzIERlZmVycmVkJ3MgZXhlY3V0aW9uIHNlcXVlbmNlLlxuICpcbiAqIEBwYXJhbSB7IWZ1bmN0aW9uKHRoaXM6VCxWQUxVRSk6P30gY2IgVGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aXRoIGFcbiAqICAgICBzdWNjZXNzZnVsIHJlc3VsdC5cbiAqIEBwYXJhbSB7VD19IG9wdF9zY29wZSBBbiBvcHRpb25hbCBzY29wZSB0byBjYWxsIHRoZSBjYWxsYmFjayBpbi5cbiAqIEByZXR1cm4geyFnb29nLmFzeW5jLkRlZmVycmVkfSBUaGlzIERlZmVycmVkLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5hc3luYy5EZWZlcnJlZC5wcm90b3R5cGUuYWRkQ2FsbGJhY2sgPSBmdW5jdGlvbihjYiwgb3B0X3Njb3BlKSB7XG4gIHJldHVybiB0aGlzLmFkZENhbGxiYWNrcyhjYiwgbnVsbCwgb3B0X3Njb3BlKTtcbn07XG5cblxuLyoqXG4gKiBSZWdpc3RlciBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aXRoIGFuIGVycm9yIHJlc3VsdC4gSWYgbm8gdmFsdWVcbiAqIGlzIHJldHVybmVkIGJ5IHRoZSBmdW5jdGlvbiwgdGhlIGVycm9yIHJlc3VsdCBpcyB1bmNoYW5nZWQuIElmIGEgbmV3IGVycm9yXG4gKiB2YWx1ZSBpcyByZXR1cm5lZCBvciB0aHJvd24sIHRoYXQgZXJyb3IgYmVjb21lcyB0aGUgRGVmZXJyZWQgcmVzdWx0IGFuZCB3aWxsXG4gKiBiZSBwYXNzZWQgdG8gdGhlIG5leHQgZXJyYmFjayBpbiB0aGUgZXhlY3V0aW9uIHNlcXVlbmNlLlxuICpcbiAqIElmIHRoZSBlcnJiYWNrIGZ1bmN0aW9uIGhhbmRsZXMgdGhlIGVycm9yIGJ5IHJldHVybmluZyBhIG5vbi1lcnJvciB2YWx1ZSxcbiAqIHRoYXQgcmVzdWx0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBuZXh0IG5vcm1hbCBjYWxsYmFjayBpbiB0aGUgc2VxdWVuY2UuXG4gKlxuICogSWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgYSBEZWZlcnJlZCwgdGhlIGV4ZWN1dGlvbiBzZXF1ZW5jZSB3aWxsIGJlIGJsb2NrZWRcbiAqIHVudGlsIHRoYXQgRGVmZXJyZWQgZmlyZXMuIEl0cyByZXN1bHQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIG5leHQgY2FsbGJhY2sgKG9yXG4gKiBlcnJiYWNrIGlmIGl0IGlzIGFuIGVycm9yIHJlc3VsdCkgaW4gdGhpcyBEZWZlcnJlZCdzIGV4ZWN1dGlvbiBzZXF1ZW5jZS5cbiAqXG4gKiBAcGFyYW0geyFmdW5jdGlvbih0aGlzOlQsPyk6P30gZWIgVGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBhblxuICogICAgIHVuc3VjY2Vzc2Z1bCByZXN1bHQuXG4gKiBAcGFyYW0ge1Q9fSBvcHRfc2NvcGUgQW4gb3B0aW9uYWwgc2NvcGUgdG8gY2FsbCB0aGUgZXJyYmFjayBpbi5cbiAqIEByZXR1cm4geyFnb29nLmFzeW5jLkRlZmVycmVkPFZBTFVFPn0gVGhpcyBEZWZlcnJlZC5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQucHJvdG90eXBlLmFkZEVycmJhY2sgPSBmdW5jdGlvbihlYiwgb3B0X3Njb3BlKSB7XG4gIHJldHVybiB0aGlzLmFkZENhbGxiYWNrcyhudWxsLCBlYiwgb3B0X3Njb3BlKTtcbn07XG5cblxuLyoqXG4gKiBSZWdpc3RlcnMgb25lIGZ1bmN0aW9uIGFzIGJvdGggYSBjYWxsYmFjayBhbmQgZXJyYmFjay5cbiAqXG4gKiBAcGFyYW0geyFmdW5jdGlvbih0aGlzOlQsPyk6P30gZiBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGFueSByZXN1bHQuXG4gKiBAcGFyYW0ge1Q9fSBvcHRfc2NvcGUgQW4gb3B0aW9uYWwgc2NvcGUgdG8gY2FsbCB0aGUgZnVuY3Rpb24gaW4uXG4gKiBAcmV0dXJuIHshZ29vZy5hc3luYy5EZWZlcnJlZH0gVGhpcyBEZWZlcnJlZC5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQucHJvdG90eXBlLmFkZEJvdGggPSBmdW5jdGlvbihmLCBvcHRfc2NvcGUpIHtcbiAgcmV0dXJuIHRoaXMuYWRkQ2FsbGJhY2tzKGYsIGYsIG9wdF9zY29wZSk7XG59O1xuXG5cbi8qKlxuICogTGlrZSBhZGRCb3RoLCBidXQgcHJvcGFnYXRlcyB1bmNhdWdodCBleGNlcHRpb25zIGluIHRoZSBlcnJiYWNrLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpULD8pOj99IGYgVGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBhbnkgcmVzdWx0LlxuICogQHBhcmFtIHtUPX0gb3B0X3Njb3BlIEFuIG9wdGlvbmFsIHNjb3BlIHRvIGNhbGwgdGhlIGZ1bmN0aW9uIGluLlxuICogQHJldHVybiB7IWdvb2cuYXN5bmMuRGVmZXJyZWQ8VkFMVUU+fSBUaGlzIERlZmVycmVkLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5hc3luYy5EZWZlcnJlZC5wcm90b3R5cGUuYWRkRmluYWxseSA9IGZ1bmN0aW9uKGYsIG9wdF9zY29wZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJldHVybiB0aGlzLmFkZENhbGxiYWNrcyhmLCBmdW5jdGlvbihlcnIpIHtcbiAgICB2YXIgcmVzdWx0ID0gZi5jYWxsKHNlbGYsIGVycik7XG4gICAgaWYgKCFnb29nLmlzRGVmKHJlc3VsdCkpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgb3B0X3Njb3BlKTtcbn07XG5cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSBjYWxsYmFjayBmdW5jdGlvbiBhbmQgYW4gZXJyYmFjayBmdW5jdGlvbiBhdCB0aGUgc2FtZSBwb3NpdGlvblxuICogaW4gdGhlIGV4ZWN1dGlvbiBzZXF1ZW5jZS4gT25seSBvbmUgb2YgdGhlc2UgZnVuY3Rpb25zIHdpbGwgZXhlY3V0ZSxcbiAqIGRlcGVuZGluZyBvbiB0aGUgZXJyb3Igc3RhdGUgZHVyaW5nIHRoZSBleGVjdXRpb24gc2VxdWVuY2UuXG4gKlxuICogTk9URTogVGhpcyBpcyBub3QgZXF1aXZhbGVudCB0byB7QGNvZGUgZGVmLmFkZENhbGxiYWNrKCkuYWRkRXJyYmFjaygpfSEgSWZcbiAqIHRoZSBjYWxsYmFjayBpcyBpbnZva2VkLCB0aGUgZXJyYmFjayB3aWxsIGJlIHNraXBwZWQsIGFuZCB2aWNlIHZlcnNhLlxuICpcbiAqIEBwYXJhbSB7PyhmdW5jdGlvbih0aGlzOlQsVkFMVUUpOj8pfSBjYiBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGFcbiAqICAgICBzdWNjZXNzZnVsIHJlc3VsdC5cbiAqIEBwYXJhbSB7PyhmdW5jdGlvbih0aGlzOlQsPyk6Pyl9IGViIFRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gYW5cbiAqICAgICB1bnN1Y2Nlc3NmdWwgcmVzdWx0LlxuICogQHBhcmFtIHtUPX0gb3B0X3Njb3BlIEFuIG9wdGlvbmFsIHNjb3BlIHRvIGNhbGwgdGhlIGZ1bmN0aW9ucyBpbi5cbiAqIEByZXR1cm4geyFnb29nLmFzeW5jLkRlZmVycmVkfSBUaGlzIERlZmVycmVkLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5hc3luYy5EZWZlcnJlZC5wcm90b3R5cGUuYWRkQ2FsbGJhY2tzID0gZnVuY3Rpb24oY2IsIGViLCBvcHRfc2NvcGUpIHtcbiAgZ29vZy5hc3NlcnRzLmFzc2VydCghdGhpcy5ibG9ja2luZ18sICdCbG9ja2luZyBEZWZlcnJlZHMgY2FuIG5vdCBiZSByZS11c2VkJyk7XG4gIHRoaXMuc2VxdWVuY2VfLnB1c2goW2NiLCBlYiwgb3B0X3Njb3BlXSk7XG4gIGlmICh0aGlzLmhhc0ZpcmVkKCkpIHtcbiAgICB0aGlzLmZpcmVfKCk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogSW1wbGVtZW50cyB7QHNlZSBnb29nLlRoZW5hYmxlfSBmb3Igc2VhbWxlc3MgaW50ZWdyYXRpb24gd2l0aFxuICoge0BzZWUgZ29vZy5Qcm9taXNlfS5cbiAqIERlZmVycmVkIHJlc3VsdHMgYXJlIG11dGFibGUgYW5kIG1heSByZXByZXNlbnQgbXVsdGlwbGUgdmFsdWVzIG92ZXJcbiAqIHRoZWlyIGxpZmV0aW1lLiBDYWxsaW5nIHtAY29kZSB0aGVufSBvbiBhIERlZmVycmVkIHJldHVybnMgYSBQcm9taXNlXG4gKiB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIERlZmVycmVkIGF0IHRoYXQgcG9pbnQgaW4gaXRzIGNhbGxiYWNrIGNoYWluLlxuICogTm90ZSB0aGF0IGlmIHRoZSBEZWZlcnJlZCByZXN1bHQgaXMgbmV2ZXIgbXV0YXRlZCwgYW5kIG9ubHlcbiAqIHtAY29kZSB0aGVufSBjYWxscyBhcmUgbWFkZSwgdGhlIERlZmVycmVkIHdpbGwgYmVoYXZlIGxpa2UgYSBQcm9taXNlLlxuICpcbiAqIEBvdmVycmlkZVxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24ob3B0X29uRnVsZmlsbGVkLCBvcHRfb25SZWplY3RlZCxcbiAgICBvcHRfY29udGV4dCkge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB2YXIgcHJvbWlzZSA9IG5ldyBnb29nLlByb21pc2UoZnVuY3Rpb24ocmVzLCByZWopIHtcbiAgICAvLyBDb3B5aW5nIHJlc29sdmVycyB0byBvdXRlciBzY29wZSwgc28gdGhhdCB0aGV5IGFyZSBhdmFpbGFibGUgd2hlbiB0aGVcbiAgICAvLyBkZWZlcnJlZCBjYWxsYmFjayBmaXJlcyAod2hpY2ggbWF5IGJlIHN5bmNocm9ub3VzKS5cbiAgICByZXNvbHZlID0gcmVzO1xuICAgIHJlamVjdCA9IHJlajtcbiAgfSk7XG4gIHRoaXMuYWRkQ2FsbGJhY2tzKHJlc29sdmUsIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIGlmIChyZWFzb24gaW5zdGFuY2VvZiBnb29nLmFzeW5jLkRlZmVycmVkLkNhbmNlbGVkRXJyb3IpIHtcbiAgICAgIHByb21pc2UuY2FuY2VsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdChyZWFzb24pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwcm9taXNlLnRoZW4ob3B0X29uRnVsZmlsbGVkLCBvcHRfb25SZWplY3RlZCwgb3B0X2NvbnRleHQpO1xufTtcbmdvb2cuVGhlbmFibGUuYWRkSW1wbGVtZW50YXRpb24oZ29vZy5hc3luYy5EZWZlcnJlZCk7XG5cblxuLyoqXG4gKiBMaW5rcyBhbm90aGVyIERlZmVycmVkIHRvIHRoZSBlbmQgb2YgdGhpcyBEZWZlcnJlZCdzIGV4ZWN1dGlvbiBzZXF1ZW5jZS4gVGhlXG4gKiByZXN1bHQgb2YgdGhpcyBleGVjdXRpb24gc2VxdWVuY2Ugd2lsbCBiZSBwYXNzZWQgYXMgdGhlIHN0YXJ0aW5nIHJlc3VsdCBmb3JcbiAqIHRoZSBjaGFpbmVkIERlZmVycmVkLCBpbnZva2luZyBlaXRoZXIgaXRzIGZpcnN0IGNhbGxiYWNrIG9yIGVycmJhY2suXG4gKlxuICogQHBhcmFtIHshZ29vZy5hc3luYy5EZWZlcnJlZH0gb3RoZXJEZWZlcnJlZCBUaGUgRGVmZXJyZWQgdG8gY2hhaW4uXG4gKiBAcmV0dXJuIHshZ29vZy5hc3luYy5EZWZlcnJlZH0gVGhpcyBEZWZlcnJlZC5cbiAqL1xuZ29vZy5hc3luYy5EZWZlcnJlZC5wcm90b3R5cGUuY2hhaW5EZWZlcnJlZCA9IGZ1bmN0aW9uKG90aGVyRGVmZXJyZWQpIHtcbiAgdGhpcy5hZGRDYWxsYmFja3MoXG4gICAgICBvdGhlckRlZmVycmVkLmNhbGxiYWNrLCBvdGhlckRlZmVycmVkLmVycmJhY2ssIG90aGVyRGVmZXJyZWQpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBNYWtlcyB0aGlzIERlZmVycmVkIHdhaXQgZm9yIGFub3RoZXIgRGVmZXJyZWQncyBleGVjdXRpb24gc2VxdWVuY2UgdG9cbiAqIGNvbXBsZXRlIGJlZm9yZSBjb250aW51aW5nLlxuICpcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byBhZGRpbmcgYSBjYWxsYmFjayB0aGF0IHJldHVybnMge0Bjb2RlIG90aGVyRGVmZXJyZWR9LFxuICogYnV0IGRvZXNuJ3QgcHJldmVudCBhZGRpdGlvbmFsIGNhbGxiYWNrcyBmcm9tIGJlaW5nIGFkZGVkIHRvXG4gKiB7QGNvZGUgb3RoZXJEZWZlcnJlZH0uXG4gKlxuICogQHBhcmFtIHshZ29vZy5hc3luYy5EZWZlcnJlZHwhZ29vZy5UaGVuYWJsZX0gb3RoZXJEZWZlcnJlZCBUaGUgRGVmZXJyZWRcbiAqICAgICB0byB3YWl0IGZvci5cbiAqIEByZXR1cm4geyFnb29nLmFzeW5jLkRlZmVycmVkfSBUaGlzIERlZmVycmVkLlxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLnByb3RvdHlwZS5hd2FpdERlZmVycmVkID0gZnVuY3Rpb24ob3RoZXJEZWZlcnJlZCkge1xuICBpZiAoIShvdGhlckRlZmVycmVkIGluc3RhbmNlb2YgZ29vZy5hc3luYy5EZWZlcnJlZCkpIHtcbiAgICAvLyBUaGUgVGhlbmFibGUgY2FzZS5cbiAgICByZXR1cm4gdGhpcy5hZGRDYWxsYmFjayhmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBvdGhlckRlZmVycmVkO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB0aGlzLmFkZENhbGxiYWNrKGdvb2cuYmluZChvdGhlckRlZmVycmVkLmJyYW5jaCwgb3RoZXJEZWZlcnJlZCkpO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBicmFuY2ggb2ZmIHRoaXMgRGVmZXJyZWQncyBleGVjdXRpb24gc2VxdWVuY2UsIGFuZCByZXR1cm5zIGl0IGFzIGFcbiAqIG5ldyBEZWZlcnJlZC4gVGhlIGJyYW5jaGVkIERlZmVycmVkJ3Mgc3RhcnRpbmcgcmVzdWx0IHdpbGwgYmUgc2hhcmVkIHdpdGggdGhlXG4gKiBwYXJlbnQgYXQgdGhlIHBvaW50IG9mIHRoZSBicmFuY2gsIGV2ZW4gaWYgZnVydGhlciBjYWxsYmFja3MgYXJlIGFkZGVkIHRvIHRoZVxuICogcGFyZW50LlxuICpcbiAqIEFsbCBicmFuY2hlcyBhdCB0aGUgc2FtZSBzdGFnZSBpbiB0aGUgZXhlY3V0aW9uIHNlcXVlbmNlIHdpbGwgcmVjZWl2ZSB0aGVcbiAqIHNhbWUgc3RhcnRpbmcgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3Byb3BhZ2F0ZUNhbmNlbCBJZiBjYW5jZWwoKSBpcyBjYWxsZWQgb24gZXZlcnkgY2hpbGRcbiAqICAgICBicmFuY2ggY3JlYXRlZCB3aXRoIG9wdF9wcm9wYWdhdGVDYW5jZWwsIHRoZSBwYXJlbnQgd2lsbCBiZSBjYW5jZWxlZCBhc1xuICogICAgIHdlbGwuXG4gKiBAcmV0dXJuIHshZ29vZy5hc3luYy5EZWZlcnJlZDxWQUxVRT59IEEgRGVmZXJyZWQgdGhhdCB3aWxsIGJlIHN0YXJ0ZWQgd2l0aFxuICogICAgIHRoZSBjb21wdXRlZCByZXN1bHQgZnJvbSB0aGlzIHN0YWdlIGluIHRoZSBleGVjdXRpb24gc2VxdWVuY2UuXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQucHJvdG90eXBlLmJyYW5jaCA9IGZ1bmN0aW9uKG9wdF9wcm9wYWdhdGVDYW5jZWwpIHtcbiAgdmFyIGQgPSBuZXcgZ29vZy5hc3luYy5EZWZlcnJlZCgpO1xuICB0aGlzLmNoYWluRGVmZXJyZWQoZCk7XG4gIGlmIChvcHRfcHJvcGFnYXRlQ2FuY2VsKSB7XG4gICAgZC5wYXJlbnRfID0gdGhpcztcbiAgICB0aGlzLmJyYW5jaGVzXysrO1xuICB9XG4gIHJldHVybiBkO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGV4ZWN1dGlvbiBzZXF1ZW5jZSBoYXMgYmVlbiBzdGFydGVkIG9uIHRoaXNcbiAqICAgICBEZWZlcnJlZCBieSBpbnZva2luZyB7QGNvZGUgY2FsbGJhY2t9IG9yIHtAY29kZSBlcnJiYWNrfS5cbiAqL1xuZ29vZy5hc3luYy5EZWZlcnJlZC5wcm90b3R5cGUuaGFzRmlyZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlyZWRfO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7Kn0gcmVzIFRoZSBsYXRlc3QgcmVzdWx0IGluIHRoZSBleGVjdXRpb24gc2VxdWVuY2UuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjdXJyZW50IHJlc3VsdCBpcyBhbiBlcnJvciB0aGF0IHNob3VsZCBjYXVzZVxuICogICAgIHRoZSBuZXh0IGVycmJhY2sgdG8gZmlyZS4gTWF5IGJlIG92ZXJyaWRkZW4gYnkgc3ViY2xhc3NlcyB0byBoYW5kbGVcbiAqICAgICBzcGVjaWFsIGVycm9yIHR5cGVzLlxuICogQHByb3RlY3RlZFxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLnByb3RvdHlwZS5pc0Vycm9yID0gZnVuY3Rpb24ocmVzKSB7XG4gIHJldHVybiByZXMgaW5zdGFuY2VvZiBFcnJvcjtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGFuIGVycmJhY2sgZXhpc3RzIGluIHRoZSByZW1haW5pbmcgc2VxdWVuY2UuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLnByb3RvdHlwZS5oYXNFcnJiYWNrXyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5hcnJheS5zb21lKHRoaXMuc2VxdWVuY2VfLCBmdW5jdGlvbihzZXF1ZW5jZVJvdykge1xuICAgIC8vIFRoZSBlcnJiYWNrIGlzIHRoZSBzZWNvbmQgZWxlbWVudCBpbiB0aGUgYXJyYXkuXG4gICAgcmV0dXJuIGdvb2cuaXNGdW5jdGlvbihzZXF1ZW5jZVJvd1sxXSk7XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIEV4aGF1c3RzIHRoZSBleGVjdXRpb24gc2VxdWVuY2Ugd2hpbGUgYSByZXN1bHQgaXMgYXZhaWxhYmxlLiBUaGUgcmVzdWx0IG1heVxuICogYmUgbW9kaWZpZWQgYnkgY2FsbGJhY2tzIG9yIGVycmJhY2tzLCBhbmQgZXhlY3V0aW9uIHdpbGwgYmxvY2sgaWYgdGhlXG4gKiByZXR1cm5lZCByZXN1bHQgaXMgYW4gaW5jb21wbGV0ZSBEZWZlcnJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLnByb3RvdHlwZS5maXJlXyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy51bmhhbmRsZWRFcnJvcklkXyAmJiB0aGlzLmhhc0ZpcmVkKCkgJiYgdGhpcy5oYXNFcnJiYWNrXygpKSB7XG4gICAgLy8gSXQgaXMgcG9zc2libGUgdG8gYWRkIGVycmJhY2tzIGFmdGVyIHRoZSBEZWZlcnJlZCBoYXMgZmlyZWQuIElmIGEgbmV3XG4gICAgLy8gZXJyYmFjayBpcyBhZGRlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgRGVmZXJyZWQgZW5jb3VudGVyZWQgYW4gdW5oYW5kbGVkXG4gICAgLy8gZXJyb3IsIGJ1dCBiZWZvcmUgdGhhdCBlcnJvciBpcyByZXRocm93biwgdGhlIGVycm9yIGlzIHVuc2NoZWR1bGVkLlxuICAgIGdvb2cuYXN5bmMuRGVmZXJyZWQudW5zY2hlZHVsZUVycm9yXyh0aGlzLnVuaGFuZGxlZEVycm9ySWRfKTtcbiAgICB0aGlzLnVuaGFuZGxlZEVycm9ySWRfID0gMDtcbiAgfVxuXG4gIGlmICh0aGlzLnBhcmVudF8pIHtcbiAgICB0aGlzLnBhcmVudF8uYnJhbmNoZXNfLS07XG4gICAgZGVsZXRlIHRoaXMucGFyZW50XztcbiAgfVxuXG4gIHZhciByZXMgPSB0aGlzLnJlc3VsdF87XG4gIHZhciB1bmhhbmRsZWRFeGNlcHRpb24gPSBmYWxzZTtcbiAgdmFyIGlzTmV3bHlCbG9ja2VkID0gZmFsc2U7XG5cbiAgd2hpbGUgKHRoaXMuc2VxdWVuY2VfLmxlbmd0aCAmJiAhdGhpcy5ibG9ja2VkXykge1xuICAgIHZhciBzZXF1ZW5jZUVudHJ5ID0gdGhpcy5zZXF1ZW5jZV8uc2hpZnQoKTtcblxuICAgIHZhciBjYWxsYmFjayA9IHNlcXVlbmNlRW50cnlbMF07XG4gICAgdmFyIGVycmJhY2sgPSBzZXF1ZW5jZUVudHJ5WzFdO1xuICAgIHZhciBzY29wZSA9IHNlcXVlbmNlRW50cnlbMl07XG5cbiAgICB2YXIgZiA9IHRoaXMuaGFkRXJyb3JfID8gZXJyYmFjayA6IGNhbGxiYWNrO1xuICAgIGlmIChmKSB7XG4gICAgICAvKiogQHByZXNlcnZlVHJ5ICovXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcmV0ID0gZi5jYWxsKHNjb3BlIHx8IHRoaXMuZGVmYXVsdFNjb3BlXywgcmVzKTtcblxuICAgICAgICAvLyBJZiBubyByZXN1bHQsIHRoZW4gdXNlIHByZXZpb3VzIHJlc3VsdC5cbiAgICAgICAgaWYgKGdvb2cuaXNEZWYocmV0KSkge1xuICAgICAgICAgIC8vIEJ1YmJsZSB1cCB0aGUgZXJyb3IgYXMgbG9uZyBhcyB0aGUgcmV0dXJuIHZhbHVlIGhhc24ndCBjaGFuZ2VkLlxuICAgICAgICAgIHRoaXMuaGFkRXJyb3JfID0gdGhpcy5oYWRFcnJvcl8gJiYgKHJldCA9PSByZXMgfHwgdGhpcy5pc0Vycm9yKHJldCkpO1xuICAgICAgICAgIHRoaXMucmVzdWx0XyA9IHJlcyA9IHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnb29nLlRoZW5hYmxlLmlzSW1wbGVtZW50ZWRCeShyZXMpIHx8XG4gICAgICAgICAgICAodHlwZW9mIGdvb2cuZ2xvYmFsWydQcm9taXNlJ10gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIHJlcyBpbnN0YW5jZW9mIGdvb2cuZ2xvYmFsWydQcm9taXNlJ10pKSB7XG4gICAgICAgICAgaXNOZXdseUJsb2NrZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuYmxvY2tlZF8gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHJlcyA9IGV4O1xuICAgICAgICB0aGlzLmhhZEVycm9yXyA9IHRydWU7XG4gICAgICAgIHRoaXMubWFrZVN0YWNrVHJhY2VMb25nXyhyZXMpO1xuXG4gICAgICAgIGlmICghdGhpcy5oYXNFcnJiYWNrXygpKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXJyb3IgaXMgdGhyb3duIHdpdGggbm8gYWRkaXRpb25hbCBlcnJiYWNrcyBpbiB0aGUgcXVldWUsXG4gICAgICAgICAgLy8gcHJlcGFyZSB0byByZXRocm93IHRoZSBlcnJvci5cbiAgICAgICAgICB1bmhhbmRsZWRFeGNlcHRpb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5yZXN1bHRfID0gcmVzO1xuXG4gIGlmIChpc05ld2x5QmxvY2tlZCkge1xuICAgIHZhciBvbkNhbGxiYWNrID0gZ29vZy5iaW5kKHRoaXMuY29udGludWVfLCB0aGlzLCB0cnVlIC8qIGlzU3VjY2VzcyAqLyk7XG4gICAgdmFyIG9uRXJyYmFjayA9IGdvb2cuYmluZCh0aGlzLmNvbnRpbnVlXywgdGhpcywgZmFsc2UgLyogaXNTdWNjZXNzICovKTtcblxuICAgIGlmIChyZXMgaW5zdGFuY2VvZiBnb29nLmFzeW5jLkRlZmVycmVkKSB7XG4gICAgICByZXMuYWRkQ2FsbGJhY2tzKG9uQ2FsbGJhY2ssIG9uRXJyYmFjayk7XG4gICAgICByZXMuYmxvY2tpbmdfID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLnRoZW4ob25DYWxsYmFjaywgb25FcnJiYWNrKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZ29vZy5hc3luYy5EZWZlcnJlZC5TVFJJQ1RfRVJST1JTICYmIHRoaXMuaXNFcnJvcihyZXMpICYmXG4gICAgICAhKHJlcyBpbnN0YW5jZW9mIGdvb2cuYXN5bmMuRGVmZXJyZWQuQ2FuY2VsZWRFcnJvcikpIHtcbiAgICB0aGlzLmhhZEVycm9yXyA9IHRydWU7XG4gICAgdW5oYW5kbGVkRXhjZXB0aW9uID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh1bmhhbmRsZWRFeGNlcHRpb24pIHtcbiAgICAvLyBSZXRocm93IHRoZSB1bmhhbmRsZWQgZXJyb3IgYWZ0ZXIgYSB0aW1lb3V0LiBFeGVjdXRpb24gd2lsbCBjb250aW51ZSwgYnV0XG4gICAgLy8gdGhlIGVycm9yIHdpbGwgYmUgc2VlbiBieSBnbG9iYWwgaGFuZGxlcnMgYW5kIHRoZSB1c2VyLiBUaGUgdGhyb3cgd2lsbFxuICAgIC8vIGJlIGNhbmNlbGVkIGlmIGFub3RoZXIgZXJyYmFjayBpcyBhcHBlbmRlZCBiZWZvcmUgdGhlIHRpbWVvdXQgZXhlY3V0ZXMuXG4gICAgLy8gVGhlIGVycm9yJ3Mgb3JpZ2luYWwgc3RhY2sgdHJhY2UgaXMgcHJlc2VydmVkIHdoZXJlIGF2YWlsYWJsZS5cbiAgICB0aGlzLnVuaGFuZGxlZEVycm9ySWRfID0gZ29vZy5hc3luYy5EZWZlcnJlZC5zY2hlZHVsZUVycm9yXyhyZXMpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIERlZmVycmVkIHRoYXQgaGFzIGFuIGluaXRpYWwgcmVzdWx0LlxuICpcbiAqIEBwYXJhbSB7Kj19IG9wdF9yZXN1bHQgVGhlIHJlc3VsdC5cbiAqIEByZXR1cm4geyFnb29nLmFzeW5jLkRlZmVycmVkfSBUaGUgbmV3IERlZmVycmVkLlxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLnN1Y2NlZWQgPSBmdW5jdGlvbihvcHRfcmVzdWx0KSB7XG4gIHZhciBkID0gbmV3IGdvb2cuYXN5bmMuRGVmZXJyZWQoKTtcbiAgZC5jYWxsYmFjayhvcHRfcmVzdWx0KTtcbiAgcmV0dXJuIGQ7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIERlZmVycmVkIHRoYXQgZmlyZXMgd2hlbiB0aGUgZ2l2ZW4gcHJvbWlzZSByZXNvbHZlcy5cbiAqIFVzZSBvbmx5IGR1cmluZyBtaWdyYXRpb24gdG8gUHJvbWlzZXMuXG4gKlxuICogQHBhcmFtIHshZ29vZy5Qcm9taXNlPFQ+fSBwcm9taXNlXG4gKiBAcmV0dXJuIHshZ29vZy5hc3luYy5EZWZlcnJlZDxUPn0gVGhlIG5ldyBEZWZlcnJlZC5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQuZnJvbVByb21pc2UgPSBmdW5jdGlvbihwcm9taXNlKSB7XG4gIHZhciBkID0gbmV3IGdvb2cuYXN5bmMuRGVmZXJyZWQoKTtcbiAgZC5jYWxsYmFjaygpO1xuICBkLmFkZENhbGxiYWNrKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9KTtcbiAgcmV0dXJuIGQ7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIERlZmVycmVkIHRoYXQgaGFzIGFuIGluaXRpYWwgZXJyb3IgcmVzdWx0LlxuICpcbiAqIEBwYXJhbSB7Kn0gcmVzIFRoZSBlcnJvciByZXN1bHQuXG4gKiBAcmV0dXJuIHshZ29vZy5hc3luYy5EZWZlcnJlZH0gVGhlIG5ldyBEZWZlcnJlZC5cbiAqL1xuZ29vZy5hc3luYy5EZWZlcnJlZC5mYWlsID0gZnVuY3Rpb24ocmVzKSB7XG4gIHZhciBkID0gbmV3IGdvb2cuYXN5bmMuRGVmZXJyZWQoKTtcbiAgZC5lcnJiYWNrKHJlcyk7XG4gIHJldHVybiBkO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBEZWZlcnJlZCB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gY2FuY2VsZWQuXG4gKlxuICogQHJldHVybiB7IWdvb2cuYXN5bmMuRGVmZXJyZWR9IFRoZSBuZXcgRGVmZXJyZWQuXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQuY2FuY2VsZWQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGQgPSBuZXcgZ29vZy5hc3luYy5EZWZlcnJlZCgpO1xuICBkLmNhbmNlbCgpO1xuICByZXR1cm4gZDtcbn07XG5cblxuLyoqXG4gKiBOb3JtYWxpemVzIHZhbHVlcyB0aGF0IG1heSBvciBtYXkgbm90IGJlIERlZmVycmVkcy5cbiAqXG4gKiBJZiB0aGUgaW5wdXQgdmFsdWUgaXMgYSBEZWZlcnJlZCwgdGhlIERlZmVycmVkIGlzIGJyYW5jaGVkIChzbyB0aGUgb3JpZ2luYWxcbiAqIGV4ZWN1dGlvbiBzZXF1ZW5jZSBpcyBub3QgbW9kaWZpZWQpIGFuZCB0aGUgaW5wdXQgY2FsbGJhY2sgYWRkZWQgdG8gdGhlIG5ld1xuICogYnJhbmNoLiBUaGUgYnJhbmNoIGlzIHJldHVybmVkIHRvIHRoZSBjYWxsZXIuXG4gKlxuICogSWYgdGhlIGlucHV0IHZhbHVlIGlzIG5vdCBhIERlZmVycmVkLCB0aGUgY2FsbGJhY2sgd2lsbCBiZSBleGVjdXRlZFxuICogaW1tZWRpYXRlbHkgYW5kIGFuIGFscmVhZHkgZmlyaW5nIERlZmVycmVkIHdpbGwgYmUgcmV0dXJuZWQgdG8gdGhlIGNhbGxlci5cbiAqXG4gKiBJbiB0aGUgZm9sbG93aW5nIChjb250cml2ZWQpIGV4YW1wbGUsIGlmIDxjb2RlPmlzSW1tZWRpYXRlPC9jb2RlPiBpcyB0cnVlXG4gKiB0aGVuIDMgaXMgYWxlcnRlZCBpbW1lZGlhdGVseSwgb3RoZXJ3aXNlIDYgaXMgYWxlcnRlZCBhZnRlciBhIDItc2Vjb25kIGRlbGF5LlxuICpcbiAqIDxwcmU+XG4gKiB2YXIgdmFsdWU7XG4gKiBpZiAoaXNJbW1lZGlhdGUpIHtcbiAqICAgdmFsdWUgPSAzO1xuICogfSBlbHNlIHtcbiAqICAgdmFsdWUgPSBuZXcgZ29vZy5hc3luYy5EZWZlcnJlZCgpO1xuICogICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB2YWx1ZS5jYWxsYmFjayg2KTsgfSwgMjAwMCk7XG4gKiB9XG4gKlxuICogdmFyIGQgPSBnb29nLmFzeW5jLkRlZmVycmVkLndoZW4odmFsdWUsIGFsZXJ0KTtcbiAqIDwvcHJlPlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgRGVmZXJyZWQgb3Igbm9ybWFsIHZhbHVlIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrLlxuICogQHBhcmFtIHshZnVuY3Rpb24odGhpczpULCA/KTo/fSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gZXhlY3V0ZS5cbiAqIEBwYXJhbSB7VD19IG9wdF9zY29wZSBBbiBvcHRpb25hbCBzY29wZSB0byBjYWxsIHRoZSBjYWxsYmFjayBpbi5cbiAqIEByZXR1cm4geyFnb29nLmFzeW5jLkRlZmVycmVkfSBBIG5ldyBEZWZlcnJlZCB0aGF0IHdpbGwgY2FsbCB0aGUgaW5wdXRcbiAqICAgICBjYWxsYmFjayB3aXRoIHRoZSBpbnB1dCB2YWx1ZS5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQud2hlbiA9IGZ1bmN0aW9uKHZhbHVlLCBjYWxsYmFjaywgb3B0X3Njb3BlKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGdvb2cuYXN5bmMuRGVmZXJyZWQpIHtcbiAgICByZXR1cm4gdmFsdWUuYnJhbmNoKHRydWUpLmFkZENhbGxiYWNrKGNhbGxiYWNrLCBvcHRfc2NvcGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnb29nLmFzeW5jLkRlZmVycmVkLnN1Y2NlZWQodmFsdWUpLmFkZENhbGxiYWNrKGNhbGxiYWNrLCBvcHRfc2NvcGUpO1xuICB9XG59O1xuXG5cblxuLyoqXG4gKiBBbiBlcnJvciBzdWIgY2xhc3MgdGhhdCBpcyB1c2VkIHdoZW4gYSBEZWZlcnJlZCBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZC5cbiAqIEBwYXJhbSB7IWdvb2cuYXN5bmMuRGVmZXJyZWR9IGRlZmVycmVkIFRoZSBEZWZlcnJlZC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtnb29nLmRlYnVnLkVycm9yfVxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLkFscmVhZHlDYWxsZWRFcnJvciA9IGZ1bmN0aW9uKGRlZmVycmVkKSB7XG4gIGdvb2cuZGVidWcuRXJyb3IuY2FsbCh0aGlzKTtcblxuICAvKipcbiAgICogVGhlIERlZmVycmVkIHRoYXQgcmFpc2VkIHRoaXMgZXJyb3IuXG4gICAqIEB0eXBlIHtnb29nLmFzeW5jLkRlZmVycmVkfVxuICAgKi9cbiAgdGhpcy5kZWZlcnJlZCA9IGRlZmVycmVkO1xufTtcbmdvb2cuaW5oZXJpdHMoZ29vZy5hc3luYy5EZWZlcnJlZC5BbHJlYWR5Q2FsbGVkRXJyb3IsIGdvb2cuZGVidWcuRXJyb3IpO1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQuQWxyZWFkeUNhbGxlZEVycm9yLnByb3RvdHlwZS5tZXNzYWdlID1cbiAgICAnRGVmZXJyZWQgaGFzIGFscmVhZHkgZmlyZWQnO1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQuQWxyZWFkeUNhbGxlZEVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0FscmVhZHlDYWxsZWRFcnJvcic7XG5cblxuXG4vKipcbiAqIEFuIGVycm9yIHN1YiBjbGFzcyB0aGF0IGlzIHVzZWQgd2hlbiBhIERlZmVycmVkIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBwYXJhbSB7IWdvb2cuYXN5bmMuRGVmZXJyZWR9IGRlZmVycmVkIFRoZSBEZWZlcnJlZCBvYmplY3QuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtnb29nLmRlYnVnLkVycm9yfVxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLkNhbmNlbGVkRXJyb3IgPSBmdW5jdGlvbihkZWZlcnJlZCkge1xuICBnb29nLmRlYnVnLkVycm9yLmNhbGwodGhpcyk7XG5cbiAgLyoqXG4gICAqIFRoZSBEZWZlcnJlZCB0aGF0IHJhaXNlZCB0aGlzIGVycm9yLlxuICAgKiBAdHlwZSB7Z29vZy5hc3luYy5EZWZlcnJlZH1cbiAgICovXG4gIHRoaXMuZGVmZXJyZWQgPSBkZWZlcnJlZDtcbn07XG5nb29nLmluaGVyaXRzKGdvb2cuYXN5bmMuRGVmZXJyZWQuQ2FuY2VsZWRFcnJvciwgZ29vZy5kZWJ1Zy5FcnJvcik7XG5cblxuLyoqIEBvdmVycmlkZSAqL1xuZ29vZy5hc3luYy5EZWZlcnJlZC5DYW5jZWxlZEVycm9yLnByb3RvdHlwZS5tZXNzYWdlID0gJ0RlZmVycmVkIHdhcyBjYW5jZWxlZCc7XG5cblxuLyoqIEBvdmVycmlkZSAqL1xuZ29vZy5hc3luYy5EZWZlcnJlZC5DYW5jZWxlZEVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0NhbmNlbGVkRXJyb3InO1xuXG5cblxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCBlcnJvcnMgdGhhdCBhcmUgc2NoZWR1bGVkIHRvIGJlIHRocm93biBieSBmYWlsaW5nIGRlZmVycmVkc1xuICogYWZ0ZXIgYSB0aW1lb3V0LlxuICpcbiAqIEBwYXJhbSB7Kn0gZXJyb3IgRXJyb3IgZnJvbSBhIGZhaWxpbmcgZGVmZXJyZWQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBmaW5hbFxuICogQHByaXZhdGVcbiAqIEBzdHJ1Y3RcbiAqL1xuZ29vZy5hc3luYy5EZWZlcnJlZC5FcnJvcl8gPSBmdW5jdGlvbihlcnJvcikge1xuICAvKiogQGNvbnN0IEBwcml2YXRlIHtudW1iZXJ9ICovXG4gIHRoaXMuaWRfID0gZ29vZy5nbG9iYWwuc2V0VGltZW91dChnb29nLmJpbmQodGhpcy50aHJvd0Vycm9yLCB0aGlzKSwgMCk7XG5cbiAgLyoqIEBjb25zdCBAcHJpdmF0ZSB7Kn0gKi9cbiAgdGhpcy5lcnJvcl8gPSBlcnJvcjtcbn07XG5cblxuLyoqXG4gKiBBY3R1YWxseSB0aHJvd3MgdGhlIGVycm9yIGFuZCByZW1vdmVzIGl0IGZyb20gdGhlIGxpc3Qgb2YgcGVuZGluZ1xuICogZGVmZXJyZWQgZXJyb3JzLlxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLkVycm9yXy5wcm90b3R5cGUudGhyb3dFcnJvciA9IGZ1bmN0aW9uKCkge1xuICBnb29nLmFzc2VydHMuYXNzZXJ0KGdvb2cuYXN5bmMuRGVmZXJyZWQuZXJyb3JNYXBfW3RoaXMuaWRfXSxcbiAgICAgICdDYW5ub3QgdGhyb3cgYW4gZXJyb3IgdGhhdCBpcyBub3Qgc2NoZWR1bGVkLicpO1xuICBkZWxldGUgZ29vZy5hc3luYy5EZWZlcnJlZC5lcnJvck1hcF9bdGhpcy5pZF9dO1xuICB0aHJvdyB0aGlzLmVycm9yXztcbn07XG5cblxuLyoqXG4gKiBSZXNldHMgdGhlIGVycm9yIHRocm93IHRpbWVyLlxuICovXG5nb29nLmFzeW5jLkRlZmVycmVkLkVycm9yXy5wcm90b3R5cGUucmVzZXRUaW1lciA9IGZ1bmN0aW9uKCkge1xuICBnb29nLmdsb2JhbC5jbGVhclRpbWVvdXQodGhpcy5pZF8pO1xufTtcblxuXG4vKipcbiAqIE1hcCBvZiB1bmhhbmRsZWQgZXJyb3JzIHNjaGVkdWxlZCB0byBiZSByZXRocm93biBpbiBhIGZ1dHVyZSB0aW1lc3RlcC5cbiAqIEBwcml2YXRlIHshT2JqZWN0PG51bWJlcnxzdHJpbmcsIGdvb2cuYXN5bmMuRGVmZXJyZWQuRXJyb3JfPn1cbiAqL1xuZ29vZy5hc3luYy5EZWZlcnJlZC5lcnJvck1hcF8gPSB7fTtcblxuXG4vKipcbiAqIFNjaGVkdWxlcyBhbiBlcnJvciB0byBiZSB0aHJvd24gYWZ0ZXIgYSBkZWxheS5cbiAqIEBwYXJhbSB7Kn0gZXJyb3IgRXJyb3IgZnJvbSBhIGZhaWxpbmcgZGVmZXJyZWQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IElkIG9mIHRoZSBlcnJvci5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQuc2NoZWR1bGVFcnJvcl8gPSBmdW5jdGlvbihlcnJvcikge1xuICB2YXIgZGVmZXJyZWRFcnJvciA9IG5ldyBnb29nLmFzeW5jLkRlZmVycmVkLkVycm9yXyhlcnJvcik7XG4gIGdvb2cuYXN5bmMuRGVmZXJyZWQuZXJyb3JNYXBfW2RlZmVycmVkRXJyb3IuaWRfXSA9IGRlZmVycmVkRXJyb3I7XG4gIHJldHVybiBkZWZlcnJlZEVycm9yLmlkXztcbn07XG5cblxuLyoqXG4gKiBVbnNjaGVkdWxlcyBhbiBlcnJvciBmcm9tIGJlaW5nIHRocm93bi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpZCBJZCBvZiB0aGUgZGVmZXJyZWQgZXJyb3IgdG8gdW5zY2hlZHVsZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQudW5zY2hlZHVsZUVycm9yXyA9IGZ1bmN0aW9uKGlkKSB7XG4gIHZhciBlcnJvciA9IGdvb2cuYXN5bmMuRGVmZXJyZWQuZXJyb3JNYXBfW2lkXTtcbiAgaWYgKGVycm9yKSB7XG4gICAgZXJyb3IucmVzZXRUaW1lcigpO1xuICAgIGRlbGV0ZSBnb29nLmFzeW5jLkRlZmVycmVkLmVycm9yTWFwX1tpZF07XG4gIH1cbn07XG5cblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgdGhlcmUgYXJlIG5vIHBlbmRpbmcgZGVmZXJyZWQgZXJyb3JzLiBJZiB0aGVyZSBhcmUgYW55XG4gKiBzY2hlZHVsZWQgZXJyb3JzLCBvbmUgd2lsbCBiZSB0aHJvd24gaW1tZWRpYXRlbHkgdG8gbWFrZSB0aGlzIGZ1bmN0aW9uIGZhaWwuXG4gKi9cbmdvb2cuYXN5bmMuRGVmZXJyZWQuYXNzZXJ0Tm9FcnJvcnMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG1hcCA9IGdvb2cuYXN5bmMuRGVmZXJyZWQuZXJyb3JNYXBfO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSB7XG4gICAgdmFyIGVycm9yID0gbWFwW2tleV07XG4gICAgZXJyb3IucmVzZXRUaW1lcigpO1xuICAgIGVycm9yLnRocm93RXJyb3IoKTtcbiAgfVxufTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0aWVzIGZvciBIVE1MIGVsZW1lbnQgdGFnIG5hbWVzLlxuICovXG5nb29nLnByb3ZpZGUoJ2dvb2cuZG9tLnRhZ3MnKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLm9iamVjdCcpO1xuXG5cbi8qKlxuICogVGhlIHZvaWQgZWxlbWVudHMgc3BlY2lmaWVkIGJ5XG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sLW1hcmt1cC9zeW50YXguaHRtbCN2b2lkLWVsZW1lbnRzLlxuICogQGNvbnN0IEBwcml2YXRlIHshT2JqZWN0PHN0cmluZywgYm9vbGVhbj59XG4gKi9cbmdvb2cuZG9tLnRhZ3MuVk9JRF9UQUdTXyA9IGdvb2cub2JqZWN0LmNyZWF0ZVNldChcbiAgICAnYXJlYScsICdiYXNlJywgJ2JyJywgJ2NvbCcsICdjb21tYW5kJywgJ2VtYmVkJywgJ2hyJywgJ2ltZycsICdpbnB1dCcsXG4gICAgJ2tleWdlbicsICdsaW5rJywgJ21ldGEnLCAncGFyYW0nLCAnc291cmNlJywgJ3RyYWNrJywgJ3dicicpO1xuXG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIHRhZyBpcyB2b2lkICh3aXRoIG5vIGNvbnRlbnRzIGFsbG93ZWQgYW5kIG5vIGxlZ2FsIGVuZFxuICogdGFnKSwgZm9yIGV4YW1wbGUgJ2JyJy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lIFRoZSB0YWcgbmFtZSBpbiBsb3dlciBjYXNlLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZ29vZy5kb20udGFncy5pc1ZvaWRUYWcgPSBmdW5jdGlvbih0YWdOYW1lKSB7XG4gIHJldHVybiBnb29nLmRvbS50YWdzLlZPSURfVEFHU19bdGFnTmFtZV0gPT09IHRydWU7XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTMgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5zdHJpbmcuVHlwZWRTdHJpbmcnKTtcblxuXG5cbi8qKlxuICogV3JhcHBlciBmb3Igc3RyaW5ncyB0aGF0IGNvbmZvcm0gdG8gYSBkYXRhIHR5cGUgb3IgbGFuZ3VhZ2UuXG4gKlxuICogSW1wbGVtZW50YXRpb25zIG9mIHRoaXMgaW50ZXJmYWNlIGFyZSB3cmFwcGVycyBmb3Igc3RyaW5ncywgYW5kIHR5cGljYWxseVxuICogYXNzb2NpYXRlIGEgdHlwZSBjb250cmFjdCB3aXRoIHRoZSB3cmFwcGVkIHN0cmluZy4gIENvbmNyZXRlIGltcGxlbWVudGF0aW9uc1xuICogb2YgdGhpcyBpbnRlcmZhY2UgbWF5IGNob29zZSB0byBpbXBsZW1lbnQgYWRkaXRpb25hbCBydW4tdGltZSB0eXBlIGNoZWNraW5nLFxuICogc2VlIGZvciBleGFtcGxlIHtAY29kZSBnb29nLmh0bWwuU2FmZUh0bWx9LiBJZiBhdmFpbGFibGUsIGNsaWVudCBjb2RlIHRoYXRcbiAqIG5lZWRzIHRvIGVuc3VyZSB0eXBlIG1lbWJlcnNoaXAgb2YgYW4gb2JqZWN0IHNob3VsZCB1c2UgdGhlIHR5cGUncyBmdW5jdGlvblxuICogdG8gYXNzZXJ0IHR5cGUgbWVtYmVyc2hpcCwgc3VjaCBhcyB7QGNvZGUgZ29vZy5odG1sLlNhZmVIdG1sLnVud3JhcH0uXG4gKiBAaW50ZXJmYWNlXG4gKi9cbmdvb2cuc3RyaW5nLlR5cGVkU3RyaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuXG4vKipcbiAqIEludGVyZmFjZSBtYXJrZXIgb2YgdGhlIFR5cGVkU3RyaW5nIGludGVyZmFjZS5cbiAqXG4gKiBUaGlzIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSBhdCBydW50aW1lIHdoZXRoZXIgb3Igbm90IGFuIG9iamVjdFxuICogaW1wbGVtZW50cyB0aGlzIGludGVyZmFjZS4gIEFsbCBpbXBsZW1lbnRhdGlvbnMgb2YgdGhpcyBpbnRlcmZhY2Ugc2V0IHRoaXNcbiAqIHByb3BlcnR5IHRvIHtAY29kZSB0cnVlfS5cbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnN0cmluZy5UeXBlZFN0cmluZy5wcm90b3R5cGUuaW1wbGVtZW50c0dvb2dTdHJpbmdUeXBlZFN0cmluZztcblxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGlzIHdyYXBwZWQgc3RyaW5nJ3MgdmFsdWUuXG4gKiBAcmV0dXJuIHshc3RyaW5nfSBUaGUgd3JhcHBlZCBzdHJpbmcncyB2YWx1ZS5cbiAqL1xuZ29vZy5zdHJpbmcuVHlwZWRTdHJpbmcucHJvdG90eXBlLmdldFR5cGVkU3RyaW5nVmFsdWU7XG4iLCIvLyBDb3B5cmlnaHQgMjAxMyBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuZ29vZy5wcm92aWRlKCdnb29nLnN0cmluZy5Db25zdCcpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZy5UeXBlZFN0cmluZycpO1xuXG5cblxuLyoqXG4gKiBXcmFwcGVyIGZvciBjb21waWxlLXRpbWUtY29uc3RhbnQgc3RyaW5ncy5cbiAqXG4gKiBDb25zdCBpcyBhIHdyYXBwZXIgZm9yIHN0cmluZ3MgdGhhdCBjYW4gb25seSBiZSBjcmVhdGVkIGZyb20gcHJvZ3JhbVxuICogY29uc3RhbnRzIChpLmUuLCBzdHJpbmcgbGl0ZXJhbHMpLiAgVGhpcyBwcm9wZXJ0eSByZWxpZXMgb24gYSBjdXN0b20gQ2xvc3VyZVxuICogY29tcGlsZXIgY2hlY2sgdGhhdCB7QGNvZGUgZ29vZy5zdHJpbmcuQ29uc3QuZnJvbX0gaXMgb25seSBpbnZva2VkIG9uXG4gKiBjb21waWxlLXRpbWUtY29uc3RhbnQgZXhwcmVzc2lvbnMuXG4gKlxuICogQ29uc3QgaXMgdXNlZnVsIGluIEFQSXMgd2hvc2UgY29ycmVjdCBhbmQgc2VjdXJlIHVzZSByZXF1aXJlcyB0aGF0IGNlcnRhaW5cbiAqIGFyZ3VtZW50cyBhcmUgbm90IGF0dGFja2VyIGNvbnRyb2xsZWQ6IENvbXBpbGUtdGltZSBjb25zdGFudHMgYXJlIGluaGVyZW50bHlcbiAqIHVuZGVyIHRoZSBjb250cm9sIG9mIHRoZSBhcHBsaWNhdGlvbiBhbmQgbm90IHVuZGVyIGNvbnRyb2wgb2YgZXh0ZXJuYWxcbiAqIGF0dGFja2VycywgYW5kIGhlbmNlIGFyZSBzYWZlIHRvIHVzZSBpbiBzdWNoIGNvbnRleHRzLlxuICpcbiAqIEluc3RhbmNlcyBvZiB0aGlzIHR5cGUgbXVzdCBiZSBjcmVhdGVkIHZpYSBpdHMgZmFjdG9yeSBtZXRob2RcbiAqIHtAY29kZSBnb29nLnN0cmluZy5Db25zdC5mcm9tfSBhbmQgbm90IGJ5IGludm9raW5nIGl0cyBjb25zdHJ1Y3Rvci4gIFRoZVxuICogY29uc3RydWN0b3IgaW50ZW50aW9uYWxseSB0YWtlcyBubyBwYXJhbWV0ZXJzIGFuZCB0aGUgdHlwZSBpcyBpbW11dGFibGU7XG4gKiBoZW5jZSBvbmx5IGEgZGVmYXVsdCBpbnN0YW5jZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBlbXB0eSBzdHJpbmcgY2FuIGJlXG4gKiBvYnRhaW5lZCB2aWEgY29uc3RydWN0b3IgaW52b2NhdGlvbi5cbiAqXG4gKiBAc2VlIGdvb2cuc3RyaW5nLkNvbnN0I2Zyb21cbiAqIEBjb25zdHJ1Y3RvclxuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKiBAaW1wbGVtZW50cyB7Z29vZy5zdHJpbmcuVHlwZWRTdHJpbmd9XG4gKi9cbmdvb2cuc3RyaW5nLkNvbnN0ID0gZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiBUaGUgd3JhcHBlZCB2YWx1ZSBvZiB0aGlzIENvbnN0IG9iamVjdC4gIFRoZSBmaWVsZCBoYXMgYSBwdXJwb3NlbHkgdWdseVxuICAgKiBuYW1lIHRvIG1ha2UgKG5vbi1jb21waWxlZCkgY29kZSB0aGF0IGF0dGVtcHRzIHRvIGRpcmVjdGx5IGFjY2VzcyB0aGlzXG4gICAqIGZpZWxkIHN0YW5kIG91dC5cbiAgICogQHByaXZhdGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMuc3RyaW5nQ29uc3RWYWx1ZVdpdGhTZWN1cml0eUNvbnRyYWN0X19nb29nU3RyaW5nU2VjdXJpdHlQcml2YXRlXyA9ICcnO1xuXG4gIC8qKlxuICAgKiBBIHR5cGUgbWFya2VyIHVzZWQgdG8gaW1wbGVtZW50IGFkZGl0aW9uYWwgcnVuLXRpbWUgdHlwZSBjaGVja2luZy5cbiAgICogQHNlZSBnb29nLnN0cmluZy5Db25zdCN1bndyYXBcbiAgICogQGNvbnN0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLlNUUklOR19DT05TVF9UWVBFX01BUktFUl9fR09PR19TVFJJTkdfU0VDVVJJVFlfUFJJVkFURV8gPVxuICAgICAgZ29vZy5zdHJpbmcuQ29uc3QuVFlQRV9NQVJLRVJfO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICogQGNvbnN0XG4gKi9cbmdvb2cuc3RyaW5nLkNvbnN0LnByb3RvdHlwZS5pbXBsZW1lbnRzR29vZ1N0cmluZ1R5cGVkU3RyaW5nID0gdHJ1ZTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhpcyBDb25zdCdzIHZhbHVlIGEgc3RyaW5nLlxuICpcbiAqIElNUE9SVEFOVDogSW4gY29kZSB3aGVyZSBpdCBpcyBzZWN1cml0eS1yZWxldmFudCB0aGF0IGFuIG9iamVjdCdzIHR5cGUgaXNcbiAqIGluZGVlZCB7QGNvZGUgZ29vZy5zdHJpbmcuQ29uc3R9LCB1c2Uge0Bjb2RlIGdvb2cuc3RyaW5nLkNvbnN0LnVud3JhcH1cbiAqIGluc3RlYWQgb2YgdGhpcyBtZXRob2QuXG4gKlxuICogQHNlZSBnb29nLnN0cmluZy5Db25zdCN1bndyYXBcbiAqIEBvdmVycmlkZVxuICovXG5nb29nLnN0cmluZy5Db25zdC5wcm90b3R5cGUuZ2V0VHlwZWRTdHJpbmdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zdHJpbmdDb25zdFZhbHVlV2l0aFNlY3VyaXR5Q29udHJhY3RfX2dvb2dTdHJpbmdTZWN1cml0eVByaXZhdGVfO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBkZWJ1Zy1zdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB2YWx1ZS5cbiAqXG4gKiBUbyBvYnRhaW4gdGhlIGFjdHVhbCBzdHJpbmcgdmFsdWUgd3JhcHBlZCBpbnNpZGUgYW4gb2JqZWN0IG9mIHRoaXMgdHlwZSxcbiAqIHVzZSB7QGNvZGUgZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwfS5cbiAqXG4gKiBAc2VlIGdvb2cuc3RyaW5nLkNvbnN0I3Vud3JhcFxuICogQG92ZXJyaWRlXG4gKi9cbmdvb2cuc3RyaW5nLkNvbnN0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJ0NvbnN0eycgK1xuICAgICAgICAgdGhpcy5zdHJpbmdDb25zdFZhbHVlV2l0aFNlY3VyaXR5Q29udHJhY3RfX2dvb2dTdHJpbmdTZWN1cml0eVByaXZhdGVfICtcbiAgICAgICAgICd9Jztcbn07XG5cblxuLyoqXG4gKiBQZXJmb3JtcyBhIHJ1bnRpbWUgY2hlY2sgdGhhdCB0aGUgcHJvdmlkZWQgb2JqZWN0IGlzIGluZGVlZCBhbiBpbnN0YW5jZVxuICogb2Yge0Bjb2RlIGdvb2cuc3RyaW5nLkNvbnN0fSwgYW5kIHJldHVybnMgaXRzIHZhbHVlLlxuICogQHBhcmFtIHshZ29vZy5zdHJpbmcuQ29uc3R9IHN0cmluZ0NvbnN0IFRoZSBvYmplY3QgdG8gZXh0cmFjdCBmcm9tLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgQ29uc3Qgb2JqZWN0J3MgY29udGFpbmVkIHN0cmluZywgdW5sZXNzIHRoZSBydW4tdGltZVxuICogICAgIHR5cGUgY2hlY2sgZmFpbHMuIEluIHRoYXQgY2FzZSwge0Bjb2RlIHVud3JhcH0gcmV0dXJucyBhbiBpbm5vY3VvdXNcbiAqICAgICBzdHJpbmcsIG9yLCBpZiBhc3NlcnRpb25zIGFyZSBlbmFibGVkLCB0aHJvd3NcbiAqICAgICB7QGNvZGUgZ29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yfS5cbiAqL1xuZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwID0gZnVuY3Rpb24oc3RyaW5nQ29uc3QpIHtcbiAgLy8gUGVyZm9ybSBhZGRpdGlvbmFsIHJ1bi10aW1lIHR5cGUtY2hlY2tpbmcgdG8gZW5zdXJlIHRoYXQgc3RyaW5nQ29uc3QgaXNcbiAgLy8gaW5kZWVkIGFuIGluc3RhbmNlIG9mIHRoZSBleHBlY3RlZCB0eXBlLiAgVGhpcyBwcm92aWRlcyBzb21lIGFkZGl0aW9uYWxcbiAgLy8gcHJvdGVjdGlvbiBhZ2FpbnN0IHNlY3VyaXR5IGJ1Z3MgZHVlIHRvIGFwcGxpY2F0aW9uIGNvZGUgdGhhdCBkaXNhYmxlcyB0eXBlXG4gIC8vIGNoZWNrcy5cbiAgaWYgKHN0cmluZ0NvbnN0IGluc3RhbmNlb2YgZ29vZy5zdHJpbmcuQ29uc3QgJiZcbiAgICAgIHN0cmluZ0NvbnN0LmNvbnN0cnVjdG9yID09PSBnb29nLnN0cmluZy5Db25zdCAmJlxuICAgICAgc3RyaW5nQ29uc3QuU1RSSU5HX0NPTlNUX1RZUEVfTUFSS0VSX19HT09HX1NUUklOR19TRUNVUklUWV9QUklWQVRFXyA9PT1cbiAgICAgICAgICBnb29nLnN0cmluZy5Db25zdC5UWVBFX01BUktFUl8pIHtcbiAgICByZXR1cm4gc3RyaW5nQ29uc3QuXG4gICAgICAgIHN0cmluZ0NvbnN0VmFsdWVXaXRoU2VjdXJpdHlDb250cmFjdF9fZ29vZ1N0cmluZ1NlY3VyaXR5UHJpdmF0ZV87XG4gIH0gZWxzZSB7XG4gICAgZ29vZy5hc3NlcnRzLmZhaWwoJ2V4cGVjdGVkIG9iamVjdCBvZiB0eXBlIENvbnN0LCBnb3QgXFwnJyArXG4gICAgICAgICAgICAgICAgICAgICAgc3RyaW5nQ29uc3QgKyAnXFwnJyk7XG4gICAgcmV0dXJuICd0eXBlX2Vycm9yOkNvbnN0JztcbiAgfVxufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBDb25zdCBvYmplY3QgZnJvbSBhIGNvbXBpbGUtdGltZSBjb25zdGFudCBzdHJpbmcuXG4gKlxuICogSXQgaXMgaWxsZWdhbCB0byBpbnZva2UgdGhpcyBmdW5jdGlvbiBvbiBhbiBleHByZXNzaW9uIHdob3NlXG4gKiBjb21waWxlLXRpbWUtY29udGFudCB2YWx1ZSBjYW5ub3QgYmUgZGV0ZXJtaW5lZCBieSB0aGUgQ2xvc3VyZSBjb21waWxlci5cbiAqXG4gKiBDb3JyZWN0IGludm9jYXRpb25zIGluY2x1ZGUsXG4gKiA8cHJlPlxuICogICB2YXIgcyA9IGdvb2cuc3RyaW5nLkNvbnN0LmZyb20oJ2hlbGxvJyk7XG4gKiAgIHZhciB0ID0gZ29vZy5zdHJpbmcuQ29uc3QuZnJvbSgnaGVsbG8nICsgJ3dvcmxkJyk7XG4gKiA8L3ByZT5cbiAqXG4gKiBJbiBjb250cmFzdCwgdGhlIGZvbGxvd2luZyBhcmUgaWxsZWdhbDpcbiAqIDxwcmU+XG4gKiAgIHZhciBzID0gZ29vZy5zdHJpbmcuQ29uc3QuZnJvbShnZXRIZWxsbygpKTtcbiAqICAgdmFyIHQgPSBnb29nLnN0cmluZy5Db25zdC5mcm9tKCdoZWxsbycgKyB3b3JsZCk7XG4gKiA8L3ByZT5cbiAqXG4gKiBUT0RPKHh0b2YpOiBDb21waWxlLXRpbWUgY2hlY2tzIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICogd2l0aCBjb21waWxlLXRpbWUgY29uc3RhbnQgZXhwcmVzc2lvbnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHMgQSBjb25zdGFudCBzdHJpbmcgZnJvbSB3aGljaCB0byBjcmVhdGUgYSBDb25zdC5cbiAqIEByZXR1cm4geyFnb29nLnN0cmluZy5Db25zdH0gQSBDb25zdCBvYmplY3QgaW5pdGlhbGl6ZWQgdG8gc3RyaW5nQ29uc3QuXG4gKi9cbmdvb2cuc3RyaW5nLkNvbnN0LmZyb20gPSBmdW5jdGlvbihzKSB7XG4gIHJldHVybiBnb29nLnN0cmluZy5Db25zdC5jcmVhdGVfX2dvb2dTdHJpbmdTZWN1cml0eVByaXZhdGVfKHMpO1xufTtcblxuXG4vKipcbiAqIFR5cGUgbWFya2VyIGZvciB0aGUgQ29uc3QgdHlwZSwgdXNlZCB0byBpbXBsZW1lbnQgYWRkaXRpb25hbCBydW4tdGltZVxuICogdHlwZSBjaGVja2luZy5cbiAqIEBjb25zdCB7IU9iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3RyaW5nLkNvbnN0LlRZUEVfTUFSS0VSXyA9IHt9O1xuXG5cbi8qKlxuICogVXRpbGl0eSBtZXRob2QgdG8gY3JlYXRlIENvbnN0IGluc3RhbmNlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzIFRoZSBzdHJpbmcgdG8gaW5pdGlhbGl6ZSB0aGUgQ29uc3Qgb2JqZWN0IHdpdGguXG4gKiBAcmV0dXJuIHshZ29vZy5zdHJpbmcuQ29uc3R9IFRoZSBpbml0aWFsaXplZCBDb25zdCBvYmplY3QuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0cmluZy5Db25zdC5jcmVhdGVfX2dvb2dTdHJpbmdTZWN1cml0eVByaXZhdGVfID0gZnVuY3Rpb24ocykge1xuICB2YXIgc3RyaW5nQ29uc3QgPSBuZXcgZ29vZy5zdHJpbmcuQ29uc3QoKTtcbiAgc3RyaW5nQ29uc3Quc3RyaW5nQ29uc3RWYWx1ZVdpdGhTZWN1cml0eUNvbnRyYWN0X19nb29nU3RyaW5nU2VjdXJpdHlQcml2YXRlXyA9XG4gICAgICBzO1xuICByZXR1cm4gc3RyaW5nQ29uc3Q7XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBUaGUgU2FmZVN0eWxlIHR5cGUgYW5kIGl0cyBidWlsZGVycy5cbiAqXG4gKiBUT0RPKHh0b2YpOiBMaW5rIHRvIGRvY3VtZW50IHN0YXRpbmcgdHlwZSBjb250cmFjdC5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuaHRtbC5TYWZlU3R5bGUnKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLmFycmF5Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZy5Db25zdCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZy5UeXBlZFN0cmluZycpO1xuXG5cblxuLyoqXG4gKiBBIHN0cmluZy1saWtlIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgc2VxdWVuY2Ugb2YgQ1NTIGRlY2xhcmF0aW9uc1xuICogKHtAY29kZSBwcm9wZXJ0eU5hbWUxOiBwcm9wZXJ0eXZhbHVlMTsgcHJvcGVydHlOYW1lMjogcHJvcGVydHlWYWx1ZTI7IC4uLn0pXG4gKiBhbmQgdGhhdCBjYXJyaWVzIHRoZSBzZWN1cml0eSB0eXBlIGNvbnRyYWN0IHRoYXQgaXRzIHZhbHVlLCBhcyBhIHN0cmluZyxcbiAqIHdpbGwgbm90IGNhdXNlIHVudHJ1c3RlZCBzY3JpcHQgZXhlY3V0aW9uIChYU1MpIHdoZW4gZXZhbHVhdGVkIGFzIENTUyBpbiBhXG4gKiBicm93c2VyLlxuICpcbiAqIEluc3RhbmNlcyBvZiB0aGlzIHR5cGUgbXVzdCBiZSBjcmVhdGVkIHZpYSB0aGUgZmFjdG9yeSBtZXRob2RzXG4gKiAoe0Bjb2RlIGdvb2cuaHRtbC5TYWZlU3R5bGUuY3JlYXRlfSBvclxuICoge0Bjb2RlIGdvb2cuaHRtbC5TYWZlU3R5bGUuZnJvbUNvbnN0YW50fSkgYW5kIG5vdCBieSBpbnZva2luZyBpdHNcbiAqIGNvbnN0cnVjdG9yLiBUaGUgY29uc3RydWN0b3IgaW50ZW50aW9uYWxseSB0YWtlcyBubyBwYXJhbWV0ZXJzIGFuZCB0aGUgdHlwZVxuICogaXMgaW1tdXRhYmxlOyBoZW5jZSBvbmx5IGEgZGVmYXVsdCBpbnN0YW5jZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBlbXB0eSBzdHJpbmdcbiAqIGNhbiBiZSBvYnRhaW5lZCB2aWEgY29uc3RydWN0b3IgaW52b2NhdGlvbi5cbiAqXG4gKiBBIFNhZmVTdHlsZSdzIHN0cmluZyByZXByZXNlbnRhdGlvbiAoe0BsaW5rICNnZXRUeXBlZFN0cmluZ1ZhbHVlKCl9KSBjYW5cbiAqIHNhZmVseTpcbiAqIDx1bD5cbiAqICAgPGxpPkJlIGludGVycG9sYXRlZCBhcyB0aGUgZW50aXJlIGNvbnRlbnQgb2YgYSAqcXVvdGVkKiBIVE1MIHN0eWxlXG4gKiAgICAgICBhdHRyaWJ1dGUsIG9yIGJlZm9yZSBhbHJlYWR5IGV4aXN0aW5nIHByb3BlcnRpZXMuIFRoZSBTYWZlU3R5bGUgc3RyaW5nXG4gKiAgICAgICAqbXVzdCBiZSBIVE1MLWF0dHJpYnV0ZS1lc2NhcGVkKiAod2hlcmUgXCIgYW5kICcgYXJlIGVzY2FwZWQpIGJlZm9yZVxuICogICAgICAgaW50ZXJwb2xhdGlvbi5cbiAqICAgPGxpPkJlIGludGVycG9sYXRlZCBhcyB0aGUgZW50aXJlIGNvbnRlbnQgb2YgYSB7fS13cmFwcGVkIGJsb2NrIHdpdGhpbiBhXG4gKiAgICAgICBzdHlsZXNoZWV0LCBvciBiZWZvcmUgYWxyZWFkeSBleGlzdGluZyBwcm9wZXJ0aWVzLiBUaGUgU2FmZVN0eWxlIHN0cmluZ1xuICogICAgICAgc2hvdWxkIG5vdCBiZSBlc2NhcGVkIGJlZm9yZSBpbnRlcnBvbGF0aW9uLiBTYWZlU3R5bGUncyBjb250cmFjdCBhbHNvXG4gKiAgICAgICBndWFyYW50ZWVzIHRoYXQgdGhlIHN0cmluZyB3aWxsIG5vdCBiZSBhYmxlIHRvIGludHJvZHVjZSBuZXcgcHJvcGVydGllc1xuICogICAgICAgb3IgZWxpZGUgZXhpc3Rpbmcgb25lcy5cbiAqICAgPGxpPkJlIGFzc2lnbmVkIHRvIHRoZSBzdHlsZSBwcm9wZXJ0eSBvZiBhIERPTSBub2RlLiBUaGUgU2FmZVN0eWxlIHN0cmluZ1xuICogICAgICAgc2hvdWxkIG5vdCBiZSBlc2NhcGVkIGJlZm9yZSBiZWluZyBhc3NpZ25lZCB0byB0aGUgcHJvcGVydHkuXG4gKiA8L3VsPlxuICpcbiAqIEEgU2FmZVN0eWxlIG1heSBuZXZlciBjb250YWluIGxpdGVyYWwgYW5nbGUgYnJhY2tldHMuIE90aGVyd2lzZSwgaXQgY291bGRcbiAqIGJlIHVuc2FmZSB0byBwbGFjZSBhIFNhZmVTdHlsZSBpbnRvIGEgJmx0O3N0eWxlJmd0OyB0YWcgKHdoZXJlIGl0IGNhbid0XG4gKiBiZSBIVE1MIGVzY2FwZWQpLiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNhZmVTdHlsZSBjb250YWluaW5nXG4gKiBcIntAY29kZSBmb250OiAnZm9vICZsdDtzdHlsZS8mZ3Q7Jmx0O3NjcmlwdCZndDtldmlsJmx0Oy9zY3JpcHQmZ3Q7J31cIiB3ZXJlXG4gKiBpbnRlcnBvbGF0ZWQgd2l0aGluIGEgJmx0O3N0eWxlJmd0OyB0YWcsIHRoaXMgd291bGQgdGhlbiBicmVhayBvdXQgb2YgdGhlXG4gKiBzdHlsZSBjb250ZXh0IGludG8gSFRNTC5cbiAqXG4gKiBBIFNhZmVTdHlsZSBtYXkgY29udGFpbiBsaXRlcmFsIHNpbmdsZSBvciBkb3VibGUgcXVvdGVzLCBhbmQgYXMgc3VjaCB0aGVcbiAqIGVudGlyZSBzdHlsZSBzdHJpbmcgbXVzdCBiZSBlc2NhcGVkIHdoZW4gdXNlZCBpbiBhIHN0eWxlIGF0dHJpYnV0ZSAoaWZcbiAqIHRoaXMgd2VyZSBub3QgdGhlIGNhc2UsIHRoZSBzdHJpbmcgY291bGQgY29udGFpbiBhIG1hdGNoaW5nIHF1b3RlIHRoYXRcbiAqIHdvdWxkIGVzY2FwZSBmcm9tIHRoZSBzdHlsZSBhdHRyaWJ1dGUpLlxuICpcbiAqIFZhbHVlcyBvZiB0aGlzIHR5cGUgbXVzdCBiZSBjb21wb3NhYmxlLCBpLmUuIGZvciBhbnkgdHdvIHZhbHVlc1xuICoge0Bjb2RlIHN0eWxlMX0gYW5kIHtAY29kZSBzdHlsZTJ9IG9mIHRoaXMgdHlwZSxcbiAqIHtAY29kZSBnb29nLmh0bWwuU2FmZVN0eWxlLnVud3JhcChzdHlsZTEpICtcbiAqIGdvb2cuaHRtbC5TYWZlU3R5bGUudW53cmFwKHN0eWxlMil9IG11c3QgaXRzZWxmIGJlIGEgdmFsdWUgdGhhdCBzYXRpc2ZpZXNcbiAqIHRoZSBTYWZlU3R5bGUgdHlwZSBjb25zdHJhaW50LiBUaGlzIHJlcXVpcmVtZW50IGltcGxpZXMgdGhhdCBmb3IgYW55IHZhbHVlXG4gKiB7QGNvZGUgc3R5bGV9IG9mIHRoaXMgdHlwZSwge0Bjb2RlIGdvb2cuaHRtbC5TYWZlU3R5bGUudW53cmFwKHN0eWxlKX0gbXVzdFxuICogbm90IGVuZCBpbiBhIFwicHJvcGVydHkgdmFsdWVcIiBvciBcInByb3BlcnR5IG5hbWVcIiBjb250ZXh0LiBGb3IgZXhhbXBsZSxcbiAqIGEgdmFsdWUgb2Yge0Bjb2RlIGJhY2tncm91bmQ6dXJsKFwifSBvciB7QGNvZGUgZm9udC19IHdvdWxkIG5vdCBzYXRpc2Z5IHRoZVxuICogU2FmZVN0eWxlIGNvbnRyYWN0LiBUaGlzIGlzIGJlY2F1c2UgY29uY2F0ZW5hdGluZyBzdWNoIHN0cmluZ3Mgd2l0aCBhXG4gKiBzZWNvbmQgdmFsdWUgdGhhdCBpdHNlbGYgZG9lcyBub3QgY29udGFpbiB1bnNhZmUgQ1NTIGNhbiByZXN1bHQgaW4gYW5cbiAqIG92ZXJhbGwgc3RyaW5nIHRoYXQgZG9lcy4gRm9yIGV4YW1wbGUsIGlmIHtAY29kZSBqYXZhc2NyaXB0OmV2aWwoKSlcIn0gaXNcbiAqIGFwcGVuZGVkIHRvIHtAY29kZSBiYWNrZ3JvdW5kOnVybChcIn0sIHRoZSByZXN1bHRpbmcgc3RyaW5nIG1heSByZXN1bHQgaW5cbiAqIHRoZSBleGVjdXRpb24gb2YgYSBtYWxpY2lvdXMgc2NyaXB0LlxuICpcbiAqIFRPRE8odXNlcik6IENvbnNpZGVyIHdoZXRoZXIgd2Ugc2hvdWxkIGltcGxlbWVudCBVVEYtOCBpbnRlcmNoYW5nZVxuICogdmFsaWRpdHkgY2hlY2tzIGFuZCBibGFja2xpc3Rpbmcgb2YgbmV3bGluZXMgKGluY2x1ZGluZyBVbmljb2RlIG9uZXMpIGFuZFxuICogb3RoZXIgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzIChcXHQsIFxcZikuIERvY3VtZW50IGhlcmUgaWYgc28gYW5kIGFsc28gdXBkYXRlXG4gKiBTYWZlU3R5bGUuZnJvbUNvbnN0YW50KCkuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHZhbHVlcyBjb21wbHkgd2l0aCB0aGlzIHR5cGUncyBjb250cmFjdDpcbiAqIDx1bD5cbiAqICAgPGxpPjxwcmU+d2lkdGg6IDFlbTs8L3ByZT5cbiAqICAgPGxpPjxwcmU+aGVpZ2h0OjFlbTs8L3ByZT5cbiAqICAgPGxpPjxwcmU+d2lkdGg6IDFlbTtoZWlnaHQ6IDFlbTs8L3ByZT5cbiAqICAgPGxpPjxwcmU+YmFja2dyb3VuZDp1cmwoJ2h0dHA6Ly91cmwnKTs8L3ByZT5cbiAqIDwvdWw+XG4gKiBJbiBhZGRpdGlvbiwgdGhlIGVtcHR5IHN0cmluZyBpcyBzYWZlIGZvciB1c2UgaW4gYSBDU1MgYXR0cmlidXRlLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSB2YWx1ZXMgZG8gTk9UIGNvbXBseSB3aXRoIHRoaXMgdHlwZSdzIGNvbnRyYWN0OlxuICogPHVsPlxuICogICA8bGk+PHByZT5iYWNrZ3JvdW5kOiByZWQ8L3ByZT4gKG1pc3NpbmcgYSB0cmFpbGluZyBzZW1pLWNvbG9uKVxuICogICA8bGk+PHByZT5iYWNrZ3JvdW5kOjwvcHJlPiAobWlzc2luZyBhIHZhbHVlIGFuZCBhIHRyYWlsaW5nIHNlbWktY29sb24pXG4gKiAgIDxsaT48cHJlPjFlbTwvcHJlPiAobWlzc2luZyBhbiBhdHRyaWJ1dGUgbmFtZSwgd2hpY2ggcHJvdmlkZXMgY29udGV4dCBmb3JcbiAqICAgICAgIHRoZSB2YWx1ZSlcbiAqIDwvdWw+XG4gKlxuICogQHNlZSBnb29nLmh0bWwuU2FmZVN0eWxlI2NyZWF0ZVxuICogQHNlZSBnb29nLmh0bWwuU2FmZVN0eWxlI2Zyb21Db25zdGFudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXN5bnRheC9cbiAqIEBjb25zdHJ1Y3RvclxuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKiBAaW1wbGVtZW50cyB7Z29vZy5zdHJpbmcuVHlwZWRTdHJpbmd9XG4gKi9cbmdvb2cuaHRtbC5TYWZlU3R5bGUgPSBmdW5jdGlvbigpIHtcbiAgLyoqXG4gICAqIFRoZSBjb250YWluZWQgdmFsdWUgb2YgdGhpcyBTYWZlU3R5bGUuICBUaGUgZmllbGQgaGFzIGEgcHVycG9zZWx5XG4gICAqIHVnbHkgbmFtZSB0byBtYWtlIChub24tY29tcGlsZWQpIGNvZGUgdGhhdCBhdHRlbXB0cyB0byBkaXJlY3RseSBhY2Nlc3MgdGhpc1xuICAgKiBmaWVsZCBzdGFuZCBvdXQuXG4gICAqIEBwcml2YXRlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTdHlsZVdyYXBwZWRWYWx1ZV8gPSAnJztcblxuICAvKipcbiAgICogQSB0eXBlIG1hcmtlciB1c2VkIHRvIGltcGxlbWVudCBhZGRpdGlvbmFsIHJ1bi10aW1lIHR5cGUgY2hlY2tpbmcuXG4gICAqIEBzZWUgZ29vZy5odG1sLlNhZmVTdHlsZSN1bndyYXBcbiAgICogQGNvbnN0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLlNBRkVfU1RZTEVfVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfID1cbiAgICAgIGdvb2cuaHRtbC5TYWZlU3R5bGUuVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICogQGNvbnN0XG4gKi9cbmdvb2cuaHRtbC5TYWZlU3R5bGUucHJvdG90eXBlLmltcGxlbWVudHNHb29nU3RyaW5nVHlwZWRTdHJpbmcgPSB0cnVlO1xuXG5cbi8qKlxuICogVHlwZSBtYXJrZXIgZm9yIHRoZSBTYWZlU3R5bGUgdHlwZSwgdXNlZCB0byBpbXBsZW1lbnQgYWRkaXRpb25hbFxuICogcnVuLXRpbWUgdHlwZSBjaGVja2luZy5cbiAqIEBjb25zdCB7IU9iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaHRtbC5TYWZlU3R5bGUuVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfID0ge307XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgU2FmZVN0eWxlIG9iamVjdCBmcm9tIGEgY29tcGlsZS10aW1lIGNvbnN0YW50IHN0cmluZy5cbiAqXG4gKiB7QGNvZGUgc3R5bGV9IHNob3VsZCBiZSBpbiB0aGUgZm9ybWF0XG4gKiB7QGNvZGUgbmFtZTogdmFsdWU7IFtuYW1lOiB2YWx1ZTsgLi4uXX0gYW5kIG11c3Qgbm90IGhhdmUgYW55IDwgb3IgPlxuICogY2hhcmFjdGVycyBpbiBpdC4gVGhpcyBpcyBzbyB0aGF0IFNhZmVTdHlsZSdzIGNvbnRyYWN0IGlzIHByZXNlcnZlZCxcbiAqIGFsbG93aW5nIHRoZSBTYWZlU3R5bGUgdG8gY29ycmVjdGx5IGJlIGludGVycHJldGVkIGFzIGEgc2VxdWVuY2Ugb2YgQ1NTXG4gKiBkZWNsYXJhdGlvbnMgYW5kIHdpdGhvdXQgYWZmZWN0aW5nIHRoZSBzeW50YWN0aWMgc3RydWN0dXJlIG9mIGFueVxuICogc3Vycm91bmRpbmcgQ1NTIGFuZCBIVE1MLlxuICpcbiAqIFRoaXMgbWV0aG9kIHBlcmZvcm1zIGJhc2ljIHNhbml0eSBjaGVja3Mgb24gdGhlIGZvcm1hdCBvZiB7QGNvZGUgc3R5bGV9XG4gKiBidXQgZG9lcyBub3QgY29uc3RyYWluIHRoZSBmb3JtYXQgb2Yge0Bjb2RlIG5hbWV9IGFuZCB7QGNvZGUgdmFsdWV9LCBleGNlcHRcbiAqIGZvciBkaXNhbGxvd2luZyB0YWcgY2hhcmFjdGVycy5cbiAqXG4gKiBAcGFyYW0geyFnb29nLnN0cmluZy5Db25zdH0gc3R5bGUgQSBjb21waWxlLXRpbWUtY29uc3RhbnQgc3RyaW5nIGZyb20gd2hpY2hcbiAqICAgICB0byBjcmVhdGUgYSBTYWZlU3R5bGUuXG4gKiBAcmV0dXJuIHshZ29vZy5odG1sLlNhZmVTdHlsZX0gQSBTYWZlU3R5bGUgb2JqZWN0IGluaXRpYWxpemVkIHRvXG4gKiAgICAge0Bjb2RlIHN0eWxlfS5cbiAqL1xuZ29vZy5odG1sLlNhZmVTdHlsZS5mcm9tQ29uc3RhbnQgPSBmdW5jdGlvbihzdHlsZSkge1xuICB2YXIgc3R5bGVTdHJpbmcgPSBnb29nLnN0cmluZy5Db25zdC51bndyYXAoc3R5bGUpO1xuICBpZiAoc3R5bGVTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGdvb2cuaHRtbC5TYWZlU3R5bGUuRU1QVFk7XG4gIH1cbiAgZ29vZy5odG1sLlNhZmVTdHlsZS5jaGVja1N0eWxlXyhzdHlsZVN0cmluZyk7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoZ29vZy5zdHJpbmcuZW5kc1dpdGgoc3R5bGVTdHJpbmcsICc7JyksXG4gICAgICAnTGFzdCBjaGFyYWN0ZXIgb2Ygc3R5bGUgc3RyaW5nIGlzIG5vdCBcXCc7XFwnOiAnICsgc3R5bGVTdHJpbmcpO1xuICBnb29nLmFzc2VydHMuYXNzZXJ0KGdvb2cuc3RyaW5nLmNvbnRhaW5zKHN0eWxlU3RyaW5nLCAnOicpLFxuICAgICAgJ1N0eWxlIHN0cmluZyBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIFxcJzpcXCcsIHRvICcgK1xuICAgICAgJ3NwZWNpZnkgYSBcIm5hbWU6IHZhbHVlXCIgcGFpcjogJyArIHN0eWxlU3RyaW5nKTtcbiAgcmV0dXJuIGdvb2cuaHRtbC5TYWZlU3R5bGUuY3JlYXRlU2FmZVN0eWxlU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXG4gICAgICBzdHlsZVN0cmluZyk7XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBzdHlsZSBkZWZpbml0aW9uIGlzIHZhbGlkLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmh0bWwuU2FmZVN0eWxlLmNoZWNrU3R5bGVfID0gZnVuY3Rpb24oc3R5bGUpIHtcbiAgZ29vZy5hc3NlcnRzLmFzc2VydCghL1s8Pl0vLnRlc3Qoc3R5bGUpLFxuICAgICAgJ0ZvcmJpZGRlbiBjaGFyYWN0ZXJzIGluIHN0eWxlIHN0cmluZzogJyArIHN0eWxlKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgU2FmZVN0eWxlJ3MgdmFsdWUgYXMgYSBzdHJpbmcuXG4gKlxuICogSU1QT1JUQU5UOiBJbiBjb2RlIHdoZXJlIGl0IGlzIHNlY3VyaXR5IHJlbGV2YW50IHRoYXQgYW4gb2JqZWN0J3MgdHlwZSBpc1xuICogaW5kZWVkIHtAY29kZSBTYWZlU3R5bGV9LCB1c2Uge0Bjb2RlIGdvb2cuaHRtbC5TYWZlU3R5bGUudW53cmFwfSBpbnN0ZWFkIG9mXG4gKiB0aGlzIG1ldGhvZC4gSWYgaW4gZG91YnQsIGFzc3VtZSB0aGF0IGl0J3Mgc2VjdXJpdHkgcmVsZXZhbnQuIEluIHBhcnRpY3VsYXIsXG4gKiBub3RlIHRoYXQgZ29vZy5odG1sIGZ1bmN0aW9ucyB3aGljaCByZXR1cm4gYSBnb29nLmh0bWwgdHlwZSBkbyBub3QgZ3VhcmFudGVlXG4gKiB0aGUgcmV0dXJuZWQgaW5zdGFuY2UgaXMgb2YgdGhlIHJpZ2h0IHR5cGUuIEZvciBleGFtcGxlOlxuICpcbiAqIDxwcmU+XG4gKiB2YXIgZmFrZVNhZmVIdG1sID0gbmV3IFN0cmluZygnZmFrZScpO1xuICogZmFrZVNhZmVIdG1sLl9fcHJvdG9fXyA9IGdvb2cuaHRtbC5TYWZlSHRtbC5wcm90b3R5cGU7XG4gKiB2YXIgbmV3U2FmZUh0bWwgPSBnb29nLmh0bWwuU2FmZUh0bWwuaHRtbEVzY2FwZShmYWtlU2FmZUh0bWwpO1xuICogLy8gbmV3U2FmZUh0bWwgaXMganVzdCBhbiBhbGlhcyBmb3IgZmFrZVNhZmVIdG1sLCBpdCdzIHBhc3NlZCB0aHJvdWdoIGJ5XG4gKiAvLyBnb29nLmh0bWwuU2FmZUh0bWwuaHRtbEVzY2FwZSgpIGFzIGZha2VTYWZlSHRtbFxuICogLy8gaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZUh0bWwuXG4gKiA8L3ByZT5cbiAqXG4gKiBAc2VlIGdvb2cuaHRtbC5TYWZlU3R5bGUjdW53cmFwXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5odG1sLlNhZmVTdHlsZS5wcm90b3R5cGUuZ2V0VHlwZWRTdHJpbmdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlU3R5bGVXcmFwcGVkVmFsdWVfO1xufTtcblxuXG5pZiAoZ29vZy5ERUJVRykge1xuICAvKipcbiAgICogUmV0dXJucyBhIGRlYnVnIHN0cmluZy1yZXByZXNlbnRhdGlvbiBvZiB0aGlzIHZhbHVlLlxuICAgKlxuICAgKiBUbyBvYnRhaW4gdGhlIGFjdHVhbCBzdHJpbmcgdmFsdWUgd3JhcHBlZCBpbiBhIFNhZmVTdHlsZSwgdXNlXG4gICAqIHtAY29kZSBnb29nLmh0bWwuU2FmZVN0eWxlLnVud3JhcH0uXG4gICAqXG4gICAqIEBzZWUgZ29vZy5odG1sLlNhZmVTdHlsZSN1bndyYXBcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnb29nLmh0bWwuU2FmZVN0eWxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnU2FmZVN0eWxleycgK1xuICAgICAgICB0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTdHlsZVdyYXBwZWRWYWx1ZV8gKyAnfSc7XG4gIH07XG59XG5cblxuLyoqXG4gKiBQZXJmb3JtcyBhIHJ1bnRpbWUgY2hlY2sgdGhhdCB0aGUgcHJvdmlkZWQgb2JqZWN0IGlzIGluZGVlZCBhXG4gKiBTYWZlU3R5bGUgb2JqZWN0LCBhbmQgcmV0dXJucyBpdHMgdmFsdWUuXG4gKlxuICogQHBhcmFtIHshZ29vZy5odG1sLlNhZmVTdHlsZX0gc2FmZVN0eWxlIFRoZSBvYmplY3QgdG8gZXh0cmFjdCBmcm9tLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgc2FmZVN0eWxlIG9iamVjdCdzIGNvbnRhaW5lZCBzdHJpbmcsIHVubGVzc1xuICogICAgIHRoZSBydW4tdGltZSB0eXBlIGNoZWNrIGZhaWxzLiBJbiB0aGF0IGNhc2UsIHtAY29kZSB1bndyYXB9IHJldHVybnMgYW5cbiAqICAgICBpbm5vY3VvdXMgc3RyaW5nLCBvciwgaWYgYXNzZXJ0aW9ucyBhcmUgZW5hYmxlZCwgdGhyb3dzXG4gKiAgICAge0Bjb2RlIGdvb2cuYXNzZXJ0cy5Bc3NlcnRpb25FcnJvcn0uXG4gKi9cbmdvb2cuaHRtbC5TYWZlU3R5bGUudW53cmFwID0gZnVuY3Rpb24oc2FmZVN0eWxlKSB7XG4gIC8vIFBlcmZvcm0gYWRkaXRpb25hbCBSdW4tdGltZSB0eXBlLWNoZWNraW5nIHRvIGVuc3VyZSB0aGF0XG4gIC8vIHNhZmVTdHlsZSBpcyBpbmRlZWQgYW4gaW5zdGFuY2Ugb2YgdGhlIGV4cGVjdGVkIHR5cGUuICBUaGlzXG4gIC8vIHByb3ZpZGVzIHNvbWUgYWRkaXRpb25hbCBwcm90ZWN0aW9uIGFnYWluc3Qgc2VjdXJpdHkgYnVncyBkdWUgdG9cbiAgLy8gYXBwbGljYXRpb24gY29kZSB0aGF0IGRpc2FibGVzIHR5cGUgY2hlY2tzLlxuICAvLyBTcGVjaWZpY2FsbHksIHRoZSBmb2xsb3dpbmcgY2hlY2tzIGFyZSBwZXJmb3JtZWQ6XG4gIC8vIDEuIFRoZSBvYmplY3QgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIGV4cGVjdGVkIHR5cGUuXG4gIC8vIDIuIFRoZSBvYmplY3QgaXMgbm90IGFuIGluc3RhbmNlIG9mIGEgc3ViY2xhc3MuXG4gIC8vIDMuIFRoZSBvYmplY3QgY2FycmllcyBhIHR5cGUgbWFya2VyIGZvciB0aGUgZXhwZWN0ZWQgdHlwZS4gXCJGYWtpbmdcIiBhblxuICAvLyBvYmplY3QgcmVxdWlyZXMgYSByZWZlcmVuY2UgdG8gdGhlIHR5cGUgbWFya2VyLCB3aGljaCBoYXMgbmFtZXMgaW50ZW5kZWRcbiAgLy8gdG8gc3RhbmQgb3V0IGluIGNvZGUgcmV2aWV3cy5cbiAgaWYgKHNhZmVTdHlsZSBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlU3R5bGUgJiZcbiAgICAgIHNhZmVTdHlsZS5jb25zdHJ1Y3RvciA9PT0gZ29vZy5odG1sLlNhZmVTdHlsZSAmJlxuICAgICAgc2FmZVN0eWxlLlNBRkVfU1RZTEVfVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfID09PVxuICAgICAgICAgIGdvb2cuaHRtbC5TYWZlU3R5bGUuVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfKSB7XG4gICAgcmV0dXJuIHNhZmVTdHlsZS5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlU3R5bGVXcmFwcGVkVmFsdWVfO1xuICB9IGVsc2Uge1xuICAgIGdvb2cuYXNzZXJ0cy5mYWlsKFxuICAgICAgICAnZXhwZWN0ZWQgb2JqZWN0IG9mIHR5cGUgU2FmZVN0eWxlLCBnb3QgXFwnJyArIHNhZmVTdHlsZSArICdcXCcnKTtcbiAgICByZXR1cm4gJ3R5cGVfZXJyb3I6U2FmZVN0eWxlJztcbiAgfVxufTtcblxuXG4vKipcbiAqIFBhY2thZ2UtaW50ZXJuYWwgdXRpbGl0eSBtZXRob2QgdG8gY3JlYXRlIFNhZmVTdHlsZSBpbnN0YW5jZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlIFRoZSBzdHJpbmcgdG8gaW5pdGlhbGl6ZSB0aGUgU2FmZVN0eWxlIG9iamVjdCB3aXRoLlxuICogQHJldHVybiB7IWdvb2cuaHRtbC5TYWZlU3R5bGV9IFRoZSBpbml0aWFsaXplZCBTYWZlU3R5bGUgb2JqZWN0LlxuICogQHBhY2thZ2VcbiAqL1xuZ29vZy5odG1sLlNhZmVTdHlsZS5jcmVhdGVTYWZlU3R5bGVTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZSA9XG4gICAgZnVuY3Rpb24oc3R5bGUpIHtcbiAgcmV0dXJuIG5ldyBnb29nLmh0bWwuU2FmZVN0eWxlKCkuaW5pdFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlXyhzdHlsZSk7XG59O1xuXG5cbi8qKlxuICogQ2FsbGVkIGZyb20gY3JlYXRlU2FmZVN0eWxlU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoKS4gVGhpc1xuICogbWV0aG9kIGV4aXN0cyBvbmx5IHNvIHRoYXQgdGhlIGNvbXBpbGVyIGNhbiBkZWFkIGNvZGUgZWxpbWluYXRlIHN0YXRpY1xuICogZmllbGRzIChsaWtlIEVNUFRZKSB3aGVuIHRoZXkncmUgbm90IGFjY2Vzc2VkLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlXG4gKiBAcmV0dXJuIHshZ29vZy5odG1sLlNhZmVTdHlsZX1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaHRtbC5TYWZlU3R5bGUucHJvdG90eXBlLmluaXRTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZV8gPSBmdW5jdGlvbihcbiAgICBzdHlsZSkge1xuICB0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTdHlsZVdyYXBwZWRWYWx1ZV8gPSBzdHlsZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogQSBTYWZlU3R5bGUgaW5zdGFuY2UgY29ycmVzcG9uZGluZyB0byB0aGUgZW1wdHkgc3RyaW5nLlxuICogQGNvbnN0IHshZ29vZy5odG1sLlNhZmVTdHlsZX1cbiAqL1xuZ29vZy5odG1sLlNhZmVTdHlsZS5FTVBUWSA9XG4gICAgZ29vZy5odG1sLlNhZmVTdHlsZS5jcmVhdGVTYWZlU3R5bGVTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZSgnJyk7XG5cblxuLyoqXG4gKiBUaGUgaW5ub2N1b3VzIHN0cmluZyBnZW5lcmF0ZWQgYnkgZ29vZy5odG1sLlNhZmVVcmwuY3JlYXRlIHdoZW4gcGFzc2VkXG4gKiBhbiB1bnNhZmUgdmFsdWUuXG4gKiBAY29uc3Qge3N0cmluZ31cbiAqL1xuZ29vZy5odG1sLlNhZmVTdHlsZS5JTk5PQ1VPVVNfU1RSSU5HID0gJ3pDbG9zdXJleic7XG5cblxuLyoqXG4gKiBNYXBwaW5nIG9mIHByb3BlcnR5IG5hbWVzIHRvIHRoZWlyIHZhbHVlcy5cbiAqIEB0eXBlZGVmIHshT2JqZWN0PHN0cmluZywgZ29vZy5zdHJpbmcuQ29uc3R8c3RyaW5nPn1cbiAqL1xuZ29vZy5odG1sLlNhZmVTdHlsZS5Qcm9wZXJ0eU1hcDtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgU2FmZVN0eWxlIG9iamVjdCBmcm9tIHRoZSBwcm9wZXJ0aWVzIHNwZWNpZmllZCBpbiB0aGUgbWFwLlxuICogQHBhcmFtIHtnb29nLmh0bWwuU2FmZVN0eWxlLlByb3BlcnR5TWFwfSBtYXAgTWFwcGluZyBvZiBwcm9wZXJ0eSBuYW1lcyB0b1xuICogICAgIHRoZWlyIHZhbHVlcywgZm9yIGV4YW1wbGUgeydtYXJnaW4nOiAnMXB4J30uIE5hbWVzIG11c3QgY29uc2lzdCBvZlxuICogICAgIFstX2EtekEtWjAtOV0uIFZhbHVlcyBtaWdodCBiZSBzdHJpbmdzIGNvbnNpc3Rpbmcgb2ZcbiAqICAgICBbLSwuJ1wiJV8hIyBhLXpBLVowLTldLCB3aGVyZSBcIiBhbmQgJyBtdXN0IGJlIHByb3Blcmx5IGJhbGFuY2VkLlxuICogICAgIE90aGVyIHZhbHVlcyBtdXN0IGJlIHdyYXBwZWQgaW4gZ29vZy5zdHJpbmcuQ29uc3QuIE51bGwgdmFsdWUgY2F1c2VzXG4gKiAgICAgc2tpcHBpbmcgdGhlIHByb3BlcnR5LlxuICogQHJldHVybiB7IWdvb2cuaHRtbC5TYWZlU3R5bGV9XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgaW52YWxpZCBuYW1lIGlzIHByb3ZpZGVkLlxuICogQHRocm93cyB7Z29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yfSBJZiBpbnZhbGlkIHZhbHVlIGlzIHByb3ZpZGVkLiBXaXRoXG4gKiAgICAgZGlzYWJsZWQgYXNzZXJ0aW9ucywgaW52YWxpZCB2YWx1ZSBpcyByZXBsYWNlZCBieVxuICogICAgIGdvb2cuaHRtbC5TYWZlU3R5bGUuSU5OT0NVT1VTX1NUUklORy5cbiAqL1xuZ29vZy5odG1sLlNhZmVTdHlsZS5jcmVhdGUgPSBmdW5jdGlvbihtYXApIHtcbiAgdmFyIHN0eWxlID0gJyc7XG4gIGZvciAodmFyIG5hbWUgaW4gbWFwKSB7XG4gICAgaWYgKCEvXlstX2EtekEtWjAtOV0rJC8udGVzdChuYW1lKSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ05hbWUgYWxsb3dzIG9ubHkgWy1fYS16QS1aMC05XSwgZ290OiAnICsgbmFtZSk7XG4gICAgfVxuICAgIHZhciB2YWx1ZSA9IG1hcFtuYW1lXTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGdvb2cuc3RyaW5nLkNvbnN0KSB7XG4gICAgICB2YWx1ZSA9IGdvb2cuc3RyaW5nLkNvbnN0LnVud3JhcCh2YWx1ZSk7XG4gICAgICAvLyBUaGVzZSBjaGFyYWN0ZXJzIGNhbiBiZSB1c2VkIHRvIGNoYW5nZSBjb250ZXh0IGFuZCB3ZSBkb24ndCB3YW50IHRoYXRcbiAgICAgIC8vIGV2ZW4gd2l0aCBjb25zdCB2YWx1ZXMuXG4gICAgICBnb29nLmFzc2VydHMuYXNzZXJ0KCEvW3s7fV0vLnRlc3QodmFsdWUpLCAnVmFsdWUgZG9lcyBub3QgYWxsb3cgW3s7fV0uJyk7XG4gICAgfSBlbHNlIGlmICghZ29vZy5odG1sLlNhZmVTdHlsZS5WQUxVRV9SRV8udGVzdCh2YWx1ZSkpIHtcbiAgICAgIGdvb2cuYXNzZXJ0cy5mYWlsKFxuICAgICAgICAgICdTdHJpbmcgdmFsdWUgYWxsb3dzIG9ubHkgWy0sLlwiXFwnJV8hIyBhLXpBLVowLTldLCBnb3Q6ICcgKyB2YWx1ZSk7XG4gICAgICB2YWx1ZSA9IGdvb2cuaHRtbC5TYWZlU3R5bGUuSU5OT0NVT1VTX1NUUklORztcbiAgICB9IGVsc2UgaWYgKCFnb29nLmh0bWwuU2FmZVN0eWxlLmhhc0JhbGFuY2VkUXVvdGVzXyh2YWx1ZSkpIHtcbiAgICAgIGdvb2cuYXNzZXJ0cy5mYWlsKCdTdHJpbmcgdmFsdWUgcmVxdWlyZXMgYmFsYW5jZWQgcXVvdGVzLCBnb3Q6ICcgKyB2YWx1ZSk7XG4gICAgICB2YWx1ZSA9IGdvb2cuaHRtbC5TYWZlU3R5bGUuSU5OT0NVT1VTX1NUUklORztcbiAgICB9XG4gICAgc3R5bGUgKz0gbmFtZSArICc6JyArIHZhbHVlICsgJzsnO1xuICB9XG4gIGlmICghc3R5bGUpIHtcbiAgICByZXR1cm4gZ29vZy5odG1sLlNhZmVTdHlsZS5FTVBUWTtcbiAgfVxuICBnb29nLmh0bWwuU2FmZVN0eWxlLmNoZWNrU3R5bGVfKHN0eWxlKTtcbiAgcmV0dXJuIGdvb2cuaHRtbC5TYWZlU3R5bGUuY3JlYXRlU2FmZVN0eWxlU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXG4gICAgICBzdHlsZSk7XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIHRoYXQgcXVvdGVzIChcIiBhbmQgJykgYXJlIHByb3Blcmx5IGJhbGFuY2VkIGluc2lkZSBhIHN0cmluZy4gQXNzdW1lc1xuICogdGhhdCBuZWl0aGVyIGVzY2FwZSAoXFwpIG5vciBhbnkgb3RoZXIgY2hhcmFjdGVyIHRoYXQgY291bGQgcmVzdWx0IGluXG4gKiBicmVha2luZyBvdXQgb2YgYSBzdHJpbmcgcGFyc2luZyBjb250ZXh0IGFyZSBhbGxvd2VkO1xuICogc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc3ludGF4LyNzdHJpbmctdG9rZW4tZGlhZ3JhbS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBVbnRydXN0ZWQgQ1NTIHByb3BlcnR5IHZhbHVlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBwcm9wZXJ0eSB2YWx1ZSBpcyBzYWZlIHdpdGggcmVzcGVjdCB0byBxdW90ZVxuICogICAgIGJhbGFuY2VkbmVzcy5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaHRtbC5TYWZlU3R5bGUuaGFzQmFsYW5jZWRRdW90ZXNfID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIG91dHNpZGVTaW5nbGUgPSB0cnVlO1xuICB2YXIgb3V0c2lkZURvdWJsZSA9IHRydWU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYyA9IHZhbHVlLmNoYXJBdChpKTtcbiAgICBpZiAoYyA9PSBcIidcIiAmJiBvdXRzaWRlRG91YmxlKSB7XG4gICAgICBvdXRzaWRlU2luZ2xlID0gIW91dHNpZGVTaW5nbGU7XG4gICAgfSBlbHNlIGlmIChjID09ICdcIicgJiYgb3V0c2lkZVNpbmdsZSkge1xuICAgICAgb3V0c2lkZURvdWJsZSA9ICFvdXRzaWRlRG91YmxlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0c2lkZVNpbmdsZSAmJiBvdXRzaWRlRG91YmxlO1xufTtcblxuXG4vLyBLZWVwIGluIHN5bmMgd2l0aCB0aGUgZXJyb3Igc3RyaW5nIGluIGNyZWF0ZSgpLlxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gZm9yIHNhZmUgdmFsdWVzLlxuICpcbiAqIFF1b3RlcyAoXCIgYW5kICcpIGFyZSBhbGxvd2VkLCBidXQgYSBjaGVjayBtdXN0IGJlIGRvbmUgZWxzZXdoZXJlIHRvIGVuc3VyZVxuICogdGhleSdyZSBiYWxhbmNlZC5cbiAqXG4gKiAnLCcgYWxsb3dzIG11bHRpcGxlIHZhbHVlcyB0byBiZSBhc3NpZ25lZCB0byB0aGUgc2FtZSBwcm9wZXJ0eVxuICogKGUuZy4gYmFja2dyb3VuZC1hdHRhY2htZW50IG9yIGZvbnQtZmFtaWx5KSBhbmQgaGVuY2UgY291bGQgYWxsb3dcbiAqIG11bHRpcGxlIHZhbHVlcyB0byBnZXQgaW5qZWN0ZWQsIGJ1dCB0aGF0IHNob3VsZCBwb3NlIG5vIHJpc2sgb2YgWFNTLlxuICogQGNvbnN0IHshUmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5odG1sLlNhZmVTdHlsZS5WQUxVRV9SRV8gPSAvXlstLC5cIiclXyEjIGEtekEtWjAtOV0rJC87XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFNhZmVTdHlsZSBvYmplY3QgYnkgY29uY2F0ZW5hdGluZyB0aGUgdmFsdWVzLlxuICogQHBhcmFtIHsuLi4oIWdvb2cuaHRtbC5TYWZlU3R5bGV8IUFycmF5PCFnb29nLmh0bWwuU2FmZVN0eWxlPil9IHZhcl9hcmdzXG4gKiAgICAgU2FmZVN0eWxlcyB0byBjb25jYXRlbmF0ZS5cbiAqIEByZXR1cm4geyFnb29nLmh0bWwuU2FmZVN0eWxlfVxuICovXG5nb29nLmh0bWwuU2FmZVN0eWxlLmNvbmNhdCA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XG4gIHZhciBzdHlsZSA9ICcnO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFnb29nLmh0bWwuU2FmZVN0eWxlfCFBcnJheTwhZ29vZy5odG1sLlNhZmVTdHlsZT59IGFyZ3VtZW50XG4gICAqL1xuICB2YXIgYWRkQXJndW1lbnQgPSBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgIGlmIChnb29nLmlzQXJyYXkoYXJndW1lbnQpKSB7XG4gICAgICBnb29nLmFycmF5LmZvckVhY2goYXJndW1lbnQsIGFkZEFyZ3VtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUgKz0gZ29vZy5odG1sLlNhZmVTdHlsZS51bndyYXAoYXJndW1lbnQpO1xuICAgIH1cbiAgfTtcblxuICBnb29nLmFycmF5LmZvckVhY2goYXJndW1lbnRzLCBhZGRBcmd1bWVudCk7XG4gIGlmICghc3R5bGUpIHtcbiAgICByZXR1cm4gZ29vZy5odG1sLlNhZmVTdHlsZS5FTVBUWTtcbiAgfVxuICByZXR1cm4gZ29vZy5odG1sLlNhZmVTdHlsZS5jcmVhdGVTYWZlU3R5bGVTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShcbiAgICAgIHN0eWxlKTtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFRoZSBTYWZlU3R5bGVTaGVldCB0eXBlIGFuZCBpdHMgYnVpbGRlcnMuXG4gKlxuICogVE9ETyh4dG9mKTogTGluayB0byBkb2N1bWVudCBzdGF0aW5nIHR5cGUgY29udHJhY3QuXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQnKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLmFycmF5Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZy5Db25zdCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZy5UeXBlZFN0cmluZycpO1xuXG5cblxuLyoqXG4gKiBBIHN0cmluZy1saWtlIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgQ1NTIHN0eWxlIHNoZWV0IGFuZCB0aGF0IGNhcnJpZXMgdGhlXG4gKiBzZWN1cml0eSB0eXBlIGNvbnRyYWN0IHRoYXQgaXRzIHZhbHVlLCBhcyBhIHN0cmluZywgd2lsbCBub3QgY2F1c2UgdW50cnVzdGVkXG4gKiBzY3JpcHQgZXhlY3V0aW9uIChYU1MpIHdoZW4gZXZhbHVhdGVkIGFzIENTUyBpbiBhIGJyb3dzZXIuXG4gKlxuICogSW5zdGFuY2VzIG9mIHRoaXMgdHlwZSBtdXN0IGJlIGNyZWF0ZWQgdmlhIHRoZSBmYWN0b3J5IG1ldGhvZFxuICoge0Bjb2RlIGdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5mcm9tQ29uc3RhbnR9IGFuZCBub3QgYnkgaW52b2tpbmcgaXRzXG4gKiBjb25zdHJ1Y3Rvci4gVGhlIGNvbnN0cnVjdG9yIGludGVudGlvbmFsbHkgdGFrZXMgbm8gcGFyYW1ldGVycyBhbmQgdGhlIHR5cGVcbiAqIGlzIGltbXV0YWJsZTsgaGVuY2Ugb25seSBhIGRlZmF1bHQgaW5zdGFuY2UgY29ycmVzcG9uZGluZyB0byB0aGUgZW1wdHkgc3RyaW5nXG4gKiBjYW4gYmUgb2J0YWluZWQgdmlhIGNvbnN0cnVjdG9yIGludm9jYXRpb24uXG4gKlxuICogQSBTYWZlU3R5bGVTaGVldCdzIHN0cmluZyByZXByZXNlbnRhdGlvbiBjYW4gc2FmZWx5IGJlIGludGVycG9sYXRlZCBhcyB0aGVcbiAqIGNvbnRlbnQgb2YgYSBzdHlsZSBlbGVtZW50IHdpdGhpbiBIVE1MLiBUaGUgU2FmZVN0eWxlU2hlZXQgc3RyaW5nIHNob3VsZFxuICogbm90IGJlIGVzY2FwZWQgYmVmb3JlIGludGVycG9sYXRpb24uXG4gKlxuICogVmFsdWVzIG9mIHRoaXMgdHlwZSBtdXN0IGJlIGNvbXBvc2FibGUsIGkuZS4gZm9yIGFueSB0d28gdmFsdWVzXG4gKiB7QGNvZGUgc3R5bGVTaGVldDF9IGFuZCB7QGNvZGUgc3R5bGVTaGVldDJ9IG9mIHRoaXMgdHlwZSxcbiAqIHtAY29kZSBnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQudW53cmFwKHN0eWxlU2hlZXQxKSArXG4gKiBnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQudW53cmFwKHN0eWxlU2hlZXQyKX0gbXVzdCBpdHNlbGYgYmUgYSB2YWx1ZSB0aGF0XG4gKiBzYXRpc2ZpZXMgdGhlIFNhZmVTdHlsZVNoZWV0IHR5cGUgY29uc3RyYWludC4gVGhpcyByZXF1aXJlbWVudCBpbXBsaWVzIHRoYXRcbiAqIGZvciBhbnkgdmFsdWUge0Bjb2RlIHN0eWxlU2hlZXR9IG9mIHRoaXMgdHlwZSxcbiAqIHtAY29kZSBnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQudW53cmFwKHN0eWxlU2hlZXQxKX0gbXVzdCBlbmQgaW5cbiAqIFwiYmVnaW5uaW5nIG9mIHJ1bGVcIiBjb250ZXh0LlxuXG4gKiBBIFNhZmVTdHlsZVNoZWV0IGNhbiBiZSBjb25zdHJ1Y3RlZCB2aWEgc2VjdXJpdHktcmV2aWV3ZWQgdW5jaGVja2VkXG4gKiBjb252ZXJzaW9ucy4gSW4gdGhpcyBjYXNlIHByb2R1Y2VycyBvZiBTYWZlU3R5bGVTaGVldCBtdXN0IGVuc3VyZSB0aGVtc2VsdmVzXG4gKiB0aGF0IHRoZSBTYWZlU3R5bGVTaGVldCBkb2VzIG5vdCBjb250YWluIHVuc2FmZSBzY3JpcHQuIE5vdGUgaW4gcGFydGljdWxhclxuICogdGhhdCB7QGNvZGUgJmx0O30gaXMgZGFuZ2Vyb3VzLCBldmVuIHdoZW4gaW5zaWRlIENTUyBzdHJpbmdzLCBhbmQgc28gc2hvdWxkXG4gKiBhbHdheXMgYmUgZm9yYmlkZGVuIG9yIENTUy1lc2NhcGVkIGluIHVzZXIgY29udHJvbGxlZCBpbnB1dC4gRm9yIGV4YW1wbGUsIGlmXG4gKiB7QGNvZGUgJmx0Oy9zdHlsZSZndDsmbHQ7c2NyaXB0Jmd0O2V2aWwmbHQ7L3NjcmlwdCZndDtcIn0gd2VyZSBpbnRlcnBvbGF0ZWRcbiAqIGluc2lkZSBhIENTUyBzdHJpbmcsIGl0IHdvdWxkIGJyZWFrIG91dCBvZiB0aGUgY29udGV4dCBvZiB0aGUgb3JpZ2luYWxcbiAqIHN0eWxlIGVsZW1lbnQgYW5kIHtAY29kZSBldmlsfSB3b3VsZCBleGVjdXRlLiBBbHNvIG5vdGUgdGhhdCB3aXRoaW4gYW4gSFRNTFxuICogc3R5bGUgKHJhdyB0ZXh0KSBlbGVtZW50LCBIVE1MIGNoYXJhY3RlciByZWZlcmVuY2VzLCBzdWNoIGFzXG4gKiB7QGNvZGUgJmFtcDtsdDt9LCBhcmUgbm90IGFsbG93ZWQuIFNlZVxuICogaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvc2NyaXB0aW5nLTEuaHRtbCNyZXN0cmljdGlvbnMtZm9yLWNvbnRlbnRzLW9mLXNjcmlwdC1lbGVtZW50c1xuICogKHNpbWlsYXIgY29uc2lkZXJhdGlvbnMgYXBwbHkgdG8gdGhlIHN0eWxlIGVsZW1lbnQpLlxuICpcbiAqIEBzZWUgZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0I2Zyb21Db25zdGFudFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZmluYWxcbiAqIEBzdHJ1Y3RcbiAqIEBpbXBsZW1lbnRzIHtnb29nLnN0cmluZy5UeXBlZFN0cmluZ31cbiAqL1xuZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0ID0gZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVkIHZhbHVlIG9mIHRoaXMgU2FmZVN0eWxlU2hlZXQuICBUaGUgZmllbGQgaGFzIGEgcHVycG9zZWx5XG4gICAqIHVnbHkgbmFtZSB0byBtYWtlIChub24tY29tcGlsZWQpIGNvZGUgdGhhdCBhdHRlbXB0cyB0byBkaXJlY3RseSBhY2Nlc3MgdGhpc1xuICAgKiBmaWVsZCBzdGFuZCBvdXQuXG4gICAqIEBwcml2YXRlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTdHlsZVNoZWV0V3JhcHBlZFZhbHVlXyA9ICcnO1xuXG4gIC8qKlxuICAgKiBBIHR5cGUgbWFya2VyIHVzZWQgdG8gaW1wbGVtZW50IGFkZGl0aW9uYWwgcnVuLXRpbWUgdHlwZSBjaGVja2luZy5cbiAgICogQHNlZSBnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQjdW53cmFwXG4gICAqIEBjb25zdFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5TQUZFX1NDUklQVF9UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV8gPVxuICAgICAgZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXztcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqIEBjb25zdFxuICovXG5nb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQucHJvdG90eXBlLmltcGxlbWVudHNHb29nU3RyaW5nVHlwZWRTdHJpbmcgPSB0cnVlO1xuXG5cbi8qKlxuICogVHlwZSBtYXJrZXIgZm9yIHRoZSBTYWZlU3R5bGVTaGVldCB0eXBlLCB1c2VkIHRvIGltcGxlbWVudCBhZGRpdGlvbmFsXG4gKiBydW4tdGltZSB0eXBlIGNoZWNraW5nLlxuICogQGNvbnN0IHshT2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXyA9IHt9O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBTYWZlU3R5bGVTaGVldCBvYmplY3QgYnkgY29uY2F0ZW5hdGluZyB2YWx1ZXMuXG4gKiBAcGFyYW0gey4uLighZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0fCFBcnJheTwhZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0Pil9XG4gKiAgICAgdmFyX2FyZ3MgVmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICogQHJldHVybiB7IWdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldH1cbiAqL1xuZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LmNvbmNhdCA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICAvKipcbiAgICogQHBhcmFtIHshZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0fCFBcnJheTwhZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0Pn1cbiAgICogICAgIGFyZ3VtZW50XG4gICAqL1xuICB2YXIgYWRkQXJndW1lbnQgPSBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgIGlmIChnb29nLmlzQXJyYXkoYXJndW1lbnQpKSB7XG4gICAgICBnb29nLmFycmF5LmZvckVhY2goYXJndW1lbnQsIGFkZEFyZ3VtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IGdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC51bndyYXAoYXJndW1lbnQpO1xuICAgIH1cbiAgfTtcblxuICBnb29nLmFycmF5LmZvckVhY2goYXJndW1lbnRzLCBhZGRBcmd1bWVudCk7XG4gIHJldHVybiBnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXRcbiAgICAgIC5jcmVhdGVTYWZlU3R5bGVTaGVldFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKHJlc3VsdCk7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIFNhZmVTdHlsZVNoZWV0IG9iamVjdCBmcm9tIGEgY29tcGlsZS10aW1lIGNvbnN0YW50IHN0cmluZy5cbiAqXG4gKiB7QGNvZGUgc3R5bGVTaGVldH0gbXVzdCBub3QgaGF2ZSBhbnkgJmx0OyBjaGFyYWN0ZXJzIGluIGl0LCBzbyB0aGF0XG4gKiB0aGUgc3ludGFjdGljIHN0cnVjdHVyZSBvZiB0aGUgc3Vycm91bmRpbmcgSFRNTCBpcyBub3QgYWZmZWN0ZWQuXG4gKlxuICogQHBhcmFtIHshZ29vZy5zdHJpbmcuQ29uc3R9IHN0eWxlU2hlZXQgQSBjb21waWxlLXRpbWUtY29uc3RhbnQgc3RyaW5nIGZyb21cbiAqICAgICB3aGljaCB0byBjcmVhdGUgYSBTYWZlU3R5bGVTaGVldC5cbiAqIEByZXR1cm4geyFnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXR9IEEgU2FmZVN0eWxlU2hlZXQgb2JqZWN0IGluaXRpYWxpemVkIHRvXG4gKiAgICAge0Bjb2RlIHN0eWxlU2hlZXR9LlxuICovXG5nb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQuZnJvbUNvbnN0YW50ID0gZnVuY3Rpb24oc3R5bGVTaGVldCkge1xuICB2YXIgc3R5bGVTaGVldFN0cmluZyA9IGdvb2cuc3RyaW5nLkNvbnN0LnVud3JhcChzdHlsZVNoZWV0KTtcbiAgaWYgKHN0eWxlU2hlZXRTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5FTVBUWTtcbiAgfVxuICAvLyA+IGlzIGEgdmFsaWQgY2hhcmFjdGVyIGluIENTUyBzZWxlY3RvcnMgYW5kIHRoZXJlJ3Mgbm8gc3RyaWN0IG5lZWQgdG9cbiAgLy8gYmxvY2sgaXQgaWYgd2UgYWxyZWFkeSBibG9jayA8LlxuICBnb29nLmFzc2VydHMuYXNzZXJ0KCFnb29nLnN0cmluZy5jb250YWlucyhzdHlsZVNoZWV0U3RyaW5nLCAnPCcpLFxuICAgICAgXCJGb3JiaWRkZW4gJzwnIGNoYXJhY3RlciBpbiBzdHlsZSBzaGVldCBzdHJpbmc6IFwiICsgc3R5bGVTaGVldFN0cmluZyk7XG4gIHJldHVybiBnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQuXG4gICAgICBjcmVhdGVTYWZlU3R5bGVTaGVldFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKHN0eWxlU2hlZXRTdHJpbmcpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhpcyBTYWZlU3R5bGVTaGVldCdzIHZhbHVlIGFzIGEgc3RyaW5nLlxuICpcbiAqIElNUE9SVEFOVDogSW4gY29kZSB3aGVyZSBpdCBpcyBzZWN1cml0eSByZWxldmFudCB0aGF0IGFuIG9iamVjdCdzIHR5cGUgaXNcbiAqIGluZGVlZCB7QGNvZGUgU2FmZVN0eWxlU2hlZXR9LCB1c2Uge0Bjb2RlIGdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC51bndyYXB9XG4gKiBpbnN0ZWFkIG9mIHRoaXMgbWV0aG9kLiBJZiBpbiBkb3VidCwgYXNzdW1lIHRoYXQgaXQncyBzZWN1cml0eSByZWxldmFudC4gSW5cbiAqIHBhcnRpY3VsYXIsIG5vdGUgdGhhdCBnb29nLmh0bWwgZnVuY3Rpb25zIHdoaWNoIHJldHVybiBhIGdvb2cuaHRtbCB0eXBlIGRvXG4gKiBub3QgZ3VhcmFudGVlIHRoZSByZXR1cm5lZCBpbnN0YW5jZSBpcyBvZiB0aGUgcmlnaHQgdHlwZS4gRm9yIGV4YW1wbGU6XG4gKlxuICogPHByZT5cbiAqIHZhciBmYWtlU2FmZUh0bWwgPSBuZXcgU3RyaW5nKCdmYWtlJyk7XG4gKiBmYWtlU2FmZUh0bWwuX19wcm90b19fID0gZ29vZy5odG1sLlNhZmVIdG1sLnByb3RvdHlwZTtcbiAqIHZhciBuZXdTYWZlSHRtbCA9IGdvb2cuaHRtbC5TYWZlSHRtbC5odG1sRXNjYXBlKGZha2VTYWZlSHRtbCk7XG4gKiAvLyBuZXdTYWZlSHRtbCBpcyBqdXN0IGFuIGFsaWFzIGZvciBmYWtlU2FmZUh0bWwsIGl0J3MgcGFzc2VkIHRocm91Z2ggYnlcbiAqIC8vIGdvb2cuaHRtbC5TYWZlSHRtbC5odG1sRXNjYXBlKCkgYXMgZmFrZVNhZmVIdG1sXG4gKiAvLyBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlSHRtbC5cbiAqIDwvcHJlPlxuICpcbiAqIEBzZWUgZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0I3Vud3JhcFxuICogQG92ZXJyaWRlXG4gKi9cbmdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5wcm90b3R5cGUuZ2V0VHlwZWRTdHJpbmdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlU3R5bGVTaGVldFdyYXBwZWRWYWx1ZV87XG59O1xuXG5cbmlmIChnb29nLkRFQlVHKSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgZGVidWcgc3RyaW5nLXJlcHJlc2VudGF0aW9uIG9mIHRoaXMgdmFsdWUuXG4gICAqXG4gICAqIFRvIG9idGFpbiB0aGUgYWN0dWFsIHN0cmluZyB2YWx1ZSB3cmFwcGVkIGluIGEgU2FmZVN0eWxlU2hlZXQsIHVzZVxuICAgKiB7QGNvZGUgZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LnVud3JhcH0uXG4gICAqXG4gICAqIEBzZWUgZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0I3Vud3JhcFxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ1NhZmVTdHlsZVNoZWV0eycgK1xuICAgICAgICB0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTdHlsZVNoZWV0V3JhcHBlZFZhbHVlXyArICd9JztcbiAgfTtcbn1cblxuXG4vKipcbiAqIFBlcmZvcm1zIGEgcnVudGltZSBjaGVjayB0aGF0IHRoZSBwcm92aWRlZCBvYmplY3QgaXMgaW5kZWVkIGFcbiAqIFNhZmVTdHlsZVNoZWV0IG9iamVjdCwgYW5kIHJldHVybnMgaXRzIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7IWdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldH0gc2FmZVN0eWxlU2hlZXQgVGhlIG9iamVjdCB0byBleHRyYWN0IGZyb20uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzYWZlU3R5bGVTaGVldCBvYmplY3QncyBjb250YWluZWQgc3RyaW5nLCB1bmxlc3NcbiAqICAgICB0aGUgcnVuLXRpbWUgdHlwZSBjaGVjayBmYWlscy4gSW4gdGhhdCBjYXNlLCB7QGNvZGUgdW53cmFwfSByZXR1cm5zIGFuXG4gKiAgICAgaW5ub2N1b3VzIHN0cmluZywgb3IsIGlmIGFzc2VydGlvbnMgYXJlIGVuYWJsZWQsIHRocm93c1xuICogICAgIHtAY29kZSBnb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3J9LlxuICovXG5nb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQudW53cmFwID0gZnVuY3Rpb24oc2FmZVN0eWxlU2hlZXQpIHtcbiAgLy8gUGVyZm9ybSBhZGRpdGlvbmFsIFJ1bi10aW1lIHR5cGUtY2hlY2tpbmcgdG8gZW5zdXJlIHRoYXRcbiAgLy8gc2FmZVN0eWxlU2hlZXQgaXMgaW5kZWVkIGFuIGluc3RhbmNlIG9mIHRoZSBleHBlY3RlZCB0eXBlLiAgVGhpc1xuICAvLyBwcm92aWRlcyBzb21lIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBhZ2FpbnN0IHNlY3VyaXR5IGJ1Z3MgZHVlIHRvXG4gIC8vIGFwcGxpY2F0aW9uIGNvZGUgdGhhdCBkaXNhYmxlcyB0eXBlIGNoZWNrcy5cbiAgLy8gU3BlY2lmaWNhbGx5LCB0aGUgZm9sbG93aW5nIGNoZWNrcyBhcmUgcGVyZm9ybWVkOlxuICAvLyAxLiBUaGUgb2JqZWN0IGlzIGFuIGluc3RhbmNlIG9mIHRoZSBleHBlY3RlZCB0eXBlLlxuICAvLyAyLiBUaGUgb2JqZWN0IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBhIHN1YmNsYXNzLlxuICAvLyAzLiBUaGUgb2JqZWN0IGNhcnJpZXMgYSB0eXBlIG1hcmtlciBmb3IgdGhlIGV4cGVjdGVkIHR5cGUuIFwiRmFraW5nXCIgYW5cbiAgLy8gb2JqZWN0IHJlcXVpcmVzIGEgcmVmZXJlbmNlIHRvIHRoZSB0eXBlIG1hcmtlciwgd2hpY2ggaGFzIG5hbWVzIGludGVuZGVkXG4gIC8vIHRvIHN0YW5kIG91dCBpbiBjb2RlIHJldmlld3MuXG4gIGlmIChzYWZlU3R5bGVTaGVldCBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldCAmJlxuICAgICAgc2FmZVN0eWxlU2hlZXQuY29uc3RydWN0b3IgPT09IGdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldCAmJlxuICAgICAgc2FmZVN0eWxlU2hlZXQuU0FGRV9TQ1JJUFRfVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfID09PVxuICAgICAgICAgIGdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV8pIHtcbiAgICByZXR1cm4gc2FmZVN0eWxlU2hlZXQucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZVN0eWxlU2hlZXRXcmFwcGVkVmFsdWVfO1xuICB9IGVsc2Uge1xuICAgIGdvb2cuYXNzZXJ0cy5mYWlsKFxuICAgICAgICBcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIFNhZmVTdHlsZVNoZWV0LCBnb3QgJ1wiICsgc2FmZVN0eWxlU2hlZXQgK1xuICAgICAgICBcIidcIik7XG4gICAgcmV0dXJuICd0eXBlX2Vycm9yOlNhZmVTdHlsZVNoZWV0JztcbiAgfVxufTtcblxuXG4vKipcbiAqIFBhY2thZ2UtaW50ZXJuYWwgdXRpbGl0eSBtZXRob2QgdG8gY3JlYXRlIFNhZmVTdHlsZVNoZWV0IGluc3RhbmNlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVTaGVldCBUaGUgc3RyaW5nIHRvIGluaXRpYWxpemUgdGhlIFNhZmVTdHlsZVNoZWV0XG4gKiAgICAgb2JqZWN0IHdpdGguXG4gKiBAcmV0dXJuIHshZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0fSBUaGUgaW5pdGlhbGl6ZWQgU2FmZVN0eWxlU2hlZXQgb2JqZWN0LlxuICogQHBhY2thZ2VcbiAqL1xuZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LmNyZWF0ZVNhZmVTdHlsZVNoZWV0U2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UgPVxuICAgIGZ1bmN0aW9uKHN0eWxlU2hlZXQpIHtcbiAgcmV0dXJuIG5ldyBnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQoKS5pbml0U2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VfKFxuICAgICAgc3R5bGVTaGVldCk7XG59O1xuXG5cbi8qKlxuICogQ2FsbGVkIGZyb20gY3JlYXRlU2FmZVN0eWxlU2hlZXRTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZSgpLiBUaGlzXG4gKiBtZXRob2QgZXhpc3RzIG9ubHkgc28gdGhhdCB0aGUgY29tcGlsZXIgY2FuIGRlYWQgY29kZSBlbGltaW5hdGUgc3RhdGljXG4gKiBmaWVsZHMgKGxpa2UgRU1QVFkpIHdoZW4gdGhleSdyZSBub3QgYWNjZXNzZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVTaGVldFxuICogQHJldHVybiB7IWdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5wcm90b3R5cGUuaW5pdFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlXyA9XG4gICAgZnVuY3Rpb24oc3R5bGVTaGVldCkge1xuICB0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTdHlsZVNoZWV0V3JhcHBlZFZhbHVlXyA9IHN0eWxlU2hlZXQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIEEgU2FmZVN0eWxlU2hlZXQgaW5zdGFuY2UgY29ycmVzcG9uZGluZyB0byB0aGUgZW1wdHkgc3RyaW5nLlxuICogQGNvbnN0IHshZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0fVxuICovXG5nb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQuRU1QVFkgPVxuICAgIGdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5cbiAgICAgICAgY3JlYXRlU2FmZVN0eWxlU2hlZXRTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZSgnJyk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNSBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFdyYXBwZXIgZm9yIFVSTCBhbmQgaXRzIGNyZWF0ZU9iamVjdFVybCBhbmQgcmV2b2tlT2JqZWN0VXJsXG4gKiBtZXRob2RzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIEhUTUw1IEZpbGUgQVBJLlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5mcy51cmwnKTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBibG9iIFVSTCBmb3IgYSBibG9iIG9iamVjdC5cbiAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdCBVcmxzLlxuICpcbiAqIEBwYXJhbSB7IUJsb2J9IGJsb2IgVGhlIG9iamVjdCBmb3Igd2hpY2ggdG8gY3JlYXRlIHRoZSBVUkwuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVUkwgZm9yIHRoZSBvYmplY3QuXG4gKi9cbmdvb2cuZnMudXJsLmNyZWF0ZU9iamVjdFVybCA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgcmV0dXJuIGdvb2cuZnMudXJsLmdldFVybE9iamVjdF8oKS5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG59O1xuXG5cbi8qKlxuICogUmV2b2tlcyBhIFVSTCBjcmVhdGVkIGJ5IHtAbGluayBnb29nLmZzLnVybC5jcmVhdGVPYmplY3RVcmx9LlxuICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgT2JqZWN0IFVybHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHJldm9rZS5cbiAqL1xuZ29vZy5mcy51cmwucmV2b2tlT2JqZWN0VXJsID0gZnVuY3Rpb24odXJsKSB7XG4gIGdvb2cuZnMudXJsLmdldFVybE9iamVjdF8oKS5yZXZva2VPYmplY3RVUkwodXJsKTtcbn07XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7e2NyZWF0ZU9iamVjdFVSTDogKGZ1bmN0aW9uKCFCbG9iKTogc3RyaW5nKSxcbiAqICAgICAgICAgICAgcmV2b2tlT2JqZWN0VVJMOiBmdW5jdGlvbihzdHJpbmcpOiB2b2lkfX1cbiAqL1xuZ29vZy5mcy51cmwuVXJsT2JqZWN0XztcblxuXG4vKipcbiAqIEdldCB0aGUgb2JqZWN0IHRoYXQgaGFzIHRoZSBjcmVhdGVPYmplY3RVUkwgYW5kIHJldm9rZU9iamVjdFVSTCBmdW5jdGlvbnMgZm9yXG4gKiB0aGlzIGJyb3dzZXIuXG4gKlxuICogQHJldHVybiB7Z29vZy5mcy51cmwuVXJsT2JqZWN0X30gVGhlIG9iamVjdCBmb3IgdGhpcyBicm93c2VyLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5mcy51cmwuZ2V0VXJsT2JqZWN0XyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdXJsT2JqZWN0ID0gZ29vZy5mcy51cmwuZmluZFVybE9iamVjdF8oKTtcbiAgaWYgKHVybE9iamVjdCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHVybE9iamVjdDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBFcnJvcignVGhpcyBicm93c2VyIGRvZXNuXFwndCBzZWVtIHRvIHN1cHBvcnQgYmxvYiBVUkxzJyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBGaW5kcyB0aGUgb2JqZWN0IHRoYXQgaGFzIHRoZSBjcmVhdGVPYmplY3RVUkwgYW5kIHJldm9rZU9iamVjdFVSTCBmdW5jdGlvbnNcbiAqIGZvciB0aGlzIGJyb3dzZXIuXG4gKlxuICogQHJldHVybiB7P2dvb2cuZnMudXJsLlVybE9iamVjdF99IFRoZSBvYmplY3QgZm9yIHRoaXMgYnJvd3NlciBvciBudWxsIGlmIHRoZVxuICogICAgIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBPYmplY3QgVXJscy5cbiAqIEBzdXBwcmVzcyB7dW5uZWNlc3NhcnlDYXN0c30gRGVwZW5kaW5nIG9uIGhvdyB0aGUgY29kZSBpcyBjb21waWxlZCwgY2FzdGluZ1xuICogICAgIGdvb2cuZ2xvYmFsIHRvIFVybE9iamVjdF8gbWF5IHJlc3VsdCBpbiB1bm5lY2Vzc2FyeSBjYXN0IHdhcm5pbmcuXG4gKiAgICAgSG93ZXZlciwgdGhlIGNhc3QgY2Fubm90IGJlIHJlbW92ZWQgYmVjYXVzZSB3aXRoIGRpZmZlcmVudCBzZXQgb2ZcbiAqICAgICBjb21waWxlciBmbGFncywgdGhlIGNhc3QgaXMgaW5kZWVkIG5lY2Vzc2FyeS4gIEFzIHN1Y2gsIHNpbGVuY2luZyBpdC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZnMudXJsLmZpbmRVcmxPYmplY3RfID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRoaXMgaXMgd2hhdCB0aGUgc3BlYyBzYXlzIHRvIGRvXG4gIC8vIGh0dHA6Ly9kZXYudzMub3JnLzIwMDYvd2ViYXBpL0ZpbGVBUEkvI2Rmbi1jcmVhdGVPYmplY3RVUkxcbiAgaWYgKGdvb2cuaXNEZWYoZ29vZy5nbG9iYWwuVVJMKSAmJlxuICAgICAgZ29vZy5pc0RlZihnb29nLmdsb2JhbC5VUkwuY3JlYXRlT2JqZWN0VVJMKSkge1xuICAgIHJldHVybiAvKiogQHR5cGUge2dvb2cuZnMudXJsLlVybE9iamVjdF99ICovIChnb29nLmdsb2JhbC5VUkwpO1xuICAvLyBUaGlzIGlzIHdoYXQgQ2hyb21lIGRvZXMgKGFzIG9mIDEwLjAuNjQ4LjYgZGV2KVxuICB9IGVsc2UgaWYgKGdvb2cuaXNEZWYoZ29vZy5nbG9iYWwud2Via2l0VVJMKSAmJlxuICAgICAgICAgICAgIGdvb2cuaXNEZWYoZ29vZy5nbG9iYWwud2Via2l0VVJMLmNyZWF0ZU9iamVjdFVSTCkpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHtnb29nLmZzLnVybC5VcmxPYmplY3RffSAqLyAoZ29vZy5nbG9iYWwud2Via2l0VVJMKTtcbiAgLy8gVGhpcyBpcyB3aGF0IHRoZSBzcGVjIHVzZWQgdG8gc2F5IHRvIGRvXG4gIH0gZWxzZSBpZiAoZ29vZy5pc0RlZihnb29nLmdsb2JhbC5jcmVhdGVPYmplY3RVUkwpKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7Z29vZy5mcy51cmwuVXJsT2JqZWN0X30gKi8gKGdvb2cuZ2xvYmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoaXMgYnJvd3NlciBzdXBwb3J0cyBPYmplY3QgVXJscy4gSWYgbm90LCBjYWxscyB0b1xuICogY3JlYXRlT2JqZWN0VXJsIGFuZCByZXZva2VPYmplY3RVcmwgd2lsbCByZXN1bHQgaW4gYW4gZXJyb3IuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgT2JqZWN0IFVybHMuXG4gKi9cbmdvb2cuZnMudXJsLmJyb3dzZXJTdXBwb3J0c09iamVjdFVybHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdvb2cuZnMudXJsLmZpbmRVcmxPYmplY3RfKCkgIT0gbnVsbDtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAwNyBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFV0aWxpdHkgZnVuY3Rpb25zIGZvciBzdXBwb3J0aW5nIEJpZGkgaXNzdWVzLlxuICovXG5cblxuLyoqXG4gKiBOYW1lc3BhY2UgZm9yIGJpZGkgc3VwcG9ydGluZyBmdW5jdGlvbnMuXG4gKi9cbmdvb2cucHJvdmlkZSgnZ29vZy5pMThuLmJpZGknKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5pMThuLmJpZGkuRGlyJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuaTE4bi5iaWRpLkRpcmVjdGlvbmFsU3RyaW5nJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuaTE4bi5iaWRpLkZvcm1hdCcpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gRk9SQ0VfUlRMIGZvcmNlcyB0aGUge0BsaW5rIGdvb2cuaTE4bi5iaWRpLklTX1JUTH0gY29uc3RhbnRcbiAqIHRvIHNheSB0aGF0IHRoZSBjdXJyZW50IGxvY2FsZSBpcyBhIFJUTCBsb2NhbGUuICBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWRcbiAqIGlmIHlvdSB3YW50IHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGZvciBkZWNpZGluZyB3aGV0aGVyIHRoZVxuICogY3VycmVudCBsb2NhbGUgaXMgUlRMIG9yIG5vdC5cbiAqXG4gKiB7QHNlZSBnb29nLmkxOG4uYmlkaS5JU19SVEx9XG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLmkxOG4uYmlkaS5GT1JDRV9SVEwnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBDb25zdGFudCB0aGF0IGRlZmluZXMgd2hldGhlciBvciBub3QgdGhlIGN1cnJlbnQgbG9jYWxlIGlzIGEgUlRMIGxvY2FsZS5cbiAqIElmIHtAbGluayBnb29nLmkxOG4uYmlkaS5GT1JDRV9SVEx9IGlzIG5vdCB0cnVlLCB0aGlzIGNvbnN0YW50IHdpbGwgZGVmYXVsdFxuICogdG8gY2hlY2sgdGhhdCB7QGxpbmsgZ29vZy5MT0NBTEV9IGlzIG9uZSBvZiBhIGZldyBtYWpvciBSVEwgbG9jYWxlcy5cbiAqXG4gKiA8cD5UaGlzIGlzIGRlc2lnbmVkIHRvIGJlIGEgbWF4aW1hbGx5IGVmZmljaWVudCBjb21waWxlLXRpbWUgY29uc3RhbnQuIEZvclxuICogZXhhbXBsZSwgZm9yIHRoZSBkZWZhdWx0IGdvb2cuTE9DQUxFLCBjb21waWxpbmdcbiAqIFwiaWYgKGdvb2cuaTE4bi5iaWRpLklTX1JUTCkgYWxlcnQoJ3J0bCcpIGVsc2Uge31cIiBzaG91bGQgcHJvZHVjZSBubyBjb2RlLiBJdFxuICogaXMgdGhpcyBkZXNpZ24gY29uc2lkZXJhdGlvbiB0aGF0IGxpbWl0cyB0aGUgaW1wbGVtZW50YXRpb24gdG8gb25seVxuICogc3VwcG9ydGluZyBhIGZldyBtYWpvciBSVEwgbG9jYWxlcywgYXMgb3Bwb3NlZCB0byB0aGUgYnJvYWRlciByZXBlcnRvaXJlIG9mXG4gKiBzb21ldGhpbmcgbGlrZSBnb29nLmkxOG4uYmlkaS5pc1J0bExhbmd1YWdlLlxuICpcbiAqIDxwPlNpbmNlIHRoaXMgY29uc3RhbnQgcmVmZXJzIHRvIHRoZSBkaXJlY3Rpb25hbGl0eSBvZiB0aGUgbG9jYWxlLCBpdCBpcyB1cFxuICogdG8gdGhlIGNhbGxlciB0byBkZXRlcm1pbmUgaWYgdGhpcyBjb25zdGFudCBzaG91bGQgYWxzbyBiZSB1c2VkIGZvciB0aGVcbiAqIGRpcmVjdGlvbiBvZiB0aGUgVUkuXG4gKlxuICoge0BzZWUgZ29vZy5MT0NBTEV9XG4gKlxuICogQHR5cGUge2Jvb2xlYW59XG4gKlxuICogVE9ETyh1c2VyKTogd3JpdGUgYSB0ZXN0IHRoYXQgY2hlY2tzIHRoYXQgdGhpcyBpcyBhIGNvbXBpbGUtdGltZSBjb25zdGFudC5cbiAqL1xuZ29vZy5pMThuLmJpZGkuSVNfUlRMID0gZ29vZy5pMThuLmJpZGkuRk9SQ0VfUlRMIHx8XG4gICAgKFxuICAgICAgICAoZ29vZy5MT0NBTEUuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCkgPT0gJ2FyJyB8fFxuICAgICAgICAgZ29vZy5MT0NBTEUuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCkgPT0gJ2ZhJyB8fFxuICAgICAgICAgZ29vZy5MT0NBTEUuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCkgPT0gJ2hlJyB8fFxuICAgICAgICAgZ29vZy5MT0NBTEUuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCkgPT0gJ2l3JyB8fFxuICAgICAgICAgZ29vZy5MT0NBTEUuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCkgPT0gJ3BzJyB8fFxuICAgICAgICAgZ29vZy5MT0NBTEUuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCkgPT0gJ3NkJyB8fFxuICAgICAgICAgZ29vZy5MT0NBTEUuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCkgPT0gJ3VnJyB8fFxuICAgICAgICAgZ29vZy5MT0NBTEUuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCkgPT0gJ3VyJyB8fFxuICAgICAgICAgZ29vZy5MT0NBTEUuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCkgPT0gJ3lpJykgJiZcbiAgICAgICAgKGdvb2cuTE9DQUxFLmxlbmd0aCA9PSAyIHx8XG4gICAgICAgICBnb29nLkxPQ0FMRS5zdWJzdHJpbmcoMiwgMykgPT0gJy0nIHx8XG4gICAgICAgICBnb29nLkxPQ0FMRS5zdWJzdHJpbmcoMiwgMykgPT0gJ18nKVxuICAgICkgfHwgKFxuICAgICAgICBnb29nLkxPQ0FMRS5sZW5ndGggPj0gMyAmJlxuICAgICAgICBnb29nLkxPQ0FMRS5zdWJzdHJpbmcoMCwgMykudG9Mb3dlckNhc2UoKSA9PSAnY2tiJyAmJlxuICAgICAgICAoZ29vZy5MT0NBTEUubGVuZ3RoID09IDMgfHxcbiAgICAgICAgIGdvb2cuTE9DQUxFLnN1YnN0cmluZygzLCA0KSA9PSAnLScgfHxcbiAgICAgICAgIGdvb2cuTE9DQUxFLnN1YnN0cmluZygzLCA0KSA9PSAnXycpXG4gICAgKTtcblxuXG4vKipcbiAqIFVuaWNvZGUgZm9ybWF0dGluZyBjaGFyYWN0ZXJzIGFuZCBkaXJlY3Rpb25hbGl0eSBzdHJpbmcgY29uc3RhbnRzLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZ29vZy5pMThuLmJpZGkuRm9ybWF0ID0ge1xuICAvKiogVW5pY29kZSBcIkxlZnQtVG8tUmlnaHQgRW1iZWRkaW5nXCIgKExSRSkgY2hhcmFjdGVyLiAqL1xuICBMUkU6ICdcXHUyMDJBJyxcbiAgLyoqIFVuaWNvZGUgXCJSaWdodC1Uby1MZWZ0IEVtYmVkZGluZ1wiIChSTEUpIGNoYXJhY3Rlci4gKi9cbiAgUkxFOiAnXFx1MjAyQicsXG4gIC8qKiBVbmljb2RlIFwiUG9wIERpcmVjdGlvbmFsIEZvcm1hdHRpbmdcIiAoUERGKSBjaGFyYWN0ZXIuICovXG4gIFBERjogJ1xcdTIwMkMnLFxuICAvKiogVW5pY29kZSBcIkxlZnQtVG8tUmlnaHQgTWFya1wiIChMUk0pIGNoYXJhY3Rlci4gKi9cbiAgTFJNOiAnXFx1MjAwRScsXG4gIC8qKiBVbmljb2RlIFwiUmlnaHQtVG8tTGVmdCBNYXJrXCIgKFJMTSkgY2hhcmFjdGVyLiAqL1xuICBSTE06ICdcXHUyMDBGJ1xufTtcblxuXG4vKipcbiAqIERpcmVjdGlvbmFsaXR5IGVudW0uXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5nb29nLmkxOG4uYmlkaS5EaXIgPSB7XG4gIC8qKlxuICAgKiBMZWZ0LXRvLXJpZ2h0LlxuICAgKi9cbiAgTFRSOiAxLFxuXG4gIC8qKlxuICAgKiBSaWdodC10by1sZWZ0LlxuICAgKi9cbiAgUlRMOiAtMSxcblxuICAvKipcbiAgICogTmVpdGhlciBsZWZ0LXRvLXJpZ2h0IG5vciByaWdodC10by1sZWZ0LlxuICAgKi9cbiAgTkVVVFJBTDogMFxufTtcblxuXG4vKipcbiAqICdyaWdodCcgc3RyaW5nIGNvbnN0YW50LlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZ29vZy5pMThuLmJpZGkuUklHSFQgPSAncmlnaHQnO1xuXG5cbi8qKlxuICogJ2xlZnQnIHN0cmluZyBjb25zdGFudC5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmdvb2cuaTE4bi5iaWRpLkxFRlQgPSAnbGVmdCc7XG5cblxuLyoqXG4gKiAnbGVmdCcgaWYgbG9jYWxlIGlzIFJUTCwgJ3JpZ2h0JyBpZiBub3QuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5nb29nLmkxOG4uYmlkaS5JMThOX1JJR0hUID0gZ29vZy5pMThuLmJpZGkuSVNfUlRMID8gZ29vZy5pMThuLmJpZGkuTEVGVCA6XG4gICAgZ29vZy5pMThuLmJpZGkuUklHSFQ7XG5cblxuLyoqXG4gKiAncmlnaHQnIGlmIGxvY2FsZSBpcyBSVEwsICdsZWZ0JyBpZiBub3QuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5nb29nLmkxOG4uYmlkaS5JMThOX0xFRlQgPSBnb29nLmkxOG4uYmlkaS5JU19SVEwgPyBnb29nLmkxOG4uYmlkaS5SSUdIVCA6XG4gICAgZ29vZy5pMThuLmJpZGkuTEVGVDtcblxuXG4vKipcbiAqIENvbnZlcnQgYSBkaXJlY3Rpb25hbGl0eSBnaXZlbiBpbiB2YXJpb3VzIGZvcm1hdHMgdG8gYSBnb29nLmkxOG4uYmlkaS5EaXJcbiAqIGNvbnN0YW50LiBVc2VmdWwgZm9yIGludGVyYWN0aW9uIHdpdGggZGlmZmVyZW50IHN0YW5kYXJkcyBvZiBkaXJlY3Rpb25hbGl0eVxuICogcmVwcmVzZW50YXRpb24uXG4gKlxuICogQHBhcmFtIHtnb29nLmkxOG4uYmlkaS5EaXJ8bnVtYmVyfGJvb2xlYW58bnVsbH0gZ2l2ZW5EaXIgRGlyZWN0aW9uYWxpdHkgZ2l2ZW5cbiAqICAgICBpbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBmb3JtYXRzOlxuICogICAgIDEuIEEgZ29vZy5pMThuLmJpZGkuRGlyIGNvbnN0YW50LlxuICogICAgIDIuIEEgbnVtYmVyIChwb3NpdGl2ZSA9IExUUiwgbmVnYXRpdmUgPSBSVEwsIDAgPSBuZXV0cmFsKS5cbiAqICAgICAzLiBBIGJvb2xlYW4gKHRydWUgPSBSVEwsIGZhbHNlID0gTFRSKS5cbiAqICAgICA0LiBBIG51bGwgZm9yIHVua25vd24gZGlyZWN0aW9uYWxpdHkuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfbm9OZXV0cmFsIFdoZXRoZXIgYSBnaXZlbkRpciBvZiB6ZXJvIG9yXG4gKiAgICAgZ29vZy5pMThuLmJpZGkuRGlyLk5FVVRSQUwgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgbnVsbCwgaS5lLiB1bmtub3duLCBpblxuICogICAgIG9yZGVyIHRvIHByZXNlcnZlIGxlZ2FjeSBiZWhhdmlvci5cbiAqIEByZXR1cm4gez9nb29nLmkxOG4uYmlkaS5EaXJ9IEEgZ29vZy5pMThuLmJpZGkuRGlyIGNvbnN0YW50IG1hdGNoaW5nIHRoZVxuICogICAgIGdpdmVuIGRpcmVjdGlvbmFsaXR5LiBJZiBnaXZlbiBudWxsLCByZXR1cm5zIG51bGwgKGkuZS4gdW5rbm93bikuXG4gKi9cbmdvb2cuaTE4bi5iaWRpLnRvRGlyID0gZnVuY3Rpb24oZ2l2ZW5EaXIsIG9wdF9ub05ldXRyYWwpIHtcbiAgaWYgKHR5cGVvZiBnaXZlbkRpciA9PSAnbnVtYmVyJykge1xuICAgIC8vIFRoaXMgaW5jbHVkZXMgdGhlIG5vbi1udWxsIGdvb2cuaTE4bi5iaWRpLkRpciBjYXNlLlxuICAgIHJldHVybiBnaXZlbkRpciA+IDAgPyBnb29nLmkxOG4uYmlkaS5EaXIuTFRSIDpcbiAgICAgICAgZ2l2ZW5EaXIgPCAwID8gZ29vZy5pMThuLmJpZGkuRGlyLlJUTCA6XG4gICAgICAgIG9wdF9ub05ldXRyYWwgPyBudWxsIDogZ29vZy5pMThuLmJpZGkuRGlyLk5FVVRSQUw7XG4gIH0gZWxzZSBpZiAoZ2l2ZW5EaXIgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2Uge1xuICAgIC8vIE11c3QgYmUgdHlwZW9mIGdpdmVuRGlyID09ICdib29sZWFuJy5cbiAgICByZXR1cm4gZ2l2ZW5EaXIgPyBnb29nLmkxOG4uYmlkaS5EaXIuUlRMIDogZ29vZy5pMThuLmJpZGkuRGlyLkxUUjtcbiAgfVxufTtcblxuXG4vKipcbiAqIEEgcHJhY3RpY2FsIHBhdHRlcm4gdG8gaWRlbnRpZnkgc3Ryb25nIExUUiBjaGFyYWN0ZXJzLiBUaGlzIHBhdHRlcm4gaXMgbm90XG4gKiB0aGVvcmV0aWNhbGx5IGNvcnJlY3QgYWNjb3JkaW5nIHRvIHRoZSBVbmljb2RlIHN0YW5kYXJkLiBJdCBpcyBzaW1wbGlmaWVkIGZvclxuICogcGVyZm9ybWFuY2UgYW5kIHNtYWxsIGNvZGUgc2l6ZS5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmkxOG4uYmlkaS5sdHJDaGFyc18gPVxuICAgICdBLVphLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyQjhcXHUwMzAwLVxcdTA1OTBcXHUwODAwLVxcdTFGRkYnICtcbiAgICAnXFx1MjAwRVxcdTJDMDAtXFx1RkIxQ1xcdUZFMDAtXFx1RkU2RlxcdUZFRkQtXFx1RkZGRic7XG5cblxuLyoqXG4gKiBBIHByYWN0aWNhbCBwYXR0ZXJuIHRvIGlkZW50aWZ5IHN0cm9uZyBSVEwgY2hhcmFjdGVyLiBUaGlzIHBhdHRlcm4gaXMgbm90XG4gKiB0aGVvcmV0aWNhbGx5IGNvcnJlY3QgYWNjb3JkaW5nIHRvIHRoZSBVbmljb2RlIHN0YW5kYXJkLiBJdCBpcyBzaW1wbGlmaWVkXG4gKiBmb3IgcGVyZm9ybWFuY2UgYW5kIHNtYWxsIGNvZGUgc2l6ZS5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmkxOG4uYmlkaS5ydGxDaGFyc18gPVxuICAgICdcXHUwNTkxLVxcdTA2RUZcXHUwNkZBLVxcdTA3RkZcXHUyMDBGXFx1RkIxRC1cXHVGREZGXFx1RkU3MC1cXHVGRUZDJztcblxuXG4vKipcbiAqIFNpbXBsaWZpZWQgcmVndWxhciBleHByZXNzaW9uIGZvciBhbiBIVE1MIHRhZyAob3BlbmluZyBvciBjbG9zaW5nKSBvciBhbiBIVE1MXG4gKiBlc2NhcGUuIFdlIG1pZ2h0IHdhbnQgdG8gc2tpcCBvdmVyIHN1Y2ggZXhwcmVzc2lvbnMgd2hlbiBlc3RpbWF0aW5nIHRoZSB0ZXh0XG4gKiBkaXJlY3Rpb25hbGl0eS5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmkxOG4uYmlkaS5odG1sU2tpcFJlZ18gPSAvPFtePl0qPnwmW147XSs7L2c7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbnB1dCB0ZXh0IHdpdGggc3BhY2VzIGluc3RlYWQgb2YgSFRNTCB0YWdzIG9yIEhUTUwgZXNjYXBlcywgaWZcbiAqIG9wdF9pc1N0cmlwTmVlZGVkIGlzIHRydWUuIEVsc2UgcmV0dXJucyB0aGUgaW5wdXQgYXMgaXMuXG4gKiBVc2VmdWwgZm9yIHRleHQgZGlyZWN0aW9uYWxpdHkgZXN0aW1hdGlvbi5cbiAqIE5vdGU6IHRoZSBmdW5jdGlvbiBzaG91bGQgbm90IGJlIHVzZWQgaW4gb3RoZXIgY29udGV4dHM7IGl0IGlzIG5vdCAxMDAlXG4gKiBjb3JyZWN0LCBidXQgcmF0aGVyIGEgZ29vZC1lbm91Z2ggaW1wbGVtZW50YXRpb24gZm9yIGRpcmVjdGlvbmFsaXR5XG4gKiBlc3RpbWF0aW9uIHB1cnBvc2VzLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgZ2l2ZW4gc3RyaW5nLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzU3RyaXBOZWVkZWQgV2hldGhlciB0byBwZXJmb3JtIHRoZSBzdHJpcHBpbmcuXG4gKiAgICAgRGVmYXVsdDogZmFsc2UgKHRvIHJldGFpbiBjb25zaXN0ZW5jeSB3aXRoIGNhbGxpbmcgZnVuY3Rpb25zKS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGdpdmVuIHN0cmluZyBjbGVhbmVkIG9mIEhUTUwgdGFncyAvIGVzY2FwZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmkxOG4uYmlkaS5zdHJpcEh0bWxJZk5lZWRlZF8gPSBmdW5jdGlvbihzdHIsIG9wdF9pc1N0cmlwTmVlZGVkKSB7XG4gIHJldHVybiBvcHRfaXNTdHJpcE5lZWRlZCA/IHN0ci5yZXBsYWNlKGdvb2cuaTE4bi5iaWRpLmh0bWxTa2lwUmVnXywgJycpIDpcbiAgICAgIHN0cjtcbn07XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gY2hlY2sgZm9yIFJUTCBjaGFyYWN0ZXJzLlxuICogQHR5cGUge1JlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaTE4bi5iaWRpLnJ0bENoYXJSZWdfID0gbmV3IFJlZ0V4cCgnWycgKyBnb29nLmkxOG4uYmlkaS5ydGxDaGFyc18gKyAnXScpO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHRvIGNoZWNrIGZvciBMVFIgY2hhcmFjdGVycy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmkxOG4uYmlkaS5sdHJDaGFyUmVnXyA9IG5ldyBSZWdFeHAoJ1snICsgZ29vZy5pMThuLmJpZGkubHRyQ2hhcnNfICsgJ10nKTtcblxuXG4vKipcbiAqIFRlc3Qgd2hldGhlciB0aGUgZ2l2ZW4gc3RyaW5nIGhhcyBhbnkgUlRMIGNoYXJhY3RlcnMgaW4gaXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBnaXZlbiBzdHJpbmcgdGhhdCBuZWVkIHRvIGJlIHRlc3RlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pc0h0bWwgV2hldGhlciBzdHIgaXMgSFRNTCAvIEhUTUwtZXNjYXBlZC5cbiAqICAgICBEZWZhdWx0OiBmYWxzZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHN0cmluZyBjb250YWlucyBSVEwgY2hhcmFjdGVycy5cbiAqL1xuZ29vZy5pMThuLmJpZGkuaGFzQW55UnRsID0gZnVuY3Rpb24oc3RyLCBvcHRfaXNIdG1sKSB7XG4gIHJldHVybiBnb29nLmkxOG4uYmlkaS5ydGxDaGFyUmVnXy50ZXN0KGdvb2cuaTE4bi5iaWRpLnN0cmlwSHRtbElmTmVlZGVkXyhcbiAgICAgIHN0ciwgb3B0X2lzSHRtbCkpO1xufTtcblxuXG4vKipcbiAqIFRlc3Qgd2hldGhlciB0aGUgZ2l2ZW4gc3RyaW5nIGhhcyBhbnkgUlRMIGNoYXJhY3RlcnMgaW4gaXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBnaXZlbiBzdHJpbmcgdGhhdCBuZWVkIHRvIGJlIHRlc3RlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHN0cmluZyBjb250YWlucyBSVEwgY2hhcmFjdGVycy5cbiAqIEBkZXByZWNhdGVkIFVzZSBoYXNBbnlSdGwuXG4gKi9cbmdvb2cuaTE4bi5iaWRpLmhhc1J0bENoYXIgPSBnb29nLmkxOG4uYmlkaS5oYXNBbnlSdGw7XG5cblxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgdGhlIGdpdmVuIHN0cmluZyBoYXMgYW55IExUUiBjaGFyYWN0ZXJzIGluIGl0LlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgZ2l2ZW4gc3RyaW5nIHRoYXQgbmVlZCB0byBiZSB0ZXN0ZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaXNIdG1sIFdoZXRoZXIgc3RyIGlzIEhUTUwgLyBIVE1MLWVzY2FwZWQuXG4gKiAgICAgRGVmYXVsdDogZmFsc2UuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBzdHJpbmcgY29udGFpbnMgTFRSIGNoYXJhY3RlcnMuXG4gKi9cbmdvb2cuaTE4bi5iaWRpLmhhc0FueUx0ciA9IGZ1bmN0aW9uKHN0ciwgb3B0X2lzSHRtbCkge1xuICByZXR1cm4gZ29vZy5pMThuLmJpZGkubHRyQ2hhclJlZ18udGVzdChnb29nLmkxOG4uYmlkaS5zdHJpcEh0bWxJZk5lZWRlZF8oXG4gICAgICBzdHIsIG9wdF9pc0h0bWwpKTtcbn07XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybiB0byBjaGVjayBpZiB0aGUgZmlyc3QgY2hhcmFjdGVyIGluIHRoZSBzdHJpbmdcbiAqIGlzIExUUi5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmkxOG4uYmlkaS5sdHJSZV8gPSBuZXcgUmVnRXhwKCdeWycgKyBnb29nLmkxOG4uYmlkaS5sdHJDaGFyc18gKyAnXScpO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHBhdHRlcm4gdG8gY2hlY2sgaWYgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nXG4gKiBpcyBSVEwuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5pMThuLmJpZGkucnRsUmVfID0gbmV3IFJlZ0V4cCgnXlsnICsgZ29vZy5pMThuLmJpZGkucnRsQ2hhcnNfICsgJ10nKTtcblxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZyBpcyBSVEwgb3Igbm90LlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgZ2l2ZW4gc3RyaW5nIHRoYXQgbmVlZCB0byBiZSB0ZXN0ZWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gc3RyIGlzIGFuIFJUTCBjaGFyLlxuICovXG5nb29nLmkxOG4uYmlkaS5pc1J0bENoYXIgPSBmdW5jdGlvbihzdHIpIHtcbiAgcmV0dXJuIGdvb2cuaTE4bi5iaWRpLnJ0bFJlXy50ZXN0KHN0cik7XG59O1xuXG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nIGlzIExUUiBvciBub3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBnaXZlbiBzdHJpbmcgdGhhdCBuZWVkIHRvIGJlIHRlc3RlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiBzdHIgaXMgYW4gTFRSIGNoYXIuXG4gKi9cbmdvb2cuaTE4bi5iaWRpLmlzTHRyQ2hhciA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gZ29vZy5pMThuLmJpZGkubHRyUmVfLnRlc3Qoc3RyKTtcbn07XG5cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZmlyc3QgY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcgaXMgbmV1dHJhbCBvciBub3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBnaXZlbiBzdHJpbmcgdGhhdCBuZWVkIHRvIGJlIHRlc3RlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiBzdHIgaXMgYSBuZXV0cmFsIGNoYXIuXG4gKi9cbmdvb2cuaTE4bi5iaWRpLmlzTmV1dHJhbENoYXIgPSBmdW5jdGlvbihzdHIpIHtcbiAgcmV0dXJuICFnb29nLmkxOG4uYmlkaS5pc0x0ckNoYXIoc3RyKSAmJiAhZ29vZy5pMThuLmJpZGkuaXNSdGxDaGFyKHN0cik7XG59O1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9ucyB0byBjaGVjayBpZiBhIHBpZWNlIG9mIHRleHQgaXMgb2YgTFRSIGRpcmVjdGlvbmFsaXR5XG4gKiBvbiBmaXJzdCBjaGFyYWN0ZXIgd2l0aCBzdHJvbmcgZGlyZWN0aW9uYWxpdHkuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5pMThuLmJpZGkubHRyRGlyQ2hlY2tSZV8gPSBuZXcgUmVnRXhwKFxuICAgICdeW14nICsgZ29vZy5pMThuLmJpZGkucnRsQ2hhcnNfICsgJ10qWycgKyBnb29nLmkxOG4uYmlkaS5sdHJDaGFyc18gKyAnXScpO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9ucyB0byBjaGVjayBpZiBhIHBpZWNlIG9mIHRleHQgaXMgb2YgUlRMIGRpcmVjdGlvbmFsaXR5XG4gKiBvbiBmaXJzdCBjaGFyYWN0ZXIgd2l0aCBzdHJvbmcgZGlyZWN0aW9uYWxpdHkuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5pMThuLmJpZGkucnRsRGlyQ2hlY2tSZV8gPSBuZXcgUmVnRXhwKFxuICAgICdeW14nICsgZ29vZy5pMThuLmJpZGkubHRyQ2hhcnNfICsgJ10qWycgKyBnb29nLmkxOG4uYmlkaS5ydGxDaGFyc18gKyAnXScpO1xuXG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgZmlyc3Qgc3Ryb25nbHkgZGlyZWN0aW9uYWwgY2hhcmFjdGVyIChpZiBhbnkpIGlzIFJUTC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIGJlaW5nIGNoZWNrZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaXNIdG1sIFdoZXRoZXIgc3RyIGlzIEhUTUwgLyBIVE1MLWVzY2FwZWQuXG4gKiAgICAgRGVmYXVsdDogZmFsc2UuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIFJUTCBkaXJlY3Rpb25hbGl0eSBpcyBkZXRlY3RlZCB1c2luZyB0aGUgZmlyc3RcbiAqICAgICBzdHJvbmdseS1kaXJlY3Rpb25hbCBjaGFyYWN0ZXIgbWV0aG9kLlxuICovXG5nb29nLmkxOG4uYmlkaS5zdGFydHNXaXRoUnRsID0gZnVuY3Rpb24oc3RyLCBvcHRfaXNIdG1sKSB7XG4gIHJldHVybiBnb29nLmkxOG4uYmlkaS5ydGxEaXJDaGVja1JlXy50ZXN0KGdvb2cuaTE4bi5iaWRpLnN0cmlwSHRtbElmTmVlZGVkXyhcbiAgICAgIHN0ciwgb3B0X2lzSHRtbCkpO1xufTtcblxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGZpcnN0IHN0cm9uZ2x5IGRpcmVjdGlvbmFsIGNoYXJhY3RlciAoaWYgYW55KSBpcyBSVEwuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyBiZWluZyBjaGVja2VkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzSHRtbCBXaGV0aGVyIHN0ciBpcyBIVE1MIC8gSFRNTC1lc2NhcGVkLlxuICogICAgIERlZmF1bHQ6IGZhbHNlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBSVEwgZGlyZWN0aW9uYWxpdHkgaXMgZGV0ZWN0ZWQgdXNpbmcgdGhlIGZpcnN0XG4gKiAgICAgc3Ryb25nbHktZGlyZWN0aW9uYWwgY2hhcmFjdGVyIG1ldGhvZC5cbiAqIEBkZXByZWNhdGVkIFVzZSBzdGFydHNXaXRoUnRsLlxuICovXG5nb29nLmkxOG4uYmlkaS5pc1J0bFRleHQgPSBnb29nLmkxOG4uYmlkaS5zdGFydHNXaXRoUnRsO1xuXG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgZmlyc3Qgc3Ryb25nbHkgZGlyZWN0aW9uYWwgY2hhcmFjdGVyIChpZiBhbnkpIGlzIExUUi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIGJlaW5nIGNoZWNrZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaXNIdG1sIFdoZXRoZXIgc3RyIGlzIEhUTUwgLyBIVE1MLWVzY2FwZWQuXG4gKiAgICAgRGVmYXVsdDogZmFsc2UuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIExUUiBkaXJlY3Rpb25hbGl0eSBpcyBkZXRlY3RlZCB1c2luZyB0aGUgZmlyc3RcbiAqICAgICBzdHJvbmdseS1kaXJlY3Rpb25hbCBjaGFyYWN0ZXIgbWV0aG9kLlxuICovXG5nb29nLmkxOG4uYmlkaS5zdGFydHNXaXRoTHRyID0gZnVuY3Rpb24oc3RyLCBvcHRfaXNIdG1sKSB7XG4gIHJldHVybiBnb29nLmkxOG4uYmlkaS5sdHJEaXJDaGVja1JlXy50ZXN0KGdvb2cuaTE4bi5iaWRpLnN0cmlwSHRtbElmTmVlZGVkXyhcbiAgICAgIHN0ciwgb3B0X2lzSHRtbCkpO1xufTtcblxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGZpcnN0IHN0cm9uZ2x5IGRpcmVjdGlvbmFsIGNoYXJhY3RlciAoaWYgYW55KSBpcyBMVFIuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyBiZWluZyBjaGVja2VkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzSHRtbCBXaGV0aGVyIHN0ciBpcyBIVE1MIC8gSFRNTC1lc2NhcGVkLlxuICogICAgIERlZmF1bHQ6IGZhbHNlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBMVFIgZGlyZWN0aW9uYWxpdHkgaXMgZGV0ZWN0ZWQgdXNpbmcgdGhlIGZpcnN0XG4gKiAgICAgc3Ryb25nbHktZGlyZWN0aW9uYWwgY2hhcmFjdGVyIG1ldGhvZC5cbiAqIEBkZXByZWNhdGVkIFVzZSBzdGFydHNXaXRoTHRyLlxuICovXG5nb29nLmkxOG4uYmlkaS5pc0x0clRleHQgPSBnb29nLmkxOG4uYmlkaS5zdGFydHNXaXRoTHRyO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHRvIGNoZWNrIGlmIGEgc3RyaW5nIGxvb2tzIGxpa2Ugc29tZXRoaW5nIHRoYXQgbXVzdFxuICogYWx3YXlzIGJlIExUUiBldmVuIGluIFJUTCB0ZXh0LCBlLmcuIGEgVVJMLiBXaGVuIGVzdGltYXRpbmcgdGhlXG4gKiBkaXJlY3Rpb25hbGl0eSBvZiB0ZXh0IGNvbnRhaW5pbmcgdGhlc2UsIHdlIHRyZWF0IHRoZXNlIGFzIHdlYWtseSBMVFIsXG4gKiBsaWtlIG51bWJlcnMuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5pMThuLmJpZGkuaXNSZXF1aXJlZEx0clJlXyA9IC9eaHR0cDpcXC9cXC8uKi87XG5cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBpbnB1dCBzdHJpbmcgZWl0aGVyIGNvbnRhaW5zIG5vIHN0cm9uZ2x5IGRpcmVjdGlvbmFsXG4gKiBjaGFyYWN0ZXJzIG9yIGxvb2tzIGxpa2UgYSB1cmwuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyBiZWluZyBjaGVja2VkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzSHRtbCBXaGV0aGVyIHN0ciBpcyBIVE1MIC8gSFRNTC1lc2NhcGVkLlxuICogICAgIERlZmF1bHQ6IGZhbHNlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBuZXV0cmFsIGRpcmVjdGlvbmFsaXR5IGlzIGRldGVjdGVkLlxuICovXG5nb29nLmkxOG4uYmlkaS5pc05ldXRyYWxUZXh0ID0gZnVuY3Rpb24oc3RyLCBvcHRfaXNIdG1sKSB7XG4gIHN0ciA9IGdvb2cuaTE4bi5iaWRpLnN0cmlwSHRtbElmTmVlZGVkXyhzdHIsIG9wdF9pc0h0bWwpO1xuICByZXR1cm4gZ29vZy5pMThuLmJpZGkuaXNSZXF1aXJlZEx0clJlXy50ZXN0KHN0cikgfHxcbiAgICAgICFnb29nLmkxOG4uYmlkaS5oYXNBbnlMdHIoc3RyKSAmJiAhZ29vZy5pMThuLmJpZGkuaGFzQW55UnRsKHN0cik7XG59O1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9ucyB0byBjaGVjayBpZiB0aGUgbGFzdCBzdHJvbmdseS1kaXJlY3Rpb25hbCBjaGFyYWN0ZXIgaW4gYVxuICogcGllY2Ugb2YgdGV4dCBpcyBMVFIuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5pMThuLmJpZGkubHRyRXhpdERpckNoZWNrUmVfID0gbmV3IFJlZ0V4cChcbiAgICAnWycgKyBnb29nLmkxOG4uYmlkaS5sdHJDaGFyc18gKyAnXVteJyArIGdvb2cuaTE4bi5iaWRpLnJ0bENoYXJzXyArICddKiQnKTtcblxuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgdG8gY2hlY2sgaWYgdGhlIGxhc3Qgc3Ryb25nbHktZGlyZWN0aW9uYWwgY2hhcmFjdGVyIGluIGFcbiAqIHBpZWNlIG9mIHRleHQgaXMgUlRMLlxuICogQHR5cGUge1JlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaTE4bi5iaWRpLnJ0bEV4aXREaXJDaGVja1JlXyA9IG5ldyBSZWdFeHAoXG4gICAgJ1snICsgZ29vZy5pMThuLmJpZGkucnRsQ2hhcnNfICsgJ11bXicgKyBnb29nLmkxOG4uYmlkaS5sdHJDaGFyc18gKyAnXSokJyk7XG5cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZXhpdCBkaXJlY3Rpb25hbGl0eSBhIHBpZWNlIG9mIHRleHQgaXMgTFRSLCBpLmUuIGlmIHRoZSBsYXN0XG4gKiBzdHJvbmdseS1kaXJlY3Rpb25hbCBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZyBpcyBMVFIuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyBiZWluZyBjaGVja2VkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzSHRtbCBXaGV0aGVyIHN0ciBpcyBIVE1MIC8gSFRNTC1lc2NhcGVkLlxuICogICAgIERlZmF1bHQ6IGZhbHNlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBMVFIgZXhpdCBkaXJlY3Rpb25hbGl0eSB3YXMgZGV0ZWN0ZWQuXG4gKi9cbmdvb2cuaTE4bi5iaWRpLmVuZHNXaXRoTHRyID0gZnVuY3Rpb24oc3RyLCBvcHRfaXNIdG1sKSB7XG4gIHJldHVybiBnb29nLmkxOG4uYmlkaS5sdHJFeGl0RGlyQ2hlY2tSZV8udGVzdChcbiAgICAgIGdvb2cuaTE4bi5iaWRpLnN0cmlwSHRtbElmTmVlZGVkXyhzdHIsIG9wdF9pc0h0bWwpKTtcbn07XG5cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZXhpdCBkaXJlY3Rpb25hbGl0eSBhIHBpZWNlIG9mIHRleHQgaXMgTFRSLCBpLmUuIGlmIHRoZSBsYXN0XG4gKiBzdHJvbmdseS1kaXJlY3Rpb25hbCBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZyBpcyBMVFIuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyBiZWluZyBjaGVja2VkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzSHRtbCBXaGV0aGVyIHN0ciBpcyBIVE1MIC8gSFRNTC1lc2NhcGVkLlxuICogICAgIERlZmF1bHQ6IGZhbHNlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBMVFIgZXhpdCBkaXJlY3Rpb25hbGl0eSB3YXMgZGV0ZWN0ZWQuXG4gKiBAZGVwcmVjYXRlZCBVc2UgZW5kc1dpdGhMdHIuXG4gKi9cbmdvb2cuaTE4bi5iaWRpLmlzTHRyRXhpdFRleHQgPSBnb29nLmkxOG4uYmlkaS5lbmRzV2l0aEx0cjtcblxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBleGl0IGRpcmVjdGlvbmFsaXR5IGEgcGllY2Ugb2YgdGV4dCBpcyBSVEwsIGkuZS4gaWYgdGhlIGxhc3RcbiAqIHN0cm9uZ2x5LWRpcmVjdGlvbmFsIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nIGlzIFJUTC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIGJlaW5nIGNoZWNrZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaXNIdG1sIFdoZXRoZXIgc3RyIGlzIEhUTUwgLyBIVE1MLWVzY2FwZWQuXG4gKiAgICAgRGVmYXVsdDogZmFsc2UuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIFJUTCBleGl0IGRpcmVjdGlvbmFsaXR5IHdhcyBkZXRlY3RlZC5cbiAqL1xuZ29vZy5pMThuLmJpZGkuZW5kc1dpdGhSdGwgPSBmdW5jdGlvbihzdHIsIG9wdF9pc0h0bWwpIHtcbiAgcmV0dXJuIGdvb2cuaTE4bi5iaWRpLnJ0bEV4aXREaXJDaGVja1JlXy50ZXN0KFxuICAgICAgZ29vZy5pMThuLmJpZGkuc3RyaXBIdG1sSWZOZWVkZWRfKHN0ciwgb3B0X2lzSHRtbCkpO1xufTtcblxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBleGl0IGRpcmVjdGlvbmFsaXR5IGEgcGllY2Ugb2YgdGV4dCBpcyBSVEwsIGkuZS4gaWYgdGhlIGxhc3RcbiAqIHN0cm9uZ2x5LWRpcmVjdGlvbmFsIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nIGlzIFJUTC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIGJlaW5nIGNoZWNrZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaXNIdG1sIFdoZXRoZXIgc3RyIGlzIEhUTUwgLyBIVE1MLWVzY2FwZWQuXG4gKiAgICAgRGVmYXVsdDogZmFsc2UuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIFJUTCBleGl0IGRpcmVjdGlvbmFsaXR5IHdhcyBkZXRlY3RlZC5cbiAqIEBkZXByZWNhdGVkIFVzZSBlbmRzV2l0aFJ0bC5cbiAqL1xuZ29vZy5pMThuLmJpZGkuaXNSdGxFeGl0VGV4dCA9IGdvb2cuaTE4bi5iaWRpLmVuZHNXaXRoUnRsO1xuXG5cbi8qKlxuICogQSByZWd1bGFyIGV4cHJlc3Npb24gZm9yIG1hdGNoaW5nIHJpZ2h0LXRvLWxlZnQgbGFuZ3VhZ2UgY29kZXMuXG4gKiBTZWUge0BsaW5rICNpc1J0bExhbmd1YWdlfSBmb3IgdGhlIGRlc2lnbi5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmkxOG4uYmlkaS5ydGxMb2NhbGVzUmVfID0gbmV3IFJlZ0V4cChcbiAgICAnXihhcnxja2J8ZHZ8aGV8aXd8ZmF8bnFvfHBzfHNkfHVnfHVyfHlpfCcgK1xuICAgICcuKlstX10oQXJhYnxIZWJyfFRoYWF8Tmtvb3xUZm5nKSknICtcbiAgICAnKD8hLipbLV9dKExhdG58Q3lybCkoJHwtfF8pKSgkfC18XyknLFxuICAgICdpJyk7XG5cblxuLyoqXG4gKiBDaGVjayBpZiBhIEJDUCA0NyAvIElJSSBsYW5ndWFnZSBjb2RlIGluZGljYXRlcyBhbiBSVEwgbGFuZ3VhZ2UsIGkuZS4gZWl0aGVyOlxuICogLSBhIGxhbmd1YWdlIGNvZGUgZXhwbGljaXRseSBzcGVjaWZ5aW5nIG9uZSBvZiB0aGUgcmlnaHQtdG8tbGVmdCBzY3JpcHRzLFxuICogICBlLmcuIFwiYXotQXJhYlwiLCBvcjxwPlxuICogLSBhIGxhbmd1YWdlIGNvZGUgc3BlY2lmeWluZyBvbmUgb2YgdGhlIGxhbmd1YWdlcyBub3JtYWxseSB3cml0dGVuIGluIGFcbiAqICAgcmlnaHQtdG8tbGVmdCBzY3JpcHQsIGUuZy4gXCJmYVwiIChGYXJzaSksIGV4Y2VwdCBvbmVzIGV4cGxpY2l0bHkgc3BlY2lmeWluZ1xuICogICBMYXRpbiBvciBDeXJpbGxpYyBzY3JpcHQgKHdoaWNoIGFyZSB0aGUgdXN1YWwgTFRSIGFsdGVybmF0aXZlcykuPHA+XG4gKiBUaGUgbGlzdCBvZiByaWdodC10by1sZWZ0IHNjcmlwdHMgYXBwZWFycyBpbiB0aGUgMTAwLTE5OSByYW5nZSBpblxuICogaHR0cDovL3d3dy51bmljb2RlLm9yZy9pc28xNTkyNC9pc28xNTkyNC1udW0uaHRtbCwgb2Ygd2hpY2ggQXJhYmljIGFuZFxuICogSGVicmV3IGFyZSBieSBmYXIgdGhlIG1vc3Qgd2lkZWx5IHVzZWQuIFdlIGFsc28gcmVjb2duaXplIFRoYWFuYSwgTidLbywgYW5kXG4gKiBUaWZpbmFnaCwgd2hpY2ggYWxzbyBoYXZlIHNpZ25pZmljYW50IG1vZGVybiB1c2FnZS4gVGhlIHJlc3QgKFN5cmlhYyxcbiAqIFNhbWFyaXRhbiwgTWFuZGFpYywgZXRjLikgc2VlbSB0byBoYXZlIGV4dHJlbWVseSBsaW1pdGVkIG9yIG5vIG1vZGVybiB1c2FnZVxuICogYW5kIGFyZSBub3QgcmVjb2duaXplZCB0byBzYXZlIG9uIGNvZGUgc2l6ZS5cbiAqIFRoZSBsYW5ndWFnZXMgdXN1YWxseSB3cml0dGVuIGluIGEgcmlnaHQtdG8tbGVmdCBzY3JpcHQgYXJlIHRha2VuIGFzIHRob3NlXG4gKiB3aXRoIFN1cHByZXNzLVNjcmlwdDogSGVicnxBcmFifFRoYWF8Tmtvb3xUZm5nICBpblxuICogaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9sYW5ndWFnZS1zdWJ0YWctcmVnaXN0cnksXG4gKiBhcyB3ZWxsIGFzIENlbnRyYWwgKG9yIFNvcmFuaSkgS3VyZGlzaCAoY2tiKSwgU2luZGhpIChzZCkgYW5kIFV5Z2h1ciAodWcpLlxuICogT3RoZXIgc3VidGFncyBvZiB0aGUgbGFuZ3VhZ2UgY29kZSwgZS5nLiByZWdpb25zIGxpa2UgRUcgKEVneXB0KSwgYXJlXG4gKiBpZ25vcmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGxhbmcgQkNQIDQ3IChhLmsuYSBJSUkpIGxhbmd1YWdlIGNvZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBsYW5ndWFnZSBjb2RlIGlzIGFuIFJUTCBsYW5ndWFnZS5cbiAqL1xuZ29vZy5pMThuLmJpZGkuaXNSdGxMYW5ndWFnZSA9IGZ1bmN0aW9uKGxhbmcpIHtcbiAgcmV0dXJuIGdvb2cuaTE4bi5iaWRpLnJ0bExvY2FsZXNSZV8udGVzdChsYW5nKTtcbn07XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gZm9yIGJyYWNrZXQgZ3VhcmQgcmVwbGFjZW1lbnQgaW4gaHRtbC5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmkxOG4uYmlkaS5icmFja2V0R3VhcmRIdG1sUmVfID1cbiAgICAvKFxcKC4qP1xcKSspfChcXFsuKj9cXF0rKXwoXFx7Lio/XFx9Kyl8KCZsdDsuKj8oJmd0OykrKS9nO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIGZvciBicmFja2V0IGd1YXJkIHJlcGxhY2VtZW50IGluIHRleHQuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5pMThuLmJpZGkuYnJhY2tldEd1YXJkVGV4dFJlXyA9XG4gICAgLyhcXCguKj9cXCkrKXwoXFxbLio/XFxdKyl8KFxcey4qP1xcfSspfCg8Lio/PispL2c7XG5cblxuLyoqXG4gKiBBcHBseSBicmFja2V0IGd1YXJkIHVzaW5nIGh0bWwgc3BhbiB0YWcuIFRoaXMgaXMgdG8gYWRkcmVzcyB0aGUgcHJvYmxlbSBvZlxuICogbWVzc3kgYnJhY2tldCBkaXNwbGF5IGZyZXF1ZW50bHkgaGFwcGVucyBpbiBSVEwgbGF5b3V0LlxuICogQHBhcmFtIHtzdHJpbmd9IHMgVGhlIHN0cmluZyB0aGF0IG5lZWQgdG8gYmUgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzUnRsQ29udGV4dCBzcGVjaWZpZXMgZGVmYXVsdCBkaXJlY3Rpb24gKHVzdWFsbHlcbiAqICAgICBkaXJlY3Rpb24gb2YgdGhlIFVJKS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHByb2Nlc3NlZCBzdHJpbmcsIHdpdGggYWxsIGJyYWNrZXQgZ3VhcmRlZC5cbiAqL1xuZ29vZy5pMThuLmJpZGkuZ3VhcmRCcmFja2V0SW5IdG1sID0gZnVuY3Rpb24ocywgb3B0X2lzUnRsQ29udGV4dCkge1xuICB2YXIgdXNlUnRsID0gb3B0X2lzUnRsQ29udGV4dCA9PT0gdW5kZWZpbmVkID9cbiAgICAgIGdvb2cuaTE4bi5iaWRpLmhhc0FueVJ0bChzKSA6IG9wdF9pc1J0bENvbnRleHQ7XG4gIGlmICh1c2VSdGwpIHtcbiAgICByZXR1cm4gcy5yZXBsYWNlKGdvb2cuaTE4bi5iaWRpLmJyYWNrZXRHdWFyZEh0bWxSZV8sXG4gICAgICAgICc8c3BhbiBkaXI9cnRsPiQmPC9zcGFuPicpO1xuICB9XG4gIHJldHVybiBzLnJlcGxhY2UoZ29vZy5pMThuLmJpZGkuYnJhY2tldEd1YXJkSHRtbFJlXyxcbiAgICAgICc8c3BhbiBkaXI9bHRyPiQmPC9zcGFuPicpO1xufTtcblxuXG4vKipcbiAqIEFwcGx5IGJyYWNrZXQgZ3VhcmQgdXNpbmcgTFJNIGFuZCBSTE0uIFRoaXMgaXMgdG8gYWRkcmVzcyB0aGUgcHJvYmxlbSBvZlxuICogbWVzc3kgYnJhY2tldCBkaXNwbGF5IGZyZXF1ZW50bHkgaGFwcGVucyBpbiBSVEwgbGF5b3V0LlxuICogVGhpcyB2ZXJzaW9uIHdvcmtzIGZvciBib3RoIHBsYWluIHRleHQgYW5kIGh0bWwuIEJ1dCBpdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBnb29kIGFzIGd1YXJkQnJhY2tldEluSHRtbCBpbiBzb21lIGNhc2VzLlxuICogQHBhcmFtIHtzdHJpbmd9IHMgVGhlIHN0cmluZyB0aGF0IG5lZWQgdG8gYmUgcHJvY2Vzc2VkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzUnRsQ29udGV4dCBzcGVjaWZpZXMgZGVmYXVsdCBkaXJlY3Rpb24gKHVzdWFsbHlcbiAqICAgICBkaXJlY3Rpb24gb2YgdGhlIFVJKS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHByb2Nlc3NlZCBzdHJpbmcsIHdpdGggYWxsIGJyYWNrZXQgZ3VhcmRlZC5cbiAqL1xuZ29vZy5pMThuLmJpZGkuZ3VhcmRCcmFja2V0SW5UZXh0ID0gZnVuY3Rpb24ocywgb3B0X2lzUnRsQ29udGV4dCkge1xuICB2YXIgdXNlUnRsID0gb3B0X2lzUnRsQ29udGV4dCA9PT0gdW5kZWZpbmVkID9cbiAgICAgIGdvb2cuaTE4bi5iaWRpLmhhc0FueVJ0bChzKSA6IG9wdF9pc1J0bENvbnRleHQ7XG4gIHZhciBtYXJrID0gdXNlUnRsID8gZ29vZy5pMThuLmJpZGkuRm9ybWF0LlJMTSA6IGdvb2cuaTE4bi5iaWRpLkZvcm1hdC5MUk07XG4gIHJldHVybiBzLnJlcGxhY2UoZ29vZy5pMThuLmJpZGkuYnJhY2tldEd1YXJkVGV4dFJlXywgbWFyayArICckJicgKyBtYXJrKTtcbn07XG5cblxuLyoqXG4gKiBFbmZvcmNlIHRoZSBodG1sIHNuaXBwZXQgaW4gUlRMIGRpcmVjdGlvbmFsaXR5IHJlZ2FyZGxlc3Mgb3ZlcmFsbCBjb250ZXh0LlxuICogSWYgdGhlIGh0bWwgcGllY2Ugd2FzIGVuY2xvc2VkIGJ5IHRhZywgZGlyIHdpbGwgYmUgYXBwbGllZCB0byBleGlzdGluZ1xuICogdGFnLCBvdGhlcndpc2UgYSBzcGFuIHRhZyB3aWxsIGJlIGFkZGVkIGFzIHdyYXBwZXIuIEZvciB0aGlzIHJlYXNvbiwgaWZcbiAqIGh0bWwgc25pcHBldCBzdGFydCB3aXRoIHdpdGggdGFnLCB0aGlzIHRhZyBtdXN0IGVuY2xvc2UgdGhlIHdob2xlIHBpZWNlLiBJZlxuICogdGhlIHRhZyBhbHJlYWR5IGhhcyBhIGRpciBzcGVjaWZpZWQsIHRoaXMgbmV3IG9uZSB3aWxsIG92ZXJyaWRlIGV4aXN0aW5nXG4gKiBvbmUgaW4gYmVoYXZpb3IgKHRlc3RlZCBvbiBGRiBhbmQgSUUpLlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWwgVGhlIHN0cmluZyB0aGF0IG5lZWQgdG8gYmUgcHJvY2Vzc2VkLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgcHJvY2Vzc2VkIHN0cmluZywgd2l0aCBkaXJlY3Rpb25hbGl0eSBlbmZvcmNlZCB0byBSVEwuXG4gKi9cbmdvb2cuaTE4bi5iaWRpLmVuZm9yY2VSdGxJbkh0bWwgPSBmdW5jdGlvbihodG1sKSB7XG4gIGlmIChodG1sLmNoYXJBdCgwKSA9PSAnPCcpIHtcbiAgICByZXR1cm4gaHRtbC5yZXBsYWNlKC88XFx3Ky8sICckJiBkaXI9cnRsJyk7XG4gIH1cbiAgLy8gJ1xcbicgaXMgaW1wb3J0YW50IGZvciBGRiBzbyB0aGF0IGl0IHdvbid0IGluY29ycmVjdGx5IG1lcmdlIHNwYW4gZ3JvdXBzXG4gIHJldHVybiAnXFxuPHNwYW4gZGlyPXJ0bD4nICsgaHRtbCArICc8L3NwYW4+Jztcbn07XG5cblxuLyoqXG4gKiBFbmZvcmNlIFJUTCBvbiBib3RoIGVuZCBvZiB0aGUgZ2l2ZW4gdGV4dCBwaWVjZSB1c2luZyB1bmljb2RlIEJpRGkgZm9ybWF0dGluZ1xuICogY2hhcmFjdGVycyBSTEUgYW5kIFBERi5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSBwaWVjZSBvZiB0ZXh0IHRoYXQgbmVlZCB0byBiZSB3cmFwcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgd3JhcHBlZCBzdHJpbmcgYWZ0ZXIgcHJvY2Vzcy5cbiAqL1xuZ29vZy5pMThuLmJpZGkuZW5mb3JjZVJ0bEluVGV4dCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuIGdvb2cuaTE4bi5iaWRpLkZvcm1hdC5STEUgKyB0ZXh0ICsgZ29vZy5pMThuLmJpZGkuRm9ybWF0LlBERjtcbn07XG5cblxuLyoqXG4gKiBFbmZvcmNlIHRoZSBodG1sIHNuaXBwZXQgaW4gUlRMIGRpcmVjdGlvbmFsaXR5IHJlZ2FyZGxlc3Mgb3ZlcmFsbCBjb250ZXh0LlxuICogSWYgdGhlIGh0bWwgcGllY2Ugd2FzIGVuY2xvc2VkIGJ5IHRhZywgZGlyIHdpbGwgYmUgYXBwbGllZCB0byBleGlzdGluZ1xuICogdGFnLCBvdGhlcndpc2UgYSBzcGFuIHRhZyB3aWxsIGJlIGFkZGVkIGFzIHdyYXBwZXIuIEZvciB0aGlzIHJlYXNvbiwgaWZcbiAqIGh0bWwgc25pcHBldCBzdGFydCB3aXRoIHdpdGggdGFnLCB0aGlzIHRhZyBtdXN0IGVuY2xvc2UgdGhlIHdob2xlIHBpZWNlLiBJZlxuICogdGhlIHRhZyBhbHJlYWR5IGhhcyBhIGRpciBzcGVjaWZpZWQsIHRoaXMgbmV3IG9uZSB3aWxsIG92ZXJyaWRlIGV4aXN0aW5nXG4gKiBvbmUgaW4gYmVoYXZpb3IgKHRlc3RlZCBvbiBGRiBhbmQgSUUpLlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWwgVGhlIHN0cmluZyB0aGF0IG5lZWQgdG8gYmUgcHJvY2Vzc2VkLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgcHJvY2Vzc2VkIHN0cmluZywgd2l0aCBkaXJlY3Rpb25hbGl0eSBlbmZvcmNlZCB0byBSVEwuXG4gKi9cbmdvb2cuaTE4bi5iaWRpLmVuZm9yY2VMdHJJbkh0bWwgPSBmdW5jdGlvbihodG1sKSB7XG4gIGlmIChodG1sLmNoYXJBdCgwKSA9PSAnPCcpIHtcbiAgICByZXR1cm4gaHRtbC5yZXBsYWNlKC88XFx3Ky8sICckJiBkaXI9bHRyJyk7XG4gIH1cbiAgLy8gJ1xcbicgaXMgaW1wb3J0YW50IGZvciBGRiBzbyB0aGF0IGl0IHdvbid0IGluY29ycmVjdGx5IG1lcmdlIHNwYW4gZ3JvdXBzXG4gIHJldHVybiAnXFxuPHNwYW4gZGlyPWx0cj4nICsgaHRtbCArICc8L3NwYW4+Jztcbn07XG5cblxuLyoqXG4gKiBFbmZvcmNlIExUUiBvbiBib3RoIGVuZCBvZiB0aGUgZ2l2ZW4gdGV4dCBwaWVjZSB1c2luZyB1bmljb2RlIEJpRGkgZm9ybWF0dGluZ1xuICogY2hhcmFjdGVycyBMUkUgYW5kIFBERi5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSBwaWVjZSBvZiB0ZXh0IHRoYXQgbmVlZCB0byBiZSB3cmFwcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgd3JhcHBlZCBzdHJpbmcgYWZ0ZXIgcHJvY2Vzcy5cbiAqL1xuZ29vZy5pMThuLmJpZGkuZW5mb3JjZUx0ckluVGV4dCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuIGdvb2cuaTE4bi5iaWRpLkZvcm1hdC5MUkUgKyB0ZXh0ICsgZ29vZy5pMThuLmJpZGkuRm9ybWF0LlBERjtcbn07XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gZmluZCBkaW1lbnNpb25zIHN1Y2ggYXMgXCJwYWRkaW5nOiAuMyAwLjRleCA1cHggNjtcIlxuICogQHR5cGUge1JlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaTE4bi5iaWRpLmRpbWVuc2lvbnNSZV8gPVxuICAgIC86XFxzKihbLlxcZF1bLlxcd10qKVxccysoWy5cXGRdWy5cXHddKilcXHMrKFsuXFxkXVsuXFx3XSopXFxzKyhbLlxcZF1bLlxcd10qKS9nO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIGZvciBsZWZ0LlxuICogQHR5cGUge1JlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaTE4bi5iaWRpLmxlZnRSZV8gPSAvbGVmdC9naTtcblxuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgcmlnaHQuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5pMThuLmJpZGkucmlnaHRSZV8gPSAvcmlnaHQvZ2k7XG5cblxuLyoqXG4gKiBQbGFjZWhvbGRlciByZWd1bGFyIGV4cHJlc3Npb24gZm9yIHN3YXBwaW5nLlxuICogQHR5cGUge1JlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaTE4bi5iaWRpLnRlbXBSZV8gPSAvJSUlJS9nO1xuXG5cbi8qKlxuICogU3dhcCBsb2NhdGlvbiBwYXJhbWV0ZXJzIGFuZCAnbGVmdCcvJ3JpZ2h0JyBpbiBDU1Mgc3BlY2lmaWNhdGlvbi4gVGhlXG4gKiBwcm9jZXNzZWQgc3RyaW5nIHdpbGwgYmUgc3VpdGVkIGZvciBSVEwgbGF5b3V0LiBUaG91Z2ggdGhpcyBmdW5jdGlvbiBjYW5cbiAqIGNvdmVyIG1vc3QgY2FzZXMsIHRoZXJlIGFyZSBhbHdheXMgZXhjZXB0aW9ucy4gSXQgaXMgc3VnZ2VzdGVkIHRvIHB1dFxuICogdGhvc2UgZXhjZXB0aW9ucyBpbiBzZXBhcmF0ZSBncm91cCBvZiBDU1Mgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1N0ciBDU1Mgc3BlZmljYXRpb24gc3RyaW5nLlxuICogQHJldHVybiB7c3RyaW5nfSBQcm9jZXNzZWQgQ1NTIHNwZWNpZmljYXRpb24gc3RyaW5nLlxuICovXG5nb29nLmkxOG4uYmlkaS5taXJyb3JDU1MgPSBmdW5jdGlvbihjc3NTdHIpIHtcbiAgcmV0dXJuIGNzc1N0ci5cbiAgICAgIC8vIHJldmVyc2UgZGltZW5zaW9uc1xuICAgICAgcmVwbGFjZShnb29nLmkxOG4uYmlkaS5kaW1lbnNpb25zUmVfLCAnOiQxICQ0ICQzICQyJykuXG4gICAgICByZXBsYWNlKGdvb2cuaTE4bi5iaWRpLmxlZnRSZV8sICclJSUlJykuICAgICAgICAgIC8vIHN3YXAgbGVmdCBhbmQgcmlnaHRcbiAgICAgIHJlcGxhY2UoZ29vZy5pMThuLmJpZGkucmlnaHRSZV8sIGdvb2cuaTE4bi5iaWRpLkxFRlQpLlxuICAgICAgcmVwbGFjZShnb29nLmkxOG4uYmlkaS50ZW1wUmVfLCBnb29nLmkxOG4uYmlkaS5SSUdIVCk7XG59O1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIGZvciBoZWJyZXcgZG91YmxlIHF1b3RlIHN1YnN0aXR1dGlvbiwgZmluZGluZyBxdW90ZVxuICogZGlyZWN0bHkgYWZ0ZXIgaGVicmV3IGNoYXJhY3RlcnMuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5pMThuLmJpZGkuZG91YmxlUXVvdGVTdWJzdGl0dXRlUmVfID0gLyhbXFx1MDU5MS1cXHUwNWYyXSlcIi9nO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIGZvciBoZWJyZXcgc2luZ2xlIHF1b3RlIHN1YnN0aXR1dGlvbiwgZmluZGluZyBxdW90ZVxuICogZGlyZWN0bHkgYWZ0ZXIgaGVicmV3IGNoYXJhY3RlcnMuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5pMThuLmJpZGkuc2luZ2xlUXVvdGVTdWJzdGl0dXRlUmVfID0gLyhbXFx1MDU5MS1cXHUwNWYyXSknL2c7XG5cblxuLyoqXG4gKiBSZXBsYWNlIHRoZSBkb3VibGUgYW5kIHNpbmdsZSBxdW90ZSBkaXJlY3RseSBhZnRlciBhIEhlYnJldyBjaGFyYWN0ZXIgd2l0aFxuICogR0VSRVNIIGFuZCBHRVJTSEFZSU0uIEluIHN1Y2ggY2FzZSwgbW9zdCBsaWtlbHkgdGhhdCdzIHVzZXIgaW50ZW50aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdGhhdCBuZWVkIHRvIGJlIHByb2Nlc3NlZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gUHJvY2Vzc2VkIHN0cmluZyB3aXRoIGRvdWJsZS9zaW5nbGUgcXVvdGUgcmVwbGFjZWQuXG4gKi9cbmdvb2cuaTE4bi5iaWRpLm5vcm1hbGl6ZUhlYnJld1F1b3RlID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBzdHIuXG4gICAgICByZXBsYWNlKGdvb2cuaTE4bi5iaWRpLmRvdWJsZVF1b3RlU3Vic3RpdHV0ZVJlXywgJyQxXFx1MDVmNCcpLlxuICAgICAgcmVwbGFjZShnb29nLmkxOG4uYmlkaS5zaW5nbGVRdW90ZVN1YnN0aXR1dGVSZV8sICckMVxcdTA1ZjMnKTtcbn07XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gc3BsaXQgYSBzdHJpbmcgaW50byBcIndvcmRzXCIgZm9yIGRpcmVjdGlvbmFsaXR5XG4gKiBlc3RpbWF0aW9uIGJhc2VkIG9uIHJlbGF0aXZlIHdvcmQgY291bnRzLlxuICogQHR5cGUge1JlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaTE4bi5iaWRpLndvcmRTZXBhcmF0b3JSZV8gPSAvXFxzKy87XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gY2hlY2sgaWYgYSBzdHJpbmcgY29udGFpbnMgYW55IG51bWVyYWxzLiBVc2VkIHRvXG4gKiBkaWZmZXJlbnRpYXRlIGJldHdlZW4gY29tcGxldGVseSBuZXV0cmFsIHN0cmluZ3MgYW5kIHRob3NlIGNvbnRhaW5pbmdcbiAqIG51bWJlcnMsIHdoaWNoIGFyZSB3ZWFrbHkgTFRSLlxuICpcbiAqIE5hdGl2ZSBBcmFiaWMgZGlnaXRzIChcXHUwNjYwIC0gXFx1MDY2OSkgYXJlIG5vdCBpbmNsdWRlZCBiZWNhdXNlIGFsdGhvdWdoIHRoZXlcbiAqIGRvIGZsb3cgbGVmdC10by1yaWdodCBpbnNpZGUgYSBudW1iZXIsIHRoaXMgaXMgdGhlIGNhc2UgZXZlbiBpZiB0aGUgIG92ZXJhbGxcbiAqIGRpcmVjdGlvbmFsaXR5IGlzIFJUTCwgYW5kIGEgbWF0aGVtYXRpY2FsIGV4cHJlc3Npb24gdXNpbmcgdGhlc2UgZGlnaXRzIGlzXG4gKiBzdXBwb3NlZCB0byBmbG93IHJpZ2h0LXRvLWxlZnQgb3ZlcmFsbCwgaW5jbHVkaW5nIHVuYXJ5IHBsdXMgYW5kIG1pbnVzXG4gKiBhcHBlYXJpbmcgdG8gdGhlIHJpZ2h0IG9mIGEgbnVtYmVyLCBhbmQgdGhpcyBkb2VzIGRlcGVuZCBvbiB0aGUgb3ZlcmFsbFxuICogZGlyZWN0aW9uYWxpdHkgYmVpbmcgUlRMLiBUaGUgZGlnaXRzIHVzZWQgaW4gRmFyc2kgKFxcdTA2RjAgLSBcXHUwNkY5KSwgb24gdGhlXG4gKiBvdGhlciBoYW5kLCBhcmUgaW5jbHVkZWQsIHNpbmNlIEZhcnNpIG1hdGggKGluY2x1ZGluZyB1bmFyeSBwbHVzIGFuZCBtaW51cylcbiAqIGRvZXMgZmxvdyBsZWZ0LXRvLXJpZ2h0LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmkxOG4uYmlkaS5oYXNOdW1lcmFsc1JlXyA9IC9bXFxkXFx1MDZmMC1cXHUwNmY5XS87XG5cblxuLyoqXG4gKiBUaGlzIGNvbnN0YW50IGNvbnRyb2xzIHRocmVzaG9sZCBvZiBSVEwgZGlyZWN0aW9uYWxpdHkuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5pMThuLmJpZGkucnRsRGV0ZWN0aW9uVGhyZXNob2xkXyA9IDAuNDA7XG5cblxuLyoqXG4gKiBFc3RpbWF0ZXMgdGhlIGRpcmVjdGlvbmFsaXR5IG9mIGEgc3RyaW5nIGJhc2VkIG9uIHJlbGF0aXZlIHdvcmQgY291bnRzLlxuICogSWYgdGhlIG51bWJlciBvZiBSVEwgd29yZHMgaXMgYWJvdmUgYSBjZXJ0YWluIHBlcmNlbnRhZ2Ugb2YgdGhlIHRvdGFsIG51bWJlclxuICogb2Ygc3Ryb25nbHkgZGlyZWN0aW9uYWwgd29yZHMsIHJldHVybnMgUlRMLlxuICogT3RoZXJ3aXNlLCBpZiBhbnkgd29yZHMgYXJlIHN0cm9uZ2x5IG9yIHdlYWtseSBMVFIsIHJldHVybnMgTFRSLlxuICogT3RoZXJ3aXNlLCByZXR1cm5zIFVOS05PV04sIHdoaWNoIGlzIHVzZWQgdG8gbWVhbiBcIm5ldXRyYWxcIi5cbiAqIE51bWJlcnMgYXJlIGNvdW50ZWQgYXMgd2Vha2x5IExUUi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBiZSBjaGVja2VkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzSHRtbCBXaGV0aGVyIHN0ciBpcyBIVE1MIC8gSFRNTC1lc2NhcGVkLlxuICogICAgIERlZmF1bHQ6IGZhbHNlLlxuICogQHJldHVybiB7Z29vZy5pMThuLmJpZGkuRGlyfSBFc3RpbWF0ZWQgb3ZlcmFsbCBkaXJlY3Rpb25hbGl0eSBvZiB7QGNvZGUgc3RyfS5cbiAqL1xuZ29vZy5pMThuLmJpZGkuZXN0aW1hdGVEaXJlY3Rpb24gPSBmdW5jdGlvbihzdHIsIG9wdF9pc0h0bWwpIHtcbiAgdmFyIHJ0bENvdW50ID0gMDtcbiAgdmFyIHRvdGFsQ291bnQgPSAwO1xuICB2YXIgaGFzV2Vha2x5THRyID0gZmFsc2U7XG4gIHZhciB0b2tlbnMgPSBnb29nLmkxOG4uYmlkaS5zdHJpcEh0bWxJZk5lZWRlZF8oc3RyLCBvcHRfaXNIdG1sKS5cbiAgICAgIHNwbGl0KGdvb2cuaTE4bi5iaWRpLndvcmRTZXBhcmF0b3JSZV8pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICBpZiAoZ29vZy5pMThuLmJpZGkuc3RhcnRzV2l0aFJ0bCh0b2tlbikpIHtcbiAgICAgIHJ0bENvdW50Kys7XG4gICAgICB0b3RhbENvdW50Kys7XG4gICAgfSBlbHNlIGlmIChnb29nLmkxOG4uYmlkaS5pc1JlcXVpcmVkTHRyUmVfLnRlc3QodG9rZW4pKSB7XG4gICAgICBoYXNXZWFrbHlMdHIgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoZ29vZy5pMThuLmJpZGkuaGFzQW55THRyKHRva2VuKSkge1xuICAgICAgdG90YWxDb3VudCsrO1xuICAgIH0gZWxzZSBpZiAoZ29vZy5pMThuLmJpZGkuaGFzTnVtZXJhbHNSZV8udGVzdCh0b2tlbikpIHtcbiAgICAgIGhhc1dlYWtseUx0ciA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvdGFsQ291bnQgPT0gMCA/XG4gICAgICAoaGFzV2Vha2x5THRyID8gZ29vZy5pMThuLmJpZGkuRGlyLkxUUiA6IGdvb2cuaTE4bi5iaWRpLkRpci5ORVVUUkFMKSA6XG4gICAgICAocnRsQ291bnQgLyB0b3RhbENvdW50ID4gZ29vZy5pMThuLmJpZGkucnRsRGV0ZWN0aW9uVGhyZXNob2xkXyA/XG4gICAgICAgICAgZ29vZy5pMThuLmJpZGkuRGlyLlJUTCA6IGdvb2cuaTE4bi5iaWRpLkRpci5MVFIpO1xufTtcblxuXG4vKipcbiAqIENoZWNrIHRoZSBkaXJlY3Rpb25hbGl0eSBvZiBhIHBpZWNlIG9mIHRleHQsIHJldHVybiB0cnVlIGlmIHRoZSBwaWVjZSBvZlxuICogdGV4dCBzaG91bGQgYmUgbGFpZCBvdXQgaW4gUlRMIGRpcmVjdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHBpZWNlIG9mIHRleHQgdGhhdCBuZWVkIHRvIGJlIGRldGVjdGVkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzSHRtbCBXaGV0aGVyIHN0ciBpcyBIVE1MIC8gSFRNTC1lc2NhcGVkLlxuICogICAgIERlZmF1bHQ6IGZhbHNlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHBpZWNlIG9mIHRleHQgc2hvdWxkIGJlIGxhaWQgb3V0IGluIFJUTC5cbiAqL1xuZ29vZy5pMThuLmJpZGkuZGV0ZWN0UnRsRGlyZWN0aW9uYWxpdHkgPSBmdW5jdGlvbihzdHIsIG9wdF9pc0h0bWwpIHtcbiAgcmV0dXJuIGdvb2cuaTE4bi5iaWRpLmVzdGltYXRlRGlyZWN0aW9uKHN0ciwgb3B0X2lzSHRtbCkgPT1cbiAgICAgIGdvb2cuaTE4bi5iaWRpLkRpci5SVEw7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0ZXh0IGlucHV0IGVsZW1lbnQncyBkaXJlY3Rpb25hbGl0eSBhbmQgdGV4dCBhbGlnbm1lbnQgYmFzZWQgb24gYVxuICogZ2l2ZW4gZGlyZWN0aW9uYWxpdHkuIERvZXMgbm90aGluZyBpZiB0aGUgZ2l2ZW4gZGlyZWN0aW9uYWxpdHkgaXMgdW5rbm93biBvclxuICogbmV1dHJhbC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBJbnB1dCBmaWVsZCBlbGVtZW50IHRvIHNldCBkaXJlY3Rpb25hbGl0eSB0by5cbiAqIEBwYXJhbSB7Z29vZy5pMThuLmJpZGkuRGlyfG51bWJlcnxib29sZWFufG51bGx9IGRpciBEZXNpcmVkIGRpcmVjdGlvbmFsaXR5LFxuICogICAgIGdpdmVuIGluIG9uZSBvZiB0aGUgZm9sbG93aW5nIGZvcm1hdHM6XG4gKiAgICAgMS4gQSBnb29nLmkxOG4uYmlkaS5EaXIgY29uc3RhbnQuXG4gKiAgICAgMi4gQSBudW1iZXIgKHBvc2l0aXZlID0gTFJULCBuZWdhdGl2ZSA9IFJUTCwgMCA9IG5ldXRyYWwpLlxuICogICAgIDMuIEEgYm9vbGVhbiAodHJ1ZSA9IFJUTCwgZmFsc2UgPSBMVFIpLlxuICogICAgIDQuIEEgbnVsbCBmb3IgdW5rbm93biBkaXJlY3Rpb25hbGl0eS5cbiAqL1xuZ29vZy5pMThuLmJpZGkuc2V0RWxlbWVudERpckFuZEFsaWduID0gZnVuY3Rpb24oZWxlbWVudCwgZGlyKSB7XG4gIGlmIChlbGVtZW50KSB7XG4gICAgZGlyID0gZ29vZy5pMThuLmJpZGkudG9EaXIoZGlyKTtcbiAgICBpZiAoZGlyKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9XG4gICAgICAgICAgZGlyID09IGdvb2cuaTE4bi5iaWRpLkRpci5SVEwgP1xuICAgICAgICAgIGdvb2cuaTE4bi5iaWRpLlJJR0hUIDogZ29vZy5pMThuLmJpZGkuTEVGVDtcbiAgICAgIGVsZW1lbnQuZGlyID0gZGlyID09IGdvb2cuaTE4bi5iaWRpLkRpci5SVEwgPyAncnRsJyA6ICdsdHInO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIFNldHMgZWxlbWVudCBkaXIgYmFzZWQgb24gZXN0aW1hdGVkIGRpcmVjdGlvbmFsaXR5IG9mIHRoZSBnaXZlbiB0ZXh0LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqL1xuZ29vZy5pMThuLmJpZGkuc2V0RWxlbWVudERpckJ5VGV4dERpcmVjdGlvbmFsaXR5ID0gZnVuY3Rpb24oZWxlbWVudCwgdGV4dCkge1xuICBzd2l0Y2ggKGdvb2cuaTE4bi5iaWRpLmVzdGltYXRlRGlyZWN0aW9uKHRleHQpKSB7XG4gICAgY2FzZSAoZ29vZy5pMThuLmJpZGkuRGlyLkxUUik6XG4gICAgICBlbGVtZW50LmRpciA9ICdsdHInO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAoZ29vZy5pMThuLmJpZGkuRGlyLlJUTCk6XG4gICAgICBlbGVtZW50LmRpciA9ICdydGwnO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIERlZmF1bHQgZm9yIG5vIGRpcmVjdGlvbiwgaW5oZXJpdCBmcm9tIGRvY3VtZW50LlxuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2RpcicpO1xuICB9XG59O1xuXG5cblxuLyoqXG4gKiBTdHJpbmdzIHRoYXQgaGF2ZSBhbiAob3B0aW9uYWwpIGtub3duIGRpcmVjdGlvbi5cbiAqXG4gKiBJbXBsZW1lbnRhdGlvbnMgb2YgdGhpcyBpbnRlcmZhY2UgYXJlIHN0cmluZy1saWtlIG9iamVjdHMgdGhhdCBjYXJyeSBhblxuICogYXR0YWNoZWQgZGlyZWN0aW9uLCBpZiBrbm93bi5cbiAqIEBpbnRlcmZhY2VcbiAqL1xuZ29vZy5pMThuLmJpZGkuRGlyZWN0aW9uYWxTdHJpbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5cbi8qKlxuICogSW50ZXJmYWNlIG1hcmtlciBvZiB0aGUgRGlyZWN0aW9uYWxTdHJpbmcgaW50ZXJmYWNlLlxuICpcbiAqIFRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGF0IHJ1bnRpbWUgd2hldGhlciBvciBub3QgYW4gb2JqZWN0XG4gKiBpbXBsZW1lbnRzIHRoaXMgaW50ZXJmYWNlLiAgQWxsIGltcGxlbWVudGF0aW9ucyBvZiB0aGlzIGludGVyZmFjZSBzZXQgdGhpc1xuICogcHJvcGVydHkgdG8ge0Bjb2RlIHRydWV9LlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cuaTE4bi5iaWRpLkRpcmVjdGlvbmFsU3RyaW5nLnByb3RvdHlwZS5cbiAgICBpbXBsZW1lbnRzR29vZ0kxOG5CaWRpRGlyZWN0aW9uYWxTdHJpbmc7XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhpcyBvYmplY3QncyBrbm93biBkaXJlY3Rpb24gKGlmIGFueSkuXG4gKiBAcmV0dXJuIHs/Z29vZy5pMThuLmJpZGkuRGlyfSBUaGUga25vd24gZGlyZWN0aW9uLiBOdWxsIGlmIHVua25vd24uXG4gKi9cbmdvb2cuaTE4bi5iaWRpLkRpcmVjdGlvbmFsU3RyaW5nLnByb3RvdHlwZS5nZXREaXJlY3Rpb247XG4iLCIvLyBDb3B5cmlnaHQgMjAxMyBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFRoZSBTYWZlVXJsIHR5cGUgYW5kIGl0cyBidWlsZGVycy5cbiAqXG4gKiBUT0RPKHh0b2YpOiBMaW5rIHRvIGRvY3VtZW50IHN0YXRpbmcgdHlwZSBjb250cmFjdC5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuaHRtbC5TYWZlVXJsJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZnMudXJsJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuaTE4bi5iaWRpLkRpcicpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmkxOG4uYmlkaS5EaXJlY3Rpb25hbFN0cmluZycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZy5Db25zdCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZy5UeXBlZFN0cmluZycpO1xuXG5cblxuLyoqXG4gKiBBIHN0cmluZyB0aGF0IGlzIHNhZmUgdG8gdXNlIGluIFVSTCBjb250ZXh0IGluIERPTSBBUElzIGFuZCBIVE1MIGRvY3VtZW50cy5cbiAqXG4gKiBBIFNhZmVVcmwgaXMgYSBzdHJpbmctbGlrZSBvYmplY3QgdGhhdCBjYXJyaWVzIHRoZSBzZWN1cml0eSB0eXBlIGNvbnRyYWN0XG4gKiB0aGF0IGl0cyB2YWx1ZSBhcyBhIHN0cmluZyB3aWxsIG5vdCBjYXVzZSB1bnRydXN0ZWQgc2NyaXB0IGV4ZWN1dGlvblxuICogd2hlbiBldmFsdWF0ZWQgYXMgYSBoeXBlcmxpbmsgVVJMIGluIGEgYnJvd3Nlci5cbiAqXG4gKiBWYWx1ZXMgb2YgdGhpcyB0eXBlIGFyZSBndWFyYW50ZWVkIHRvIGJlIHNhZmUgdG8gdXNlIGluIFVSTC9oeXBlcmxpbmtcbiAqIGNvbnRleHRzLCBzdWNoIGFzLCBhc3NpZ25tZW50IHRvIFVSTC12YWx1ZWQgRE9NIHByb3BlcnRpZXMsIG9yXG4gKiBpbnRlcnBvbGF0aW9uIGludG8gYSBIVE1MIHRlbXBsYXRlIGluIFVSTCBjb250ZXh0IChlLmcuLCBpbnNpZGUgYSBocmVmXG4gKiBhdHRyaWJ1dGUpLCBpbiB0aGUgc2Vuc2UgdGhhdCB0aGUgdXNlIHdpbGwgbm90IHJlc3VsdCBpbiBhXG4gKiBDcm9zcy1TaXRlLVNjcmlwdGluZyB2dWxuZXJhYmlsaXR5LlxuICpcbiAqIE5vdGUgdGhhdCwgYXMgZG9jdW1lbnRlZCBpbiB7QGNvZGUgZ29vZy5odG1sLlNhZmVVcmwudW53cmFwfSwgdGhpcyB0eXBlJ3NcbiAqIGNvbnRyYWN0IGRvZXMgbm90IGd1YXJhbnRlZSB0aGF0IGluc3RhbmNlcyBhcmUgc2FmZSB0byBpbnRlcnBvbGF0ZSBpbnRvIEhUTUxcbiAqIHdpdGhvdXQgYXBwcm9wcmlhdGUgZXNjYXBpbmcuXG4gKlxuICogTm90ZSBhbHNvIHRoYXQgdGhpcyB0eXBlJ3MgY29udHJhY3QgZG9lcyBub3QgaW1wbHkgYW55IGd1YXJhbnRlZXMgcmVnYXJkaW5nXG4gKiB0aGUgcmVzb3VyY2UgdGhlIFVSTCByZWZlcnMgdG8uICBJbiBwYXJ0aWN1bGFyLCBTYWZlVXJscyBhcmUgPGI+bm90PC9iPlxuICogc2FmZSB0byB1c2UgaW4gYSBjb250ZXh0IHdoZXJlIHRoZSByZWZlcnJlZC10byByZXNvdXJjZSBpcyBpbnRlcnByZXRlZCBhc1xuICogdHJ1c3RlZCBjb2RlLCBlLmcuLCBhcyB0aGUgc3JjIG9mIGEgc2NyaXB0IHRhZy5cbiAqXG4gKiBJbnN0YW5jZXMgb2YgdGhpcyB0eXBlIG11c3QgYmUgY3JlYXRlZCB2aWEgdGhlIGZhY3RvcnkgbWV0aG9kc1xuICogKHtAY29kZSBnb29nLmh0bWwuU2FmZVVybC5mcm9tQ29uc3RhbnR9LCB7QGNvZGUgZ29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemV9KSxcbiAqIGV0YyBhbmQgbm90IGJ5IGludm9raW5nIGl0cyBjb25zdHJ1Y3Rvci4gIFRoZSBjb25zdHJ1Y3RvciBpbnRlbnRpb25hbGx5XG4gKiB0YWtlcyBubyBwYXJhbWV0ZXJzIGFuZCB0aGUgdHlwZSBpcyBpbW11dGFibGU7IGhlbmNlIG9ubHkgYSBkZWZhdWx0IGluc3RhbmNlXG4gKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBlbXB0eSBzdHJpbmcgY2FuIGJlIG9idGFpbmVkIHZpYSBjb25zdHJ1Y3RvciBpbnZvY2F0aW9uLlxuICpcbiAqIEBzZWUgZ29vZy5odG1sLlNhZmVVcmwjZnJvbUNvbnN0YW50XG4gKiBAc2VlIGdvb2cuaHRtbC5TYWZlVXJsI2Zyb21cbiAqIEBzZWUgZ29vZy5odG1sLlNhZmVVcmwjc2FuaXRpemVcbiAqIEBjb25zdHJ1Y3RvclxuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKiBAaW1wbGVtZW50cyB7Z29vZy5pMThuLmJpZGkuRGlyZWN0aW9uYWxTdHJpbmd9XG4gKiBAaW1wbGVtZW50cyB7Z29vZy5zdHJpbmcuVHlwZWRTdHJpbmd9XG4gKi9cbmdvb2cuaHRtbC5TYWZlVXJsID0gZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVkIHZhbHVlIG9mIHRoaXMgU2FmZVVybC4gIFRoZSBmaWVsZCBoYXMgYSBwdXJwb3NlbHkgdWdseVxuICAgKiBuYW1lIHRvIG1ha2UgKG5vbi1jb21waWxlZCkgY29kZSB0aGF0IGF0dGVtcHRzIHRvIGRpcmVjdGx5IGFjY2VzcyB0aGlzXG4gICAqIGZpZWxkIHN0YW5kIG91dC5cbiAgICogQHByaXZhdGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZUh0bWxXcmFwcGVkVmFsdWVfID0gJyc7XG5cbiAgLyoqXG4gICAqIEEgdHlwZSBtYXJrZXIgdXNlZCB0byBpbXBsZW1lbnQgYWRkaXRpb25hbCBydW4tdGltZSB0eXBlIGNoZWNraW5nLlxuICAgKiBAc2VlIGdvb2cuaHRtbC5TYWZlVXJsI3Vud3JhcFxuICAgKiBAY29uc3RcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuU0FGRV9VUkxfVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfID1cbiAgICAgIGdvb2cuaHRtbC5TYWZlVXJsLlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXztcbn07XG5cblxuLyoqXG4gKiBUaGUgaW5ub2N1b3VzIHN0cmluZyBnZW5lcmF0ZWQgYnkgZ29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemUgd2hlbiBwYXNzZWRcbiAqIGFuIHVuc2FmZSBVUkwuXG4gKlxuICogYWJvdXQ6aW52YWxpZCBpcyByZWdpc3RlcmVkIGluXG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXZhbHVlcy8jYWJvdXQtaW52YWxpZC5cbiAqIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY2OTQjc2VjdGlvbi0yLjIuMSBwZXJtaXRzIGFib3V0IFVSTHMgdG9cbiAqIGNvbnRhaW4gYSBmcmFnbWVudCwgd2hpY2ggaXMgbm90IHRvIGJlIGNvbnNpZGVyZWQgd2hlbiBkZXRlcm1pbmluZyBpZiBhblxuICogYWJvdXQgVVJMIGlzIHdlbGwta25vd24uXG4gKlxuICogVXNpbmcgYWJvdXQ6aW52YWxpZCBzZWVtcyBwcmVmZXJhYmxlIHRvIHVzaW5nIGEgZml4ZWQgZGF0YSBVUkwsIHNpbmNlXG4gKiBicm93c2VycyBtaWdodCBjaG9vc2UgdG8gbm90IHJlcG9ydCBDU1AgdmlvbGF0aW9ucyBvbiBpdCwgYXMgbGVnaXRpbWF0ZVxuICogQ1NTIGZ1bmN0aW9uIGNhbGxzIHRvIGF0dHIoKSBjYW4gcmVzdWx0IGluIHRoaXMgVVJMIGJlaW5nIHByb2R1Y2VkLiBJdCBpc1xuICogYWxzbyBhIHN0YW5kYXJkIFVSTCB3aGljaCBtYXRjaGVzIGV4YWN0bHkgdGhlIHNlbWFudGljcyB3ZSBuZWVkOlxuICogXCJUaGUgYWJvdXQ6aW52YWxpZCBVUkkgcmVmZXJlbmNlcyBhIG5vbi1leGlzdGVudCBkb2N1bWVudCB3aXRoIGEgZ2VuZXJpY1xuICogZXJyb3IgY29uZGl0aW9uLiBJdCBjYW4gYmUgdXNlZCB3aGVuIGEgVVJJIGlzIG5lY2Vzc2FyeSwgYnV0IHRoZSBkZWZhdWx0XG4gKiB2YWx1ZSBzaG91bGRuJ3QgYmUgcmVzb2x2ZWFibGUgYXMgYW55IHR5cGUgb2YgZG9jdW1lbnRcIi5cbiAqXG4gKiBAY29uc3Qge3N0cmluZ31cbiAqL1xuZ29vZy5odG1sLlNhZmVVcmwuSU5OT0NVT1VTX1NUUklORyA9ICdhYm91dDppbnZhbGlkI3pDbG9zdXJleic7XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqIEBjb25zdFxuICovXG5nb29nLmh0bWwuU2FmZVVybC5wcm90b3R5cGUuaW1wbGVtZW50c0dvb2dTdHJpbmdUeXBlZFN0cmluZyA9IHRydWU7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgU2FmZVVybCdzIHZhbHVlIGEgc3RyaW5nLlxuICpcbiAqIElNUE9SVEFOVDogSW4gY29kZSB3aGVyZSBpdCBpcyBzZWN1cml0eSByZWxldmFudCB0aGF0IGFuIG9iamVjdCdzIHR5cGUgaXNcbiAqIGluZGVlZCB7QGNvZGUgU2FmZVVybH0sIHVzZSB7QGNvZGUgZ29vZy5odG1sLlNhZmVVcmwudW53cmFwfSBpbnN0ZWFkIG9mIHRoaXNcbiAqIG1ldGhvZC4gSWYgaW4gZG91YnQsIGFzc3VtZSB0aGF0IGl0J3Mgc2VjdXJpdHkgcmVsZXZhbnQuIEluIHBhcnRpY3VsYXIsIG5vdGVcbiAqIHRoYXQgZ29vZy5odG1sIGZ1bmN0aW9ucyB3aGljaCByZXR1cm4gYSBnb29nLmh0bWwgdHlwZSBkbyBub3QgZ3VhcmFudGVlIHRoYXRcbiAqIHRoZSByZXR1cm5lZCBpbnN0YW5jZSBpcyBvZiB0aGUgcmlnaHQgdHlwZS4gRm9yIGV4YW1wbGU6XG4gKlxuICogPHByZT5cbiAqIHZhciBmYWtlU2FmZUh0bWwgPSBuZXcgU3RyaW5nKCdmYWtlJyk7XG4gKiBmYWtlU2FmZUh0bWwuX19wcm90b19fID0gZ29vZy5odG1sLlNhZmVIdG1sLnByb3RvdHlwZTtcbiAqIHZhciBuZXdTYWZlSHRtbCA9IGdvb2cuaHRtbC5TYWZlSHRtbC5odG1sRXNjYXBlKGZha2VTYWZlSHRtbCk7XG4gKiAvLyBuZXdTYWZlSHRtbCBpcyBqdXN0IGFuIGFsaWFzIGZvciBmYWtlU2FmZUh0bWwsIGl0J3MgcGFzc2VkIHRocm91Z2ggYnlcbiAqIC8vIGdvb2cuaHRtbC5TYWZlSHRtbC5odG1sRXNjYXBlKCkgYXMgZmFrZVNhZmVIdG1sIGluc3RhbmNlb2ZcbiAqIC8vIGdvb2cuaHRtbC5TYWZlSHRtbC5cbiAqIDwvcHJlPlxuICpcbiAqIElNUE9SVEFOVDogVGhlIGd1YXJhbnRlZXMgb2YgdGhlIFNhZmVVcmwgdHlwZSBjb250cmFjdCBvbmx5IGV4dGVuZCB0byB0aGVcbiAqIGJlaGF2aW9yIG9mIGJyb3dzZXJzIHdoZW4gaW50ZXJwcmV0aW5nIFVSTHMuIFZhbHVlcyBvZiBTYWZlVXJsIG9iamVjdHMgTVVTVFxuICogYmUgYXBwcm9wcmlhdGVseSBlc2NhcGVkIGJlZm9yZSBlbWJlZGRpbmcgaW4gYSBIVE1MIGRvY3VtZW50LiBOb3RlIHRoYXQgdGhlXG4gKiByZXF1aXJlZCBlc2NhcGluZyBpcyBjb250ZXh0LXNlbnNpdGl2ZSAoZS5nLiBhIGRpZmZlcmVudCBlc2NhcGluZyBpc1xuICogcmVxdWlyZWQgZm9yIGVtYmVkZGluZyBhIFVSTCBpbiBhIHN0eWxlIHByb3BlcnR5IHdpdGhpbiBhIHN0eWxlXG4gKiBhdHRyaWJ1dGUsIGFzIG9wcG9zZWQgdG8gZW1iZWRkaW5nIGluIGEgaHJlZiBhdHRyaWJ1dGUpLlxuICpcbiAqIEBzZWUgZ29vZy5odG1sLlNhZmVVcmwjdW53cmFwXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5odG1sLlNhZmVVcmwucHJvdG90eXBlLmdldFR5cGVkU3RyaW5nVmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZUh0bWxXcmFwcGVkVmFsdWVfO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICogQGNvbnN0XG4gKi9cbmdvb2cuaHRtbC5TYWZlVXJsLnByb3RvdHlwZS5pbXBsZW1lbnRzR29vZ0kxOG5CaWRpRGlyZWN0aW9uYWxTdHJpbmcgPSB0cnVlO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGlzIFVSTHMgZGlyZWN0aW9uYWxpdHksIHdoaWNoIGlzIGFsd2F5cyB7QGNvZGUgTFRSfS5cbiAqIEBvdmVycmlkZVxuICovXG5nb29nLmh0bWwuU2FmZVVybC5wcm90b3R5cGUuZ2V0RGlyZWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmkxOG4uYmlkaS5EaXIuTFRSO1xufTtcblxuXG5pZiAoZ29vZy5ERUJVRykge1xuICAvKipcbiAgICogUmV0dXJucyBhIGRlYnVnIHN0cmluZy1yZXByZXNlbnRhdGlvbiBvZiB0aGlzIHZhbHVlLlxuICAgKlxuICAgKiBUbyBvYnRhaW4gdGhlIGFjdHVhbCBzdHJpbmcgdmFsdWUgd3JhcHBlZCBpbiBhIFNhZmVVcmwsIHVzZVxuICAgKiB7QGNvZGUgZ29vZy5odG1sLlNhZmVVcmwudW53cmFwfS5cbiAgICpcbiAgICogQHNlZSBnb29nLmh0bWwuU2FmZVVybCN1bndyYXBcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnb29nLmh0bWwuU2FmZVVybC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ1NhZmVVcmx7JyArIHRoaXMucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZUh0bWxXcmFwcGVkVmFsdWVfICtcbiAgICAgICAgJ30nO1xuICB9O1xufVxuXG5cbi8qKlxuICogUGVyZm9ybXMgYSBydW50aW1lIGNoZWNrIHRoYXQgdGhlIHByb3ZpZGVkIG9iamVjdCBpcyBpbmRlZWQgYSBTYWZlVXJsXG4gKiBvYmplY3QsIGFuZCByZXR1cm5zIGl0cyB2YWx1ZS5cbiAqXG4gKiBJTVBPUlRBTlQ6IFRoZSBndWFyYW50ZWVzIG9mIHRoZSBTYWZlVXJsIHR5cGUgY29udHJhY3Qgb25seSBleHRlbmQgdG8gdGhlXG4gKiBiZWhhdmlvciBvZiAgYnJvd3NlcnMgd2hlbiBpbnRlcnByZXRpbmcgVVJMcy4gVmFsdWVzIG9mIFNhZmVVcmwgb2JqZWN0cyBNVVNUXG4gKiBiZSBhcHByb3ByaWF0ZWx5IGVzY2FwZWQgYmVmb3JlIGVtYmVkZGluZyBpbiBhIEhUTUwgZG9jdW1lbnQuIE5vdGUgdGhhdCB0aGVcbiAqIHJlcXVpcmVkIGVzY2FwaW5nIGlzIGNvbnRleHQtc2Vuc2l0aXZlIChlLmcuIGEgZGlmZmVyZW50IGVzY2FwaW5nIGlzXG4gKiByZXF1aXJlZCBmb3IgZW1iZWRkaW5nIGEgVVJMIGluIGEgc3R5bGUgcHJvcGVydHkgd2l0aGluIGEgc3R5bGVcbiAqIGF0dHJpYnV0ZSwgYXMgb3Bwb3NlZCB0byBlbWJlZGRpbmcgaW4gYSBocmVmIGF0dHJpYnV0ZSkuXG4gKlxuICogQHBhcmFtIHshZ29vZy5odG1sLlNhZmVVcmx9IHNhZmVVcmwgVGhlIG9iamVjdCB0byBleHRyYWN0IGZyb20uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBTYWZlVXJsIG9iamVjdCdzIGNvbnRhaW5lZCBzdHJpbmcsIHVubGVzcyB0aGUgcnVuLXRpbWVcbiAqICAgICB0eXBlIGNoZWNrIGZhaWxzLiBJbiB0aGF0IGNhc2UsIHtAY29kZSB1bndyYXB9IHJldHVybnMgYW4gaW5ub2N1b3VzXG4gKiAgICAgc3RyaW5nLCBvciwgaWYgYXNzZXJ0aW9ucyBhcmUgZW5hYmxlZCwgdGhyb3dzXG4gKiAgICAge0Bjb2RlIGdvb2cuYXNzZXJ0cy5Bc3NlcnRpb25FcnJvcn0uXG4gKi9cbmdvb2cuaHRtbC5TYWZlVXJsLnVud3JhcCA9IGZ1bmN0aW9uKHNhZmVVcmwpIHtcbiAgLy8gUGVyZm9ybSBhZGRpdGlvbmFsIFJ1bi10aW1lIHR5cGUtY2hlY2tpbmcgdG8gZW5zdXJlIHRoYXQgc2FmZVVybCBpcyBpbmRlZWRcbiAgLy8gYW4gaW5zdGFuY2Ugb2YgdGhlIGV4cGVjdGVkIHR5cGUuICBUaGlzIHByb3ZpZGVzIHNvbWUgYWRkaXRpb25hbCBwcm90ZWN0aW9uXG4gIC8vIGFnYWluc3Qgc2VjdXJpdHkgYnVncyBkdWUgdG8gYXBwbGljYXRpb24gY29kZSB0aGF0IGRpc2FibGVzIHR5cGUgY2hlY2tzLlxuICAvLyBTcGVjaWZpY2FsbHksIHRoZSBmb2xsb3dpbmcgY2hlY2tzIGFyZSBwZXJmb3JtZWQ6XG4gIC8vIDEuIFRoZSBvYmplY3QgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIGV4cGVjdGVkIHR5cGUuXG4gIC8vIDIuIFRoZSBvYmplY3QgaXMgbm90IGFuIGluc3RhbmNlIG9mIGEgc3ViY2xhc3MuXG4gIC8vIDMuIFRoZSBvYmplY3QgY2FycmllcyBhIHR5cGUgbWFya2VyIGZvciB0aGUgZXhwZWN0ZWQgdHlwZS4gXCJGYWtpbmdcIiBhblxuICAvLyBvYmplY3QgcmVxdWlyZXMgYSByZWZlcmVuY2UgdG8gdGhlIHR5cGUgbWFya2VyLCB3aGljaCBoYXMgbmFtZXMgaW50ZW5kZWRcbiAgLy8gdG8gc3RhbmQgb3V0IGluIGNvZGUgcmV2aWV3cy5cbiAgaWYgKHNhZmVVcmwgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZVVybCAmJlxuICAgICAgc2FmZVVybC5jb25zdHJ1Y3RvciA9PT0gZ29vZy5odG1sLlNhZmVVcmwgJiZcbiAgICAgIHNhZmVVcmwuU0FGRV9VUkxfVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfID09PVxuICAgICAgICAgIGdvb2cuaHRtbC5TYWZlVXJsLlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXykge1xuICAgIHJldHVybiBzYWZlVXJsLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVIdG1sV3JhcHBlZFZhbHVlXztcbiAgfSBlbHNlIHtcbiAgICBnb29nLmFzc2VydHMuZmFpbCgnZXhwZWN0ZWQgb2JqZWN0IG9mIHR5cGUgU2FmZVVybCwgZ290IFxcJycgK1xuICAgICAgICAgICAgICAgICAgICAgIHNhZmVVcmwgKyAnXFwnJyk7XG4gICAgcmV0dXJuICd0eXBlX2Vycm9yOlNhZmVVcmwnO1xuXG4gIH1cbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgU2FmZVVybCBvYmplY3QgZnJvbSBhIGNvbXBpbGUtdGltZSBjb25zdGFudCBzdHJpbmcuXG4gKlxuICogQ29tcGlsZS10aW1lIGNvbnN0YW50IHN0cmluZ3MgYXJlIGluaGVyZW50bHkgcHJvZ3JhbS1jb250cm9sbGVkIGFuZCBoZW5jZVxuICogdHJ1c3RlZC5cbiAqXG4gKiBAcGFyYW0geyFnb29nLnN0cmluZy5Db25zdH0gdXJsIEEgY29tcGlsZS10aW1lLWNvbnN0YW50IHN0cmluZyBmcm9tIHdoaWNoIHRvXG4gKiAgICAgICAgIGNyZWF0ZSBhIFNhZmVVcmwuXG4gKiBAcmV0dXJuIHshZ29vZy5odG1sLlNhZmVVcmx9IEEgU2FmZVVybCBvYmplY3QgaW5pdGlhbGl6ZWQgdG8ge0Bjb2RlIHVybH0uXG4gKi9cbmdvb2cuaHRtbC5TYWZlVXJsLmZyb21Db25zdGFudCA9IGZ1bmN0aW9uKHVybCkge1xuICByZXR1cm4gZ29vZy5odG1sLlNhZmVVcmwuY3JlYXRlU2FmZVVybFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKFxuICAgICAgZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwKHVybCkpO1xufTtcblxuXG4vKipcbiAqIEEgcGF0dGVybiB0aGF0IG1hdGNoZXMgQmxvYiBvciBkYXRhIHR5cGVzIHRoYXQgY2FuIGhhdmUgU2FmZVVybHMgY3JlYXRlZFxuICogZnJvbSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpIG9yIHZpYSBhIGRhdGE6IFVSSS4gIE9ubHkgbWF0Y2hlcyBpbWFnZSBhbmRcbiAqIHZpZGVvIHR5cGVzLCBjdXJyZW50bHkuXG4gKiBAY29uc3RcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaHRtbC5TQUZFX01JTUVfVFlQRV9QQVRURVJOXyA9XG4gICAgL14oPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSkpJC9pO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIFNhZmVVcmwgd3JhcHBpbmcgYSBibG9iIFVSTCBmb3IgdGhlIGdpdmVuIHtAY29kZSBibG9ifS5cbiAqXG4gKiBUaGUgYmxvYiBVUkwgaXMgY3JlYXRlZCB3aXRoIHtAY29kZSBVUkwuY3JlYXRlT2JqZWN0VVJMfS4gSWYgdGhlIE1JTUUgdHlwZVxuICogZm9yIHtAY29kZSBibG9ifSBpcyBub3Qgb2YgYSBrbm93biBzYWZlIGltYWdlIG9yIHZpZGVvIE1JTUUgdHlwZSwgdGhlbiB0aGVcbiAqIFNhZmVVcmwgd2lsbCB3cmFwIHtAbGluayAjSU5OT0NVT1VTX1NUUklOR30uXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9GaWxlQVBJLyN1cmxcbiAqIEBwYXJhbSB7IUJsb2J9IGJsb2JcbiAqIEByZXR1cm4geyFnb29nLmh0bWwuU2FmZVVybH0gVGhlIGJsb2IgVVJMLCBvciBhbiBpbm5vY3VvdXMgc3RyaW5nIHdyYXBwZWRcbiAqICAgYXMgYSBTYWZlVXJsLlxuICovXG5nb29nLmh0bWwuU2FmZVVybC5mcm9tQmxvYiA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgdmFyIHVybCA9IGdvb2cuaHRtbC5TQUZFX01JTUVfVFlQRV9QQVRURVJOXy50ZXN0KGJsb2IudHlwZSkgP1xuICAgICAgZ29vZy5mcy51cmwuY3JlYXRlT2JqZWN0VXJsKGJsb2IpIDogZ29vZy5odG1sLlNhZmVVcmwuSU5OT0NVT1VTX1NUUklORztcbiAgcmV0dXJuIGdvb2cuaHRtbC5TYWZlVXJsLmNyZWF0ZVNhZmVVcmxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZSh1cmwpO1xufTtcblxuXG4vKipcbiAqIE1hdGNoZXMgYSBiYXNlLTY0IGRhdGEgVVJMLCB3aXRoIHRoZSBmaXJzdCBtYXRjaCBncm91cCBiZWluZyB0aGUgTUlNRSB0eXBlLlxuICogQGNvbnN0XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmh0bWwuREFUQV9VUkxfUEFUVEVSTl8gPSAvXmRhdGE6KFteOyxdKik7YmFzZTY0LFthLXowLTkrXFwvXSs9KiQvaTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBTYWZlVXJsIHdyYXBwaW5nIGEgZGF0YTogVVJMLCBhZnRlciB2YWxpZGF0aW5nIGl0IG1hdGNoZXMgYVxuICoga25vd24tc2FmZSBpbWFnZSBvciB2aWRlbyBNSU1FIHR5cGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGFVcmwgQSB2YWxpZCBiYXNlNjQgZGF0YSBVUkwgd2l0aCBvbmUgb2YgdGhlIHdoaXRlbGlzdGVkXG4gKiAgICAgaW1hZ2Ugb3IgdmlkZW8gTUlNRSB0eXBlcy5cbiAqIEByZXR1cm4geyFnb29nLmh0bWwuU2FmZVVybH0gQSBtYXRjaGluZyBzYWZlIFVSTCwgb3Ige0BsaW5rIElOTk9DVU9VU19TVFJJTkd9XG4gKiAgICAgd3JhcHBlZCBhcyBhIFNhZmVVcmwgaWYgaXQgZG9lcyBub3QgcGFzcy5cbiAqL1xuZ29vZy5odG1sLlNhZmVVcmwuZnJvbURhdGFVcmwgPSBmdW5jdGlvbihkYXRhVXJsKSB7XG4gIC8vIFRoZXJlJ3MgYSBzbGlnaHQgcmlzayBoZXJlIHRoYXQgYSBicm93c2VyIHNuaWZmcyB0aGUgY29udGVudCB0eXBlIGlmIGl0XG4gIC8vIGRvZXNuJ3Qga25vdyB0aGUgTUlNRSB0eXBlIGFuZCBleGVjdXRlcyBIVE1MIHdpdGhpbiB0aGUgZGF0YTogVVJMLiBGb3IgdGhpc1xuICAvLyB0byBjYXVzZSBYU1MgaXQgd291bGQgYWxzbyBoYXZlIHRvIGV4ZWN1dGUgdGhlIEhUTUwgaW4gdGhlIHNhbWUgb3JpZ2luXG4gIC8vIG9mIHRoZSBwYWdlIHdpdGggdGhlIGxpbmsuIEl0IHNlZW1zIHVubGlrZWx5IHRoYXQgYm90aCBvZiB0aGVzZSB3aWxsXG4gIC8vIGhhcHBlbiwgcGFydGljdWxhcmx5IGluIG5vdCByZWFsbHkgb2xkIElFcy5cbiAgdmFyIG1hdGNoID0gZGF0YVVybC5tYXRjaChnb29nLmh0bWwuREFUQV9VUkxfUEFUVEVSTl8pO1xuICB2YXIgdmFsaWQgPSBtYXRjaCAmJiBnb29nLmh0bWwuU0FGRV9NSU1FX1RZUEVfUEFUVEVSTl8udGVzdChtYXRjaFsxXSk7XG4gIHJldHVybiBnb29nLmh0bWwuU2FmZVVybC5jcmVhdGVTYWZlVXJsU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXG4gICAgICB2YWxpZCA/IGRhdGFVcmwgOiBnb29nLmh0bWwuU2FmZVVybC5JTk5PQ1VPVVNfU1RSSU5HKTtcbn07XG5cblxuLyoqXG4gKiBBIHBhdHRlcm4gdGhhdCByZWNvZ25pemVzIGEgY29tbW9ubHkgdXNlZnVsIHN1YnNldCBvZiBVUkxzIHRoYXQgc2F0aXNmeVxuICogdGhlIFNhZmVVcmwgY29udHJhY3QuXG4gKlxuICogVGhpcyByZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2hlcyBhIHN1YnNldCBvZiBVUkxzIHRoYXQgd2lsbCBub3QgY2F1c2Ugc2NyaXB0XG4gKiBleGVjdXRpb24gaWYgdXNlZCBpbiBVUkwgY29udGV4dCB3aXRoaW4gYSBIVE1MIGRvY3VtZW50LiBTcGVjaWZpY2FsbHksIHRoaXNcbiAqIHJlZ3VsYXIgZXhwcmVzc2lvbiBtYXRjaGVzIGlmIChjb21tZW50IGZyb20gaGVyZSBvbiBhbmQgcmVnZXggY29waWVkIGZyb21cbiAqIFNveSdzIEVzY2FwaW5nQ29udmVudGlvbnMpOlxuICogKDEpIEVpdGhlciBhIHByb3RvY29sIGluIGEgd2hpdGVsaXN0IChodHRwLCBodHRwcywgbWFpbHRvIG9yIGZ0cCkuXG4gKiAoMikgb3Igbm8gcHJvdG9jb2wuICBBIHByb3RvY29sIG11c3QgYmUgZm9sbG93ZWQgYnkgYSBjb2xvbi4gVGhlIGJlbG93XG4gKiAgICAgYWxsb3dzIHRoYXQgYnkgYWxsb3dpbmcgY29sb25zIG9ubHkgYWZ0ZXIgb25lIG9mIHRoZSBjaGFyYWN0ZXJzIFsvPyNdLlxuICogICAgIEEgY29sb24gYWZ0ZXIgYSBoYXNoICgjKSBtdXN0IGJlIGluIHRoZSBmcmFnbWVudC5cbiAqICAgICBPdGhlcndpc2UsIGEgY29sb24gYWZ0ZXIgYSAoPykgbXVzdCBiZSBpbiBhIHF1ZXJ5LlxuICogICAgIE90aGVyd2lzZSwgYSBjb2xvbiBhZnRlciBhIHNpbmdsZSBzb2xpZHVzICgvKSBtdXN0IGJlIGluIGEgcGF0aC5cbiAqICAgICBPdGhlcndpc2UsIGEgY29sb24gYWZ0ZXIgYSBkb3VibGUgc29saWR1cyAoLy8pIG11c3QgYmUgaW4gdGhlIGF1dGhvcml0eVxuICogICAgIChiZWZvcmUgcG9ydCkuXG4gKlxuICogVGhlIHBhdHRlcm4gZGlzYWxsb3dzICYsIHVzZWQgaW4gSFRNTCBlbnRpdHkgZGVjbGFyYXRpb25zIGJlZm9yZVxuICogb25lIG9mIHRoZSBjaGFyYWN0ZXJzIGluIFsvPyNdLiBUaGlzIGRpc2FsbG93cyBIVE1MIGVudGl0aWVzIHVzZWQgaW4gdGhlXG4gKiBwcm90b2NvbCBuYW1lLCB3aGljaCBzaG91bGQgbmV2ZXIgaGFwcGVuLCBlLmcuIFwiaCYjMTE2O3RwXCIgZm9yIFwiaHR0cFwiLlxuICogSXQgYWxzbyBkaXNhbGxvd3MgSFRNTCBlbnRpdGllcyBpbiB0aGUgZmlyc3QgcGF0aCBwYXJ0IG9mIGEgcmVsYXRpdmUgcGF0aCxcbiAqIGUuZy4gXCJmb28mbHQ7YmFyL2JhelwiLiAgT3VyIGV4aXN0aW5nIGVzY2FwaW5nIGZ1bmN0aW9ucyBzaG91bGQgbm90IHByb2R1Y2VcbiAqIHRoYXQuIE1vcmUgaW1wb3J0YW50bHksIGl0IGRpc2FsbG93cyBtYXNraW5nIG9mIGEgY29sb24sXG4gKiBlLmcuIFwiamF2YXNjcmlwdCYjNTg7Li4uXCIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdCB7IVJlZ0V4cH1cbiAqL1xuZ29vZy5odG1sLlNBRkVfVVJMX1BBVFRFUk5fID1cbiAgICAvXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwKTp8W14mOi8/I10qKD86Wy8/I118JCkpL2k7XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgU2FmZVVybCBvYmplY3QgZnJvbSB7QGNvZGUgdXJsfS4gSWYge0Bjb2RlIHVybH0gaXMgYVxuICogZ29vZy5odG1sLlNhZmVVcmwgdGhlbiBpdCBpcyBzaW1wbHkgcmV0dXJuZWQuIE90aGVyd2lzZSB0aGUgaW5wdXQgc3RyaW5nIGlzXG4gKiB2YWxpZGF0ZWQgdG8gbWF0Y2ggYSBwYXR0ZXJuIG9mIGNvbW1vbmx5IHVzZWQgc2FmZSBVUkxzLiBUaGUgc3RyaW5nIGlzXG4gKiBjb252ZXJ0ZWQgdG8gVVRGLTggYW5kIG5vbi13aGl0ZWxpc3RlZCBjaGFyYWN0ZXJzIGFyZSBwZXJjZW50LWVuY29kZWQuIFRoZVxuICogc3RyaW5nIHdyYXBwZWQgYnkgdGhlIGNyZWF0ZWQgU2FmZVVybCB3aWxsIHRodXMgY29udGFpbiBvbmx5IEFTQ0lJIHByaW50YWJsZVxuICogY2hhcmFjdGVycy5cbiAqXG4gKiB7QGNvZGUgdXJsfSBtYXkgYmUgYSBVUkwgd2l0aCB0aGUgaHR0cCwgaHR0cHMsIG1haWx0byBvciBmdHAgc2NoZW1lLFxuICogb3IgYSByZWxhdGl2ZSBVUkwgKGkuZS4sIGEgVVJMIHdpdGhvdXQgYSBzY2hlbWU7IHNwZWNpZmljYWxseSwgYVxuICogc2NoZW1lLXJlbGF0aXZlLCBhYnNvbHV0ZS1wYXRoLXJlbGF0aXZlLCBvciBwYXRoLXJlbGF0aXZlIFVSTCkuXG4gKlxuICoge0Bjb2RlIHVybH0gaXMgY29udmVydGVkIHRvIFVURi04IGFuZCBub24td2hpdGVsaXN0ZWQgY2hhcmFjdGVycyBhcmVcbiAqIHBlcmNlbnQtZW5jb2RlZC4gV2hpdGVsaXN0ZWQgY2hhcmFjdGVycyBhcmUgJyUnIGFuZCwgZnJvbSBSRkMgMzk4NixcbiAqIHVucmVzZXJ2ZWQgY2hhcmFjdGVycyBhbmQgcmVzZXJ2ZWQgY2hhcmFjdGVycywgd2l0aCB0aGUgZXhjZXB0aW9uIG9mICdcXCcnLFxuICogJygnIGFuZCAnKScuIFRoaXMgZW5zdXJlcyB0aGUgdGhlIFNhZmVVcmwgY29udGFpbnMgb25seSBBU0NJSS1wcmludGFibGVcbiAqIGNoYXJhY3RlcnMgYW5kIHJlZHVjZXMgdGhlIGNoYW5jZSBvZiBzZWN1cml0eSBidWdzIHdlcmUgaXQgdG8gYmVcbiAqIGludGVycG9sYXRlZCBpbnRvIGEgc3BlY2lmaWMgY29udGV4dCB3aXRob3V0IHRoZSBuZWNlc3NhcnkgZXNjYXBpbmcuXG4gKlxuICogSWYge0Bjb2RlIHVybH0gZmFpbHMgdmFsaWRhdGlvbiBvciBkb2VzIG5vdCBVVEYtMTYgZGVjb2RlIGNvcnJlY3RseVxuICogKEphdmFTY3JpcHQgc3RyaW5ncyBhcmUgVVRGLTE2IGVuY29kZWQpLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYSBTYWZlVXJsXG4gKiBvYmplY3QgY29udGFpbmluZyBhbiBpbm5vY3VvdXMgc3RyaW5nLCBnb29nLmh0bWwuU2FmZVVybC5JTk5PQ1VPVVNfU1RSSU5HLlxuICpcbiAqIEBzZWUgaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtcmVsYXRpdmUtdXJsXG4gKiBAcGFyYW0ge3N0cmluZ3whZ29vZy5zdHJpbmcuVHlwZWRTdHJpbmd9IHVybCBUaGUgVVJMIHRvIHZhbGlkYXRlLlxuICogQHJldHVybiB7IWdvb2cuaHRtbC5TYWZlVXJsfSBUaGUgdmFsaWRhdGVkIFVSTCwgd3JhcHBlZCBhcyBhIFNhZmVVcmwuXG4gKi9cbmdvb2cuaHRtbC5TYWZlVXJsLnNhbml0aXplID0gZnVuY3Rpb24odXJsKSB7XG4gIGlmICh1cmwgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZVVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgZWxzZSBpZiAodXJsLmltcGxlbWVudHNHb29nU3RyaW5nVHlwZWRTdHJpbmcpIHtcbiAgICB1cmwgPSB1cmwuZ2V0VHlwZWRTdHJpbmdWYWx1ZSgpO1xuICB9IGVsc2Uge1xuICAgIHVybCA9IFN0cmluZyh1cmwpO1xuICB9XG4gIGlmICghZ29vZy5odG1sLlNBRkVfVVJMX1BBVFRFUk5fLnRlc3QodXJsKSkge1xuICAgIHVybCA9IGdvb2cuaHRtbC5TYWZlVXJsLklOTk9DVU9VU19TVFJJTkc7XG4gIH1cbiAgcmV0dXJuIGdvb2cuaHRtbC5TYWZlVXJsLmNyZWF0ZVNhZmVVcmxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZSh1cmwpO1xufTtcblxuXG4vKipcbiAqIFR5cGUgbWFya2VyIGZvciB0aGUgU2FmZVVybCB0eXBlLCB1c2VkIHRvIGltcGxlbWVudCBhZGRpdGlvbmFsIHJ1bi10aW1lXG4gKiB0eXBlIGNoZWNraW5nLlxuICogQGNvbnN0IHshT2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5odG1sLlNhZmVVcmwuVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfID0ge307XG5cblxuLyoqXG4gKiBQYWNrYWdlLWludGVybmFsIHV0aWxpdHkgbWV0aG9kIHRvIGNyZWF0ZSBTYWZlVXJsIGluc3RhbmNlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBzdHJpbmcgdG8gaW5pdGlhbGl6ZSB0aGUgU2FmZVVybCBvYmplY3Qgd2l0aC5cbiAqIEByZXR1cm4geyFnb29nLmh0bWwuU2FmZVVybH0gVGhlIGluaXRpYWxpemVkIFNhZmVVcmwgb2JqZWN0LlxuICogQHBhY2thZ2VcbiAqL1xuZ29vZy5odG1sLlNhZmVVcmwuY3JlYXRlU2FmZVVybFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlID0gZnVuY3Rpb24oXG4gICAgdXJsKSB7XG4gIHZhciBzYWZlVXJsID0gbmV3IGdvb2cuaHRtbC5TYWZlVXJsKCk7XG4gIHNhZmVVcmwucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZUh0bWxXcmFwcGVkVmFsdWVfID0gdXJsO1xuICByZXR1cm4gc2FmZVVybDtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAxMyBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFRoZSBUcnVzdGVkUmVzb3VyY2VVcmwgdHlwZSBhbmQgaXRzIGJ1aWxkZXJzLlxuICpcbiAqIFRPRE8oeHRvZik6IExpbmsgdG8gZG9jdW1lbnQgc3RhdGluZyB0eXBlIGNvbnRyYWN0LlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybCcpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmkxOG4uYmlkaS5EaXInKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5pMThuLmJpZGkuRGlyZWN0aW9uYWxTdHJpbmcnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcuQ29uc3QnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcuVHlwZWRTdHJpbmcnKTtcblxuXG5cbi8qKlxuICogQSBVUkwgd2hpY2ggaXMgdW5kZXIgYXBwbGljYXRpb24gY29udHJvbCBhbmQgZnJvbSB3aGljaCBzY3JpcHQsIENTUywgYW5kXG4gKiBvdGhlciByZXNvdXJjZXMgdGhhdCByZXByZXNlbnQgZXhlY3V0YWJsZSBjb2RlLCBjYW4gYmUgZmV0Y2hlZC5cbiAqXG4gKiBHaXZlbiB0aGF0IHRoZSBVUkwgY2FuIG9ubHkgYmUgY29uc3RydWN0ZWQgZnJvbSBzdHJpbmdzIHVuZGVyIGFwcGxpY2F0aW9uXG4gKiBjb250cm9sIGFuZCBpcyB1c2VkIHRvIGxvYWQgcmVzb3VyY2VzLCBidWdzIHJlc3VsdGluZyBpbiBhIG1hbGZvcm1lZCBVUkxcbiAqIHNob3VsZCBub3QgaGF2ZSBhIHNlY3VyaXR5IGltcGFjdCBhbmQgYXJlIGxpa2VseSB0byBiZSBlYXNpbHkgZGV0ZWN0YWJsZVxuICogZHVyaW5nIHRlc3RpbmcuIEdpdmVuIHRoZSB3aWRlIG51bWJlciBvZiBub24tUkZDIGNvbXBsaWFudCBVUkxzIGluIHVzZSxcbiAqIHN0cmljdGVyIHZhbGlkYXRpb24gY291bGQgcHJldmVudCBzb21lIGFwcGxpY2F0aW9ucyBmcm9tIGJlaW5nIGFibGUgdG8gdXNlXG4gKiB0aGlzIHR5cGUuXG4gKlxuICogSW5zdGFuY2VzIG9mIHRoaXMgdHlwZSBtdXN0IGJlIGNyZWF0ZWQgdmlhIHRoZSBmYWN0b3J5IG1ldGhvZCxcbiAqICh7QGNvZGUgZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5mcm9tQ29uc3RhbnR9KSwgYW5kIG5vdCBieSBpbnZva2luZyBpdHNcbiAqIGNvbnN0cnVjdG9yLiBUaGUgY29uc3RydWN0b3IgaW50ZW50aW9uYWxseSB0YWtlcyBubyBwYXJhbWV0ZXJzIGFuZCB0aGUgdHlwZVxuICogaXMgaW1tdXRhYmxlOyBoZW5jZSBvbmx5IGEgZGVmYXVsdCBpbnN0YW5jZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBlbXB0eVxuICogc3RyaW5nIGNhbiBiZSBvYnRhaW5lZCB2aWEgY29uc3RydWN0b3IgaW52b2NhdGlvbi5cbiAqXG4gKiBAc2VlIGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwjZnJvbUNvbnN0YW50XG4gKiBAY29uc3RydWN0b3JcbiAqIEBmaW5hbFxuICogQHN0cnVjdFxuICogQGltcGxlbWVudHMge2dvb2cuaTE4bi5iaWRpLkRpcmVjdGlvbmFsU3RyaW5nfVxuICogQGltcGxlbWVudHMge2dvb2cuc3RyaW5nLlR5cGVkU3RyaW5nfVxuICovXG5nb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsID0gZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVkIHZhbHVlIG9mIHRoaXMgVHJ1c3RlZFJlc291cmNlVXJsLiAgVGhlIGZpZWxkIGhhcyBhIHB1cnBvc2VseVxuICAgKiB1Z2x5IG5hbWUgdG8gbWFrZSAobm9uLWNvbXBpbGVkKSBjb2RlIHRoYXQgYXR0ZW1wdHMgdG8gZGlyZWN0bHkgYWNjZXNzIHRoaXNcbiAgICogZmllbGQgc3RhbmQgb3V0LlxuICAgKiBAcHJpdmF0ZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VUcnVzdGVkUmVzb3VyY2VVcmxXcmFwcGVkVmFsdWVfID0gJyc7XG5cbiAgLyoqXG4gICAqIEEgdHlwZSBtYXJrZXIgdXNlZCB0byBpbXBsZW1lbnQgYWRkaXRpb25hbCBydW4tdGltZSB0eXBlIGNoZWNraW5nLlxuICAgKiBAc2VlIGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwjdW53cmFwXG4gICAqIEBjb25zdFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5UUlVTVEVEX1JFU09VUkNFX1VSTF9UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV8gPVxuICAgICAgZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV87XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKiBAY29uc3RcbiAqL1xuZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5wcm90b3R5cGUuaW1wbGVtZW50c0dvb2dTdHJpbmdUeXBlZFN0cmluZyA9IHRydWU7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgVHJ1c3RlZFJlc291cmNlVXJsJ3MgdmFsdWUgYXMgYSBzdHJpbmcuXG4gKlxuICogSU1QT1JUQU5UOiBJbiBjb2RlIHdoZXJlIGl0IGlzIHNlY3VyaXR5IHJlbGV2YW50IHRoYXQgYW4gb2JqZWN0J3MgdHlwZSBpc1xuICogaW5kZWVkIHtAY29kZSBUcnVzdGVkUmVzb3VyY2VVcmx9LCB1c2VcbiAqIHtAY29kZSBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnVud3JhcH0gaW5zdGVhZCBvZiB0aGlzIG1ldGhvZC4gSWYgaW5cbiAqIGRvdWJ0LCBhc3N1bWUgdGhhdCBpdCdzIHNlY3VyaXR5IHJlbGV2YW50LiBJbiBwYXJ0aWN1bGFyLCBub3RlIHRoYXRcbiAqIGdvb2cuaHRtbCBmdW5jdGlvbnMgd2hpY2ggcmV0dXJuIGEgZ29vZy5odG1sIHR5cGUgZG8gbm90IGd1YXJhbnRlZSB0aGF0XG4gKiB0aGUgcmV0dXJuZWQgaW5zdGFuY2UgaXMgb2YgdGhlIHJpZ2h0IHR5cGUuIEZvciBleGFtcGxlOlxuICpcbiAqIDxwcmU+XG4gKiB2YXIgZmFrZVNhZmVIdG1sID0gbmV3IFN0cmluZygnZmFrZScpO1xuICogZmFrZVNhZmVIdG1sLl9fcHJvdG9fXyA9IGdvb2cuaHRtbC5TYWZlSHRtbC5wcm90b3R5cGU7XG4gKiB2YXIgbmV3U2FmZUh0bWwgPSBnb29nLmh0bWwuU2FmZUh0bWwuaHRtbEVzY2FwZShmYWtlU2FmZUh0bWwpO1xuICogLy8gbmV3U2FmZUh0bWwgaXMganVzdCBhbiBhbGlhcyBmb3IgZmFrZVNhZmVIdG1sLCBpdCdzIHBhc3NlZCB0aHJvdWdoIGJ5XG4gKiAvLyBnb29nLmh0bWwuU2FmZUh0bWwuaHRtbEVzY2FwZSgpIGFzIGZha2VTYWZlSHRtbCBpbnN0YW5jZW9mXG4gKiAvLyBnb29nLmh0bWwuU2FmZUh0bWwuXG4gKiA8L3ByZT5cbiAqXG4gKiBAc2VlIGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwjdW53cmFwXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5wcm90b3R5cGUuZ2V0VHlwZWRTdHJpbmdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VUcnVzdGVkUmVzb3VyY2VVcmxXcmFwcGVkVmFsdWVfO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICogQGNvbnN0XG4gKi9cbmdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwucHJvdG90eXBlLmltcGxlbWVudHNHb29nSTE4bkJpZGlEaXJlY3Rpb25hbFN0cmluZyA9XG4gICAgdHJ1ZTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhpcyBVUkxzIGRpcmVjdGlvbmFsaXR5LCB3aGljaCBpcyBhbHdheXMge0Bjb2RlIExUUn0uXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5wcm90b3R5cGUuZ2V0RGlyZWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmkxOG4uYmlkaS5EaXIuTFRSO1xufTtcblxuXG5pZiAoZ29vZy5ERUJVRykge1xuICAvKipcbiAgICogUmV0dXJucyBhIGRlYnVnIHN0cmluZy1yZXByZXNlbnRhdGlvbiBvZiB0aGlzIHZhbHVlLlxuICAgKlxuICAgKiBUbyBvYnRhaW4gdGhlIGFjdHVhbCBzdHJpbmcgdmFsdWUgd3JhcHBlZCBpbiBhIFRydXN0ZWRSZXNvdXJjZVVybCwgdXNlXG4gICAqIHtAY29kZSBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnVud3JhcH0uXG4gICAqXG4gICAqIEBzZWUgZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybCN1bndyYXBcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnVHJ1c3RlZFJlc291cmNlVXJseycgK1xuICAgICAgICB0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVRydXN0ZWRSZXNvdXJjZVVybFdyYXBwZWRWYWx1ZV8gKyAnfSc7XG4gIH07XG59XG5cblxuLyoqXG4gKiBQZXJmb3JtcyBhIHJ1bnRpbWUgY2hlY2sgdGhhdCB0aGUgcHJvdmlkZWQgb2JqZWN0IGlzIGluZGVlZCBhXG4gKiBUcnVzdGVkUmVzb3VyY2VVcmwgb2JqZWN0LCBhbmQgcmV0dXJucyBpdHMgdmFsdWUuXG4gKlxuICogQHBhcmFtIHshZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybH0gdHJ1c3RlZFJlc291cmNlVXJsIFRoZSBvYmplY3QgdG9cbiAqICAgICBleHRyYWN0IGZyb20uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0cnVzdGVkUmVzb3VyY2VVcmwgb2JqZWN0J3MgY29udGFpbmVkIHN0cmluZywgdW5sZXNzXG4gKiAgICAgdGhlIHJ1bi10aW1lIHR5cGUgY2hlY2sgZmFpbHMuIEluIHRoYXQgY2FzZSwge0Bjb2RlIHVud3JhcH0gcmV0dXJucyBhblxuICogICAgIGlubm9jdW91cyBzdHJpbmcsIG9yLCBpZiBhc3NlcnRpb25zIGFyZSBlbmFibGVkLCB0aHJvd3NcbiAqICAgICB7QGNvZGUgZ29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yfS5cbiAqL1xuZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC51bndyYXAgPSBmdW5jdGlvbih0cnVzdGVkUmVzb3VyY2VVcmwpIHtcbiAgLy8gUGVyZm9ybSBhZGRpdGlvbmFsIFJ1bi10aW1lIHR5cGUtY2hlY2tpbmcgdG8gZW5zdXJlIHRoYXRcbiAgLy8gdHJ1c3RlZFJlc291cmNlVXJsIGlzIGluZGVlZCBhbiBpbnN0YW5jZSBvZiB0aGUgZXhwZWN0ZWQgdHlwZS4gIFRoaXNcbiAgLy8gcHJvdmlkZXMgc29tZSBhZGRpdGlvbmFsIHByb3RlY3Rpb24gYWdhaW5zdCBzZWN1cml0eSBidWdzIGR1ZSB0b1xuICAvLyBhcHBsaWNhdGlvbiBjb2RlIHRoYXQgZGlzYWJsZXMgdHlwZSBjaGVja3MuXG4gIC8vIFNwZWNpZmljYWxseSwgdGhlIGZvbGxvd2luZyBjaGVja3MgYXJlIHBlcmZvcm1lZDpcbiAgLy8gMS4gVGhlIG9iamVjdCBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgZXhwZWN0ZWQgdHlwZS5cbiAgLy8gMi4gVGhlIG9iamVjdCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgYSBzdWJjbGFzcy5cbiAgLy8gMy4gVGhlIG9iamVjdCBjYXJyaWVzIGEgdHlwZSBtYXJrZXIgZm9yIHRoZSBleHBlY3RlZCB0eXBlLiBcIkZha2luZ1wiIGFuXG4gIC8vIG9iamVjdCByZXF1aXJlcyBhIHJlZmVyZW5jZSB0byB0aGUgdHlwZSBtYXJrZXIsIHdoaWNoIGhhcyBuYW1lcyBpbnRlbmRlZFxuICAvLyB0byBzdGFuZCBvdXQgaW4gY29kZSByZXZpZXdzLlxuICBpZiAodHJ1c3RlZFJlc291cmNlVXJsIGluc3RhbmNlb2YgZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybCAmJlxuICAgICAgdHJ1c3RlZFJlc291cmNlVXJsLmNvbnN0cnVjdG9yID09PSBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsICYmXG4gICAgICB0cnVzdGVkUmVzb3VyY2VVcmxcbiAgICAgICAgICAuVFJVU1RFRF9SRVNPVVJDRV9VUkxfVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfID09PVxuICAgICAgICAgICAgICBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsXG4gICAgICAgICAgICAgICAgICAuVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfKSB7XG4gICAgcmV0dXJuIHRydXN0ZWRSZXNvdXJjZVVybFxuICAgICAgICAucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlVHJ1c3RlZFJlc291cmNlVXJsV3JhcHBlZFZhbHVlXztcbiAgfSBlbHNlIHtcbiAgICBnb29nLmFzc2VydHMuZmFpbCgnZXhwZWN0ZWQgb2JqZWN0IG9mIHR5cGUgVHJ1c3RlZFJlc291cmNlVXJsLCBnb3QgXFwnJyArXG4gICAgICAgICAgICAgICAgICAgICAgdHJ1c3RlZFJlc291cmNlVXJsICsgJ1xcJycpO1xuICAgIHJldHVybiAndHlwZV9lcnJvcjpUcnVzdGVkUmVzb3VyY2VVcmwnO1xuXG4gIH1cbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgVHJ1c3RlZFJlc291cmNlVXJsIG9iamVjdCBmcm9tIGEgY29tcGlsZS10aW1lIGNvbnN0YW50IHN0cmluZy5cbiAqXG4gKiBDb21waWxlLXRpbWUgY29uc3RhbnQgc3RyaW5ncyBhcmUgaW5oZXJlbnRseSBwcm9ncmFtLWNvbnRyb2xsZWQgYW5kIGhlbmNlXG4gKiB0cnVzdGVkLlxuICpcbiAqIEBwYXJhbSB7IWdvb2cuc3RyaW5nLkNvbnN0fSB1cmwgQSBjb21waWxlLXRpbWUtY29uc3RhbnQgc3RyaW5nIGZyb20gd2hpY2ggdG9cbiAqICAgICBjcmVhdGUgYSBUcnVzdGVkUmVzb3VyY2VVcmwuXG4gKiBAcmV0dXJuIHshZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybH0gQSBUcnVzdGVkUmVzb3VyY2VVcmwgb2JqZWN0XG4gKiAgICAgaW5pdGlhbGl6ZWQgdG8ge0Bjb2RlIHVybH0uXG4gKi9cbmdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwuZnJvbUNvbnN0YW50ID0gZnVuY3Rpb24odXJsKSB7XG4gIHJldHVybiBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsXG4gICAgICAuY3JlYXRlVHJ1c3RlZFJlc291cmNlVXJsU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXG4gICAgICAgICAgZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwKHVybCkpO1xufTtcblxuXG4vKipcbiAqIFR5cGUgbWFya2VyIGZvciB0aGUgVHJ1c3RlZFJlc291cmNlVXJsIHR5cGUsIHVzZWQgdG8gaW1wbGVtZW50IGFkZGl0aW9uYWxcbiAqIHJ1bi10aW1lIHR5cGUgY2hlY2tpbmcuXG4gKiBAY29uc3QgeyFPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXyA9IHt9O1xuXG5cbi8qKlxuICogUGFja2FnZS1pbnRlcm5hbCB1dGlsaXR5IG1ldGhvZCB0byBjcmVhdGUgVHJ1c3RlZFJlc291cmNlVXJsIGluc3RhbmNlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBzdHJpbmcgdG8gaW5pdGlhbGl6ZSB0aGUgVHJ1c3RlZFJlc291cmNlVXJsIG9iamVjdFxuICogICAgIHdpdGguXG4gKiBAcmV0dXJuIHshZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybH0gVGhlIGluaXRpYWxpemVkIFRydXN0ZWRSZXNvdXJjZVVybFxuICogICAgIG9iamVjdC5cbiAqIEBwYWNrYWdlXG4gKi9cbmdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwuXG4gICAgY3JlYXRlVHJ1c3RlZFJlc291cmNlVXJsU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UgPSBmdW5jdGlvbih1cmwpIHtcbiAgdmFyIHRydXN0ZWRSZXNvdXJjZVVybCA9IG5ldyBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsKCk7XG4gIHRydXN0ZWRSZXNvdXJjZVVybC5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VUcnVzdGVkUmVzb3VyY2VVcmxXcmFwcGVkVmFsdWVfID1cbiAgICAgIHVybDtcbiAgcmV0dXJuIHRydXN0ZWRSZXNvdXJjZVVybDtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAxMyBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVGhlIFNhZmVIdG1sIHR5cGUgYW5kIGl0cyBidWlsZGVycy5cbiAqXG4gKiBUT0RPKHh0b2YpOiBMaW5rIHRvIGRvY3VtZW50IHN0YXRpbmcgdHlwZSBjb250cmFjdC5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuaHRtbC5TYWZlSHRtbCcpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuYXJyYXknKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZG9tLlRhZ05hbWUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5kb20udGFncycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmh0bWwuU2FmZVN0eWxlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuaHRtbC5TYWZlU3R5bGVTaGVldCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmh0bWwuU2FmZVVybCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuaTE4bi5iaWRpLkRpcicpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmkxOG4uYmlkaS5EaXJlY3Rpb25hbFN0cmluZycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm9iamVjdCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZy5Db25zdCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZy5UeXBlZFN0cmluZycpO1xuXG5cblxuLyoqXG4gKiBBIHN0cmluZyB0aGF0IGlzIHNhZmUgdG8gdXNlIGluIEhUTUwgY29udGV4dCBpbiBET00gQVBJcyBhbmQgSFRNTCBkb2N1bWVudHMuXG4gKlxuICogQSBTYWZlSHRtbCBpcyBhIHN0cmluZy1saWtlIG9iamVjdCB0aGF0IGNhcnJpZXMgdGhlIHNlY3VyaXR5IHR5cGUgY29udHJhY3RcbiAqIHRoYXQgaXRzIHZhbHVlIGFzIGEgc3RyaW5nIHdpbGwgbm90IGNhdXNlIHVudHJ1c3RlZCBzY3JpcHQgZXhlY3V0aW9uIHdoZW5cbiAqIGV2YWx1YXRlZCBhcyBIVE1MIGluIGEgYnJvd3Nlci5cbiAqXG4gKiBWYWx1ZXMgb2YgdGhpcyB0eXBlIGFyZSBndWFyYW50ZWVkIHRvIGJlIHNhZmUgdG8gdXNlIGluIEhUTUwgY29udGV4dHMsXG4gKiBzdWNoIGFzLCBhc3NpZ25tZW50IHRvIHRoZSBpbm5lckhUTUwgRE9NIHByb3BlcnR5LCBvciBpbnRlcnBvbGF0aW9uIGludG9cbiAqIGEgSFRNTCB0ZW1wbGF0ZSBpbiBIVE1MIFBDX0RBVEEgY29udGV4dCwgaW4gdGhlIHNlbnNlIHRoYXQgdGhlIHVzZSB3aWxsIG5vdFxuICogcmVzdWx0IGluIGEgQ3Jvc3MtU2l0ZS1TY3JpcHRpbmcgdnVsbmVyYWJpbGl0eS5cbiAqXG4gKiBJbnN0YW5jZXMgb2YgdGhpcyB0eXBlIG11c3QgYmUgY3JlYXRlZCB2aWEgdGhlIGZhY3RvcnkgbWV0aG9kc1xuICogKHtAY29kZSBnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlfSwge0Bjb2RlIGdvb2cuaHRtbC5TYWZlSHRtbC5odG1sRXNjYXBlfSksXG4gKiBldGMgYW5kIG5vdCBieSBpbnZva2luZyBpdHMgY29uc3RydWN0b3IuICBUaGUgY29uc3RydWN0b3IgaW50ZW50aW9uYWxseVxuICogdGFrZXMgbm8gcGFyYW1ldGVycyBhbmQgdGhlIHR5cGUgaXMgaW1tdXRhYmxlOyBoZW5jZSBvbmx5IGEgZGVmYXVsdCBpbnN0YW5jZVxuICogY29ycmVzcG9uZGluZyB0byB0aGUgZW1wdHkgc3RyaW5nIGNhbiBiZSBvYnRhaW5lZCB2aWEgY29uc3RydWN0b3IgaW52b2NhdGlvbi5cbiAqXG4gKiBAc2VlIGdvb2cuaHRtbC5TYWZlSHRtbCNjcmVhdGVcbiAqIEBzZWUgZ29vZy5odG1sLlNhZmVIdG1sI2h0bWxFc2NhcGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKiBAaW1wbGVtZW50cyB7Z29vZy5pMThuLmJpZGkuRGlyZWN0aW9uYWxTdHJpbmd9XG4gKiBAaW1wbGVtZW50cyB7Z29vZy5zdHJpbmcuVHlwZWRTdHJpbmd9XG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbCA9IGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogVGhlIGNvbnRhaW5lZCB2YWx1ZSBvZiB0aGlzIFNhZmVIdG1sLiAgVGhlIGZpZWxkIGhhcyBhIHB1cnBvc2VseSB1Z2x5XG4gICAqIG5hbWUgdG8gbWFrZSAobm9uLWNvbXBpbGVkKSBjb2RlIHRoYXQgYXR0ZW1wdHMgdG8gZGlyZWN0bHkgYWNjZXNzIHRoaXNcbiAgICogZmllbGQgc3RhbmQgb3V0LlxuICAgKiBAcHJpdmF0ZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlSHRtbFdyYXBwZWRWYWx1ZV8gPSAnJztcblxuICAvKipcbiAgICogQSB0eXBlIG1hcmtlciB1c2VkIHRvIGltcGxlbWVudCBhZGRpdGlvbmFsIHJ1bi10aW1lIHR5cGUgY2hlY2tpbmcuXG4gICAqIEBzZWUgZ29vZy5odG1sLlNhZmVIdG1sI3Vud3JhcFxuICAgKiBAY29uc3RcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuU0FGRV9IVE1MX1RZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXyA9XG4gICAgICBnb29nLmh0bWwuU2FmZUh0bWwuVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfO1xuXG4gIC8qKlxuICAgKiBUaGlzIFNhZmVIdG1sJ3MgZGlyZWN0aW9uYWxpdHksIG9yIG51bGwgaWYgdW5rbm93bi5cbiAgICogQHByaXZhdGUgez9nb29nLmkxOG4uYmlkaS5EaXJ9XG4gICAqL1xuICB0aGlzLmRpcl8gPSBudWxsO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICogQGNvbnN0XG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC5wcm90b3R5cGUuaW1wbGVtZW50c0dvb2dJMThuQmlkaURpcmVjdGlvbmFsU3RyaW5nID0gdHJ1ZTtcblxuXG4vKiogQG92ZXJyaWRlICovXG5nb29nLmh0bWwuU2FmZUh0bWwucHJvdG90eXBlLmdldERpcmVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5kaXJfO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICogQGNvbnN0XG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC5wcm90b3R5cGUuaW1wbGVtZW50c0dvb2dTdHJpbmdUeXBlZFN0cmluZyA9IHRydWU7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgU2FmZUh0bWwncyB2YWx1ZSBhIHN0cmluZy5cbiAqXG4gKiBJTVBPUlRBTlQ6IEluIGNvZGUgd2hlcmUgaXQgaXMgc2VjdXJpdHkgcmVsZXZhbnQgdGhhdCBhbiBvYmplY3QncyB0eXBlIGlzXG4gKiBpbmRlZWQge0Bjb2RlIFNhZmVIdG1sfSwgdXNlIHtAY29kZSBnb29nLmh0bWwuU2FmZUh0bWwudW53cmFwfSBpbnN0ZWFkIG9mXG4gKiB0aGlzIG1ldGhvZC4gSWYgaW4gZG91YnQsIGFzc3VtZSB0aGF0IGl0J3Mgc2VjdXJpdHkgcmVsZXZhbnQuIEluIHBhcnRpY3VsYXIsXG4gKiBub3RlIHRoYXQgZ29vZy5odG1sIGZ1bmN0aW9ucyB3aGljaCByZXR1cm4gYSBnb29nLmh0bWwgdHlwZSBkbyBub3QgZ3VhcmFudGVlXG4gKiB0aGF0IHRoZSByZXR1cm5lZCBpbnN0YW5jZSBpcyBvZiB0aGUgcmlnaHQgdHlwZS4gRm9yIGV4YW1wbGU6XG4gKlxuICogPHByZT5cbiAqIHZhciBmYWtlU2FmZUh0bWwgPSBuZXcgU3RyaW5nKCdmYWtlJyk7XG4gKiBmYWtlU2FmZUh0bWwuX19wcm90b19fID0gZ29vZy5odG1sLlNhZmVIdG1sLnByb3RvdHlwZTtcbiAqIHZhciBuZXdTYWZlSHRtbCA9IGdvb2cuaHRtbC5TYWZlSHRtbC5odG1sRXNjYXBlKGZha2VTYWZlSHRtbCk7XG4gKiAvLyBuZXdTYWZlSHRtbCBpcyBqdXN0IGFuIGFsaWFzIGZvciBmYWtlU2FmZUh0bWwsIGl0J3MgcGFzc2VkIHRocm91Z2ggYnlcbiAqIC8vIGdvb2cuaHRtbC5TYWZlSHRtbC5odG1sRXNjYXBlKCkgYXMgZmFrZVNhZmVIdG1sXG4gKiAvLyBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlSHRtbC5cbiAqIDwvcHJlPlxuICpcbiAqIEBzZWUgZ29vZy5odG1sLlNhZmVIdG1sI3Vud3JhcFxuICogQG92ZXJyaWRlXG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC5wcm90b3R5cGUuZ2V0VHlwZWRTdHJpbmdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlSHRtbFdyYXBwZWRWYWx1ZV87XG59O1xuXG5cbmlmIChnb29nLkRFQlVHKSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgZGVidWcgc3RyaW5nLXJlcHJlc2VudGF0aW9uIG9mIHRoaXMgdmFsdWUuXG4gICAqXG4gICAqIFRvIG9idGFpbiB0aGUgYWN0dWFsIHN0cmluZyB2YWx1ZSB3cmFwcGVkIGluIGEgU2FmZUh0bWwsIHVzZVxuICAgKiB7QGNvZGUgZ29vZy5odG1sLlNhZmVIdG1sLnVud3JhcH0uXG4gICAqXG4gICAqIEBzZWUgZ29vZy5odG1sLlNhZmVIdG1sI3Vud3JhcFxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdvb2cuaHRtbC5TYWZlSHRtbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ1NhZmVIdG1seycgKyB0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVIdG1sV3JhcHBlZFZhbHVlXyArXG4gICAgICAgICd9JztcbiAgfTtcbn1cblxuXG4vKipcbiAqIFBlcmZvcm1zIGEgcnVudGltZSBjaGVjayB0aGF0IHRoZSBwcm92aWRlZCBvYmplY3QgaXMgaW5kZWVkIGEgU2FmZUh0bWxcbiAqIG9iamVjdCwgYW5kIHJldHVybnMgaXRzIHZhbHVlLlxuICogQHBhcmFtIHshZ29vZy5odG1sLlNhZmVIdG1sfSBzYWZlSHRtbCBUaGUgb2JqZWN0IHRvIGV4dHJhY3QgZnJvbS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFNhZmVIdG1sIG9iamVjdCdzIGNvbnRhaW5lZCBzdHJpbmcsIHVubGVzcyB0aGUgcnVuLXRpbWVcbiAqICAgICB0eXBlIGNoZWNrIGZhaWxzLiBJbiB0aGF0IGNhc2UsIHtAY29kZSB1bndyYXB9IHJldHVybnMgYW4gaW5ub2N1b3VzXG4gKiAgICAgc3RyaW5nLCBvciwgaWYgYXNzZXJ0aW9ucyBhcmUgZW5hYmxlZCwgdGhyb3dzXG4gKiAgICAge0Bjb2RlIGdvb2cuYXNzZXJ0cy5Bc3NlcnRpb25FcnJvcn0uXG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC51bndyYXAgPSBmdW5jdGlvbihzYWZlSHRtbCkge1xuICAvLyBQZXJmb3JtIGFkZGl0aW9uYWwgcnVuLXRpbWUgdHlwZS1jaGVja2luZyB0byBlbnN1cmUgdGhhdCBzYWZlSHRtbCBpcyBpbmRlZWRcbiAgLy8gYW4gaW5zdGFuY2Ugb2YgdGhlIGV4cGVjdGVkIHR5cGUuICBUaGlzIHByb3ZpZGVzIHNvbWUgYWRkaXRpb25hbCBwcm90ZWN0aW9uXG4gIC8vIGFnYWluc3Qgc2VjdXJpdHkgYnVncyBkdWUgdG8gYXBwbGljYXRpb24gY29kZSB0aGF0IGRpc2FibGVzIHR5cGUgY2hlY2tzLlxuICAvLyBTcGVjaWZpY2FsbHksIHRoZSBmb2xsb3dpbmcgY2hlY2tzIGFyZSBwZXJmb3JtZWQ6XG4gIC8vIDEuIFRoZSBvYmplY3QgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIGV4cGVjdGVkIHR5cGUuXG4gIC8vIDIuIFRoZSBvYmplY3QgaXMgbm90IGFuIGluc3RhbmNlIG9mIGEgc3ViY2xhc3MuXG4gIC8vIDMuIFRoZSBvYmplY3QgY2FycmllcyBhIHR5cGUgbWFya2VyIGZvciB0aGUgZXhwZWN0ZWQgdHlwZS4gXCJGYWtpbmdcIiBhblxuICAvLyBvYmplY3QgcmVxdWlyZXMgYSByZWZlcmVuY2UgdG8gdGhlIHR5cGUgbWFya2VyLCB3aGljaCBoYXMgbmFtZXMgaW50ZW5kZWRcbiAgLy8gdG8gc3RhbmQgb3V0IGluIGNvZGUgcmV2aWV3cy5cbiAgaWYgKHNhZmVIdG1sIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVIdG1sICYmXG4gICAgICBzYWZlSHRtbC5jb25zdHJ1Y3RvciA9PT0gZ29vZy5odG1sLlNhZmVIdG1sICYmXG4gICAgICBzYWZlSHRtbC5TQUZFX0hUTUxfVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfID09PVxuICAgICAgICAgIGdvb2cuaHRtbC5TYWZlSHRtbC5UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV8pIHtcbiAgICByZXR1cm4gc2FmZUh0bWwucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZUh0bWxXcmFwcGVkVmFsdWVfO1xuICB9IGVsc2Uge1xuICAgIGdvb2cuYXNzZXJ0cy5mYWlsKCdleHBlY3RlZCBvYmplY3Qgb2YgdHlwZSBTYWZlSHRtbCwgZ290IFxcJycgK1xuICAgICAgICAgICAgICAgICAgICAgIHNhZmVIdG1sICsgJ1xcJycpO1xuICAgIHJldHVybiAndHlwZV9lcnJvcjpTYWZlSHRtbCc7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTaG9ydGhhbmQgZm9yIHVuaW9uIG9mIHR5cGVzIHRoYXQgY2FuIHNlbnNpYmx5IGJlIGNvbnZlcnRlZCB0byBzdHJpbmdzXG4gKiBvciBtaWdodCBhbHJlYWR5IGJlIFNhZmVIdG1sIChhcyBTYWZlSHRtbCBpcyBhIGdvb2cuc3RyaW5nLlR5cGVkU3RyaW5nKS5cbiAqIEBwcml2YXRlXG4gKiBAdHlwZWRlZiB7c3RyaW5nfG51bWJlcnxib29sZWFufCFnb29nLnN0cmluZy5UeXBlZFN0cmluZ3xcbiAqICAgICAgICAgICAhZ29vZy5pMThuLmJpZGkuRGlyZWN0aW9uYWxTdHJpbmd9XG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC5UZXh0T3JIdG1sXztcblxuXG4vKipcbiAqIFJldHVybnMgSFRNTC1lc2NhcGVkIHRleHQgYXMgYSBTYWZlSHRtbCBvYmplY3QuXG4gKlxuICogSWYgdGV4dCBpcyBvZiBhIHR5cGUgdGhhdCBpbXBsZW1lbnRzXG4gKiB7QGNvZGUgZ29vZy5pMThuLmJpZGkuRGlyZWN0aW9uYWxTdHJpbmd9LCB0aGUgZGlyZWN0aW9uYWxpdHkgb2YgdGhlIG5ld1xuICoge0Bjb2RlIFNhZmVIdG1sfSBvYmplY3QgaXMgc2V0IHRvIHtAY29kZSB0ZXh0fSdzIGRpcmVjdGlvbmFsaXR5LCBpZiBrbm93bi5cbiAqIE90aGVyd2lzZSwgdGhlIGRpcmVjdGlvbmFsaXR5IG9mIHRoZSByZXN1bHRpbmcgU2FmZUh0bWwgaXMgdW5rbm93biAoaS5lLixcbiAqIHtAY29kZSBudWxsfSkuXG4gKlxuICogQHBhcmFtIHshZ29vZy5odG1sLlNhZmVIdG1sLlRleHRPckh0bWxffSB0ZXh0T3JIdG1sIFRoZSB0ZXh0IHRvIGVzY2FwZS4gSWZcbiAqICAgICB0aGUgcGFyYW1ldGVyIGlzIG9mIHR5cGUgU2FmZUh0bWwgaXQgaXMgcmV0dXJuZWQgZGlyZWN0bHkgKG5vIGVzY2FwaW5nXG4gKiAgICAgaXMgZG9uZSkuXG4gKiBAcmV0dXJuIHshZ29vZy5odG1sLlNhZmVIdG1sfSBUaGUgZXNjYXBlZCB0ZXh0LCB3cmFwcGVkIGFzIGEgU2FmZUh0bWwuXG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC5odG1sRXNjYXBlID0gZnVuY3Rpb24odGV4dE9ySHRtbCkge1xuICBpZiAodGV4dE9ySHRtbCBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlSHRtbCkge1xuICAgIHJldHVybiB0ZXh0T3JIdG1sO1xuICB9XG4gIHZhciBkaXIgPSBudWxsO1xuICBpZiAodGV4dE9ySHRtbC5pbXBsZW1lbnRzR29vZ0kxOG5CaWRpRGlyZWN0aW9uYWxTdHJpbmcpIHtcbiAgICBkaXIgPSB0ZXh0T3JIdG1sLmdldERpcmVjdGlvbigpO1xuICB9XG4gIHZhciB0ZXh0QXNTdHJpbmc7XG4gIGlmICh0ZXh0T3JIdG1sLmltcGxlbWVudHNHb29nU3RyaW5nVHlwZWRTdHJpbmcpIHtcbiAgICB0ZXh0QXNTdHJpbmcgPSB0ZXh0T3JIdG1sLmdldFR5cGVkU3RyaW5nVmFsdWUoKTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0QXNTdHJpbmcgPSBTdHJpbmcodGV4dE9ySHRtbCk7XG4gIH1cbiAgcmV0dXJuIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKFxuICAgICAgZ29vZy5zdHJpbmcuaHRtbEVzY2FwZSh0ZXh0QXNTdHJpbmcpLCBkaXIpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgSFRNTC1lc2NhcGVkIHRleHQgYXMgYSBTYWZlSHRtbCBvYmplY3QsIHdpdGggbmV3bGluZXMgY2hhbmdlZCB0b1xuICogJmx0O2JyJmd0Oy5cbiAqIEBwYXJhbSB7IWdvb2cuaHRtbC5TYWZlSHRtbC5UZXh0T3JIdG1sX30gdGV4dE9ySHRtbCBUaGUgdGV4dCB0byBlc2NhcGUuIElmXG4gKiAgICAgdGhlIHBhcmFtZXRlciBpcyBvZiB0eXBlIFNhZmVIdG1sIGl0IGlzIHJldHVybmVkIGRpcmVjdGx5IChubyBlc2NhcGluZ1xuICogICAgIGlzIGRvbmUpLlxuICogQHJldHVybiB7IWdvb2cuaHRtbC5TYWZlSHRtbH0gVGhlIGVzY2FwZWQgdGV4dCwgd3JhcHBlZCBhcyBhIFNhZmVIdG1sLlxuICovXG5nb29nLmh0bWwuU2FmZUh0bWwuaHRtbEVzY2FwZVByZXNlcnZpbmdOZXdsaW5lcyA9IGZ1bmN0aW9uKHRleHRPckh0bWwpIHtcbiAgaWYgKHRleHRPckh0bWwgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZUh0bWwpIHtcbiAgICByZXR1cm4gdGV4dE9ySHRtbDtcbiAgfVxuICB2YXIgaHRtbCA9IGdvb2cuaHRtbC5TYWZlSHRtbC5odG1sRXNjYXBlKHRleHRPckh0bWwpO1xuICByZXR1cm4gZ29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVNhZmVIdG1sU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXG4gICAgICBnb29nLnN0cmluZy5uZXdMaW5lVG9Ccihnb29nLmh0bWwuU2FmZUh0bWwudW53cmFwKGh0bWwpKSxcbiAgICAgIGh0bWwuZ2V0RGlyZWN0aW9uKCkpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgSFRNTC1lc2NhcGVkIHRleHQgYXMgYSBTYWZlSHRtbCBvYmplY3QsIHdpdGggbmV3bGluZXMgY2hhbmdlZCB0b1xuICogJmx0O2JyJmd0OyBhbmQgZXNjYXBpbmcgd2hpdGVzcGFjZSB0byBwcmVzZXJ2ZSBzcGF0aWFsIGZvcm1hdHRpbmcuIENoYXJhY3RlclxuICogZW50aXR5ICMxNjAgaXMgdXNlZCB0byBtYWtlIGl0IHNhZmVyIGZvciBYTUwuXG4gKiBAcGFyYW0geyFnb29nLmh0bWwuU2FmZUh0bWwuVGV4dE9ySHRtbF99IHRleHRPckh0bWwgVGhlIHRleHQgdG8gZXNjYXBlLiBJZlxuICogICAgIHRoZSBwYXJhbWV0ZXIgaXMgb2YgdHlwZSBTYWZlSHRtbCBpdCBpcyByZXR1cm5lZCBkaXJlY3RseSAobm8gZXNjYXBpbmdcbiAqICAgICBpcyBkb25lKS5cbiAqIEByZXR1cm4geyFnb29nLmh0bWwuU2FmZUh0bWx9IFRoZSBlc2NhcGVkIHRleHQsIHdyYXBwZWQgYXMgYSBTYWZlSHRtbC5cbiAqL1xuZ29vZy5odG1sLlNhZmVIdG1sLmh0bWxFc2NhcGVQcmVzZXJ2aW5nTmV3bGluZXNBbmRTcGFjZXMgPSBmdW5jdGlvbihcbiAgICB0ZXh0T3JIdG1sKSB7XG4gIGlmICh0ZXh0T3JIdG1sIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVIdG1sKSB7XG4gICAgcmV0dXJuIHRleHRPckh0bWw7XG4gIH1cbiAgdmFyIGh0bWwgPSBnb29nLmh0bWwuU2FmZUh0bWwuaHRtbEVzY2FwZSh0ZXh0T3JIdG1sKTtcbiAgcmV0dXJuIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKFxuICAgICAgZ29vZy5zdHJpbmcud2hpdGVzcGFjZUVzY2FwZShnb29nLmh0bWwuU2FmZUh0bWwudW53cmFwKGh0bWwpKSxcbiAgICAgIGh0bWwuZ2V0RGlyZWN0aW9uKCkpO1xufTtcblxuXG4vKipcbiAqIENvZXJjZXMgYW4gYXJiaXRyYXJ5IG9iamVjdCBpbnRvIGEgU2FmZUh0bWwgb2JqZWN0LlxuICpcbiAqIElmIHtAY29kZSB0ZXh0T3JIdG1sfSBpcyBhbHJlYWR5IG9mIHR5cGUge0Bjb2RlIGdvb2cuaHRtbC5TYWZlSHRtbH0sIHRoZSBzYW1lXG4gKiBvYmplY3QgaXMgcmV0dXJuZWQuIE90aGVyd2lzZSwge0Bjb2RlIHRleHRPckh0bWx9IGlzIGNvZXJjZWQgdG8gc3RyaW5nLCBhbmRcbiAqIEhUTUwtZXNjYXBlZC4gSWYge0Bjb2RlIHRleHRPckh0bWx9IGlzIG9mIGEgdHlwZSB0aGF0IGltcGxlbWVudHNcbiAqIHtAY29kZSBnb29nLmkxOG4uYmlkaS5EaXJlY3Rpb25hbFN0cmluZ30sIGl0cyBkaXJlY3Rpb25hbGl0eSwgaWYga25vd24sIGlzXG4gKiBwcmVzZXJ2ZWQuXG4gKlxuICogQHBhcmFtIHshZ29vZy5odG1sLlNhZmVIdG1sLlRleHRPckh0bWxffSB0ZXh0T3JIdG1sIFRoZSB0ZXh0IG9yIFNhZmVIdG1sIHRvXG4gKiAgICAgY29lcmNlLlxuICogQHJldHVybiB7IWdvb2cuaHRtbC5TYWZlSHRtbH0gVGhlIHJlc3VsdGluZyBTYWZlSHRtbCBvYmplY3QuXG4gKiBAZGVwcmVjYXRlZCBVc2UgZ29vZy5odG1sLlNhZmVIdG1sLmh0bWxFc2NhcGUuXG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC5mcm9tID0gZ29vZy5odG1sLlNhZmVIdG1sLmh0bWxFc2NhcGU7XG5cblxuLyoqXG4gKiBAY29uc3RcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC5WQUxJRF9OQU1FU19JTl9UQUdfID0gL15bYS16QS1aMC05LV0rJC87XG5cblxuLyoqXG4gKiBTZXQgb2YgYXR0cmlidXRlcyBjb250YWluaW5nIFVSTCBhcyBkZWZpbmVkIGF0XG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmRleC5odG1sI2F0dHJpYnV0ZXMtMS5cbiAqIEBwcml2YXRlIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsYm9vbGVhbj59XG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC5VUkxfQVRUUklCVVRFU18gPSBnb29nLm9iamVjdC5jcmVhdGVTZXQoJ2FjdGlvbicsICdjaXRlJyxcbiAgICAnZGF0YScsICdmb3JtYWN0aW9uJywgJ2hyZWYnLCAnbWFuaWZlc3QnLCAncG9zdGVyJywgJ3NyYycpO1xuXG5cbi8qKlxuICogVGFncyB3aGljaCBhcmUgdW5zdXBwb3J0ZWQgdmlhIGNyZWF0ZSgpLiBUaGV5IG1pZ2h0IGJlIHN1cHBvcnRlZCB2aWEgYVxuICogdGFnLXNwZWNpZmljIGNyZWF0ZSBtZXRob2QuIFRoZXNlIGFyZSB0YWdzIHdoaWNoIG1pZ2h0IHJlcXVpcmUgYVxuICogVHJ1c3RlZFJlc291cmNlVXJsIGluIG9uZSBvZiB0aGVpciBhdHRyaWJ1dGVzIG9yIGEgcmVzdHJpY3RlZCB0eXBlIGZvclxuICogdGhlaXIgY29udGVudC5cbiAqIEBwcml2YXRlIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsYm9vbGVhbj59XG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC5OT1RfQUxMT1dFRF9UQUdfTkFNRVNfID0gZ29vZy5vYmplY3QuY3JlYXRlU2V0KFxuICAgIGdvb2cuZG9tLlRhZ05hbWUuRU1CRUQsIGdvb2cuZG9tLlRhZ05hbWUuSUZSQU1FLCBnb29nLmRvbS5UYWdOYW1lLkxJTkssXG4gICAgZ29vZy5kb20uVGFnTmFtZS5PQkpFQ1QsIGdvb2cuZG9tLlRhZ05hbWUuU0NSSVBULCBnb29nLmRvbS5UYWdOYW1lLlNUWUxFLFxuICAgIGdvb2cuZG9tLlRhZ05hbWUuVEVNUExBVEUpO1xuXG5cbi8qKlxuICogQHR5cGVkZWYge3N0cmluZ3xudW1iZXJ8Z29vZy5zdHJpbmcuVHlwZWRTdHJpbmd8XG4gKiAgICAgZ29vZy5odG1sLlNhZmVTdHlsZS5Qcm9wZXJ0eU1hcH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC5BdHRyaWJ1dGVWYWx1ZV87XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgU2FmZUh0bWwgY29udGVudCBjb25zaXN0aW5nIG9mIGEgdGFnIHdpdGggb3B0aW9uYWwgYXR0cmlidXRlcyBhbmRcbiAqIG9wdGlvbmFsIGNvbnRlbnQuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlIHRhZyBuYW1lcyBhbmQgYXR0cmlidXRlIG5hbWVzIGFyZSBhY2NlcHRlZCBhcyByZWd1bGFyXG4gKiBzdHJpbmdzLCBpbnN0ZWFkIG9mIGdvb2cuc3RyaW5nLkNvbnN0LiBOZXZlcnRoZWxlc3MsIHlvdSBzaG91bGQgbm90IHBhc3NcbiAqIHVzZXItY29udHJvbGxlZCB2YWx1ZXMgdG8gdGhlc2UgcGFyYW1ldGVycy4gTm90ZSB0aGF0IHRoZXNlIHBhcmFtZXRlcnMgYXJlXG4gKiBzeW50YWN0aWNhbGx5IHZhbGlkYXRlZCBhdCBydW50aW1lLCBhbmQgaW52YWxpZCB2YWx1ZXMgd2lsbCByZXN1bHQgaW5cbiAqIGFuIGV4Y2VwdGlvbi5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICpcbiAqIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGUoJ2JyJyk7XG4gKiBnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlKCdkaXYnLCB7J2NsYXNzJzogJ2EnfSk7XG4gKiBnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlKCdwJywge30sICdhJyk7XG4gKiBnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlKCdwJywge30sIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGUoJ2JyJykpO1xuICpcbiAqIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGUoJ3NwYW4nLCB7XG4gKiAgICdzdHlsZSc6IHsnbWFyZ2luJzogJzAnfVxuICogfSk7XG4gKlxuICogVG8gZ3VhcmFudGVlIFNhZmVIdG1sJ3MgdHlwZSBjb250cmFjdCBpcyB1cGhlbGQgdGhlcmUgYXJlIHJlc3RyaWN0aW9ucyBvblxuICogYXR0cmlidXRlIHZhbHVlcyBhbmQgdGFnIG5hbWVzLlxuICpcbiAqIC0gRm9yIGF0dHJpYnV0ZXMgd2hpY2ggY29udGFpbiBzY3JpcHQgY29kZSAob24qKSwgYSBnb29nLnN0cmluZy5Db25zdCBpc1xuICogICByZXF1aXJlZC5cbiAqIC0gRm9yIGF0dHJpYnV0ZXMgd2hpY2ggY29udGFpbiBzdHlsZSAoc3R5bGUpLCBhIGdvb2cuaHRtbC5TYWZlU3R5bGUgb3IgYVxuICogICBnb29nLmh0bWwuU2FmZVN0eWxlLlByb3BlcnR5TWFwIGlzIHJlcXVpcmVkLlxuICogLSBGb3IgYXR0cmlidXRlcyB3aGljaCBhcmUgaW50ZXJwcmV0ZWQgYXMgVVJMcyAoZS5nLiBzcmMsIGhyZWYpIGFcbiAqICAgZ29vZy5odG1sLlNhZmVVcmwsIGdvb2cuc3RyaW5nLkNvbnN0IG9yIHN0cmluZyBpcyByZXF1aXJlZC4gSWYgYSBzdHJpbmdcbiAqICAgaXMgcGFzc2VkLCBpdCB3aWxsIGJlIHNhbml0aXplZCB3aXRoIFNhZmVVcmwuc2FuaXRpemUoKS5cbiAqIC0gRm9yIHRhZ3Mgd2hpY2ggY2FuIGxvYWQgY29kZSwgbW9yZSBzcGVjaWZpYyBnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlKigpXG4gKiAgIGZ1bmN0aW9ucyBtdXN0IGJlIHVzZWQuIFRhZ3Mgd2hpY2ggY2FuIGxvYWQgY29kZSBhbmQgYXJlIG5vdCBzdXBwb3J0ZWQgYnlcbiAqICAgdGhpcyBmdW5jdGlvbiBhcmUgZW1iZWQsIGlmcmFtZSwgbGluaywgb2JqZWN0LCBzY3JpcHQsIHN0eWxlLCBhbmQgdGVtcGxhdGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWUgVGhlIG5hbWUgb2YgdGhlIHRhZy4gT25seSB0YWcgbmFtZXMgY29uc2lzdGluZyBvZlxuICogICAgIFthLXpBLVowLTktXSBhcmUgYWxsb3dlZC4gVGFnIG5hbWVzIGRvY3VtZW50ZWQgYWJvdmUgYXJlIGRpc2FsbG93ZWQuXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBnb29nLmh0bWwuU2FmZUh0bWwuQXR0cmlidXRlVmFsdWVfPj19XG4gKiAgICAgb3B0X2F0dHJpYnV0ZXMgTWFwcGluZyBmcm9tIGF0dHJpYnV0ZSBuYW1lcyB0byB0aGVpciB2YWx1ZXMuIE9ubHlcbiAqICAgICBhdHRyaWJ1dGUgbmFtZXMgY29uc2lzdGluZyBvZiBbYS16QS1aMC05LV0gYXJlIGFsbG93ZWQuIFZhbHVlIG9mIG51bGwgb3JcbiAqICAgICB1bmRlZmluZWQgY2F1c2VzIHRoZSBhdHRyaWJ1dGUgdG8gYmUgb21pdHRlZC5cbiAqIEBwYXJhbSB7IWdvb2cuaHRtbC5TYWZlSHRtbC5UZXh0T3JIdG1sX3xcbiAqICAgICAhQXJyYXk8IWdvb2cuaHRtbC5TYWZlSHRtbC5UZXh0T3JIdG1sXz49fSBvcHRfY29udGVudCBDb250ZW50IHRvXG4gKiAgICAgSFRNTC1lc2NhcGUgYW5kIHB1dCBpbnNpZGUgdGhlIHRhZy4gVGhpcyBtdXN0IGJlIGVtcHR5IGZvciB2b2lkIHRhZ3NcbiAqICAgICBsaWtlIDxicj4uIEFycmF5IGVsZW1lbnRzIGFyZSBjb25jYXRlbmF0ZWQuXG4gKiBAcmV0dXJuIHshZ29vZy5odG1sLlNhZmVIdG1sfSBUaGUgU2FmZUh0bWwgY29udGVudCB3aXRoIHRoZSB0YWcuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgaW52YWxpZCB0YWcgbmFtZSwgYXR0cmlidXRlIG5hbWUsIG9yIGF0dHJpYnV0ZSB2YWx1ZSBpc1xuICogICAgIHByb3ZpZGVkLlxuICogQHRocm93cyB7Z29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yfSBJZiBjb250ZW50IGZvciB2b2lkIHRhZyBpcyBwcm92aWRlZC5cbiAqL1xuZ29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZSA9IGZ1bmN0aW9uKHRhZ05hbWUsIG9wdF9hdHRyaWJ1dGVzLCBvcHRfY29udGVudCkge1xuICBpZiAoIWdvb2cuaHRtbC5TYWZlSHRtbC5WQUxJRF9OQU1FU19JTl9UQUdfLnRlc3QodGFnTmFtZSkpIHtcbiAgICB0aHJvdyBFcnJvcignSW52YWxpZCB0YWcgbmFtZSA8JyArIHRhZ05hbWUgKyAnPi4nKTtcbiAgfVxuICBpZiAodGFnTmFtZS50b1VwcGVyQ2FzZSgpIGluIGdvb2cuaHRtbC5TYWZlSHRtbC5OT1RfQUxMT1dFRF9UQUdfTkFNRVNfKSB7XG4gICAgdGhyb3cgRXJyb3IoJ1RhZyBuYW1lIDwnICsgdGFnTmFtZSArICc+IGlzIG5vdCBhbGxvd2VkIGZvciBTYWZlSHRtbC4nKTtcbiAgfVxuICByZXR1cm4gZ29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVNhZmVIdG1sVGFnU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXG4gICAgICB0YWdOYW1lLCBvcHRfYXR0cmlidXRlcywgb3B0X2NvbnRlbnQpO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBTYWZlSHRtbCByZXByZXNlbnRpbmcgYW4gaWZyYW1lIHRhZy5cbiAqXG4gKiBCeSBkZWZhdWx0IHRoZSBzYW5kYm94IGF0dHJpYnV0ZSBpcyBzZXQgdG8gYW4gZW1wdHkgdmFsdWUsIHdoaWNoIGlzIHRoZSBtb3N0XG4gKiBzZWN1cmUgb3B0aW9uLCBhcyBpdCBjb25mZXJzIHRoZSBpZnJhbWUgdGhlIGxlYXN0IHByaXZpbGVnZXMuIElmIHRoaXNcbiAqIGlzIHRvbyByZXN0cmljdGl2ZSB0aGVuIGdyYW50aW5nIGluZGl2aWR1YWwgcHJpdmlsZWdlcyBpcyB0aGUgcHJlZmVyYWJsZVxuICogb3B0aW9uLiBVbnNldHRpbmcgdGhlIGF0dHJpYnV0ZSBlbnRpcmVseSBpcyB0aGUgbGVhc3Qgc2VjdXJlIG9wdGlvbiBhbmRcbiAqIHNob3VsZCBuZXZlciBiZSBkb25lIHVubGVzcyBpdCdzIHN0cmljbHkgbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSB7Z29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybD19IG9wdF9zcmMgVGhlIHZhbHVlIG9mIHRoZSBzcmNcbiAqICAgICBhdHRyaWJ1dGUuIElmIG51bGwgb3IgdW5kZWZpbmVkIHNyYyB3aWxsIG5vdCBiZSBzZXQuXG4gKiBAcGFyYW0ge2dvb2cuaHRtbC5TYWZlSHRtbD19IG9wdF9zcmNkb2MgVGhlIHZhbHVlIG9mIHRoZSBzcmNkb2MgYXR0cmlidXRlLlxuICogICAgIElmIG51bGwgb3IgdW5kZWZpbmVkIHNyY2RvYyB3aWxsIG5vdCBiZSBzZXQuXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBnb29nLmh0bWwuU2FmZUh0bWwuQXR0cmlidXRlVmFsdWVfPj19XG4gKiAgICAgb3B0X2F0dHJpYnV0ZXMgTWFwcGluZyBmcm9tIGF0dHJpYnV0ZSBuYW1lcyB0byB0aGVpciB2YWx1ZXMuIE9ubHlcbiAqICAgICBhdHRyaWJ1dGUgbmFtZXMgY29uc2lzdGluZyBvZiBbYS16QS1aMC05LV0gYXJlIGFsbG93ZWQuIFZhbHVlIG9mIG51bGwgb3JcbiAqICAgICB1bmRlZmluZWQgY2F1c2VzIHRoZSBhdHRyaWJ1dGUgdG8gYmUgb21pdHRlZC5cbiAqIEBwYXJhbSB7IWdvb2cuaHRtbC5TYWZlSHRtbC5UZXh0T3JIdG1sX3xcbiAqICAgICAhQXJyYXk8IWdvb2cuaHRtbC5TYWZlSHRtbC5UZXh0T3JIdG1sXz49fSBvcHRfY29udGVudCBDb250ZW50IHRvXG4gKiAgICAgSFRNTC1lc2NhcGUgYW5kIHB1dCBpbnNpZGUgdGhlIHRhZy4gQXJyYXkgZWxlbWVudHMgYXJlIGNvbmNhdGVuYXRlZC5cbiAqIEByZXR1cm4geyFnb29nLmh0bWwuU2FmZUh0bWx9IFRoZSBTYWZlSHRtbCBjb250ZW50IHdpdGggdGhlIHRhZy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpbnZhbGlkIHRhZyBuYW1lLCBhdHRyaWJ1dGUgbmFtZSwgb3IgYXR0cmlidXRlIHZhbHVlIGlzXG4gKiAgICAgcHJvdmlkZWQuIElmIG9wdF9hdHRyaWJ1dGVzIGNvbnRhaW5zIHRoZSBzcmMgb3Igc3JjZG9jIGF0dHJpYnV0ZXMuXG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVJZnJhbWUgPSBmdW5jdGlvbihcbiAgICBvcHRfc3JjLCBvcHRfc3JjZG9jLCBvcHRfYXR0cmlidXRlcywgb3B0X2NvbnRlbnQpIHtcbiAgdmFyIGZpeGVkQXR0cmlidXRlcyA9IHt9O1xuICBmaXhlZEF0dHJpYnV0ZXNbJ3NyYyddID0gb3B0X3NyYyB8fCBudWxsO1xuICBmaXhlZEF0dHJpYnV0ZXNbJ3NyY2RvYyddID0gb3B0X3NyY2RvYyB8fCBudWxsO1xuICB2YXIgZGVmYXVsdEF0dHJpYnV0ZXMgPSB7J3NhbmRib3gnOiAnJ307XG4gIHZhciBhdHRyaWJ1dGVzID0gZ29vZy5odG1sLlNhZmVIdG1sLmNvbWJpbmVBdHRyaWJ1dGVzKFxuICAgICAgZml4ZWRBdHRyaWJ1dGVzLCBkZWZhdWx0QXR0cmlidXRlcywgb3B0X2F0dHJpYnV0ZXMpO1xuICByZXR1cm4gZ29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVNhZmVIdG1sVGFnU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXG4gICAgICAnaWZyYW1lJywgYXR0cmlidXRlcywgb3B0X2NvbnRlbnQpO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBTYWZlSHRtbCByZXByZXNlbnRpbmcgYSBzdHlsZSB0YWcuIFRoZSB0eXBlIGF0dHJpYnV0ZSBpcyBzZXRcbiAqIHRvIFwidGV4dC9jc3NcIi5cbiAqIEBwYXJhbSB7IWdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldHwhQXJyYXk8IWdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldD59XG4gKiAgICAgc3R5bGVTaGVldCBDb250ZW50IHRvIHB1dCBpbnNpZGUgdGhlIHRhZy4gQXJyYXkgZWxlbWVudHMgYXJlXG4gKiAgICAgY29uY2F0ZW5hdGVkLlxuICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgZ29vZy5odG1sLlNhZmVIdG1sLkF0dHJpYnV0ZVZhbHVlXz49fVxuICogICAgIG9wdF9hdHRyaWJ1dGVzIE1hcHBpbmcgZnJvbSBhdHRyaWJ1dGUgbmFtZXMgdG8gdGhlaXIgdmFsdWVzLiBPbmx5XG4gKiAgICAgYXR0cmlidXRlIG5hbWVzIGNvbnNpc3Rpbmcgb2YgW2EtekEtWjAtOS1dIGFyZSBhbGxvd2VkLiBWYWx1ZSBvZiBudWxsIG9yXG4gKiAgICAgdW5kZWZpbmVkIGNhdXNlcyB0aGUgYXR0cmlidXRlIHRvIGJlIG9taXR0ZWQuXG4gKiBAcmV0dXJuIHshZ29vZy5odG1sLlNhZmVIdG1sfSBUaGUgU2FmZUh0bWwgY29udGVudCB3aXRoIHRoZSB0YWcuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgaW52YWxpZCBhdHRyaWJ1dGUgbmFtZSBvciBhdHRyaWJ1dGUgdmFsdWUgaXMgcHJvdmlkZWQuIElmXG4gKiAgICAgb3B0X2F0dHJpYnV0ZXMgY29udGFpbnMgdGhlIHR5cGUgYXR0cmlidXRlLlxuICovXG5nb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlU3R5bGUgPSBmdW5jdGlvbihzdHlsZVNoZWV0LCBvcHRfYXR0cmlidXRlcykge1xuICB2YXIgZml4ZWRBdHRyaWJ1dGVzID0geyd0eXBlJzogJ3RleHQvY3NzJ307XG4gIHZhciBkZWZhdWx0QXR0cmlidXRlcyA9IHt9O1xuICB2YXIgYXR0cmlidXRlcyA9IGdvb2cuaHRtbC5TYWZlSHRtbC5jb21iaW5lQXR0cmlidXRlcyhcbiAgICAgIGZpeGVkQXR0cmlidXRlcywgZGVmYXVsdEF0dHJpYnV0ZXMsIG9wdF9hdHRyaWJ1dGVzKTtcblxuICB2YXIgY29udGVudCA9ICcnO1xuICBzdHlsZVNoZWV0ID0gZ29vZy5hcnJheS5jb25jYXQoc3R5bGVTaGVldCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVTaGVldC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnRlbnQgKz0gZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LnVud3JhcChzdHlsZVNoZWV0W2ldKTtcbiAgfVxuICAvLyBDb252ZXJ0IHRvIFNhZmVIdG1sIHNvIHRoYXQgaXQncyBub3QgSFRNTC1lc2NhcGVkLlxuICB2YXIgaHRtbENvbnRlbnQgPSBnb29nLmh0bWwuU2FmZUh0bWxcbiAgICAgIC5jcmVhdGVTYWZlSHRtbFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKFxuICAgICAgICAgIGNvbnRlbnQsIGdvb2cuaTE4bi5iaWRpLkRpci5ORVVUUkFMKTtcbiAgcmV0dXJuIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFRhZ1NlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKFxuICAgICAgJ3N0eWxlJywgYXR0cmlidXRlcywgaHRtbENvbnRlbnQpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lIFRoZSB0YWcgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBhdHRyaWJ1dGUgbmFtZS5cbiAqIEBwYXJhbSB7IWdvb2cuaHRtbC5TYWZlSHRtbC5BdHRyaWJ1dGVWYWx1ZV99IHZhbHVlIFRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgXCJuYW1lPXZhbHVlXCIgc3RyaW5nLlxuICogQHRocm93cyB7RXJyb3J9IElmIGF0dHJpYnV0ZSB2YWx1ZSBpcyB1bnNhZmUgZm9yIHRoZSBnaXZlbiB0YWcgYW5kIGF0dHJpYnV0ZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaHRtbC5TYWZlSHRtbC5nZXRBdHRyTmFtZUFuZFZhbHVlXyA9IGZ1bmN0aW9uKHRhZ05hbWUsIG5hbWUsIHZhbHVlKSB7XG4gIC8vIElmIGl0J3MgZ29vZy5zdHJpbmcuQ29uc3QsIGFsbG93IGFueSB2YWxpZCBhdHRyaWJ1dGUgbmFtZS5cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgZ29vZy5zdHJpbmcuQ29uc3QpIHtcbiAgICB2YWx1ZSA9IGdvb2cuc3RyaW5nLkNvbnN0LnVud3JhcCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAobmFtZS50b0xvd2VyQ2FzZSgpID09ICdzdHlsZScpIHtcbiAgICB2YWx1ZSA9IGdvb2cuaHRtbC5TYWZlSHRtbC5nZXRTdHlsZVZhbHVlXyh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoL15vbi9pLnRlc3QobmFtZSkpIHtcbiAgICAvLyBUT0RPKGpha3VidnJhbmEpOiBEaXNhbGxvdyBtb3JlIGF0dHJpYnV0ZXMgd2l0aCBhIHNwZWNpYWwgbWVhbmluZy5cbiAgICB0aHJvdyBFcnJvcignQXR0cmlidXRlIFwiJyArIG5hbWUgK1xuICAgICAgICAnXCIgcmVxdWlyZXMgZ29vZy5zdHJpbmcuQ29uc3QgdmFsdWUsIFwiJyArIHZhbHVlICsgJ1wiIGdpdmVuLicpO1xuICAvLyBVUkwgYXR0cmlidXRlcyBoYW5kbGVkIGRpZmZlcmVudGx5IGFjY3JvZGluZyB0byB0YWcuXG4gIH0gZWxzZSBpZiAobmFtZS50b0xvd2VyQ2FzZSgpIGluIGdvb2cuaHRtbC5TYWZlSHRtbC5VUkxfQVRUUklCVVRFU18pIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsKSB7XG4gICAgICB2YWx1ZSA9IGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVVcmwpIHtcbiAgICAgIHZhbHVlID0gZ29vZy5odG1sLlNhZmVVcmwudW53cmFwKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGdvb2cuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IGdvb2cuaHRtbC5TYWZlVXJsLnNhbml0aXplKHZhbHVlKS5nZXRUeXBlZFN0cmluZ1ZhbHVlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKCdBdHRyaWJ1dGUgXCInICsgbmFtZSArICdcIiBvbiB0YWcgXCInICsgdGFnTmFtZSArXG4gICAgICAgICAgJ1wiIHJlcXVpcmVzIGdvb2cuaHRtbC5TYWZlVXJsLCBnb29nLnN0cmluZy5Db25zdCwgb3Igc3RyaW5nLCcgK1xuICAgICAgICAgICcgdmFsdWUgXCInICsgdmFsdWUgKyAnXCIgZ2l2ZW4uJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWNjZXB0IFNhZmVVcmwsIFRydXN0ZWRSZXNvdXJjZVVybCwgZXRjLiBmb3IgYXR0cmlidXRlcyB3aGljaCBvbmx5IHJlcXVpcmVcbiAgLy8gSFRNTC1lc2NhcGluZy5cbiAgaWYgKHZhbHVlLmltcGxlbWVudHNHb29nU3RyaW5nVHlwZWRTdHJpbmcpIHtcbiAgICAvLyBPayB0byBjYWxsIGdldFR5cGVkU3RyaW5nVmFsdWUoKSBzaW5jZSB0aGVyZSdzIG5vIHJlbGlhbmNlIG9uIHRoZSB0eXBlXG4gICAgLy8gY29udHJhY3QgZm9yIHNlY3VyaXR5IGhlcmUuXG4gICAgdmFsdWUgPSB2YWx1ZS5nZXRUeXBlZFN0cmluZ1ZhbHVlKCk7XG4gIH1cblxuICBnb29nLmFzc2VydHMuYXNzZXJ0KGdvb2cuaXNTdHJpbmcodmFsdWUpIHx8IGdvb2cuaXNOdW1iZXIodmFsdWUpLFxuICAgICAgJ1N0cmluZyBvciBudW1iZXIgdmFsdWUgZXhwZWN0ZWQsIGdvdCAnICtcbiAgICAgICh0eXBlb2YgdmFsdWUpICsgJyB3aXRoIHZhbHVlOiAnICsgdmFsdWUpO1xuICByZXR1cm4gbmFtZSArICc9XCInICsgZ29vZy5zdHJpbmcuaHRtbEVzY2FwZShTdHJpbmcodmFsdWUpKSArICdcIic7XG59O1xuXG5cbi8qKlxuICogR2V0cyB2YWx1ZSBhbGxvd2VkIGluIFwic3R5bGVcIiBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge2dvb2cuaHRtbC5TYWZlSHRtbC5BdHRyaWJ1dGVWYWx1ZV99IHZhbHVlIEl0IGNvdWxkIGJlIFNhZmVTdHlsZSBvciBhXG4gKiAgICAgbWFwIHdoaWNoIHdpbGwgYmUgcGFzc2VkIHRvIGdvb2cuaHRtbC5TYWZlU3R5bGUuY3JlYXRlLlxuICogQHJldHVybiB7c3RyaW5nfSBVbndyYXBwZWQgdmFsdWUuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgc3RyaW5nIHZhbHVlIGlzIGdpdmVuLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5odG1sLlNhZmVIdG1sLmdldFN0eWxlVmFsdWVfID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFnb29nLmlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHRocm93IEVycm9yKCdUaGUgXCJzdHlsZVwiIGF0dHJpYnV0ZSByZXF1aXJlcyBnb29nLmh0bWwuU2FmZVN0eWxlIG9yIG1hcCAnICtcbiAgICAgICAgJ29mIHN0eWxlIHByb3BlcnRpZXMsICcgKyAodHlwZW9mIHZhbHVlKSArICcgZ2l2ZW46ICcgKyB2YWx1ZSk7XG4gIH1cbiAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZVN0eWxlKSkge1xuICAgIC8vIFByb2Nlc3MgdGhlIHByb3BlcnR5IGJhZyBpbnRvIGEgc3R5bGUgb2JqZWN0LlxuICAgIHZhbHVlID0gZ29vZy5odG1sLlNhZmVTdHlsZS5jcmVhdGUodmFsdWUpO1xuICB9XG4gIHJldHVybiBnb29nLmh0bWwuU2FmZVN0eWxlLnVud3JhcCh2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIFNhZmVIdG1sIGNvbnRlbnQgd2l0aCBrbm93biBkaXJlY3Rpb25hbGl0eSBjb25zaXN0aW5nIG9mIGEgdGFnIHdpdGhcbiAqIG9wdGlvbmFsIGF0dHJpYnV0ZXMgYW5kIG9wdGlvbmFsIGNvbnRlbnQuXG4gKiBAcGFyYW0geyFnb29nLmkxOG4uYmlkaS5EaXJ9IGRpciBEaXJlY3Rpb25hbGl0eS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBnb29nLmh0bWwuU2FmZUh0bWwuQXR0cmlidXRlVmFsdWVfPj19IG9wdF9hdHRyaWJ1dGVzXG4gKiBAcGFyYW0geyFnb29nLmh0bWwuU2FmZUh0bWwuVGV4dE9ySHRtbF98XG4gKiAgICAgIUFycmF5PCFnb29nLmh0bWwuU2FmZUh0bWwuVGV4dE9ySHRtbF8+PX0gb3B0X2NvbnRlbnRcbiAqIEByZXR1cm4geyFnb29nLmh0bWwuU2FmZUh0bWx9IFRoZSBTYWZlSHRtbCBjb250ZW50IHdpdGggdGhlIHRhZy5cbiAqL1xuZ29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVdpdGhEaXIgPSBmdW5jdGlvbihkaXIsIHRhZ05hbWUsIG9wdF9hdHRyaWJ1dGVzLFxuICAgIG9wdF9jb250ZW50KSB7XG4gIHZhciBodG1sID0gZ29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZSh0YWdOYW1lLCBvcHRfYXR0cmlidXRlcywgb3B0X2NvbnRlbnQpO1xuICBodG1sLmRpcl8gPSBkaXI7XG4gIHJldHVybiBodG1sO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgU2FmZUh0bWwgb2JqZWN0IGJ5IGNvbmNhdGVuYXRpbmcgdmFsdWVzLlxuICogQHBhcmFtIHsuLi4oIWdvb2cuaHRtbC5TYWZlSHRtbC5UZXh0T3JIdG1sX3xcbiAqICAgICAhQXJyYXk8IWdvb2cuaHRtbC5TYWZlSHRtbC5UZXh0T3JIdG1sXz4pfSB2YXJfYXJncyBWYWx1ZXMgdG8gY29uY2F0ZW5hdGUuXG4gKiBAcmV0dXJuIHshZ29vZy5odG1sLlNhZmVIdG1sfVxuICovXG5nb29nLmh0bWwuU2FmZUh0bWwuY29uY2F0ID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcbiAgdmFyIGRpciA9IGdvb2cuaTE4bi5iaWRpLkRpci5ORVVUUkFMO1xuICB2YXIgY29udGVudCA9ICcnO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFnb29nLmh0bWwuU2FmZUh0bWwuVGV4dE9ySHRtbF98XG4gICAqICAgICAhQXJyYXk8IWdvb2cuaHRtbC5TYWZlSHRtbC5UZXh0T3JIdG1sXz59IGFyZ3VtZW50XG4gICAqL1xuICB2YXIgYWRkQXJndW1lbnQgPSBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgIGlmIChnb29nLmlzQXJyYXkoYXJndW1lbnQpKSB7XG4gICAgICBnb29nLmFycmF5LmZvckVhY2goYXJndW1lbnQsIGFkZEFyZ3VtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGh0bWwgPSBnb29nLmh0bWwuU2FmZUh0bWwuaHRtbEVzY2FwZShhcmd1bWVudCk7XG4gICAgICBjb250ZW50ICs9IGdvb2cuaHRtbC5TYWZlSHRtbC51bndyYXAoaHRtbCk7XG4gICAgICB2YXIgaHRtbERpciA9IGh0bWwuZ2V0RGlyZWN0aW9uKCk7XG4gICAgICBpZiAoZGlyID09IGdvb2cuaTE4bi5iaWRpLkRpci5ORVVUUkFMKSB7XG4gICAgICAgIGRpciA9IGh0bWxEaXI7XG4gICAgICB9IGVsc2UgaWYgKGh0bWxEaXIgIT0gZ29vZy5pMThuLmJpZGkuRGlyLk5FVVRSQUwgJiYgZGlyICE9IGh0bWxEaXIpIHtcbiAgICAgICAgZGlyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZ29vZy5hcnJheS5mb3JFYWNoKGFyZ3VtZW50cywgYWRkQXJndW1lbnQpO1xuICByZXR1cm4gZ29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVNhZmVIdG1sU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXG4gICAgICBjb250ZW50LCBkaXIpO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgU2FmZUh0bWwgb2JqZWN0IHdpdGgga25vd24gZGlyZWN0aW9uYWxpdHkgYnkgY29uY2F0ZW5hdGluZyB0aGVcbiAqIHZhbHVlcy5cbiAqIEBwYXJhbSB7IWdvb2cuaTE4bi5iaWRpLkRpcn0gZGlyIERpcmVjdGlvbmFsaXR5LlxuICogQHBhcmFtIHsuLi4oIWdvb2cuaHRtbC5TYWZlSHRtbC5UZXh0T3JIdG1sX3xcbiAqICAgICAhQXJyYXk8IWdvb2cuaHRtbC5TYWZlSHRtbC5UZXh0T3JIdG1sXz4pfSB2YXJfYXJncyBFbGVtZW50cyBvZiBhcnJheVxuICogICAgIGFyZ3VtZW50cyB3b3VsZCBiZSBwcm9jZXNzZWQgcmVjdXJzaXZlbHkuXG4gKiBAcmV0dXJuIHshZ29vZy5odG1sLlNhZmVIdG1sfVxuICovXG5nb29nLmh0bWwuU2FmZUh0bWwuY29uY2F0V2l0aERpciA9IGZ1bmN0aW9uKGRpciwgdmFyX2FyZ3MpIHtcbiAgdmFyIGh0bWwgPSBnb29nLmh0bWwuU2FmZUh0bWwuY29uY2F0KGdvb2cuYXJyYXkuc2xpY2UoYXJndW1lbnRzLCAxKSk7XG4gIGh0bWwuZGlyXyA9IGRpcjtcbiAgcmV0dXJuIGh0bWw7XG59O1xuXG5cbi8qKlxuICogVHlwZSBtYXJrZXIgZm9yIHRoZSBTYWZlSHRtbCB0eXBlLCB1c2VkIHRvIGltcGxlbWVudCBhZGRpdGlvbmFsIHJ1bi10aW1lXG4gKiB0eXBlIGNoZWNraW5nLlxuICogQGNvbnN0IHshT2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5odG1sLlNhZmVIdG1sLlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXyA9IHt9O1xuXG5cbi8qKlxuICogUGFja2FnZS1pbnRlcm5hbCB1dGlsaXR5IG1ldGhvZCB0byBjcmVhdGUgU2FmZUh0bWwgaW5zdGFuY2VzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sIFRoZSBzdHJpbmcgdG8gaW5pdGlhbGl6ZSB0aGUgU2FmZUh0bWwgb2JqZWN0IHdpdGguXG4gKiBAcGFyYW0gez9nb29nLmkxOG4uYmlkaS5EaXJ9IGRpciBUaGUgZGlyZWN0aW9uYWxpdHkgb2YgdGhlIFNhZmVIdG1sIHRvIGJlXG4gKiAgICAgY29uc3RydWN0ZWQsIG9yIG51bGwgaWYgdW5rbm93bi5cbiAqIEByZXR1cm4geyFnb29nLmh0bWwuU2FmZUh0bWx9IFRoZSBpbml0aWFsaXplZCBTYWZlSHRtbCBvYmplY3QuXG4gKiBAcGFja2FnZVxuICovXG5nb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlU2FmZUh0bWxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZSA9IGZ1bmN0aW9uKFxuICAgIGh0bWwsIGRpcikge1xuICByZXR1cm4gbmV3IGdvb2cuaHRtbC5TYWZlSHRtbCgpLmluaXRTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZV8oXG4gICAgICBodG1sLCBkaXIpO1xufTtcblxuXG4vKipcbiAqIENhbGxlZCBmcm9tIGNyZWF0ZVNhZmVIdG1sU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoKS4gVGhpc1xuICogbWV0aG9kIGV4aXN0cyBvbmx5IHNvIHRoYXQgdGhlIGNvbXBpbGVyIGNhbiBkZWFkIGNvZGUgZWxpbWluYXRlIHN0YXRpY1xuICogZmllbGRzIChsaWtlIEVNUFRZKSB3aGVuIHRoZXkncmUgbm90IGFjY2Vzc2VkLlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEBwYXJhbSB7P2dvb2cuaTE4bi5iaWRpLkRpcn0gZGlyXG4gKiBAcmV0dXJuIHshZ29vZy5odG1sLlNhZmVIdG1sfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5odG1sLlNhZmVIdG1sLnByb3RvdHlwZS5pbml0U2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VfID0gZnVuY3Rpb24oXG4gICAgaHRtbCwgZGlyKSB7XG4gIHRoaXMucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZUh0bWxXcmFwcGVkVmFsdWVfID0gaHRtbDtcbiAgdGhpcy5kaXJfID0gZGlyO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBMaWtlIGNyZWF0ZSgpIGJ1dCBkb2VzIG5vdCByZXN0cmljdCB3aGljaCB0YWdzIGNhbiBiZSBjb25zdHJ1Y3RlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSBUYWcgbmFtZS4gU2V0IG9yIHZhbGlkYXRlZCBieSBjYWxsZXIuXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBnb29nLmh0bWwuU2FmZUh0bWwuQXR0cmlidXRlVmFsdWVfPj19IG9wdF9hdHRyaWJ1dGVzXG4gKiBAcGFyYW0geyghZ29vZy5odG1sLlNhZmVIdG1sLlRleHRPckh0bWxffFxuICogICAgICFBcnJheTwhZ29vZy5odG1sLlNhZmVIdG1sLlRleHRPckh0bWxfPik9fSBvcHRfY29udGVudFxuICogQHJldHVybiB7IWdvb2cuaHRtbC5TYWZlSHRtbH1cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpbnZhbGlkIG9yIHVuc2FmZSBhdHRyaWJ1dGUgbmFtZSBvciB2YWx1ZSBpcyBwcm92aWRlZC5cbiAqIEB0aHJvd3Mge2dvb2cuYXNzZXJ0cy5Bc3NlcnRpb25FcnJvcn0gSWYgY29udGVudCBmb3Igdm9pZCB0YWcgaXMgcHJvdmlkZWQuXG4gKiBAcGFja2FnZVxuICovXG5nb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlU2FmZUh0bWxUYWdTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZSA9XG4gICAgZnVuY3Rpb24odGFnTmFtZSwgb3B0X2F0dHJpYnV0ZXMsIG9wdF9jb250ZW50KSB7XG4gIHZhciBkaXIgPSBudWxsO1xuICB2YXIgcmVzdWx0ID0gJzwnICsgdGFnTmFtZTtcblxuICBpZiAob3B0X2F0dHJpYnV0ZXMpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIG9wdF9hdHRyaWJ1dGVzKSB7XG4gICAgICBpZiAoIWdvb2cuaHRtbC5TYWZlSHRtbC5WQUxJRF9OQU1FU19JTl9UQUdfLnRlc3QobmFtZSkpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgYXR0cmlidXRlIG5hbWUgXCInICsgbmFtZSArICdcIi4nKTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IG9wdF9hdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgaWYgKCFnb29nLmlzRGVmQW5kTm90TnVsbCh2YWx1ZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgKz0gJyAnICtcbiAgICAgICAgICBnb29nLmh0bWwuU2FmZUh0bWwuZ2V0QXR0ck5hbWVBbmRWYWx1ZV8odGFnTmFtZSwgbmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb250ZW50ID0gb3B0X2NvbnRlbnQ7XG4gIGlmICghZ29vZy5pc0RlZkFuZE5vdE51bGwoY29udGVudCkpIHtcbiAgICBjb250ZW50ID0gW107XG4gIH0gZWxzZSBpZiAoIWdvb2cuaXNBcnJheShjb250ZW50KSkge1xuICAgIGNvbnRlbnQgPSBbY29udGVudF07XG4gIH1cblxuICBpZiAoZ29vZy5kb20udGFncy5pc1ZvaWRUYWcodGFnTmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIGdvb2cuYXNzZXJ0cy5hc3NlcnQoIWNvbnRlbnQubGVuZ3RoLFxuICAgICAgICAnVm9pZCB0YWcgPCcgKyB0YWdOYW1lICsgJz4gZG9lcyBub3QgYWxsb3cgY29udGVudC4nKTtcbiAgICByZXN1bHQgKz0gJz4nO1xuICB9IGVsc2Uge1xuICAgIHZhciBodG1sID0gZ29vZy5odG1sLlNhZmVIdG1sLmNvbmNhdChjb250ZW50KTtcbiAgICByZXN1bHQgKz0gJz4nICsgZ29vZy5odG1sLlNhZmVIdG1sLnVud3JhcChodG1sKSArICc8LycgKyB0YWdOYW1lICsgJz4nO1xuICAgIGRpciA9IGh0bWwuZ2V0RGlyZWN0aW9uKCk7XG4gIH1cblxuICB2YXIgZGlyQXR0cmlidXRlID0gb3B0X2F0dHJpYnV0ZXMgJiYgb3B0X2F0dHJpYnV0ZXNbJ2RpciddO1xuICBpZiAoZGlyQXR0cmlidXRlKSB7XG4gICAgaWYgKC9eKGx0cnxydGx8YXV0bykkL2kudGVzdChkaXJBdHRyaWJ1dGUpKSB7XG4gICAgICAvLyBJZiB0aGUgdGFnIGhhcyB0aGUgXCJkaXJcIiBhdHRyaWJ1dGUgc3BlY2lmaWVkIHRoZW4gaXRzIGRpcmVjdGlvbiBpc1xuICAgICAgLy8gbmV1dHJhbCBiZWNhdXNlIGl0IGNhbiBiZSBzYWZlbHkgdXNlZCBpbiBhbnkgY29udGV4dC5cbiAgICAgIGRpciA9IGdvb2cuaTE4bi5iaWRpLkRpci5ORVVUUkFMO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlU2FmZUh0bWxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShcbiAgICAgIHJlc3VsdCwgZGlyKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBmaXhlZEF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59IGRlZmF1bHRBdHRyaWJ1dGVzXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBnb29nLmh0bWwuU2FmZUh0bWwuQXR0cmlidXRlVmFsdWVfPj19XG4gKiAgICAgb3B0X2F0dHJpYnV0ZXMgT3B0aW9uYWwgYXR0cmlidXRlcyBwYXNzZWQgdG8gY3JlYXRlKigpLlxuICogQHJldHVybiB7IU9iamVjdDxzdHJpbmcsIGdvb2cuaHRtbC5TYWZlSHRtbC5BdHRyaWJ1dGVWYWx1ZV8+fVxuICogQHRocm93cyB7RXJyb3J9IElmIG9wdF9hdHRyaWJ1dGVzIGNvbnRhaW5zIGFuIGF0dHJpYnV0ZSB3aXRoIHRoZSBzYW1lIG5hbWVcbiAqICAgICBhcyBhbiBhdHRyaWJ1dGUgaW4gZml4ZWRBdHRyaWJ1dGVzLlxuICogQHBhY2thZ2VcbiAqL1xuZ29vZy5odG1sLlNhZmVIdG1sLmNvbWJpbmVBdHRyaWJ1dGVzID0gZnVuY3Rpb24oXG4gICAgZml4ZWRBdHRyaWJ1dGVzLCBkZWZhdWx0QXR0cmlidXRlcywgb3B0X2F0dHJpYnV0ZXMpIHtcbiAgdmFyIGNvbWJpbmVkQXR0cmlidXRlcyA9IHt9O1xuICB2YXIgbmFtZTtcblxuICBmb3IgKG5hbWUgaW4gZml4ZWRBdHRyaWJ1dGVzKSB7XG4gICAgZ29vZy5hc3NlcnRzLmFzc2VydChuYW1lLnRvTG93ZXJDYXNlKCkgPT0gbmFtZSwgJ011c3QgYmUgbG93ZXIgY2FzZScpO1xuICAgIGNvbWJpbmVkQXR0cmlidXRlc1tuYW1lXSA9IGZpeGVkQXR0cmlidXRlc1tuYW1lXTtcbiAgfVxuICBmb3IgKG5hbWUgaW4gZGVmYXVsdEF0dHJpYnV0ZXMpIHtcbiAgICBnb29nLmFzc2VydHMuYXNzZXJ0KG5hbWUudG9Mb3dlckNhc2UoKSA9PSBuYW1lLCAnTXVzdCBiZSBsb3dlciBjYXNlJyk7XG4gICAgY29tYmluZWRBdHRyaWJ1dGVzW25hbWVdID0gZGVmYXVsdEF0dHJpYnV0ZXNbbmFtZV07XG4gIH1cblxuICBmb3IgKG5hbWUgaW4gb3B0X2F0dHJpYnV0ZXMpIHtcbiAgICB2YXIgbmFtZUxvd2VyID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChuYW1lTG93ZXIgaW4gZml4ZWRBdHRyaWJ1dGVzKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2Fubm90IG92ZXJyaWRlIFwiJyArIG5hbWVMb3dlciArICdcIiBhdHRyaWJ1dGUsIGdvdCBcIicgK1xuICAgICAgICAgIG5hbWUgKyAnXCIgd2l0aCB2YWx1ZSBcIicgKyBvcHRfYXR0cmlidXRlc1tuYW1lXSArICdcIicpO1xuICAgIH1cbiAgICBpZiAobmFtZUxvd2VyIGluIGRlZmF1bHRBdHRyaWJ1dGVzKSB7XG4gICAgICBkZWxldGUgY29tYmluZWRBdHRyaWJ1dGVzW25hbWVMb3dlcl07XG4gICAgfVxuICAgIGNvbWJpbmVkQXR0cmlidXRlc1tuYW1lXSA9IG9wdF9hdHRyaWJ1dGVzW25hbWVdO1xuICB9XG5cbiAgcmV0dXJuIGNvbWJpbmVkQXR0cmlidXRlcztcbn07XG5cblxuLyoqXG4gKiBBIFNhZmVIdG1sIGluc3RhbmNlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIEhUTUwgZG9jdHlwZTogXCI8IURPQ1RZUEUgaHRtbD5cIi5cbiAqIEBjb25zdCB7IWdvb2cuaHRtbC5TYWZlSHRtbH1cbiAqL1xuZ29vZy5odG1sLlNhZmVIdG1sLkRPQ1RZUEVfSFRNTCA9XG4gICAgZ29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVNhZmVIdG1sU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXG4gICAgICAgICc8IURPQ1RZUEUgaHRtbD4nLCBnb29nLmkxOG4uYmlkaS5EaXIuTkVVVFJBTCk7XG5cblxuLyoqXG4gKiBBIFNhZmVIdG1sIGluc3RhbmNlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGVtcHR5IHN0cmluZy5cbiAqIEBjb25zdCB7IWdvb2cuaHRtbC5TYWZlSHRtbH1cbiAqL1xuZ29vZy5odG1sLlNhZmVIdG1sLkVNUFRZID1cbiAgICBnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlU2FmZUh0bWxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShcbiAgICAgICAgJycsIGdvb2cuaTE4bi5iaWRpLkRpci5ORVVUUkFMKTtcbiIsIi8vIENvcHlyaWdodCAyMDEzIFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVHlwZS1zYWZlIHdyYXBwZXJzIGZvciB1bnNhZmUgRE9NIEFQSXMuXG4gKlxuICogVGhpcyBmaWxlIHByb3ZpZGVzIHR5cGUtc2FmZSB3cmFwcGVycyBmb3IgRE9NIEFQSXMgdGhhdCBjYW4gcmVzdWx0IGluXG4gKiBjcm9zcy1zaXRlIHNjcmlwdGluZyAoWFNTKSB2dWxuZXJhYmlsaXRpZXMsIGlmIHRoZSBBUEkgaXMgc3VwcGxpZWQgd2l0aFxuICogdW50cnVzdGVkIChhdHRhY2tlci1jb250cm9sbGVkKSBpbnB1dC4gIEluc3RlYWQgb2YgcGxhaW4gc3RyaW5ncywgdGhlIHR5cGVcbiAqIHNhZmUgd3JhcHBlcnMgY29uc3VtZSB2YWx1ZXMgb2YgdHlwZXMgZnJvbSB0aGUgZ29vZy5odG1sIHBhY2thZ2Ugd2hvc2VcbiAqIGNvbnRyYWN0IHByb21pc2VzIHRoYXQgdmFsdWVzIGFyZSBzYWZlIHRvIHVzZSBpbiB0aGUgY29ycmVzcG9uZGluZyBjb250ZXh0LlxuICpcbiAqIEhlbmNlLCBhIHByb2dyYW0gdGhhdCBleGNsdXNpdmVseSB1c2VzIHRoZSB3cmFwcGVycyBpbiB0aGlzIGZpbGUgKGkuZS4sIHdob3NlXG4gKiBvbmx5IHJlZmVyZW5jZSB0byBzZWN1cml0eS1zZW5zaXRpdmUgcmF3IERPTSBBUElzIGFyZSBpbiB0aGlzIGZpbGUpIGlzXG4gKiBndWFyYW50ZWVkIHRvIGJlIGZyZWUgb2YgWFNTIGR1ZSB0byBpbmNvcnJlY3QgdXNlIG9mIHN1Y2ggRE9NIEFQSXMgKG1vZHVsb1xuICogY29ycmVjdG5lc3Mgb2YgY29kZSB0aGF0IHByb2R1Y2VzIHZhbHVlcyBvZiB0aGUgcmVzcGVjdGl2ZSBnb29nLmh0bWwgdHlwZXMsXG4gKiBhbmQgYWJzZW50IGNvZGUgdGhhdCB2aW9sYXRlcyB0eXBlIHNhZmV0eSkuXG4gKlxuICogRm9yIGV4YW1wbGUsIGFzc2lnbmluZyB0byBhbiBlbGVtZW50J3MgLmlubmVySFRNTCBwcm9wZXJ0eSBhIHN0cmluZyB0aGF0IGlzXG4gKiBkZXJpdmVkIChldmVuIHBhcnRpYWxseSkgZnJvbSB1bnRydXN0ZWQgaW5wdXQgdHlwaWNhbGx5IHJlc3VsdHMgaW4gYW4gWFNTXG4gKiB2dWxuZXJhYmlsaXR5LiBUaGUgdHlwZS1zYWZlIHdyYXBwZXIgZ29vZy5odG1sLnNldElubmVySHRtbCBjb25zdW1lcyBhIHZhbHVlXG4gKiBvZiB0eXBlIGdvb2cuaHRtbC5TYWZlSHRtbCwgd2hvc2UgY29udHJhY3Qgc3RhdGVzIHRoYXQgdXNpbmcgaXRzIHZhbHVlcyBpbiBhXG4gKiBIVE1MIGNvbnRleHQgd2lsbCBub3QgcmVzdWx0IGluIFhTUy4gSGVuY2UgYSBwcm9ncmFtIHRoYXQgaXMgZnJlZSBvZiBkaXJlY3RcbiAqIGFzc2lnbm1lbnRzIHRvIGFueSBlbGVtZW50J3MgaW5uZXJIVE1MIHByb3BlcnR5ICh3aXRoIHRoZSBleGNlcHRpb24gb2YgdGhlXG4gKiBhc3NpZ25tZW50IHRvIC5pbm5lckhUTUwgaW4gdGhpcyBmaWxlKSBpcyBndWFyYW50ZWVkIHRvIGJlIGZyZWUgb2YgWFNTIGR1ZSB0b1xuICogYXNzaWdubWVudCBvZiB1bnRydXN0ZWQgc3RyaW5ncyB0byB0aGUgaW5uZXJIVE1MIHByb3BlcnR5LlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5kb20uc2FmZScpO1xuZ29vZy5wcm92aWRlKCdnb29nLmRvbS5zYWZlLkluc2VydEFkamFjZW50SHRtbFBvc2l0aW9uJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuaHRtbC5TYWZlSHRtbCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmh0bWwuU2FmZVVybCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuc3RyaW5nJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuc3RyaW5nLkNvbnN0Jyk7XG5cblxuLyoqIEBlbnVtIHtzdHJpbmd9ICovXG5nb29nLmRvbS5zYWZlLkluc2VydEFkamFjZW50SHRtbFBvc2l0aW9uID0ge1xuICBBRlRFUkJFR0lOOiAnYWZ0ZXJiZWdpbicsXG4gIEFGVEVSRU5EOiAnYWZ0ZXJlbmQnLFxuICBCRUZPUkVCRUdJTjogJ2JlZm9yZWJlZ2luJyxcbiAgQkVGT1JFRU5EOiAnYmVmb3JlZW5kJ1xufTtcblxuXG4vKipcbiAqIEluc2VydHMga25vd24tc2FmZSBIVE1MIGludG8gYSBOb2RlLCBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxuICogQHBhcmFtIHshTm9kZX0gbm9kZSBUaGUgbm9kZSBvbiB3aGljaCB0byBjYWxsIGluc2VydEFkamFjZW50SFRNTC5cbiAqIEBwYXJhbSB7IWdvb2cuZG9tLnNhZmUuSW5zZXJ0QWRqYWNlbnRIdG1sUG9zaXRpb259IHBvc2l0aW9uIFBvc2l0aW9uIHdoZXJlXG4gKiAgICAgdG8gaW5zZXJ0IHRoZSBIVE1MLlxuICogQHBhcmFtIHshZ29vZy5odG1sLlNhZmVIdG1sfSBodG1sIFRoZSBrbm93bi1zYWZlIEhUTUwgdG8gaW5zZXJ0LlxuICovXG5nb29nLmRvbS5zYWZlLmluc2VydEFkamFjZW50SHRtbCA9IGZ1bmN0aW9uKG5vZGUsIHBvc2l0aW9uLCBodG1sKSB7XG4gIG5vZGUuaW5zZXJ0QWRqYWNlbnRIVE1MKHBvc2l0aW9uLCBnb29nLmh0bWwuU2FmZUh0bWwudW53cmFwKGh0bWwpKTtcbn07XG5cblxuLyoqXG4gKiBBc3NpZ25zIGtub3duLXNhZmUgSFRNTCB0byBhbiBlbGVtZW50J3MgaW5uZXJIVE1MIHByb3BlcnR5LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbSBUaGUgZWxlbWVudCB3aG9zZSBpbm5lckhUTUwgaXMgdG8gYmUgYXNzaWduZWQgdG8uXG4gKiBAcGFyYW0geyFnb29nLmh0bWwuU2FmZUh0bWx9IGh0bWwgVGhlIGtub3duLXNhZmUgSFRNTCB0byBhc3NpZ24uXG4gKi9cbmdvb2cuZG9tLnNhZmUuc2V0SW5uZXJIdG1sID0gZnVuY3Rpb24oZWxlbSwgaHRtbCkge1xuICBlbGVtLmlubmVySFRNTCA9IGdvb2cuaHRtbC5TYWZlSHRtbC51bndyYXAoaHRtbCk7XG59O1xuXG5cbi8qKlxuICogQXNzaWducyBrbm93bi1zYWZlIEhUTUwgdG8gYW4gZWxlbWVudCdzIG91dGVySFRNTCBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW0gVGhlIGVsZW1lbnQgd2hvc2Ugb3V0ZXJIVE1MIGlzIHRvIGJlIGFzc2lnbmVkIHRvLlxuICogQHBhcmFtIHshZ29vZy5odG1sLlNhZmVIdG1sfSBodG1sIFRoZSBrbm93bi1zYWZlIEhUTUwgdG8gYXNzaWduLlxuICovXG5nb29nLmRvbS5zYWZlLnNldE91dGVySHRtbCA9IGZ1bmN0aW9uKGVsZW0sIGh0bWwpIHtcbiAgZWxlbS5vdXRlckhUTUwgPSBnb29nLmh0bWwuU2FmZUh0bWwudW53cmFwKGh0bWwpO1xufTtcblxuXG4vKipcbiAqIFdyaXRlcyBrbm93bi1zYWZlIEhUTUwgdG8gYSBkb2N1bWVudC5cbiAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2MgVGhlIGRvY3VtZW50IHRvIGJlIHdyaXR0ZW4gdG8uXG4gKiBAcGFyYW0geyFnb29nLmh0bWwuU2FmZUh0bWx9IGh0bWwgVGhlIGtub3duLXNhZmUgSFRNTCB0byBhc3NpZ24uXG4gKi9cbmdvb2cuZG9tLnNhZmUuZG9jdW1lbnRXcml0ZSA9IGZ1bmN0aW9uKGRvYywgaHRtbCkge1xuICBkb2Mud3JpdGUoZ29vZy5odG1sLlNhZmVIdG1sLnVud3JhcChodG1sKSk7XG59O1xuXG5cbi8qKlxuICogU2FmZWx5IGFzc2lnbnMgYSBVUkwgdG8gYW4gYW5jaG9yIGVsZW1lbnQncyBocmVmIHByb3BlcnR5LlxuICpcbiAqIElmIHVybCBpcyBvZiB0eXBlIGdvb2cuaHRtbC5TYWZlVXJsLCBpdHMgdmFsdWUgaXMgdW53cmFwcGVkIGFuZCBhc3NpZ25lZCB0b1xuICogYW5jaG9yJ3MgaHJlZiBwcm9wZXJ0eS4gIElmIHVybCBpcyBvZiB0eXBlIHN0cmluZyBob3dldmVyLCBpdCBpcyBmaXJzdFxuICogc2FuaXRpemVkIHVzaW5nIGdvb2cuaHRtbC5TYWZlVXJsLnNhbml0aXplLlxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKiAgIGdvb2cuZG9tLnNhZmUuc2V0QW5jaG9ySHJlZihhbmNob3JFbCwgdXJsKTtcbiAqIHdoaWNoIGlzIGEgc2FmZSBhbHRlcm5hdGl2ZSB0b1xuICogICBhbmNob3JFbC5ocmVmID0gdXJsO1xuICogVGhlIGxhdHRlciBjYW4gcmVzdWx0IGluIFhTUyB2dWxuZXJhYmlsaXRpZXMgaWYgdXJsIGlzIGFcbiAqIHVzZXItL2F0dGFja2VyLWNvbnRyb2xsZWQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHshSFRNTEFuY2hvckVsZW1lbnR9IGFuY2hvciBUaGUgYW5jaG9yIGVsZW1lbnQgd2hvc2UgaHJlZiBwcm9wZXJ0eVxuICogICAgIGlzIHRvIGJlIGFzc2lnbmVkIHRvLlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuaHRtbC5TYWZlVXJsfSB1cmwgVGhlIFVSTCB0byBhc3NpZ24uXG4gKiBAc2VlIGdvb2cuaHRtbC5TYWZlVXJsI3Nhbml0aXplXG4gKi9cbmdvb2cuZG9tLnNhZmUuc2V0QW5jaG9ySHJlZiA9IGZ1bmN0aW9uKGFuY2hvciwgdXJsKSB7XG4gIC8qKiBAdHlwZSB7IWdvb2cuaHRtbC5TYWZlVXJsfSAqL1xuICB2YXIgc2FmZVVybDtcbiAgaWYgKHVybCBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlVXJsKSB7XG4gICAgc2FmZVVybCA9IHVybDtcbiAgfSBlbHNlIHtcbiAgICBzYWZlVXJsID0gZ29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemUodXJsKTtcbiAgfVxuICBhbmNob3IuaHJlZiA9IGdvb2cuaHRtbC5TYWZlVXJsLnVud3JhcChzYWZlVXJsKTtcbn07XG5cblxuLyoqXG4gKiBTYWZlbHkgYXNzaWducyBhIFVSTCB0byBhbiBlbWJlZCBlbGVtZW50J3Mgc3JjIHByb3BlcnR5LlxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKiAgIGdvb2cuZG9tLnNhZmUuc2V0RW1iZWRTcmMoZW1iZWRFbCwgdXJsKTtcbiAqIHdoaWNoIGlzIGEgc2FmZSBhbHRlcm5hdGl2ZSB0b1xuICogICBlbWJlZEVsLnNyYyA9IHVybDtcbiAqIFRoZSBsYXR0ZXIgY2FuIHJlc3VsdCBpbiBsb2FkaW5nIHVudHJ1c3RlZCBjb2RlIHVubGVzcyBpdCBpcyBlbnN1cmVkIHRoYXRcbiAqIHRoZSBVUkwgcmVmZXJzIHRvIGEgdHJ1c3R3b3J0aHkgcmVzb3VyY2UuXG4gKlxuICogQHBhcmFtIHshSFRNTEVtYmVkRWxlbWVudH0gZW1iZWQgVGhlIGVtYmVkIGVsZW1lbnQgd2hvc2Ugc3JjIHByb3BlcnR5XG4gKiAgICAgaXMgdG8gYmUgYXNzaWduZWQgdG8uXG4gKiBAcGFyYW0geyFnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsfSB1cmwgVGhlIFVSTCB0byBhc3NpZ24uXG4gKi9cbmdvb2cuZG9tLnNhZmUuc2V0RW1iZWRTcmMgPSBmdW5jdGlvbihlbWJlZCwgdXJsKSB7XG4gIGVtYmVkLnNyYyA9IGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwKHVybCk7XG59O1xuXG5cbi8qKlxuICogU2FmZWx5IGFzc2lnbnMgYSBVUkwgdG8gYSBmcmFtZSBlbGVtZW50J3Mgc3JjIHByb3BlcnR5LlxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKiAgIGdvb2cuZG9tLnNhZmUuc2V0RnJhbWVTcmMoZnJhbWVFbCwgdXJsKTtcbiAqIHdoaWNoIGlzIGEgc2FmZSBhbHRlcm5hdGl2ZSB0b1xuICogICBmcmFtZUVsLnNyYyA9IHVybDtcbiAqIFRoZSBsYXR0ZXIgY2FuIHJlc3VsdCBpbiBsb2FkaW5nIHVudHJ1c3RlZCBjb2RlIHVubGVzcyBpdCBpcyBlbnN1cmVkIHRoYXRcbiAqIHRoZSBVUkwgcmVmZXJzIHRvIGEgdHJ1c3R3b3J0aHkgcmVzb3VyY2UuXG4gKlxuICogQHBhcmFtIHshSFRNTEZyYW1lRWxlbWVudH0gZnJhbWUgVGhlIGZyYW1lIGVsZW1lbnQgd2hvc2Ugc3JjIHByb3BlcnR5XG4gKiAgICAgaXMgdG8gYmUgYXNzaWduZWQgdG8uXG4gKiBAcGFyYW0geyFnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsfSB1cmwgVGhlIFVSTCB0byBhc3NpZ24uXG4gKi9cbmdvb2cuZG9tLnNhZmUuc2V0RnJhbWVTcmMgPSBmdW5jdGlvbihmcmFtZSwgdXJsKSB7XG4gIGZyYW1lLnNyYyA9IGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwKHVybCk7XG59O1xuXG5cbi8qKlxuICogU2FmZWx5IGFzc2lnbnMgYSBVUkwgdG8gYW4gaWZyYW1lIGVsZW1lbnQncyBzcmMgcHJvcGVydHkuXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqICAgZ29vZy5kb20uc2FmZS5zZXRJZnJhbWVTcmMoaWZyYW1lRWwsIHVybCk7XG4gKiB3aGljaCBpcyBhIHNhZmUgYWx0ZXJuYXRpdmUgdG9cbiAqICAgaWZyYW1lRWwuc3JjID0gdXJsO1xuICogVGhlIGxhdHRlciBjYW4gcmVzdWx0IGluIGxvYWRpbmcgdW50cnVzdGVkIGNvZGUgdW5sZXNzIGl0IGlzIGVuc3VyZWQgdGhhdFxuICogdGhlIFVSTCByZWZlcnMgdG8gYSB0cnVzdHdvcnRoeSByZXNvdXJjZS5cbiAqXG4gKiBAcGFyYW0geyFIVE1MSUZyYW1lRWxlbWVudH0gaWZyYW1lIFRoZSBpZnJhbWUgZWxlbWVudCB3aG9zZSBzcmMgcHJvcGVydHlcbiAqICAgICBpcyB0byBiZSBhc3NpZ25lZCB0by5cbiAqIEBwYXJhbSB7IWdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmx9IHVybCBUaGUgVVJMIHRvIGFzc2lnbi5cbiAqL1xuZ29vZy5kb20uc2FmZS5zZXRJZnJhbWVTcmMgPSBmdW5jdGlvbihpZnJhbWUsIHVybCkge1xuICBpZnJhbWUuc3JjID0gZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC51bndyYXAodXJsKTtcbn07XG5cblxuLyoqXG4gKiBTYWZlbHkgc2V0cyBhIGxpbmsgZWxlbWVudCdzIGhyZWYgYW5kIHJlbCBwcm9wZXJ0aWVzLiBXaGV0aGVyIG9yIG5vdFxuICogdGhlIFVSTCBhc3NpZ25lZCB0byBocmVmIGhhcyB0byBiZSBhIGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmxcbiAqIGRlcGVuZHMgb24gdGhlIHZhbHVlIG9mIHRoZSByZWwgcHJvcGVydHkuIElmIHJlbCBjb250YWlucyBcInN0eWxlc2hlZXRcIlxuICogdGhlbiBhIFRydXN0ZWRSZXNvdXJjZVVybCBpcyByZXF1aXJlZC5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICogICBnb29nLmRvbS5zYWZlLnNldExpbmtIcmVmQW5kUmVsKGxpbmtFbCwgdXJsLCAnc3R5bGVzaGVldCcpO1xuICogd2hpY2ggaXMgYSBzYWZlIGFsdGVybmF0aXZlIHRvXG4gKiAgIGxpbmtFbC5yZWwgPSAnc3R5bGVzaGVldCc7XG4gKiAgIGxpbmtFbC5ocmVmID0gdXJsO1xuICogVGhlIGxhdHRlciBjYW4gcmVzdWx0IGluIGxvYWRpbmcgdW50cnVzdGVkIGNvZGUgdW5sZXNzIGl0IGlzIGVuc3VyZWQgdGhhdFxuICogdGhlIFVSTCByZWZlcnMgdG8gYSB0cnVzdHdvcnRoeSByZXNvdXJjZS5cbiAqXG4gKiBAcGFyYW0geyFIVE1MTGlua0VsZW1lbnR9IGxpbmsgVGhlIGxpbmsgZWxlbWVudCB3aG9zZSBocmVmIHByb3BlcnR5XG4gKiAgICAgaXMgdG8gYmUgYXNzaWduZWQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ3whZ29vZy5odG1sLlNhZmVVcmx8IWdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmx9IHVybCBUaGUgVVJMXG4gKiAgICAgdG8gYXNzaWduIHRvIHRoZSBocmVmIHByb3BlcnR5LiBNdXN0IGJlIGEgVHJ1c3RlZFJlc291cmNlVXJsIGlmIHRoZVxuICogICAgIHZhbHVlIGFzc2lnbmVkIHRvIHJlbCBjb250YWlucyBcInN0eWxlc2hlZXRcIi4gQSBzdHJpbmcgdmFsdWUgaXNcbiAqICAgICBzYW5pdGl6ZWQgd2l0aCBnb29nLmh0bWwuU2FmZVVybC5zYW5pdGl6ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZWwgVGhlIHZhbHVlIHRvIGFzc2lnbiB0byB0aGUgcmVsIHByb3BlcnR5LlxuICogQHRocm93cyB7RXJyb3J9IGlmIHJlbCBjb250YWlucyBcInN0eWxlc2hlZXRcIiBhbmQgdXJsIGlzIG5vdCBhXG4gKiAgICAgVHJ1c3RlZFJlc291cmNlVXJsXG4gKiBAc2VlIGdvb2cuaHRtbC5TYWZlVXJsI3Nhbml0aXplXG4gKi9cbmdvb2cuZG9tLnNhZmUuc2V0TGlua0hyZWZBbmRSZWwgPSBmdW5jdGlvbihsaW5rLCB1cmwsIHJlbCkge1xuICBsaW5rLnJlbCA9IHJlbDtcbiAgaWYgKGdvb2cuc3RyaW5nLmNhc2VJbnNlbnNpdGl2ZUNvbnRhaW5zKHJlbCwgJ3N0eWxlc2hlZXQnKSkge1xuICAgIGdvb2cuYXNzZXJ0cy5hc3NlcnQoXG4gICAgICAgIHVybCBpbnN0YW5jZW9mIGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwsXG4gICAgICAgICdVUkwgbXVzdCBiZSBUcnVzdGVkUmVzb3VyY2VVcmwgYmVjYXVzZSBcInJlbFwiIGNvbnRhaW5zIFwic3R5bGVzaGVldFwiJyk7XG4gICAgbGluay5ocmVmID0gZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC51bndyYXAodXJsKTtcbiAgfSBlbHNlIGlmICh1cmwgaW5zdGFuY2VvZiBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsKSB7XG4gICAgbGluay5ocmVmID0gZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC51bndyYXAodXJsKTtcbiAgfSBlbHNlIGlmICh1cmwgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZVVybCkge1xuICAgIGxpbmsuaHJlZiA9IGdvb2cuaHRtbC5TYWZlVXJsLnVud3JhcCh1cmwpO1xuICB9IGVsc2UgeyAgLy8gc3RyaW5nXG4gICAgLy8gU2FmZVVybC5zYW5pdGl6ZSBtdXN0IHJldHVybiBsZWdpdGltYXRlIFNhZmVVcmwgd2hlbiBwYXNzZWQgYSBzdHJpbmcuXG4gICAgbGluay5ocmVmID0gZ29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemUodXJsKS5nZXRUeXBlZFN0cmluZ1ZhbHVlKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTYWZlbHkgYXNzaWducyBhIFVSTCB0byBhbiBvYmplY3QgZWxlbWVudCdzIGRhdGEgcHJvcGVydHkuXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqICAgZ29vZy5kb20uc2FmZS5zZXRPYmplY3REYXRhKG9iamVjdEVsLCB1cmwpO1xuICogd2hpY2ggaXMgYSBzYWZlIGFsdGVybmF0aXZlIHRvXG4gKiAgIG9iamVjdEVsLmRhdGEgPSB1cmw7XG4gKiBUaGUgbGF0dGVyIGNhbiByZXN1bHQgaW4gbG9hZGluZyB1bnRydXN0ZWQgY29kZSB1bmxlc3Mgc2V0aXQgaXMgZW5zdXJlZCB0aGF0XG4gKiB0aGUgVVJMIHJlZmVycyB0byBhIHRydXN0d29ydGh5IHJlc291cmNlLlxuICpcbiAqIEBwYXJhbSB7IUhUTUxPYmplY3RFbGVtZW50fSBvYmplY3QgVGhlIG9iamVjdCBlbGVtZW50IHdob3NlIGRhdGEgcHJvcGVydHlcbiAqICAgICBpcyB0byBiZSBhc3NpZ25lZCB0by5cbiAqIEBwYXJhbSB7IWdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmx9IHVybCBUaGUgVVJMIHRvIGFzc2lnbi5cbiAqL1xuZ29vZy5kb20uc2FmZS5zZXRPYmplY3REYXRhID0gZnVuY3Rpb24ob2JqZWN0LCB1cmwpIHtcbiAgb2JqZWN0LmRhdGEgPSBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnVud3JhcCh1cmwpO1xufTtcblxuXG4vKipcbiAqIFNhZmVseSBhc3NpZ25zIGEgVVJMIHRvIGFuIGlmcmFtZSBlbGVtZW50J3Mgc3JjIHByb3BlcnR5LlxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKiAgIGdvb2cuZG9tLnNhZmUuc2V0U2NyaXB0U3JjKHNjcmlwdEVsLCB1cmwpO1xuICogd2hpY2ggaXMgYSBzYWZlIGFsdGVybmF0aXZlIHRvXG4gKiAgIHNjcmlwdEVsLnNyYyA9IHVybDtcbiAqIFRoZSBsYXR0ZXIgY2FuIHJlc3VsdCBpbiBsb2FkaW5nIHVudHJ1c3RlZCBjb2RlIHVubGVzcyBpdCBpcyBlbnN1cmVkIHRoYXRcbiAqIHRoZSBVUkwgcmVmZXJzIHRvIGEgdHJ1c3R3b3J0aHkgcmVzb3VyY2UuXG4gKlxuICogQHBhcmFtIHshSFRNTFNjcmlwdEVsZW1lbnR9IHNjcmlwdCBUaGUgc2NyaXB0IGVsZW1lbnQgd2hvc2Ugc3JjIHByb3BlcnR5XG4gKiAgICAgaXMgdG8gYmUgYXNzaWduZWQgdG8uXG4gKiBAcGFyYW0geyFnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsfSB1cmwgVGhlIFVSTCB0byBhc3NpZ24uXG4gKi9cbmdvb2cuZG9tLnNhZmUuc2V0U2NyaXB0U3JjID0gZnVuY3Rpb24oc2NyaXB0LCB1cmwpIHtcbiAgc2NyaXB0LnNyYyA9IGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwKHVybCk7XG59O1xuXG5cbi8qKlxuICogU2FmZWx5IGFzc2lnbnMgYSBVUkwgdG8gYSBMb2NhdGlvbiBvYmplY3QncyBocmVmIHByb3BlcnR5LlxuICpcbiAqIElmIHVybCBpcyBvZiB0eXBlIGdvb2cuaHRtbC5TYWZlVXJsLCBpdHMgdmFsdWUgaXMgdW53cmFwcGVkIGFuZCBhc3NpZ25lZCB0b1xuICogbG9jJ3MgaHJlZiBwcm9wZXJ0eS4gIElmIHVybCBpcyBvZiB0eXBlIHN0cmluZyBob3dldmVyLCBpdCBpcyBmaXJzdCBzYW5pdGl6ZWRcbiAqIHVzaW5nIGdvb2cuaHRtbC5TYWZlVXJsLnNhbml0aXplLlxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKiAgIGdvb2cuZG9tLnNhZmUuc2V0TG9jYXRpb25IcmVmKGRvY3VtZW50LmxvY2F0aW9uLCByZWRpcmVjdFVybCk7XG4gKiB3aGljaCBpcyBhIHNhZmUgYWx0ZXJuYXRpdmUgdG9cbiAqICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IHJlZGlyZWN0VXJsO1xuICogVGhlIGxhdHRlciBjYW4gcmVzdWx0IGluIFhTUyB2dWxuZXJhYmlsaXRpZXMgaWYgcmVkaXJlY3RVcmwgaXMgYVxuICogdXNlci0vYXR0YWNrZXItY29udHJvbGxlZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0geyFMb2NhdGlvbn0gbG9jIFRoZSBMb2NhdGlvbiBvYmplY3Qgd2hvc2UgaHJlZiBwcm9wZXJ0eSBpcyB0byBiZVxuICogICAgIGFzc2lnbmVkIHRvLlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuaHRtbC5TYWZlVXJsfSB1cmwgVGhlIFVSTCB0byBhc3NpZ24uXG4gKiBAc2VlIGdvb2cuaHRtbC5TYWZlVXJsI3Nhbml0aXplXG4gKi9cbmdvb2cuZG9tLnNhZmUuc2V0TG9jYXRpb25IcmVmID0gZnVuY3Rpb24obG9jLCB1cmwpIHtcbiAgLyoqIEB0eXBlIHshZ29vZy5odG1sLlNhZmVVcmx9ICovXG4gIHZhciBzYWZlVXJsO1xuICBpZiAodXJsIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVVcmwpIHtcbiAgICBzYWZlVXJsID0gdXJsO1xuICB9IGVsc2Uge1xuICAgIHNhZmVVcmwgPSBnb29nLmh0bWwuU2FmZVVybC5zYW5pdGl6ZSh1cmwpO1xuICB9XG4gIGxvYy5ocmVmID0gZ29vZy5odG1sLlNhZmVVcmwudW53cmFwKHNhZmVVcmwpO1xufTtcblxuXG4vKipcbiAqIFNhZmVseSBvcGVucyBhIFVSTCBpbiBhIG5ldyB3aW5kb3cgKHZpYSB3aW5kb3cub3BlbikuXG4gKlxuICogSWYgdXJsIGlzIG9mIHR5cGUgZ29vZy5odG1sLlNhZmVVcmwsIGl0cyB2YWx1ZSBpcyB1bndyYXBwZWQgYW5kIHBhc3NlZCBpbiB0b1xuICogd2luZG93Lm9wZW4uICBJZiB1cmwgaXMgb2YgdHlwZSBzdHJpbmcgaG93ZXZlciwgaXQgaXMgZmlyc3Qgc2FuaXRpemVkXG4gKiB1c2luZyBnb29nLmh0bWwuU2FmZVVybC5zYW5pdGl6ZS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBwcmV2ZW50IGxlYWthZ2VzIHZpYSB0aGUgcmVmZXJlciB0aGF0IGlzXG4gKiBzZW50IGJ5IHdpbmRvdy5vcGVuLiBJdCBpcyBhZHZpc2VkIHRvIG9ubHkgdXNlIHRoaXMgdG8gb3BlbiAxc3QgcGFydHkgVVJMcy5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICogICBnb29nLmRvbS5zYWZlLm9wZW5JbldpbmRvdyh1cmwpO1xuICogd2hpY2ggaXMgYSBzYWZlIGFsdGVybmF0aXZlIHRvXG4gKiAgIHdpbmRvdy5vcGVuKHVybCk7XG4gKiBUaGUgbGF0dGVyIGNhbiByZXN1bHQgaW4gWFNTIHZ1bG5lcmFiaWxpdGllcyBpZiByZWRpcmVjdFVybCBpcyBhXG4gKiB1c2VyLS9hdHRhY2tlci1jb250cm9sbGVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmh0bWwuU2FmZVVybH0gdXJsIFRoZSBVUkwgdG8gb3Blbi5cbiAqIEBwYXJhbSB7V2luZG93PX0gb3B0X29wZW5lcldpbiBXaW5kb3cgb2Ygd2hpY2ggdG8gY2FsbCB0aGUgLm9wZW4oKSBtZXRob2QuXG4gKiAgICAgRGVmYXVsdHMgdG8gdGhlIGdsb2JhbCB3aW5kb3cuXG4gKiBAcGFyYW0geyFnb29nLnN0cmluZy5Db25zdD19IG9wdF9uYW1lIE5hbWUgb2YgdGhlIHdpbmRvdyB0byBvcGVuIGluLiBDYW4gYmVcbiAqICAgICBfdG9wLCBldGMgYXMgYWxsb3dlZCBieSB3aW5kb3cub3BlbigpLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfc3BlY3MgQ29tbWEtc2VwYXJhdGVkIGxpc3Qgb2Ygc3BlY2lmaWNhdGlvbnMsIHNhbWUgYXNcbiAqICAgICBpbiB3aW5kb3cub3BlbigpLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3JlcGxhY2UgV2hldGhlciB0byByZXBsYWNlIHRoZSBjdXJyZW50IGVudHJ5IGluIGJyb3dzZXJcbiAqICAgICBoaXN0b3J5LCBzYW1lIGFzIGluIHdpbmRvdy5vcGVuKCkuXG4gKiBAcmV0dXJuIHtXaW5kb3d9IFdpbmRvdyB0aGUgdXJsIHdhcyBvcGVuZWQgaW4uXG4gKi9cbmdvb2cuZG9tLnNhZmUub3BlbkluV2luZG93ID0gZnVuY3Rpb24oXG4gICAgdXJsLCBvcHRfb3BlbmVyV2luLCBvcHRfbmFtZSwgb3B0X3NwZWNzLCBvcHRfcmVwbGFjZSkge1xuICAvKiogQHR5cGUgeyFnb29nLmh0bWwuU2FmZVVybH0gKi9cbiAgdmFyIHNhZmVVcmw7XG4gIGlmICh1cmwgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZVVybCkge1xuICAgIHNhZmVVcmwgPSB1cmw7XG4gIH0gZWxzZSB7XG4gICAgc2FmZVVybCA9IGdvb2cuaHRtbC5TYWZlVXJsLnNhbml0aXplKHVybCk7XG4gIH1cbiAgdmFyIHdpbiA9IG9wdF9vcGVuZXJXaW4gfHwgd2luZG93O1xuICByZXR1cm4gd2luLm9wZW4oZ29vZy5odG1sLlNhZmVVcmwudW53cmFwKHNhZmVVcmwpLFxuICAgICAgLy8gSWYgb3B0X25hbWUgaXMgdW5kZWZpbmVkLCBzaW1wbHkgcGFzc2luZyB0aGF0IGluIHRvIG9wZW4oKSBjYXVzZXMgSUUgdG9cbiAgICAgIC8vIHJldXNlIHRoZSBjdXJyZW50IHdpbmRvdyBpbnN0ZWFkIG9mIG9wZW5pbmcgYSBuZXcgb25lLiBUaHVzIHdlIHBhc3MgJydcbiAgICAgIC8vIGluIGluc3RlYWQsIHdoaWNoIGFjY29yZGluZyB0byBzcGVjIG9wZW5zIGEgbmV3IHdpbmRvdy4gU2VlXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9icm93c2Vycy5odG1sI2RvbS1vcGVuIC5cbiAgICAgIG9wdF9uYW1lID8gZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwKG9wdF9uYW1lKSA6ICcnLFxuICAgICAgb3B0X3NwZWNzLCBvcHRfcmVwbGFjZSk7XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMDYgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBBZGRpdGlvbmFsIG1hdGhlbWF0aWNhbCBmdW5jdGlvbnMuXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLm1hdGgnKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLmFycmF5Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuXG5cbi8qKlxuICogUmV0dXJucyBhIHJhbmRvbSBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAwIGFuZCBsZXNzIHRoYW4ge0Bjb2RlIGF9LlxuICogQHBhcmFtIHtudW1iZXJ9IGEgIFRoZSB1cHBlciBib3VuZCBmb3IgdGhlIHJhbmRvbSBpbnRlZ2VyIChleGNsdXNpdmUpLlxuICogQHJldHVybiB7bnVtYmVyfSBBIHJhbmRvbSBpbnRlZ2VyIE4gc3VjaCB0aGF0IDAgPD0gTiA8IGEuXG4gKi9cbmdvb2cubWF0aC5yYW5kb21JbnQgPSBmdW5jdGlvbihhKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tIG51bWJlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8ge0Bjb2RlIGF9IGFuZCBsZXNzIHRoYW5cbiAqIHtAY29kZSBifS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBhICBUaGUgbG93ZXIgYm91bmQgZm9yIHRoZSByYW5kb20gbnVtYmVyIChpbmNsdXNpdmUpLlxuICogQHBhcmFtIHtudW1iZXJ9IGIgIFRoZSB1cHBlciBib3VuZCBmb3IgdGhlIHJhbmRvbSBudW1iZXIgKGV4Y2x1c2l2ZSkuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEEgcmFuZG9tIG51bWJlciBOIHN1Y2ggdGhhdCBhIDw9IE4gPCBiLlxuICovXG5nb29nLm1hdGgudW5pZm9ybVJhbmRvbSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgKyBNYXRoLnJhbmRvbSgpICogKGIgLSBhKTtcbn07XG5cblxuLyoqXG4gKiBUYWtlcyBhIG51bWJlciBhbmQgY2xhbXBzIGl0IHRvIHdpdGhpbiB0aGUgcHJvdmlkZWQgYm91bmRzLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSBpbnB1dCBudW1iZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBtaW5pbXVtIHZhbHVlIHRvIHJldHVybi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIG1heGltdW0gdmFsdWUgdG8gcmV0dXJuLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgaW5wdXQgbnVtYmVyIGlmIGl0IGlzIHdpdGhpbiBib3VuZHMsIG9yIHRoZSBuZWFyZXN0XG4gKiAgICAgbnVtYmVyIHdpdGhpbiB0aGUgYm91bmRzLlxuICovXG5nb29nLm1hdGguY2xhbXAgPSBmdW5jdGlvbih2YWx1ZSwgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCBtaW4pLCBtYXgpO1xufTtcblxuXG4vKipcbiAqIFRoZSAlIG9wZXJhdG9yIGluIEphdmFTY3JpcHQgcmV0dXJucyB0aGUgcmVtYWluZGVyIG9mIGEgLyBiLCBidXQgZGlmZmVycyBmcm9tXG4gKiBzb21lIG90aGVyIGxhbmd1YWdlcyBpbiB0aGF0IHRoZSByZXN1bHQgd2lsbCBoYXZlIHRoZSBzYW1lIHNpZ24gYXMgdGhlXG4gKiBkaXZpZGVuZC4gRm9yIGV4YW1wbGUsIC0xICUgOCA9PSAtMSwgd2hlcmVhcyBpbiBzb21lIG90aGVyIGxhbmd1YWdlc1xuICogKHN1Y2ggYXMgUHl0aG9uKSB0aGUgcmVzdWx0IHdvdWxkIGJlIDcuIFRoaXMgZnVuY3Rpb24gZW11bGF0ZXMgdGhlIG1vcmVcbiAqIGNvcnJlY3QgbW9kdWxvIGJlaGF2aW9yLCB3aGljaCBpcyB1c2VmdWwgZm9yIGNlcnRhaW4gYXBwbGljYXRpb25zIHN1Y2ggYXNcbiAqIGNhbGN1bGF0aW5nIGFuIG9mZnNldCBpbmRleCBpbiBhIGNpcmN1bGFyIGxpc3QuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGEgVGhlIGRpdmlkZW5kLlxuICogQHBhcmFtIHtudW1iZXJ9IGIgVGhlIGRpdmlzb3IuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGEgJSBiIHdoZXJlIHRoZSByZXN1bHQgaXMgYmV0d2VlbiAwIGFuZCBiIChlaXRoZXIgMCA8PSB4IDwgYlxuICogICAgIG9yIGIgPCB4IDw9IDAsIGRlcGVuZGluZyBvbiB0aGUgc2lnbiBvZiBiKS5cbiAqL1xuZ29vZy5tYXRoLm1vZHVsbyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHIgPSBhICUgYjtcbiAgLy8gSWYgciBhbmQgYiBkaWZmZXIgaW4gc2lnbiwgYWRkIGIgdG8gd3JhcCB0aGUgcmVzdWx0IHRvIHRoZSBjb3JyZWN0IHNpZ24uXG4gIHJldHVybiAociAqIGIgPCAwKSA/IHIgKyBiIDogcjtcbn07XG5cblxuLyoqXG4gKiBQZXJmb3JtcyBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHZhbHVlcyBhIGFuZCBiLiBSZXR1cm5zIHRoZSB2YWx1ZVxuICogYmV0d2VlbiBhIGFuZCBiIHByb3BvcnRpb25hbCB0byB4ICh3aGVuIHggaXMgYmV0d2VlbiAwIGFuZCAxLiBXaGVuIHggaXNcbiAqIG91dHNpZGUgdGhpcyByYW5nZSwgdGhlIHJldHVybiB2YWx1ZSBpcyBhIGxpbmVhciBleHRyYXBvbGF0aW9uKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBhIEEgbnVtYmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IGIgQSBudW1iZXIuXG4gKiBAcGFyYW0ge251bWJlcn0geCBUaGUgcHJvcG9ydGlvbiBiZXR3ZWVuIGEgYW5kIGIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUgYmV0d2VlbiBhIGFuZCBiLlxuICovXG5nb29nLm1hdGgubGVycCA9IGZ1bmN0aW9uKGEsIGIsIHgpIHtcbiAgcmV0dXJuIGEgKyB4ICogKGIgLSBhKTtcbn07XG5cblxuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIHRoZSB0d28gdmFsdWVzIGFyZSBlcXVhbCB0byBlYWNoIG90aGVyLCB3aXRoaW4gYSBjZXJ0YWluXG4gKiB0b2xlcmFuY2UgdG8gYWRqdXN0IGZvciBmbG9hdGluZyBwb2ludCBlcnJvcnMuXG4gKiBAcGFyYW0ge251bWJlcn0gYSBBIG51bWJlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiIEEgbnVtYmVyLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfdG9sZXJhbmNlIE9wdGlvbmFsIHRvbGVyYW5jZSByYW5nZS4gRGVmYXVsdHNcbiAqICAgICB0byAwLjAwMDAwMS4gSWYgc3BlY2lmaWVkLCBzaG91bGQgYmUgZ3JlYXRlciB0aGFuIDAuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHtAY29kZSBhfSBhbmQge0Bjb2RlIGJ9IGFyZSBuZWFybHkgZXF1YWwuXG4gKi9cbmdvb2cubWF0aC5uZWFybHlFcXVhbHMgPSBmdW5jdGlvbihhLCBiLCBvcHRfdG9sZXJhbmNlKSB7XG4gIHJldHVybiBNYXRoLmFicyhhIC0gYikgPD0gKG9wdF90b2xlcmFuY2UgfHwgMC4wMDAwMDEpO1xufTtcblxuXG4vLyBUT0RPKHVzZXIpOiBSZW5hbWUgdG8gbm9ybWFsaXplQW5nbGUsIHJldGFpbmluZyBvbGQgbmFtZSBhcyBkZXByZWNhdGVkXG4vLyBhbGlhcy5cbi8qKlxuICogTm9ybWFsaXplcyBhbiBhbmdsZSB0byBiZSBpbiByYW5nZSBbMC0zNjApLiBBbmdsZXMgb3V0c2lkZSB0aGlzIHJhbmdlIHdpbGxcbiAqIGJlIG5vcm1hbGl6ZWQgdG8gYmUgdGhlIGVxdWl2YWxlbnQgYW5nbGUgd2l0aCB0aGF0IHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIEFuZ2xlIGluIGRlZ3JlZXMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFN0YW5kYXJkaXplZCBhbmdsZS5cbiAqL1xuZ29vZy5tYXRoLnN0YW5kYXJkQW5nbGUgPSBmdW5jdGlvbihhbmdsZSkge1xuICByZXR1cm4gZ29vZy5tYXRoLm1vZHVsbyhhbmdsZSwgMzYwKTtcbn07XG5cblxuLyoqXG4gKiBOb3JtYWxpemVzIGFuIGFuZ2xlIHRvIGJlIGluIHJhbmdlIFswLTIqUEkpLiBBbmdsZXMgb3V0c2lkZSB0aGlzIHJhbmdlIHdpbGxcbiAqIGJlIG5vcm1hbGl6ZWQgdG8gYmUgdGhlIGVxdWl2YWxlbnQgYW5nbGUgd2l0aCB0aGF0IHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIEFuZ2xlIGluIHJhZGlhbnMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFN0YW5kYXJkaXplZCBhbmdsZS5cbiAqL1xuZ29vZy5tYXRoLnN0YW5kYXJkQW5nbGVJblJhZGlhbnMgPSBmdW5jdGlvbihhbmdsZSkge1xuICByZXR1cm4gZ29vZy5tYXRoLm1vZHVsbyhhbmdsZSwgMiAqIE1hdGguUEkpO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIGRlZ3JlZXMgdG8gcmFkaWFucy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZURlZ3JlZXMgQW5nbGUgaW4gZGVncmVlcy5cbiAqIEByZXR1cm4ge251bWJlcn0gQW5nbGUgaW4gcmFkaWFucy5cbiAqL1xuZ29vZy5tYXRoLnRvUmFkaWFucyA9IGZ1bmN0aW9uKGFuZ2xlRGVncmVlcykge1xuICByZXR1cm4gYW5nbGVEZWdyZWVzICogTWF0aC5QSSAvIDE4MDtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyByYWRpYW5zIHRvIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gYW5nbGVSYWRpYW5zIEFuZ2xlIGluIHJhZGlhbnMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEFuZ2xlIGluIGRlZ3JlZXMuXG4gKi9cbmdvb2cubWF0aC50b0RlZ3JlZXMgPSBmdW5jdGlvbihhbmdsZVJhZGlhbnMpIHtcbiAgcmV0dXJuIGFuZ2xlUmFkaWFucyAqIDE4MCAvIE1hdGguUEk7XG59O1xuXG5cbi8qKlxuICogRm9yIGEgZ2l2ZW4gYW5nbGUgYW5kIHJhZGl1cywgZmluZHMgdGhlIFggcG9ydGlvbiBvZiB0aGUgb2Zmc2V0LlxuICogQHBhcmFtIHtudW1iZXJ9IGRlZ3JlZXMgQW5nbGUgaW4gZGVncmVlcyAoemVybyBwb2ludHMgaW4gK1ggZGlyZWN0aW9uKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgUmFkaXVzLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgeC1kaXN0YW5jZSBmb3IgdGhlIGFuZ2xlIGFuZCByYWRpdXMuXG4gKi9cbmdvb2cubWF0aC5hbmdsZUR4ID0gZnVuY3Rpb24oZGVncmVlcywgcmFkaXVzKSB7XG4gIHJldHVybiByYWRpdXMgKiBNYXRoLmNvcyhnb29nLm1hdGgudG9SYWRpYW5zKGRlZ3JlZXMpKTtcbn07XG5cblxuLyoqXG4gKiBGb3IgYSBnaXZlbiBhbmdsZSBhbmQgcmFkaXVzLCBmaW5kcyB0aGUgWSBwb3J0aW9uIG9mIHRoZSBvZmZzZXQuXG4gKiBAcGFyYW0ge251bWJlcn0gZGVncmVlcyBBbmdsZSBpbiBkZWdyZWVzICh6ZXJvIHBvaW50cyBpbiArWCBkaXJlY3Rpb24pLlxuICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyBSYWRpdXMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB5LWRpc3RhbmNlIGZvciB0aGUgYW5nbGUgYW5kIHJhZGl1cy5cbiAqL1xuZ29vZy5tYXRoLmFuZ2xlRHkgPSBmdW5jdGlvbihkZWdyZWVzLCByYWRpdXMpIHtcbiAgcmV0dXJuIHJhZGl1cyAqIE1hdGguc2luKGdvb2cubWF0aC50b1JhZGlhbnMoZGVncmVlcykpO1xufTtcblxuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBhbmdsZSBiZXR3ZWVuIHR3byBwb2ludHMgKHgxLHkxKSBhbmQgKHgyLHkyKS5cbiAqIEFuZ2xlIHplcm8gcG9pbnRzIGluIHRoZSArWCBkaXJlY3Rpb24sIDkwIGRlZ3JlZXMgcG9pbnRzIGluIHRoZSArWVxuICogZGlyZWN0aW9uIChkb3duKSBhbmQgZnJvbSB0aGVyZSB3ZSBncm93IGNsb2Nrd2lzZSB0b3dhcmRzIDM2MCBkZWdyZWVzLlxuICogQHBhcmFtIHtudW1iZXJ9IHgxIHggb2YgZmlyc3QgcG9pbnQuXG4gKiBAcGFyYW0ge251bWJlcn0geTEgeSBvZiBmaXJzdCBwb2ludC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB4MiB4IG9mIHNlY29uZCBwb2ludC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB5MiB5IG9mIHNlY29uZCBwb2ludC5cbiAqIEByZXR1cm4ge251bWJlcn0gU3RhbmRhcmRpemVkIGFuZ2xlIGluIGRlZ3JlZXMgb2YgdGhlIHZlY3RvciBmcm9tXG4gKiAgICAgeDEseTEgdG8geDIseTIuXG4gKi9cbmdvb2cubWF0aC5hbmdsZSA9IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyKSB7XG4gIHJldHVybiBnb29nLm1hdGguc3RhbmRhcmRBbmdsZShnb29nLm1hdGgudG9EZWdyZWVzKE1hdGguYXRhbjIoeTIgLSB5MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MiAtIHgxKSkpO1xufTtcblxuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gc3RhcnRBbmdsZSBhbmQgZW5kQW5nbGUgKGFuZ2xlcyBpbiBkZWdyZWVzKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydEFuZ2xlICBTdGFydCBhbmdsZSBpbiBkZWdyZWVzLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZEFuZ2xlICBFbmQgYW5nbGUgaW4gZGVncmVlcy5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBkZWdyZWVzIHRoYXQgd2hlbiBhZGRlZCB0b1xuICogICAgIHN0YXJ0QW5nbGUgd2lsbCByZXN1bHQgaW4gZW5kQW5nbGUuIFBvc2l0aXZlIG51bWJlcnMgbWVhbiB0aGF0IHRoZVxuICogICAgIGRpcmVjdGlvbiBpcyBjbG9ja3dpc2UuIE5lZ2F0aXZlIG51bWJlcnMgaW5kaWNhdGUgYSBjb3VudGVyLWNsb2Nrd2lzZVxuICogICAgIGRpcmVjdGlvbi5cbiAqICAgICBUaGUgc2hvcnRlc3Qgcm91dGUgKGNsb2Nrd2lzZSB2cyBjb3VudGVyLWNsb2Nrd2lzZSkgYmV0d2VlbiB0aGUgYW5nbGVzXG4gKiAgICAgaXMgdXNlZC5cbiAqICAgICBXaGVuIHRoZSBkaWZmZXJlbmNlIGlzIDE4MCBkZWdyZWVzLCB0aGUgZnVuY3Rpb24gcmV0dXJucyAxODAgKG5vdCAtMTgwKVxuICogICAgIGFuZ2xlRGlmZmVyZW5jZSgzMCwgNDApIGlzIDEwLCBhbmQgYW5nbGVEaWZmZXJlbmNlKDQwLCAzMCkgaXMgLTEwLlxuICogICAgIGFuZ2xlRGlmZmVyZW5jZSgzNTAsIDEwKSBpcyAyMCwgYW5kIGFuZ2xlRGlmZmVyZW5jZSgxMCwgMzUwKSBpcyAtMjAuXG4gKi9cbmdvb2cubWF0aC5hbmdsZURpZmZlcmVuY2UgPSBmdW5jdGlvbihzdGFydEFuZ2xlLCBlbmRBbmdsZSkge1xuICB2YXIgZCA9IGdvb2cubWF0aC5zdGFuZGFyZEFuZ2xlKGVuZEFuZ2xlKSAtXG4gICAgICAgICAgZ29vZy5tYXRoLnN0YW5kYXJkQW5nbGUoc3RhcnRBbmdsZSk7XG4gIGlmIChkID4gMTgwKSB7XG4gICAgZCA9IGQgLSAzNjA7XG4gIH0gZWxzZSBpZiAoZCA8PSAtMTgwKSB7XG4gICAgZCA9IDM2MCArIGQ7XG4gIH1cbiAgcmV0dXJuIGQ7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2lnbiBvZiBhIG51bWJlciBhcyBwZXIgdGhlIFwic2lnblwiIG9yIFwic2lnbnVtXCIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge251bWJlcn0geCBUaGUgbnVtYmVyIHRvIHRha2UgdGhlIHNpZ24gb2YuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0xIHdoZW4gbmVnYXRpdmUsIDEgd2hlbiBwb3NpdGl2ZSwgMCB3aGVuIDAuIFByZXNlcnZlc1xuICogICAgIHNpZ25lZCB6ZXJvcyBhbmQgTmFOLlxuICovXG5nb29nLm1hdGguc2lnbiA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbih4KSB7XG4gIGlmICh4ID4gMCkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIGlmICh4IDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4geDsgIC8vIFByZXNlcnZlcyBzaWduZWQgemVyb3MgYW5kIE5hTi5cbn07XG5cblxuLyoqXG4gKiBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIExvbmdlc3QgQ29tbW9uIFN1YnNlcXVlbmNlIHByb2JsZW0uXG4gKiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvbmdlc3RfY29tbW9uX3N1YnNlcXVlbmNlXG4gKlxuICogUmV0dXJucyB0aGUgbG9uZ2VzdCBwb3NzaWJsZSBhcnJheSB0aGF0IGlzIHN1YmFycmF5IG9mIGJvdGggb2YgZ2l2ZW4gYXJyYXlzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gYXJyYXkxIEZpcnN0IGFycmF5IG9mIG9iamVjdHMuXG4gKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IGFycmF5MiBTZWNvbmQgYXJyYXkgb2Ygb2JqZWN0cy5cbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBvcHRfY29tcGFyZUZuIEZ1bmN0aW9uIHRoYXQgYWN0cyBhcyBhIGN1c3RvbSBjb21wYXJhdG9yXG4gKiAgICAgZm9yIHRoZSBhcnJheSBvamVjdHMuIEZ1bmN0aW9uIHNob3VsZCByZXR1cm4gdHJ1ZSBpZiBvYmplY3RzIGFyZSBlcXVhbCxcbiAqICAgICBvdGhlcndpc2UgZmFsc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb3B0X2NvbGxlY3RvckZuIEZ1bmN0aW9uIHVzZWQgdG8gZGVjaWRlIHdoYXQgdG8gcmV0dXJuXG4gKiAgICAgYXMgYSByZXN1bHQgc3Vic2VxdWVuY2UuIEl0IGFjY2VwdHMgMiBhcmd1bWVudHM6IGluZGV4IG9mIGNvbW1vbiBlbGVtZW50XG4gKiAgICAgaW4gdGhlIGZpcnN0IGFycmF5IGFuZCBpbmRleCBpbiB0aGUgc2Vjb25kLiBUaGUgZGVmYXVsdCBmdW5jdGlvbiByZXR1cm5zXG4gKiAgICAgZWxlbWVudCBmcm9tIHRoZSBmaXJzdCBhcnJheS5cbiAqIEByZXR1cm4geyFBcnJheTxPYmplY3Q+fSBBIGxpc3Qgb2Ygb2JqZWN0cyB0aGF0IGFyZSBjb21tb24gdG8gYm90aCBhcnJheXNcbiAqICAgICBzdWNoIHRoYXQgdGhlcmUgaXMgbm8gY29tbW9uIHN1YnNlcXVlbmNlIHdpdGggc2l6ZSBncmVhdGVyIHRoYW4gdGhlXG4gKiAgICAgbGVuZ3RoIG9mIHRoZSBsaXN0LlxuICovXG5nb29nLm1hdGgubG9uZ2VzdENvbW1vblN1YnNlcXVlbmNlID0gZnVuY3Rpb24oXG4gICAgYXJyYXkxLCBhcnJheTIsIG9wdF9jb21wYXJlRm4sIG9wdF9jb2xsZWN0b3JGbikge1xuXG4gIHZhciBjb21wYXJlID0gb3B0X2NvbXBhcmVGbiB8fCBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPT0gYjtcbiAgfTtcblxuICB2YXIgY29sbGVjdCA9IG9wdF9jb2xsZWN0b3JGbiB8fCBmdW5jdGlvbihpMSwgaTIpIHtcbiAgICByZXR1cm4gYXJyYXkxW2kxXTtcbiAgfTtcblxuICB2YXIgbGVuZ3RoMSA9IGFycmF5MS5sZW5ndGg7XG4gIHZhciBsZW5ndGgyID0gYXJyYXkyLmxlbmd0aDtcblxuICB2YXIgYXJyID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoMSArIDE7IGkrKykge1xuICAgIGFycltpXSA9IFtdO1xuICAgIGFycltpXVswXSA9IDA7XG4gIH1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbmd0aDIgKyAxOyBqKyspIHtcbiAgICBhcnJbMF1bal0gPSAwO1xuICB9XG5cbiAgZm9yIChpID0gMTsgaSA8PSBsZW5ndGgxOyBpKyspIHtcbiAgICBmb3IgKGogPSAxOyBqIDw9IGxlbmd0aDI7IGorKykge1xuICAgICAgaWYgKGNvbXBhcmUoYXJyYXkxW2kgLSAxXSwgYXJyYXkyW2ogLSAxXSkpIHtcbiAgICAgICAgYXJyW2ldW2pdID0gYXJyW2kgLSAxXVtqIC0gMV0gKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJyW2ldW2pdID0gTWF0aC5tYXgoYXJyW2kgLSAxXVtqXSwgYXJyW2ldW2ogLSAxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQmFja3RyYWNraW5nXG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSBsZW5ndGgxLCBqID0gbGVuZ3RoMjtcbiAgd2hpbGUgKGkgPiAwICYmIGogPiAwKSB7XG4gICAgaWYgKGNvbXBhcmUoYXJyYXkxW2kgLSAxXSwgYXJyYXkyW2ogLSAxXSkpIHtcbiAgICAgIHJlc3VsdC51bnNoaWZ0KGNvbGxlY3QoaSAtIDEsIGogLSAxKSk7XG4gICAgICBpLS07XG4gICAgICBqLS07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhcnJbaSAtIDFdW2pdID4gYXJyW2ldW2ogLSAxXSkge1xuICAgICAgICBpLS07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBqLS07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdW0gb2YgdGhlIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7Li4ubnVtYmVyfSB2YXJfYXJncyBOdW1iZXJzIHRvIGFkZC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHN1bSBvZiB0aGUgYXJndW1lbnRzICgwIGlmIG5vIGFyZ3VtZW50cyB3ZXJlIHByb3ZpZGVkLFxuICogICAgIHtAY29kZSBOYU59IGlmIGFueSBvZiB0aGUgYXJndW1lbnRzIGlzIG5vdCBhIHZhbGlkIG51bWJlcikuXG4gKi9cbmdvb2cubWF0aC5zdW0gPSBmdW5jdGlvbih2YXJfYXJncykge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChnb29nLmFycmF5LnJlZHVjZShhcmd1bWVudHMsXG4gICAgICBmdW5jdGlvbihzdW0sIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBzdW0gKyB2YWx1ZTtcbiAgICAgIH0sIDApKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhcml0aG1ldGljIG1lYW4gb2YgdGhlIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7Li4ubnVtYmVyfSB2YXJfYXJncyBOdW1iZXJzIHRvIGF2ZXJhZ2UuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhdmVyYWdlIG9mIHRoZSBhcmd1bWVudHMgKHtAY29kZSBOYU59IGlmIG5vIGFyZ3VtZW50c1xuICogICAgIHdlcmUgcHJvdmlkZWQgb3IgYW55IG9mIHRoZSBhcmd1bWVudHMgaXMgbm90IGEgdmFsaWQgbnVtYmVyKS5cbiAqL1xuZ29vZy5tYXRoLmF2ZXJhZ2UgPSBmdW5jdGlvbih2YXJfYXJncykge1xuICByZXR1cm4gZ29vZy5tYXRoLnN1bS5hcHBseShudWxsLCBhcmd1bWVudHMpIC8gYXJndW1lbnRzLmxlbmd0aDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB1bmJpYXNlZCBzYW1wbGUgdmFyaWFuY2Ugb2YgdGhlIGFyZ3VtZW50cy4gRm9yIGEgZGVmaW5pdGlvbixcbiAqIHNlZSBlLmcuIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFyaWFuY2VcbiAqIEBwYXJhbSB7Li4ubnVtYmVyfSB2YXJfYXJncyBOdW1iZXIgc2FtcGxlcyB0byBhbmFseXplLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgdW5iaWFzZWQgc2FtcGxlIHZhcmlhbmNlIG9mIHRoZSBhcmd1bWVudHMgKDAgaWYgZmV3ZXJcbiAqICAgICB0aGFuIHR3byBzYW1wbGVzIHdlcmUgcHJvdmlkZWQsIG9yIHtAY29kZSBOYU59IGlmIGFueSBvZiB0aGUgc2FtcGxlcyBpc1xuICogICAgIG5vdCBhIHZhbGlkIG51bWJlcikuXG4gKi9cbmdvb2cubWF0aC5zYW1wbGVWYXJpYW5jZSA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XG4gIHZhciBzYW1wbGVTaXplID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKHNhbXBsZVNpemUgPCAyKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgbWVhbiA9IGdvb2cubWF0aC5hdmVyYWdlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHZhciB2YXJpYW5jZSA9IGdvb2cubWF0aC5zdW0uYXBwbHkobnVsbCwgZ29vZy5hcnJheS5tYXAoYXJndW1lbnRzLFxuICAgICAgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdyh2YWwgLSBtZWFuLCAyKTtcbiAgICAgIH0pKSAvIChzYW1wbGVTaXplIC0gMSk7XG5cbiAgcmV0dXJuIHZhcmlhbmNlO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNhbXBsZSBzdGFuZGFyZCBkZXZpYXRpb24gb2YgdGhlIGFyZ3VtZW50cy4gIEZvciBhIGRlZmluaXRpb24gb2ZcbiAqIHNhbXBsZSBzdGFuZGFyZCBkZXZpYXRpb24sIHNlZSBlLmcuXG4gKiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N0YW5kYXJkX2RldmlhdGlvblxuICogQHBhcmFtIHsuLi5udW1iZXJ9IHZhcl9hcmdzIE51bWJlciBzYW1wbGVzIHRvIGFuYWx5emUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzYW1wbGUgc3RhbmRhcmQgZGV2aWF0aW9uIG9mIHRoZSBhcmd1bWVudHMgKDAgaWYgZmV3ZXJcbiAqICAgICB0aGFuIHR3byBzYW1wbGVzIHdlcmUgcHJvdmlkZWQsIG9yIHtAY29kZSBOYU59IGlmIGFueSBvZiB0aGUgc2FtcGxlcyBpc1xuICogICAgIG5vdCBhIHZhbGlkIG51bWJlcikuXG4gKi9cbmdvb2cubWF0aC5zdGFuZGFyZERldmlhdGlvbiA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoZ29vZy5tYXRoLnNhbXBsZVZhcmlhbmNlLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgc3VwcGxpZWQgbnVtYmVyIHJlcHJlc2VudHMgYW4gaW50ZWdlciwgaS5lLiB0aGF0IGlzIGhhc1xuICogbm8gZnJhY3Rpb25hbCBjb21wb25lbnQuICBObyByYW5nZS1jaGVja2luZyBpcyBwZXJmb3JtZWQgb24gdGhlIG51bWJlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB7QGNvZGUgbnVtfSBpcyBhbiBpbnRlZ2VyLlxuICovXG5nb29nLm1hdGguaXNJbnQgPSBmdW5jdGlvbihudW0pIHtcbiAgcmV0dXJuIGlzRmluaXRlKG51bSkgJiYgbnVtICUgMSA9PSAwO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgc3VwcGxpZWQgbnVtYmVyIGlzIGZpbml0ZSBhbmQgbm90IE5hTi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB7QGNvZGUgbnVtfSBpcyBhIGZpbml0ZSBudW1iZXIuXG4gKi9cbmdvb2cubWF0aC5pc0Zpbml0ZU51bWJlciA9IGZ1bmN0aW9uKG51bSkge1xuICByZXR1cm4gaXNGaW5pdGUobnVtKSAmJiAhaXNOYU4obnVtKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgaXQgaXMgbmVnYXRpdmUgemVyby5cbiAqL1xuZ29vZy5tYXRoLmlzTmVnYXRpdmVaZXJvID0gZnVuY3Rpb24obnVtKSB7XG4gIHJldHVybiBudW0gPT0gMCAmJiAxIC8gbnVtIDwgMDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwcmVjaXNlIHZhbHVlIG9mIGZsb29yKGxvZzEwKG51bSkpLlxuICogU2ltcGxlciBpbXBsZW1lbnRhdGlvbnMgZGlkbid0IHdvcmsgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCByb3VuZGluZ1xuICogZXJyb3JzLiBGb3IgZXhhbXBsZVxuICogPHVsPlxuICogPGxpPk1hdGguZmxvb3IoTWF0aC5sb2cobnVtKSAvIE1hdGguTE4xMCkgaXMgb2ZmIGJ5IG9uZSBmb3IgbnVtID09IDFlKzMuXG4gKiA8bGk+TWF0aC5mbG9vcihNYXRoLmxvZyhudW0pICogTWF0aC5MT0cxMEUpIGlzIG9mZiBieSBvbmUgZm9yIG51bSA9PSAxZSsxNS5cbiAqIDxsaT5NYXRoLmZsb29yKE1hdGgubG9nMTAobnVtKSkgaXMgb2ZmIGJ5IG9uZSBmb3IgbnVtID09IDFlKzE1IC0gMS5cbiAqIDwvdWw+XG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIEEgZmxvYXRpbmcgcG9pbnQgbnVtYmVyLlxuICogQHJldHVybiB7bnVtYmVyfSBJdHMgbG9nYXJpdGhtIHRvIGJhc2UgMTAgcm91bmRlZCBkb3duIHRvIHRoZSBuZWFyZXN0XG4gKiAgICAgaW50ZWdlciBpZiBudW0gPiAwLiAtSW5maW5pdHkgaWYgbnVtID09IDAuIE5hTiBpZiBudW0gPCAwLlxuICovXG5nb29nLm1hdGgubG9nMTBGbG9vciA9IGZ1bmN0aW9uKG51bSkge1xuICBpZiAobnVtID4gMCkge1xuICAgIHZhciB4ID0gTWF0aC5yb3VuZChNYXRoLmxvZyhudW0pICogTWF0aC5MT0cxMEUpO1xuICAgIHJldHVybiB4IC0gKHBhcnNlRmxvYXQoJzFlJyArIHgpID4gbnVtKTtcbiAgfVxuICByZXR1cm4gbnVtID09IDAgPyAtSW5maW5pdHkgOiBOYU47XG59O1xuXG5cbi8qKlxuICogQSB0d2Vha2VkIHZhcmlhbnQgb2Yge0Bjb2RlIE1hdGguZmxvb3J9IHdoaWNoIHRvbGVyYXRlcyBpZiB0aGUgcGFzc2VkIG51bWJlclxuICogaXMgaW5maW5pdGVzaW1hbGx5IHNtYWxsZXIgdGhhbiB0aGUgY2xvc2VzdCBpbnRlZ2VyLiBJdCBvZnRlbiBoYXBwZW5zIHdpdGhcbiAqIHRoZSByZXN1bHRzIG9mIGZsb2F0aW5nIHBvaW50IGNhbGN1bGF0aW9ucyBiZWNhdXNlIG9mIHRoZSBmaW5pdGUgcHJlY2lzaW9uXG4gKiBvZiB0aGUgaW50ZXJtZWRpYXRlIHJlc3VsdHMuIEZvciBleGFtcGxlIHtAY29kZSBNYXRoLmZsb29yKE1hdGgubG9nKDEwMDApIC9cbiAqIE1hdGguTE4xMCkgPT0gMn0sIG5vdCAzIGFzIG9uZSB3b3VsZCBleHBlY3QuXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIEEgbnVtYmVyLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfZXBzaWxvbiBBbiBpbmZpbml0ZXNpbWFsbHkgc21hbGwgcG9zaXRpdmUgbnVtYmVyLCB0aGVcbiAqICAgICByb3VuZGluZyBlcnJvciB0byB0b2xlcmF0ZS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGxhcmdlc3QgaW50ZWdlciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8ge0Bjb2RlIG51bX0uXG4gKi9cbmdvb2cubWF0aC5zYWZlRmxvb3IgPSBmdW5jdGlvbihudW0sIG9wdF9lcHNpbG9uKSB7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoIWdvb2cuaXNEZWYob3B0X2Vwc2lsb24pIHx8IG9wdF9lcHNpbG9uID4gMCk7XG4gIHJldHVybiBNYXRoLmZsb29yKG51bSArIChvcHRfZXBzaWxvbiB8fCAyZS0xNSkpO1xufTtcblxuXG4vKipcbiAqIEEgdHdlYWtlZCB2YXJpYW50IG9mIHtAY29kZSBNYXRoLmNlaWx9LiBTZWUge0Bjb2RlIGdvb2cubWF0aC5zYWZlRmxvb3J9IGZvclxuICogZGV0YWlscy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gQSBudW1iZXIuXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9lcHNpbG9uIEFuIGluZmluaXRlc2ltYWxseSBzbWFsbCBwb3NpdGl2ZSBudW1iZXIsIHRoZVxuICogICAgIHJvdW5kaW5nIGVycm9yIHRvIHRvbGVyYXRlLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgc21hbGxlc3QgaW50ZWdlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8ge0Bjb2RlIG51bX0uXG4gKi9cbmdvb2cubWF0aC5zYWZlQ2VpbCA9IGZ1bmN0aW9uKG51bSwgb3B0X2Vwc2lsb24pIHtcbiAgZ29vZy5hc3NlcnRzLmFzc2VydCghZ29vZy5pc0RlZihvcHRfZXBzaWxvbikgfHwgb3B0X2Vwc2lsb24gPiAwKTtcbiAgcmV0dXJuIE1hdGguY2VpbChudW0gLSAob3B0X2Vwc2lsb24gfHwgMmUtMTUpKTtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAwNiBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEEgdXRpbGl0eSBjbGFzcyBmb3IgcmVwcmVzZW50aW5nIHR3by1kaW1lbnNpb25hbCBwb3NpdGlvbnMuXG4gKi9cblxuXG5nb29nLnByb3ZpZGUoJ2dvb2cubWF0aC5Db29yZGluYXRlJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5tYXRoJyk7XG5cblxuXG4vKipcbiAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgY29vcmRpbmF0ZXMgYW5kIHBvc2l0aW9ucy5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X3ggTGVmdCwgZGVmYXVsdHMgdG8gMC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X3kgVG9wLCBkZWZhdWx0cyB0byAwLlxuICogQHN0cnVjdFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmdvb2cubWF0aC5Db29yZGluYXRlID0gZnVuY3Rpb24ob3B0X3gsIG9wdF95KSB7XG4gIC8qKlxuICAgKiBYLXZhbHVlXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnggPSBnb29nLmlzRGVmKG9wdF94KSA/IG9wdF94IDogMDtcblxuICAvKipcbiAgICogWS12YWx1ZVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy55ID0gZ29vZy5pc0RlZihvcHRfeSkgPyBvcHRfeSA6IDA7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBjb3B5IG9mIHRoZSBjb29yZGluYXRlLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBBIGNsb25lIG9mIHRoaXMgY29vcmRpbmF0ZS5cbiAqL1xuZ29vZy5tYXRoLkNvb3JkaW5hdGUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgZ29vZy5tYXRoLkNvb3JkaW5hdGUodGhpcy54LCB0aGlzLnkpO1xufTtcblxuXG5pZiAoZ29vZy5ERUJVRykge1xuICAvKipcbiAgICogUmV0dXJucyBhIG5pY2Ugc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY29vcmRpbmF0ZS5cbiAgICogQHJldHVybiB7c3RyaW5nfSBJbiB0aGUgZm9ybSAoNTAsIDczKS5cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnb29nLm1hdGguQ29vcmRpbmF0ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJygnICsgdGhpcy54ICsgJywgJyArIHRoaXMueSArICcpJztcbiAgfTtcbn1cblxuXG4vKipcbiAqIENvbXBhcmVzIGNvb3JkaW5hdGVzIGZvciBlcXVhbGl0eS5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLkNvb3JkaW5hdGV9IGEgQSBDb29yZGluYXRlLlxuICogQHBhcmFtIHtnb29nLm1hdGguQ29vcmRpbmF0ZX0gYiBBIENvb3JkaW5hdGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmZiB0aGUgY29vcmRpbmF0ZXMgYXJlIGVxdWFsLCBvciBpZiBib3RoIGFyZSBudWxsLlxuICovXG5nb29nLm1hdGguQ29vcmRpbmF0ZS5lcXVhbHMgPSBmdW5jdGlvbihhLCBiKSB7XG4gIGlmIChhID09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIWEgfHwgIWIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGEueCA9PSBiLnggJiYgYS55ID09IGIueTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBjb29yZGluYXRlcy5cbiAqIEBwYXJhbSB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBhIEEgQ29vcmRpbmF0ZS5cbiAqIEBwYXJhbSB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBiIEEgQ29vcmRpbmF0ZS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGRpc3RhbmNlIGJldHdlZW4ge0Bjb2RlIGF9IGFuZCB7QGNvZGUgYn0uXG4gKi9cbmdvb2cubWF0aC5Db29yZGluYXRlLmRpc3RhbmNlID0gZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZHggPSBhLnggLSBiLng7XG4gIHZhciBkeSA9IGEueSAtIGIueTtcbiAgcmV0dXJuIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgbWFnbml0dWRlIG9mIGEgY29vcmRpbmF0ZS5cbiAqIEBwYXJhbSB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBhIEEgQ29vcmRpbmF0ZS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIG9yaWdpbiBhbmQge0Bjb2RlIGF9LlxuICovXG5nb29nLm1hdGguQ29vcmRpbmF0ZS5tYWduaXR1ZGUgPSBmdW5jdGlvbihhKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoYS54ICogYS54ICsgYS55ICogYS55KTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhbmdsZSBmcm9tIHRoZSBvcmlnaW4gdG8gYSBjb29yZGluYXRlLlxuICogQHBhcmFtIHshZ29vZy5tYXRoLkNvb3JkaW5hdGV9IGEgQSBDb29yZGluYXRlLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgYW5nbGUsIGluIGRlZ3JlZXMsIGNsb2Nrd2lzZSBmcm9tIHRoZSBwb3NpdGl2ZSBYXG4gKiAgICAgYXhpcyB0byB7QGNvZGUgYX0uXG4gKi9cbmdvb2cubWF0aC5Db29yZGluYXRlLmF6aW11dGggPSBmdW5jdGlvbihhKSB7XG4gIHJldHVybiBnb29nLm1hdGguYW5nbGUoMCwgMCwgYS54LCBhLnkpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiB0d28gY29vcmRpbmF0ZXMuIFNxdWFyZWQgZGlzdGFuY2VzIGNhblxuICogYmUgdXNlZCBmb3IgY29tcGFyaXNvbnMgd2hlbiB0aGUgYWN0dWFsIHZhbHVlIGlzIG5vdCByZXF1aXJlZC5cbiAqXG4gKiBQZXJmb3JtYW5jZSBub3RlOiBlbGltaW5hdGluZyB0aGUgc3F1YXJlIHJvb3QgaXMgYW4gb3B0aW1pemF0aW9uIG9mdGVuIHVzZWRcbiAqIGluIGxvd2VyLWxldmVsIGxhbmd1YWdlcywgYnV0IHRoZSBzcGVlZCBkaWZmZXJlbmNlIGlzIG5vdCBuZWFybHkgYXNcbiAqIHByb25vdW5jZWQgaW4gSmF2YVNjcmlwdCAob25seSBhIGZldyBwZXJjZW50LilcbiAqXG4gKiBAcGFyYW0geyFnb29nLm1hdGguQ29vcmRpbmF0ZX0gYSBBIENvb3JkaW5hdGUuXG4gKiBAcGFyYW0geyFnb29nLm1hdGguQ29vcmRpbmF0ZX0gYiBBIENvb3JkaW5hdGUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4ge0Bjb2RlIGF9IGFuZCB7QGNvZGUgYn0uXG4gKi9cbmdvb2cubWF0aC5Db29yZGluYXRlLnNxdWFyZWREaXN0YW5jZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGR4ID0gYS54IC0gYi54O1xuICB2YXIgZHkgPSBhLnkgLSBiLnk7XG4gIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIGNvb3JkaW5hdGVzIGFzIGEgbmV3XG4gKiBnb29nLm1hdGguQ29vcmRpbmF0ZS5cbiAqIEBwYXJhbSB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBhIEEgQ29vcmRpbmF0ZS5cbiAqIEBwYXJhbSB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBiIEEgQ29vcmRpbmF0ZS5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguQ29vcmRpbmF0ZX0gQSBDb29yZGluYXRlIHJlcHJlc2VudGluZyB0aGUgZGlmZmVyZW5jZVxuICogICAgIGJldHdlZW4ge0Bjb2RlIGF9IGFuZCB7QGNvZGUgYn0uXG4gKi9cbmdvb2cubWF0aC5Db29yZGluYXRlLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBuZXcgZ29vZy5tYXRoLkNvb3JkaW5hdGUoYS54IC0gYi54LCBhLnkgLSBiLnkpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHN1bSBvZiB0d28gY29vcmRpbmF0ZXMgYXMgYSBuZXcgZ29vZy5tYXRoLkNvb3JkaW5hdGUuXG4gKiBAcGFyYW0geyFnb29nLm1hdGguQ29vcmRpbmF0ZX0gYSBBIENvb3JkaW5hdGUuXG4gKiBAcGFyYW0geyFnb29nLm1hdGguQ29vcmRpbmF0ZX0gYiBBIENvb3JkaW5hdGUuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkNvb3JkaW5hdGV9IEEgQ29vcmRpbmF0ZSByZXByZXNlbnRpbmcgdGhlIHN1bSBvZiB0aGUgdHdvXG4gKiAgICAgY29vcmRpbmF0ZXMuXG4gKi9cbmdvb2cubWF0aC5Db29yZGluYXRlLnN1bSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIG5ldyBnb29nLm1hdGguQ29vcmRpbmF0ZShhLnggKyBiLngsIGEueSArIGIueSk7XG59O1xuXG5cbi8qKlxuICogUm91bmRzIHRoZSB4IGFuZCB5IGZpZWxkcyB0byB0aGUgbmV4dCBsYXJnZXIgaW50ZWdlciB2YWx1ZXMuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkNvb3JkaW5hdGV9IFRoaXMgY29vcmRpbmF0ZSB3aXRoIGNlaWwnZCBmaWVsZHMuXG4gKi9cbmdvb2cubWF0aC5Db29yZGluYXRlLnByb3RvdHlwZS5jZWlsID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMueCA9IE1hdGguY2VpbCh0aGlzLngpO1xuICB0aGlzLnkgPSBNYXRoLmNlaWwodGhpcy55KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogUm91bmRzIHRoZSB4IGFuZCB5IGZpZWxkcyB0byB0aGUgbmV4dCBzbWFsbGVyIGludGVnZXIgdmFsdWVzLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBUaGlzIGNvb3JkaW5hdGUgd2l0aCBmbG9vcmVkIGZpZWxkcy5cbiAqL1xuZ29vZy5tYXRoLkNvb3JkaW5hdGUucHJvdG90eXBlLmZsb29yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMueCA9IE1hdGguZmxvb3IodGhpcy54KTtcbiAgdGhpcy55ID0gTWF0aC5mbG9vcih0aGlzLnkpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBSb3VuZHMgdGhlIHggYW5kIHkgZmllbGRzIHRvIHRoZSBuZWFyZXN0IGludGVnZXIgdmFsdWVzLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBUaGlzIGNvb3JkaW5hdGUgd2l0aCByb3VuZGVkIGZpZWxkcy5cbiAqL1xuZ29vZy5tYXRoLkNvb3JkaW5hdGUucHJvdG90eXBlLnJvdW5kID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMueCA9IE1hdGgucm91bmQodGhpcy54KTtcbiAgdGhpcy55ID0gTWF0aC5yb3VuZCh0aGlzLnkpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBUcmFuc2xhdGVzIHRoaXMgYm94IGJ5IHRoZSBnaXZlbiBvZmZzZXRzLiBJZiBhIHtAY29kZSBnb29nLm1hdGguQ29vcmRpbmF0ZX1cbiAqIGlzIGdpdmVuLCB0aGVuIHRoZSB4IGFuZCB5IHZhbHVlcyBhcmUgdHJhbnNsYXRlZCBieSB0aGUgY29vcmRpbmF0ZSdzIHggYW5kIHkuXG4gKiBPdGhlcndpc2UsIHggYW5kIHkgYXJlIHRyYW5zbGF0ZWQgYnkge0Bjb2RlIHR4fSBhbmQge0Bjb2RlIG9wdF90eX1cbiAqIHJlc3BlY3RpdmVseS5cbiAqIEBwYXJhbSB7bnVtYmVyfGdvb2cubWF0aC5Db29yZGluYXRlfSB0eCBUaGUgdmFsdWUgdG8gdHJhbnNsYXRlIHggYnkgb3IgdGhlXG4gKiAgICAgdGhlIGNvb3JkaW5hdGUgdG8gdHJhbnNsYXRlIHRoaXMgY29vcmRpbmF0ZSBieS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X3R5IFRoZSB2YWx1ZSB0byB0cmFuc2xhdGUgeSBieS5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguQ29vcmRpbmF0ZX0gVGhpcyBjb29yZGluYXRlIGFmdGVyIHRyYW5zbGF0aW5nLlxuICovXG5nb29nLm1hdGguQ29vcmRpbmF0ZS5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24odHgsIG9wdF90eSkge1xuICBpZiAodHggaW5zdGFuY2VvZiBnb29nLm1hdGguQ29vcmRpbmF0ZSkge1xuICAgIHRoaXMueCArPSB0eC54O1xuICAgIHRoaXMueSArPSB0eC55O1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCArPSB0eDtcbiAgICBpZiAoZ29vZy5pc051bWJlcihvcHRfdHkpKSB7XG4gICAgICB0aGlzLnkgKz0gb3B0X3R5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBTY2FsZXMgdGhpcyBjb29yZGluYXRlIGJ5IHRoZSBnaXZlbiBzY2FsZSBmYWN0b3JzLiBUaGUgeCBhbmQgeSB2YWx1ZXMgYXJlXG4gKiBzY2FsZWQgYnkge0Bjb2RlIHN4fSBhbmQge0Bjb2RlIG9wdF9zeX0gcmVzcGVjdGl2ZWx5LiAgSWYge0Bjb2RlIG9wdF9zeX1cbiAqIGlzIG5vdCBnaXZlbiwgdGhlbiB7QGNvZGUgc3h9IGlzIHVzZWQgZm9yIGJvdGggeCBhbmQgeS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzeCBUaGUgc2NhbGUgZmFjdG9yIHRvIHVzZSBmb3IgdGhlIHggZGltZW5zaW9uLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfc3kgVGhlIHNjYWxlIGZhY3RvciB0byB1c2UgZm9yIHRoZSB5IGRpbWVuc2lvbi5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguQ29vcmRpbmF0ZX0gVGhpcyBjb29yZGluYXRlIGFmdGVyIHNjYWxpbmcuXG4gKi9cbmdvb2cubWF0aC5Db29yZGluYXRlLnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uKHN4LCBvcHRfc3kpIHtcbiAgdmFyIHN5ID0gZ29vZy5pc051bWJlcihvcHRfc3kpID8gb3B0X3N5IDogc3g7XG4gIHRoaXMueCAqPSBzeDtcbiAgdGhpcy55ICo9IHN5O1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBSb3RhdGVzIHRoaXMgY29vcmRpbmF0ZSBjbG9ja3dpc2UgYWJvdXQgdGhlIG9yaWdpbiAob3IsIG9wdGlvbmFsbHksIHRoZSBnaXZlblxuICogY2VudGVyKSBieSB0aGUgZ2l2ZW4gYW5nbGUsIGluIHJhZGlhbnMuXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaWFucyBUaGUgYW5nbGUgYnkgd2hpY2ggdG8gcm90YXRlIHRoaXMgY29vcmRpbmF0ZVxuICogICAgIGNsb2Nrd2lzZSBhYm91dCB0aGUgZ2l2ZW4gY2VudGVyLCBpbiByYWRpYW5zLlxuICogQHBhcmFtIHshZ29vZy5tYXRoLkNvb3JkaW5hdGU9fSBvcHRfY2VudGVyIFRoZSBjZW50ZXIgb2Ygcm90YXRpb24uIERlZmF1bHRzXG4gKiAgICAgdG8gKDAsIDApIGlmIG5vdCBnaXZlbi5cbiAqL1xuZ29vZy5tYXRoLkNvb3JkaW5hdGUucHJvdG90eXBlLnJvdGF0ZVJhZGlhbnMgPSBmdW5jdGlvbihyYWRpYW5zLCBvcHRfY2VudGVyKSB7XG4gIHZhciBjZW50ZXIgPSBvcHRfY2VudGVyIHx8IG5ldyBnb29nLm1hdGguQ29vcmRpbmF0ZSgwLCAwKTtcblxuICB2YXIgeCA9IHRoaXMueDtcbiAgdmFyIHkgPSB0aGlzLnk7XG4gIHZhciBjb3MgPSBNYXRoLmNvcyhyYWRpYW5zKTtcbiAgdmFyIHNpbiA9IE1hdGguc2luKHJhZGlhbnMpO1xuXG4gIHRoaXMueCA9ICh4IC0gY2VudGVyLngpICogY29zIC0gKHkgLSBjZW50ZXIueSkgKiBzaW4gKyBjZW50ZXIueDtcbiAgdGhpcy55ID0gKHggLSBjZW50ZXIueCkgKiBzaW4gKyAoeSAtIGNlbnRlci55KSAqIGNvcyArIGNlbnRlci55O1xufTtcblxuXG4vKipcbiAqIFJvdGF0ZXMgdGhpcyBjb29yZGluYXRlIGNsb2Nrd2lzZSBhYm91dCB0aGUgb3JpZ2luIChvciwgb3B0aW9uYWxseSwgdGhlIGdpdmVuXG4gKiBjZW50ZXIpIGJ5IHRoZSBnaXZlbiBhbmdsZSwgaW4gZGVncmVlcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBkZWdyZWVzIFRoZSBhbmdsZSBieSB3aGljaCB0byByb3RhdGUgdGhpcyBjb29yZGluYXRlXG4gKiAgICAgY2xvY2t3aXNlIGFib3V0IHRoZSBnaXZlbiBjZW50ZXIsIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0geyFnb29nLm1hdGguQ29vcmRpbmF0ZT19IG9wdF9jZW50ZXIgVGhlIGNlbnRlciBvZiByb3RhdGlvbi4gRGVmYXVsdHNcbiAqICAgICB0byAoMCwgMCkgaWYgbm90IGdpdmVuLlxuICovXG5nb29nLm1hdGguQ29vcmRpbmF0ZS5wcm90b3R5cGUucm90YXRlRGVncmVlcyA9IGZ1bmN0aW9uKGRlZ3JlZXMsIG9wdF9jZW50ZXIpIHtcbiAgdGhpcy5yb3RhdGVSYWRpYW5zKGdvb2cubWF0aC50b1JhZGlhbnMoZGVncmVlcyksIG9wdF9jZW50ZXIpO1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDA2IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0aWVzIGZvciBtYW5pcHVsYXRpbmcgdGhlIGJyb3dzZXIncyBEb2N1bWVudCBPYmplY3QgTW9kZWxcbiAqIEluc3BpcmF0aW9uIHRha2VuICpoZWF2aWx5KiBmcm9tIG1vY2hpa2l0IChodHRwOi8vbW9jaGlraXQuY29tLykuXG4gKlxuICogWW91IGNhbiB1c2Uge0BsaW5rIGdvb2cuZG9tLkRvbUhlbHBlcn0gdG8gY3JlYXRlIG5ldyBkb20gaGVscGVycyB0aGF0IHJlZmVyXG4gKiB0byBhIGRpZmZlcmVudCBkb2N1bWVudCBvYmplY3QuICBUaGlzIGlzIHVzZWZ1bCBpZiB5b3UgYXJlIHdvcmtpbmcgd2l0aFxuICogZnJhbWVzIG9yIG11bHRpcGxlIHdpbmRvd3MuXG4gKlxuICogQGF1dGhvciBhcnZAZ29vZ2xlLmNvbSAoRXJpayBBcnZpZHNzb24pXG4gKi9cblxuXG4vLyBUT0RPKGFydik6IFJlbmFtZS9yZWZhY3RvciBnZXRUZXh0Q29udGVudCBhbmQgZ2V0UmF3VGV4dENvbnRlbnQuIFRoZSBwcm9ibGVtXG4vLyBpcyB0aGF0IGdldFRleHRDb250ZW50IHNob3VsZCBtaW1pYyB0aGUgRE9NMyB0ZXh0Q29udGVudC4gV2Ugc2hvdWxkIGFkZCBhXG4vLyBnZXRJbm5lclRleHQgKG9yIGdldFRleHQpIHdoaWNoIHRyaWVzIHRvIHJldHVybiB0aGUgdmlzaWJsZSB0ZXh0LCBpbm5lclRleHQuXG5cblxuZ29vZy5wcm92aWRlKCdnb29nLmRvbScpO1xuZ29vZy5wcm92aWRlKCdnb29nLmRvbS5BcHBlbmRhYmxlJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuZG9tLkRvbUhlbHBlcicpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuYXJyYXknKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZG9tLkJyb3dzZXJGZWF0dXJlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZG9tLk5vZGVUeXBlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZG9tLlRhZ05hbWUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5kb20uc2FmZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmh0bWwuU2FmZUh0bWwnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5tYXRoLkNvb3JkaW5hdGUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5tYXRoLlNpemUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5vYmplY3QnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcuVW5pY29kZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnVzZXJBZ2VudCcpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB3ZSBrbm93IGF0IGNvbXBpbGUgdGltZSB0aGF0IHRoZSBicm93c2VyIGlzIGluXG4gKiBxdWlya3MgbW9kZS5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cuZG9tLkFTU1VNRV9RVUlSS1NfTU9ERScsIGZhbHNlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgd2Uga25vdyBhdCBjb21waWxlIHRpbWUgdGhhdCB0aGUgYnJvd3NlciBpcyBpblxuICogc3RhbmRhcmRzIGNvbXBsaWFuY2UgbW9kZS5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cuZG9tLkFTU1VNRV9TVEFOREFSRFNfTU9ERScsIGZhbHNlKTtcblxuXG4vKipcbiAqIFdoZXRoZXIgd2Uga25vdyB0aGUgY29tcGF0aWJpbGl0eSBtb2RlIGF0IGNvbXBpbGUgdGltZS5cbiAqIEB0eXBlIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kb20uQ09NUEFUX01PREVfS05PV05fID1cbiAgICBnb29nLmRvbS5BU1NVTUVfUVVJUktTX01PREUgfHwgZ29vZy5kb20uQVNTVU1FX1NUQU5EQVJEU19NT0RFO1xuXG5cbi8qKlxuICogR2V0cyB0aGUgRG9tSGVscGVyIG9iamVjdCBmb3IgdGhlIGRvY3VtZW50IHdoZXJlIHRoZSBlbGVtZW50IHJlc2lkZXMuXG4gKiBAcGFyYW0geyhOb2RlfFdpbmRvdyk9fSBvcHRfZWxlbWVudCBJZiBwcmVzZW50LCBnZXRzIHRoZSBEb21IZWxwZXIgZm9yIHRoaXNcbiAqICAgICBlbGVtZW50LlxuICogQHJldHVybiB7IWdvb2cuZG9tLkRvbUhlbHBlcn0gVGhlIERvbUhlbHBlci5cbiAqL1xuZ29vZy5kb20uZ2V0RG9tSGVscGVyID0gZnVuY3Rpb24ob3B0X2VsZW1lbnQpIHtcbiAgcmV0dXJuIG9wdF9lbGVtZW50ID9cbiAgICAgIG5ldyBnb29nLmRvbS5Eb21IZWxwZXIoZ29vZy5kb20uZ2V0T3duZXJEb2N1bWVudChvcHRfZWxlbWVudCkpIDpcbiAgICAgIChnb29nLmRvbS5kZWZhdWx0RG9tSGVscGVyXyB8fFxuICAgICAgICAgIChnb29nLmRvbS5kZWZhdWx0RG9tSGVscGVyXyA9IG5ldyBnb29nLmRvbS5Eb21IZWxwZXIoKSkpO1xufTtcblxuXG4vKipcbiAqIENhY2hlZCBkZWZhdWx0IERPTSBoZWxwZXIuXG4gKiBAdHlwZSB7Z29vZy5kb20uRG9tSGVscGVyfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kb20uZGVmYXVsdERvbUhlbHBlcl87XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBkb2N1bWVudCBvYmplY3QgYmVpbmcgdXNlZCBieSB0aGUgZG9tIGxpYnJhcnkuXG4gKiBAcmV0dXJuIHshRG9jdW1lbnR9IERvY3VtZW50IG9iamVjdC5cbiAqL1xuZ29vZy5kb20uZ2V0RG9jdW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGRvY3VtZW50O1xufTtcblxuXG4vKipcbiAqIEdldHMgYW4gZWxlbWVudCBmcm9tIHRoZSBjdXJyZW50IGRvY3VtZW50IGJ5IGVsZW1lbnQgaWQuXG4gKlxuICogSWYgYW4gRWxlbWVudCBpcyBwYXNzZWQgaW4sIGl0IGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCBJRCBvciBhIERPTSBub2RlLlxuICogQHJldHVybiB7RWxlbWVudH0gVGhlIGVsZW1lbnQgd2l0aCB0aGUgZ2l2ZW4gSUQsIG9yIHRoZSBub2RlIHBhc3NlZCBpbi5cbiAqL1xuZ29vZy5kb20uZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdvb2cuZG9tLmdldEVsZW1lbnRIZWxwZXJfKGRvY3VtZW50LCBlbGVtZW50KTtcbn07XG5cblxuLyoqXG4gKiBHZXRzIGFuIGVsZW1lbnQgYnkgaWQgZnJvbSB0aGUgZ2l2ZW4gZG9jdW1lbnQgKGlmIHByZXNlbnQpLlxuICogSWYgYW4gZWxlbWVudCBpcyBnaXZlbiwgaXQgaXMgcmV0dXJuZWQuXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jXG4gKiBAcGFyYW0ge3N0cmluZ3xFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgSUQgb3IgYSBET00gbm9kZS5cbiAqIEByZXR1cm4ge0VsZW1lbnR9IFRoZSByZXN1bHRpbmcgZWxlbWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZG9tLmdldEVsZW1lbnRIZWxwZXJfID0gZnVuY3Rpb24oZG9jLCBlbGVtZW50KSB7XG4gIHJldHVybiBnb29nLmlzU3RyaW5nKGVsZW1lbnQpID9cbiAgICAgIGRvYy5nZXRFbGVtZW50QnlJZChlbGVtZW50KSA6XG4gICAgICBlbGVtZW50O1xufTtcblxuXG4vKipcbiAqIEdldHMgYW4gZWxlbWVudCBieSBpZCwgYXNzZXJ0aW5nIHRoYXQgdGhlIGVsZW1lbnQgaXMgZm91bmQuXG4gKlxuICogVGhpcyBpcyB1c2VkIHdoZW4gYW4gZWxlbWVudCBpcyBleHBlY3RlZCB0byBleGlzdCwgYW5kIHNob3VsZCBmYWlsIHdpdGhcbiAqIGFuIGFzc2VydGlvbiBlcnJvciBpZiBpdCBkb2VzIG5vdCAoaWYgYXNzZXJ0aW9ucyBhcmUgZW5hYmxlZCkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIEVsZW1lbnQgSUQuXG4gKiBAcmV0dXJuIHshRWxlbWVudH0gVGhlIGVsZW1lbnQgd2l0aCB0aGUgZ2l2ZW4gSUQsIGlmIGl0IGV4aXN0cy5cbiAqL1xuZ29vZy5kb20uZ2V0UmVxdWlyZWRFbGVtZW50ID0gZnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIGdvb2cuZG9tLmdldFJlcXVpcmVkRWxlbWVudEhlbHBlcl8oZG9jdW1lbnQsIGlkKTtcbn07XG5cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGdldFJlcXVpcmVkRWxlbWVudEhlbHBlciBmdW5jdGlvbnMsIGJvdGggc3RhdGljIGFuZFxuICogb24gRG9tSGVscGVyLiAgQXNzZXJ0cyB0aGUgZWxlbWVudCB3aXRoIHRoZSBnaXZlbiBpZCBleGlzdHMuXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEByZXR1cm4geyFFbGVtZW50fSBUaGUgZWxlbWVudCB3aXRoIHRoZSBnaXZlbiBJRCwgaWYgaXQgZXhpc3RzLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kb20uZ2V0UmVxdWlyZWRFbGVtZW50SGVscGVyXyA9IGZ1bmN0aW9uKGRvYywgaWQpIHtcbiAgLy8gVG8gcHJldmVudCB1c2VycyBwYXNzaW5nIGluIEVsZW1lbnRzIGFzIGlzIHBlcm1pdHRlZCBpbiBnZXRFbGVtZW50KCkuXG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnRTdHJpbmcoaWQpO1xuICB2YXIgZWxlbWVudCA9IGdvb2cuZG9tLmdldEVsZW1lbnRIZWxwZXJfKGRvYywgaWQpO1xuICBlbGVtZW50ID0gZ29vZy5hc3NlcnRzLmFzc2VydEVsZW1lbnQoZWxlbWVudCxcbiAgICAgICdObyBlbGVtZW50IGZvdW5kIHdpdGggaWQ6ICcgKyBpZCk7XG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuXG4vKipcbiAqIEFsaWFzIGZvciBnZXRFbGVtZW50LlxuICogQHBhcmFtIHtzdHJpbmd8RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IElEIG9yIGEgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgZWxlbWVudCB3aXRoIHRoZSBnaXZlbiBJRCwgb3IgdGhlIG5vZGUgcGFzc2VkIGluLlxuICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBnb29nLmRvbS5nZXRFbGVtZW50fSBpbnN0ZWFkLlxuICovXG5nb29nLmRvbS4kID0gZ29vZy5kb20uZ2V0RWxlbWVudDtcblxuXG4vKipcbiAqIExvb2tzIHVwIGVsZW1lbnRzIGJ5IGJvdGggdGFnIGFuZCBjbGFzcyBuYW1lLCB1c2luZyBicm93c2VyIG5hdGl2ZSBmdW5jdGlvbnNcbiAqICh7QGNvZGUgcXVlcnlTZWxlY3RvckFsbH0sIHtAY29kZSBnZXRFbGVtZW50c0J5VGFnTmFtZX0gb3JcbiAqIHtAY29kZSBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lfSkgd2hlcmUgcG9zc2libGUuIFRoaXMgZnVuY3Rpb25cbiAqIGlzIGEgdXNlZnVsLCBpZiBsaW1pdGVkLCB3YXkgb2YgY29sbGVjdGluZyBhIGxpc3Qgb2YgRE9NIGVsZW1lbnRzXG4gKiB3aXRoIGNlcnRhaW4gY2hhcmFjdGVyaXN0aWNzLiAge0Bjb2RlIGdvb2cuZG9tLnF1ZXJ5fSBvZmZlcnMgYVxuICogbW9yZSBwb3dlcmZ1bCBhbmQgZ2VuZXJhbCBzb2x1dGlvbiB3aGljaCBhbGxvd3MgbWF0Y2hpbmcgb24gQ1NTM1xuICogc2VsZWN0b3IgZXhwcmVzc2lvbnMsIGJ1dCBhdCBpbmNyZWFzZWQgY29zdCBpbiBjb2RlIHNpemUuIElmIGFsbCB5b3VcbiAqIG5lZWQgaXMgcGFydGljdWxhciB0YWdzIGJlbG9uZ2luZyB0byBhIHNpbmdsZSBjbGFzcywgdGhpcyBmdW5jdGlvblxuICogaXMgZmFzdCBhbmQgc2xlZWsuXG4gKlxuICogTm90ZSB0aGF0IHRhZyBuYW1lcyBhcmUgY2FzZSBzZW5zaXRpdmUgaW4gdGhlIFNWRyBuYW1lc3BhY2UsIGFuZCB0aGlzXG4gKiBmdW5jdGlvbiBjb252ZXJ0cyBvcHRfdGFnIHRvIHVwcGVyY2FzZSBmb3IgY29tcGFyaXNvbnMuIEZvciBxdWVyaWVzIGluIHRoZVxuICogU1ZHIG5hbWVzcGFjZSB5b3Ugc2hvdWxkIHVzZSBxdWVyeVNlbGVjdG9yIG9yIHF1ZXJ5U2VsZWN0b3JBbGwgaW5zdGVhZC5cbiAqIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTk2Mzg3MFxuICogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTgzNDM4XG4gKlxuICogQHNlZSB7Z29vZy5kb20ucXVlcnl9XG4gKlxuICogQHBhcmFtIHs/c3RyaW5nPX0gb3B0X3RhZyBFbGVtZW50IHRhZyBuYW1lLlxuICogQHBhcmFtIHs/c3RyaW5nPX0gb3B0X2NsYXNzIE9wdGlvbmFsIGNsYXNzIG5hbWUuXG4gKiBAcGFyYW0geyhEb2N1bWVudHxFbGVtZW50KT19IG9wdF9lbCBPcHRpb25hbCBlbGVtZW50IHRvIGxvb2sgaW4uXG4gKiBAcmV0dXJuIHsge2xlbmd0aDogbnVtYmVyfSB9IEFycmF5LWxpa2UgbGlzdCBvZiBlbGVtZW50cyAob25seSBhIGxlbmd0aFxuICogICAgIHByb3BlcnR5IGFuZCBudW1lcmljYWwgaW5kaWNlcyBhcmUgZ3VhcmFudGVlZCB0byBleGlzdCkuXG4gKi9cbmdvb2cuZG9tLmdldEVsZW1lbnRzQnlUYWdOYW1lQW5kQ2xhc3MgPSBmdW5jdGlvbihvcHRfdGFnLCBvcHRfY2xhc3MsIG9wdF9lbCkge1xuICByZXR1cm4gZ29vZy5kb20uZ2V0RWxlbWVudHNCeVRhZ05hbWVBbmRDbGFzc18oZG9jdW1lbnQsIG9wdF90YWcsIG9wdF9jbGFzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdF9lbCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhIHN0YXRpYywgYXJyYXktbGlrZSBsaXN0IG9mIHRoZSBlbGVtZW50cyB3aXRoIHRoZSBwcm92aWRlZFxuICogY2xhc3NOYW1lLlxuICogQHNlZSB7Z29vZy5kb20ucXVlcnl9XG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBuYW1lIG9mIHRoZSBjbGFzcyB0byBsb29rIGZvci5cbiAqIEBwYXJhbSB7KERvY3VtZW50fEVsZW1lbnQpPX0gb3B0X2VsIE9wdGlvbmFsIGVsZW1lbnQgdG8gbG9vayBpbi5cbiAqIEByZXR1cm4geyB7bGVuZ3RoOiBudW1iZXJ9IH0gVGhlIGl0ZW1zIGZvdW5kIHdpdGggdGhlIGNsYXNzIG5hbWUgcHJvdmlkZWQuXG4gKi9cbmdvb2cuZG9tLmdldEVsZW1lbnRzQnlDbGFzcyA9IGZ1bmN0aW9uKGNsYXNzTmFtZSwgb3B0X2VsKSB7XG4gIHZhciBwYXJlbnQgPSBvcHRfZWwgfHwgZG9jdW1lbnQ7XG4gIGlmIChnb29nLmRvbS5jYW5Vc2VRdWVyeVNlbGVjdG9yXyhwYXJlbnQpKSB7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGNsYXNzTmFtZSk7XG4gIH1cbiAgcmV0dXJuIGdvb2cuZG9tLmdldEVsZW1lbnRzQnlUYWdOYW1lQW5kQ2xhc3NfKFxuICAgICAgZG9jdW1lbnQsICcqJywgY2xhc3NOYW1lLCBvcHRfZWwpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgd2l0aCB0aGUgcHJvdmlkZWQgY2xhc3NOYW1lLlxuICogQHNlZSB7Z29vZy5kb20ucXVlcnl9XG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBuYW1lIG9mIHRoZSBjbGFzcyB0byBsb29rIGZvci5cbiAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudD19IG9wdF9lbCBPcHRpb25hbCBlbGVtZW50IHRvIGxvb2sgaW4uXG4gKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgZmlyc3QgaXRlbSB3aXRoIHRoZSBjbGFzcyBuYW1lIHByb3ZpZGVkLlxuICovXG5nb29nLmRvbS5nZXRFbGVtZW50QnlDbGFzcyA9IGZ1bmN0aW9uKGNsYXNzTmFtZSwgb3B0X2VsKSB7XG4gIHZhciBwYXJlbnQgPSBvcHRfZWwgfHwgZG9jdW1lbnQ7XG4gIHZhciByZXRWYWwgPSBudWxsO1xuICBpZiAocGFyZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUpIHtcbiAgICByZXRWYWwgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc05hbWUpWzBdO1xuICB9IGVsc2UgaWYgKGdvb2cuZG9tLmNhblVzZVF1ZXJ5U2VsZWN0b3JfKHBhcmVudCkpIHtcbiAgICByZXRWYWwgPSBwYXJlbnQucXVlcnlTZWxlY3RvcignLicgKyBjbGFzc05hbWUpO1xuICB9IGVsc2Uge1xuICAgIHJldFZhbCA9IGdvb2cuZG9tLmdldEVsZW1lbnRzQnlUYWdOYW1lQW5kQ2xhc3NfKFxuICAgICAgICBkb2N1bWVudCwgJyonLCBjbGFzc05hbWUsIG9wdF9lbClbMF07XG4gIH1cbiAgcmV0dXJuIHJldFZhbCB8fCBudWxsO1xufTtcblxuXG4vKipcbiAqIEVuc3VyZXMgYW4gZWxlbWVudCB3aXRoIHRoZSBnaXZlbiBjbGFzc05hbWUgZXhpc3RzLCBhbmQgdGhlbiByZXR1cm5zIHRoZVxuICogZmlyc3QgZWxlbWVudCB3aXRoIHRoZSBwcm92aWRlZCBjbGFzc05hbWUuXG4gKiBAc2VlIHtnb29nLmRvbS5xdWVyeX1cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIG5hbWUgb2YgdGhlIGNsYXNzIHRvIGxvb2sgZm9yLlxuICogQHBhcmFtIHshRWxlbWVudHwhRG9jdW1lbnQ9fSBvcHRfcm9vdCBPcHRpb25hbCBlbGVtZW50IG9yIGRvY3VtZW50IHRvIGxvb2tcbiAqICAgICBpbi5cbiAqIEByZXR1cm4geyFFbGVtZW50fSBUaGUgZmlyc3QgaXRlbSB3aXRoIHRoZSBjbGFzcyBuYW1lIHByb3ZpZGVkLlxuICogQHRocm93cyB7Z29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yfSBUaHJvd24gaWYgbm8gZWxlbWVudCBpcyBmb3VuZC5cbiAqL1xuZ29vZy5kb20uZ2V0UmVxdWlyZWRFbGVtZW50QnlDbGFzcyA9IGZ1bmN0aW9uKGNsYXNzTmFtZSwgb3B0X3Jvb3QpIHtcbiAgdmFyIHJldFZhbHVlID0gZ29vZy5kb20uZ2V0RWxlbWVudEJ5Q2xhc3MoY2xhc3NOYW1lLCBvcHRfcm9vdCk7XG4gIHJldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KHJldFZhbHVlLFxuICAgICAgJ05vIGVsZW1lbnQgZm91bmQgd2l0aCBjbGFzc05hbWU6ICcgKyBjbGFzc05hbWUpO1xufTtcblxuXG4vKipcbiAqIFByZWZlciB0aGUgc3RhbmRhcmRpemVkIChodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMtYXBpLyksIG5hdGl2ZSBhbmRcbiAqIGZhc3QgVzNDIFNlbGVjdG9ycyBBUEkuXG4gKiBAcGFyYW0geyEoRWxlbWVudHxEb2N1bWVudCl9IHBhcmVudCBUaGUgcGFyZW50IGRvY3VtZW50IG9iamVjdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IHdlIGNhbiB1c2UgcGFyZW50LnF1ZXJ5U2VsZWN0b3IqIEFQSXMuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmRvbS5jYW5Vc2VRdWVyeVNlbGVjdG9yXyA9IGZ1bmN0aW9uKHBhcmVudCkge1xuICByZXR1cm4gISEocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwgJiYgcGFyZW50LnF1ZXJ5U2VsZWN0b3IpO1xufTtcblxuXG4vKipcbiAqIEhlbHBlciBmb3Ige0Bjb2RlIGdldEVsZW1lbnRzQnlUYWdOYW1lQW5kQ2xhc3N9LlxuICogQHBhcmFtIHshRG9jdW1lbnR9IGRvYyBUaGUgZG9jdW1lbnQgdG8gZ2V0IHRoZSBlbGVtZW50cyBpbi5cbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF90YWcgRWxlbWVudCB0YWcgbmFtZS5cbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9jbGFzcyBPcHRpb25hbCBjbGFzcyBuYW1lLlxuICogQHBhcmFtIHsoRG9jdW1lbnR8RWxlbWVudCk9fSBvcHRfZWwgT3B0aW9uYWwgZWxlbWVudCB0byBsb29rIGluLlxuICogQHJldHVybiB7IHtsZW5ndGg6IG51bWJlcn0gfSBBcnJheS1saWtlIGxpc3Qgb2YgZWxlbWVudHMgKG9ubHkgYSBsZW5ndGhcbiAqICAgICBwcm9wZXJ0eSBhbmQgbnVtZXJpY2FsIGluZGljZXMgYXJlIGd1YXJhbnRlZWQgdG8gZXhpc3QpLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kb20uZ2V0RWxlbWVudHNCeVRhZ05hbWVBbmRDbGFzc18gPSBmdW5jdGlvbihkb2MsIG9wdF90YWcsIG9wdF9jbGFzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0X2VsKSB7XG4gIHZhciBwYXJlbnQgPSBvcHRfZWwgfHwgZG9jO1xuICB2YXIgdGFnTmFtZSA9IChvcHRfdGFnICYmIG9wdF90YWcgIT0gJyonKSA/IG9wdF90YWcudG9VcHBlckNhc2UoKSA6ICcnO1xuXG4gIGlmIChnb29nLmRvbS5jYW5Vc2VRdWVyeVNlbGVjdG9yXyhwYXJlbnQpICYmXG4gICAgICAodGFnTmFtZSB8fCBvcHRfY2xhc3MpKSB7XG4gICAgdmFyIHF1ZXJ5ID0gdGFnTmFtZSArIChvcHRfY2xhc3MgPyAnLicgKyBvcHRfY2xhc3MgOiAnJyk7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KTtcbiAgfVxuXG4gIC8vIFVzZSB0aGUgbmF0aXZlIGdldEVsZW1lbnRzQnlDbGFzc05hbWUgaWYgYXZhaWxhYmxlLCB1bmRlciB0aGUgYXNzdW1wdGlvblxuICAvLyB0aGF0IGV2ZW4gd2hlbiB0aGUgdGFnIG5hbWUgaXMgc3BlY2lmaWVkLCB0aGVyZSB3aWxsIGJlIGZld2VyIGVsZW1lbnRzIHRvXG4gIC8vIGZpbHRlciB0aHJvdWdoIHdoZW4gZ29pbmcgYnkgY2xhc3MgdGhhbiBieSB0YWcgbmFtZVxuICBpZiAob3B0X2NsYXNzICYmIHBhcmVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSB7XG4gICAgdmFyIGVscyA9IHBhcmVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKG9wdF9jbGFzcyk7XG5cbiAgICBpZiAodGFnTmFtZSkge1xuICAgICAgdmFyIGFycmF5TGlrZSA9IHt9O1xuICAgICAgdmFyIGxlbiA9IDA7XG5cbiAgICAgIC8vIEZpbHRlciBmb3Igc3BlY2lmaWMgdGFncyBpZiByZXF1ZXN0ZWQuXG4gICAgICBmb3IgKHZhciBpID0gMCwgZWw7IGVsID0gZWxzW2ldOyBpKyspIHtcbiAgICAgICAgaWYgKHRhZ05hbWUgPT0gZWwubm9kZU5hbWUpIHtcbiAgICAgICAgICBhcnJheUxpa2VbbGVuKytdID0gZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFycmF5TGlrZS5sZW5ndGggPSBsZW47XG5cbiAgICAgIHJldHVybiBhcnJheUxpa2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbHM7XG4gICAgfVxuICB9XG5cbiAgdmFyIGVscyA9IHBhcmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lIHx8ICcqJyk7XG5cbiAgaWYgKG9wdF9jbGFzcykge1xuICAgIHZhciBhcnJheUxpa2UgPSB7fTtcbiAgICB2YXIgbGVuID0gMDtcbiAgICBmb3IgKHZhciBpID0gMCwgZWw7IGVsID0gZWxzW2ldOyBpKyspIHtcbiAgICAgIHZhciBjbGFzc05hbWUgPSBlbC5jbGFzc05hbWU7XG4gICAgICAvLyBDaGVjayBpZiBjbGFzc05hbWUgaGFzIGEgc3BsaXQgZnVuY3Rpb24gc2luY2UgU1ZHIGNsYXNzTmFtZSBkb2VzIG5vdC5cbiAgICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lLnNwbGl0ID09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICBnb29nLmFycmF5LmNvbnRhaW5zKGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLCBvcHRfY2xhc3MpKSB7XG4gICAgICAgIGFycmF5TGlrZVtsZW4rK10gPSBlbDtcbiAgICAgIH1cbiAgICB9XG4gICAgYXJyYXlMaWtlLmxlbmd0aCA9IGxlbjtcbiAgICByZXR1cm4gYXJyYXlMaWtlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbHM7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBBbGlhcyBmb3Ige0Bjb2RlIGdldEVsZW1lbnRzQnlUYWdOYW1lQW5kQ2xhc3N9LlxuICogQHBhcmFtIHs/c3RyaW5nPX0gb3B0X3RhZyBFbGVtZW50IHRhZyBuYW1lLlxuICogQHBhcmFtIHs/c3RyaW5nPX0gb3B0X2NsYXNzIE9wdGlvbmFsIGNsYXNzIG5hbWUuXG4gKiBAcGFyYW0ge0VsZW1lbnQ9fSBvcHRfZWwgT3B0aW9uYWwgZWxlbWVudCB0byBsb29rIGluLlxuICogQHJldHVybiB7IHtsZW5ndGg6IG51bWJlcn0gfSBBcnJheS1saWtlIGxpc3Qgb2YgZWxlbWVudHMgKG9ubHkgYSBsZW5ndGhcbiAqICAgICBwcm9wZXJ0eSBhbmQgbnVtZXJpY2FsIGluZGljZXMgYXJlIGd1YXJhbnRlZWQgdG8gZXhpc3QpLlxuICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBnb29nLmRvbS5nZXRFbGVtZW50c0J5VGFnTmFtZUFuZENsYXNzfSBpbnN0ZWFkLlxuICovXG5nb29nLmRvbS4kJCA9IGdvb2cuZG9tLmdldEVsZW1lbnRzQnlUYWdOYW1lQW5kQ2xhc3M7XG5cblxuLyoqXG4gKiBTZXRzIG11bHRpcGxlIHByb3BlcnRpZXMgb24gYSBub2RlLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IERPTSBub2RlIHRvIHNldCBwcm9wZXJ0aWVzIG9uLlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgSGFzaCBvZiBwcm9wZXJ0eTp2YWx1ZSBwYWlycy5cbiAqL1xuZ29vZy5kb20uc2V0UHJvcGVydGllcyA9IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BlcnRpZXMpIHtcbiAgZ29vZy5vYmplY3QuZm9yRWFjaChwcm9wZXJ0aWVzLCBmdW5jdGlvbih2YWwsIGtleSkge1xuICAgIGlmIChrZXkgPT0gJ3N0eWxlJykge1xuICAgICAgZWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gdmFsO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09ICdjbGFzcycpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gdmFsO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09ICdmb3InKSB7XG4gICAgICBlbGVtZW50Lmh0bWxGb3IgPSB2YWw7XG4gICAgfSBlbHNlIGlmIChnb29nLmRvbS5ESVJFQ1RfQVRUUklCVVRFX01BUF8uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZ29vZy5kb20uRElSRUNUX0FUVFJJQlVURV9NQVBfW2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChnb29nLnN0cmluZy5zdGFydHNXaXRoKGtleSwgJ2FyaWEtJykgfHxcbiAgICAgICAgZ29vZy5zdHJpbmcuc3RhcnRzV2l0aChrZXksICdkYXRhLScpKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIE1hcCBvZiBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHNldCB1c2luZ1xuICogZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWwpIGluc3RlYWQgb2YgZWxlbWVudFtrZXldID0gdmFsLiAgVXNlZFxuICogYnkgZ29vZy5kb20uc2V0UHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gKiBAY29uc3RcbiAqL1xuZ29vZy5kb20uRElSRUNUX0FUVFJJQlVURV9NQVBfID0ge1xuICAnY2VsbHBhZGRpbmcnOiAnY2VsbFBhZGRpbmcnLFxuICAnY2VsbHNwYWNpbmcnOiAnY2VsbFNwYWNpbmcnLFxuICAnY29sc3Bhbic6ICdjb2xTcGFuJyxcbiAgJ2ZyYW1lYm9yZGVyJzogJ2ZyYW1lQm9yZGVyJyxcbiAgJ2hlaWdodCc6ICdoZWlnaHQnLFxuICAnbWF4bGVuZ3RoJzogJ21heExlbmd0aCcsXG4gICdyb2xlJzogJ3JvbGUnLFxuICAncm93c3Bhbic6ICdyb3dTcGFuJyxcbiAgJ3R5cGUnOiAndHlwZScsXG4gICd1c2VtYXAnOiAndXNlTWFwJyxcbiAgJ3ZhbGlnbic6ICd2QWxpZ24nLFxuICAnd2lkdGgnOiAnd2lkdGgnXG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgZGltZW5zaW9ucyBvZiB0aGUgdmlld3BvcnQuXG4gKlxuICogR2Vja28gU3RhbmRhcmRzIG1vZGU6XG4gKiBkb2NFbC5jbGllbnRXaWR0aCAgV2lkdGggb2Ygdmlld3BvcnQgZXhjbHVkaW5nIHNjcm9sbGJhci5cbiAqIHdpbi5pbm5lcldpZHRoICAgICBXaWR0aCBvZiB2aWV3cG9ydCBpbmNsdWRpbmcgc2Nyb2xsYmFyLlxuICogYm9keS5jbGllbnRXaWR0aCAgIFdpZHRoIG9mIGJvZHkgZWxlbWVudC5cbiAqXG4gKiBkb2NFbC5jbGllbnRIZWlnaHQgSGVpZ2h0IG9mIHZpZXdwb3J0IGV4Y2x1ZGluZyBzY3JvbGxiYXIuXG4gKiB3aW4uaW5uZXJIZWlnaHQgICAgSGVpZ2h0IG9mIHZpZXdwb3J0IGluY2x1ZGluZyBzY3JvbGxiYXIuXG4gKiBib2R5LmNsaWVudEhlaWdodCAgSGVpZ2h0IG9mIGRvY3VtZW50LlxuICpcbiAqIEdlY2tvIEJhY2t3YXJkcyBjb21wYXRpYmxlIG1vZGU6XG4gKiBkb2NFbC5jbGllbnRXaWR0aCAgV2lkdGggb2Ygdmlld3BvcnQgZXhjbHVkaW5nIHNjcm9sbGJhci5cbiAqIHdpbi5pbm5lcldpZHRoICAgICBXaWR0aCBvZiB2aWV3cG9ydCBpbmNsdWRpbmcgc2Nyb2xsYmFyLlxuICogYm9keS5jbGllbnRXaWR0aCAgIFdpZHRoIG9mIHZpZXdwb3J0IGV4Y2x1ZGluZyBzY3JvbGxiYXIuXG4gKlxuICogZG9jRWwuY2xpZW50SGVpZ2h0IEhlaWdodCBvZiBkb2N1bWVudC5cbiAqIHdpbi5pbm5lckhlaWdodCAgICBIZWlnaHQgb2Ygdmlld3BvcnQgaW5jbHVkaW5nIHNjcm9sbGJhci5cbiAqIGJvZHkuY2xpZW50SGVpZ2h0ICBIZWlnaHQgb2Ygdmlld3BvcnQgZXhjbHVkaW5nIHNjcm9sbGJhci5cbiAqXG4gKiBJRTYvNyBTdGFuZGFyZHMgbW9kZTpcbiAqIGRvY0VsLmNsaWVudFdpZHRoICBXaWR0aCBvZiB2aWV3cG9ydCBleGNsdWRpbmcgc2Nyb2xsYmFyLlxuICogd2luLmlubmVyV2lkdGggICAgIFVuZGVmaW5lZC5cbiAqIGJvZHkuY2xpZW50V2lkdGggICBXaWR0aCBvZiBib2R5IGVsZW1lbnQuXG4gKlxuICogZG9jRWwuY2xpZW50SGVpZ2h0IEhlaWdodCBvZiB2aWV3cG9ydCBleGNsdWRpbmcgc2Nyb2xsYmFyLlxuICogd2luLmlubmVySGVpZ2h0ICAgIFVuZGVmaW5lZC5cbiAqIGJvZHkuY2xpZW50SGVpZ2h0ICBIZWlnaHQgb2YgZG9jdW1lbnQgZWxlbWVudC5cbiAqXG4gKiBJRTUgKyBJRTYvNyBCYWNrd2FyZHMgY29tcGF0aWJsZSBtb2RlOlxuICogZG9jRWwuY2xpZW50V2lkdGggIDAuXG4gKiB3aW4uaW5uZXJXaWR0aCAgICAgVW5kZWZpbmVkLlxuICogYm9keS5jbGllbnRXaWR0aCAgIFdpZHRoIG9mIHZpZXdwb3J0IGV4Y2x1ZGluZyBzY3JvbGxiYXIuXG4gKlxuICogZG9jRWwuY2xpZW50SGVpZ2h0IDAuXG4gKiB3aW4uaW5uZXJIZWlnaHQgICAgVW5kZWZpbmVkLlxuICogYm9keS5jbGllbnRIZWlnaHQgIEhlaWdodCBvZiB2aWV3cG9ydCBleGNsdWRpbmcgc2Nyb2xsYmFyLlxuICpcbiAqIE9wZXJhIDkgU3RhbmRhcmRzIGFuZCBiYWNrd2FyZHMgY29tcGF0aWJsZSBtb2RlOlxuICogZG9jRWwuY2xpZW50V2lkdGggIFdpZHRoIG9mIHZpZXdwb3J0IGV4Y2x1ZGluZyBzY3JvbGxiYXIuXG4gKiB3aW4uaW5uZXJXaWR0aCAgICAgV2lkdGggb2Ygdmlld3BvcnQgaW5jbHVkaW5nIHNjcm9sbGJhci5cbiAqIGJvZHkuY2xpZW50V2lkdGggICBXaWR0aCBvZiB2aWV3cG9ydCBleGNsdWRpbmcgc2Nyb2xsYmFyLlxuICpcbiAqIGRvY0VsLmNsaWVudEhlaWdodCBIZWlnaHQgb2YgZG9jdW1lbnQuXG4gKiB3aW4uaW5uZXJIZWlnaHQgICAgSGVpZ2h0IG9mIHZpZXdwb3J0IGluY2x1ZGluZyBzY3JvbGxiYXIuXG4gKiBib2R5LmNsaWVudEhlaWdodCAgSGVpZ2h0IG9mIHZpZXdwb3J0IGV4Y2x1ZGluZyBzY3JvbGxiYXIuXG4gKlxuICogV2ViS2l0OlxuICogU2FmYXJpIDJcbiAqIGRvY0VsLmNsaWVudEhlaWdodCBTYW1lIGFzIHNjcm9sbEhlaWdodC5cbiAqIGRvY0VsLmNsaWVudFdpZHRoICBTYW1lIGFzIGlubmVyV2lkdGguXG4gKiB3aW4uaW5uZXJXaWR0aCAgICAgV2lkdGggb2Ygdmlld3BvcnQgZXhjbHVkaW5nIHNjcm9sbGJhci5cbiAqIHdpbi5pbm5lckhlaWdodCAgICBIZWlnaHQgb2YgdGhlIHZpZXdwb3J0IGluY2x1ZGluZyBzY3JvbGxiYXIuXG4gKiBmcmFtZS5pbm5lckhlaWdodCAgSGVpZ2h0IG9mIHRoZSB2aWV3cG9ydCBleGx1ZGluZyBzY3JvbGxiYXIuXG4gKlxuICogU2FmYXJpIDMgKHRlc3RlZCBpbiA1MjIpXG4gKlxuICogZG9jRWwuY2xpZW50V2lkdGggIFdpZHRoIG9mIHZpZXdwb3J0IGV4Y2x1ZGluZyBzY3JvbGxiYXIuXG4gKiBkb2NFbC5jbGllbnRIZWlnaHQgSGVpZ2h0IG9mIHZpZXdwb3J0IGV4Y2x1ZGluZyBzY3JvbGxiYXIgaW4gc3RyaWN0IG1vZGUuXG4gKiBib2R5LmNsaWVudEhlaWdodCAgSGVpZ2h0IG9mIHZpZXdwb3J0IGV4Y2x1ZGluZyBzY3JvbGxiYXIgaW4gcXVpcmtzIG1vZGUuXG4gKlxuICogQHBhcmFtIHtXaW5kb3c9fSBvcHRfd2luZG93IE9wdGlvbmFsIHdpbmRvdyBlbGVtZW50IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLlNpemV9IE9iamVjdCB3aXRoIHZhbHVlcyAnd2lkdGgnIGFuZCAnaGVpZ2h0Jy5cbiAqL1xuZ29vZy5kb20uZ2V0Vmlld3BvcnRTaXplID0gZnVuY3Rpb24ob3B0X3dpbmRvdykge1xuICAvLyBUT0RPKGFydik6IFRoaXMgc2hvdWxkIG5vdCB0YWtlIGFuIGFyZ3VtZW50XG4gIHJldHVybiBnb29nLmRvbS5nZXRWaWV3cG9ydFNpemVfKG9wdF93aW5kb3cgfHwgd2luZG93KTtcbn07XG5cblxuLyoqXG4gKiBIZWxwZXIgZm9yIHtAY29kZSBnZXRWaWV3cG9ydFNpemV9LlxuICogQHBhcmFtIHtXaW5kb3d9IHdpbiBUaGUgd2luZG93IHRvIGdldCB0aGUgdmlldyBwb3J0IHNpemUgZm9yLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5TaXplfSBPYmplY3Qgd2l0aCB2YWx1ZXMgJ3dpZHRoJyBhbmQgJ2hlaWdodCcuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmRvbS5nZXRWaWV3cG9ydFNpemVfID0gZnVuY3Rpb24od2luKSB7XG4gIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7XG4gIHZhciBlbCA9IGdvb2cuZG9tLmlzQ3NzMUNvbXBhdE1vZGVfKGRvYykgPyBkb2MuZG9jdW1lbnRFbGVtZW50IDogZG9jLmJvZHk7XG4gIHJldHVybiBuZXcgZ29vZy5tYXRoLlNpemUoZWwuY2xpZW50V2lkdGgsIGVsLmNsaWVudEhlaWdodCk7XG59O1xuXG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgaGVpZ2h0IG9mIHRoZSBkb2N1bWVudC5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBoZWlnaHQgb2YgdGhlIGN1cnJlbnQgZG9jdW1lbnQuXG4gKi9cbmdvb2cuZG9tLmdldERvY3VtZW50SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmRvbS5nZXREb2N1bWVudEhlaWdodF8od2luZG93KTtcbn07XG5cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBoZWlnaHQgb2YgdGhlIGRvY3VtZW50IG9mIHRoZSBnaXZlbiB3aW5kb3cuXG4gKlxuICogRnVuY3Rpb24gY29kZSBjb3BpZWQgZnJvbSB0aGUgb3BlbnNvY2lhbCBnYWRnZXQgYXBpOlxuICogICBnYWRnZXRzLndpbmRvdy5hZGp1c3RIZWlnaHQob3B0X2hlaWdodClcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHshV2luZG93fSB3aW4gVGhlIHdpbmRvdyB3aG9zZSBkb2N1bWVudCBoZWlnaHQgdG8gcmV0cmlldmUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBoZWlnaHQgb2YgdGhlIGRvY3VtZW50IG9mIHRoZSBnaXZlbiB3aW5kb3cuXG4gKi9cbmdvb2cuZG9tLmdldERvY3VtZW50SGVpZ2h0XyA9IGZ1bmN0aW9uKHdpbikge1xuICAvLyBOT1RFKGVhZSk6IFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSB3aW5kb3cgc2l6ZSByYXRoZXIgdGhhbiB0aGUgZG9jdW1lbnRcbiAgLy8gc2l6ZSBpbiB3ZWJraXQgcXVpcmtzIG1vZGUuXG4gIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7XG4gIHZhciBoZWlnaHQgPSAwO1xuXG4gIGlmIChkb2MpIHtcbiAgICAvLyBDYWxjdWxhdGluZyBpbm5lciBjb250ZW50IGhlaWdodCBpcyBoYXJkIGFuZCBkaWZmZXJlbnQgYmV0d2VlblxuICAgIC8vIGJyb3dzZXJzIHJlbmRlcmluZyBpbiBTdHJpY3QgdnMuIFF1aXJrcyBtb2RlLiAgV2UgdXNlIGEgY29tYmluYXRpb24gb2ZcbiAgICAvLyB0aHJlZSBwcm9wZXJ0aWVzIHdpdGhpbiBkb2N1bWVudC5ib2R5IGFuZCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ6XG4gICAgLy8gLSBzY3JvbGxIZWlnaHRcbiAgICAvLyAtIG9mZnNldEhlaWdodFxuICAgIC8vIC0gY2xpZW50SGVpZ2h0XG4gICAgLy8gVGhlc2UgdmFsdWVzIGRpZmZlciBzaWduaWZpY2FudGx5IGJldHdlZW4gYnJvd3NlcnMgYW5kIHJlbmRlcmluZyBtb2Rlcy5cbiAgICAvLyBCdXQgdGhlcmUgYXJlIHBhdHRlcm5zLiAgSXQganVzdCB0YWtlcyBhIGxvdCBvZiB0aW1lIGFuZCBwZXJzaXN0ZW5jZVxuICAgIC8vIHRvIGZpZ3VyZSBvdXQuXG5cbiAgICB2YXIgYm9keSA9IGRvYy5ib2R5O1xuICAgIHZhciBkb2NFbCA9IC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyAoZG9jLmRvY3VtZW50RWxlbWVudCk7XG4gICAgaWYgKCEoZG9jRWwgJiYgYm9keSkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8vIEdldCB0aGUgaGVpZ2h0IG9mIHRoZSB2aWV3cG9ydFxuICAgIHZhciB2aCA9IGdvb2cuZG9tLmdldFZpZXdwb3J0U2l6ZV8od2luKS5oZWlnaHQ7XG4gICAgaWYgKGdvb2cuZG9tLmlzQ3NzMUNvbXBhdE1vZGVfKGRvYykgJiYgZG9jRWwuc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICAvLyBJbiBTdHJpY3QgbW9kZTpcbiAgICAgIC8vIFRoZSBpbm5lciBjb250ZW50IGhlaWdodCBpcyBjb250YWluZWQgaW4gZWl0aGVyOlxuICAgICAgLy8gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodFxuICAgICAgLy8gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldEhlaWdodFxuICAgICAgLy8gQmFzZWQgb24gc3R1ZHlpbmcgdGhlIHZhbHVlcyBvdXRwdXQgYnkgZGlmZmVyZW50IGJyb3dzZXJzLFxuICAgICAgLy8gdXNlIHRoZSB2YWx1ZSB0aGF0J3MgTk9UIGVxdWFsIHRvIHRoZSB2aWV3cG9ydCBoZWlnaHQgZm91bmQgYWJvdmUuXG4gICAgICBoZWlnaHQgPSBkb2NFbC5zY3JvbGxIZWlnaHQgIT0gdmggP1xuICAgICAgICAgIGRvY0VsLnNjcm9sbEhlaWdodCA6IGRvY0VsLm9mZnNldEhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSW4gUXVpcmtzIG1vZGU6XG4gICAgICAvLyBkb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IGlzIGVxdWFsIHRvIGRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHRcbiAgICAgIC8vIGV4Y2VwdCBpbiBJRS4gIEluIG1vc3QgYnJvd3NlcnMsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCBjYW4gYmUgdXNlZFxuICAgICAgLy8gdG8gY2FsY3VsYXRlIHRoZSBpbm5lciBjb250ZW50IGhlaWdodC5cbiAgICAgIC8vIEhvd2V2ZXIsIGluIG90aGVyIGJyb3dzZXJzIChlLmcuIElFKSwgZG9jdW1lbnQuYm9keSBtdXN0IGJlIHVzZWRcbiAgICAgIC8vIGluc3RlYWQuICBIb3cgZG8gd2Uga25vdyB3aGljaCBvbmUgdG8gdXNlP1xuICAgICAgLy8gSWYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCBkb2VzIE5PVCBlcXVhbFxuICAgICAgLy8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldEhlaWdodCwgdGhlbiB1c2UgZG9jdW1lbnQuYm9keS5cbiAgICAgIHZhciBzaCA9IGRvY0VsLnNjcm9sbEhlaWdodDtcbiAgICAgIHZhciBvaCA9IGRvY0VsLm9mZnNldEhlaWdodDtcbiAgICAgIGlmIChkb2NFbC5jbGllbnRIZWlnaHQgIT0gb2gpIHtcbiAgICAgICAgc2ggPSBib2R5LnNjcm9sbEhlaWdodDtcbiAgICAgICAgb2ggPSBib2R5Lm9mZnNldEhlaWdodDtcbiAgICAgIH1cblxuICAgICAgLy8gRGV0ZWN0IHdoZXRoZXIgdGhlIGlubmVyIGNvbnRlbnQgaGVpZ2h0IGlzIGJpZ2dlciBvciBzbWFsbGVyXG4gICAgICAvLyB0aGFuIHRoZSBib3VuZGluZyBib3ggKHZpZXdwb3J0KS4gIElmIGJpZ2dlciwgdGFrZSB0aGUgbGFyZ2VyXG4gICAgICAvLyB2YWx1ZS4gIElmIHNtYWxsZXIsIHRha2UgdGhlIHNtYWxsZXIgdmFsdWUuXG4gICAgICBpZiAoc2ggPiB2aCkge1xuICAgICAgICAvLyBDb250ZW50IGlzIGxhcmdlclxuICAgICAgICBoZWlnaHQgPSBzaCA+IG9oID8gc2ggOiBvaDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIENvbnRlbnQgaXMgc21hbGxlclxuICAgICAgICBoZWlnaHQgPSBzaCA8IG9oID8gc2ggOiBvaDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gaGVpZ2h0O1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIHBhZ2Ugc2Nyb2xsIGRpc3RhbmNlIGFzIGEgY29vcmRpbmF0ZSBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtXaW5kb3c9fSBvcHRfd2luZG93IE9wdGlvbmFsIHdpbmRvdyBlbGVtZW50IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkNvb3JkaW5hdGV9IE9iamVjdCB3aXRoIHZhbHVlcyAneCcgYW5kICd5Jy5cbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgZ29vZy5kb20uZ2V0RG9jdW1lbnRTY3JvbGx9IGluc3RlYWQuXG4gKi9cbmdvb2cuZG9tLmdldFBhZ2VTY3JvbGwgPSBmdW5jdGlvbihvcHRfd2luZG93KSB7XG4gIHZhciB3aW4gPSBvcHRfd2luZG93IHx8IGdvb2cuZ2xvYmFsIHx8IHdpbmRvdztcbiAgcmV0dXJuIGdvb2cuZG9tLmdldERvbUhlbHBlcih3aW4uZG9jdW1lbnQpLmdldERvY3VtZW50U2Nyb2xsKCk7XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgZG9jdW1lbnQgc2Nyb2xsIGRpc3RhbmNlIGFzIGEgY29vcmRpbmF0ZSBvYmplY3QuXG4gKlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBPYmplY3Qgd2l0aCB2YWx1ZXMgJ3gnIGFuZCAneScuXG4gKi9cbmdvb2cuZG9tLmdldERvY3VtZW50U2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmRvbS5nZXREb2N1bWVudFNjcm9sbF8oZG9jdW1lbnQpO1xufTtcblxuXG4vKipcbiAqIEhlbHBlciBmb3Ige0Bjb2RlIGdldERvY3VtZW50U2Nyb2xsfS5cbiAqXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jIFRoZSBkb2N1bWVudCB0byBnZXQgdGhlIHNjcm9sbCBmb3IuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkNvb3JkaW5hdGV9IE9iamVjdCB3aXRoIHZhbHVlcyAneCcgYW5kICd5Jy5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZG9tLmdldERvY3VtZW50U2Nyb2xsXyA9IGZ1bmN0aW9uKGRvYykge1xuICB2YXIgZWwgPSBnb29nLmRvbS5nZXREb2N1bWVudFNjcm9sbEVsZW1lbnRfKGRvYyk7XG4gIHZhciB3aW4gPSBnb29nLmRvbS5nZXRXaW5kb3dfKGRvYyk7XG4gIGlmIChnb29nLnVzZXJBZ2VudC5JRSAmJiBnb29nLnVzZXJBZ2VudC5pc1ZlcnNpb25PckhpZ2hlcignMTAnKSAmJlxuICAgICAgd2luLnBhZ2VZT2Zmc2V0ICE9IGVsLnNjcm9sbFRvcCkge1xuICAgIC8vIFRoZSBrZXlib2FyZCBvbiBJRTEwIHRvdWNoIGRldmljZXMgc2hpZnRzIHRoZSBwYWdlIHVzaW5nIHRoZSBwYWdlWU9mZnNldFxuICAgIC8vIHdpdGhvdXQgbW9kaWZ5aW5nIHNjcm9sbFRvcC4gRm9yIHRoaXMgY2FzZSwgd2Ugd2FudCB0aGUgYm9keSBzY3JvbGxcbiAgICAvLyBvZmZzZXRzLlxuICAgIHJldHVybiBuZXcgZ29vZy5tYXRoLkNvb3JkaW5hdGUoZWwuc2Nyb2xsTGVmdCwgZWwuc2Nyb2xsVG9wKTtcbiAgfVxuICByZXR1cm4gbmV3IGdvb2cubWF0aC5Db29yZGluYXRlKHdpbi5wYWdlWE9mZnNldCB8fCBlbC5zY3JvbGxMZWZ0LFxuICAgICAgd2luLnBhZ2VZT2Zmc2V0IHx8IGVsLnNjcm9sbFRvcCk7XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgZG9jdW1lbnQgc2Nyb2xsIGVsZW1lbnQuXG4gKiBAcmV0dXJuIHshRWxlbWVudH0gU2Nyb2xsaW5nIGVsZW1lbnQuXG4gKi9cbmdvb2cuZG9tLmdldERvY3VtZW50U2Nyb2xsRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5kb20uZ2V0RG9jdW1lbnRTY3JvbGxFbGVtZW50Xyhkb2N1bWVudCk7XG59O1xuXG5cbi8qKlxuICogSGVscGVyIGZvciB7QGNvZGUgZ2V0RG9jdW1lbnRTY3JvbGxFbGVtZW50fS5cbiAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2MgVGhlIGRvY3VtZW50IHRvIGdldCB0aGUgc2Nyb2xsIGVsZW1lbnQgZm9yLlxuICogQHJldHVybiB7IUVsZW1lbnR9IFNjcm9sbGluZyBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kb20uZ2V0RG9jdW1lbnRTY3JvbGxFbGVtZW50XyA9IGZ1bmN0aW9uKGRvYykge1xuICAvLyBPbGQgV2ViS2l0IG5lZWRzIGJvZHkuc2Nyb2xsTGVmdCBpbiBib3RoIHF1aXJrcyBtb2RlIGFuZCBzdHJpY3QgbW9kZS4gV2VcbiAgLy8gYWxzbyBkZWZhdWx0IHRvIHRoZSBkb2N1bWVudEVsZW1lbnQgaWYgdGhlIGRvY3VtZW50IGRvZXMgbm90IGhhdmUgYSBib2R5XG4gIC8vIChlLmcuIGEgU1ZHIGRvY3VtZW50KS5cbiAgLy8gVXNlcyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS12aWV3LyNkb20tZG9jdW1lbnQtc2Nyb2xsaW5nZWxlbWVudCB0b1xuICAvLyBhdm9pZCB0cnlpbmcgdG8gZ3Vlc3MgYWJvdXQgYnJvd3NlciBiZWhhdmlvciBmcm9tIHRoZSBVQSBzdHJpbmcuXG4gIGlmIChkb2Muc2Nyb2xsaW5nRWxlbWVudCkge1xuICAgIHJldHVybiBkb2Muc2Nyb2xsaW5nRWxlbWVudDtcbiAgfVxuICBpZiAoIWdvb2cudXNlckFnZW50LldFQktJVCAmJiBnb29nLmRvbS5pc0NzczFDb21wYXRNb2RlXyhkb2MpKSB7XG4gICAgcmV0dXJuIGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGRvYy5ib2R5IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgd2luZG93IG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGRvY3VtZW50LlxuICpcbiAqIEBwYXJhbSB7RG9jdW1lbnQ9fSBvcHRfZG9jICBEb2N1bWVudCBvYmplY3QgdG8gZ2V0IHdpbmRvdyBmb3IuXG4gKiBAcmV0dXJuIHshV2luZG93fSBUaGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gZG9jdW1lbnQuXG4gKi9cbmdvb2cuZG9tLmdldFdpbmRvdyA9IGZ1bmN0aW9uKG9wdF9kb2MpIHtcbiAgLy8gVE9ETyhhcnYpOiBUaGlzIHNob3VsZCBub3QgdGFrZSBhbiBhcmd1bWVudC5cbiAgcmV0dXJuIG9wdF9kb2MgPyBnb29nLmRvbS5nZXRXaW5kb3dfKG9wdF9kb2MpIDogd2luZG93O1xufTtcblxuXG4vKipcbiAqIEhlbHBlciBmb3Ige0Bjb2RlIGdldFdpbmRvd30uXG4gKlxuICogQHBhcmFtIHshRG9jdW1lbnR9IGRvYyAgRG9jdW1lbnQgb2JqZWN0IHRvIGdldCB3aW5kb3cgZm9yLlxuICogQHJldHVybiB7IVdpbmRvd30gVGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGRvY3VtZW50LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kb20uZ2V0V2luZG93XyA9IGZ1bmN0aW9uKGRvYykge1xuICByZXR1cm4gZG9jLnBhcmVudFdpbmRvdyB8fCBkb2MuZGVmYXVsdFZpZXc7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhIGRvbSBub2RlIHdpdGggYSBzZXQgb2YgYXR0cmlidXRlcy4gIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyB2YXJhcmdzXG4gKiBmb3Igc3Vic2VxdWVudCBub2RlcyB0byBiZSBhZGRlZC4gIFN1YnNlcXVlbnQgbm9kZXMgd2lsbCBiZSBhZGRlZCB0byB0aGVcbiAqIGZpcnN0IG5vZGUgYXMgY2hpbGROb2Rlcy5cbiAqXG4gKiBTbzpcbiAqIDxjb2RlPmNyZWF0ZURvbSgnZGl2JywgbnVsbCwgY3JlYXRlRG9tKCdwJyksIGNyZWF0ZURvbSgncCcpKTs8L2NvZGU+XG4gKiB3b3VsZCByZXR1cm4gYSBkaXYgd2l0aCB0d28gY2hpbGQgcGFyYWdyYXBoc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lIFRhZyB0byBjcmVhdGUuXG4gKiBAcGFyYW0geyhPYmplY3R8QXJyYXk8c3RyaW5nPnxzdHJpbmcpPX0gb3B0X2F0dHJpYnV0ZXMgSWYgb2JqZWN0LCB0aGVuIGEgbWFwXG4gKiAgICAgb2YgbmFtZS12YWx1ZSBwYWlycyBmb3IgYXR0cmlidXRlcy4gSWYgYSBzdHJpbmcsIHRoZW4gdGhpcyBpcyB0aGVcbiAqICAgICBjbGFzc05hbWUgb2YgdGhlIG5ldyBlbGVtZW50LiBJZiBhbiBhcnJheSwgdGhlIGVsZW1lbnRzIHdpbGwgYmUgam9pbmVkXG4gKiAgICAgdG9nZXRoZXIgYXMgdGhlIGNsYXNzTmFtZSBvZiB0aGUgbmV3IGVsZW1lbnQuXG4gKiBAcGFyYW0gey4uLihPYmplY3R8c3RyaW5nfEFycmF5fE5vZGVMaXN0KX0gdmFyX2FyZ3MgRnVydGhlciBET00gbm9kZXMgb3JcbiAqICAgICBzdHJpbmdzIGZvciB0ZXh0IG5vZGVzLiBJZiBvbmUgb2YgdGhlIHZhcl9hcmdzIGlzIGFuIGFycmF5IG9yIE5vZGVMaXN0LFxuICogICAgIGl0cyBlbGVtZW50cyB3aWxsIGJlIGFkZGVkIGFzIGNoaWxkTm9kZXMgaW5zdGVhZC5cbiAqIEByZXR1cm4geyFFbGVtZW50fSBSZWZlcmVuY2UgdG8gYSBET00gbm9kZS5cbiAqL1xuZ29vZy5kb20uY3JlYXRlRG9tID0gZnVuY3Rpb24odGFnTmFtZSwgb3B0X2F0dHJpYnV0ZXMsIHZhcl9hcmdzKSB7XG4gIHJldHVybiBnb29nLmRvbS5jcmVhdGVEb21fKGRvY3VtZW50LCBhcmd1bWVudHMpO1xufTtcblxuXG4vKipcbiAqIEhlbHBlciBmb3Ige0Bjb2RlIGNyZWF0ZURvbX0uXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jIFRoZSBkb2N1bWVudCB0byBjcmVhdGUgdGhlIERPTSBpbi5cbiAqIEBwYXJhbSB7IUFyZ3VtZW50c30gYXJncyBBcmd1bWVudCBvYmplY3QgcGFzc2VkIGZyb20gdGhlIGNhbGxlcnMuIFNlZVxuICogICAgIHtAY29kZSBnb29nLmRvbS5jcmVhdGVEb219IGZvciBkZXRhaWxzLlxuICogQHJldHVybiB7IUVsZW1lbnR9IFJlZmVyZW5jZSB0byBhIERPTSBub2RlLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kb20uY3JlYXRlRG9tXyA9IGZ1bmN0aW9uKGRvYywgYXJncykge1xuICB2YXIgdGFnTmFtZSA9IGFyZ3NbMF07XG4gIHZhciBhdHRyaWJ1dGVzID0gYXJnc1sxXTtcblxuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBpcyBkdW1iOlxuICAvLyBuYW1lOiBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM0MTg0KHY9dnMuODUpLmFzcHhcbiAgLy8gdHlwZTogaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNDcwMCh2PXZzLjg1KS5hc3B4XG4gIC8vIEFsc28gZG9lcyBub3QgYWxsb3cgc2V0dGluZyBvZiAndHlwZScgYXR0cmlidXRlIG9uICdpbnB1dCcgb3IgJ2J1dHRvbicuXG4gIGlmICghZ29vZy5kb20uQnJvd3NlckZlYXR1cmUuQ0FOX0FERF9OQU1FX09SX1RZUEVfQVRUUklCVVRFUyAmJiBhdHRyaWJ1dGVzICYmXG4gICAgICAoYXR0cmlidXRlcy5uYW1lIHx8IGF0dHJpYnV0ZXMudHlwZSkpIHtcbiAgICB2YXIgdGFnTmFtZUFyciA9IFsnPCcsIHRhZ05hbWVdO1xuICAgIGlmIChhdHRyaWJ1dGVzLm5hbWUpIHtcbiAgICAgIHRhZ05hbWVBcnIucHVzaCgnIG5hbWU9XCInLCBnb29nLnN0cmluZy5odG1sRXNjYXBlKGF0dHJpYnV0ZXMubmFtZSksICdcIicpO1xuICAgIH1cbiAgICBpZiAoYXR0cmlidXRlcy50eXBlKSB7XG4gICAgICB0YWdOYW1lQXJyLnB1c2goJyB0eXBlPVwiJywgZ29vZy5zdHJpbmcuaHRtbEVzY2FwZShhdHRyaWJ1dGVzLnR5cGUpLCAnXCInKTtcblxuICAgICAgLy8gQ2xvbmUgYXR0cmlidXRlcyBtYXAgdG8gcmVtb3ZlICd0eXBlJyB3aXRob3V0IG11dGF0aW5nIHRoZSBpbnB1dC5cbiAgICAgIHZhciBjbG9uZSA9IHt9O1xuICAgICAgZ29vZy5vYmplY3QuZXh0ZW5kKGNsb25lLCBhdHRyaWJ1dGVzKTtcblxuICAgICAgLy8gSlNDb21waWxlciBjYW4ndCBzZWUgaG93IGdvb2cub2JqZWN0LmV4dGVuZCBhZGRlZCB0aGlzIHByb3BlcnR5LFxuICAgICAgLy8gYmVjYXVzZSBpdCB3YXMgZXNzZW50aWFsbHkgYWRkZWQgYnkgcmVmbGVjdGlvbi5cbiAgICAgIC8vIFNvIGl0IG5lZWRzIHRvIGJlIHF1b3RlZC5cbiAgICAgIGRlbGV0ZSBjbG9uZVsndHlwZSddO1xuXG4gICAgICBhdHRyaWJ1dGVzID0gY2xvbmU7XG4gICAgfVxuICAgIHRhZ05hbWVBcnIucHVzaCgnPicpO1xuICAgIHRhZ05hbWUgPSB0YWdOYW1lQXJyLmpvaW4oJycpO1xuICB9XG5cbiAgdmFyIGVsZW1lbnQgPSBkb2MuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcblxuICBpZiAoYXR0cmlidXRlcykge1xuICAgIGlmIChnb29nLmlzU3RyaW5nKGF0dHJpYnV0ZXMpKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGF0dHJpYnV0ZXM7XG4gICAgfSBlbHNlIGlmIChnb29nLmlzQXJyYXkoYXR0cmlidXRlcykpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gYXR0cmlidXRlcy5qb2luKCcgJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdvb2cuZG9tLnNldFByb3BlcnRpZXMoZWxlbWVudCwgYXR0cmlidXRlcyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID4gMikge1xuICAgIGdvb2cuZG9tLmFwcGVuZF8oZG9jLCBlbGVtZW50LCBhcmdzLCAyKTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuXG4vKipcbiAqIEFwcGVuZHMgYSBub2RlIHdpdGggdGV4dCBvciBvdGhlciBub2Rlcy5cbiAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2MgVGhlIGRvY3VtZW50IHRvIGNyZWF0ZSBuZXcgbm9kZXMgaW4uXG4gKiBAcGFyYW0geyFOb2RlfSBwYXJlbnQgVGhlIG5vZGUgdG8gYXBwZW5kIG5vZGVzIHRvLlxuICogQHBhcmFtIHshQXJndW1lbnRzfSBhcmdzIFRoZSB2YWx1ZXMgdG8gYWRkLiBTZWUge0Bjb2RlIGdvb2cuZG9tLmFwcGVuZH0uXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRJbmRleCBUaGUgaW5kZXggb2YgdGhlIGFycmF5IHRvIHN0YXJ0IGZyb20uXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmRvbS5hcHBlbmRfID0gZnVuY3Rpb24oZG9jLCBwYXJlbnQsIGFyZ3MsIHN0YXJ0SW5kZXgpIHtcbiAgZnVuY3Rpb24gY2hpbGRIYW5kbGVyKGNoaWxkKSB7XG4gICAgLy8gVE9ETyh1c2VyKTogTW9yZSBjb2VyY2lvbiwgYWxhIE1vY2hpS2l0P1xuICAgIGlmIChjaGlsZCkge1xuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGdvb2cuaXNTdHJpbmcoY2hpbGQpID9cbiAgICAgICAgICBkb2MuY3JlYXRlVGV4dE5vZGUoY2hpbGQpIDogY2hpbGQpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSBzdGFydEluZGV4OyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhcmcgPSBhcmdzW2ldO1xuICAgIC8vIFRPRE8oYXR0aWxhKTogRml4IGlzQXJyYXlMaWtlIHRvIHJldHVybiBmYWxzZSBmb3IgYSB0ZXh0IG5vZGUuXG4gICAgaWYgKGdvb2cuaXNBcnJheUxpa2UoYXJnKSAmJiAhZ29vZy5kb20uaXNOb2RlTGlrZShhcmcpKSB7XG4gICAgICAvLyBJZiB0aGUgYXJndW1lbnQgaXMgYSBub2RlIGxpc3QsIG5vdCBhIHJlYWwgYXJyYXksIHVzZSBhIGNsb25lLFxuICAgICAgLy8gYmVjYXVzZSBmb3JFYWNoIGNhbid0IGJlIHVzZWQgdG8gbXV0YXRlIGEgTm9kZUxpc3QuXG4gICAgICBnb29nLmFycmF5LmZvckVhY2goZ29vZy5kb20uaXNOb2RlTGlzdChhcmcpID9cbiAgICAgICAgICBnb29nLmFycmF5LnRvQXJyYXkoYXJnKSA6IGFyZyxcbiAgICAgICAgICBjaGlsZEhhbmRsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZEhhbmRsZXIoYXJnKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBBbGlhcyBmb3Ige0Bjb2RlIGNyZWF0ZURvbX0uXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSBUYWcgdG8gY3JlYXRlLlxuICogQHBhcmFtIHsoc3RyaW5nfE9iamVjdCk9fSBvcHRfYXR0cmlidXRlcyBJZiBvYmplY3QsIHRoZW4gYSBtYXAgb2YgbmFtZS12YWx1ZVxuICogICAgIHBhaXJzIGZvciBhdHRyaWJ1dGVzLiBJZiBhIHN0cmluZywgdGhlbiB0aGlzIGlzIHRoZSBjbGFzc05hbWUgb2YgdGhlIG5ld1xuICogICAgIGVsZW1lbnQuXG4gKiBAcGFyYW0gey4uLihPYmplY3R8c3RyaW5nfEFycmF5fE5vZGVMaXN0KX0gdmFyX2FyZ3MgRnVydGhlciBET00gbm9kZXMgb3JcbiAqICAgICBzdHJpbmdzIGZvciB0ZXh0IG5vZGVzLiBJZiBvbmUgb2YgdGhlIHZhcl9hcmdzIGlzIGFuIGFycmF5LCBpdHNcbiAqICAgICBjaGlsZHJlbiB3aWxsIGJlIGFkZGVkIGFzIGNoaWxkTm9kZXMgaW5zdGVhZC5cbiAqIEByZXR1cm4geyFFbGVtZW50fSBSZWZlcmVuY2UgdG8gYSBET00gbm9kZS5cbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgZ29vZy5kb20uY3JlYXRlRG9tfSBpbnN0ZWFkLlxuICovXG5nb29nLmRvbS4kZG9tID0gZ29vZy5kb20uY3JlYXRlRG9tO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBlbGVtZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGFnIG5hbWUuXG4gKiBAcmV0dXJuIHshRWxlbWVudH0gVGhlIG5ldyBlbGVtZW50LlxuICovXG5nb29nLmRvbS5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRleHQgbm9kZS5cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gY29udGVudCBDb250ZW50LlxuICogQHJldHVybiB7IVRleHR9IFRoZSBuZXcgdGV4dCBub2RlLlxuICovXG5nb29nLmRvbS5jcmVhdGVUZXh0Tm9kZSA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb250ZW50KSk7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlIGEgdGFibGUuXG4gKiBAcGFyYW0ge251bWJlcn0gcm93cyBUaGUgbnVtYmVyIG9mIHJvd3MgaW4gdGhlIHRhYmxlLiAgTXVzdCBiZSA+PSAxLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbnMgVGhlIG51bWJlciBvZiBjb2x1bW5zIGluIHRoZSB0YWJsZS4gIE11c3QgYmUgPj0gMS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9maWxsV2l0aE5ic3AgSWYgdHJ1ZSwgZmlsbHMgdGFibGUgZW50cmllcyB3aXRoXG4gKiAgICAge0Bjb2RlIGdvb2cuc3RyaW5nLlVuaWNvZGUuTkJTUH0gY2hhcmFjdGVycy5cbiAqIEByZXR1cm4geyFFbGVtZW50fSBUaGUgY3JlYXRlZCB0YWJsZS5cbiAqL1xuZ29vZy5kb20uY3JlYXRlVGFibGUgPSBmdW5jdGlvbihyb3dzLCBjb2x1bW5zLCBvcHRfZmlsbFdpdGhOYnNwKSB7XG4gIC8vIFRPRE8odXNlcik6IFJldHVybiBIVE1MVGFibGVFbGVtZW50LCBhbHNvIGluIHByb3RvdHlwZSBmdW5jdGlvbi5cbiAgLy8gQ2FsbGVycyBuZWVkIHRvIGJlIHVwZGF0ZWQgdG8gZS5nLiBub3QgYXNzaWduIG51bWJlcnMgdG8gdGFibGUuY2VsbFNwYWNpbmcuXG4gIHJldHVybiBnb29nLmRvbS5jcmVhdGVUYWJsZV8oZG9jdW1lbnQsIHJvd3MsIGNvbHVtbnMsICEhb3B0X2ZpbGxXaXRoTmJzcCk7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlIGEgdGFibGUuXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jIERvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gY3JlYXRlIHRoZSB0YWJsZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSByb3dzIFRoZSBudW1iZXIgb2Ygcm93cyBpbiB0aGUgdGFibGUuICBNdXN0IGJlID49IDEuXG4gKiBAcGFyYW0ge251bWJlcn0gY29sdW1ucyBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgaW4gdGhlIHRhYmxlLiAgTXVzdCBiZSA+PSAxLlxuICogQHBhcmFtIHtib29sZWFufSBmaWxsV2l0aE5ic3AgSWYgdHJ1ZSwgZmlsbHMgdGFibGUgZW50cmllcyB3aXRoXG4gKiAgICAge0Bjb2RlIGdvb2cuc3RyaW5nLlVuaWNvZGUuTkJTUH0gY2hhcmFjdGVycy5cbiAqIEByZXR1cm4geyFIVE1MVGFibGVFbGVtZW50fSBUaGUgY3JlYXRlZCB0YWJsZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZG9tLmNyZWF0ZVRhYmxlXyA9IGZ1bmN0aW9uKGRvYywgcm93cywgY29sdW1ucywgZmlsbFdpdGhOYnNwKSB7XG4gIHZhciB0YWJsZSA9IC8qKiBAdHlwZSB7IUhUTUxUYWJsZUVsZW1lbnR9ICovXG4gICAgICAoZG9jLmNyZWF0ZUVsZW1lbnQoZ29vZy5kb20uVGFnTmFtZS5UQUJMRSkpO1xuICB2YXIgdGJvZHkgPSB0YWJsZS5hcHBlbmRDaGlsZChkb2MuY3JlYXRlRWxlbWVudChnb29nLmRvbS5UYWdOYW1lLlRCT0RZKSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgdmFyIHRyID0gZG9jLmNyZWF0ZUVsZW1lbnQoZ29vZy5kb20uVGFnTmFtZS5UUik7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcbiAgICAgIHZhciB0ZCA9IGRvYy5jcmVhdGVFbGVtZW50KGdvb2cuZG9tLlRhZ05hbWUuVEQpO1xuICAgICAgLy8gSUUgPD0gOSB3aWxsIGNyZWF0ZSBhIHRleHQgbm9kZSBpZiB3ZSBzZXQgdGV4dCBjb250ZW50IHRvIHRoZSBlbXB0eVxuICAgICAgLy8gc3RyaW5nLCBzbyB3ZSBhdm9pZCBkb2luZyBpdCB1bmxlc3MgbmVjZXNzYXJ5LiBUaGlzIGVuc3VyZXMgdGhhdCB0aGVcbiAgICAgIC8vIHNhbWUgRE9NIHRyZWUgaXMgcmV0dXJuZWQgb24gYWxsIGJyb3dzZXJzLlxuICAgICAgaWYgKGZpbGxXaXRoTmJzcCkge1xuICAgICAgICBnb29nLmRvbS5zZXRUZXh0Q29udGVudCh0ZCwgZ29vZy5zdHJpbmcuVW5pY29kZS5OQlNQKTtcbiAgICAgIH1cbiAgICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcbiAgICB9XG4gICAgdGJvZHkuYXBwZW5kQ2hpbGQodHIpO1xuICB9XG4gIHJldHVybiB0YWJsZTtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBIVE1MIG1hcmt1cCBpbnRvIGEgbm9kZS5cbiAqIEBwYXJhbSB7IWdvb2cuaHRtbC5TYWZlSHRtbH0gaHRtbCBUaGUgSFRNTCBtYXJrdXAgdG8gY29udmVydC5cbiAqIEByZXR1cm4geyFOb2RlfSBUaGUgcmVzdWx0aW5nIG5vZGUuXG4gKi9cbmdvb2cuZG9tLnNhZmVIdG1sVG9Ob2RlID0gZnVuY3Rpb24oaHRtbCkge1xuICByZXR1cm4gZ29vZy5kb20uc2FmZUh0bWxUb05vZGVfKGRvY3VtZW50LCBodG1sKTtcbn07XG5cblxuLyoqXG4gKiBIZWxwZXIgZm9yIHtAY29kZSBzYWZlSHRtbFRvTm9kZX0uXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jIFRoZSBkb2N1bWVudC5cbiAqIEBwYXJhbSB7IWdvb2cuaHRtbC5TYWZlSHRtbH0gaHRtbCBUaGUgSFRNTCBtYXJrdXAgdG8gY29udmVydC5cbiAqIEByZXR1cm4geyFOb2RlfSBUaGUgcmVzdWx0aW5nIG5vZGUuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmRvbS5zYWZlSHRtbFRvTm9kZV8gPSBmdW5jdGlvbihkb2MsIGh0bWwpIHtcbiAgdmFyIHRlbXBEaXYgPSBkb2MuY3JlYXRlRWxlbWVudChnb29nLmRvbS5UYWdOYW1lLkRJVik7XG4gIGlmIChnb29nLmRvbS5Ccm93c2VyRmVhdHVyZS5JTk5FUl9IVE1MX05FRURTX1NDT1BFRF9FTEVNRU5UKSB7XG4gICAgZ29vZy5kb20uc2FmZS5zZXRJbm5lckh0bWwodGVtcERpdixcbiAgICAgICAgZ29vZy5odG1sLlNhZmVIdG1sLmNvbmNhdChnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlKCdicicpLCBodG1sKSk7XG4gICAgdGVtcERpdi5yZW1vdmVDaGlsZCh0ZW1wRGl2LmZpcnN0Q2hpbGQpO1xuICB9IGVsc2Uge1xuICAgIGdvb2cuZG9tLnNhZmUuc2V0SW5uZXJIdG1sKHRlbXBEaXYsIGh0bWwpO1xuICB9XG4gIHJldHVybiBnb29nLmRvbS5jaGlsZHJlblRvTm9kZV8oZG9jLCB0ZW1wRGl2KTtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBIVE1MIHN0cmluZyBpbnRvIGEgZG9jdW1lbnQgZnJhZ21lbnQuIFRoZSBzdHJpbmcgbXVzdCBiZVxuICogc2FuaXRpemVkIGluIG9yZGVyIHRvIGF2b2lkIGNyb3NzLXNpdGUgc2NyaXB0aW5nLiBGb3IgZXhhbXBsZVxuICoge0Bjb2RlIGdvb2cuZG9tLmh0bWxUb0RvY3VtZW50RnJhZ21lbnQoJyZsdDtpbWcgc3JjPXggb25lcnJvcj1hbGVydCgwKSZndDsnKX1cbiAqIHRyaWdnZXJzIGFuIGFsZXJ0IGluIGFsbCBicm93c2VycywgZXZlbiBpZiB0aGUgcmV0dXJuZWQgZG9jdW1lbnQgZnJhZ21lbnRcbiAqIGlzIHRocm93biBhd2F5IGltbWVkaWF0ZWx5LlxuICpcbiAqIE5PVEU6IFRoaXMgbWV0aG9kIGRvZXNuJ3Qgd29yayBpZiB5b3VyIGh0bWxTdHJpbmcgY29udGFpbnMgZWxlbWVudHMgdGhhdFxuICogY2FuJ3QgYmUgY29udGFpbmVkIGluIGEgPGRpdj4uIEZvciBleGFtcGxlLCA8dHI+LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sU3RyaW5nIFRoZSBIVE1MIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybiB7IU5vZGV9IFRoZSByZXN1bHRpbmcgZG9jdW1lbnQgZnJhZ21lbnQuXG4gKi9cbmdvb2cuZG9tLmh0bWxUb0RvY3VtZW50RnJhZ21lbnQgPSBmdW5jdGlvbihodG1sU3RyaW5nKSB7XG4gIHJldHVybiBnb29nLmRvbS5odG1sVG9Eb2N1bWVudEZyYWdtZW50Xyhkb2N1bWVudCwgaHRtbFN0cmluZyk7XG59O1xuXG5cbi8vIFRPRE8oamFrdWJ2cmFuYSk6IE1lcmdlIHdpdGgge0Bjb2RlIHNhZmVIdG1sVG9Ob2RlX30uXG4vKipcbiAqIEhlbHBlciBmb3Ige0Bjb2RlIGh0bWxUb0RvY3VtZW50RnJhZ21lbnR9LlxuICpcbiAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2MgVGhlIGRvY3VtZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxTdHJpbmcgVGhlIEhUTUwgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJuIHshTm9kZX0gVGhlIHJlc3VsdGluZyBkb2N1bWVudCBmcmFnbWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZG9tLmh0bWxUb0RvY3VtZW50RnJhZ21lbnRfID0gZnVuY3Rpb24oZG9jLCBodG1sU3RyaW5nKSB7XG4gIHZhciB0ZW1wRGl2ID0gZG9jLmNyZWF0ZUVsZW1lbnQoZ29vZy5kb20uVGFnTmFtZS5ESVYpO1xuICBpZiAoZ29vZy5kb20uQnJvd3NlckZlYXR1cmUuSU5ORVJfSFRNTF9ORUVEU19TQ09QRURfRUxFTUVOVCkge1xuICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gJzxicj4nICsgaHRtbFN0cmluZztcbiAgICB0ZW1wRGl2LnJlbW92ZUNoaWxkKHRlbXBEaXYuZmlyc3RDaGlsZCk7XG4gIH0gZWxzZSB7XG4gICAgdGVtcERpdi5pbm5lckhUTUwgPSBodG1sU3RyaW5nO1xuICB9XG4gIHJldHVybiBnb29nLmRvbS5jaGlsZHJlblRvTm9kZV8oZG9jLCB0ZW1wRGl2KTtcbn07XG5cblxuLyoqXG4gKiBIZWxwZXIgZm9yIHtAY29kZSBodG1sVG9Eb2N1bWVudEZyYWdtZW50X30uXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jIFRoZSBkb2N1bWVudC5cbiAqIEBwYXJhbSB7IU5vZGV9IHRlbXBEaXYgVGhlIGlucHV0IG5vZGUuXG4gKiBAcmV0dXJuIHshTm9kZX0gVGhlIHJlc3VsdGluZyBub2RlLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kb20uY2hpbGRyZW5Ub05vZGVfID0gZnVuY3Rpb24oZG9jLCB0ZW1wRGl2KSB7XG4gIGlmICh0ZW1wRGl2LmNoaWxkTm9kZXMubGVuZ3RoID09IDEpIHtcbiAgICByZXR1cm4gdGVtcERpdi5yZW1vdmVDaGlsZCh0ZW1wRGl2LmZpcnN0Q2hpbGQpO1xuICB9IGVsc2Uge1xuICAgIHZhciBmcmFnbWVudCA9IGRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgd2hpbGUgKHRlbXBEaXYuZmlyc3RDaGlsZCkge1xuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQodGVtcERpdi5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIGZyYWdtZW50O1xuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBicm93c2VyIGlzIGluIFwiQ1NTMS1jb21wYXRpYmxlXCIgKHN0YW5kYXJkcy1jb21wbGlhbnQpXG4gKiBtb2RlLCBmYWxzZSBvdGhlcndpc2UuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGluIENTUzEtY29tcGF0aWJsZSBtb2RlLlxuICovXG5nb29nLmRvbS5pc0NzczFDb21wYXRNb2RlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmRvbS5pc0NzczFDb21wYXRNb2RlXyhkb2N1bWVudCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBicm93c2VyIGlzIGluIFwiQ1NTMS1jb21wYXRpYmxlXCIgKHN0YW5kYXJkcy1jb21wbGlhbnQpXG4gKiBtb2RlLCBmYWxzZSBvdGhlcndpc2UuXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jIFRoZSBkb2N1bWVudCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgaW4gQ1NTMS1jb21wYXRpYmxlIG1vZGUuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmRvbS5pc0NzczFDb21wYXRNb2RlXyA9IGZ1bmN0aW9uKGRvYykge1xuICBpZiAoZ29vZy5kb20uQ09NUEFUX01PREVfS05PV05fKSB7XG4gICAgcmV0dXJuIGdvb2cuZG9tLkFTU1VNRV9TVEFOREFSRFNfTU9ERTtcbiAgfVxuXG4gIHJldHVybiBkb2MuY29tcGF0TW9kZSA9PSAnQ1NTMUNvbXBhdCc7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gbm9kZSBjYW4gY29udGFpbiBjaGlsZHJlbiwgaW50ZW5kZWQgdG8gYmUgdXNlZCBmb3JcbiAqIEhUTUwgZ2VuZXJhdGlvbi5cbiAqXG4gKiBJRSBuYXRpdmVseSBzdXBwb3J0cyBub2RlLmNhbkhhdmVDaGlsZHJlbiBidXQgaGFzIGluY29uc2lzdGVudCBiZWhhdmlvci5cbiAqIFByaW9yIHRvIElFOCB0aGUgYmFzZSB0YWcgYWxsb3dzIGNoaWxkcmVuIGFuZCBpbiBJRTkgYWxsIG5vZGVzIHJldHVybiB0cnVlXG4gKiBmb3IgY2FuSGF2ZUNoaWxkcmVuLlxuICpcbiAqIEluIHByYWN0aWNlIGFsbCBub24tSUUgYnJvd3NlcnMgYWxsb3cgeW91IHRvIGFkZCBjaGlsZHJlbiB0byBhbnkgbm9kZSwgYnV0XG4gKiB0aGUgYmVoYXZpb3IgaXMgaW5jb25zaXN0ZW50OlxuICpcbiAqIDxwcmU+XG4gKiAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChnb29nLmRvbS5UYWdOYW1lLkJSKTtcbiAqICAgYS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnZm9vJykpO1xuICogICBhLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdiYXInKSk7XG4gKiAgIGNvbnNvbGUubG9nKGEuY2hpbGROb2Rlcy5sZW5ndGgpOyAgLy8gMlxuICogICBjb25zb2xlLmxvZyhhLmlubmVySFRNTCk7ICAvLyBDaHJvbWU6IFwiXCIsIElFOTogXCJmb29iYXJcIiwgRkYzLjU6IFwiZm9vYmFyXCJcbiAqIDwvcHJlPlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6XG4gKiBodHRwOi8vZGV2LnczLm9yZy9odG1sNS9tYXJrdXAvc3ludGF4Lmh0bWwjc3ludGF4LWVsZW1lbnRzXG4gKlxuICogVE9ETyh1c2VyKTogUmVuYW1lIHNob3VsZEFsbG93Q2hpbGRyZW4oKSA/XG4gKlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgbm9kZSBjYW4gY29udGFpbiBjaGlsZHJlbi5cbiAqL1xuZ29vZy5kb20uY2FuSGF2ZUNoaWxkcmVuID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAobm9kZS5ub2RlVHlwZSAhPSBnb29nLmRvbS5Ob2RlVHlwZS5FTEVNRU5UKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN3aXRjaCAoLyoqIEB0eXBlIHshRWxlbWVudH0gKi8gKG5vZGUpLnRhZ05hbWUpIHtcbiAgICBjYXNlIGdvb2cuZG9tLlRhZ05hbWUuQVBQTEVUOlxuICAgIGNhc2UgZ29vZy5kb20uVGFnTmFtZS5BUkVBOlxuICAgIGNhc2UgZ29vZy5kb20uVGFnTmFtZS5CQVNFOlxuICAgIGNhc2UgZ29vZy5kb20uVGFnTmFtZS5CUjpcbiAgICBjYXNlIGdvb2cuZG9tLlRhZ05hbWUuQ09MOlxuICAgIGNhc2UgZ29vZy5kb20uVGFnTmFtZS5DT01NQU5EOlxuICAgIGNhc2UgZ29vZy5kb20uVGFnTmFtZS5FTUJFRDpcbiAgICBjYXNlIGdvb2cuZG9tLlRhZ05hbWUuRlJBTUU6XG4gICAgY2FzZSBnb29nLmRvbS5UYWdOYW1lLkhSOlxuICAgIGNhc2UgZ29vZy5kb20uVGFnTmFtZS5JTUc6XG4gICAgY2FzZSBnb29nLmRvbS5UYWdOYW1lLklOUFVUOlxuICAgIGNhc2UgZ29vZy5kb20uVGFnTmFtZS5JRlJBTUU6XG4gICAgY2FzZSBnb29nLmRvbS5UYWdOYW1lLklTSU5ERVg6XG4gICAgY2FzZSBnb29nLmRvbS5UYWdOYW1lLktFWUdFTjpcbiAgICBjYXNlIGdvb2cuZG9tLlRhZ05hbWUuTElOSzpcbiAgICBjYXNlIGdvb2cuZG9tLlRhZ05hbWUuTk9GUkFNRVM6XG4gICAgY2FzZSBnb29nLmRvbS5UYWdOYW1lLk5PU0NSSVBUOlxuICAgIGNhc2UgZ29vZy5kb20uVGFnTmFtZS5NRVRBOlxuICAgIGNhc2UgZ29vZy5kb20uVGFnTmFtZS5PQkpFQ1Q6XG4gICAgY2FzZSBnb29nLmRvbS5UYWdOYW1lLlBBUkFNOlxuICAgIGNhc2UgZ29vZy5kb20uVGFnTmFtZS5TQ1JJUFQ6XG4gICAgY2FzZSBnb29nLmRvbS5UYWdOYW1lLlNPVVJDRTpcbiAgICBjYXNlIGdvb2cuZG9tLlRhZ05hbWUuU1RZTEU6XG4gICAgY2FzZSBnb29nLmRvbS5UYWdOYW1lLlRSQUNLOlxuICAgIGNhc2UgZ29vZy5kb20uVGFnTmFtZS5XQlI6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKlxuICogQXBwZW5kcyBhIGNoaWxkIHRvIGEgbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50IFBhcmVudC5cbiAqIEBwYXJhbSB7Tm9kZX0gY2hpbGQgQ2hpbGQuXG4gKi9cbmdvb2cuZG9tLmFwcGVuZENoaWxkID0gZnVuY3Rpb24ocGFyZW50LCBjaGlsZCkge1xuICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufTtcblxuXG4vKipcbiAqIEFwcGVuZHMgYSBub2RlIHdpdGggdGV4dCBvciBvdGhlciBub2Rlcy5cbiAqIEBwYXJhbSB7IU5vZGV9IHBhcmVudCBUaGUgbm9kZSB0byBhcHBlbmQgbm9kZXMgdG8uXG4gKiBAcGFyYW0gey4uLmdvb2cuZG9tLkFwcGVuZGFibGV9IHZhcl9hcmdzIFRoZSB0aGluZ3MgdG8gYXBwZW5kIHRvIHRoZSBub2RlLlxuICogICAgIElmIHRoaXMgaXMgYSBOb2RlIGl0IGlzIGFwcGVuZGVkIGFzIGlzLlxuICogICAgIElmIHRoaXMgaXMgYSBzdHJpbmcgdGhlbiBhIHRleHQgbm9kZSBpcyBhcHBlbmRlZC5cbiAqICAgICBJZiB0aGlzIGlzIGFuIGFycmF5IGxpa2Ugb2JqZWN0IHRoZW4gZmllbGRzIDAgdG8gbGVuZ3RoIC0gMSBhcmUgYXBwZW5kZWQuXG4gKi9cbmdvb2cuZG9tLmFwcGVuZCA9IGZ1bmN0aW9uKHBhcmVudCwgdmFyX2FyZ3MpIHtcbiAgZ29vZy5kb20uYXBwZW5kXyhnb29nLmRvbS5nZXRPd25lckRvY3VtZW50KHBhcmVudCksIHBhcmVudCwgYXJndW1lbnRzLCAxKTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCB0aGUgY2hpbGQgbm9kZXMgb24gYSBET00gbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRvIHJlbW92ZSBjaGlsZHJlbiBmcm9tLlxuICovXG5nb29nLmRvbS5yZW1vdmVDaGlsZHJlbiA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgLy8gTm90ZTogSXRlcmF0aW9ucyBvdmVyIGxpdmUgY29sbGVjdGlvbnMgY2FuIGJlIHNsb3csIHRoaXMgaXMgdGhlIGZhc3Rlc3RcbiAgLy8gd2UgY291bGQgZmluZC4gVGhlIGRvdWJsZSBwYXJlbnRoZXNpcyBhcmUgdXNlZCB0byBwcmV2ZW50IEpzQ29tcGlsZXIgYW5kXG4gIC8vIHN0cmljdCB3YXJuaW5ncy5cbiAgdmFyIGNoaWxkO1xuICB3aGlsZSAoKGNoaWxkID0gbm9kZS5maXJzdENoaWxkKSkge1xuICAgIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICB9XG59O1xuXG5cbi8qKlxuICogSW5zZXJ0cyBhIG5ldyBub2RlIGJlZm9yZSBhbiBleGlzdGluZyByZWZlcmVuY2Ugbm9kZSAoaS5lLiBhcyB0aGUgcHJldmlvdXNcbiAqIHNpYmxpbmcpLiBJZiB0aGUgcmVmZXJlbmNlIG5vZGUgaGFzIG5vIHBhcmVudCwgdGhlbiBkb2VzIG5vdGhpbmcuXG4gKiBAcGFyYW0ge05vZGV9IG5ld05vZGUgTm9kZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge05vZGV9IHJlZk5vZGUgUmVmZXJlbmNlIG5vZGUgdG8gaW5zZXJ0IGJlZm9yZS5cbiAqL1xuZ29vZy5kb20uaW5zZXJ0U2libGluZ0JlZm9yZSA9IGZ1bmN0aW9uKG5ld05vZGUsIHJlZk5vZGUpIHtcbiAgaWYgKHJlZk5vZGUucGFyZW50Tm9kZSkge1xuICAgIHJlZk5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmTm9kZSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBJbnNlcnRzIGEgbmV3IG5vZGUgYWZ0ZXIgYW4gZXhpc3RpbmcgcmVmZXJlbmNlIG5vZGUgKGkuZS4gYXMgdGhlIG5leHRcbiAqIHNpYmxpbmcpLiBJZiB0aGUgcmVmZXJlbmNlIG5vZGUgaGFzIG5vIHBhcmVudCwgdGhlbiBkb2VzIG5vdGhpbmcuXG4gKiBAcGFyYW0ge05vZGV9IG5ld05vZGUgTm9kZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge05vZGV9IHJlZk5vZGUgUmVmZXJlbmNlIG5vZGUgdG8gaW5zZXJ0IGFmdGVyLlxuICovXG5nb29nLmRvbS5pbnNlcnRTaWJsaW5nQWZ0ZXIgPSBmdW5jdGlvbihuZXdOb2RlLCByZWZOb2RlKSB7XG4gIGlmIChyZWZOb2RlLnBhcmVudE5vZGUpIHtcbiAgICByZWZOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZk5vZGUubmV4dFNpYmxpbmcpO1xuICB9XG59O1xuXG5cbi8qKlxuICogSW5zZXJ0IGEgY2hpbGQgYXQgYSBnaXZlbiBpbmRleC4gSWYgaW5kZXggaXMgbGFyZ2VyIHRoYW4gdGhlIG51bWJlciBvZiBjaGlsZFxuICogbm9kZXMgdGhhdCB0aGUgcGFyZW50IGN1cnJlbnRseSBoYXMsIHRoZSBub2RlIGlzIGluc2VydGVkIGFzIHRoZSBsYXN0IGNoaWxkXG4gKiBub2RlLlxuICogQHBhcmFtIHtFbGVtZW50fSBwYXJlbnQgVGhlIGVsZW1lbnQgaW50byB3aGljaCB0byBpbnNlcnQgdGhlIGNoaWxkLlxuICogQHBhcmFtIHtOb2RlfSBjaGlsZCBUaGUgZWxlbWVudCB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IGF0IHdoaWNoIHRvIGluc2VydCB0aGUgbmV3IGNoaWxkIG5vZGUuIE11c3RcbiAqICAgICBub3QgYmUgbmVnYXRpdmUuXG4gKi9cbmdvb2cuZG9tLmluc2VydENoaWxkQXQgPSBmdW5jdGlvbihwYXJlbnQsIGNoaWxkLCBpbmRleCkge1xuICAvLyBOb3RlIHRoYXQgaWYgdGhlIHNlY29uZCBhcmd1bWVudCBpcyBudWxsLCBpbnNlcnRCZWZvcmVcbiAgLy8gd2lsbCBhcHBlbmQgdGhlIGNoaWxkIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3Qgb2YgY2hpbGRyZW4uXG4gIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHBhcmVudC5jaGlsZE5vZGVzW2luZGV4XSB8fCBudWxsKTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIGEgbm9kZSBmcm9tIGl0cyBwYXJlbnQuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gcmVtb3ZlLlxuICogQHJldHVybiB7Tm9kZX0gVGhlIG5vZGUgcmVtb3ZlZCBpZiByZW1vdmVkOyBlbHNlLCBudWxsLlxuICovXG5nb29nLmRvbS5yZW1vdmVOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLnBhcmVudE5vZGUgPyBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSkgOiBudWxsO1xufTtcblxuXG4vKipcbiAqIFJlcGxhY2VzIGEgbm9kZSBpbiB0aGUgRE9NIHRyZWUuIFdpbGwgZG8gbm90aGluZyBpZiB7QGNvZGUgb2xkTm9kZX0gaGFzIG5vXG4gKiBwYXJlbnQuXG4gKiBAcGFyYW0ge05vZGV9IG5ld05vZGUgTm9kZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge05vZGV9IG9sZE5vZGUgTm9kZSB0byByZXBsYWNlLlxuICovXG5nb29nLmRvbS5yZXBsYWNlTm9kZSA9IGZ1bmN0aW9uKG5ld05vZGUsIG9sZE5vZGUpIHtcbiAgdmFyIHBhcmVudCA9IG9sZE5vZGUucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkge1xuICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgb2xkTm9kZSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBGbGF0dGVucyBhbiBlbGVtZW50LiBUaGF0IGlzLCByZW1vdmVzIGl0IGFuZCByZXBsYWNlIGl0IHdpdGggaXRzIGNoaWxkcmVuLlxuICogRG9lcyBub3RoaW5nIGlmIHRoZSBlbGVtZW50IGlzIG5vdCBpbiB0aGUgZG9jdW1lbnQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gZmxhdHRlbi5cbiAqIEByZXR1cm4ge0VsZW1lbnR8dW5kZWZpbmVkfSBUaGUgb3JpZ2luYWwgZWxlbWVudCwgZGV0YWNoZWQgZnJvbSB0aGUgZG9jdW1lbnRcbiAqICAgICB0cmVlLCBzYW5zIGNoaWxkcmVuOyBvciB1bmRlZmluZWQsIGlmIHRoZSBlbGVtZW50IHdhcyBub3QgaW4gdGhlIGRvY3VtZW50XG4gKiAgICAgdG8gYmVnaW4gd2l0aC5cbiAqL1xuZ29vZy5kb20uZmxhdHRlbkVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIHZhciBjaGlsZCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPSBnb29nLmRvbS5Ob2RlVHlwZS5ET0NVTUVOVF9GUkFHTUVOVCkge1xuICAgIC8vIFVzZSBJRSBET00gbWV0aG9kIChzdXBwb3J0ZWQgYnkgT3BlcmEgdG9vKSBpZiBhdmFpbGFibGVcbiAgICBpZiAoZWxlbWVudC5yZW1vdmVOb2RlKSB7XG4gICAgICByZXR1cm4gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAoZWxlbWVudC5yZW1vdmVOb2RlKGZhbHNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1vdmUgYWxsIGNoaWxkcmVuIG9mIHRoZSBvcmlnaW5hbCBub2RlIHVwIG9uZSBsZXZlbC5cbiAgICAgIHdoaWxlICgoY2hpbGQgPSBlbGVtZW50LmZpcnN0Q2hpbGQpKSB7XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBEZXRhY2ggdGhlIG9yaWdpbmFsIGVsZW1lbnQuXG4gICAgICByZXR1cm4gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAoZ29vZy5kb20ucmVtb3ZlTm9kZShlbGVtZW50KSk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIGp1c3QgdGhlIGVsZW1lbnQgY2hpbGRyZW4gb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgd2hvc2UgZWxlbWVudCBjaGlsZHJlbiB3ZSB3YW50LlxuICogQHJldHVybiB7IShBcnJheXxOb2RlTGlzdCl9IEFuIGFycmF5IG9yIGFycmF5LWxpa2UgbGlzdCBvZiBqdXN0IHRoZSBlbGVtZW50XG4gKiAgICAgY2hpbGRyZW4gb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gKi9cbmdvb2cuZG9tLmdldENoaWxkcmVuID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAvLyBXZSBjaGVjayBpZiB0aGUgY2hpbGRyZW4gYXR0cmlidXRlIGlzIHN1cHBvcnRlZCBmb3IgY2hpbGQgZWxlbWVudHNcbiAgLy8gc2luY2UgSUU4IG1pc3VzZXMgdGhlIGF0dHJpYnV0ZSBieSBhbHNvIGluY2x1ZGluZyBjb21tZW50cy5cbiAgaWYgKGdvb2cuZG9tLkJyb3dzZXJGZWF0dXJlLkNBTl9VU0VfQ0hJTERSRU5fQVRUUklCVVRFICYmXG4gICAgICBlbGVtZW50LmNoaWxkcmVuICE9IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBlbGVtZW50LmNoaWxkcmVuO1xuICB9XG4gIC8vIEZhbGwgYmFjayB0byBtYW51YWxseSBmaWx0ZXJpbmcgdGhlIGVsZW1lbnQncyBjaGlsZCBub2Rlcy5cbiAgcmV0dXJuIGdvb2cuYXJyYXkuZmlsdGVyKGVsZW1lbnQuY2hpbGROb2RlcywgZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09IGdvb2cuZG9tLk5vZGVUeXBlLkVMRU1FTlQ7XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGNoaWxkIG5vZGUgdGhhdCBpcyBhbiBlbGVtZW50LlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIHRvIGdldCB0aGUgZmlyc3QgY2hpbGQgZWxlbWVudCBvZi5cbiAqIEByZXR1cm4ge0VsZW1lbnR9IFRoZSBmaXJzdCBjaGlsZCBub2RlIG9mIHtAY29kZSBub2RlfSB0aGF0IGlzIGFuIGVsZW1lbnQuXG4gKi9cbmdvb2cuZG9tLmdldEZpcnN0RWxlbWVudENoaWxkID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAoZ29vZy5pc0RlZihub2RlLmZpcnN0RWxlbWVudENoaWxkKSkge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFFbGVtZW50fSAqLyhub2RlKS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgfVxuICByZXR1cm4gZ29vZy5kb20uZ2V0TmV4dEVsZW1lbnROb2RlXyhub2RlLmZpcnN0Q2hpbGQsIHRydWUpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxhc3QgY2hpbGQgbm9kZSB0aGF0IGlzIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gZ2V0IHRoZSBsYXN0IGNoaWxkIGVsZW1lbnQgb2YuXG4gKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgbGFzdCBjaGlsZCBub2RlIG9mIHtAY29kZSBub2RlfSB0aGF0IGlzIGFuIGVsZW1lbnQuXG4gKi9cbmdvb2cuZG9tLmdldExhc3RFbGVtZW50Q2hpbGQgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmIChnb29nLmlzRGVmKG5vZGUubGFzdEVsZW1lbnRDaGlsZCkpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshRWxlbWVudH0gKi8obm9kZSkubGFzdEVsZW1lbnRDaGlsZDtcbiAgfVxuICByZXR1cm4gZ29vZy5kb20uZ2V0TmV4dEVsZW1lbnROb2RlXyhub2RlLmxhc3RDaGlsZCwgZmFsc2UpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IG5leHQgc2libGluZyB0aGF0IGlzIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gZ2V0IHRoZSBuZXh0IHNpYmxpbmcgZWxlbWVudCBvZi5cbiAqIEByZXR1cm4ge0VsZW1lbnR9IFRoZSBuZXh0IHNpYmxpbmcgb2Yge0Bjb2RlIG5vZGV9IHRoYXQgaXMgYW4gZWxlbWVudC5cbiAqL1xuZ29vZy5kb20uZ2V0TmV4dEVsZW1lbnRTaWJsaW5nID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAoZ29vZy5pc0RlZihub2RlLm5leHRFbGVtZW50U2libGluZykpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshRWxlbWVudH0gKi8obm9kZSkubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9XG4gIHJldHVybiBnb29nLmRvbS5nZXROZXh0RWxlbWVudE5vZGVfKG5vZGUubmV4dFNpYmxpbmcsIHRydWUpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IHByZXZpb3VzIHNpYmxpbmcgdGhhdCBpcyBhbiBlbGVtZW50LlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIHRvIGdldCB0aGUgcHJldmlvdXMgc2libGluZyBlbGVtZW50IG9mLlxuICogQHJldHVybiB7RWxlbWVudH0gVGhlIGZpcnN0IHByZXZpb3VzIHNpYmxpbmcgb2Yge0Bjb2RlIG5vZGV9IHRoYXQgaXNcbiAqICAgICBhbiBlbGVtZW50LlxuICovXG5nb29nLmRvbS5nZXRQcmV2aW91c0VsZW1lbnRTaWJsaW5nID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAoZ29vZy5pc0RlZihub2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IUVsZW1lbnR9ICovKG5vZGUpLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIGdvb2cuZG9tLmdldE5leHRFbGVtZW50Tm9kZV8obm9kZS5wcmV2aW91c1NpYmxpbmcsIGZhbHNlKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBub2RlIHRoYXQgaXMgYW4gZWxlbWVudCBpbiB0aGUgc3BlY2lmaWVkIGRpcmVjdGlvbixcbiAqIHN0YXJ0aW5nIHdpdGgge0Bjb2RlIG5vZGV9LlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIHRvIGdldCB0aGUgbmV4dCBlbGVtZW50IGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGZvcndhcmQgV2hldGhlciB0byBsb29rIGZvcndhcmRzIG9yIGJhY2t3YXJkcy5cbiAqIEByZXR1cm4ge0VsZW1lbnR9IFRoZSBmaXJzdCBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kb20uZ2V0TmV4dEVsZW1lbnROb2RlXyA9IGZ1bmN0aW9uKG5vZGUsIGZvcndhcmQpIHtcbiAgd2hpbGUgKG5vZGUgJiYgbm9kZS5ub2RlVHlwZSAhPSBnb29nLmRvbS5Ob2RlVHlwZS5FTEVNRU5UKSB7XG4gICAgbm9kZSA9IGZvcndhcmQgPyBub2RlLm5leHRTaWJsaW5nIDogbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gIH1cblxuICByZXR1cm4gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAobm9kZSk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgbmV4dCBub2RlIGluIHNvdXJjZSBvcmRlciBmcm9tIHRoZSBnaXZlbiBub2RlLlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlLlxuICogQHJldHVybiB7Tm9kZX0gVGhlIG5leHQgbm9kZSBpbiB0aGUgRE9NIHRyZWUsIG9yIG51bGwgaWYgdGhpcyB3YXMgdGhlIGxhc3RcbiAqICAgICBub2RlLlxuICovXG5nb29nLmRvbS5nZXROZXh0Tm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKCFub2RlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAobm9kZS5maXJzdENoaWxkKSB7XG4gICAgcmV0dXJuIG5vZGUuZmlyc3RDaGlsZDtcbiAgfVxuXG4gIHdoaWxlIChub2RlICYmICFub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfVxuXG4gIHJldHVybiBub2RlID8gbm9kZS5uZXh0U2libGluZyA6IG51bGw7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcHJldmlvdXMgbm9kZSBpbiBzb3VyY2Ugb3JkZXIgZnJvbSB0aGUgZ2l2ZW4gbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgbm9kZS5cbiAqIEByZXR1cm4ge05vZGV9IFRoZSBwcmV2aW91cyBub2RlIGluIHRoZSBET00gdHJlZSwgb3IgbnVsbCBpZiB0aGlzIHdhcyB0aGVcbiAqICAgICBmaXJzdCBub2RlLlxuICovXG5nb29nLmRvbS5nZXRQcmV2aW91c05vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFub2RlLnByZXZpb3VzU2libGluZykge1xuICAgIHJldHVybiBub2RlLnBhcmVudE5vZGU7XG4gIH1cblxuICBub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gIHdoaWxlIChub2RlICYmIG5vZGUubGFzdENoaWxkKSB7XG4gICAgbm9kZSA9IG5vZGUubGFzdENoaWxkO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59O1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgb2JqZWN0IGxvb2tzIGxpa2UgYSBET00gbm9kZS5cbiAqIEBwYXJhbSB7P30gb2JqIFRoZSBvYmplY3QgYmVpbmcgdGVzdGVkIGZvciBub2RlIGxpa2VuZXNzLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgb2JqZWN0IGxvb2tzIGxpa2UgYSBET00gbm9kZS5cbiAqL1xuZ29vZy5kb20uaXNOb2RlTGlrZSA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gZ29vZy5pc09iamVjdChvYmopICYmIG9iai5ub2RlVHlwZSA+IDA7XG59O1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgb2JqZWN0IGxvb2tzIGxpa2UgYW4gRWxlbWVudC5cbiAqIEBwYXJhbSB7P30gb2JqIFRoZSBvYmplY3QgYmVpbmcgdGVzdGVkIGZvciBFbGVtZW50IGxpa2VuZXNzLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgb2JqZWN0IGxvb2tzIGxpa2UgYW4gRWxlbWVudC5cbiAqL1xuZ29vZy5kb20uaXNFbGVtZW50ID0gZnVuY3Rpb24ob2JqKSB7XG4gIHJldHVybiBnb29nLmlzT2JqZWN0KG9iaikgJiYgb2JqLm5vZGVUeXBlID09IGdvb2cuZG9tLk5vZGVUeXBlLkVMRU1FTlQ7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBXaW5kb3cgb2JqZWN0LiBUaGlzIGluY2x1ZGVzIHRoZVxuICogZ2xvYmFsIHdpbmRvdyBmb3IgSFRNTCBwYWdlcywgYW5kIGlmcmFtZSB3aW5kb3dzLlxuICogQHBhcmFtIHs/fSBvYmogVmFyaWFibGUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHZhcmlhYmxlIGlzIGEgd2luZG93LlxuICovXG5nb29nLmRvbS5pc1dpbmRvdyA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gZ29vZy5pc09iamVjdChvYmopICYmIG9ialsnd2luZG93J10gPT0gb2JqO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgYW4gZWxlbWVudCdzIHBhcmVudCwgaWYgaXQncyBhbiBFbGVtZW50LlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBET00gZWxlbWVudC5cbiAqIEByZXR1cm4ge0VsZW1lbnR9IFRoZSBwYXJlbnQsIG9yIG51bGwgaWYgbm90IGFuIEVsZW1lbnQuXG4gKi9cbmdvb2cuZG9tLmdldFBhcmVudEVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIHZhciBwYXJlbnQ7XG4gIGlmIChnb29nLmRvbS5Ccm93c2VyRmVhdHVyZS5DQU5fVVNFX1BBUkVOVF9FTEVNRU5UX1BST1BFUlRZKSB7XG4gICAgdmFyIGlzSWU5ID0gZ29vZy51c2VyQWdlbnQuSUUgJiZcbiAgICAgICAgZ29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXIoJzknKSAmJlxuICAgICAgICAhZ29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXIoJzEwJyk7XG4gICAgLy8gU1ZHIGVsZW1lbnRzIGluIElFOSBjYW4ndCB1c2UgdGhlIHBhcmVudEVsZW1lbnQgcHJvcGVydHkuXG4gICAgLy8gZ29vZy5nbG9iYWxbJ1NWR0VsZW1lbnQnXSBpcyBub3QgZGVmaW5lZCBpbiBJRTkgcXVpcmtzIG1vZGUuXG4gICAgaWYgKCEoaXNJZTkgJiYgZ29vZy5nbG9iYWxbJ1NWR0VsZW1lbnQnXSAmJlxuICAgICAgICBlbGVtZW50IGluc3RhbmNlb2YgZ29vZy5nbG9iYWxbJ1NWR0VsZW1lbnQnXSkpIHtcbiAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICByZXR1cm4gZ29vZy5kb20uaXNFbGVtZW50KHBhcmVudCkgPyAvKiogQHR5cGUgeyFFbGVtZW50fSAqLyAocGFyZW50KSA6IG51bGw7XG59O1xuXG5cbi8qKlxuICogV2hldGhlciBhIG5vZGUgY29udGFpbnMgYW5vdGhlciBub2RlLlxuICogQHBhcmFtIHtOb2RlfSBwYXJlbnQgVGhlIG5vZGUgdGhhdCBzaG91bGQgY29udGFpbiB0aGUgb3RoZXIgbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gZGVzY2VuZGFudCBUaGUgbm9kZSB0byB0ZXN0IHByZXNlbmNlIG9mLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcGFyZW50IG5vZGUgY29udGFpbnMgdGhlIGRlc2NlbmRlbnQgbm9kZS5cbiAqL1xuZ29vZy5kb20uY29udGFpbnMgPSBmdW5jdGlvbihwYXJlbnQsIGRlc2NlbmRhbnQpIHtcbiAgLy8gV2UgdXNlIGJyb3dzZXIgc3BlY2lmaWMgbWV0aG9kcyBmb3IgdGhpcyBpZiBhdmFpbGFibGUgc2luY2UgaXQgaXMgZmFzdGVyXG4gIC8vIHRoYXQgd2F5LlxuXG4gIC8vIElFIERPTVxuICBpZiAocGFyZW50LmNvbnRhaW5zICYmIGRlc2NlbmRhbnQubm9kZVR5cGUgPT0gZ29vZy5kb20uTm9kZVR5cGUuRUxFTUVOVCkge1xuICAgIHJldHVybiBwYXJlbnQgPT0gZGVzY2VuZGFudCB8fCBwYXJlbnQuY29udGFpbnMoZGVzY2VuZGFudCk7XG4gIH1cblxuICAvLyBXM0MgRE9NIExldmVsIDNcbiAgaWYgKHR5cGVvZiBwYXJlbnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24gIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gcGFyZW50ID09IGRlc2NlbmRhbnQgfHxcbiAgICAgICAgQm9vbGVhbihwYXJlbnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZGVzY2VuZGFudCkgJiAxNik7XG4gIH1cblxuICAvLyBXM0MgRE9NIExldmVsIDFcbiAgd2hpbGUgKGRlc2NlbmRhbnQgJiYgcGFyZW50ICE9IGRlc2NlbmRhbnQpIHtcbiAgICBkZXNjZW5kYW50ID0gZGVzY2VuZGFudC5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBkZXNjZW5kYW50ID09IHBhcmVudDtcbn07XG5cblxuLyoqXG4gKiBDb21wYXJlcyB0aGUgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIG5vZGVzLCByZXR1cm5pbmcgMCBpZiB0aGV5IGFyZSB0aGUgc2FtZVxuICogbm9kZSwgYSBuZWdhdGl2ZSBudW1iZXIgaWYgbm9kZTEgaXMgYmVmb3JlIG5vZGUyLCBhbmQgYSBwb3NpdGl2ZSBudW1iZXIgaWZcbiAqIG5vZGUyIGlzIGJlZm9yZSBub2RlMS4gIE5vdGUgdGhhdCB3ZSBjb21wYXJlIHRoZSBvcmRlciB0aGUgdGFncyBhcHBlYXIgaW4gdGhlXG4gKiBkb2N1bWVudCBzbyBpbiB0aGUgdHJlZSA8Yj48aT50ZXh0PC9pPjwvYj4gdGhlIEIgbm9kZSBpcyBjb25zaWRlcmVkIHRvIGJlXG4gKiBiZWZvcmUgdGhlIEkgbm9kZS5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUxIFRoZSBmaXJzdCBub2RlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUyIFRoZSBzZWNvbmQgbm9kZSB0byBjb21wYXJlLlxuICogQHJldHVybiB7bnVtYmVyfSAwIGlmIHRoZSBub2RlcyBhcmUgdGhlIHNhbWUgbm9kZSwgYSBuZWdhdGl2ZSBudW1iZXIgaWYgbm9kZTFcbiAqICAgICBpcyBiZWZvcmUgbm9kZTIsIGFuZCBhIHBvc2l0aXZlIG51bWJlciBpZiBub2RlMiBpcyBiZWZvcmUgbm9kZTEuXG4gKi9cbmdvb2cuZG9tLmNvbXBhcmVOb2RlT3JkZXIgPSBmdW5jdGlvbihub2RlMSwgbm9kZTIpIHtcbiAgLy8gRmFsbCBvdXQgcXVpY2tseSBmb3IgZXF1YWxpdHkuXG4gIGlmIChub2RlMSA9PSBub2RlMikge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgLy8gVXNlIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIHdoZXJlIGF2YWlsYWJsZVxuICBpZiAobm9kZTEuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICAvLyA0IGlzIHRoZSBiaXRtYXNrIGZvciBGT0xMT1dTLlxuICAgIHJldHVybiBub2RlMS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlMikgJiAyID8gMSA6IC0xO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciBkb2N1bWVudCBub2RlcyBvbiBJRSA3IGFuZCA4LlxuICBpZiAoZ29vZy51c2VyQWdlbnQuSUUgJiYgIWdvb2cudXNlckFnZW50LmlzRG9jdW1lbnRNb2RlT3JIaWdoZXIoOSkpIHtcbiAgICBpZiAobm9kZTEubm9kZVR5cGUgPT0gZ29vZy5kb20uTm9kZVR5cGUuRE9DVU1FTlQpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKG5vZGUyLm5vZGVUeXBlID09IGdvb2cuZG9tLk5vZGVUeXBlLkRPQ1VNRU5UKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cblxuICAvLyBQcm9jZXNzIGluIElFIHVzaW5nIHNvdXJjZUluZGV4IC0gd2UgY2hlY2sgdG8gc2VlIGlmIHRoZSBmaXJzdCBub2RlIGhhc1xuICAvLyBhIHNvdXJjZSBpbmRleCBvciBpZiBpdHMgcGFyZW50IGhhcyBvbmUuXG4gIGlmICgnc291cmNlSW5kZXgnIGluIG5vZGUxIHx8XG4gICAgICAobm9kZTEucGFyZW50Tm9kZSAmJiAnc291cmNlSW5kZXgnIGluIG5vZGUxLnBhcmVudE5vZGUpKSB7XG4gICAgdmFyIGlzRWxlbWVudDEgPSBub2RlMS5ub2RlVHlwZSA9PSBnb29nLmRvbS5Ob2RlVHlwZS5FTEVNRU5UO1xuICAgIHZhciBpc0VsZW1lbnQyID0gbm9kZTIubm9kZVR5cGUgPT0gZ29vZy5kb20uTm9kZVR5cGUuRUxFTUVOVDtcblxuICAgIGlmIChpc0VsZW1lbnQxICYmIGlzRWxlbWVudDIpIHtcbiAgICAgIHJldHVybiBub2RlMS5zb3VyY2VJbmRleCAtIG5vZGUyLnNvdXJjZUluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFyZW50MSA9IG5vZGUxLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGFyZW50MiA9IG5vZGUyLnBhcmVudE5vZGU7XG5cbiAgICAgIGlmIChwYXJlbnQxID09IHBhcmVudDIpIHtcbiAgICAgICAgcmV0dXJuIGdvb2cuZG9tLmNvbXBhcmVTaWJsaW5nT3JkZXJfKG5vZGUxLCBub2RlMik7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNFbGVtZW50MSAmJiBnb29nLmRvbS5jb250YWlucyhwYXJlbnQxLCBub2RlMikpIHtcbiAgICAgICAgcmV0dXJuIC0xICogZ29vZy5kb20uY29tcGFyZVBhcmVudHNEZXNjZW5kYW50Tm9kZUllXyhub2RlMSwgbm9kZTIpO1xuICAgICAgfVxuXG5cbiAgICAgIGlmICghaXNFbGVtZW50MiAmJiBnb29nLmRvbS5jb250YWlucyhwYXJlbnQyLCBub2RlMSkpIHtcbiAgICAgICAgcmV0dXJuIGdvb2cuZG9tLmNvbXBhcmVQYXJlbnRzRGVzY2VuZGFudE5vZGVJZV8obm9kZTIsIG5vZGUxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChpc0VsZW1lbnQxID8gbm9kZTEuc291cmNlSW5kZXggOiBwYXJlbnQxLnNvdXJjZUluZGV4KSAtXG4gICAgICAgICAgICAgKGlzRWxlbWVudDIgPyBub2RlMi5zb3VyY2VJbmRleCA6IHBhcmVudDIuc291cmNlSW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZvciBTYWZhcmksIHdlIGNvbXBhcmUgcmFuZ2VzLlxuICB2YXIgZG9jID0gZ29vZy5kb20uZ2V0T3duZXJEb2N1bWVudChub2RlMSk7XG5cbiAgdmFyIHJhbmdlMSwgcmFuZ2UyO1xuICByYW5nZTEgPSBkb2MuY3JlYXRlUmFuZ2UoKTtcbiAgcmFuZ2UxLnNlbGVjdE5vZGUobm9kZTEpO1xuICByYW5nZTEuY29sbGFwc2UodHJ1ZSk7XG5cbiAgcmFuZ2UyID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlMi5zZWxlY3ROb2RlKG5vZGUyKTtcbiAgcmFuZ2UyLmNvbGxhcHNlKHRydWUpO1xuXG4gIHJldHVybiByYW5nZTEuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKGdvb2cuZ2xvYmFsWydSYW5nZSddLlNUQVJUX1RPX0VORCxcbiAgICAgIHJhbmdlMik7XG59O1xuXG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBjb21wYXJlIHRoZSBwb3NpdGlvbiBvZiB0d28gbm9kZXMsIHdoZW5cbiAqIHtAY29kZSB0ZXh0Tm9kZX0ncyBwYXJlbnQgaXMgYW4gYW5jZXN0b3Igb2Yge0Bjb2RlIG5vZGV9LiAgSWYgdGhpcyBlbnRyeVxuICogY29uZGl0aW9uIGlzIG5vdCBtZXQsIHRoaXMgZnVuY3Rpb24gd2lsbCBhdHRlbXB0IHRvIHJlZmVyZW5jZSBhIG51bGwgb2JqZWN0LlxuICogQHBhcmFtIHshTm9kZX0gdGV4dE5vZGUgVGhlIHRleHROb2RlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm4ge251bWJlcn0gLTEgaWYgbm9kZSBpcyBiZWZvcmUgdGV4dE5vZGUsICsxIG90aGVyd2lzZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZG9tLmNvbXBhcmVQYXJlbnRzRGVzY2VuZGFudE5vZGVJZV8gPSBmdW5jdGlvbih0ZXh0Tm9kZSwgbm9kZSkge1xuICB2YXIgcGFyZW50ID0gdGV4dE5vZGUucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCA9PSBub2RlKSB7XG4gICAgLy8gSWYgdGV4dE5vZGUgaXMgYSBjaGlsZCBvZiBub2RlLCB0aGVuIG5vZGUgY29tZXMgZmlyc3QuXG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHZhciBzaWJsaW5nID0gbm9kZTtcbiAgd2hpbGUgKHNpYmxpbmcucGFyZW50Tm9kZSAhPSBwYXJlbnQpIHtcbiAgICBzaWJsaW5nID0gc2libGluZy5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBnb29nLmRvbS5jb21wYXJlU2libGluZ09yZGVyXyhzaWJsaW5nLCB0ZXh0Tm9kZSk7XG59O1xuXG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBjb21wYXJlIHRoZSBwb3NpdGlvbiBvZiB0d28gbm9kZXMga25vd24gdG8gYmUgbm9uLWVxdWFsXG4gKiBzaWJsaW5ncy5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZTEgVGhlIGZpcnN0IG5vZGUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7IU5vZGV9IG5vZGUyIFRoZSBzZWNvbmQgbm9kZSB0byBjb21wYXJlLlxuICogQHJldHVybiB7bnVtYmVyfSAtMSBpZiBub2RlMSBpcyBiZWZvcmUgbm9kZTIsICsxIG90aGVyd2lzZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZG9tLmNvbXBhcmVTaWJsaW5nT3JkZXJfID0gZnVuY3Rpb24obm9kZTEsIG5vZGUyKSB7XG4gIHZhciBzID0gbm9kZTI7XG4gIHdoaWxlICgocyA9IHMucHJldmlvdXNTaWJsaW5nKSkge1xuICAgIGlmIChzID09IG5vZGUxKSB7XG4gICAgICAvLyBXZSBqdXN0IGZvdW5kIG5vZGUxIGJlZm9yZSBub2RlMi5cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gIH1cblxuICAvLyBTaW5jZSB3ZSBkaWRuJ3QgZmluZCBpdCwgbm9kZTEgbXVzdCBiZSBhZnRlciBub2RlMi5cbiAgcmV0dXJuIDE7XG59O1xuXG5cbi8qKlxuICogRmluZCB0aGUgZGVlcGVzdCBjb21tb24gYW5jZXN0b3Igb2YgdGhlIGdpdmVuIG5vZGVzLlxuICogQHBhcmFtIHsuLi5Ob2RlfSB2YXJfYXJncyBUaGUgbm9kZXMgdG8gZmluZCBhIGNvbW1vbiBhbmNlc3RvciBvZi5cbiAqIEByZXR1cm4ge05vZGV9IFRoZSBjb21tb24gYW5jZXN0b3Igb2YgdGhlIG5vZGVzLCBvciBudWxsIGlmIHRoZXJlIGlzIG5vbmUuXG4gKiAgICAgbnVsbCB3aWxsIG9ubHkgYmUgcmV0dXJuZWQgaWYgdHdvIG9yIG1vcmUgb2YgdGhlIG5vZGVzIGFyZSBmcm9tIGRpZmZlcmVudFxuICogICAgIGRvY3VtZW50cy5cbiAqL1xuZ29vZy5kb20uZmluZENvbW1vbkFuY2VzdG9yID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcbiAgdmFyIGksIGNvdW50ID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKCFjb3VudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKGNvdW50ID09IDEpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICB9XG5cbiAgdmFyIHBhdGhzID0gW107XG4gIHZhciBtaW5MZW5ndGggPSBJbmZpbml0eTtcbiAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAvLyBDb21wdXRlIHRoZSBsaXN0IG9mIGFuY2VzdG9ycy5cbiAgICB2YXIgYW5jZXN0b3JzID0gW107XG4gICAgdmFyIG5vZGUgPSBhcmd1bWVudHNbaV07XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIGFuY2VzdG9ycy51bnNoaWZ0KG5vZGUpO1xuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICAvLyBTYXZlIHRoZSBsaXN0IGZvciBjb21wYXJpc29uLlxuICAgIHBhdGhzLnB1c2goYW5jZXN0b3JzKTtcbiAgICBtaW5MZW5ndGggPSBNYXRoLm1pbihtaW5MZW5ndGgsIGFuY2VzdG9ycy5sZW5ndGgpO1xuICB9XG4gIHZhciBvdXRwdXQgPSBudWxsO1xuICBmb3IgKGkgPSAwOyBpIDwgbWluTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZmlyc3QgPSBwYXRoc1swXVtpXTtcbiAgICBmb3IgKHZhciBqID0gMTsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgIGlmIChmaXJzdCAhPSBwYXRoc1tqXVtpXSkge1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgfVxuICAgIH1cbiAgICBvdXRwdXQgPSBmaXJzdDtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIG93bmVyIGRvY3VtZW50IGZvciBhIG5vZGUuXG4gKiBAcGFyYW0ge05vZGV8V2luZG93fSBub2RlIFRoZSBub2RlIHRvIGdldCB0aGUgZG9jdW1lbnQgZm9yLlxuICogQHJldHVybiB7IURvY3VtZW50fSBUaGUgZG9jdW1lbnQgb3duaW5nIHRoZSBub2RlLlxuICovXG5nb29nLmRvbS5nZXRPd25lckRvY3VtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICAvLyBUT0RPKG5uYXplKTogVXBkYXRlIHBhcmFtIHNpZ25hdHVyZSB0byBiZSBub24tbnVsbGFibGUuXG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQobm9kZSwgJ05vZGUgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLicpO1xuICByZXR1cm4gLyoqIEB0eXBlIHshRG9jdW1lbnR9ICovIChcbiAgICAgIG5vZGUubm9kZVR5cGUgPT0gZ29vZy5kb20uTm9kZVR5cGUuRE9DVU1FTlQgPyBub2RlIDpcbiAgICAgIG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlLmRvY3VtZW50KTtcbn07XG5cblxuLyoqXG4gKiBDcm9zcy1icm93c2VyIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSBkb2N1bWVudCBlbGVtZW50IG9mIGEgZnJhbWUgb3IgaWZyYW1lLlxuICogQHBhcmFtIHtFbGVtZW50fSBmcmFtZSBGcmFtZSBlbGVtZW50LlxuICogQHJldHVybiB7IURvY3VtZW50fSBUaGUgZnJhbWUgY29udGVudCBkb2N1bWVudC5cbiAqL1xuZ29vZy5kb20uZ2V0RnJhbWVDb250ZW50RG9jdW1lbnQgPSBmdW5jdGlvbihmcmFtZSkge1xuICB2YXIgZG9jID0gZnJhbWUuY29udGVudERvY3VtZW50IHx8IGZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIHJldHVybiBkb2M7XG59O1xuXG5cbi8qKlxuICogQ3Jvc3MtYnJvd3NlciBmdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgd2luZG93IG9mIGEgZnJhbWUgb3IgaWZyYW1lLlxuICogQHBhcmFtIHtFbGVtZW50fSBmcmFtZSBGcmFtZSBlbGVtZW50LlxuICogQHJldHVybiB7V2luZG93fSBUaGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gZnJhbWUuXG4gKi9cbmdvb2cuZG9tLmdldEZyYW1lQ29udGVudFdpbmRvdyA9IGZ1bmN0aW9uKGZyYW1lKSB7XG4gIHJldHVybiBmcmFtZS5jb250ZW50V2luZG93IHx8XG4gICAgICBnb29nLmRvbS5nZXRXaW5kb3coZ29vZy5kb20uZ2V0RnJhbWVDb250ZW50RG9jdW1lbnQoZnJhbWUpKTtcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSB0ZXh0IGNvbnRlbnQgb2YgYSBub2RlLCB3aXRoIGNyb3NzLWJyb3dzZXIgc3VwcG9ydC5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgbm9kZSB0byBjaGFuZ2UgdGhlIHRleHQgY29udGVudCBvZi5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdGV4dCBUaGUgdmFsdWUgdGhhdCBzaG91bGQgcmVwbGFjZSB0aGUgbm9kZSdzIGNvbnRlbnQuXG4gKi9cbmdvb2cuZG9tLnNldFRleHRDb250ZW50ID0gZnVuY3Rpb24obm9kZSwgdGV4dCkge1xuICBnb29nLmFzc2VydHMuYXNzZXJ0KG5vZGUgIT0gbnVsbCxcbiAgICAgICdnb29nLmRvbS5zZXRUZXh0Q29udGVudCBleHBlY3RzIGEgbm9uLW51bGwgdmFsdWUgZm9yIG5vZGUnKTtcblxuICBpZiAoJ3RleHRDb250ZW50JyBpbiBub2RlKSB7XG4gICAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG4gIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PSBnb29nLmRvbS5Ob2RlVHlwZS5URVhUKSB7XG4gICAgbm9kZS5kYXRhID0gdGV4dDtcbiAgfSBlbHNlIGlmIChub2RlLmZpcnN0Q2hpbGQgJiZcbiAgICAgICAgICAgICBub2RlLmZpcnN0Q2hpbGQubm9kZVR5cGUgPT0gZ29vZy5kb20uTm9kZVR5cGUuVEVYVCkge1xuICAgIC8vIElmIHRoZSBmaXJzdCBjaGlsZCBpcyBhIHRleHQgbm9kZSB3ZSBqdXN0IGNoYW5nZSBpdHMgZGF0YSBhbmQgcmVtb3ZlIHRoZVxuICAgIC8vIHJlc3Qgb2YgdGhlIGNoaWxkcmVuLlxuICAgIHdoaWxlIChub2RlLmxhc3RDaGlsZCAhPSBub2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5sYXN0Q2hpbGQpO1xuICAgIH1cbiAgICBub2RlLmZpcnN0Q2hpbGQuZGF0YSA9IHRleHQ7XG4gIH0gZWxzZSB7XG4gICAgZ29vZy5kb20ucmVtb3ZlQ2hpbGRyZW4obm9kZSk7XG4gICAgdmFyIGRvYyA9IGdvb2cuZG9tLmdldE93bmVyRG9jdW1lbnQobm9kZSk7XG4gICAgbm9kZS5hcHBlbmRDaGlsZChkb2MuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHRleHQpKSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBvdXRlckhUTUwgb2YgYSBub2RlLCB3aGljaCBpc2xpa2UgaW5uZXJIVE1MLCBleGNlcHQgdGhhdCBpdFxuICogYWN0dWFsbHkgY29udGFpbnMgdGhlIEhUTUwgb2YgdGhlIG5vZGUgaXRzZWxmLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGdldCB0aGUgSFRNTCBvZi5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG91dGVySFRNTCBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAqL1xuZ29vZy5kb20uZ2V0T3V0ZXJIdG1sID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAvLyBJRSwgT3BlcmEgYW5kIFdlYktpdCBhbGwgaGF2ZSBvdXRlckhUTUwuXG4gIGlmICgnb3V0ZXJIVE1MJyBpbiBlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQub3V0ZXJIVE1MO1xuICB9IGVsc2Uge1xuICAgIHZhciBkb2MgPSBnb29nLmRvbS5nZXRPd25lckRvY3VtZW50KGVsZW1lbnQpO1xuICAgIHZhciBkaXYgPSBkb2MuY3JlYXRlRWxlbWVudChnb29nLmRvbS5UYWdOYW1lLkRJVik7XG4gICAgZGl2LmFwcGVuZENoaWxkKGVsZW1lbnQuY2xvbmVOb2RlKHRydWUpKTtcbiAgICByZXR1cm4gZGl2LmlubmVySFRNTDtcbiAgfVxufTtcblxuXG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBkZXNjZW5kYW50IG5vZGUgdGhhdCBtYXRjaGVzIHRoZSBmaWx0ZXIgZnVuY3Rpb24sIHVzaW5nXG4gKiBhIGRlcHRoIGZpcnN0IHNlYXJjaC4gVGhpcyBmdW5jdGlvbiBvZmZlcnMgdGhlIG1vc3QgZ2VuZXJhbCBwdXJwb3NlIHdheVxuICogb2YgZmluZGluZyBhIG1hdGNoaW5nIGVsZW1lbnQuIFlvdSBtYXkgYWxzbyB3aXNoIHRvIGNvbnNpZGVyXG4gKiB7QGNvZGUgZ29vZy5kb20ucXVlcnl9IHdoaWNoIGNhbiBleHByZXNzIG1hbnkgbWF0Y2hpbmcgY3JpdGVyaWEgdXNpbmdcbiAqIENTUyBzZWxlY3RvciBleHByZXNzaW9ucy4gVGhlc2UgZXhwcmVzc2lvbnMgb2Z0ZW4gcmVzdWx0IGluIGEgbW9yZVxuICogY29tcGFjdCByZXByZXNlbnRhdGlvbiBvZiB0aGUgZGVzaXJlZCByZXN1bHQuXG4gKiBAc2VlIGdvb2cuZG9tLnF1ZXJ5XG4gKlxuICogQHBhcmFtIHtOb2RlfSByb290IFRoZSByb290IG9mIHRoZSB0cmVlIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oTm9kZSkgOiBib29sZWFufSBwIFRoZSBmaWx0ZXIgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtOb2RlfHVuZGVmaW5lZH0gVGhlIGZvdW5kIG5vZGUgb3IgdW5kZWZpbmVkIGlmIG5vbmUgaXMgZm91bmQuXG4gKi9cbmdvb2cuZG9tLmZpbmROb2RlID0gZnVuY3Rpb24ocm9vdCwgcCkge1xuICB2YXIgcnYgPSBbXTtcbiAgdmFyIGZvdW5kID0gZ29vZy5kb20uZmluZE5vZGVzXyhyb290LCBwLCBydiwgdHJ1ZSk7XG4gIHJldHVybiBmb3VuZCA/IHJ2WzBdIDogdW5kZWZpbmVkO1xufTtcblxuXG4vKipcbiAqIEZpbmRzIGFsbCB0aGUgZGVzY2VuZGFudCBub2RlcyB0aGF0IG1hdGNoIHRoZSBmaWx0ZXIgZnVuY3Rpb24sIHVzaW5nIGFcbiAqIGEgZGVwdGggZmlyc3Qgc2VhcmNoLiBUaGlzIGZ1bmN0aW9uIG9mZmVycyB0aGUgbW9zdCBnZW5lcmFsLXB1cnBvc2Ugd2F5XG4gKiBvZiBmaW5kaW5nIGEgc2V0IG9mIG1hdGNoaW5nIGVsZW1lbnRzLiBZb3UgbWF5IGFsc28gd2lzaCB0byBjb25zaWRlclxuICoge0Bjb2RlIGdvb2cuZG9tLnF1ZXJ5fSB3aGljaCBjYW4gZXhwcmVzcyBtYW55IG1hdGNoaW5nIGNyaXRlcmlhIHVzaW5nXG4gKiBDU1Mgc2VsZWN0b3IgZXhwcmVzc2lvbnMuIFRoZXNlIGV4cHJlc3Npb25zIG9mdGVuIHJlc3VsdCBpbiBhIG1vcmVcbiAqIGNvbXBhY3QgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRlc2lyZWQgcmVzdWx0LlxuXG4gKiBAcGFyYW0ge05vZGV9IHJvb3QgVGhlIHJvb3Qgb2YgdGhlIHRyZWUgdG8gc2VhcmNoLlxuICogQHBhcmFtIHtmdW5jdGlvbihOb2RlKSA6IGJvb2xlYW59IHAgVGhlIGZpbHRlciBmdW5jdGlvbi5cbiAqIEByZXR1cm4geyFBcnJheTwhTm9kZT59IFRoZSBmb3VuZCBub2RlcyBvciBhbiBlbXB0eSBhcnJheSBpZiBub25lIGFyZSBmb3VuZC5cbiAqL1xuZ29vZy5kb20uZmluZE5vZGVzID0gZnVuY3Rpb24ocm9vdCwgcCkge1xuICB2YXIgcnYgPSBbXTtcbiAgZ29vZy5kb20uZmluZE5vZGVzXyhyb290LCBwLCBydiwgZmFsc2UpO1xuICByZXR1cm4gcnY7XG59O1xuXG5cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IG9yIGFsbCB0aGUgZGVzY2VuZGFudCBub2RlcyB0aGF0IG1hdGNoIHRoZSBmaWx0ZXIgZnVuY3Rpb24sXG4gKiB1c2luZyBhIGRlcHRoIGZpcnN0IHNlYXJjaC5cbiAqIEBwYXJhbSB7Tm9kZX0gcm9vdCBUaGUgcm9vdCBvZiB0aGUgdHJlZSB0byBzZWFyY2guXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKE5vZGUpIDogYm9vbGVhbn0gcCBUaGUgZmlsdGVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHshQXJyYXk8IU5vZGU+fSBydiBUaGUgZm91bmQgbm9kZXMgYXJlIGFkZGVkIHRvIHRoaXMgYXJyYXkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGZpbmRPbmUgSWYgdHJ1ZSB3ZSBleGl0IGFmdGVyIHRoZSBmaXJzdCBmb3VuZCBub2RlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgc2VhcmNoIGlzIGNvbXBsZXRlIG9yIG5vdC4gVHJ1ZSBpbiBjYXNlIGZpbmRPbmVcbiAqICAgICBpcyB0cnVlIGFuZCB0aGUgbm9kZSBpcyBmb3VuZC4gRmFsc2Ugb3RoZXJ3aXNlLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kb20uZmluZE5vZGVzXyA9IGZ1bmN0aW9uKHJvb3QsIHAsIHJ2LCBmaW5kT25lKSB7XG4gIGlmIChyb290ICE9IG51bGwpIHtcbiAgICB2YXIgY2hpbGQgPSByb290LmZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAocChjaGlsZCkpIHtcbiAgICAgICAgcnYucHVzaChjaGlsZCk7XG4gICAgICAgIGlmIChmaW5kT25lKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChnb29nLmRvbS5maW5kTm9kZXNfKGNoaWxkLCBwLCBydiwgZmluZE9uZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5cbi8qKlxuICogTWFwIG9mIHRhZ3Mgd2hvc2UgY29udGVudCB0byBpZ25vcmUgd2hlbiBjYWxjdWxhdGluZyB0ZXh0IGxlbmd0aC5cbiAqIEBwcml2YXRlIHshT2JqZWN0PHN0cmluZywgbnVtYmVyPn1cbiAqIEBjb25zdFxuICovXG5nb29nLmRvbS5UQUdTX1RPX0lHTk9SRV8gPSB7XG4gICdTQ1JJUFQnOiAxLFxuICAnU1RZTEUnOiAxLFxuICAnSEVBRCc6IDEsXG4gICdJRlJBTUUnOiAxLFxuICAnT0JKRUNUJzogMVxufTtcblxuXG4vKipcbiAqIE1hcCBvZiB0YWdzIHdoaWNoIGhhdmUgcHJlZGVmaW5lZCB2YWx1ZXMgd2l0aCByZWdhcmQgdG8gd2hpdGVzcGFjZS5cbiAqIEBwcml2YXRlIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn1cbiAqIEBjb25zdFxuICovXG5nb29nLmRvbS5QUkVERUZJTkVEX1RBR19WQUxVRVNfID0geydJTUcnOiAnICcsICdCUic6ICdcXG4nfTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZWxlbWVudCBoYXMgYSB0YWIgaW5kZXggdGhhdCBhbGxvd3MgaXQgdG8gcmVjZWl2ZVxuICoga2V5Ym9hcmQgZm9jdXMgKHRhYkluZGV4ID49IDApLCBmYWxzZSBvdGhlcndpc2UuICBOb3RlIHRoYXQgc29tZSBlbGVtZW50c1xuICogbmF0aXZlbHkgc3VwcG9ydCBrZXlib2FyZCBmb2N1cywgZXZlbiBpZiB0aGV5IGhhdmUgbm8gdGFiIGluZGV4LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZWxlbWVudCBoYXMgYSB0YWIgaW5kZXggdGhhdCBhbGxvd3Mga2V5Ym9hcmRcbiAqICAgICBmb2N1cy5cbiAqIEBzZWUgaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cbiAqL1xuZ29vZy5kb20uaXNGb2N1c2FibGVUYWJJbmRleCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdvb2cuZG9tLmhhc1NwZWNpZmllZFRhYkluZGV4XyhlbGVtZW50KSAmJlxuICAgICAgICAgZ29vZy5kb20uaXNUYWJJbmRleEZvY3VzYWJsZV8oZWxlbWVudCk7XG59O1xuXG5cbi8qKlxuICogRW5hYmxlcyBvciBkaXNhYmxlcyBrZXlib2FyZCBmb2N1cyBzdXBwb3J0IG9uIHRoZSBlbGVtZW50IHZpYSBpdHMgdGFiIGluZGV4LlxuICogT25seSBlbGVtZW50cyBmb3Igd2hpY2gge0BsaW5rIGdvb2cuZG9tLmlzRm9jdXNhYmxlVGFiSW5kZXh9IHJldHVybnMgdHJ1ZVxuICogKG9yIGVsZW1lbnRzIHRoYXQgbmF0aXZlbHkgc3VwcG9ydCBrZXlib2FyZCBmb2N1cywgbGlrZSBmb3JtIGVsZW1lbnRzKSBjYW5cbiAqIHJlY2VpdmUga2V5Ym9hcmQgZm9jdXMuICBTZWUgaHR0cDovL2dvL3RhYmluZGV4IGZvciBtb3JlIGluZm8uXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB3aG9zZSB0YWIgaW5kZXggaXMgdG8gYmUgY2hhbmdlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlIFdoZXRoZXIgdG8gc2V0IG9yIHJlbW92ZSBhIHRhYiBpbmRleCBvbiB0aGUgZWxlbWVudFxuICogICAgIHRoYXQgc3VwcG9ydHMga2V5Ym9hcmQgZm9jdXMuXG4gKi9cbmdvb2cuZG9tLnNldEZvY3VzYWJsZVRhYkluZGV4ID0gZnVuY3Rpb24oZWxlbWVudCwgZW5hYmxlKSB7XG4gIGlmIChlbmFibGUpIHtcbiAgICBlbGVtZW50LnRhYkluZGV4ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTZXQgdGFiSW5kZXggdG8gLTEgZmlyc3QsIHRoZW4gcmVtb3ZlIGl0LiBUaGlzIGlzIGEgd29ya2Fyb3VuZCBmb3JcbiAgICAvLyBTYWZhcmkgKGNvbmZpcm1lZCBpbiB2ZXJzaW9uIDQgb24gV2luZG93cykuIFdoZW4gcmVtb3ZpbmcgdGhlIGF0dHJpYnV0ZVxuICAgIC8vIHdpdGhvdXQgc2V0dGluZyBpdCB0byAtMSBmaXJzdCwgdGhlIGVsZW1lbnQgcmVtYWlucyBrZXlib2FyZCBmb2N1c2FibGVcbiAgICAvLyBkZXNwaXRlIG5vdCBoYXZpbmcgYSB0YWJJbmRleCBhdHRyaWJ1dGUgYW55bW9yZS5cbiAgICBlbGVtZW50LnRhYkluZGV4ID0gLTE7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3RhYkluZGV4Jyk7IC8vIE11c3QgYmUgY2FtZWxDYXNlIVxuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBlbGVtZW50IGNhbiBiZSBmb2N1c2VkLCBpLmUuIGl0IGhhcyBhIHRhYiBpbmRleCB0aGF0XG4gKiBhbGxvd3MgaXQgdG8gcmVjZWl2ZSBrZXlib2FyZCBmb2N1cyAodGFiSW5kZXggPj0gMCksIG9yIGl0IGlzIGFuIGVsZW1lbnRcbiAqIHRoYXQgbmF0aXZlbHkgc3VwcG9ydHMga2V5Ym9hcmQgZm9jdXMuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBlbGVtZW50IGFsbG93cyBrZXlib2FyZCBmb2N1cy5cbiAqL1xuZ29vZy5kb20uaXNGb2N1c2FibGUgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIHZhciBmb2N1c2FibGU7XG4gIC8vIFNvbWUgZWxlbWVudHMgY2FuIGhhdmUgdW5zcGVjaWZpZWQgdGFiIGluZGV4IGFuZCBzdGlsbCByZWNlaXZlIGZvY3VzLlxuICBpZiAoZ29vZy5kb20ubmF0aXZlbHlTdXBwb3J0c0ZvY3VzXyhlbGVtZW50KSkge1xuICAgIC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBub3QgZGlzYWJsZWQgLi4uXG4gICAgZm9jdXNhYmxlID0gIWVsZW1lbnQuZGlzYWJsZWQgJiZcbiAgICAgICAgLy8gLi4uIGFuZCBpZiBhIHRhYiBpbmRleCBpcyBzcGVjaWZpZWQsIGl0IGFsbG93cyBmb2N1cy5cbiAgICAgICAgKCFnb29nLmRvbS5oYXNTcGVjaWZpZWRUYWJJbmRleF8oZWxlbWVudCkgfHxcbiAgICAgICAgIGdvb2cuZG9tLmlzVGFiSW5kZXhGb2N1c2FibGVfKGVsZW1lbnQpKTtcbiAgfSBlbHNlIHtcbiAgICBmb2N1c2FibGUgPSBnb29nLmRvbS5pc0ZvY3VzYWJsZVRhYkluZGV4KGVsZW1lbnQpO1xuICB9XG5cbiAgLy8gSUUgcmVxdWlyZXMgZWxlbWVudHMgdG8gYmUgdmlzaWJsZSBpbiBvcmRlciB0byBmb2N1cyB0aGVtLlxuICByZXR1cm4gZm9jdXNhYmxlICYmIGdvb2cudXNlckFnZW50LklFID9cbiAgICAgICAgICAgICBnb29nLmRvbS5oYXNOb25aZXJvQm91bmRpbmdSZWN0XyhlbGVtZW50KSA6IGZvY3VzYWJsZTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGVsZW1lbnQgaGFzIGEgc3BlY2lmaWVkIHRhYiBpbmRleC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGVsZW1lbnQgaGFzIGEgc3BlY2lmaWVkIHRhYiBpbmRleC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZG9tLmhhc1NwZWNpZmllZFRhYkluZGV4XyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgLy8gSUUgcmV0dXJucyAwIGZvciBhbiB1bnNldCB0YWJJbmRleCwgc28gd2UgbXVzdCB1c2UgZ2V0QXR0cmlidXRlTm9kZSgpLFxuICAvLyB3aGljaCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGEgJ3NwZWNpZmllZCcgcHJvcGVydHkgaWYgdGFiSW5kZXggaXNcbiAgLy8gc3BlY2lmaWVkLiAgVGhpcyB3b3JrcyBvbiBvdGhlciBicm93c2VycywgdG9vLlxuICB2YXIgYXR0ck5vZGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZU5vZGUoJ3RhYmluZGV4Jyk7IC8vIE11c3QgYmUgbG93ZXJjYXNlIVxuICByZXR1cm4gZ29vZy5pc0RlZkFuZE5vdE51bGwoYXR0ck5vZGUpICYmIGF0dHJOb2RlLnNwZWNpZmllZDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGVsZW1lbnQncyB0YWIgaW5kZXggYWxsb3dzIHRoZSBlbGVtZW50IHRvIGJlIGZvY3VzZWQuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBlbGVtZW50J3MgdGFiIGluZGV4IGFsbG93cyBmb2N1cy5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZG9tLmlzVGFiSW5kZXhGb2N1c2FibGVfID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICB2YXIgaW5kZXggPSBlbGVtZW50LnRhYkluZGV4O1xuICAvLyBOT1RFOiBJRTkgcHV0cyB0YWJJbmRleCBpbiAxNi1iaXQgaW50LCBlLmcuIC0yIGlzIDY1NTM0LlxuICByZXR1cm4gZ29vZy5pc051bWJlcihpbmRleCkgJiYgaW5kZXggPj0gMCAmJiBpbmRleCA8IDMyNzY4O1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZWxlbWVudCBpcyBmb2N1c2FibGUgZXZlbiB3aGVuIHRhYkluZGV4IGlzIG5vdCBzZXQuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBlbGVtZW50IG5hdGl2ZWx5IHN1cHBvcnRzIGZvY3VzLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kb20ubmF0aXZlbHlTdXBwb3J0c0ZvY3VzXyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudGFnTmFtZSA9PSBnb29nLmRvbS5UYWdOYW1lLkEgfHxcbiAgICAgICAgIGVsZW1lbnQudGFnTmFtZSA9PSBnb29nLmRvbS5UYWdOYW1lLklOUFVUIHx8XG4gICAgICAgICBlbGVtZW50LnRhZ05hbWUgPT0gZ29vZy5kb20uVGFnTmFtZS5URVhUQVJFQSB8fFxuICAgICAgICAgZWxlbWVudC50YWdOYW1lID09IGdvb2cuZG9tLlRhZ05hbWUuU0VMRUNUIHx8XG4gICAgICAgICBlbGVtZW50LnRhZ05hbWUgPT0gZ29vZy5kb20uVGFnTmFtZS5CVVRUT047XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBlbGVtZW50IGhhcyBhIGJvdW5kaW5nIHJlY3RhbmdsZSB0aGF0IHdvdWxkIGJlIHZpc2libGVcbiAqIChpLmUuIGl0cyB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBncmVhdGVyIHRoYW4gemVybykuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBlbGVtZW50IGhhcyBhIG5vbi16ZXJvIGJvdW5kaW5nIHJlY3RhbmdsZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZG9tLmhhc05vblplcm9Cb3VuZGluZ1JlY3RfID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGdvb2cuaXNGdW5jdGlvbihlbGVtZW50WydnZXRCb3VuZGluZ0NsaWVudFJlY3QnXSkgP1xuICAgICAgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6XG4gICAgICB7J2hlaWdodCc6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0LCAnd2lkdGgnOiBlbGVtZW50Lm9mZnNldFdpZHRofTtcbiAgcmV0dXJuIGdvb2cuaXNEZWZBbmROb3ROdWxsKHJlY3QpICYmIHJlY3QuaGVpZ2h0ID4gMCAmJiByZWN0LndpZHRoID4gMDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIGN1cnJlbnQgbm9kZSwgd2l0aG91dCBtYXJrdXAgYW5kIGludmlzaWJsZVxuICogc3ltYm9scy4gTmV3IGxpbmVzIGFyZSBzdHJpcHBlZCBhbmQgd2hpdGVzcGFjZSBpcyBjb2xsYXBzZWQsXG4gKiBzdWNoIHRoYXQgZWFjaCBjaGFyYWN0ZXIgd291bGQgYmUgdmlzaWJsZS5cbiAqXG4gKiBJbiBicm93c2VycyB0aGF0IHN1cHBvcnQgaXQsIGlubmVyVGV4dCBpcyB1c2VkLiAgT3RoZXIgYnJvd3NlcnMgYXR0ZW1wdCB0b1xuICogc2ltdWxhdGUgaXQgdmlhIG5vZGUgdHJhdmVyc2FsLiAgTGluZSBicmVha3MgYXJlIGNhbm9uaWNhbGl6ZWQgaW4gSUUuXG4gKlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIGZyb20gd2hpY2ggd2UgYXJlIGdldHRpbmcgY29udGVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRleHQgY29udGVudC5cbiAqL1xuZ29vZy5kb20uZ2V0VGV4dENvbnRlbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHZhciB0ZXh0Q29udGVudDtcbiAgLy8gTm90ZShhcnYpOiBJRTksIE9wZXJhLCBhbmQgU2FmYXJpIDMgc3VwcG9ydCBpbm5lclRleHQgYnV0IHRoZXkgaW5jbHVkZVxuICAvLyB0ZXh0IG5vZGVzIGluIHNjcmlwdCB0YWdzLiBTbyB3ZSByZXZlcnQgdG8gdXNlIGEgdXNlciBhZ2VudCB0ZXN0IGhlcmUuXG4gIGlmIChnb29nLmRvbS5Ccm93c2VyRmVhdHVyZS5DQU5fVVNFX0lOTkVSX1RFWFQgJiYgKCdpbm5lclRleHQnIGluIG5vZGUpKSB7XG4gICAgdGV4dENvbnRlbnQgPSBnb29nLnN0cmluZy5jYW5vbmljYWxpemVOZXdsaW5lcyhub2RlLmlubmVyVGV4dCk7XG4gICAgLy8gVW5mb3J0dW5hdGVseSAuaW5uZXJUZXh0KCkgcmV0dXJucyB0ZXh0IHdpdGggJnNoeTsgc3ltYm9sc1xuICAgIC8vIFdlIG5lZWQgdG8gZmlsdGVyIGl0IG91dCBhbmQgdGhlbiByZW1vdmUgZHVwbGljYXRlIHdoaXRlc3BhY2VzXG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ1ZiA9IFtdO1xuICAgIGdvb2cuZG9tLmdldFRleHRDb250ZW50Xyhub2RlLCBidWYsIHRydWUpO1xuICAgIHRleHRDb250ZW50ID0gYnVmLmpvaW4oJycpO1xuICB9XG5cbiAgLy8gU3RyaXAgJnNoeTsgZW50aXRpZXMuIGdvb2cuZm9ybWF0Lmluc2VydFdvcmRCcmVha3MgaW5zZXJ0cyB0aGVtIGluIE9wZXJhLlxuICB0ZXh0Q29udGVudCA9IHRleHRDb250ZW50LnJlcGxhY2UoLyBcXHhBRCAvZywgJyAnKS5yZXBsYWNlKC9cXHhBRC9nLCAnJyk7XG4gIC8vIFN0cmlwICYjODIwMzsgZW50aXRpZXMuIGdvb2cuZm9ybWF0Lmluc2VydFdvcmRCcmVha3MgaW5zZXJ0cyB0aGVtIGluIElFOC5cbiAgdGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudC5yZXBsYWNlKC9cXHUyMDBCL2csICcnKTtcblxuICAvLyBTa2lwIHRoaXMgcmVwbGFjZW1lbnQgb24gb2xkIGJyb3dzZXJzIHdpdGggd29ya2luZyBpbm5lclRleHQsIHdoaWNoXG4gIC8vIGF1dG9tYXRpY2FsbHkgdHVybnMgJm5ic3A7IGludG8gJyAnIGFuZCAvICsvIGludG8gJyAnIHdoZW4gcmVhZGluZ1xuICAvLyBpbm5lclRleHQuXG4gIGlmICghZ29vZy5kb20uQnJvd3NlckZlYXR1cmUuQ0FOX1VTRV9JTk5FUl9URVhUKSB7XG4gICAgdGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudC5yZXBsYWNlKC8gKy9nLCAnICcpO1xuICB9XG4gIGlmICh0ZXh0Q29udGVudCAhPSAnICcpIHtcbiAgICB0ZXh0Q29udGVudCA9IHRleHRDb250ZW50LnJlcGxhY2UoL15cXHMqLywgJycpO1xuICB9XG5cbiAgcmV0dXJuIHRleHRDb250ZW50O1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHRleHQgY29udGVudCBvZiB0aGUgY3VycmVudCBub2RlLCB3aXRob3V0IG1hcmt1cC5cbiAqXG4gKiBVbmxpa2Uge0Bjb2RlIGdldFRleHRDb250ZW50fSB0aGlzIG1ldGhvZCBkb2VzIG5vdCBjb2xsYXBzZSB3aGl0ZXNwYWNlc1xuICogb3Igbm9ybWFsaXplIGxpbmVzIGJyZWFrcy5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgZnJvbSB3aGljaCB3ZSBhcmUgZ2V0dGluZyBjb250ZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgcmF3IHRleHQgY29udGVudC5cbiAqL1xuZ29vZy5kb20uZ2V0UmF3VGV4dENvbnRlbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHZhciBidWYgPSBbXTtcbiAgZ29vZy5kb20uZ2V0VGV4dENvbnRlbnRfKG5vZGUsIGJ1ZiwgZmFsc2UpO1xuXG4gIHJldHVybiBidWYuam9pbignJyk7XG59O1xuXG5cbi8qKlxuICogUmVjdXJzaXZlIHN1cHBvcnQgZnVuY3Rpb24gZm9yIHRleHQgY29udGVudCByZXRyaWV2YWwuXG4gKlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIGZyb20gd2hpY2ggd2UgYXJlIGdldHRpbmcgY29udGVudC5cbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gYnVmIHN0cmluZyBidWZmZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG5vcm1hbGl6ZVdoaXRlc3BhY2UgV2hldGhlciB0byBub3JtYWxpemUgd2hpdGVzcGFjZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZG9tLmdldFRleHRDb250ZW50XyA9IGZ1bmN0aW9uKG5vZGUsIGJ1Ziwgbm9ybWFsaXplV2hpdGVzcGFjZSkge1xuICBpZiAobm9kZS5ub2RlTmFtZSBpbiBnb29nLmRvbS5UQUdTX1RPX0lHTk9SRV8pIHtcbiAgICAvLyBpZ25vcmUgY2VydGFpbiB0YWdzXG4gIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PSBnb29nLmRvbS5Ob2RlVHlwZS5URVhUKSB7XG4gICAgaWYgKG5vcm1hbGl6ZVdoaXRlc3BhY2UpIHtcbiAgICAgIGJ1Zi5wdXNoKFN0cmluZyhub2RlLm5vZGVWYWx1ZSkucmVwbGFjZSgvKFxcclxcbnxcXHJ8XFxuKS9nLCAnJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWYucHVzaChub2RlLm5vZGVWYWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGUubm9kZU5hbWUgaW4gZ29vZy5kb20uUFJFREVGSU5FRF9UQUdfVkFMVUVTXykge1xuICAgIGJ1Zi5wdXNoKGdvb2cuZG9tLlBSRURFRklORURfVEFHX1ZBTFVFU19bbm9kZS5ub2RlTmFtZV0pO1xuICB9IGVsc2Uge1xuICAgIHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGdvb2cuZG9tLmdldFRleHRDb250ZW50XyhjaGlsZCwgYnVmLCBub3JtYWxpemVXaGl0ZXNwYWNlKTtcbiAgICAgIGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgdGV4dCBsZW5ndGggb2YgdGhlIHRleHQgY29udGFpbmVkIGluIGEgbm9kZSwgd2l0aG91dCBtYXJrdXAuIFRoaXNcbiAqIGlzIGVxdWl2YWxlbnQgdG8gdGhlIHNlbGVjdGlvbiBsZW5ndGggaWYgdGhlIG5vZGUgd2FzIHNlbGVjdGVkLCBvciB0aGUgbnVtYmVyXG4gKiBvZiBjdXJzb3IgbW92ZW1lbnRzIHRvIHRyYXZlcnNlIHRoZSBub2RlLiBJbWFnZXMgJiBCUnMgdGFrZSBvbmUgc3BhY2UuICBOZXdcbiAqIGxpbmVzIGFyZSBpZ25vcmVkLlxuICpcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgbm9kZSB3aG9zZSB0ZXh0IGNvbnRlbnQgbGVuZ3RoIGlzIGJlaW5nIGNhbGN1bGF0ZWQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBsZW5ndGggb2Yge0Bjb2RlIG5vZGV9J3MgdGV4dCBjb250ZW50LlxuICovXG5nb29nLmRvbS5nZXROb2RlVGV4dExlbmd0aCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIGdvb2cuZG9tLmdldFRleHRDb250ZW50KG5vZGUpLmxlbmd0aDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0ZXh0IG9mZnNldCBvZiBhIG5vZGUgcmVsYXRpdmUgdG8gb25lIG9mIGl0cyBhbmNlc3RvcnMuIFRoZSB0ZXh0XG4gKiBsZW5ndGggaXMgdGhlIHNhbWUgYXMgdGhlIGxlbmd0aCBjYWxjdWxhdGVkIGJ5IGdvb2cuZG9tLmdldE5vZGVUZXh0TGVuZ3RoLlxuICpcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgbm9kZSB3aG9zZSBvZmZzZXQgaXMgYmVpbmcgY2FsY3VsYXRlZC5cbiAqIEBwYXJhbSB7Tm9kZT19IG9wdF9vZmZzZXRQYXJlbnQgVGhlIG5vZGUgcmVsYXRpdmUgdG8gd2hpY2ggdGhlIG9mZnNldCB3aWxsXG4gKiAgICAgYmUgY2FsY3VsYXRlZC4gRGVmYXVsdHMgdG8gdGhlIG5vZGUncyBvd25lciBkb2N1bWVudCdzIGJvZHkuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB0ZXh0IG9mZnNldC5cbiAqL1xuZ29vZy5kb20uZ2V0Tm9kZVRleHRPZmZzZXQgPSBmdW5jdGlvbihub2RlLCBvcHRfb2Zmc2V0UGFyZW50KSB7XG4gIHZhciByb290ID0gb3B0X29mZnNldFBhcmVudCB8fCBnb29nLmRvbS5nZXRPd25lckRvY3VtZW50KG5vZGUpLmJvZHk7XG4gIHZhciBidWYgPSBbXTtcbiAgd2hpbGUgKG5vZGUgJiYgbm9kZSAhPSByb290KSB7XG4gICAgdmFyIGN1ciA9IG5vZGU7XG4gICAgd2hpbGUgKChjdXIgPSBjdXIucHJldmlvdXNTaWJsaW5nKSkge1xuICAgICAgYnVmLnVuc2hpZnQoZ29vZy5kb20uZ2V0VGV4dENvbnRlbnQoY3VyKSk7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbiAgLy8gVHJpbSBsZWZ0IHRvIGRlYWwgd2l0aCBGRiBjYXNlcyB3aGVuIHRoZXJlIG1pZ2h0IGJlIGxpbmUgYnJlYWtzIGFuZCBlbXB0eVxuICAvLyBub2RlcyBhdCB0aGUgZnJvbnQgb2YgdGhlIHRleHRcbiAgcmV0dXJuIGdvb2cuc3RyaW5nLnRyaW1MZWZ0KGJ1Zi5qb2luKCcnKSkucmVwbGFjZSgvICsvZywgJyAnKS5sZW5ndGg7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgbm9kZSBhdCBhIGdpdmVuIG9mZnNldCBpbiBhIHBhcmVudCBub2RlLiAgSWYgYW4gb2JqZWN0IGlzXG4gKiBwcm92aWRlZCBmb3IgdGhlIG9wdGlvbmFsIHRoaXJkIHBhcmFtZXRlciwgdGhlIG5vZGUgYW5kIHRoZSByZW1haW5kZXIgb2YgdGhlXG4gKiBvZmZzZXQgd2lsbCBzdG9yZWQgYXMgcHJvcGVydGllcyBvZiB0aGlzIG9iamVjdC5cbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50IFRoZSBwYXJlbnQgbm9kZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCBpbnRvIHRoZSBwYXJlbnQgbm9kZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3Jlc3VsdCBPYmplY3QgdG8gYmUgdXNlZCB0byBzdG9yZSB0aGUgcmV0dXJuIHZhbHVlLiBUaGVcbiAqICAgICByZXR1cm4gdmFsdWUgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGZvcm0ge25vZGU6IE5vZGUsIHJlbWFpbmRlcjogbnVtYmVyfVxuICogICAgIGlmIHRoaXMgb2JqZWN0IGlzIHByb3ZpZGVkLlxuICogQHJldHVybiB7Tm9kZX0gVGhlIG5vZGUgYXQgdGhlIGdpdmVuIG9mZnNldC5cbiAqL1xuZ29vZy5kb20uZ2V0Tm9kZUF0T2Zmc2V0ID0gZnVuY3Rpb24ocGFyZW50LCBvZmZzZXQsIG9wdF9yZXN1bHQpIHtcbiAgdmFyIHN0YWNrID0gW3BhcmVudF0sIHBvcyA9IDAsIGN1ciA9IG51bGw7XG4gIHdoaWxlIChzdGFjay5sZW5ndGggPiAwICYmIHBvcyA8IG9mZnNldCkge1xuICAgIGN1ciA9IHN0YWNrLnBvcCgpO1xuICAgIGlmIChjdXIubm9kZU5hbWUgaW4gZ29vZy5kb20uVEFHU19UT19JR05PUkVfKSB7XG4gICAgICAvLyBpZ25vcmUgY2VydGFpbiB0YWdzXG4gICAgfSBlbHNlIGlmIChjdXIubm9kZVR5cGUgPT0gZ29vZy5kb20uTm9kZVR5cGUuVEVYVCkge1xuICAgICAgdmFyIHRleHQgPSBjdXIubm9kZVZhbHVlLnJlcGxhY2UoLyhcXHJcXG58XFxyfFxcbikvZywgJycpLnJlcGxhY2UoLyArL2csICcgJyk7XG4gICAgICBwb3MgKz0gdGV4dC5sZW5ndGg7XG4gICAgfSBlbHNlIGlmIChjdXIubm9kZU5hbWUgaW4gZ29vZy5kb20uUFJFREVGSU5FRF9UQUdfVkFMVUVTXykge1xuICAgICAgcG9zICs9IGdvb2cuZG9tLlBSRURFRklORURfVEFHX1ZBTFVFU19bY3VyLm5vZGVOYW1lXS5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSBjdXIuY2hpbGROb2Rlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBzdGFjay5wdXNoKGN1ci5jaGlsZE5vZGVzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGdvb2cuaXNPYmplY3Qob3B0X3Jlc3VsdCkpIHtcbiAgICBvcHRfcmVzdWx0LnJlbWFpbmRlciA9IGN1ciA/IGN1ci5ub2RlVmFsdWUubGVuZ3RoICsgb2Zmc2V0IC0gcG9zIC0gMSA6IDA7XG4gICAgb3B0X3Jlc3VsdC5ub2RlID0gY3VyO1xuICB9XG5cbiAgcmV0dXJuIGN1cjtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIG9iamVjdCBpcyBhIHtAY29kZSBOb2RlTGlzdH0uICBUbyBxdWFsaWZ5IGFzIGEgTm9kZUxpc3QsXG4gKiB0aGUgb2JqZWN0IG11c3QgaGF2ZSBhIG51bWVyaWMgbGVuZ3RoIHByb3BlcnR5IGFuZCBhbiBpdGVtIGZ1bmN0aW9uICh3aGljaFxuICogaGFzIHR5cGUgJ3N0cmluZycgb24gSUUgZm9yIHNvbWUgcmVhc29uKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgT2JqZWN0IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBvYmplY3QgaXMgYSBOb2RlTGlzdC5cbiAqL1xuZ29vZy5kb20uaXNOb2RlTGlzdCA9IGZ1bmN0aW9uKHZhbCkge1xuICAvLyBUT0RPKGF0dGlsYSk6IE5vdyB0aGUgaXNOb2RlTGlzdCBpcyBwYXJ0IG9mIGdvb2cuZG9tIHdlIGNhbiB1c2VcbiAgLy8gZ29vZy51c2VyQWdlbnQgdG8gbWFrZSB0aGlzIHNpbXBsZXIuXG4gIC8vIEEgTm9kZUxpc3QgbXVzdCBoYXZlIGEgbGVuZ3RoIHByb3BlcnR5IG9mIHR5cGUgJ251bWJlcicgb24gYWxsIHBsYXRmb3Jtcy5cbiAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsLmxlbmd0aCA9PSAnbnVtYmVyJykge1xuICAgIC8vIEEgTm9kZUxpc3QgaXMgYW4gb2JqZWN0IGV2ZXJ5d2hlcmUgZXhjZXB0IFNhZmFyaSwgd2hlcmUgaXQncyBhIGZ1bmN0aW9uLlxuICAgIGlmIChnb29nLmlzT2JqZWN0KHZhbCkpIHtcbiAgICAgIC8vIEEgTm9kZUxpc3QgbXVzdCBoYXZlIGFuIGl0ZW0gZnVuY3Rpb24gKG9uIG5vbi1JRSBwbGF0Zm9ybXMpIG9yIGFuIGl0ZW1cbiAgICAgIC8vIHByb3BlcnR5IG9mIHR5cGUgJ3N0cmluZycgKG9uIElFKS5cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsLml0ZW0gPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgdmFsLml0ZW0gPT0gJ3N0cmluZyc7XG4gICAgfSBlbHNlIGlmIChnb29nLmlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgLy8gT24gU2FmYXJpLCBhIE5vZGVMaXN0IGlzIGEgZnVuY3Rpb24gd2l0aCBhbiBpdGVtIHByb3BlcnR5IHRoYXQgaXMgYWxzb1xuICAgICAgLy8gYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsLml0ZW0gPT0gJ2Z1bmN0aW9uJztcbiAgICB9XG4gIH1cblxuICAvLyBOb3QgYSBOb2RlTGlzdC5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIFdhbGtzIHVwIHRoZSBET00gaGllcmFyY2h5IHJldHVybmluZyB0aGUgZmlyc3QgYW5jZXN0b3IgdGhhdCBoYXMgdGhlIHBhc3NlZFxuICogdGFnIG5hbWUgYW5kL29yIGNsYXNzIG5hbWUuIElmIHRoZSBwYXNzZWQgZWxlbWVudCBtYXRjaGVzIHRoZSBzcGVjaWZpZWRcbiAqIGNyaXRlcmlhLCB0aGUgZWxlbWVudCBpdHNlbGYgaXMgcmV0dXJuZWQuXG4gKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIERPTSBub2RlIHRvIHN0YXJ0IHdpdGguXG4gKiBAcGFyYW0gez8oZ29vZy5kb20uVGFnTmFtZXxzdHJpbmcpPX0gb3B0X3RhZyBUaGUgdGFnIG5hbWUgdG8gbWF0Y2ggKG9yXG4gKiAgICAgbnVsbC91bmRlZmluZWQgdG8gbWF0Y2ggb25seSBiYXNlZCBvbiBjbGFzcyBuYW1lKS5cbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9jbGFzcyBUaGUgY2xhc3MgbmFtZSB0byBtYXRjaCAob3IgbnVsbC91bmRlZmluZWQgdG9cbiAqICAgICBtYXRjaCBvbmx5IGJhc2VkIG9uIHRhZyBuYW1lKS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X21heFNlYXJjaFN0ZXBzIE1heGltdW0gbnVtYmVyIG9mIGxldmVscyB0byBzZWFyY2ggdXAgdGhlXG4gKiAgICAgZG9tLlxuICogQHJldHVybiB7RWxlbWVudH0gVGhlIGZpcnN0IGFuY2VzdG9yIHRoYXQgbWF0Y2hlcyB0aGUgcGFzc2VkIGNyaXRlcmlhLCBvclxuICogICAgIG51bGwgaWYgbm8gbWF0Y2ggaXMgZm91bmQuXG4gKi9cbmdvb2cuZG9tLmdldEFuY2VzdG9yQnlUYWdOYW1lQW5kQ2xhc3MgPSBmdW5jdGlvbihlbGVtZW50LCBvcHRfdGFnLCBvcHRfY2xhc3MsXG4gICAgb3B0X21heFNlYXJjaFN0ZXBzKSB7XG4gIGlmICghb3B0X3RhZyAmJiAhb3B0X2NsYXNzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHRhZ05hbWUgPSBvcHRfdGFnID8gb3B0X3RhZy50b1VwcGVyQ2FzZSgpIDogbnVsbDtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKGdvb2cuZG9tLmdldEFuY2VzdG9yKGVsZW1lbnQsXG4gICAgICBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiAoIXRhZ05hbWUgfHwgbm9kZS5ub2RlTmFtZSA9PSB0YWdOYW1lKSAmJlxuICAgICAgICAgICAgICAgKCFvcHRfY2xhc3MgfHwgZ29vZy5pc1N0cmluZyhub2RlLmNsYXNzTmFtZSkgJiZcbiAgICAgICAgICAgICAgICAgICBnb29nLmFycmF5LmNvbnRhaW5zKG5vZGUuY2xhc3NOYW1lLnNwbGl0KC9cXHMrLyksIG9wdF9jbGFzcykpO1xuICAgICAgfSwgdHJ1ZSwgb3B0X21heFNlYXJjaFN0ZXBzKSk7XG59O1xuXG5cbi8qKlxuICogV2Fsa3MgdXAgdGhlIERPTSBoaWVyYXJjaHkgcmV0dXJuaW5nIHRoZSBmaXJzdCBhbmNlc3RvciB0aGF0IGhhcyB0aGUgcGFzc2VkXG4gKiBjbGFzcyBuYW1lLiBJZiB0aGUgcGFzc2VkIGVsZW1lbnQgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIGNyaXRlcmlhLCB0aGVcbiAqIGVsZW1lbnQgaXRzZWxmIGlzIHJldHVybmVkLlxuICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBET00gbm9kZSB0byBzdGFydCB3aXRoLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBUaGUgY2xhc3MgbmFtZSB0byBtYXRjaC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X21heFNlYXJjaFN0ZXBzIE1heGltdW0gbnVtYmVyIG9mIGxldmVscyB0byBzZWFyY2ggdXAgdGhlXG4gKiAgICAgZG9tLlxuICogQHJldHVybiB7RWxlbWVudH0gVGhlIGZpcnN0IGFuY2VzdG9yIHRoYXQgbWF0Y2hlcyB0aGUgcGFzc2VkIGNyaXRlcmlhLCBvclxuICogICAgIG51bGwgaWYgbm9uZSBtYXRjaC5cbiAqL1xuZ29vZy5kb20uZ2V0QW5jZXN0b3JCeUNsYXNzID0gZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRfbWF4U2VhcmNoU3RlcHMpIHtcbiAgcmV0dXJuIGdvb2cuZG9tLmdldEFuY2VzdG9yQnlUYWdOYW1lQW5kQ2xhc3MoZWxlbWVudCwgbnVsbCwgY2xhc3NOYW1lLFxuICAgICAgb3B0X21heFNlYXJjaFN0ZXBzKTtcbn07XG5cblxuLyoqXG4gKiBXYWxrcyB1cCB0aGUgRE9NIGhpZXJhcmNoeSByZXR1cm5pbmcgdGhlIGZpcnN0IGFuY2VzdG9yIHRoYXQgcGFzc2VzIHRoZVxuICogbWF0Y2hlciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBUaGUgRE9NIG5vZGUgdG8gc3RhcnQgd2l0aC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oTm9kZSkgOiBib29sZWFufSBtYXRjaGVyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgaWYgdGhlXG4gKiAgICAgcGFzc2VkIG5vZGUgbWF0Y2hlcyB0aGUgZGVzaXJlZCBjcml0ZXJpYS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlTm9kZSBJZiB0cnVlLCB0aGUgbm9kZSBpdHNlbGYgaXMgaW5jbHVkZWQgaW5cbiAqICAgICB0aGUgc2VhcmNoICh0aGUgZmlyc3QgY2FsbCB0byB0aGUgbWF0Y2hlciB3aWxsIHBhc3Mgc3RhcnRFbGVtZW50IGFzXG4gKiAgICAgdGhlIG5vZGUgdG8gdGVzdCkuXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9tYXhTZWFyY2hTdGVwcyBNYXhpbXVtIG51bWJlciBvZiBsZXZlbHMgdG8gc2VhcmNoIHVwIHRoZVxuICogICAgIGRvbS5cbiAqIEByZXR1cm4ge05vZGV9IERPTSBub2RlIHRoYXQgbWF0Y2hlZCB0aGUgbWF0Y2hlciwgb3IgbnVsbCBpZiB0aGVyZSB3YXNcbiAqICAgICBubyBtYXRjaC5cbiAqL1xuZ29vZy5kb20uZ2V0QW5jZXN0b3IgPSBmdW5jdGlvbihcbiAgICBlbGVtZW50LCBtYXRjaGVyLCBvcHRfaW5jbHVkZU5vZGUsIG9wdF9tYXhTZWFyY2hTdGVwcykge1xuICBpZiAoIW9wdF9pbmNsdWRlTm9kZSkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gIH1cbiAgdmFyIGlnbm9yZVNlYXJjaFN0ZXBzID0gb3B0X21heFNlYXJjaFN0ZXBzID09IG51bGw7XG4gIHZhciBzdGVwcyA9IDA7XG4gIHdoaWxlIChlbGVtZW50ICYmIChpZ25vcmVTZWFyY2hTdGVwcyB8fCBzdGVwcyA8PSBvcHRfbWF4U2VhcmNoU3RlcHMpKSB7XG4gICAgZ29vZy5hc3NlcnRzLmFzc2VydChlbGVtZW50Lm5hbWUgIT0gJ3BhcmVudE5vZGUnKTtcbiAgICBpZiAobWF0Y2hlcihlbGVtZW50KSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgc3RlcHMrKztcbiAgfVxuICAvLyBSZWFjaGVkIHRoZSByb290IG9mIHRoZSBET00gd2l0aG91dCBhIG1hdGNoXG4gIHJldHVybiBudWxsO1xufTtcblxuXG4vKipcbiAqIERldGVybWluZXMgdGhlIGFjdGl2ZSBlbGVtZW50IGluIHRoZSBnaXZlbiBkb2N1bWVudC5cbiAqIEBwYXJhbSB7RG9jdW1lbnR9IGRvYyBUaGUgZG9jdW1lbnQgdG8gbG9vayBpbi5cbiAqIEByZXR1cm4ge0VsZW1lbnR9IFRoZSBhY3RpdmUgZWxlbWVudC5cbiAqL1xuZ29vZy5kb20uZ2V0QWN0aXZlRWxlbWVudCA9IGZ1bmN0aW9uKGRvYykge1xuICB0cnkge1xuICAgIHJldHVybiBkb2MgJiYgZG9jLmFjdGl2ZUVsZW1lbnQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBOT1RFKG5pY2tzYW50b3MpOiBTb21ldGltZXMsIGV2YWx1YXRpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbiBJRVxuICAgIC8vIHRocm93cyBhbiBleGNlcHRpb24uIEknbSBub3QgMTAwJSBzdXJlIHdoeSwgYnV0IEkgc3VzcGVjdCBpdCBjaG9rZXNcbiAgICAvLyBvbiBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZSBhY3RpdmVFbGVtZW50IGhhcyBiZWVuIHJlY2VudGx5XG4gICAgLy8gcmVtb3ZlZCBmcm9tIHRoZSBET00gYnkgYSBKUyBvcGVyYXRpb24uXG4gICAgLy9cbiAgICAvLyBXZSBhc3N1bWUgdGhhdCBhbiBleGNlcHRpb24gaGVyZSBzaW1wbHkgbWVhbnNcbiAgICAvLyBcInRoZXJlIGlzIG5vIGFjdGl2ZSBlbGVtZW50LlwiXG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBHaXZlcyB0aGUgY3VycmVudCBkZXZpY2VQaXhlbFJhdGlvLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHZhbHVlIG9mIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICh3aGljaCBzaG91bGQgYmVcbiAqIHByZWZlcnJlZCBpZiBwcmVzZW50KS5cbiAqXG4gKiBJZiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyBpcyBub3QgcHJlc2VudCwgdGhlIHJhdGlvIGlzIGNhbGN1bGF0ZWQgd2l0aFxuICogd2luZG93Lm1hdGNoTWVkaWEsIGlmIHByZXNlbnQuIE90aGVyd2lzZSwgZ2l2ZXMgMS4wLlxuICpcbiAqIFNvbWUgYnJvd3NlcnMgKGluY2x1ZGluZyBDaHJvbWUpIGNvbnNpZGVyIHRoZSBicm93c2VyIHpvb20gbGV2ZWwgaW4gdGhlIHBpeGVsXG4gKiByYXRpbywgc28gdGhlIHZhbHVlIG1heSBjaGFuZ2UgYWNyb3NzIG11bHRpcGxlIGNhbGxzLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBhY3R1YWwgcGl4ZWxzIHBlciB2aXJ0dWFsIHBpeGVsLlxuICovXG5nb29nLmRvbS5nZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3aW4gPSBnb29nLmRvbS5nZXRXaW5kb3coKTtcbiAgaWYgKGdvb2cuaXNEZWYod2luLmRldmljZVBpeGVsUmF0aW8pKSB7XG4gICAgcmV0dXJuIHdpbi5kZXZpY2VQaXhlbFJhdGlvO1xuICB9IGVsc2UgaWYgKHdpbi5tYXRjaE1lZGlhKSB7XG4gICAgcmV0dXJuIGdvb2cuZG9tLm1hdGNoZXNQaXhlbFJhdGlvXyguNzUpIHx8XG4gICAgICAgICAgIGdvb2cuZG9tLm1hdGNoZXNQaXhlbFJhdGlvXygxLjUpIHx8XG4gICAgICAgICAgIGdvb2cuZG9tLm1hdGNoZXNQaXhlbFJhdGlvXygyKSB8fFxuICAgICAgICAgICBnb29nLmRvbS5tYXRjaGVzUGl4ZWxSYXRpb18oMykgfHwgMTtcbiAgfVxuICByZXR1cm4gMTtcbn07XG5cblxuLyoqXG4gKiBDYWxjdWxhdGVzIGEgbWVkaWFRdWVyeSB0byBjaGVjayBpZiB0aGUgY3VycmVudCBkZXZpY2Ugc3VwcG9ydHMgdGhlXG4gKiBnaXZlbiBhY3R1YWwgdG8gdmlydHVhbCBwaXhlbCByYXRpby5cbiAqIEBwYXJhbSB7bnVtYmVyfSBwaXhlbFJhdGlvIFRoZSByYXRpbyBvZiBhY3R1YWwgcGl4ZWxzIHRvIHZpcnR1YWwgcGl4ZWxzLlxuICogQHJldHVybiB7bnVtYmVyfSBwaXhlbFJhdGlvIGlmIGFwcGxpY2FibGUsIG90aGVyd2lzZSAwLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kb20ubWF0Y2hlc1BpeGVsUmF0aW9fID0gZnVuY3Rpb24ocGl4ZWxSYXRpbykge1xuICB2YXIgd2luID0gZ29vZy5kb20uZ2V0V2luZG93KCk7XG4gIHZhciBxdWVyeSA9ICgnKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogJyArIHBpeGVsUmF0aW8gKyAnKSwnICtcbiAgICAgICAgICAgICAgICcobWluLS1tb3otZGV2aWNlLXBpeGVsLXJhdGlvOiAnICsgcGl4ZWxSYXRpbyArICcpLCcgK1xuICAgICAgICAgICAgICAgJyhtaW4tcmVzb2x1dGlvbjogJyArIHBpeGVsUmF0aW8gKyAnZHBweCknKTtcbiAgcmV0dXJuIHdpbi5tYXRjaE1lZGlhKHF1ZXJ5KS5tYXRjaGVzID8gcGl4ZWxSYXRpbyA6IDA7XG59O1xuXG5cblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgYSBET00gaGVscGVyIHdpdGggYSBuZXcgZG9jdW1lbnQgb2JqZWN0LlxuICogQHBhcmFtIHtEb2N1bWVudD19IG9wdF9kb2N1bWVudCBEb2N1bWVudCBvYmplY3QgdG8gYXNzb2NpYXRlIHdpdGggdGhpc1xuICogICAgIERPTSBoZWxwZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyID0gZnVuY3Rpb24ob3B0X2RvY3VtZW50KSB7XG4gIC8qKlxuICAgKiBSZWZlcmVuY2UgdG8gdGhlIGRvY3VtZW50IG9iamVjdCB0byB1c2VcbiAgICogQHR5cGUgeyFEb2N1bWVudH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZG9jdW1lbnRfID0gb3B0X2RvY3VtZW50IHx8IGdvb2cuZ2xvYmFsLmRvY3VtZW50IHx8IGRvY3VtZW50O1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIGRvbSBoZWxwZXIgb2JqZWN0IGZvciB0aGUgZG9jdW1lbnQgd2hlcmUgdGhlIGVsZW1lbnQgcmVzaWRlcy5cbiAqIEBwYXJhbSB7Tm9kZT19IG9wdF9ub2RlIElmIHByZXNlbnQsIGdldHMgdGhlIERvbUhlbHBlciBmb3IgdGhpcyBub2RlLlxuICogQHJldHVybiB7IWdvb2cuZG9tLkRvbUhlbHBlcn0gVGhlIERvbUhlbHBlci5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXREb21IZWxwZXIgPSBnb29nLmRvbS5nZXREb21IZWxwZXI7XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBkb2N1bWVudCBvYmplY3QuXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jdW1lbnQgRG9jdW1lbnQgb2JqZWN0LlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oZG9jdW1lbnQpIHtcbiAgdGhpcy5kb2N1bWVudF8gPSBkb2N1bWVudDtcbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBkb2N1bWVudCBvYmplY3QgYmVpbmcgdXNlZCBieSB0aGUgZG9tIGxpYnJhcnkuXG4gKiBAcmV0dXJuIHshRG9jdW1lbnR9IERvY3VtZW50IG9iamVjdC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXREb2N1bWVudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5kb2N1bWVudF87XG59O1xuXG5cbi8qKlxuICogQWxpYXMgZm9yIHtAY29kZSBnZXRFbGVtZW50QnlJZH0uIElmIGEgRE9NIG5vZGUgaXMgcGFzc2VkIGluIHRoZW4gd2UganVzdFxuICogcmV0dXJuIHRoYXQuXG4gKiBAcGFyYW0ge3N0cmluZ3xFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgSUQgb3IgYSBET00gbm9kZS5cbiAqIEByZXR1cm4ge0VsZW1lbnR9IFRoZSBlbGVtZW50IHdpdGggdGhlIGdpdmVuIElELCBvciB0aGUgbm9kZSBwYXNzZWQgaW4uXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdvb2cuZG9tLmdldEVsZW1lbnRIZWxwZXJfKHRoaXMuZG9jdW1lbnRfLCBlbGVtZW50KTtcbn07XG5cblxuLyoqXG4gKiBHZXRzIGFuIGVsZW1lbnQgYnkgaWQsIGFzc2VydGluZyB0aGF0IHRoZSBlbGVtZW50IGlzIGZvdW5kLlxuICpcbiAqIFRoaXMgaXMgdXNlZCB3aGVuIGFuIGVsZW1lbnQgaXMgZXhwZWN0ZWQgdG8gZXhpc3QsIGFuZCBzaG91bGQgZmFpbCB3aXRoXG4gKiBhbiBhc3NlcnRpb24gZXJyb3IgaWYgaXQgZG9lcyBub3QgKGlmIGFzc2VydGlvbnMgYXJlIGVuYWJsZWQpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBFbGVtZW50IElELlxuICogQHJldHVybiB7IUVsZW1lbnR9IFRoZSBlbGVtZW50IHdpdGggdGhlIGdpdmVuIElELCBpZiBpdCBleGlzdHMuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuZ2V0UmVxdWlyZWRFbGVtZW50ID0gZnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIGdvb2cuZG9tLmdldFJlcXVpcmVkRWxlbWVudEhlbHBlcl8odGhpcy5kb2N1bWVudF8sIGlkKTtcbn07XG5cblxuLyoqXG4gKiBBbGlhcyBmb3Ige0Bjb2RlIGdldEVsZW1lbnR9LlxuICogQHBhcmFtIHtzdHJpbmd8RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IElEIG9yIGEgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgZWxlbWVudCB3aXRoIHRoZSBnaXZlbiBJRCwgb3IgdGhlIG5vZGUgcGFzc2VkIGluLlxuICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBnb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmdldEVsZW1lbnR9IGluc3RlYWQuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuJCA9IGdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuZ2V0RWxlbWVudDtcblxuXG4vKipcbiAqIExvb2tzIHVwIGVsZW1lbnRzIGJ5IGJvdGggdGFnIGFuZCBjbGFzcyBuYW1lLCB1c2luZyBicm93c2VyIG5hdGl2ZSBmdW5jdGlvbnNcbiAqICh7QGNvZGUgcXVlcnlTZWxlY3RvckFsbH0sIHtAY29kZSBnZXRFbGVtZW50c0J5VGFnTmFtZX0gb3JcbiAqIHtAY29kZSBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lfSkgd2hlcmUgcG9zc2libGUuIFRoZSByZXR1cm5lZCBhcnJheSBpcyBhIGxpdmVcbiAqIE5vZGVMaXN0IG9yIGEgc3RhdGljIGxpc3QgZGVwZW5kaW5nIG9uIHRoZSBjb2RlIHBhdGggdGFrZW4uXG4gKlxuICogQHNlZSBnb29nLmRvbS5xdWVyeVxuICpcbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF90YWcgRWxlbWVudCB0YWcgbmFtZSBvciAqIGZvciBhbGwgdGFncy5cbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9jbGFzcyBPcHRpb25hbCBjbGFzcyBuYW1lLlxuICogQHBhcmFtIHsoRG9jdW1lbnR8RWxlbWVudCk9fSBvcHRfZWwgT3B0aW9uYWwgZWxlbWVudCB0byBsb29rIGluLlxuICogQHJldHVybiB7IHtsZW5ndGg6IG51bWJlcn0gfSBBcnJheS1saWtlIGxpc3Qgb2YgZWxlbWVudHMgKG9ubHkgYSBsZW5ndGhcbiAqICAgICBwcm9wZXJ0eSBhbmQgbnVtZXJpY2FsIGluZGljZXMgYXJlIGd1YXJhbnRlZWQgdG8gZXhpc3QpLlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lQW5kQ2xhc3MgPSBmdW5jdGlvbihvcHRfdGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0X2NsYXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0X2VsKSB7XG4gIHJldHVybiBnb29nLmRvbS5nZXRFbGVtZW50c0J5VGFnTmFtZUFuZENsYXNzXyh0aGlzLmRvY3VtZW50Xywgb3B0X3RhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdF9jbGFzcywgb3B0X2VsKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgZWxlbWVudHMgd2l0aCB0aGUgcHJvdmlkZWQgY2xhc3NOYW1lLlxuICogQHNlZSB7Z29vZy5kb20ucXVlcnl9XG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBuYW1lIG9mIHRoZSBjbGFzcyB0byBsb29rIGZvci5cbiAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudD19IG9wdF9lbCBPcHRpb25hbCBlbGVtZW50IHRvIGxvb2sgaW4uXG4gKiBAcmV0dXJuIHsge2xlbmd0aDogbnVtYmVyfSB9IFRoZSBpdGVtcyBmb3VuZCB3aXRoIHRoZSBjbGFzcyBuYW1lIHByb3ZpZGVkLlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmdldEVsZW1lbnRzQnlDbGFzcyA9IGZ1bmN0aW9uKGNsYXNzTmFtZSwgb3B0X2VsKSB7XG4gIHZhciBkb2MgPSBvcHRfZWwgfHwgdGhpcy5kb2N1bWVudF87XG4gIHJldHVybiBnb29nLmRvbS5nZXRFbGVtZW50c0J5Q2xhc3MoY2xhc3NOYW1lLCBkb2MpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgd2UgZmluZCBtYXRjaGluZyB0aGUgcHJvdmlkZWQgY2xhc3MgbmFtZS5cbiAqIEBzZWUge2dvb2cuZG9tLnF1ZXJ5fVxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgbmFtZSBvZiB0aGUgY2xhc3MgdG8gbG9vayBmb3IuXG4gKiBAcGFyYW0geyhFbGVtZW50fERvY3VtZW50KT19IG9wdF9lbCBPcHRpb25hbCBlbGVtZW50IHRvIGxvb2sgaW4uXG4gKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgZmlyc3QgaXRlbSBmb3VuZCB3aXRoIHRoZSBjbGFzcyBuYW1lIHByb3ZpZGVkLlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmdldEVsZW1lbnRCeUNsYXNzID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBvcHRfZWwpIHtcbiAgdmFyIGRvYyA9IG9wdF9lbCB8fCB0aGlzLmRvY3VtZW50XztcbiAgcmV0dXJuIGdvb2cuZG9tLmdldEVsZW1lbnRCeUNsYXNzKGNsYXNzTmFtZSwgZG9jKTtcbn07XG5cblxuLyoqXG4gKiBFbnN1cmVzIGFuIGVsZW1lbnQgd2l0aCB0aGUgZ2l2ZW4gY2xhc3NOYW1lIGV4aXN0cywgYW5kIHRoZW4gcmV0dXJucyB0aGVcbiAqIGZpcnN0IGVsZW1lbnQgd2l0aCB0aGUgcHJvdmlkZWQgY2xhc3NOYW1lLlxuICogQHNlZSB7Z29vZy5kb20ucXVlcnl9XG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBuYW1lIG9mIHRoZSBjbGFzcyB0byBsb29rIGZvci5cbiAqIEBwYXJhbSB7KCFFbGVtZW50fCFEb2N1bWVudCk9fSBvcHRfcm9vdCBPcHRpb25hbCBlbGVtZW50IG9yIGRvY3VtZW50IHRvIGxvb2tcbiAqICAgICBpbi5cbiAqIEByZXR1cm4geyFFbGVtZW50fSBUaGUgZmlyc3QgaXRlbSBmb3VuZCB3aXRoIHRoZSBjbGFzcyBuYW1lIHByb3ZpZGVkLlxuICogQHRocm93cyB7Z29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yfSBUaHJvd24gaWYgbm8gZWxlbWVudCBpcyBmb3VuZC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXRSZXF1aXJlZEVsZW1lbnRCeUNsYXNzID0gZnVuY3Rpb24oY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0X3Jvb3QpIHtcbiAgdmFyIHJvb3QgPSBvcHRfcm9vdCB8fCB0aGlzLmRvY3VtZW50XztcbiAgcmV0dXJuIGdvb2cuZG9tLmdldFJlcXVpcmVkRWxlbWVudEJ5Q2xhc3MoY2xhc3NOYW1lLCByb290KTtcbn07XG5cblxuLyoqXG4gKiBBbGlhcyBmb3Ige0Bjb2RlIGdldEVsZW1lbnRzQnlUYWdOYW1lQW5kQ2xhc3N9LlxuICogQGRlcHJlY2F0ZWQgVXNlIERvbUhlbHBlciBnZXRFbGVtZW50c0J5VGFnTmFtZUFuZENsYXNzLlxuICogQHNlZSBnb29nLmRvbS5xdWVyeVxuICpcbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF90YWcgRWxlbWVudCB0YWcgbmFtZS5cbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9jbGFzcyBPcHRpb25hbCBjbGFzcyBuYW1lLlxuICogQHBhcmFtIHtFbGVtZW50PX0gb3B0X2VsIE9wdGlvbmFsIGVsZW1lbnQgdG8gbG9vayBpbi5cbiAqIEByZXR1cm4geyB7bGVuZ3RoOiBudW1iZXJ9IH0gQXJyYXktbGlrZSBsaXN0IG9mIGVsZW1lbnRzIChvbmx5IGEgbGVuZ3RoXG4gKiAgICAgcHJvcGVydHkgYW5kIG51bWVyaWNhbCBpbmRpY2VzIGFyZSBndWFyYW50ZWVkIHRvIGV4aXN0KS5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS4kJCA9XG4gICAgZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZUFuZENsYXNzO1xuXG5cbi8qKlxuICogU2V0cyBhIG51bWJlciBvZiBwcm9wZXJ0aWVzIG9uIGEgbm9kZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBET00gbm9kZSB0byBzZXQgcHJvcGVydGllcyBvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIEhhc2ggb2YgcHJvcGVydHk6dmFsdWUgcGFpcnMuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuc2V0UHJvcGVydGllcyA9IGdvb2cuZG9tLnNldFByb3BlcnRpZXM7XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBkaW1lbnNpb25zIG9mIHRoZSB2aWV3cG9ydC5cbiAqIEBwYXJhbSB7V2luZG93PX0gb3B0X3dpbmRvdyBPcHRpb25hbCB3aW5kb3cgZWxlbWVudCB0byB0ZXN0LiBEZWZhdWx0cyB0b1xuICogICAgIHRoZSB3aW5kb3cgb2YgdGhlIERvbSBIZWxwZXIuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLlNpemV9IE9iamVjdCB3aXRoIHZhbHVlcyAnd2lkdGgnIGFuZCAnaGVpZ2h0Jy5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXRWaWV3cG9ydFNpemUgPSBmdW5jdGlvbihvcHRfd2luZG93KSB7XG4gIC8vIFRPRE8oYXJ2KTogVGhpcyBzaG91bGQgbm90IHRha2UgYW4gYXJndW1lbnQuIFRoYXQgYnJlYWtzIHRoZSBydWxlIG9mIGFcbiAgLy8gYSBEb21IZWxwZXIgcmVwcmVzZW50aW5nIGEgc2luZ2xlIGZyYW1lL3dpbmRvdy9kb2N1bWVudC5cbiAgcmV0dXJuIGdvb2cuZG9tLmdldFZpZXdwb3J0U2l6ZShvcHRfd2luZG93IHx8IHRoaXMuZ2V0V2luZG93KCkpO1xufTtcblxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGhlaWdodCBvZiB0aGUgZG9jdW1lbnQuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgaGVpZ2h0IG9mIHRoZSBkb2N1bWVudC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXREb2N1bWVudEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5kb20uZ2V0RG9jdW1lbnRIZWlnaHRfKHRoaXMuZ2V0V2luZG93KCkpO1xufTtcblxuXG4vKipcbiAqIFR5cGVkZWYgZm9yIHVzZSB3aXRoIGdvb2cuZG9tLmNyZWF0ZURvbSBhbmQgZ29vZy5kb20uYXBwZW5kLlxuICogQHR5cGVkZWYge09iamVjdHxzdHJpbmd8QXJyYXl8Tm9kZUxpc3R9XG4gKi9cbmdvb2cuZG9tLkFwcGVuZGFibGU7XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgZG9tIG5vZGUgd2l0aCBhIHNldCBvZiBhdHRyaWJ1dGVzLiAgVGhpcyBmdW5jdGlvbiBhY2NlcHRzIHZhcmFyZ3NcbiAqIGZvciBzdWJzZXF1ZW50IG5vZGVzIHRvIGJlIGFkZGVkLiAgU3Vic2VxdWVudCBub2RlcyB3aWxsIGJlIGFkZGVkIHRvIHRoZVxuICogZmlyc3Qgbm9kZSBhcyBjaGlsZE5vZGVzLlxuICpcbiAqIFNvOlxuICogPGNvZGU+Y3JlYXRlRG9tKCdkaXYnLCBudWxsLCBjcmVhdGVEb20oJ3AnKSwgY3JlYXRlRG9tKCdwJykpOzwvY29kZT5cbiAqIHdvdWxkIHJldHVybiBhIGRpdiB3aXRoIHR3byBjaGlsZCBwYXJhZ3JhcGhzXG4gKlxuICogQW4gZWFzeSB3YXkgdG8gbW92ZSBhbGwgY2hpbGQgbm9kZXMgb2YgYW4gZXhpc3RpbmcgZWxlbWVudCB0byBhIG5ldyBwYXJlbnRcbiAqIGVsZW1lbnQgaXM6XG4gKiA8Y29kZT5jcmVhdGVEb20oJ2RpdicsIG51bGwsIG9sZEVsZW1lbnQuY2hpbGROb2Rlcyk7PC9jb2RlPlxuICogd2hpY2ggd2lsbCByZW1vdmUgYWxsIGNoaWxkIG5vZGVzIGZyb20gdGhlIG9sZCBlbGVtZW50IGFuZCBhZGQgdGhlbSBhc1xuICogY2hpbGQgbm9kZXMgb2YgdGhlIG5ldyBESVYuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWUgVGFnIHRvIGNyZWF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZz19IG9wdF9hdHRyaWJ1dGVzIElmIG9iamVjdCwgdGhlbiBhIG1hcCBvZiBuYW1lLXZhbHVlXG4gKiAgICAgcGFpcnMgZm9yIGF0dHJpYnV0ZXMuIElmIGEgc3RyaW5nLCB0aGVuIHRoaXMgaXMgdGhlIGNsYXNzTmFtZSBvZiB0aGUgbmV3XG4gKiAgICAgZWxlbWVudC5cbiAqIEBwYXJhbSB7Li4uZ29vZy5kb20uQXBwZW5kYWJsZX0gdmFyX2FyZ3MgRnVydGhlciBET00gbm9kZXMgb3JcbiAqICAgICBzdHJpbmdzIGZvciB0ZXh0IG5vZGVzLiBJZiBvbmUgb2YgdGhlIHZhcl9hcmdzIGlzIGFuIGFycmF5IG9yXG4gKiAgICAgTm9kZUxpc3QsIGl0cyBlbGVtZW50cyB3aWxsIGJlIGFkZGVkIGFzIGNoaWxkTm9kZXMgaW5zdGVhZC5cbiAqIEByZXR1cm4geyFFbGVtZW50fSBSZWZlcmVuY2UgdG8gYSBET00gbm9kZS5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5jcmVhdGVEb20gPSBmdW5jdGlvbih0YWdOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRfYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyX2FyZ3MpIHtcbiAgcmV0dXJuIGdvb2cuZG9tLmNyZWF0ZURvbV8odGhpcy5kb2N1bWVudF8sIGFyZ3VtZW50cyk7XG59O1xuXG5cbi8qKlxuICogQWxpYXMgZm9yIHtAY29kZSBjcmVhdGVEb219LlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWUgVGFnIHRvIGNyZWF0ZS5cbiAqIEBwYXJhbSB7KE9iamVjdHxzdHJpbmcpPX0gb3B0X2F0dHJpYnV0ZXMgSWYgb2JqZWN0LCB0aGVuIGEgbWFwIG9mIG5hbWUtdmFsdWVcbiAqICAgICBwYWlycyBmb3IgYXR0cmlidXRlcy4gSWYgYSBzdHJpbmcsIHRoZW4gdGhpcyBpcyB0aGUgY2xhc3NOYW1lIG9mIHRoZSBuZXdcbiAqICAgICBlbGVtZW50LlxuICogQHBhcmFtIHsuLi5nb29nLmRvbS5BcHBlbmRhYmxlfSB2YXJfYXJncyBGdXJ0aGVyIERPTSBub2RlcyBvciBzdHJpbmdzIGZvclxuICogICAgIHRleHQgbm9kZXMuICBJZiBvbmUgb2YgdGhlIHZhcl9hcmdzIGlzIGFuIGFycmF5LCBpdHMgY2hpbGRyZW4gd2lsbCBiZVxuICogICAgIGFkZGVkIGFzIGNoaWxkTm9kZXMgaW5zdGVhZC5cbiAqIEByZXR1cm4geyFFbGVtZW50fSBSZWZlcmVuY2UgdG8gYSBET00gbm9kZS5cbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5jcmVhdGVEb219IGluc3RlYWQuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuJGRvbSA9IGdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuY3JlYXRlRG9tO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBlbGVtZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGFnIG5hbWUuXG4gKiBAcmV0dXJuIHshRWxlbWVudH0gVGhlIG5ldyBlbGVtZW50LlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmRvY3VtZW50Xy5jcmVhdGVFbGVtZW50KG5hbWUpO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdGV4dCBub2RlLlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBjb250ZW50IENvbnRlbnQuXG4gKiBAcmV0dXJuIHshVGV4dH0gVGhlIG5ldyB0ZXh0IG5vZGUuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuY3JlYXRlVGV4dE5vZGUgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gIHJldHVybiB0aGlzLmRvY3VtZW50Xy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY29udGVudCkpO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZSBhIHRhYmxlLlxuICogQHBhcmFtIHtudW1iZXJ9IHJvd3MgVGhlIG51bWJlciBvZiByb3dzIGluIHRoZSB0YWJsZS4gIE11c3QgYmUgPj0gMS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5zIFRoZSBudW1iZXIgb2YgY29sdW1ucyBpbiB0aGUgdGFibGUuICBNdXN0IGJlID49IDEuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfZmlsbFdpdGhOYnNwIElmIHRydWUsIGZpbGxzIHRhYmxlIGVudHJpZXMgd2l0aFxuICogICAgIHtAY29kZSBnb29nLnN0cmluZy5Vbmljb2RlLk5CU1B9IGNoYXJhY3RlcnMuXG4gKiBAcmV0dXJuIHshSFRNTEVsZW1lbnR9IFRoZSBjcmVhdGVkIHRhYmxlLlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmNyZWF0ZVRhYmxlID0gZnVuY3Rpb24ocm93cywgY29sdW1ucyxcbiAgICBvcHRfZmlsbFdpdGhOYnNwKSB7XG4gIHJldHVybiBnb29nLmRvbS5jcmVhdGVUYWJsZV8odGhpcy5kb2N1bWVudF8sIHJvd3MsIGNvbHVtbnMsXG4gICAgICAhIW9wdF9maWxsV2l0aE5ic3ApO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIGFuIEhUTUwgaW50byBhIG5vZGUgb3IgYSBkb2N1bWVudCBmcmFnbWVudC4gQSBzaW5nbGUgTm9kZSBpcyB1c2VkIGlmXG4gKiB7QGNvZGUgaHRtbH0gb25seSBnZW5lcmF0ZXMgYSBzaW5nbGUgbm9kZS4gSWYge0Bjb2RlIGh0bWx9IGdlbmVyYXRlcyBtdWx0aXBsZVxuICogbm9kZXMgdGhlbiB0aGVzZSBhcmUgcHV0IGluc2lkZSBhIHtAY29kZSBEb2N1bWVudEZyYWdtZW50fS5cbiAqIEBwYXJhbSB7IWdvb2cuaHRtbC5TYWZlSHRtbH0gaHRtbCBUaGUgSFRNTCBtYXJrdXAgdG8gY29udmVydC5cbiAqIEByZXR1cm4geyFOb2RlfSBUaGUgcmVzdWx0aW5nIG5vZGUuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuc2FmZUh0bWxUb05vZGUgPSBmdW5jdGlvbihodG1sKSB7XG4gIHJldHVybiBnb29nLmRvbS5zYWZlSHRtbFRvTm9kZV8odGhpcy5kb2N1bWVudF8sIGh0bWwpO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIGFuIEhUTUwgc3RyaW5nIGludG8gYSBub2RlIG9yIGEgZG9jdW1lbnQgZnJhZ21lbnQuICBBIHNpbmdsZSBOb2RlXG4gKiBpcyB1c2VkIGlmIHRoZSB7QGNvZGUgaHRtbFN0cmluZ30gb25seSBnZW5lcmF0ZXMgYSBzaW5nbGUgbm9kZS4gIElmIHRoZVxuICoge0Bjb2RlIGh0bWxTdHJpbmd9IGdlbmVyYXRlcyBtdWx0aXBsZSBub2RlcyB0aGVuIHRoZXNlIGFyZSBwdXQgaW5zaWRlIGFcbiAqIHtAY29kZSBEb2N1bWVudEZyYWdtZW50fS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaHRtbFN0cmluZyBUaGUgSFRNTCBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm4geyFOb2RlfSBUaGUgcmVzdWx0aW5nIG5vZGUuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuaHRtbFRvRG9jdW1lbnRGcmFnbWVudCA9IGZ1bmN0aW9uKGh0bWxTdHJpbmcpIHtcbiAgcmV0dXJuIGdvb2cuZG9tLmh0bWxUb0RvY3VtZW50RnJhZ21lbnRfKHRoaXMuZG9jdW1lbnRfLCBodG1sU3RyaW5nKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGJyb3dzZXIgaXMgaW4gXCJDU1MxLWNvbXBhdGlibGVcIiAoc3RhbmRhcmRzLWNvbXBsaWFudClcbiAqIG1vZGUsIGZhbHNlIG90aGVyd2lzZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgaW4gQ1NTMS1jb21wYXRpYmxlIG1vZGUuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuaXNDc3MxQ29tcGF0TW9kZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5kb20uaXNDc3MxQ29tcGF0TW9kZV8odGhpcy5kb2N1bWVudF8pO1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIHdpbmRvdyBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoZSBkb2N1bWVudC5cbiAqIEByZXR1cm4geyFXaW5kb3d9IFRoZSB3aW5kb3cgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBkb2N1bWVudC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXRXaW5kb3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdvb2cuZG9tLmdldFdpbmRvd18odGhpcy5kb2N1bWVudF8pO1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIGRvY3VtZW50IHNjcm9sbCBlbGVtZW50LlxuICogQHJldHVybiB7IUVsZW1lbnR9IFNjcm9sbGluZyBlbGVtZW50LlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmdldERvY3VtZW50U2Nyb2xsRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5kb20uZ2V0RG9jdW1lbnRTY3JvbGxFbGVtZW50Xyh0aGlzLmRvY3VtZW50Xyk7XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgZG9jdW1lbnQgc2Nyb2xsIGRpc3RhbmNlIGFzIGEgY29vcmRpbmF0ZSBvYmplY3QuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkNvb3JkaW5hdGV9IE9iamVjdCB3aXRoIHByb3BlcnRpZXMgJ3gnIGFuZCAneScuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuZ2V0RG9jdW1lbnRTY3JvbGwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdvb2cuZG9tLmdldERvY3VtZW50U2Nyb2xsXyh0aGlzLmRvY3VtZW50Xyk7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyB0aGUgYWN0aXZlIGVsZW1lbnQgaW4gdGhlIGdpdmVuIGRvY3VtZW50LlxuICogQHBhcmFtIHtEb2N1bWVudD19IG9wdF9kb2MgVGhlIGRvY3VtZW50IHRvIGxvb2sgaW4uXG4gKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgYWN0aXZlIGVsZW1lbnQuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuZ2V0QWN0aXZlRWxlbWVudCA9IGZ1bmN0aW9uKG9wdF9kb2MpIHtcbiAgcmV0dXJuIGdvb2cuZG9tLmdldEFjdGl2ZUVsZW1lbnQob3B0X2RvYyB8fCB0aGlzLmRvY3VtZW50Xyk7XG59O1xuXG5cbi8qKlxuICogQXBwZW5kcyBhIGNoaWxkIHRvIGEgbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50IFBhcmVudC5cbiAqIEBwYXJhbSB7Tm9kZX0gY2hpbGQgQ2hpbGQuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuYXBwZW5kQ2hpbGQgPSBnb29nLmRvbS5hcHBlbmRDaGlsZDtcblxuXG4vKipcbiAqIEFwcGVuZHMgYSBub2RlIHdpdGggdGV4dCBvciBvdGhlciBub2Rlcy5cbiAqIEBwYXJhbSB7IU5vZGV9IHBhcmVudCBUaGUgbm9kZSB0byBhcHBlbmQgbm9kZXMgdG8uXG4gKiBAcGFyYW0gey4uLmdvb2cuZG9tLkFwcGVuZGFibGV9IHZhcl9hcmdzIFRoZSB0aGluZ3MgdG8gYXBwZW5kIHRvIHRoZSBub2RlLlxuICogICAgIElmIHRoaXMgaXMgYSBOb2RlIGl0IGlzIGFwcGVuZGVkIGFzIGlzLlxuICogICAgIElmIHRoaXMgaXMgYSBzdHJpbmcgdGhlbiBhIHRleHQgbm9kZSBpcyBhcHBlbmRlZC5cbiAqICAgICBJZiB0aGlzIGlzIGFuIGFycmF5IGxpa2Ugb2JqZWN0IHRoZW4gZmllbGRzIDAgdG8gbGVuZ3RoIC0gMSBhcmUgYXBwZW5kZWQuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuYXBwZW5kID0gZ29vZy5kb20uYXBwZW5kO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gbm9kZSBjYW4gY29udGFpbiBjaGlsZHJlbiwgaW50ZW5kZWQgdG8gYmUgdXNlZCBmb3JcbiAqIEhUTUwgZ2VuZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBub2RlIGNhbiBjb250YWluIGNoaWxkcmVuLlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmNhbkhhdmVDaGlsZHJlbiA9IGdvb2cuZG9tLmNhbkhhdmVDaGlsZHJlbjtcblxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIHRoZSBjaGlsZCBub2RlcyBvbiBhIERPTSBub2RlLlxuICogQHBhcmFtIHtOb2RlfSBub2RlIE5vZGUgdG8gcmVtb3ZlIGNoaWxkcmVuIGZyb20uXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUucmVtb3ZlQ2hpbGRyZW4gPSBnb29nLmRvbS5yZW1vdmVDaGlsZHJlbjtcblxuXG4vKipcbiAqIEluc2VydHMgYSBuZXcgbm9kZSBiZWZvcmUgYW4gZXhpc3RpbmcgcmVmZXJlbmNlIG5vZGUgKGkuZS4sIGFzIHRoZSBwcmV2aW91c1xuICogc2libGluZykuIElmIHRoZSByZWZlcmVuY2Ugbm9kZSBoYXMgbm8gcGFyZW50LCB0aGVuIGRvZXMgbm90aGluZy5cbiAqIEBwYXJhbSB7Tm9kZX0gbmV3Tm9kZSBOb2RlIHRvIGluc2VydC5cbiAqIEBwYXJhbSB7Tm9kZX0gcmVmTm9kZSBSZWZlcmVuY2Ugbm9kZSB0byBpbnNlcnQgYmVmb3JlLlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmluc2VydFNpYmxpbmdCZWZvcmUgPSBnb29nLmRvbS5pbnNlcnRTaWJsaW5nQmVmb3JlO1xuXG5cbi8qKlxuICogSW5zZXJ0cyBhIG5ldyBub2RlIGFmdGVyIGFuIGV4aXN0aW5nIHJlZmVyZW5jZSBub2RlIChpLmUuLCBhcyB0aGUgbmV4dFxuICogc2libGluZykuIElmIHRoZSByZWZlcmVuY2Ugbm9kZSBoYXMgbm8gcGFyZW50LCB0aGVuIGRvZXMgbm90aGluZy5cbiAqIEBwYXJhbSB7Tm9kZX0gbmV3Tm9kZSBOb2RlIHRvIGluc2VydC5cbiAqIEBwYXJhbSB7Tm9kZX0gcmVmTm9kZSBSZWZlcmVuY2Ugbm9kZSB0byBpbnNlcnQgYWZ0ZXIuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuaW5zZXJ0U2libGluZ0FmdGVyID0gZ29vZy5kb20uaW5zZXJ0U2libGluZ0FmdGVyO1xuXG5cbi8qKlxuICogSW5zZXJ0IGEgY2hpbGQgYXQgYSBnaXZlbiBpbmRleC4gSWYgaW5kZXggaXMgbGFyZ2VyIHRoYW4gdGhlIG51bWJlciBvZiBjaGlsZFxuICogbm9kZXMgdGhhdCB0aGUgcGFyZW50IGN1cnJlbnRseSBoYXMsIHRoZSBub2RlIGlzIGluc2VydGVkIGFzIHRoZSBsYXN0IGNoaWxkXG4gKiBub2RlLlxuICogQHBhcmFtIHtFbGVtZW50fSBwYXJlbnQgVGhlIGVsZW1lbnQgaW50byB3aGljaCB0byBpbnNlcnQgdGhlIGNoaWxkLlxuICogQHBhcmFtIHtOb2RlfSBjaGlsZCBUaGUgZWxlbWVudCB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IGF0IHdoaWNoIHRvIGluc2VydCB0aGUgbmV3IGNoaWxkIG5vZGUuIE11c3RcbiAqICAgICBub3QgYmUgbmVnYXRpdmUuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuaW5zZXJ0Q2hpbGRBdCA9IGdvb2cuZG9tLmluc2VydENoaWxkQXQ7XG5cblxuLyoqXG4gKiBSZW1vdmVzIGEgbm9kZSBmcm9tIGl0cyBwYXJlbnQuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gcmVtb3ZlLlxuICogQHJldHVybiB7Tm9kZX0gVGhlIG5vZGUgcmVtb3ZlZCBpZiByZW1vdmVkOyBlbHNlLCBudWxsLlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLnJlbW92ZU5vZGUgPSBnb29nLmRvbS5yZW1vdmVOb2RlO1xuXG5cbi8qKlxuICogUmVwbGFjZXMgYSBub2RlIGluIHRoZSBET00gdHJlZS4gV2lsbCBkbyBub3RoaW5nIGlmIHtAY29kZSBvbGROb2RlfSBoYXMgbm9cbiAqIHBhcmVudC5cbiAqIEBwYXJhbSB7Tm9kZX0gbmV3Tm9kZSBOb2RlIHRvIGluc2VydC5cbiAqIEBwYXJhbSB7Tm9kZX0gb2xkTm9kZSBOb2RlIHRvIHJlcGxhY2UuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUucmVwbGFjZU5vZGUgPSBnb29nLmRvbS5yZXBsYWNlTm9kZTtcblxuXG4vKipcbiAqIEZsYXR0ZW5zIGFuIGVsZW1lbnQuIFRoYXQgaXMsIHJlbW92ZXMgaXQgYW5kIHJlcGxhY2UgaXQgd2l0aCBpdHMgY2hpbGRyZW4uXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gZmxhdHRlbi5cbiAqIEByZXR1cm4ge0VsZW1lbnR8dW5kZWZpbmVkfSBUaGUgb3JpZ2luYWwgZWxlbWVudCwgZGV0YWNoZWQgZnJvbSB0aGUgZG9jdW1lbnRcbiAqICAgICB0cmVlLCBzYW5zIGNoaWxkcmVuLCBvciB1bmRlZmluZWQgaWYgdGhlIGVsZW1lbnQgd2FzIGFscmVhZHkgbm90IGluIHRoZVxuICogICAgIGRvY3VtZW50LlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmZsYXR0ZW5FbGVtZW50ID0gZ29vZy5kb20uZmxhdHRlbkVsZW1lbnQ7XG5cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcganVzdCB0aGUgZWxlbWVudCBjaGlsZHJlbiBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB3aG9zZSBlbGVtZW50IGNoaWxkcmVuIHdlIHdhbnQuXG4gKiBAcmV0dXJuIHshKEFycmF5fE5vZGVMaXN0KX0gQW4gYXJyYXkgb3IgYXJyYXktbGlrZSBsaXN0IG9mIGp1c3QgdGhlIGVsZW1lbnRcbiAqICAgICBjaGlsZHJlbiBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXRDaGlsZHJlbiA9IGdvb2cuZG9tLmdldENoaWxkcmVuO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgY2hpbGQgbm9kZSB0aGF0IGlzIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gZ2V0IHRoZSBmaXJzdCBjaGlsZCBlbGVtZW50IG9mLlxuICogQHJldHVybiB7RWxlbWVudH0gVGhlIGZpcnN0IGNoaWxkIG5vZGUgb2Yge0Bjb2RlIG5vZGV9IHRoYXQgaXMgYW4gZWxlbWVudC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXRGaXJzdEVsZW1lbnRDaGlsZCA9XG4gICAgZ29vZy5kb20uZ2V0Rmlyc3RFbGVtZW50Q2hpbGQ7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsYXN0IGNoaWxkIG5vZGUgdGhhdCBpcyBhbiBlbGVtZW50LlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIHRvIGdldCB0aGUgbGFzdCBjaGlsZCBlbGVtZW50IG9mLlxuICogQHJldHVybiB7RWxlbWVudH0gVGhlIGxhc3QgY2hpbGQgbm9kZSBvZiB7QGNvZGUgbm9kZX0gdGhhdCBpcyBhbiBlbGVtZW50LlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmdldExhc3RFbGVtZW50Q2hpbGQgPSBnb29nLmRvbS5nZXRMYXN0RWxlbWVudENoaWxkO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgbmV4dCBzaWJsaW5nIHRoYXQgaXMgYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgbm9kZSB0byBnZXQgdGhlIG5leHQgc2libGluZyBlbGVtZW50IG9mLlxuICogQHJldHVybiB7RWxlbWVudH0gVGhlIG5leHQgc2libGluZyBvZiB7QGNvZGUgbm9kZX0gdGhhdCBpcyBhbiBlbGVtZW50LlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmdldE5leHRFbGVtZW50U2libGluZyA9XG4gICAgZ29vZy5kb20uZ2V0TmV4dEVsZW1lbnRTaWJsaW5nO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgcHJldmlvdXMgc2libGluZyB0aGF0IGlzIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gZ2V0IHRoZSBwcmV2aW91cyBzaWJsaW5nIGVsZW1lbnQgb2YuXG4gKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgZmlyc3QgcHJldmlvdXMgc2libGluZyBvZiB7QGNvZGUgbm9kZX0gdGhhdCBpc1xuICogICAgIGFuIGVsZW1lbnQuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuZ2V0UHJldmlvdXNFbGVtZW50U2libGluZyA9XG4gICAgZ29vZy5kb20uZ2V0UHJldmlvdXNFbGVtZW50U2libGluZztcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIG5leHQgbm9kZSBpbiBzb3VyY2Ugb3JkZXIgZnJvbSB0aGUgZ2l2ZW4gbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgbm9kZS5cbiAqIEByZXR1cm4ge05vZGV9IFRoZSBuZXh0IG5vZGUgaW4gdGhlIERPTSB0cmVlLCBvciBudWxsIGlmIHRoaXMgd2FzIHRoZSBsYXN0XG4gKiAgICAgbm9kZS5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXROZXh0Tm9kZSA9IGdvb2cuZG9tLmdldE5leHROb2RlO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcHJldmlvdXMgbm9kZSBpbiBzb3VyY2Ugb3JkZXIgZnJvbSB0aGUgZ2l2ZW4gbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgbm9kZS5cbiAqIEByZXR1cm4ge05vZGV9IFRoZSBwcmV2aW91cyBub2RlIGluIHRoZSBET00gdHJlZSwgb3IgbnVsbCBpZiB0aGlzIHdhcyB0aGVcbiAqICAgICBmaXJzdCBub2RlLlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmdldFByZXZpb3VzTm9kZSA9IGdvb2cuZG9tLmdldFByZXZpb3VzTm9kZTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIG9iamVjdCBsb29rcyBsaWtlIGEgRE9NIG5vZGUuXG4gKiBAcGFyYW0gez99IG9iaiBUaGUgb2JqZWN0IGJlaW5nIHRlc3RlZCBmb3Igbm9kZSBsaWtlbmVzcy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG9iamVjdCBsb29rcyBsaWtlIGEgRE9NIG5vZGUuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuaXNOb2RlTGlrZSA9IGdvb2cuZG9tLmlzTm9kZUxpa2U7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBvYmplY3QgbG9va3MgbGlrZSBhbiBFbGVtZW50LlxuICogQHBhcmFtIHs/fSBvYmogVGhlIG9iamVjdCBiZWluZyB0ZXN0ZWQgZm9yIEVsZW1lbnQgbGlrZW5lc3MuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBvYmplY3QgbG9va3MgbGlrZSBhbiBFbGVtZW50LlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmlzRWxlbWVudCA9IGdvb2cuZG9tLmlzRWxlbWVudDtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIGEgV2luZG93IG9iamVjdC4gVGhpcyBpbmNsdWRlcyB0aGVcbiAqIGdsb2JhbCB3aW5kb3cgZm9yIEhUTUwgcGFnZXMsIGFuZCBpZnJhbWUgd2luZG93cy5cbiAqIEBwYXJhbSB7P30gb2JqIFZhcmlhYmxlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB2YXJpYWJsZSBpcyBhIHdpbmRvdy5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5pc1dpbmRvdyA9IGdvb2cuZG9tLmlzV2luZG93O1xuXG5cbi8qKlxuICogUmV0dXJucyBhbiBlbGVtZW50J3MgcGFyZW50LCBpZiBpdCdzIGFuIEVsZW1lbnQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIERPTSBlbGVtZW50LlxuICogQHJldHVybiB7RWxlbWVudH0gVGhlIHBhcmVudCwgb3IgbnVsbCBpZiBub3QgYW4gRWxlbWVudC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXRQYXJlbnRFbGVtZW50ID0gZ29vZy5kb20uZ2V0UGFyZW50RWxlbWVudDtcblxuXG4vKipcbiAqIFdoZXRoZXIgYSBub2RlIGNvbnRhaW5zIGFub3RoZXIgbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50IFRoZSBub2RlIHRoYXQgc2hvdWxkIGNvbnRhaW4gdGhlIG90aGVyIG5vZGUuXG4gKiBAcGFyYW0ge05vZGV9IGRlc2NlbmRhbnQgVGhlIG5vZGUgdG8gdGVzdCBwcmVzZW5jZSBvZi5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHBhcmVudCBub2RlIGNvbnRhaW5zIHRoZSBkZXNjZW5kZW50IG5vZGUuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuY29udGFpbnMgPSBnb29nLmRvbS5jb250YWlucztcblxuXG4vKipcbiAqIENvbXBhcmVzIHRoZSBkb2N1bWVudCBvcmRlciBvZiB0d28gbm9kZXMsIHJldHVybmluZyAwIGlmIHRoZXkgYXJlIHRoZSBzYW1lXG4gKiBub2RlLCBhIG5lZ2F0aXZlIG51bWJlciBpZiBub2RlMSBpcyBiZWZvcmUgbm9kZTIsIGFuZCBhIHBvc2l0aXZlIG51bWJlciBpZlxuICogbm9kZTIgaXMgYmVmb3JlIG5vZGUxLiAgTm90ZSB0aGF0IHdlIGNvbXBhcmUgdGhlIG9yZGVyIHRoZSB0YWdzIGFwcGVhciBpbiB0aGVcbiAqIGRvY3VtZW50IHNvIGluIHRoZSB0cmVlIDxiPjxpPnRleHQ8L2k+PC9iPiB0aGUgQiBub2RlIGlzIGNvbnNpZGVyZWQgdG8gYmVcbiAqIGJlZm9yZSB0aGUgSSBub2RlLlxuICpcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZTEgVGhlIGZpcnN0IG5vZGUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZTIgVGhlIHNlY29uZCBub2RlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IDAgaWYgdGhlIG5vZGVzIGFyZSB0aGUgc2FtZSBub2RlLCBhIG5lZ2F0aXZlIG51bWJlciBpZiBub2RlMVxuICogICAgIGlzIGJlZm9yZSBub2RlMiwgYW5kIGEgcG9zaXRpdmUgbnVtYmVyIGlmIG5vZGUyIGlzIGJlZm9yZSBub2RlMS5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5jb21wYXJlTm9kZU9yZGVyID0gZ29vZy5kb20uY29tcGFyZU5vZGVPcmRlcjtcblxuXG4vKipcbiAqIEZpbmQgdGhlIGRlZXBlc3QgY29tbW9uIGFuY2VzdG9yIG9mIHRoZSBnaXZlbiBub2Rlcy5cbiAqIEBwYXJhbSB7Li4uTm9kZX0gdmFyX2FyZ3MgVGhlIG5vZGVzIHRvIGZpbmQgYSBjb21tb24gYW5jZXN0b3Igb2YuXG4gKiBAcmV0dXJuIHtOb2RlfSBUaGUgY29tbW9uIGFuY2VzdG9yIG9mIHRoZSBub2Rlcywgb3IgbnVsbCBpZiB0aGVyZSBpcyBub25lLlxuICogICAgIG51bGwgd2lsbCBvbmx5IGJlIHJldHVybmVkIGlmIHR3byBvciBtb3JlIG9mIHRoZSBub2RlcyBhcmUgZnJvbSBkaWZmZXJlbnRcbiAqICAgICBkb2N1bWVudHMuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuZmluZENvbW1vbkFuY2VzdG9yID0gZ29vZy5kb20uZmluZENvbW1vbkFuY2VzdG9yO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3duZXIgZG9jdW1lbnQgZm9yIGEgbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgbm9kZSB0byBnZXQgdGhlIGRvY3VtZW50IGZvci5cbiAqIEByZXR1cm4geyFEb2N1bWVudH0gVGhlIGRvY3VtZW50IG93bmluZyB0aGUgbm9kZS5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXRPd25lckRvY3VtZW50ID0gZ29vZy5kb20uZ2V0T3duZXJEb2N1bWVudDtcblxuXG4vKipcbiAqIENyb3NzIGJyb3dzZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIGRvY3VtZW50IGVsZW1lbnQgb2YgYW4gaWZyYW1lLlxuICogQHBhcmFtIHtFbGVtZW50fSBpZnJhbWUgSWZyYW1lIGVsZW1lbnQuXG4gKiBAcmV0dXJuIHshRG9jdW1lbnR9IFRoZSBmcmFtZSBjb250ZW50IGRvY3VtZW50LlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmdldEZyYW1lQ29udGVudERvY3VtZW50ID1cbiAgICBnb29nLmRvbS5nZXRGcmFtZUNvbnRlbnREb2N1bWVudDtcblxuXG4vKipcbiAqIENyb3NzIGJyb3dzZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIHdpbmRvdyBvZiBhIGZyYW1lIG9yIGlmcmFtZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZnJhbWUgRnJhbWUgZWxlbWVudC5cbiAqIEByZXR1cm4ge1dpbmRvd30gVGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGZyYW1lLlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmdldEZyYW1lQ29udGVudFdpbmRvdyA9XG4gICAgZ29vZy5kb20uZ2V0RnJhbWVDb250ZW50V2luZG93O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgdGV4dCBjb250ZW50IG9mIGEgbm9kZSwgd2l0aCBjcm9zcy1icm93c2VyIHN1cHBvcnQuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gY2hhbmdlIHRoZSB0ZXh0IGNvbnRlbnQgb2YuXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHRleHQgVGhlIHZhbHVlIHRoYXQgc2hvdWxkIHJlcGxhY2UgdGhlIG5vZGUncyBjb250ZW50LlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLnNldFRleHRDb250ZW50ID0gZ29vZy5kb20uc2V0VGV4dENvbnRlbnQ7XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBvdXRlckhUTUwgb2YgYSBub2RlLCB3aGljaCBpc2xpa2UgaW5uZXJIVE1MLCBleGNlcHQgdGhhdCBpdFxuICogYWN0dWFsbHkgY29udGFpbnMgdGhlIEhUTUwgb2YgdGhlIG5vZGUgaXRzZWxmLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGdldCB0aGUgSFRNTCBvZi5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG91dGVySFRNTCBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXRPdXRlckh0bWwgPSBnb29nLmRvbS5nZXRPdXRlckh0bWw7XG5cblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgZGVzY2VuZGFudCBub2RlIHRoYXQgbWF0Y2hlcyB0aGUgZmlsdGVyIGZ1bmN0aW9uLiBUaGlzIGRvZXNcbiAqIGEgZGVwdGggZmlyc3Qgc2VhcmNoLlxuICogQHBhcmFtIHtOb2RlfSByb290IFRoZSByb290IG9mIHRoZSB0cmVlIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oTm9kZSkgOiBib29sZWFufSBwIFRoZSBmaWx0ZXIgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtOb2RlfHVuZGVmaW5lZH0gVGhlIGZvdW5kIG5vZGUgb3IgdW5kZWZpbmVkIGlmIG5vbmUgaXMgZm91bmQuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuZmluZE5vZGUgPSBnb29nLmRvbS5maW5kTm9kZTtcblxuXG4vKipcbiAqIEZpbmRzIGFsbCB0aGUgZGVzY2VuZGFudCBub2RlcyB0aGF0IG1hdGNoZXMgdGhlIGZpbHRlciBmdW5jdGlvbi4gVGhpcyBkb2VzIGFcbiAqIGRlcHRoIGZpcnN0IHNlYXJjaC5cbiAqIEBwYXJhbSB7Tm9kZX0gcm9vdCBUaGUgcm9vdCBvZiB0aGUgdHJlZSB0byBzZWFyY2guXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKE5vZGUpIDogYm9vbGVhbn0gcCBUaGUgZmlsdGVyIGZ1bmN0aW9uLlxuICogQHJldHVybiB7QXJyYXk8Tm9kZT59IFRoZSBmb3VuZCBub2RlcyBvciBhbiBlbXB0eSBhcnJheSBpZiBub25lIGFyZSBmb3VuZC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5maW5kTm9kZXMgPSBnb29nLmRvbS5maW5kTm9kZXM7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGVsZW1lbnQgaGFzIGEgdGFiIGluZGV4IHRoYXQgYWxsb3dzIGl0IHRvIHJlY2VpdmVcbiAqIGtleWJvYXJkIGZvY3VzICh0YWJJbmRleCA+PSAwKSwgZmFsc2Ugb3RoZXJ3aXNlLiAgTm90ZSB0aGF0IHNvbWUgZWxlbWVudHNcbiAqIG5hdGl2ZWx5IHN1cHBvcnQga2V5Ym9hcmQgZm9jdXMsIGV2ZW4gaWYgdGhleSBoYXZlIG5vIHRhYiBpbmRleC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGVsZW1lbnQgaGFzIGEgdGFiIGluZGV4IHRoYXQgYWxsb3dzIGtleWJvYXJkXG4gKiAgICAgZm9jdXMuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuaXNGb2N1c2FibGVUYWJJbmRleCA9IGdvb2cuZG9tLmlzRm9jdXNhYmxlVGFiSW5kZXg7XG5cblxuLyoqXG4gKiBFbmFibGVzIG9yIGRpc2FibGVzIGtleWJvYXJkIGZvY3VzIHN1cHBvcnQgb24gdGhlIGVsZW1lbnQgdmlhIGl0cyB0YWIgaW5kZXguXG4gKiBPbmx5IGVsZW1lbnRzIGZvciB3aGljaCB7QGxpbmsgZ29vZy5kb20uaXNGb2N1c2FibGVUYWJJbmRleH0gcmV0dXJucyB0cnVlXG4gKiAob3IgZWxlbWVudHMgdGhhdCBuYXRpdmVseSBzdXBwb3J0IGtleWJvYXJkIGZvY3VzLCBsaWtlIGZvcm0gZWxlbWVudHMpIGNhblxuICogcmVjZWl2ZSBrZXlib2FyZCBmb2N1cy4gIFNlZSBodHRwOi8vZ28vdGFiaW5kZXggZm9yIG1vcmUgaW5mby5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHdob3NlIHRhYiBpbmRleCBpcyB0byBiZSBjaGFuZ2VkLlxuICogQHBhcmFtIHtib29sZWFufSBlbmFibGUgV2hldGhlciB0byBzZXQgb3IgcmVtb3ZlIGEgdGFiIGluZGV4IG9uIHRoZSBlbGVtZW50XG4gKiAgICAgdGhhdCBzdXBwb3J0cyBrZXlib2FyZCBmb2N1cy5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5zZXRGb2N1c2FibGVUYWJJbmRleCA9XG4gICAgZ29vZy5kb20uc2V0Rm9jdXNhYmxlVGFiSW5kZXg7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGVsZW1lbnQgY2FuIGJlIGZvY3VzZWQsIGkuZS4gaXQgaGFzIGEgdGFiIGluZGV4IHRoYXRcbiAqIGFsbG93cyBpdCB0byByZWNlaXZlIGtleWJvYXJkIGZvY3VzICh0YWJJbmRleCA+PSAwKSwgb3IgaXQgaXMgYW4gZWxlbWVudFxuICogdGhhdCBuYXRpdmVseSBzdXBwb3J0cyBrZXlib2FyZCBmb2N1cy5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGVsZW1lbnQgYWxsb3dzIGtleWJvYXJkIGZvY3VzLlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmlzRm9jdXNhYmxlID0gZ29vZy5kb20uaXNGb2N1c2FibGU7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0ZXh0IGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50IG5vZGUsIHdpdGhvdXQgbWFya3VwLiBOZXcgbGluZXMgYXJlXG4gKiBzdHJpcHBlZCBhbmQgd2hpdGVzcGFjZSBpcyBjb2xsYXBzZWQsIHN1Y2ggdGhhdCBlYWNoIGNoYXJhY3RlciB3b3VsZCBiZVxuICogdmlzaWJsZS5cbiAqXG4gKiBJbiBicm93c2VycyB0aGF0IHN1cHBvcnQgaXQsIGlubmVyVGV4dCBpcyB1c2VkLiAgT3RoZXIgYnJvd3NlcnMgYXR0ZW1wdCB0b1xuICogc2ltdWxhdGUgaXQgdmlhIG5vZGUgdHJhdmVyc2FsLiAgTGluZSBicmVha3MgYXJlIGNhbm9uaWNhbGl6ZWQgaW4gSUUuXG4gKlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIGZyb20gd2hpY2ggd2UgYXJlIGdldHRpbmcgY29udGVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRleHQgY29udGVudC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXRUZXh0Q29udGVudCA9IGdvb2cuZG9tLmdldFRleHRDb250ZW50O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgdGV4dCBsZW5ndGggb2YgdGhlIHRleHQgY29udGFpbmVkIGluIGEgbm9kZSwgd2l0aG91dCBtYXJrdXAuIFRoaXNcbiAqIGlzIGVxdWl2YWxlbnQgdG8gdGhlIHNlbGVjdGlvbiBsZW5ndGggaWYgdGhlIG5vZGUgd2FzIHNlbGVjdGVkLCBvciB0aGUgbnVtYmVyXG4gKiBvZiBjdXJzb3IgbW92ZW1lbnRzIHRvIHRyYXZlcnNlIHRoZSBub2RlLiBJbWFnZXMgJiBCUnMgdGFrZSBvbmUgc3BhY2UuICBOZXdcbiAqIGxpbmVzIGFyZSBpZ25vcmVkLlxuICpcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgbm9kZSB3aG9zZSB0ZXh0IGNvbnRlbnQgbGVuZ3RoIGlzIGJlaW5nIGNhbGN1bGF0ZWQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBsZW5ndGggb2Yge0Bjb2RlIG5vZGV9J3MgdGV4dCBjb250ZW50LlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmdldE5vZGVUZXh0TGVuZ3RoID0gZ29vZy5kb20uZ2V0Tm9kZVRleHRMZW5ndGg7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0ZXh0IG9mZnNldCBvZiBhIG5vZGUgcmVsYXRpdmUgdG8gb25lIG9mIGl0cyBhbmNlc3RvcnMuIFRoZSB0ZXh0XG4gKiBsZW5ndGggaXMgdGhlIHNhbWUgYXMgdGhlIGxlbmd0aCBjYWxjdWxhdGVkIGJ5XG4gKiB7QGNvZGUgZ29vZy5kb20uZ2V0Tm9kZVRleHRMZW5ndGh9LlxuICpcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUaGUgbm9kZSB3aG9zZSBvZmZzZXQgaXMgYmVpbmcgY2FsY3VsYXRlZC5cbiAqIEBwYXJhbSB7Tm9kZT19IG9wdF9vZmZzZXRQYXJlbnQgRGVmYXVsdHMgdG8gdGhlIG5vZGUncyBvd25lciBkb2N1bWVudCdzIGJvZHkuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB0ZXh0IG9mZnNldC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXROb2RlVGV4dE9mZnNldCA9IGdvb2cuZG9tLmdldE5vZGVUZXh0T2Zmc2V0O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgbm9kZSBhdCBhIGdpdmVuIG9mZnNldCBpbiBhIHBhcmVudCBub2RlLiAgSWYgYW4gb2JqZWN0IGlzXG4gKiBwcm92aWRlZCBmb3IgdGhlIG9wdGlvbmFsIHRoaXJkIHBhcmFtZXRlciwgdGhlIG5vZGUgYW5kIHRoZSByZW1haW5kZXIgb2YgdGhlXG4gKiBvZmZzZXQgd2lsbCBzdG9yZWQgYXMgcHJvcGVydGllcyBvZiB0aGlzIG9iamVjdC5cbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50IFRoZSBwYXJlbnQgbm9kZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCBpbnRvIHRoZSBwYXJlbnQgbm9kZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3Jlc3VsdCBPYmplY3QgdG8gYmUgdXNlZCB0byBzdG9yZSB0aGUgcmV0dXJuIHZhbHVlLiBUaGVcbiAqICAgICByZXR1cm4gdmFsdWUgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGZvcm0ge25vZGU6IE5vZGUsIHJlbWFpbmRlcjogbnVtYmVyfVxuICogICAgIGlmIHRoaXMgb2JqZWN0IGlzIHByb3ZpZGVkLlxuICogQHJldHVybiB7Tm9kZX0gVGhlIG5vZGUgYXQgdGhlIGdpdmVuIG9mZnNldC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXROb2RlQXRPZmZzZXQgPSBnb29nLmRvbS5nZXROb2RlQXRPZmZzZXQ7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIG9iamVjdCBpcyBhIHtAY29kZSBOb2RlTGlzdH0uICBUbyBxdWFsaWZ5IGFzIGEgTm9kZUxpc3QsXG4gKiB0aGUgb2JqZWN0IG11c3QgaGF2ZSBhIG51bWVyaWMgbGVuZ3RoIHByb3BlcnR5IGFuZCBhbiBpdGVtIGZ1bmN0aW9uICh3aGljaFxuICogaGFzIHR5cGUgJ3N0cmluZycgb24gSUUgZm9yIHNvbWUgcmVhc29uKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgT2JqZWN0IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBvYmplY3QgaXMgYSBOb2RlTGlzdC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5pc05vZGVMaXN0ID0gZ29vZy5kb20uaXNOb2RlTGlzdDtcblxuXG4vKipcbiAqIFdhbGtzIHVwIHRoZSBET00gaGllcmFyY2h5IHJldHVybmluZyB0aGUgZmlyc3QgYW5jZXN0b3IgdGhhdCBoYXMgdGhlIHBhc3NlZFxuICogdGFnIG5hbWUgYW5kL29yIGNsYXNzIG5hbWUuIElmIHRoZSBwYXNzZWQgZWxlbWVudCBtYXRjaGVzIHRoZSBzcGVjaWZpZWRcbiAqIGNyaXRlcmlhLCB0aGUgZWxlbWVudCBpdHNlbGYgaXMgcmV0dXJuZWQuXG4gKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIERPTSBub2RlIHRvIHN0YXJ0IHdpdGguXG4gKiBAcGFyYW0gez8oZ29vZy5kb20uVGFnTmFtZXxzdHJpbmcpPX0gb3B0X3RhZyBUaGUgdGFnIG5hbWUgdG8gbWF0Y2ggKG9yXG4gKiAgICAgbnVsbC91bmRlZmluZWQgdG8gbWF0Y2ggb25seSBiYXNlZCBvbiBjbGFzcyBuYW1lKS5cbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9jbGFzcyBUaGUgY2xhc3MgbmFtZSB0byBtYXRjaCAob3IgbnVsbC91bmRlZmluZWQgdG9cbiAqICAgICBtYXRjaCBvbmx5IGJhc2VkIG9uIHRhZyBuYW1lKS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X21heFNlYXJjaFN0ZXBzIE1heGltdW0gbnVtYmVyIG9mIGxldmVscyB0byBzZWFyY2ggdXAgdGhlXG4gKiAgICAgZG9tLlxuICogQHJldHVybiB7RWxlbWVudH0gVGhlIGZpcnN0IGFuY2VzdG9yIHRoYXQgbWF0Y2hlcyB0aGUgcGFzc2VkIGNyaXRlcmlhLCBvclxuICogICAgIG51bGwgaWYgbm8gbWF0Y2ggaXMgZm91bmQuXG4gKi9cbmdvb2cuZG9tLkRvbUhlbHBlci5wcm90b3R5cGUuZ2V0QW5jZXN0b3JCeVRhZ05hbWVBbmRDbGFzcyA9XG4gICAgZ29vZy5kb20uZ2V0QW5jZXN0b3JCeVRhZ05hbWVBbmRDbGFzcztcblxuXG4vKipcbiAqIFdhbGtzIHVwIHRoZSBET00gaGllcmFyY2h5IHJldHVybmluZyB0aGUgZmlyc3QgYW5jZXN0b3IgdGhhdCBoYXMgdGhlIHBhc3NlZFxuICogY2xhc3MgbmFtZS4gSWYgdGhlIHBhc3NlZCBlbGVtZW50IG1hdGNoZXMgdGhlIHNwZWNpZmllZCBjcml0ZXJpYSwgdGhlXG4gKiBlbGVtZW50IGl0c2VsZiBpcyByZXR1cm5lZC5cbiAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBUaGUgRE9NIG5vZGUgdG8gc3RhcnQgd2l0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzcyBUaGUgY2xhc3MgbmFtZSB0byBtYXRjaC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X21heFNlYXJjaFN0ZXBzIE1heGltdW0gbnVtYmVyIG9mIGxldmVscyB0byBzZWFyY2ggdXAgdGhlXG4gKiAgICAgZG9tLlxuICogQHJldHVybiB7RWxlbWVudH0gVGhlIGZpcnN0IGFuY2VzdG9yIHRoYXQgbWF0Y2hlcyB0aGUgcGFzc2VkIGNyaXRlcmlhLCBvclxuICogICAgIG51bGwgaWYgbm9uZSBtYXRjaC5cbiAqL1xuZ29vZy5kb20uRG9tSGVscGVyLnByb3RvdHlwZS5nZXRBbmNlc3RvckJ5Q2xhc3MgPVxuICAgIGdvb2cuZG9tLmdldEFuY2VzdG9yQnlDbGFzcztcblxuXG4vKipcbiAqIFdhbGtzIHVwIHRoZSBET00gaGllcmFyY2h5IHJldHVybmluZyB0aGUgZmlyc3QgYW5jZXN0b3IgdGhhdCBwYXNzZXMgdGhlXG4gKiBtYXRjaGVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBET00gbm9kZSB0byBzdGFydCB3aXRoLlxuICogQHBhcmFtIHtmdW5jdGlvbihOb2RlKSA6IGJvb2xlYW59IG1hdGNoZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdHJ1ZSBpZiB0aGVcbiAqICAgICBwYXNzZWQgbm9kZSBtYXRjaGVzIHRoZSBkZXNpcmVkIGNyaXRlcmlhLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVOb2RlIElmIHRydWUsIHRoZSBub2RlIGl0c2VsZiBpcyBpbmNsdWRlZCBpblxuICogICAgIHRoZSBzZWFyY2ggKHRoZSBmaXJzdCBjYWxsIHRvIHRoZSBtYXRjaGVyIHdpbGwgcGFzcyBzdGFydEVsZW1lbnQgYXNcbiAqICAgICB0aGUgbm9kZSB0byB0ZXN0KS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X21heFNlYXJjaFN0ZXBzIE1heGltdW0gbnVtYmVyIG9mIGxldmVscyB0byBzZWFyY2ggdXAgdGhlXG4gKiAgICAgZG9tLlxuICogQHJldHVybiB7Tm9kZX0gRE9NIG5vZGUgdGhhdCBtYXRjaGVkIHRoZSBtYXRjaGVyLCBvciBudWxsIGlmIHRoZXJlIHdhc1xuICogICAgIG5vIG1hdGNoLlxuICovXG5nb29nLmRvbS5Eb21IZWxwZXIucHJvdG90eXBlLmdldEFuY2VzdG9yID0gZ29vZy5kb20uZ2V0QW5jZXN0b3I7XG4iLCIvLyBDb3B5cmlnaHQgMjAxMSBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEEgdXRpbGl0eSB0byBsb2FkIEphdmFTY3JpcHQgZmlsZXMgdmlhIERPTSBzY3JpcHQgdGFncy5cbiAqIFJlZmFjdG9yZWQgZnJvbSBnb29nLm5ldC5Kc29ucC4gV29ya3MgY3Jvc3MtZG9tYWluLlxuICpcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cubmV0LmpzbG9hZGVyJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cubmV0LmpzbG9hZGVyLkVycm9yJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cubmV0LmpzbG9hZGVyLkVycm9yQ29kZScpO1xuZ29vZy5wcm92aWRlKCdnb29nLm5ldC5qc2xvYWRlci5PcHRpb25zJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hcnJheScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmFzeW5jLkRlZmVycmVkJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZGVidWcuRXJyb3InKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5kb20nKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5kb20uVGFnTmFtZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm9iamVjdCcpO1xuXG5cbi8qKlxuICogVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IG9mIGdvb2cuZ2xvYmFsIHVuZGVyIHdoaWNoIHRoZSBKYXZhU2NyaXB0XG4gKiB2ZXJpZmljYXRpb24gb2JqZWN0IGlzIHN0b3JlZCBieSB0aGUgbG9hZGVkIHNjcmlwdC5cbiAqIEBwcml2YXRlIHtzdHJpbmd9XG4gKi9cbmdvb2cubmV0LmpzbG9hZGVyLkdMT0JBTF9WRVJJRllfT0JKU18gPSAnY2xvc3VyZV92ZXJpZmljYXRpb24nO1xuXG5cbi8qKlxuICogVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIHRpbWUsIGluIG1pbGxpc2Vjb25kcywgd2UgYXJlIHByZXBhcmVkIHRvIHdhaXQgZm9yIGFcbiAqIGxvYWQgcmVxdWVzdCB0byBjb21wbGV0ZS5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmdvb2cubmV0LmpzbG9hZGVyLkRFRkFVTFRfVElNRU9VVCA9IDUwMDA7XG5cblxuLyoqXG4gKiBPcHRpb25hbCBwYXJhbWV0ZXJzIGZvciBnb29nLm5ldC5qc2xvYWRlci5zZW5kLlxuICogdGltZW91dDogVGhlIGxlbmd0aCBvZiB0aW1lLCBpbiBtaWxsaXNlY29uZHMsIHdlIGFyZSBwcmVwYXJlZCB0byB3YWl0XG4gKiAgICAgZm9yIGEgbG9hZCByZXF1ZXN0IHRvIGNvbXBsZXRlLiBEZWZhdWx0IGl0IDUgc2Vjb25kcy5cbiAqIGRvY3VtZW50OiBUaGUgSFRNTCBkb2N1bWVudCB1bmRlciB3aGljaCB0byBsb2FkIHRoZSBKYXZhU2NyaXB0LiBEZWZhdWx0IGlzXG4gKiAgICAgdGhlIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBjbGVhbnVwV2hlbkRvbmU6IElmIHRydWUgY2xlYW4gdXAgdGhlIHNjcmlwdCB0YWcgYWZ0ZXIgc2NyaXB0IGNvbXBsZXRlcyB0b1xuICogICAgIGxvYWQuIFRoaXMgaXMgaW1wb3J0YW50IGlmIHlvdSBqdXN0IHdhbnQgdG8gcmVhZCBkYXRhIGZyb20gdGhlIEphdmFTY3JpcHRcbiAqICAgICBhbmQgdGhlbiB0aHJvdyBpdCBhd2F5LiBEZWZhdWx0IGlzIGZhbHNlLlxuICogYXR0cmlidXRlczogQWRkaXRpb25hbCBhdHRyaWJ1dGVzIHRvIHNldCBvbiB0aGUgc2NyaXB0IHRhZy5cbiAqXG4gKiBAdHlwZWRlZiB7e1xuICogICB0aW1lb3V0OiAobnVtYmVyfHVuZGVmaW5lZCksXG4gKiAgIGRvY3VtZW50OiAoSFRNTERvY3VtZW50fHVuZGVmaW5lZCksXG4gKiAgIGNsZWFudXBXaGVuRG9uZTogKGJvb2xlYW58dW5kZWZpbmVkKSxcbiAqICAgYXR0cmlidXRlczogKCFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fHVuZGVmaW5lZClcbiAqIH19XG4gKi9cbmdvb2cubmV0LmpzbG9hZGVyLk9wdGlvbnM7XG5cblxuLyoqXG4gKiBTY3JpcHRzIChVUklzKSB3YWl0aW5nIHRvIGJlIGxvYWRlZC5cbiAqIEBwcml2YXRlIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xuZ29vZy5uZXQuanNsb2FkZXIuc2NyaXB0c1RvTG9hZF8gPSBbXTtcblxuXG4vKipcbiAqIFRoZSBkZWZlcnJlZCByZXN1bHQgb2YgbG9hZGluZyB0aGUgVVJJcyBpbiBzY3JpcHRzVG9Mb2FkXy5cbiAqIFdlIG5lZWQgdG8gcmV0dXJuIHRoaXMgdG8gYSBjYWxsZXIgdGhhdCB3YW50cyB0byBsb2FkIFVSSXMgd2hpbGVcbiAqIGEgZGVmZXJyZWQgaXMgYWxyZWFkeSB3b3JraW5nIG9uIHRoZW0uXG4gKiBAcHJpdmF0ZSB7IWdvb2cuYXN5bmMuRGVmZXJyZWQ8bnVsbD59XG4gKi9cbmdvb2cubmV0LmpzbG9hZGVyLnNjcmlwdExvYWRpbmdEZWZlcnJlZF87XG5cblxuLyoqXG4gKiBMb2FkcyBhbmQgZXZhbHVhdGVzIHRoZSBKYXZhU2NyaXB0IGZpbGVzIGF0IHRoZSBzcGVjaWZpZWQgVVJJcywgZ3VhcmFudGVlaW5nXG4gKiB0aGUgb3JkZXIgb2Ygc2NyaXB0IGxvYWRzLlxuICpcbiAqIEJlY2F1c2Ugd2UgaGF2ZSB0byBsb2FkIHRoZSBzY3JpcHRzIGluIHNlcmlhbCAobG9hZCBzY3JpcHQgMSwgZXhlYyBzY3JpcHQgMSxcbiAqIGxvYWQgc2NyaXB0IDIsIGV4ZWMgc2NyaXB0IDIsIGFuZCBzbyBvbiksIHRoaXMgd2lsbCBiZSBzbG93ZXIgdGhhbiBkb2luZ1xuICogdGhlIG5ldHdvcmsgZmV0Y2hlcyBpbiBwYXJhbGxlbC5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byBsb2FkIGEgbGFyZ2UgbnVtYmVyIG9mIHNjcmlwdHMgYnV0IGRlcGVuZGVuY3kgb3JkZXIgZG9lc24ndFxuICogbWF0dGVyLCB5b3Ugc2hvdWxkIGp1c3QgY2FsbCBnb29nLm5ldC5qc2xvYWRlci5sb2FkIE4gdGltZXMuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gbG9hZCBhIGxhcmdlIG51bWJlciBvZiBzY3JpcHRzIG9uIHRoZSBzYW1lIGRvbWFpbixcbiAqIHlvdSBtYXkgd2FudCB0byB1c2UgZ29vZy5tb2R1bGUuTW9kdWxlTG9hZGVyLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gdXJpcyBUaGUgVVJJcyB0byBsb2FkLlxuICogQHBhcmFtIHtnb29nLm5ldC5qc2xvYWRlci5PcHRpb25zPX0gb3B0X29wdGlvbnMgT3B0aW9uYWwgcGFyYW1ldGVycy4gU2VlXG4gKiAgICAgZ29vZy5uZXQuanNsb2FkZXIub3B0aW9ucyBkb2N1bWVudGF0aW9uIGZvciBkZXRhaWxzLlxuICogQHJldHVybiB7IWdvb2cuYXN5bmMuRGVmZXJyZWR9IFRoZSBkZWZlcnJlZCByZXN1bHQsIHRoYXQgbWF5IGJlIHVzZWQgdG8gYWRkXG4gKiAgICAgY2FsbGJhY2tzXG4gKi9cbmdvb2cubmV0LmpzbG9hZGVyLmxvYWRNYW55ID0gZnVuY3Rpb24odXJpcywgb3B0X29wdGlvbnMpIHtcbiAgLy8gTG9hZGluZyB0aGUgc2NyaXB0cyBpbiBzZXJpYWwgaW50cm9kdWNlcyBhc3luY2hyb25vc2l0eSBpbnRvIHRoZSBmbG93LlxuICAvLyBUaGVyZWZvcmUsIHRoZXJlIGFyZSByYWNlIGNvbmRpdGlvbnMgd2hlcmUgY2xpZW50IEEgY2FuIGtpY2sgb2ZmIHRoZSBsb2FkXG4gIC8vIHNlcXVlbmNlIGZvciBjbGllbnQgQiwgZXZlbiB0aG91Z2ggY2xpZW50IEEncyBzY3JpcHRzIGhhdmVuJ3QgYWxsIGJlZW5cbiAgLy8gbG9hZGVkIHlldC5cbiAgLy9cbiAgLy8gVG8gd29yayBhcm91bmQgdGhpcyBpc3N1ZSwgYWxsIG1vZHVsZSBsb2FkcyBzaGFyZSBhIHF1ZXVlLlxuICBpZiAoIXVyaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGdvb2cuYXN5bmMuRGVmZXJyZWQuc3VjY2VlZChudWxsKTtcbiAgfVxuXG4gIHZhciBpc0Fub3RoZXJNb2R1bGVMb2FkaW5nID0gZ29vZy5uZXQuanNsb2FkZXIuc2NyaXB0c1RvTG9hZF8ubGVuZ3RoO1xuICBnb29nLmFycmF5LmV4dGVuZChnb29nLm5ldC5qc2xvYWRlci5zY3JpcHRzVG9Mb2FkXywgdXJpcyk7XG4gIGlmIChpc0Fub3RoZXJNb2R1bGVMb2FkaW5nKSB7XG4gICAgLy8ganNsb2FkZXIgaXMgc3RpbGwgbG9hZGluZyBzb21lIG90aGVyIHNjcmlwdHMuXG4gICAgLy8gSW4gb3JkZXIgdG8gcHJldmVudCB0aGUgcmFjZSBjb25kaXRpb24gbm90ZWQgYWJvdmUsIHdlIGp1c3QgYWRkXG4gICAgLy8gdGhlc2UgVVJJcyB0byB0aGUgZW5kIG9mIHRoZSBzY3JpcHRzJyBxdWV1ZSBhbmQgcmV0dXJuIHRoZSBkZWZlcnJlZFxuICAgIC8vIHJlc3VsdCBvZiB0aGUgb25nb2luZyBzY3JpcHQgbG9hZCwgc28gdGhlIGNhbGxlciBrbm93cyB3aGVuIHRoZXlcbiAgICAvLyBmaW5pc2ggbG9hZGluZy5cbiAgICByZXR1cm4gZ29vZy5uZXQuanNsb2FkZXIuc2NyaXB0TG9hZGluZ0RlZmVycmVkXztcbiAgfVxuXG4gIHVyaXMgPSBnb29nLm5ldC5qc2xvYWRlci5zY3JpcHRzVG9Mb2FkXztcbiAgdmFyIHBvcEFuZExvYWROZXh0U2NyaXB0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVyaSA9IHVyaXMuc2hpZnQoKTtcbiAgICB2YXIgZGVmZXJyZWQgPSBnb29nLm5ldC5qc2xvYWRlci5sb2FkKHVyaSwgb3B0X29wdGlvbnMpO1xuICAgIGlmICh1cmlzLmxlbmd0aCkge1xuICAgICAgZGVmZXJyZWQuYWRkQm90aChwb3BBbmRMb2FkTmV4dFNjcmlwdCk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfTtcbiAgZ29vZy5uZXQuanNsb2FkZXIuc2NyaXB0TG9hZGluZ0RlZmVycmVkXyA9IHBvcEFuZExvYWROZXh0U2NyaXB0KCk7XG4gIHJldHVybiBnb29nLm5ldC5qc2xvYWRlci5zY3JpcHRMb2FkaW5nRGVmZXJyZWRfO1xufTtcblxuXG4vKipcbiAqIExvYWRzIGFuZCBldmFsdWF0ZXMgYSBKYXZhU2NyaXB0IGZpbGUuXG4gKiBXaGVuIHRoZSBzY3JpcHQgbG9hZHMsIGEgdXNlciBjYWxsYmFjayBpcyBjYWxsZWQuXG4gKiBJdCBpcyB0aGUgY2xpZW50J3MgcmVzcG9uc2liaWxpdHkgdG8gdmVyaWZ5IHRoYXQgdGhlIHNjcmlwdCByYW4gc3VjY2Vzc2Z1bGx5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgVGhlIFVSSSBvZiB0aGUgSmF2YVNjcmlwdC5cbiAqIEBwYXJhbSB7Z29vZy5uZXQuanNsb2FkZXIuT3B0aW9ucz19IG9wdF9vcHRpb25zIE9wdGlvbmFsIHBhcmFtZXRlcnMuIFNlZVxuICogICAgIGdvb2cubmV0LmpzbG9hZGVyLk9wdGlvbnMgZG9jdW1lbnRhdGlvbiBmb3IgZGV0YWlscy5cbiAqIEByZXR1cm4geyFnb29nLmFzeW5jLkRlZmVycmVkfSBUaGUgZGVmZXJyZWQgcmVzdWx0LCB0aGF0IG1heSBiZSB1c2VkIHRvIGFkZFxuICogICAgIGNhbGxiYWNrcyBhbmQvb3IgY2FuY2VsIHRoZSB0cmFuc21pc3Npb24uXG4gKiAgICAgVGhlIGVycm9yIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgZ29vZy5uZXQuanNsb2FkZXIuRXJyb3JcbiAqICAgICBwYXJhbWV0ZXIuXG4gKi9cbmdvb2cubmV0LmpzbG9hZGVyLmxvYWQgPSBmdW5jdGlvbih1cmksIG9wdF9vcHRpb25zKSB7XG4gIHZhciBvcHRpb25zID0gb3B0X29wdGlvbnMgfHwge307XG4gIHZhciBkb2MgPSBvcHRpb25zLmRvY3VtZW50IHx8IGRvY3VtZW50O1xuXG4gIHZhciBzY3JpcHQgPSBnb29nLmRvbS5jcmVhdGVFbGVtZW50KGdvb2cuZG9tLlRhZ05hbWUuU0NSSVBUKTtcbiAgdmFyIHJlcXVlc3QgPSB7c2NyaXB0Xzogc2NyaXB0LCB0aW1lb3V0XzogdW5kZWZpbmVkfTtcbiAgdmFyIGRlZmVycmVkID0gbmV3IGdvb2cuYXN5bmMuRGVmZXJyZWQoZ29vZy5uZXQuanNsb2FkZXIuY2FuY2VsXywgcmVxdWVzdCk7XG5cbiAgLy8gU2V0IGEgdGltZW91dC5cbiAgdmFyIHRpbWVvdXQgPSBudWxsO1xuICB2YXIgdGltZW91dER1cmF0aW9uID0gZ29vZy5pc0RlZkFuZE5vdE51bGwob3B0aW9ucy50aW1lb3V0KSA/XG4gICAgICBvcHRpb25zLnRpbWVvdXQgOiBnb29nLm5ldC5qc2xvYWRlci5ERUZBVUxUX1RJTUVPVVQ7XG4gIGlmICh0aW1lb3V0RHVyYXRpb24gPiAwKSB7XG4gICAgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgZ29vZy5uZXQuanNsb2FkZXIuY2xlYW51cF8oc2NyaXB0LCB0cnVlKTtcbiAgICAgIGRlZmVycmVkLmVycmJhY2sobmV3IGdvb2cubmV0LmpzbG9hZGVyLkVycm9yKFxuICAgICAgICAgIGdvb2cubmV0LmpzbG9hZGVyLkVycm9yQ29kZS5USU1FT1VULFxuICAgICAgICAgICdUaW1lb3V0IHJlYWNoZWQgZm9yIGxvYWRpbmcgc2NyaXB0ICcgKyB1cmkpKTtcbiAgICB9LCB0aW1lb3V0RHVyYXRpb24pO1xuICAgIHJlcXVlc3QudGltZW91dF8gPSB0aW1lb3V0O1xuICB9XG5cbiAgLy8gSGFuZyB0aGUgdXNlciBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2hlbiB0aGUgc2NyaXB0IGNvbXBsZXRlcyB0byBsb2FkLlxuICAvLyBOT1RFKHVzZXIpOiBUaGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGluIElFIGV2ZW4gdXBvbiBlcnJvci4gSW4gYW55XG4gIC8vIGNhc2UgaXQgaXMgdGhlIGNsaWVudCdzIHJlc3BvbnNpYmlsaXR5IHRvIHZlcmlmeSB0aGF0IHRoZSBzY3JpcHQgcmFuXG4gIC8vIHN1Y2Nlc3NmdWxseS5cbiAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXNjcmlwdC5yZWFkeVN0YXRlIHx8IHNjcmlwdC5yZWFkeVN0YXRlID09ICdsb2FkZWQnIHx8XG4gICAgICAgIHNjcmlwdC5yZWFkeVN0YXRlID09ICdjb21wbGV0ZScpIHtcbiAgICAgIHZhciByZW1vdmVTY3JpcHROb2RlID0gb3B0aW9ucy5jbGVhbnVwV2hlbkRvbmUgfHwgZmFsc2U7XG4gICAgICBnb29nLm5ldC5qc2xvYWRlci5jbGVhbnVwXyhzY3JpcHQsIHJlbW92ZVNjcmlwdE5vZGUsIHRpbWVvdXQpO1xuICAgICAgZGVmZXJyZWQuY2FsbGJhY2sobnVsbCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEFkZCBhbiBlcnJvciBjYWxsYmFjay5cbiAgLy8gTk9URSh1c2VyKTogTm90IHN1cHBvcnRlZCBpbiBJRS5cbiAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICBnb29nLm5ldC5qc2xvYWRlci5jbGVhbnVwXyhzY3JpcHQsIHRydWUsIHRpbWVvdXQpO1xuICAgIGRlZmVycmVkLmVycmJhY2sobmV3IGdvb2cubmV0LmpzbG9hZGVyLkVycm9yKFxuICAgICAgICBnb29nLm5ldC5qc2xvYWRlci5FcnJvckNvZGUuTE9BRF9FUlJPUixcbiAgICAgICAgJ0Vycm9yIHdoaWxlIGxvYWRpbmcgc2NyaXB0ICcgKyB1cmkpKTtcbiAgfTtcblxuICB2YXIgcHJvcGVydGllcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcbiAgZ29vZy5vYmplY3QuZXh0ZW5kKHByb3BlcnRpZXMsIHtcbiAgICAndHlwZSc6ICd0ZXh0L2phdmFzY3JpcHQnLFxuICAgICdjaGFyc2V0JzogJ1VURi04JyxcbiAgICAvLyBOT1RFKHVzZXIpOiBTYWZhcmkgbmV2ZXIgbG9hZHMgdGhlIHNjcmlwdCBpZiB3ZSBkb24ndCBzZXRcbiAgICAvLyB0aGUgc3JjIGF0dHJpYnV0ZSBiZWZvcmUgYXBwZW5kaW5nLlxuICAgICdzcmMnOiB1cmlcbiAgfSk7XG4gIGdvb2cuZG9tLnNldFByb3BlcnRpZXMoc2NyaXB0LCBwcm9wZXJ0aWVzKTtcbiAgdmFyIHNjcmlwdFBhcmVudCA9IGdvb2cubmV0LmpzbG9hZGVyLmdldFNjcmlwdFBhcmVudEVsZW1lbnRfKGRvYyk7XG4gIHNjcmlwdFBhcmVudC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXG4gIHJldHVybiBkZWZlcnJlZDtcbn07XG5cblxuLyoqXG4gKiBMb2FkcyBhIEphdmFTY3JpcHQgZmlsZSBhbmQgdmVyaWZpZXMgaXQgd2FzIGV2YWx1YXRlZCBzdWNjZXNzZnVsbHksIHVzaW5nIGFcbiAqIHZlcmlmaWNhdGlvbiBvYmplY3QuXG4gKiBUaGUgdmVyaWZpY2F0aW9uIG9iamVjdCBpcyBzZXQgYnkgdGhlIGxvYWRlZCBKYXZhU2NyaXB0IGF0IHRoZSBlbmQgb2YgdGhlXG4gKiBzY3JpcHQuXG4gKiBXZSB2ZXJpZnkgdGhpcyBvYmplY3Qgd2FzIHNldCBhbmQgcmV0dXJuIGl0cyB2YWx1ZSBpbiB0aGUgc3VjY2VzcyBjYWxsYmFjay5cbiAqIElmIHRoZSBvYmplY3QgaXMgbm90IGRlZmluZWQgd2UgdHJpZ2dlciBhbiBlcnJvciBjYWxsYmFjay5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBVUkkgb2YgdGhlIEphdmFTY3JpcHQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmVyaWZpY2F0aW9uT2JqTmFtZSBUaGUgbmFtZSBvZiB0aGUgdmVyaWZpY2F0aW9uIG9iamVjdCB0aGF0XG4gKiAgICAgdGhlIGxvYWRlZCBzY3JpcHQgc2hvdWxkIHNldC5cbiAqIEBwYXJhbSB7Z29vZy5uZXQuanNsb2FkZXIuT3B0aW9uc30gb3B0aW9ucyBPcHRpb25hbCBwYXJhbWV0ZXJzLiBTZWVcbiAqICAgICBnb29nLm5ldC5qc2xvYWRlci5PcHRpb25zIGRvY3VtZW50YXRpb24gZm9yIGRldGFpbHMuXG4gKiBAcmV0dXJuIHshZ29vZy5hc3luYy5EZWZlcnJlZH0gVGhlIGRlZmVycmVkIHJlc3VsdCwgdGhhdCBtYXkgYmUgdXNlZCB0byBhZGRcbiAqICAgICBjYWxsYmFja3MgYW5kL29yIGNhbmNlbCB0aGUgdHJhbnNtaXNzaW9uLlxuICogICAgIFRoZSBzdWNjZXNzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgcGFyYW1ldGVyIGNvbnRhaW5pbmdcbiAqICAgICB0aGUgdmFsdWUgb2YgdGhlIHZlcmlmaWNhdGlvbiBvYmplY3QuXG4gKiAgICAgVGhlIGVycm9yIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgZ29vZy5uZXQuanNsb2FkZXIuRXJyb3JcbiAqICAgICBwYXJhbWV0ZXIuXG4gKi9cbmdvb2cubmV0LmpzbG9hZGVyLmxvYWRBbmRWZXJpZnkgPSBmdW5jdGlvbih1cmksIHZlcmlmaWNhdGlvbk9iak5hbWUsIG9wdGlvbnMpIHtcbiAgLy8gRGVmaW5lIHRoZSBnbG9iYWwgb2JqZWN0cyB2YXJpYWJsZS5cbiAgaWYgKCFnb29nLmdsb2JhbFtnb29nLm5ldC5qc2xvYWRlci5HTE9CQUxfVkVSSUZZX09CSlNfXSkge1xuICAgIGdvb2cuZ2xvYmFsW2dvb2cubmV0LmpzbG9hZGVyLkdMT0JBTF9WRVJJRllfT0JKU19dID0ge307XG4gIH1cbiAgdmFyIHZlcmlmeU9ianMgPSBnb29nLmdsb2JhbFtnb29nLm5ldC5qc2xvYWRlci5HTE9CQUxfVkVSSUZZX09CSlNfXTtcblxuICAvLyBWZXJpZnkgdGhhdCB0aGUgZXhwZWN0ZWQgb2JqZWN0IGRvZXMgbm90IGV4aXN0IHlldC5cbiAgaWYgKGdvb2cuaXNEZWYodmVyaWZ5T2Jqc1t2ZXJpZmljYXRpb25PYmpOYW1lXSkpIHtcbiAgICAvLyBUT0RPKHVzZXIpOiBFcnJvciBvciByZXNldCB2YXJpYWJsZT9cbiAgICByZXR1cm4gZ29vZy5hc3luYy5EZWZlcnJlZC5mYWlsKG5ldyBnb29nLm5ldC5qc2xvYWRlci5FcnJvcihcbiAgICAgICAgZ29vZy5uZXQuanNsb2FkZXIuRXJyb3JDb2RlLlZFUklGWV9PQkpFQ1RfQUxSRUFEWV9FWElTVFMsXG4gICAgICAgICdWZXJpZmljYXRpb24gb2JqZWN0ICcgKyB2ZXJpZmljYXRpb25PYmpOYW1lICsgJyBhbHJlYWR5IGRlZmluZWQuJykpO1xuICB9XG5cbiAgLy8gU2VuZCByZXF1ZXN0IHRvIGxvYWQgdGhlIEphdmFTY3JpcHQuXG4gIHZhciBzZW5kRGVmZXJyZWQgPSBnb29nLm5ldC5qc2xvYWRlci5sb2FkKHVyaSwgb3B0aW9ucyk7XG5cbiAgLy8gQ3JlYXRlIGEgZGVmZXJyZWQgb2JqZWN0IHdyYXBwaW5nIHRoZSBzZW5kIHJlc3VsdC5cbiAgdmFyIGRlZmVycmVkID0gbmV3IGdvb2cuYXN5bmMuRGVmZXJyZWQoXG4gICAgICBnb29nLmJpbmQoc2VuZERlZmVycmVkLmNhbmNlbCwgc2VuZERlZmVycmVkKSk7XG5cbiAgLy8gQ2FsbCB1c2VyIGJhY2sgd2l0aCBvYmplY3QgdGhhdCB3YXMgc2V0IGJ5IHRoZSBzY3JpcHQuXG4gIHNlbmREZWZlcnJlZC5hZGRDYWxsYmFjayhmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0ID0gdmVyaWZ5T2Jqc1t2ZXJpZmljYXRpb25PYmpOYW1lXTtcbiAgICBpZiAoZ29vZy5pc0RlZihyZXN1bHQpKSB7XG4gICAgICBkZWZlcnJlZC5jYWxsYmFjayhyZXN1bHQpO1xuICAgICAgZGVsZXRlIHZlcmlmeU9ianNbdmVyaWZpY2F0aW9uT2JqTmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEVycm9yOiBzY3JpcHQgd2FzIG5vdCBsb2FkZWQgcHJvcGVybHkuXG4gICAgICBkZWZlcnJlZC5lcnJiYWNrKG5ldyBnb29nLm5ldC5qc2xvYWRlci5FcnJvcihcbiAgICAgICAgICBnb29nLm5ldC5qc2xvYWRlci5FcnJvckNvZGUuVkVSSUZZX0VSUk9SLFxuICAgICAgICAgICdTY3JpcHQgJyArIHVyaSArICcgbG9hZGVkLCBidXQgdmVyaWZpY2F0aW9uIG9iamVjdCAnICtcbiAgICAgICAgICB2ZXJpZmljYXRpb25PYmpOYW1lICsgJyB3YXMgbm90IGRlZmluZWQuJykpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gUGFzcyBlcnJvciB0byBuZXcgZGVmZXJyZWQgb2JqZWN0LlxuICBzZW5kRGVmZXJyZWQuYWRkRXJyYmFjayhmdW5jdGlvbihlcnJvcikge1xuICAgIGlmIChnb29nLmlzRGVmKHZlcmlmeU9ianNbdmVyaWZpY2F0aW9uT2JqTmFtZV0pKSB7XG4gICAgICBkZWxldGUgdmVyaWZ5T2Jqc1t2ZXJpZmljYXRpb25PYmpOYW1lXTtcbiAgICB9XG4gICAgZGVmZXJyZWQuZXJyYmFjayhlcnJvcik7XG4gIH0pO1xuXG4gIHJldHVybiBkZWZlcnJlZDtcbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBET00gZWxlbWVudCB1bmRlciB3aGljaCB3ZSBzaG91bGQgYWRkIG5ldyBzY3JpcHQgZWxlbWVudHMuXG4gKiBIb3c/IFRha2UgdGhlIGZpcnN0IGhlYWQgZWxlbWVudCwgYW5kIGlmIG5vdCBmb3VuZCB0YWtlIGRvYy5kb2N1bWVudEVsZW1lbnQsXG4gKiB3aGljaCBhbHdheXMgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7IUhUTUxEb2N1bWVudH0gZG9jIFRoZSByZWxldmFudCBkb2N1bWVudC5cbiAqIEByZXR1cm4geyFFbGVtZW50fSBUaGUgc2NyaXB0IHBhcmVudCBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5uZXQuanNsb2FkZXIuZ2V0U2NyaXB0UGFyZW50RWxlbWVudF8gPSBmdW5jdGlvbihkb2MpIHtcbiAgdmFyIGhlYWRFbGVtZW50cyA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShnb29nLmRvbS5UYWdOYW1lLkhFQUQpO1xuICBpZiAoIWhlYWRFbGVtZW50cyB8fCBnb29nLmFycmF5LmlzRW1wdHkoaGVhZEVsZW1lbnRzKSkge1xuICAgIHJldHVybiBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBoZWFkRWxlbWVudHNbMF07XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDYW5jZWxzIGEgZ2l2ZW4gcmVxdWVzdC5cbiAqIEB0aGlzIHt7c2NyaXB0XzogRWxlbWVudCwgdGltZW91dF86IG51bWJlcn19IFRoZSByZXF1ZXN0IGNvbnRleHQuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLm5ldC5qc2xvYWRlci5jYW5jZWxfID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXF1ZXN0ID0gdGhpcztcbiAgaWYgKHJlcXVlc3QgJiYgcmVxdWVzdC5zY3JpcHRfKSB7XG4gICAgdmFyIHNjcmlwdE5vZGUgPSByZXF1ZXN0LnNjcmlwdF87XG4gICAgaWYgKHNjcmlwdE5vZGUgJiYgc2NyaXB0Tm9kZS50YWdOYW1lID09IGdvb2cuZG9tLlRhZ05hbWUuU0NSSVBUKSB7XG4gICAgICBnb29nLm5ldC5qc2xvYWRlci5jbGVhbnVwXyhzY3JpcHROb2RlLCB0cnVlLCByZXF1ZXN0LnRpbWVvdXRfKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBzY3JpcHQgbm9kZSBhbmQgdGhlIHRpbWVvdXQuXG4gKlxuICogQHBhcmFtIHtOb2RlfSBzY3JpcHROb2RlIFRoZSBub2RlIHRvIGJlIGNsZWFuZWQgdXAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHJlbW92ZVNjcmlwdE5vZGUgSWYgdHJ1ZSBjb21wbGV0ZWx5IHJlbW92ZSB0aGUgc2NyaXB0IG5vZGUuXG4gKiBAcGFyYW0gez9udW1iZXI9fSBvcHRfdGltZW91dCBUaGUgdGltZW91dCBoYW5kbGVyIHRvIGNsZWFudXAuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLm5ldC5qc2xvYWRlci5jbGVhbnVwXyA9IGZ1bmN0aW9uKHNjcmlwdE5vZGUsIHJlbW92ZVNjcmlwdE5vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdF90aW1lb3V0KSB7XG4gIGlmIChnb29nLmlzRGVmQW5kTm90TnVsbChvcHRfdGltZW91dCkpIHtcbiAgICBnb29nLmdsb2JhbC5jbGVhclRpbWVvdXQob3B0X3RpbWVvdXQpO1xuICB9XG5cbiAgc2NyaXB0Tm9kZS5vbmxvYWQgPSBnb29nLm51bGxGdW5jdGlvbjtcbiAgc2NyaXB0Tm9kZS5vbmVycm9yID0gZ29vZy5udWxsRnVuY3Rpb247XG4gIHNjcmlwdE5vZGUub25yZWFkeXN0YXRlY2hhbmdlID0gZ29vZy5udWxsRnVuY3Rpb247XG5cbiAgLy8gRG8gdGhpcyBhZnRlciBhIGRlbGF5IChyZW1vdmluZyB0aGUgc2NyaXB0IG5vZGUgb2YgYSBydW5uaW5nIHNjcmlwdCBjYW5cbiAgLy8gY29uZnVzZSBvbGRlciBJRXMpLlxuICBpZiAocmVtb3ZlU2NyaXB0Tm9kZSkge1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgZ29vZy5kb20ucmVtb3ZlTm9kZShzY3JpcHROb2RlKTtcbiAgICB9LCAwKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFBvc3NpYmxlIGVycm9yIGNvZGVzIGZvciBqc2xvYWRlci5cbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmdvb2cubmV0LmpzbG9hZGVyLkVycm9yQ29kZSA9IHtcbiAgTE9BRF9FUlJPUjogMCxcbiAgVElNRU9VVDogMSxcbiAgVkVSSUZZX0VSUk9SOiAyLFxuICBWRVJJRllfT0JKRUNUX0FMUkVBRFlfRVhJU1RTOiAzXG59O1xuXG5cblxuLyoqXG4gKiBBIGpzbG9hZGVyIGVycm9yLlxuICpcbiAqIEBwYXJhbSB7Z29vZy5uZXQuanNsb2FkZXIuRXJyb3JDb2RlfSBjb2RlIFRoZSBlcnJvciBjb2RlLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZSBBZGRpdGlvbmFsIG1lc3NhZ2UuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtnb29nLmRlYnVnLkVycm9yfVxuICogQGZpbmFsXG4gKi9cbmdvb2cubmV0LmpzbG9hZGVyLkVycm9yID0gZnVuY3Rpb24oY29kZSwgb3B0X21lc3NhZ2UpIHtcbiAgdmFyIG1zZyA9ICdKc2xvYWRlciBlcnJvciAoY29kZSAjJyArIGNvZGUgKyAnKSc7XG4gIGlmIChvcHRfbWVzc2FnZSkge1xuICAgIG1zZyArPSAnOiAnICsgb3B0X21lc3NhZ2U7XG4gIH1cbiAgZ29vZy5uZXQuanNsb2FkZXIuRXJyb3IuYmFzZSh0aGlzLCAnY29uc3RydWN0b3InLCBtc2cpO1xuXG4gIC8qKlxuICAgKiBUaGUgY29kZSBmb3IgdGhpcyBlcnJvci5cbiAgICpcbiAgICogQHR5cGUge2dvb2cubmV0LmpzbG9hZGVyLkVycm9yQ29kZX1cbiAgICovXG4gIHRoaXMuY29kZSA9IGNvZGU7XG59O1xuZ29vZy5pbmhlcml0cyhnb29nLm5ldC5qc2xvYWRlci5FcnJvciwgZ29vZy5kZWJ1Zy5FcnJvcik7XG4iLCIvLyBDb3B5cmlnaHQgMjAxMCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFV0aWxpdGllcyBmb3IgZGVhbGluZyB3aXRoIFBPU0lYIHBhdGggc3RyaW5ncy4gQmFzZWQgb25cbiAqIFB5dGhvbidzIG9zLnBhdGggYW5kIHBvc2l4cGF0aC5cbiAqIEBhdXRob3Igbm5hemVAZ29vZ2xlLmNvbSAoTmF0aGFuIE5hemUpXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLnN0cmluZy5wYXRoJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hcnJheScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZycpO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmluYWwgY29tcG9uZW50IG9mIGEgcGF0aG5hbWUuXG4gKiBTZWUgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L29zLnBhdGguaHRtbCNvcy5wYXRoLmJhc2VuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBBIHBhdGhuYW1lLlxuICogQHJldHVybiB7c3RyaW5nfSBwYXRoIFRoZSBmaW5hbCBjb21wb25lbnQgb2YgYSBwYXRobmFtZSwgaS5lLiBldmVyeXRoaW5nXG4gKiAgICAgYWZ0ZXIgdGhlIGZpbmFsIHNsYXNoLlxuICovXG5nb29nLnN0cmluZy5wYXRoLmJhc2VOYW1lID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgaSA9IHBhdGgubGFzdEluZGV4T2YoJy8nKSArIDE7XG4gIHJldHVybiBwYXRoLnNsaWNlKGkpO1xufTtcblxuXG4vKipcbiAqIEFsaWFzIHRvIGdvb2cuc3RyaW5nLnBhdGguYmFzZU5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBBIHBhdGhuYW1lLlxuICogQHJldHVybiB7c3RyaW5nfSBwYXRoIFRoZSBmaW5hbCBjb21wb25lbnQgb2YgYSBwYXRobmFtZS5cbiAqIEBkZXByZWNhdGVkIFVzZSBnb29nLnN0cmluZy5wYXRoLmJhc2VOYW1lLlxuICovXG5nb29nLnN0cmluZy5wYXRoLmJhc2VuYW1lID0gZ29vZy5zdHJpbmcucGF0aC5iYXNlTmFtZTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGRpcmVjdG9yeSBjb21wb25lbnQgb2YgYSBwYXRobmFtZS5cbiAqIFNlZSBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvb3MucGF0aC5odG1sI29zLnBhdGguZGlybmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggQSBwYXRobmFtZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGRpcmVjdG9yeSBjb21wb25lbnQgb2YgYSBwYXRobmFtZSwgaS5lLiBldmVyeXRoaW5nXG4gKiAgICAgbGVhZGluZyB1cCB0byB0aGUgZmluYWwgc2xhc2guXG4gKi9cbmdvb2cuc3RyaW5nLnBhdGguZGlybmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIGkgPSBwYXRoLmxhc3RJbmRleE9mKCcvJykgKyAxO1xuICB2YXIgaGVhZCA9IHBhdGguc2xpY2UoMCwgaSk7XG4gIC8vIElmIHRoZSBwYXRoIGlzbid0IGFsbCBmb3J3YXJkIHNsYXNoZXMsIHRyaW0gdGhlIHRyYWlsaW5nIHNsYXNoZXMuXG4gIGlmICghL15cXC8rJC8udGVzdChoZWFkKSkge1xuICAgIGhlYWQgPSBoZWFkLnJlcGxhY2UoL1xcLyskLywgJycpO1xuICB9XG4gIHJldHVybiBoZWFkO1xufTtcblxuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBleHRlbnNpb24gcGFydCBvZiBhIHBhdGhuYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggbmFtZSB0byBwcm9jZXNzLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZXh0ZW5zaW9uIGlmIGFueSwgb3RoZXJ3aXNlIHRoZSBlbXB0eSBzdHJpbmcuXG4gKi9cbmdvb2cuc3RyaW5nLnBhdGguZXh0ZW5zaW9uID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgc2VwYXJhdG9yID0gJy4nO1xuICAvLyBDb21iaW5pbmcgYWxsIGFkamFjZW50IHBlcmlvZHMgaW4gdGhlIGJhc2VuYW1lIHRvIGEgc2luZ2xlIHBlcmlvZC5cbiAgdmFyIGJhc2VOYW1lID0gZ29vZy5zdHJpbmcucGF0aC5iYXNlTmFtZShwYXRoKS5yZXBsYWNlKC9cXC4rL2csIHNlcGFyYXRvcik7XG4gIHZhciBzZXBhcmF0b3JJbmRleCA9IGJhc2VOYW1lLmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gIHJldHVybiBzZXBhcmF0b3JJbmRleCA8PSAwID8gJycgOiBiYXNlTmFtZS5zdWJzdHIoc2VwYXJhdG9ySW5kZXggKyAxKTtcbn07XG5cblxuLyoqXG4gKiBKb2lucyBvbmUgb3IgbW9yZSBwYXRoIGNvbXBvbmVudHMgKGUuZy4gJ2Zvby8nIGFuZCAnYmFyJyBtYWtlICdmb28vYmFyJykuXG4gKiBBbiBhYnNvbHV0ZSBjb21wb25lbnQgd2lsbCBkaXNjYXJkIGFsbCBwcmV2aW91cyBjb21wb25lbnQuXG4gKiBTZWUgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L29zLnBhdGguaHRtbCNvcy5wYXRoLmpvaW5cbiAqIEBwYXJhbSB7Li4uc3RyaW5nfSB2YXJfYXJncyBPbmUgb2YgbW9yZSBwYXRoIGNvbXBvbmVudHMuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBwYXRoIGNvbXBvbmVudHMgam9pbmVkLlxuICovXG5nb29nLnN0cmluZy5wYXRoLmpvaW4gPSBmdW5jdGlvbih2YXJfYXJncykge1xuICB2YXIgcGF0aCA9IGFyZ3VtZW50c1swXTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgaWYgKGdvb2cuc3RyaW5nLnN0YXJ0c1dpdGgoYXJnLCAnLycpKSB7XG4gICAgICBwYXRoID0gYXJnO1xuICAgIH0gZWxzZSBpZiAocGF0aCA9PSAnJyB8fCBnb29nLnN0cmluZy5lbmRzV2l0aChwYXRoLCAnLycpKSB7XG4gICAgICBwYXRoICs9IGFyZztcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aCArPSAnLycgKyBhcmc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhdGg7XG59O1xuXG5cbi8qKlxuICogTm9ybWFsaXplcyBhIHBhdGhuYW1lIGJ5IGNvbGxhcHNpbmcgZHVwbGljYXRlIHNlcGFyYXRvcnMsIHBhcmVudCBkaXJlY3RvcnlcbiAqIHJlZmVyZW5jZXMgKCcuLicpLCBhbmQgY3VycmVudCBkaXJlY3RvcnkgcmVmZXJlbmNlcyAoJy4nKS5cbiAqIFNlZSBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvb3MucGF0aC5odG1sI29zLnBhdGgubm9ybXBhdGhcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIE9uZSBvciBtb3JlIHBhdGggY29tcG9uZW50cy5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHBhdGggYWZ0ZXIgbm9ybWFsaXphdGlvbi5cbiAqL1xuZ29vZy5zdHJpbmcucGF0aC5ub3JtYWxpemVQYXRoID0gZnVuY3Rpb24ocGF0aCkge1xuICBpZiAocGF0aCA9PSAnJykge1xuICAgIHJldHVybiAnLic7XG4gIH1cblxuICB2YXIgaW5pdGlhbFNsYXNoZXMgPSAnJztcbiAgLy8gUE9TSVggd2lsbCBrZWVwIHR3byBzbGFzaGVzLCBidXQgdGhyZWUgb3IgbW9yZSB3aWxsIGJlIGNvbGxhcHNlZCB0byBvbmUuXG4gIGlmIChnb29nLnN0cmluZy5zdGFydHNXaXRoKHBhdGgsICcvJykpIHtcbiAgICBpbml0aWFsU2xhc2hlcyA9ICcvJztcbiAgICBpZiAoZ29vZy5zdHJpbmcuc3RhcnRzV2l0aChwYXRoLCAnLy8nKSAmJlxuICAgICAgICAhZ29vZy5zdHJpbmcuc3RhcnRzV2l0aChwYXRoLCAnLy8vJykpIHtcbiAgICAgIGluaXRpYWxTbGFzaGVzID0gJy8vJztcbiAgICB9XG4gIH1cblxuICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KCcvJyk7XG4gIHZhciBuZXdQYXJ0cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuXG4gICAgLy8gJycgYW5kICcuJyBkb24ndCBjaGFuZ2UgdGhlIGRpcmVjdG9yeSwgaWdub3JlLlxuICAgIGlmIChwYXJ0ID09ICcnIHx8IHBhcnQgPT0gJy4nKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBBICcuLicgc2hvdWxkIHBvcCBhIGRpcmVjdG9yeSB1bmxlc3MgdGhpcyBpcyBub3QgYW4gYWJzb2x1dGUgcGF0aCBhbmRcbiAgICAvLyB3ZSdyZSBhdCB0aGUgcm9vdCwgb3Igd2UndmUgdHJhdmVsbGVkIHVwd2FyZHMgcmVsYXRpdmVseSBpbiB0aGUgbGFzdFxuICAgIC8vIGl0ZXJhdGlvbi5cbiAgICBpZiAocGFydCAhPSAnLi4nIHx8XG4gICAgICAgICghaW5pdGlhbFNsYXNoZXMgJiYgIW5ld1BhcnRzLmxlbmd0aCkgfHxcbiAgICAgICAgZ29vZy5hcnJheS5wZWVrKG5ld1BhcnRzKSA9PSAnLi4nKSB7XG4gICAgICBuZXdQYXJ0cy5wdXNoKHBhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdQYXJ0cy5wb3AoKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcmV0dXJuUGF0aCA9IGluaXRpYWxTbGFzaGVzICsgbmV3UGFydHMuam9pbignLycpO1xuICByZXR1cm4gcmV0dXJuUGF0aCB8fCAnLic7XG59O1xuXG5cbi8qKlxuICogU3BsaXRzIGEgcGF0aG5hbWUgaW50byBcImRpcm5hbWVcIiBhbmQgXCJiYXNlTmFtZVwiIGNvbXBvbmVudHMsIHdoZXJlIFwiYmFzZU5hbWVcIlxuICogaXMgZXZlcnl0aGluZyBhZnRlciB0aGUgZmluYWwgc2xhc2guIEVpdGhlciBwYXJ0IG1heSByZXR1cm4gYW4gZW1wdHkgc3RyaW5nLlxuICogU2VlIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9vcy5wYXRoLmh0bWwjb3MucGF0aC5zcGxpdFxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggQSBwYXRobmFtZS5cbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fSBBbiBhcnJheSBvZiBbZGlybmFtZSwgYmFzZW5hbWVdLlxuICovXG5nb29nLnN0cmluZy5wYXRoLnNwbGl0ID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgaGVhZCA9IGdvb2cuc3RyaW5nLnBhdGguZGlybmFtZShwYXRoKTtcbiAgdmFyIHRhaWwgPSBnb29nLnN0cmluZy5wYXRoLmJhc2VOYW1lKHBhdGgpO1xuICByZXR1cm4gW2hlYWQsIHRhaWxdO1xufTtcblxuLy8gVE9ETyhubmF6ZSk6IEltcGxlbWVudCBvdGhlciB1c2VmdWwgZnVuY3Rpb25zIGZyb20gb3MucGF0aFxuIiwiLy8gKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbmdvb2cucHJvdmlkZSgndzY5Yi5xci5Gb3JtYXRFcnJvcicpO1xuZ29vZy5wcm92aWRlKCd3NjliLnFyLkludmFsaWRDaGFyc2V0RXJyb3InKTtcbmdvb2cucHJvdmlkZSgndzY5Yi5xci5Ob3RGb3VuZEVycm9yJyk7XG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuUmVhZGVyRXJyb3InKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5kZWJ1Zy5FcnJvcicpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X21zZyBtZXNzYWdlLlxuICAgKiBAZXh0ZW5kcyB7Z29vZy5kZWJ1Zy5FcnJvcn1cbiAgICovXG4gIHc2OWIucXIuUmVhZGVyRXJyb3IgPSBmdW5jdGlvbihvcHRfbXNnKSB7XG4gICAgZ29vZy5iYXNlKHRoaXMsIG9wdF9tc2cpO1xuICB9O1xuICBnb29nLmluaGVyaXRzKHc2OWIucXIuUmVhZGVyRXJyb3IsIGdvb2cuZGVidWcuRXJyb3IpO1xuXG4gIC8qKlxuICAgKiBUaHJvd24gaWYgZGVjb2RpbmcgZmFpbHMuXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9tc2cgbWVzc2FnZS5cbiAgICogQGV4dGVuZHMge3c2OWIucXIuUmVhZGVyRXJyb3J9XG4gICAqL1xuICB3NjliLnFyLkZvcm1hdEVycm9yID0gZnVuY3Rpb24ob3B0X21zZykge1xuICAgIGdvb2cuYmFzZSh0aGlzLCBvcHRfbXNnKTtcbiAgfTtcbiAgZ29vZy5pbmhlcml0cyh3NjliLnFyLkZvcm1hdEVycm9yLCB3NjliLnFyLlJlYWRlckVycm9yKTtcblxuICAvKipcbiAgICogVGhyb3duIGlmIGRldGVjdGlvbiBmYWlscy5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X21zZyBtZXNzYWdlLlxuICAgKiBAZXh0ZW5kcyB7dzY5Yi5xci5SZWFkZXJFcnJvcn1cbiAgICovXG4gIHc2OWIucXIuTm90Rm91bmRFcnJvciA9IGZ1bmN0aW9uKG9wdF9tc2cpIHtcbiAgICBnb29nLmJhc2UodGhpcywgb3B0X21zZyk7XG4gIH07XG4gIGdvb2cuaW5oZXJpdHModzY5Yi5xci5Ob3RGb3VuZEVycm9yLCB3NjliLnFyLlJlYWRlckVycm9yKTtcblxuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbXNnIG1lc3NhZ2UuXG4gICAqIEBleHRlbmRzIHtnb29nLmRlYnVnLkVycm9yfVxuICAgKi9cbiAgdzY5Yi5xci5JbnZhbGlkQ2hhcnNldEVycm9yID0gZnVuY3Rpb24ob3B0X21zZykge1xuICAgIGdvb2cuYmFzZSh0aGlzLCBvcHRfbXNnIHx8ICdJbnZhbGlkQ2hhcnNldCcpO1xuICB9O1xuICBnb29nLmluaGVyaXRzKHc2OWIucXIuSW52YWxpZENoYXJzZXRFcnJvciwgZ29vZy5kZWJ1Zy5FcnJvcik7XG59KTtcbiIsIi8vIChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuV29ya2VyTWVzc2FnZVR5cGUnKTtcblxuLyoqXG4gKiBDb25zdGFudHMgZm9yIHdvcmtlciBtZXNzYWdlIHR5cGVzLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xudzY5Yi5xci5Xb3JrZXJNZXNzYWdlVHlwZSA9IHtcbiAgREVDT0RFRDogJ3N1Y2Nlc3MnLFxuICBOT1RGT1VORDogJ25vdGZvdW5kJyxcbiAgUEFUVEVSTjogJ3BhdHRlcm4nXG59O1xuXG5nb29nLmV4cG9ydFN5bWJvbCgndzY5Yi5xci5Xb3JrZXJNZXNzYWdlVHlwZScsIHc2OWIucXIuV29ya2VyTWVzc2FnZVR5cGUpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3c2OWIucXIuV29ya2VyTWVzc2FnZVR5cGUuREVDT0RFRCcsXG4gIHc2OWIucXIuV29ya2VyTWVzc2FnZVR5cGUuREVDT0RFRCk7XG5nb29nLmV4cG9ydFN5bWJvbCgndzY5Yi5xci5Xb3JrZXJNZXNzYWdlVHlwZS5OT1RGT1VORCcsXG4gIHc2OWIucXIuV29ya2VyTWVzc2FnZVR5cGUuTk9URk9VTkQpO1xuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuRGVjb2RlUmVzdWx0Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLlJlYWRlckVycm9yJyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiBFbmNhcHN1bGF0ZXMgZGVjb2RlZCByZXN1bHQgcmVhZGVyIGVycm9yLlxuICAgKiBAcGFyYW0geyhzdHJpbmd8dzY5Yi5xci5SZWFkZXJFcnJvcil9IHRleHQgZGVjb2RlZCB0ZXh0IG9yIGVycm9yLlxuICAgKiBAcGFyYW0ge0FycmF5Ljx3NjliLnFyLlJlc3VsdFBvaW50Pj19IG9wdF9wYXR0ZXJucyBzZWQgZm9yIGRlY29kaW5nLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHc2OWIucXIuRGVjb2RlUmVzdWx0ID0gZnVuY3Rpb24odGV4dCwgb3B0X3BhdHRlcm5zKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUgeyhzdHJpbmd8dzY5Yi5xci5SZWFkZXJFcnJvcil9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdF8gPSB0ZXh0O1xuICAgIHRoaXMucGF0dGVybnNfID0gb3B0X3BhdHRlcm5zIHx8IFtdO1xuICB9O1xuICB2YXIgcHJvID0gdzY5Yi5xci5EZWNvZGVSZXN1bHQucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBPbmx5IGF2YWlsYWJsZSBpZiByZXN1bHQgaXMgbm90IGFuIGVycm9yLlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBkZWNvZGVkIHN0cmluZy5cbiAgICovXG4gIHByby5nZXRUZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuaXNFcnJvcigpKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodGhpcy5yZXN1bHRfKTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gaWYgcmVzdWx0IHdhcyBhbiBlcnJvci5cbiAgICovXG4gIHByby5pc0Vycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlc3VsdF8gaW5zdGFuY2VvZiB3NjliLnFyLlJlYWRlckVycm9yKTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7P3c2OWIucXIuUmVhZGVyRXJyb3J9IGVycm9yLlxuICAgKi9cbiAgcHJvLmdldEVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuaXNFcnJvcigpKVxuICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7dzY5Yi5xci5SZWFkZXJFcnJvcn0gKi8gKHRoaXMucmVzdWx0Xyk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5Ljx3NjliLnFyLlJlc3VsdFBvaW50Pn0gZGVjb2RlZCBzdHJpbmcuXG4gICAqL1xuICBwcm8uZ2V0UGF0dGVybnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXR0ZXJuc187XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge09iamVjdH0gSlNPTiBvYmplY3QuXG4gICAqL1xuICBwcm9bJ3RvSlNPTiddID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICd0ZXh0JzogdGhpcy5nZXRUZXh0KCksXG4gICAgICAncGF0dGVybnMnOiB0aGlzLmdldFBhdHRlcm5zKCl9O1xuICB9O1xufSk7XG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG4vKlxuICogQ29weXJpZ2h0IDIwMDggWlhpbmcgYXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmdvb2cucHJvdmlkZSgndzY5Yi5xci5SZXN1bHRQb2ludCcpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NYIHggcG9zLlxuICAgKiBAcGFyYW0ge251bWJlcn0gcG9zWSB5IHBvcy5cbiAgICovXG4gIHc2OWIucXIuUmVzdWx0UG9pbnQgPSBmdW5jdGlvbihwb3NYLCBwb3NZKSB7XG4gICAgdGhpcy54ID0gcG9zWDtcbiAgICB0aGlzLnkgPSBwb3NZO1xuICB9O1xuICB2YXIgUmVzdWx0UG9pbnQgPSB3NjliLnFyLlJlc3VsdFBvaW50O1xuICB2YXIgcHJvID0gUmVzdWx0UG9pbnQucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHggcG9zLlxuICAgKi9cbiAgICBwcm8uZ2V0WCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLng7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn0geSBwb3MuXG4gICAqL1xuICBwcm8uZ2V0WSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnk7XG4gIH07XG59KTtcbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gKiBDb3B5cmlnaHQgMjAwNyBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuQWxpZ25tZW50UGF0dGVybicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLlJlc3VsdFBvaW50Jyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiBFbmNhcHN1bGF0ZXMgYW4gYWxpZ25tZW50IHBhdHRlcm4sIHdoaWNoIGFyZSB0aGUgc21hbGxlciBzcXVhcmVcbiAgICogcGF0dGVybnMgZm91bmQgaW4gYWxsIGJ1dCB0aGUgc2ltcGxlc3QgUVIgQ29kZXMuXG4gICAqIEBhdXRob3IgU2VhbiBPd2VuXG4gICAqIHBvcnRlZCB0byBqcyBieSBNYW51ZWwgQnJhdW5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBvc1ggeCBwb3MuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NZIHkgcG9zLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZXN0aW1hdGVkTW9kdWxlU2l6ZSBtb2R1bGUgc2l6ZS5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIHt3NjliLnFyLlJlc3VsdFBvaW50fVxuICAgKi9cbiAgdzY5Yi5xci5BbGlnbm1lbnRQYXR0ZXJuID0gZnVuY3Rpb24ocG9zWCwgcG9zWSwgZXN0aW1hdGVkTW9kdWxlU2l6ZSkge1xuICAgIGdvb2cuYmFzZSh0aGlzLCBwb3NYLCBwb3NZKTtcbiAgICB0aGlzLmNvdW50ID0gMTtcbiAgICB0aGlzLmVzdGltYXRlZE1vZHVsZVNpemUgPSBlc3RpbWF0ZWRNb2R1bGVTaXplO1xuICB9O1xuICB2YXIgQWxpZ25tZW50UGF0dGVybiA9IHc2OWIucXIuQWxpZ25tZW50UGF0dGVybjtcbiAgZ29vZy5pbmhlcml0cyhBbGlnbm1lbnRQYXR0ZXJuLCB3NjliLnFyLlJlc3VsdFBvaW50KTtcbiAgdmFyIHBybyA9IEFsaWdubWVudFBhdHRlcm4ucHJvdG90eXBlO1xuXG4gIHByby5pbmNyZW1lbnRDb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY291bnQrKztcbiAgfTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGlzIGFsaWdubWVudCBwYXR0ZXJuIFwiYWJvdXQgZXF1YWxzXCIgYW4gYWxpZ25tZW50XG4gICAqIHBhdHRlcm4gYXQgdGhlIHN0YXRlZFxuICAgKiBwb3NpdGlvbiBhbmQgc2l6ZSAtLSBtZWFuaW5nLCBpdCBpcyBhdCBuZWFybHkgdGhlIHNhbWUgY2VudGVyIHdpdGggbmVhcmx5XG4gICAqIHRoZSBzYW1lIHNpemUuXG4gICAqL1xuICBwcm8uYWJvdXRFcXVhbHMgPSBmdW5jdGlvbihtb2R1bGVTaXplLCBpLCBqKSB7XG4gICAgaWYgKE1hdGguYWJzKGkgLSB0aGlzLnkpIDw9IG1vZHVsZVNpemUgJiZcbiAgICAgIE1hdGguYWJzKGogLSB0aGlzLngpIDw9IG1vZHVsZVNpemUpIHtcbiAgICAgIHZhciBtb2R1bGVTaXplRGlmZiA9IE1hdGguYWJzKG1vZHVsZVNpemUgLSB0aGlzLmVzdGltYXRlZE1vZHVsZVNpemUpO1xuICAgICAgcmV0dXJuIG1vZHVsZVNpemVEaWZmIDw9IDEuMCB8fFxuICAgICAgICBtb2R1bGVTaXplRGlmZiAvIHRoaXMuZXN0aW1hdGVkTW9kdWxlU2l6ZSA8PSAxLjA7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBtb2R1bGUgc2l6ZS5cbiAgICovXG4gIHByby5nZXRFc3RpbWF0ZWRNb2R1bGVTaXplID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZXN0aW1hdGVkTW9kdWxlU2l6ZTtcbiAgfTtcblxuICAvKipcbiAgICogQ29tYmluZXMgdGhpcyBvYmplY3QncyBjdXJyZW50IGVzdGltYXRlIG9mIGEgZmluZGVyIHBhdHRlcm4gcG9zaXRpb25cbiAgICogYW5kIG1vZHVsZSBzaXplXG4gICAqIHdpdGggYSBuZXcgZXN0aW1hdGUuXG4gICAqIEByZXR1cm4ge0FsaWdubWVudFBhdHRlcm59IGEgbmV3IGNvbnRhaW5pbmcgYW4gYXZlcmFnZSBvZiB0aGUgdHdvLlxuICAgKi9cbiAgcHJvLmNvbWJpbmVFc3RpbWF0ZSA9IGZ1bmN0aW9uKGksIGosIG5ld01vZHVsZVNpemUpIHtcbiAgICB2YXIgY29tYmluZWRYID0gKHRoaXMueCArIGopIC8gMi4wO1xuICAgIHZhciBjb21iaW5lZFkgPSAodGhpcy55ICsgaSkgLyAyLjA7XG4gICAgdmFyIGNvbWJpbmVkTW9kdWxlU2l6ZSA9ICh0aGlzLmVzdGltYXRlZE1vZHVsZVNpemUgKyBuZXdNb2R1bGVTaXplKSAvIDIuMDtcbiAgICByZXR1cm4gbmV3IEFsaWdubWVudFBhdHRlcm4oY29tYmluZWRYLCBjb21iaW5lZFksIGNvbWJpbmVkTW9kdWxlU2l6ZSk7XG4gIH07XG5cblxuICAvKipcbiAgICogQHJldHVybiB7T2JqZWN0fSBKU09OIG9iamVjdCBmb3IgcGF0dGVybi5cbiAgICovXG4gIHByb1sndG9KU09OJ10gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ3gnOiB0aGlzLmdldFgoKSxcbiAgICAgICd5JzogdGhpcy5nZXRZKCksXG4gICAgICAnc2l6ZSc6IHRoaXMuZ2V0RXN0aW1hdGVkTW9kdWxlU2l6ZSgpfTtcbiAgfTtcblxuXG5cbn0pO1xuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiBQb3J0ZWQgdG8gSmF2YVNjcmlwdCBieSBMYXphciBMYXN6bG8gMjAxMVxuIGxhemFyc29mdEBnbWFpbC5jb20sIHd3dy5sYXphcnNvZnQuaW5mb1xuICovXG4vKlxuICpcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuZ29vZy5wcm92aWRlKCd3NjliLnFyLkFsaWdubWVudFBhdHRlcm5GaW5kZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5pbWcuQml0TWF0cml4TGlrZScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkFsaWdubWVudFBhdHRlcm4nKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5Ob3RGb3VuZEVycm9yJyk7XG5cblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgdmFyIEFsaWdubWVudFBhdHRlcm4gPSB3NjliLnFyLkFsaWdubWVudFBhdHRlcm47XG4gIHZhciBOb3RGb3VuZEVycm9yID0gdzY5Yi5xci5Ob3RGb3VuZEVycm9yO1xuICAvKipcbiAgICogVGhpcyBjbGFzcyBhdHRlbXB0cyB0byBmaW5kIGFsaWdubWVudCBwYXR0ZXJucyBpbiBhIFFSIENvZGUuXG4gICAqIEFsaWdubWVudCBwYXR0ZXJucyBsb29rIGxpa2UgZmluZGVyXG4gICAqIHBhdHRlcm5zIGJ1dCBhcmUgc21hbGxlciBhbmQgYXBwZWFyIGF0IHJlZ3VsYXIgaW50ZXJ2YWxzIHRocm91Z2hvdXQgdGhlXG4gICAqIGltYWdlLlxuICAgKlxuICAgKiBBdCB0aGUgbW9tZW50IHRoaXMgb25seSBsb29rcyBmb3IgdGhlIGJvdHRvbS1yaWdodCBhbGlnbm1lbnQgcGF0dGVybi5cbiAgICpcbiAgICpcbiAgICogVGhpcyBpcyBtb3N0bHkgYSBzaW1wbGlmaWVkIGNvcHkgb2Yge0BsaW5rIEZpbmRlclBhdHRlcm5GaW5kZXJ9LlxuICAgKiBJdCBpcyBjb3BpZWQsXG4gICAqIHBhc3RlZCBhbmQgc3RyaXBwZWQgZG93biBoZXJlIGZvciBtYXhpbXVtIHBlcmZvcm1hbmNlIGJ1dCBkb2VzXG4gICAqIHVuZm9ydHVuYXRlbHkgZHVwbGljYXRlXG4gICAqIHNvbWUgY29kZS5cbiAgICpcbiAgICogVGhpcyBjbGFzcyBpcyB0aHJlYWQtc2FmZSBidXQgbm90IHJlZW50cmFudC4gRWFjaCB0aHJlYWQgbXVzdCBhbGxvY2F0ZVxuICAgKiBpdHMgb3duIG9iamVjdC5cbiAgICpcbiAgICogQGF1dGhvciBTZWFuIE93ZW5cbiAgICogQGF1dGhvciBtYkB3NjliLmNvbSAoTWFudWVsIEJyYXVuKSAtIHBvcnRlZCB0byBqc1xuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHshdzY5Yi5pbWcuQml0TWF0cml4TGlrZX0gaW1hZ2UgaW1hZ2UgdG8gc2VhcmNoLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRYIGxlZnQgY29sdW1uIGZyb20gd2hpY2ggdG8gc3RhcnQgc2VhcmNoaW5nLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRZIHN0YXQgdG9wIHJvdyBmcm9tIHdoaWNoIHRvIHN0YXJ0IHNlYXJjaGluZy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIHdpZHRoIG9mIHJlZ2lvbiB0byBzZWFyY2guXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgaGVpZ2h0IG9mIHJlZ2lvbiB0byBzZWFyY2guXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtb2R1bGVTaXplIHNpemUgbW9kdWxlIHNpemUgc28gZmFyLlxuICAgKiBAcGFyYW0gez93NjliLnFyLlJlc3VsdFBvaW50Q2FsbGJhY2t9IHJlc3VsdFBvaW50Q2FsbGJhY2sgY2FsbGJhY2suXG4gICAqL1xuICB3NjliLnFyLkFsaWdubWVudFBhdHRlcm5GaW5kZXIgPSBmdW5jdGlvbihpbWFnZSwgc3RhcnRYLCBzdGFydFksIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQsIG1vZHVsZVNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBvaW50Q2FsbGJhY2spIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7IXc2OWIuaW1nLkJpdE1hdHJpeExpa2V9XG4gICAgICovXG4gICAgdGhpcy5pbWFnZSA9IGltYWdlO1xuICAgIHRoaXMucG9zc2libGVDZW50ZXJzID0gW107XG4gICAgdGhpcy5zdGFydFggPSBzdGFydFg7XG4gICAgdGhpcy5zdGFydFkgPSBzdGFydFk7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMubW9kdWxlU2l6ZSA9IG1vZHVsZVNpemU7XG4gICAgdGhpcy5jcm9zc0NoZWNrU3RhdGVDb3VudCA9IG5ldyBBcnJheSgwLCAwLCAwKTtcbiAgICB0aGlzLnJlc3VsdFBvaW50Q2FsbGJhY2sgPSByZXN1bHRQb2ludENhbGxiYWNrO1xuICB9O1xuICB2YXIgQWxpZ25tZW50UGF0dGVybkZpbmRlciA9IHc2OWIucXIuQWxpZ25tZW50UGF0dGVybkZpbmRlcjtcbiAgdmFyIHBybyA9IEFsaWdubWVudFBhdHRlcm5GaW5kZXIucHJvdG90eXBlO1xuXG4gIHByby5jZW50ZXJGcm9tRW5kID0gZnVuY3Rpb24oc3RhdGVDb3VudCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGF0ZUNvdW50WzJdKSAtIHN0YXRlQ291bnRbMV0gLyAyLjA7XG4gIH07XG4gIHByby5mb3VuZFBhdHRlcm5Dcm9zcyA9IGZ1bmN0aW9uKHN0YXRlQ291bnQpIHtcbiAgICB2YXIgbW9kdWxlU2l6ZSA9IHRoaXMubW9kdWxlU2l6ZTtcbiAgICB2YXIgbWF4VmFyaWFuY2UgPSBtb2R1bGVTaXplIC8gMi4wO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICBpZiAoTWF0aC5hYnMobW9kdWxlU2l6ZSAtIHN0YXRlQ291bnRbaV0pID49IG1heFZhcmlhbmNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgcHJvLmNyb3NzQ2hlY2tWZXJ0aWNhbCA9IGZ1bmN0aW9uKHN0YXJ0SSwgY2VudGVySiwgbWF4Q291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFN0YXRlQ291bnRUb3RhbCkge1xuICAgIHZhciBpbWFnZSA9IHRoaXMuaW1hZ2U7XG5cbiAgICB2YXIgbWF4SSA9IGltYWdlLmdldEhlaWdodCgpO1xuICAgIHZhciBzdGF0ZUNvdW50ID0gdGhpcy5jcm9zc0NoZWNrU3RhdGVDb3VudDtcbiAgICBzdGF0ZUNvdW50WzBdID0gMDtcbiAgICBzdGF0ZUNvdW50WzFdID0gMDtcbiAgICBzdGF0ZUNvdW50WzJdID0gMDtcblxuICAgIC8vIFN0YXJ0IGNvdW50aW5nIHVwIGZyb20gY2VudGVyXG4gICAgdmFyIGkgPSBzdGFydEk7XG4gICAgd2hpbGUgKGkgPj0gMCAmJiBpbWFnZS5nZXQoY2VudGVySiwgaSkgJiZcbiAgICAgIHN0YXRlQ291bnRbMV0gPD0gbWF4Q291bnQpIHtcbiAgICAgIHN0YXRlQ291bnRbMV0rKztcbiAgICAgIGktLTtcbiAgICB9XG4gICAgLy8gSWYgYWxyZWFkeSB0b28gbWFueSBtb2R1bGVzIGluIHRoaXMgc3RhdGUgb3IgcmFuIG9mZiB0aGUgZWRnZTpcbiAgICBpZiAoaSA8IDAgfHwgc3RhdGVDb3VudFsxXSA+IG1heENvdW50KSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICB3aGlsZSAoaSA+PSAwICYmICFpbWFnZS5nZXQoY2VudGVySiwgKyBpKSAmJlxuICAgICAgc3RhdGVDb3VudFswXSA8PSBtYXhDb3VudCkge1xuICAgICAgc3RhdGVDb3VudFswXSsrO1xuICAgICAgaS0tO1xuICAgIH1cbiAgICBpZiAoc3RhdGVDb3VudFswXSA+IG1heENvdW50KSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIC8vIE5vdyBhbHNvIGNvdW50IGRvd24gZnJvbSBjZW50ZXJcbiAgICBpID0gc3RhcnRJICsgMTtcbiAgICB3aGlsZSAoaSA8IG1heEkgJiYgaW1hZ2UuZ2V0KGNlbnRlckosIGkpICYmXG4gICAgICBzdGF0ZUNvdW50WzFdIDw9IG1heENvdW50KSB7XG4gICAgICBzdGF0ZUNvdW50WzFdKys7XG4gICAgICBpKys7XG4gICAgfVxuICAgIGlmIChpID09IG1heEkgfHwgc3RhdGVDb3VudFsxXSA+IG1heENvdW50KSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICB3aGlsZSAoaSA8IG1heEkgJiYgIWltYWdlLmdldChjZW50ZXJKLCBpKSAmJlxuICAgICAgc3RhdGVDb3VudFsyXSA8PSBtYXhDb3VudCkge1xuICAgICAgc3RhdGVDb3VudFsyXSsrO1xuICAgICAgaSsrO1xuICAgIH1cbiAgICBpZiAoc3RhdGVDb3VudFsyXSA+IG1heENvdW50KSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHZhciBzdGF0ZUNvdW50VG90YWwgPSBzdGF0ZUNvdW50WzBdICsgc3RhdGVDb3VudFsxXSArIHN0YXRlQ291bnRbMl07XG4gICAgaWYgKDUgKiBNYXRoLmFicyhzdGF0ZUNvdW50VG90YWwgLSBvcmlnaW5hbFN0YXRlQ291bnRUb3RhbCkgPj1cbiAgICAgIDIgKiBvcmlnaW5hbFN0YXRlQ291bnRUb3RhbCkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5mb3VuZFBhdHRlcm5Dcm9zcyhzdGF0ZUNvdW50KSA/XG4gICAgICB0aGlzLmNlbnRlckZyb21FbmQoc3RhdGVDb3VudCxcbiAgICAgICAgaSkgOiBOYU47XG4gIH07XG5cbiAgLyoqIDxwPlRoaXMgbWV0aG9kIGF0dGVtcHRzIHRvIGZpbmQgdGhlIGJvdHRvbS1yaWdodCBhbGlnbm1lbnQgcGF0dGVybiBpbiB0aGVcbiAgICogaW1hZ2UuIEl0IGlzIGEgYml0IG1lc3N5IHNpbmNlIGl0J3MgcHJldHR5IHBlcmZvcm1hbmNlLWNyaXRpY2FsIGFuZCBzbyBpc1xuICAgKiB3cml0dGVuIHRvIGJlIGZhc3QgZm9yZW1vc3QuPC9wPlxuICAgKlxuICAgKiBAcmV0dXJuIHtBbGlnbm1lbnRQYXR0ZXJufSBpZiBmb3VuZCB0aHJvd3MgTm90Rm91bmRFcnJvciBpZiBub3RcbiAgICogZm91bmQuXG4gICAqL1xuICBwcm8uaGFuZGxlUG9zc2libGVDZW50ZXIgPSBmdW5jdGlvbihzdGF0ZUNvdW50LCBpLCBqKSB7XG4gICAgdmFyIHN0YXRlQ291bnRUb3RhbCA9IHN0YXRlQ291bnRbMF0gKyBzdGF0ZUNvdW50WzFdICsgc3RhdGVDb3VudFsyXTtcbiAgICB2YXIgY2VudGVySiA9IHRoaXMuY2VudGVyRnJvbUVuZChzdGF0ZUNvdW50LCBqKTtcbiAgICB2YXIgY2VudGVySSA9IHRoaXMuY3Jvc3NDaGVja1ZlcnRpY2FsKGksIE1hdGguZmxvb3IoY2VudGVySiksXG4gICAgICAyICogc3RhdGVDb3VudFsxXSwgc3RhdGVDb3VudFRvdGFsKTtcbiAgICBpZiAoIWlzTmFOKGNlbnRlckkpKSB7XG4gICAgICB2YXIgZXN0aW1hdGVkTW9kdWxlU2l6ZSA9IChzdGF0ZUNvdW50WzBdICsgc3RhdGVDb3VudFsxXSArXG4gICAgICAgIHN0YXRlQ291bnRbMl0pIC8gMy4wO1xuICAgICAgdmFyIG1heCA9IHRoaXMucG9zc2libGVDZW50ZXJzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIGNlbnRlciA9IHRoaXMucG9zc2libGVDZW50ZXJzW2luZGV4XTtcbiAgICAgICAgLy8gTG9vayBmb3IgYWJvdXQgdGhlIHNhbWUgY2VudGVyIGFuZCBtb2R1bGUgc2l6ZTpcbiAgICAgICAgaWYgKGNlbnRlci5hYm91dEVxdWFscyhlc3RpbWF0ZWRNb2R1bGVTaXplLCBjZW50ZXJJLCBjZW50ZXJKKSkge1xuICAgICAgICAgIHJldHVybiBjZW50ZXIuY29tYmluZUVzdGltYXRlKGNlbnRlckksIGNlbnRlckosIGVzdGltYXRlZE1vZHVsZVNpemUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBIYWRuJ3QgZm91bmQgdGhpcyBiZWZvcmU7IHNhdmUgaXRcbiAgICAgIHZhciBwb2ludCA9IG5ldyBBbGlnbm1lbnRQYXR0ZXJuKGNlbnRlckosIGNlbnRlckksIGVzdGltYXRlZE1vZHVsZVNpemUpO1xuICAgICAgdGhpcy5wb3NzaWJsZUNlbnRlcnMucHVzaChwb2ludCk7XG4gICAgICBpZiAodGhpcy5yZXN1bHRQb2ludENhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5yZXN1bHRQb2ludENhbGxiYWNrKHBvaW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLyoqIDxwPlRoaXMgbWV0aG9kIGF0dGVtcHRzIHRvIGZpbmQgdGhlIGJvdHRvbS1yaWdodCBhbGlnbm1lbnQgcGF0dGVybiBpbiB0aGVcbiAgICogaW1hZ2UuIEl0IGlzIGEgYml0IG1lc3N5IHNpbmNlIGl0J3MgcHJldHR5IHBlcmZvcm1hbmNlLWNyaXRpY2FsIGFuZCBzbyBpc1xuICAgKiB3cml0dGVuIHRvIGJlIGZhc3QgZm9yZW1vc3QuPC9wPlxuICAgKlxuICAgKiBAcmV0dXJuIHtBbGlnbm1lbnRQYXR0ZXJufSBpZiBmb3VuZCBOb3RGb3VuZEV4Y2VwdGlvbiBpZiBub3RcbiAgICogZm91bmQuXG4gICAqL1xuXG4gIHByby5maW5kID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YXJ0WCA9IHRoaXMuc3RhcnRYO1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICB2YXIgaW1hZ2UgPSB0aGlzLmltYWdlO1xuICAgIHZhciBtYXhKID0gc3RhcnRYICsgdGhpcy53aWR0aDtcbiAgICB2YXIgbWlkZGxlSSA9IHRoaXMuc3RhcnRZICsgKGhlaWdodCA+PiAxKTtcbiAgICAvLyBXZSBhcmUgbG9va2luZyBmb3IgYmxhY2svd2hpdGUvYmxhY2sgbW9kdWxlcyBpbiAxOjE6MSByYXRpbztcbiAgICAvLyB0aGlzIHRyYWNrcyB0aGUgbnVtYmVyIG9mIGJsYWNrL3doaXRlL2JsYWNrIG1vZHVsZXMgc2VlbiBzbyBmYXJcbiAgICB2YXIgc3RhdGVDb3VudCA9IG5ldyBBcnJheSgwLCAwLCAwKTtcbiAgICBmb3IgKHZhciBpR2VuID0gMDsgaUdlbiA8IGhlaWdodDsgaUdlbisrKSB7XG4gICAgICAvLyBTZWFyY2ggZnJvbSBtaWRkbGUgb3V0d2FyZHNcbiAgICAgIHZhciBpID0gbWlkZGxlSSArXG4gICAgICAgICgoaUdlbiAmIDB4MDEpID09IDAgPyAoKGlHZW4gKyAxKSA+PiAxKSA6IC0oKGlHZW4gKyAxKSA+PiAxKSk7XG4gICAgICBzdGF0ZUNvdW50WzBdID0gMDtcbiAgICAgIHN0YXRlQ291bnRbMV0gPSAwO1xuICAgICAgc3RhdGVDb3VudFsyXSA9IDA7XG4gICAgICB2YXIgaiA9IHN0YXJ0WDtcbiAgICAgIC8vIEJ1cm4gb2ZmIGxlYWRpbmcgd2hpdGUgcGl4ZWxzIGJlZm9yZSBhbnl0aGluZyBlbHNlOyBpZiB3ZSBzdGFydCBpbiB0aGVcbiAgICAgIC8vIG1pZGRsZSBvZiBhIHdoaXRlIHJ1biwgaXQgZG9lc24ndCBtYWtlIHNlbnNlIHRvIGNvdW50IGl0cyBsZW5ndGgsXG4gICAgICAvLyBzaW5jZSB3ZSBkb24ndCBrbm93IGlmIHRoZSB3aGl0ZSBydW4gY29udGludWVkIHRvIHRoZSBsZWZ0IG9mIHRoZVxuICAgICAgLy8gc3RhcnQgcG9pbnRcbiAgICAgIHdoaWxlIChqIDwgbWF4SiAmJiBpbWFnZS5nZXQoaiwgaSkpIHtcbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IDA7XG4gICAgICB3aGlsZSAoaiA8IG1heEopIHtcbiAgICAgICAgaWYgKGltYWdlLmdldChqLCBpKSkge1xuICAgICAgICAgIC8vIEJsYWNrIHBpeGVsXG4gICAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZSA9PSAxKSB7XG4gICAgICAgICAgICAvLyBDb3VudGluZyBibGFjayBwaXhlbHNcbiAgICAgICAgICAgIHN0YXRlQ291bnRbY3VycmVudFN0YXRlXSsrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDb3VudGluZyB3aGl0ZSBwaXhlbHNcbiAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUgPT0gMikge1xuICAgICAgICAgICAgICAvLyBBIHdpbm5lcj9cbiAgICAgICAgICAgICAgaWYgKHRoaXMuZm91bmRQYXR0ZXJuQ3Jvc3Moc3RhdGVDb3VudCkpIHtcbiAgICAgICAgICAgICAgICAvLyBZZXNcbiAgICAgICAgICAgICAgICB2YXIgY29uZmlybWVkID0gdGhpcy5oYW5kbGVQb3NzaWJsZUNlbnRlcihzdGF0ZUNvdW50LCBpLCBqKTtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlybWVkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb25maXJtZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN0YXRlQ291bnRbMF0gPSBzdGF0ZUNvdW50WzJdO1xuICAgICAgICAgICAgICBzdGF0ZUNvdW50WzFdID0gMTtcbiAgICAgICAgICAgICAgc3RhdGVDb3VudFsyXSA9IDA7XG4gICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZSA9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdGF0ZUNvdW50WysrY3VycmVudFN0YXRlXSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBXaGl0ZSBwaXhlbFxuICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUgPT0gMSkge1xuICAgICAgICAgICAgLy8gQ291bnRpbmcgYmxhY2sgcGl4ZWxzXG4gICAgICAgICAgICBjdXJyZW50U3RhdGUrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGVDb3VudFtjdXJyZW50U3RhdGVdKys7XG4gICAgICAgIH1cbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZm91bmRQYXR0ZXJuQ3Jvc3Moc3RhdGVDb3VudCkpIHtcbiAgICAgICAgdmFyIGNvbmZpcm1lZCA9IHRoaXMuaGFuZGxlUG9zc2libGVDZW50ZXIoc3RhdGVDb3VudCwgaSwgbWF4Sik7XG4gICAgICAgIGlmIChjb25maXJtZWQgIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb25maXJtZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIbW0sIG5vdGhpbmcgd2Ugc2F3IHdhcyBvYnNlcnZlZCBhbmQgY29uZmlybWVkIHR3aWNlLiBJZiB3ZSBoYWRcbiAgICAvLyBhbnkgZ3Vlc3MgYXQgYWxsLCByZXR1cm4gaXQuXG4gICAgaWYgKHRoaXMucG9zc2libGVDZW50ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnBvc3NpYmxlQ2VudGVyc1swXTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgTm90Rm91bmRFcnJvcigpO1xuICB9O1xufSk7XG5cbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gUG9ydGVkIHRvIEphdmFTY3JpcHQgYnkgTGF6YXIgTGFzemxvIDIwMTFcblxuIGxhemFyc29mdEBnbWFpbC5jb20sIHd3dy5sYXphcnNvZnQuaW5mb1xuXG4gKi9cblxuLypcbiAqXG4gKiBDb3B5cmlnaHQgMjAwNyBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuQml0TWF0cml4Jyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuaW1nLkJpdE1hdHJpeExpa2UnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIHdpZHRoLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG9wdF9oZWlnaHQgaGVpZ2h0IGRlZmF1bHRzIHRvIHdpZHRoLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGltcGxlbWVudHMge3c2OWIuaW1nLkJpdE1hdHJpeExpa2V9XG4gICAqL1xuICB3NjliLnFyLkJpdE1hdHJpeCA9IGZ1bmN0aW9uKHdpZHRoLCBvcHRfaGVpZ2h0KSB7XG4gICAgdmFyIGhlaWdodCA9IGdvb2cuaXNEZWYob3B0X2hlaWdodCkgPyBvcHRfaGVpZ2h0IDogd2lkdGg7XG4gICAgaWYgKHdpZHRoIDwgMSB8fCBoZWlnaHQgPCAxKSB7XG4gICAgICB0aHJvdyBFcnJvcigpO1xuICAgIH1cbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdmFyIHJvd1NpemUgPSB3aWR0aCA+PiA1O1xuICAgIGlmICgod2lkdGggJiAweDFmKSAhPSAwKSB7XG4gICAgICByb3dTaXplKys7XG4gICAgfVxuICAgIHRoaXMucm93U2l6ZSA9IHJvd1NpemU7XG4gICAgdGhpcy5iaXRzID0gbmV3IFVpbnQzMkFycmF5KHJvd1NpemUgKiBoZWlnaHQpO1xuICB9O1xuXG4gIHZhciBCaXRNYXRyaXggPSB3NjliLnFyLkJpdE1hdHJpeDtcbiAgdmFyIHBybyA9IEJpdE1hdHJpeC5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn0gVGhlIHdpZHRoIG9mIHRoZSBtYXRyaXguXG4gICAqL1xuICBwcm8uZ2V0V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy53aWR0aDtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgaGVpZ2h0IG9mIHRoZSBtYXRyaXguXG4gICAqL1xuICBwcm8uZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVpZ2h0O1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHggcG9zLlxuICAgKiBAcGFyYW0ge251bWJlcn0geSB5IHBvcy5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gYml0IGF0IGdpdmVuIHBvc2l0aW9uLlxuICAgKi9cbiAgcHJvLmdldCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgb2Zmc2V0ID0geSAqIHRoaXMucm93U2l6ZSArICh4ID4+IDUpO1xuICAgIHJldHVybiAoKHRoaXMuYml0c1tvZmZzZXRdID4+ICh4ICYgMHgxZikpICYgMSkgIT0gMDtcbiAgfTtcblxuICAvKipcbiAgICogU2V0IGJpdCBhdCBnaXZlbiBwb3NpdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggeCBwb3MuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IHkgcG9zLlxuICAgKi9cbiAgcHJvLnNldCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgb2Zmc2V0ID0geSAqIHRoaXMucm93U2l6ZSArICh4ID4+IDUpO1xuICAgIHRoaXMuYml0c1tvZmZzZXRdIHw9IDEgPDwgKHggJiAweDFmKTtcbiAgfTtcblxuICAvKipcbiAgICogRmxpcCBiaXQgYXQgZ2l2ZW4gcG9zaXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHggcG9zLlxuICAgKiBAcGFyYW0ge251bWJlcn0geSB5IHBvcy5cbiAgICovXG4gIHByby5mbGlwID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBvZmZzZXQgPSB5ICogdGhpcy5yb3dTaXplICsgKHggPj4gNSk7XG4gICAgdGhpcy5iaXRzW29mZnNldF0gXj0gMSA8PCAoeCAmIDB4MWYpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDbGVhciBtYXRyaXguXG4gICAqL1xuICBwcm8uY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbWF4ID0gdGhpcy5iaXRzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heDsgaSsrKSB7XG4gICAgICB0aGlzLmJpdHNbaV0gPSAwO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogU2V0IGJpdHMgaW4gZ2l2ZW4gcmVjdGFuZ2xlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdCBsZWZ0IHBvcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvcCB0b3AgcG9zLlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggd2lkdGguXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgaGVpZ2h0LlxuICAgKi9cbiAgcHJvLnNldFJlZ2lvbiA9IGZ1bmN0aW9uKGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCkge1xuICAgIGlmICh0b3AgPCAwIHx8IGxlZnQgPCAwKSB7XG4gICAgICB0aHJvdyBFcnJvcigpO1xuICAgIH1cbiAgICBpZiAoaGVpZ2h0IDwgMSB8fCB3aWR0aCA8IDEpIHtcbiAgICAgIHRocm93IEVycm9yKCk7ICAgLy8gSGVpZ2h0IGFuZCB3aWR0aCBtdXN0IGJlIGF0IGxlYXN0IDFcbiAgICB9XG4gICAgdmFyIHJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuICAgIHZhciBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gICAgaWYgKGJvdHRvbSA+IHRoaXMuaGVpZ2h0IHx8IHJpZ2h0ID4gdGhpcy53aWR0aCkge1xuICAgICAgdGhyb3cgRXJyb3IoKTsgIC8vIFRoZSByZWdpb24gbXVzdCBmaXQgaW5zaWRlIHRoZSBtYXRyaXhcbiAgICB9XG4gICAgZm9yICh2YXIgeSA9IHRvcDsgeSA8IGJvdHRvbTsgeSsrKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0geSAqIHRoaXMucm93U2l6ZTtcbiAgICAgIGZvciAodmFyIHggPSBsZWZ0OyB4IDwgcmlnaHQ7IHgrKykge1xuICAgICAgICB0aGlzLmJpdHNbb2Zmc2V0ICsgKHggPj4gNSldIHw9IDEgPDwgKHggJiAweDFmKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gbWF0cml4IGFzIHN0cmluZy5cbiAgICovXG4gIHByby50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGhpcy53aWR0aDsgeCsrKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuZ2V0KHgsIHkpID8gJ1ggJyA6ICcgICcpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2goJ1xcbicpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xuICB9O1xuXG59KTtcblxuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuR3JpZFNhbXBsZXInKTtcbmdvb2cucHJvdmlkZSgndzY5Yi5xci5HcmlkU2FtcGxlckludGVyZmFjZScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLk5vdEZvdW5kRXJyb3InKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcblxuXG4gIC8qKiBJbXBsZW1lbnRhdGlvbnMgb2YgdGhpcyBjbGFzcyBjYW4sIGdpdmVuIGxvY2F0aW9ucyBvZiBmaW5kZXIgcGF0dGVybnMgZm9yXG4gICAqIGEgUVIgY29kZSBpbiBhbiBpbWFnZSwgc2FtcGxlIHRoZSByaWdodCBwb2ludHMgaW4gdGhlIGltYWdlIHRvIHJlY29uc3RydWN0XG4gICAqIHRoZSBRUiBjb2RlLCBhY2NvdW50aW5nIGZvciBwZXJzcGVjdGl2ZSBkaXN0b3J0aW9uLiBJdCBpcyBhYnN0cmFjdGVkIHNpbmNlXG4gICAqIGl0IGlzIHJlbGF0aXZlbHkgZXhwZW5zaXZlIGFuZCBzaG91bGQgYmUgYWxsb3dlZCB0byB0YWtlIGFkdmFudGFnZSBvZlxuICAgKiBwbGF0Zm9ybS1zcGVjaWZpYyBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb25zLCBsaWtlIFN1bidzIEphdmEgQWR2YW5jZWRcbiAgICogSW1hZ2luZyBsaWJyYXJ5LCBidXQgd2hpY2ggbWF5IG5vdCBiZSBhdmFpbGFibGUgaW4gb3RoZXIgZW52aXJvbm1lbnRzIHN1Y2hcbiAgICogYXMgSjJNRSwgYW5kIHZpY2UgdmVyc2EuXG4gICAqXG4gICAqIFRoZSBpbXBsZW1lbnRhdGlvbiB1c2VkIGNhbiBiZSBjb250cm9sbGVkIGJ5IGNhbGxpbmcge1xuICAgKiBzZXRHcmlkU2FtcGxlcihHcmlkU2FtcGxlcil9IHdpdGggYW4gaW5zdGFuY2Ugb2YgYSBjbGFzcyB3aGljaCBpbXBsZW1lbnRzXG4gICAqIHRoaXMgaW50ZXJmYWNlLlxuICAgKlxuICAgKiBAYXV0aG9yIFNlYW4gT3dlblxuICAgKiBAYXV0aG9yIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pIC0gcG9ydGVkIHRvIGpzXG4gICAqL1xuXG4gIHZhciBfID0gdzY5Yi5xci5HcmlkU2FtcGxlcjtcblxuICBfLmdyaWRTYW1wbGVyID0gbnVsbDtcblxuICAvKipcbiAgICogU2V0cyB0aGUgaW1wbGVtZW50YXRpb24gb2YgR3JpZFNhbXBsZXIgdXNlZCBieSB0aGUgbGlicmFyeS4gT25lIGdsb2JhbFxuICAgKiBpbnN0YW5jZSBpcyBzdG9yZWQsIHdoaWNoIG1heSBzb3VuZCBwcm9ibGVtYXRpYy4gQnV0LCB0aGUgaW1wbGVtZW50YXRpb25cbiAgICogcHJvdmlkZWQgb3VnaHQgdG8gYmUgYXBwcm9wcmlhdGUgZm9yIHRoZSBlbnRpcmUgcGxhdGZvcm0sIGFuZCBhbGwgdXNlcyBvZlxuICAgKiB0aGlzIGxpYnJhcnkgaW4gdGhlIHdob2xlIGxpZmV0aW1lIG9mIHRoZSBKVk0uIEZvciBpbnN0YW5jZSwgYW4gQW5kcm9pZFxuICAgKiBhY3Rpdml0eSBjYW4gc3dhcCBpbiBhbiBpbXBsZW1lbnRhdGlvbiB0aGF0IHRha2VzIGFkdmFudGFnZSBvZiBuYXRpdmVcbiAgICogcGxhdGZvcm0gbGlicmFyaWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge3c2OWIucXIuR3JpZFNhbXBsZXJJbnRlcmZhY2V9IG5ld0dyaWRTYW1wbGVyIFRoZVxuICAgKiBwbGF0Zm9ybS1zcGVjaWZpYyBvYmplY3QgdG8gaW5zdGFsbC5cbiAgICovXG4gIF8uc2V0R3JpZFNhbXBsZXIgPSBmdW5jdGlvbihuZXdHcmlkU2FtcGxlcikge1xuICAgIF8uZ3JpZFNhbXBsZXIgPSBuZXdHcmlkU2FtcGxlcjtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7dzY5Yi5xci5HcmlkU2FtcGxlckludGVyZmFjZX0gdGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gb2YgR3JpZFNhbXBsZXIuXG4gICAqL1xuICBfLmdldEluc3RhbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF8uZ3JpZFNhbXBsZXI7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdyaWQgc2FtcGxlIGludGVyZmFjZS5cbiAgICogQGludGVyZmFjZVxuICAgKi9cbiAgdzY5Yi5xci5HcmlkU2FtcGxlckludGVyZmFjZSA9IGZ1bmN0aW9uKCkge1xuICB9O1xuXG4gIC8qKlxuICAgKiBTYW1wbGVzIGFuIGltYWdlIGZvciBhIHJlY3Rhbmd1bGFyIG1hdHJpeCBvZiBiaXRzIG9mIHRoZSBnaXZlbiBkaW1lbnNpb24uXG4gICAqIEBwYXJhbSB7dzY5Yi5xci5CaXRNYXRyaXh9IGltYWdlIGltYWdlIHRvIHNhbXBsZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGRpbWVuc2lvblggd2lkdGggb2YgQml0TWF0cml4IHRvIHNhbXBsZSBmcm9tIGltYWdlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZGltZW5zaW9uWSBoZWlnaHQgb2YgQml0TWF0cml4IHRvIHNhbXBsZSBmcm9tXG4gICAqIGltYWdlLlxuICAgKiBAcmV0dXJuIHt3NjliLnFyLkJpdE1hdHJpeH0gcmVwcmVzZW50aW5nIGEgZ3JpZCBvZiBwb2ludHMgc2FtcGxlZCBmcm9tXG4gICAqIHRoZSBpbWFnZSB3aXRoaW4gYSByZWdpb24gZGVmaW5lZCBieSB0aGUgXCJmcm9tXCIgcGFyYW1ldGVycyBieSB0aGUgZ2l2ZW5cbiAgICogcG9pbnRzIGlzIGludmFsaWQgb3IgcmVzdWx0cyBpbiBzYW1wbGluZyBvdXRzaWRlIHRoZSBpbWFnZSBib3VuZGFyaWVzLlxuICAgKi9cbiAgdzY5Yi5xci5HcmlkU2FtcGxlckludGVyZmFjZS5wcm90b3R5cGUuc2FtcGxlR3JpZCA9IGZ1bmN0aW9uKGltYWdlLCBkaW1lbnNpb25YLCBkaW1lbnNpb25ZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcDFUb1gsIHAxVG9ZLCBwMlRvWCwgcDJUb1ksIHAzVG9YLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcDNUb1ksIHA0VG9YLCBwNFRvWSwgcDFGcm9tWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAxRnJvbVksIHAyRnJvbVgsIHAyRnJvbVksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwM0Zyb21YLCBwM0Zyb21ZLCBwNEZyb21YLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcDRGcm9tWSkge1xuXG4gIH07XG5cbiAgLyoqXG4gICAqIFNhbXBsZXMgYW4gaW1hZ2UgZm9yIGEgcmVjdGFuZ3VsYXIgbWF0cml4IG9mIGJpdHMgb2YgdGhlIGdpdmVuIGRpbWVuc2lvbi5cbiAgICogQHBhcmFtIHt3NjliLnFyLkJpdE1hdHJpeH0gaW1hZ2UgaW1hZ2UgdG8gc2FtcGxlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZGltZW5zaW9uWCB3aWR0aCBvZiBCaXRNYXRyaXggdG8gc2FtcGxlIGZyb20gaW1hZ2UuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkaW1lbnNpb25ZIGhlaWdodCBvZiBCaXRNYXRyaXggdG8gc2FtcGxlIGZyb21cbiAgICogaW1hZ2UuXG4gICAqIEBwYXJhbSB7dzY5Yi5xci5QZXJzcGVjdGl2ZVRyYW5zZm9ybX0gdHJhbnNmb3JtIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICogQHJldHVybiB7dzY5Yi5xci5CaXRNYXRyaXh9IHJlcHJlc2VudGluZyBhIGdyaWQgb2YgcG9pbnRzIHNhbXBsZWQgZnJvbVxuICAgKiB0aGUgaW1hZ2Ugd2l0aGluIGEgcmVnaW9uIGRlZmluZWQgYnkgdGhlIFwiZnJvbVwiIHBhcmFtZXRlcnMgYnkgdGhlIGdpdmVuXG4gICAqIHBvaW50cyBpcyBpbnZhbGlkIG9yIHJlc3VsdHMgaW4gc2FtcGxpbmcgb3V0c2lkZSB0aGUgaW1hZ2UgYm91bmRhcmllcy5cbiAgICovXG4gIHc2OWIucXIuR3JpZFNhbXBsZXJJbnRlcmZhY2UucHJvdG90eXBlLnNhbXBsZUdyaWRUcmFuc2Zvcm0gPSBmdW5jdGlvbihpbWFnZSwgZGltZW5zaW9uWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvblksIHRyYW5zZm9ybSkge1xuICB9O1xuXG4gIC8qKlxuICAgKiA8cD5DaGVja3MgYSBzZXQgb2YgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIHRyYW5zZm9ybWVkIHRvIHNhbXBsZSBwb2ludHMgb25cbiAgICogYW4gaW1hZ2UgYWdhaW5zdCB0aGUgaW1hZ2UncyBkaW1lbnNpb25zIHRvIHNlZSBpZiB0aGUgcG9pbnQgYXJlIGV2ZW5cbiAgICogd2l0aGluIHRoZSBpbWFnZS48L3A+XG4gICAqXG4gICAqIDxwPlRoaXMgbWV0aG9kIHdpbGwgYWN0dWFsbHkgXCJudWRnZVwiIHRoZSBlbmRwb2ludHMgYmFjayBvbnRvIHRoZSBpbWFnZSBpZlxuICAgKiB0aGV5IGFyZSBmb3VuZCB0byBiZSBiYXJlbHkgKGxlc3MgdGhhbiAxIHBpeGVsKSBvZmYgdGhlIGltYWdlLiBUaGlzXG4gICAqIGFjY291bnRzIGZvciBpbXBlcmZlY3QgZGV0ZWN0aW9uIG9mIGZpbmRlciBwYXR0ZXJucyBpbiBhbiBpbWFnZSB3aGVyZSB0aGVcbiAgICogUVIgQ29kZSBydW5zIGFsbCB0aGUgd2F5IHRvIHRoZSBpbWFnZSBib3JkZXIuPC9wPlxuICAgKlxuICAgKiA8cD5Gb3IgZWZmaWNpZW5jeSwgdGhlIG1ldGhvZCB3aWxsIGNoZWNrIHBvaW50cyBmcm9tIGVpdGhlciBlbmQgb2YgdGhlXG4gICAqIGxpbmUgdW50aWwgb25lIGlzIGZvdW5kIHRvIGJlIHdpdGhpbiB0aGUgaW1hZ2UuIEJlY2F1c2UgdGhlIHNldCBvZiBwb2ludHNcbiAgICogYXJlIGFzc3VtZWQgdG8gYmUgbGluZWFyLCB0aGlzIGlzIHZhbGlkLjwvcD5cbiAgICpcbiAgICogQHBhcmFtIHt3NjliLnFyLkJpdE1hdHJpeH0gaW1hZ2UgaW1hZ2UgaW50byB3aGljaCB0aGUgcG9pbnRzIHNob3VsZCBtYXAuXG4gICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHBvaW50cyBhY3R1YWwgcG9pbnRzIGluIHgxLHkxLC4uLix4bix5biBmb3JtLlxuICAgKi9cbiAgXy5jaGVja0FuZE51ZGdlUG9pbnRzID0gZnVuY3Rpb24oaW1hZ2UsIHBvaW50cykge1xuICAgIHZhciB3aWR0aCA9IGltYWdlLmdldFdpZHRoKCk7XG4gICAgdmFyIGhlaWdodCA9IGltYWdlLmdldEhlaWdodCgpO1xuICAgIC8vIENoZWNrIGFuZCBudWRnZSBwb2ludHMgZnJvbSBzdGFydCB1bnRpbCB3ZSBzZWUgc29tZSB0aGF0IGFyZSBPSzpcbiAgICB2YXIgbnVkZ2VkID0gdHJ1ZTtcbiAgICB2YXIgeCwgeSwgb2Zmc2V0O1xuICAgIGZvciAob2Zmc2V0ID0gMDsgb2Zmc2V0IDwgcG9pbnRzLmxlbmd0aCAmJiBudWRnZWQ7IG9mZnNldCArPSAyKSB7XG4gICAgICB4ID0gcG9pbnRzW29mZnNldF0gPj4gMDtcbiAgICAgIHkgPSBwb2ludHNbb2Zmc2V0ICsgMV0gPj4gMDtcbiAgICAgIGlmICh4IDwgLTEgfHwgeCA+IHdpZHRoIHx8IHkgPCAtMSB8fCB5ID4gaGVpZ2h0KSB7XG4gICAgICAgIHRocm93IG5ldyB3NjliLnFyLk5vdEZvdW5kRXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIG51ZGdlZCA9IGZhbHNlO1xuICAgICAgaWYgKHggPT0gLTEpIHtcbiAgICAgICAgcG9pbnRzW29mZnNldF0gPSAwLjtcbiAgICAgICAgbnVkZ2VkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoeCA9PSB3aWR0aCkge1xuICAgICAgICBwb2ludHNbb2Zmc2V0XSA9IHdpZHRoIC0gMTtcbiAgICAgICAgbnVkZ2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh5ID09IC0xKSB7XG4gICAgICAgIHBvaW50c1tvZmZzZXQgKyAxXSA9IDAuO1xuICAgICAgICBudWRnZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh5ID09IGhlaWdodCkge1xuICAgICAgICBwb2ludHNbb2Zmc2V0ICsgMV0gPSBoZWlnaHQgLSAxO1xuICAgICAgICBudWRnZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBDaGVjayBhbmQgbnVkZ2UgcG9pbnRzIGZyb20gZW5kOlxuICAgIG51ZGdlZCA9IHRydWU7XG4gICAgZm9yIChvZmZzZXQgPSBwb2ludHMubGVuZ3RoIC0gMjsgb2Zmc2V0ID49IDAgJiYgbnVkZ2VkOyBvZmZzZXQgLT0gMikge1xuICAgICAgeCA9IHBvaW50c1tvZmZzZXRdID4+IDA7XG4gICAgICB5ID0gcG9pbnRzW29mZnNldCArIDFdID4+IDA7XG4gICAgICBpZiAoeCA8IC0xIHx8IHggPiB3aWR0aCB8fCB5IDwgLTEgfHwgeSA+IGhlaWdodCkge1xuICAgICAgICB0aHJvdyBuZXcgdzY5Yi5xci5Ob3RGb3VuZEVycm9yKCk7XG4gICAgICB9XG4gICAgICBudWRnZWQgPSBmYWxzZTtcbiAgICAgIGlmICh4ID09IC0xKSB7XG4gICAgICAgIHBvaW50c1tvZmZzZXRdID0gMC47XG4gICAgICAgIG51ZGdlZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHggPT0gd2lkdGgpIHtcbiAgICAgICAgcG9pbnRzW29mZnNldF0gPSB3aWR0aCAtIDE7XG4gICAgICAgIG51ZGdlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoeSA9PSAtMSkge1xuICAgICAgICBwb2ludHNbb2Zmc2V0ICsgMV0gPSAwLjtcbiAgICAgICAgbnVkZ2VkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoeSA9PSBoZWlnaHQpIHtcbiAgICAgICAgcG9pbnRzW29mZnNldCArIDFdID0gaGVpZ2h0IC0gMTtcbiAgICAgICAgbnVkZ2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cblxufSk7XG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG4vKlxuICogQ29weXJpZ2h0IDIwMDcgWlhpbmcgYXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZ29vZy5wcm92aWRlKCd3NjliLnFyLlBlcnNwZWN0aXZlVHJhbnNmb3JtJyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHc2OWIucXIuUGVyc3BlY3RpdmVUcmFuc2Zvcm0gPSBmdW5jdGlvbihhMTEsIGEyMSwgYTMxLCBhMTIsIGEyMiwgYTMyLCBhMTMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhMjMsIGEzMykge1xuICAgIHRoaXMuYTExID0gYTExO1xuICAgIHRoaXMuYTEyID0gYTEyO1xuICAgIHRoaXMuYTEzID0gYTEzO1xuICAgIHRoaXMuYTIxID0gYTIxO1xuICAgIHRoaXMuYTIyID0gYTIyO1xuICAgIHRoaXMuYTIzID0gYTIzO1xuICAgIHRoaXMuYTMxID0gYTMxO1xuICAgIHRoaXMuYTMyID0gYTMyO1xuICAgIHRoaXMuYTMzID0gYTMzO1xuICB9O1xuICB2YXIgUGVyc3BlY3RpdmVUcmFuc2Zvcm0gPSB3NjliLnFyLlBlcnNwZWN0aXZlVHJhbnNmb3JtO1xuICB2YXIgcHJvID0gUGVyc3BlY3RpdmVUcmFuc2Zvcm0ucHJvdG90eXBlO1xuICBwcm8udHJhbnNmb3JtUG9pbnRzMSA9IGZ1bmN0aW9uKHBvaW50cykge1xuICAgIHZhciBtYXggPSBwb2ludHMubGVuZ3RoO1xuICAgIHZhciBhMTEgPSB0aGlzLmExMTtcbiAgICB2YXIgYTEyID0gdGhpcy5hMTI7XG4gICAgdmFyIGExMyA9IHRoaXMuYTEzO1xuICAgIHZhciBhMjEgPSB0aGlzLmEyMTtcbiAgICB2YXIgYTIyID0gdGhpcy5hMjI7XG4gICAgdmFyIGEyMyA9IHRoaXMuYTIzO1xuICAgIHZhciBhMzEgPSB0aGlzLmEzMTtcbiAgICB2YXIgYTMyID0gdGhpcy5hMzI7XG4gICAgdmFyIGEzMyA9IHRoaXMuYTMzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4OyBpICs9IDIpIHtcbiAgICAgIHZhciB4ID0gcG9pbnRzW2ldO1xuICAgICAgdmFyIHkgPSBwb2ludHNbaSArIDFdO1xuICAgICAgdmFyIGRlbm9taW5hdG9yID0gYTEzICogeCArIGEyMyAqIHkgKyBhMzM7XG4gICAgICBwb2ludHNbaV0gPSAoYTExICogeCArIGEyMSAqIHkgKyBhMzEpIC8gZGVub21pbmF0b3I7XG4gICAgICBwb2ludHNbaSArIDFdID0gKGExMiAqIHggKyBhMjIgKiB5ICsgYTMyKSAvIGRlbm9taW5hdG9yO1xuICAgIH1cbiAgfTtcblxuICBwcm8udHJhbnNmb3JtUG9pbnRzMiA9IGZ1bmN0aW9uKHhWYWx1ZXMsIHlWYWx1ZXMpIHtcbiAgICB2YXIgbiA9IHhWYWx1ZXMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICB2YXIgeCA9IHhWYWx1ZXNbaV07XG4gICAgICB2YXIgeSA9IHlWYWx1ZXNbaV07XG4gICAgICB2YXIgZGVub21pbmF0b3IgPSB0aGlzLmExMyAqIHggKyB0aGlzLmEyMyAqIHkgKyB0aGlzLmEzMztcbiAgICAgIHhWYWx1ZXNbaV0gPSAodGhpcy5hMTEgKiB4ICsgdGhpcy5hMjEgKiB5ICsgdGhpcy5hMzEpIC8gZGVub21pbmF0b3I7XG4gICAgICB5VmFsdWVzW2ldID0gKHRoaXMuYTEyICogeCArIHRoaXMuYTIyICogeSArIHRoaXMuYTMyKSAvIGRlbm9taW5hdG9yO1xuICAgIH1cbiAgfTtcblxuICBwcm8uYnVpbGRBZGpvaW50ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gQWRqb2ludCBpcyB0aGUgdHJhbnNwb3NlIG9mIHRoZSBjb2ZhY3RvciBtYXRyaXg6XG4gICAgcmV0dXJuIG5ldyBQZXJzcGVjdGl2ZVRyYW5zZm9ybSh0aGlzLmEyMiAqIHRoaXMuYTMzIC1cbiAgICAgIHRoaXMuYTIzICogdGhpcy5hMzIsXG4gICAgICB0aGlzLmEyMyAqIHRoaXMuYTMxIC0gdGhpcy5hMjEgKiB0aGlzLmEzMyxcbiAgICAgIHRoaXMuYTIxICogdGhpcy5hMzIgLSB0aGlzLmEyMiAqIHRoaXMuYTMxLFxuICAgICAgdGhpcy5hMTMgKiB0aGlzLmEzMiAtIHRoaXMuYTEyICogdGhpcy5hMzMsXG4gICAgICB0aGlzLmExMSAqIHRoaXMuYTMzIC0gdGhpcy5hMTMgKiB0aGlzLmEzMSxcbiAgICAgIHRoaXMuYTEyICogdGhpcy5hMzEgLSB0aGlzLmExMSAqIHRoaXMuYTMyLFxuICAgICAgdGhpcy5hMTIgKiB0aGlzLmEyMyAtIHRoaXMuYTEzICogdGhpcy5hMjIsXG4gICAgICB0aGlzLmExMyAqIHRoaXMuYTIxIC0gdGhpcy5hMTEgKiB0aGlzLmEyMyxcbiAgICAgIHRoaXMuYTExICogdGhpcy5hMjIgLSB0aGlzLmExMiAqIHRoaXMuYTIxKTtcbiAgfTtcblxuICBwcm8udGltZXMgPSBmdW5jdGlvbihvdGhlcikge1xuICAgIHJldHVybiBuZXcgUGVyc3BlY3RpdmVUcmFuc2Zvcm0odGhpcy5hMTEgKiBvdGhlci5hMTEgK1xuICAgICAgdGhpcy5hMjEgKiBvdGhlci5hMTIgKyB0aGlzLmEzMSAqIG90aGVyLmExMyxcbiAgICAgIHRoaXMuYTExICogb3RoZXIuYTIxICsgdGhpcy5hMjEgKiBvdGhlci5hMjIgKyB0aGlzLmEzMSAqIG90aGVyLmEyMyxcbiAgICAgIHRoaXMuYTExICogb3RoZXIuYTMxICsgdGhpcy5hMjEgKiBvdGhlci5hMzIgKyB0aGlzLmEzMSAqIG90aGVyLmEzMyxcbiAgICAgIHRoaXMuYTEyICogb3RoZXIuYTExICsgdGhpcy5hMjIgKiBvdGhlci5hMTIgKyB0aGlzLmEzMiAqIG90aGVyLmExMyxcbiAgICAgIHRoaXMuYTEyICogb3RoZXIuYTIxICsgdGhpcy5hMjIgKiBvdGhlci5hMjIgKyB0aGlzLmEzMiAqIG90aGVyLmEyMyxcbiAgICAgIHRoaXMuYTEyICogb3RoZXIuYTMxICsgdGhpcy5hMjIgKiBvdGhlci5hMzIgKyB0aGlzLmEzMiAqIG90aGVyLmEzMyxcbiAgICAgIHRoaXMuYTEzICogb3RoZXIuYTExICsgdGhpcy5hMjMgKiBvdGhlci5hMTIgKyB0aGlzLmEzMyAqIG90aGVyLmExMyxcbiAgICAgIHRoaXMuYTEzICogb3RoZXIuYTIxICsgdGhpcy5hMjMgKiBvdGhlci5hMjIgKyB0aGlzLmEzMyAqIG90aGVyLmEyMyxcbiAgICAgIHRoaXMuYTEzICogb3RoZXIuYTMxICsgdGhpcy5hMjMgKiBvdGhlci5hMzIgKyB0aGlzLmEzMyAqIG90aGVyLmEzMyk7XG4gIH07XG5cbiAgUGVyc3BlY3RpdmVUcmFuc2Zvcm0ucXVhZHJpbGF0ZXJhbFRvUXVhZHJpbGF0ZXJhbCA9IGZ1bmN0aW9uKFxuICAgIHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDBwLCB5MHAsIHgxcCwgeTFwLCB4MnAsIHkycCwgeDNwLCB5M3ApIHtcblxuICAgIHZhciBxVG9TID0gUGVyc3BlY3RpdmVUcmFuc2Zvcm0ucXVhZHJpbGF0ZXJhbFRvU3F1YXJlKFxuICAgICAgeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKTtcbiAgICB2YXIgc1RvUSA9IFBlcnNwZWN0aXZlVHJhbnNmb3JtLnNxdWFyZVRvUXVhZHJpbGF0ZXJhbChcbiAgICAgIHgwcCwgeTBwLCB4MXAsIHkxcCwgeDJwLCB5MnAsIHgzcCxcbiAgICAgIHkzcCk7XG4gICAgcmV0dXJuIHNUb1EudGltZXMocVRvUyk7XG4gIH07XG5cbiAgUGVyc3BlY3RpdmVUcmFuc2Zvcm0uc3F1YXJlVG9RdWFkcmlsYXRlcmFsID0gZnVuY3Rpb24oeDAsIHkwLCB4MSwgeTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLCB5MiwgeDMsIHkzKSB7XG4gICAgdmFyIGR5MiA9IHkzIC0geTI7XG4gICAgdmFyIGR5MyA9IHkwIC0geTEgKyB5MiAtIHkzO1xuICAgIGlmIChkeTIgPT0gMC4wICYmIGR5MyA9PSAwLjApIHtcbiAgICAgIHJldHVybiBuZXcgUGVyc3BlY3RpdmVUcmFuc2Zvcm0oeDEgLSB4MCwgeDIgLSB4MSwgeDAsIHkxIC0geTAsIHkyIC0geTEsXG4gICAgICAgIHkwLFxuICAgICAgICAwLjAsIDAuMCwgMS4wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGR4MSA9IHgxIC0geDI7XG4gICAgICB2YXIgZHgyID0geDMgLSB4MjtcbiAgICAgIHZhciBkeDMgPSB4MCAtIHgxICsgeDIgLSB4MztcbiAgICAgIHZhciBkeTEgPSB5MSAtIHkyO1xuICAgICAgdmFyIGRlbm9taW5hdG9yID0gZHgxICogZHkyIC0gZHgyICogZHkxO1xuICAgICAgdmFyIGExMyA9IChkeDMgKiBkeTIgLSBkeDIgKiBkeTMpIC8gZGVub21pbmF0b3I7XG4gICAgICB2YXIgYTIzID0gKGR4MSAqIGR5MyAtIGR4MyAqIGR5MSkgLyBkZW5vbWluYXRvcjtcbiAgICAgIHJldHVybiBuZXcgUGVyc3BlY3RpdmVUcmFuc2Zvcm0oeDEgLSB4MCArIGExMyAqIHgxLCB4MyAtIHgwICsgYTIzICogeDMsXG4gICAgICAgIHgwLFxuICAgICAgICB5MSAtIHkwICsgYTEzICogeTEsIHkzIC0geTAgKyBhMjMgKiB5MywgeTAsIGExMywgYTIzLCAxLjApO1xuICAgIH1cbiAgfTtcblxuICBQZXJzcGVjdGl2ZVRyYW5zZm9ybS5xdWFkcmlsYXRlcmFsVG9TcXVhcmUgPSBmdW5jdGlvbih4MCwgeTAsIHgxLCB5MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsIHkyLCB4MywgeTMpIHtcbiAgICAvLyBIZXJlLCB0aGUgYWRqb2ludCBzZXJ2ZXMgYXMgdGhlIGludmVyc2U6XG4gICAgcmV0dXJuIFBlcnNwZWN0aXZlVHJhbnNmb3JtLnNxdWFyZVRvUXVhZHJpbGF0ZXJhbChcbiAgICAgIHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5MykuYnVpbGRBZGpvaW50KCk7XG4gIH07XG5cbn0pO1xuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5xci5EZWZhdWx0R3JpZFNhbXBsZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5CaXRNYXRyaXgnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5HcmlkU2FtcGxlcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkdyaWRTYW1wbGVySW50ZXJmYWNlJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuUGVyc3BlY3RpdmVUcmFuc2Zvcm0nKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcblxuICB2YXIgUGVyc3BlY3RpdmVUcmFuc2Zvcm0gPSB3NjliLnFyLlBlcnNwZWN0aXZlVHJhbnNmb3JtO1xuICB2YXIgR3JpZFNhbXBsZXIgPSB3NjliLnFyLkdyaWRTYW1wbGVyO1xuICB2YXIgQml0TWF0cml4ID0gdzY5Yi5xci5CaXRNYXRyaXg7XG4gIC8qKlxuICAgKiBAYXV0aG9yIFNlYW4gT3dlblxuICAgKiBAYXV0aG9yIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pIC0gcG9ydGVkIHRvIGpzLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGltcGxlbWVudHMge3c2OWIucXIuR3JpZFNhbXBsZXJJbnRlcmZhY2V9XG4gICAqL1xuICB3NjliLnFyLkRlZmF1bHRHcmlkU2FtcGxlciA9IGZ1bmN0aW9uKCkge1xuICB9O1xuICB2YXIgcHJvID0gdzY5Yi5xci5EZWZhdWx0R3JpZFNhbXBsZXIucHJvdG90eXBlO1xuXG4gIHByby5zYW1wbGVHcmlkID0gZnVuY3Rpb24oaW1hZ2UsIGRpbWVuc2lvblgsIGRpbWVuc2lvblksIHAxVG9YLCBwMVRvWSwgcDJUb1gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDJUb1ksIHAzVG9YLCBwM1RvWSwgcDRUb1gsIHA0VG9ZLCBwMUZyb21YLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAxRnJvbVksIHAyRnJvbVgsIHAyRnJvbVksIHAzRnJvbVgsIHAzRnJvbVksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDRGcm9tWCwgcDRGcm9tWSkge1xuXG4gICAgdmFyIHRyYW5zZm9ybSA9IFBlcnNwZWN0aXZlVHJhbnNmb3JtLnF1YWRyaWxhdGVyYWxUb1F1YWRyaWxhdGVyYWwoXG4gICAgICBwMVRvWCwgcDFUb1ksIHAyVG9YLCBwMlRvWSwgcDNUb1gsIHAzVG9ZLCBwNFRvWCwgcDRUb1ksXG4gICAgICBwMUZyb21YLCBwMUZyb21ZLCBwMkZyb21YLCBwMkZyb21ZLCBwM0Zyb21YLCBwM0Zyb21ZLCBwNEZyb21YLCBwNEZyb21ZKTtcblxuICAgIHJldHVybiB0aGlzLnNhbXBsZUdyaWRUcmFuc2Zvcm0oaW1hZ2UsIGRpbWVuc2lvblgsIGRpbWVuc2lvblksIHRyYW5zZm9ybSk7XG4gIH07XG5cbiAgcHJvLnNhbXBsZUdyaWRUcmFuc2Zvcm0gPSBmdW5jdGlvbihpbWFnZSwgZGltZW5zaW9uWCwgZGltZW5zaW9uWSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0pIHtcbiAgICBpZiAoZGltZW5zaW9uWCA8PSAwIHx8IGRpbWVuc2lvblkgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IHc2OWIucXIuTm90Rm91bmRFcnJvcigpO1xuICAgIH1cbiAgICB2YXIgYml0cyA9IG5ldyBCaXRNYXRyaXgoZGltZW5zaW9uWCwgZGltZW5zaW9uWSk7XG4gICAgdmFyIHBvaW50cyA9IG5ldyBBcnJheShkaW1lbnNpb25YIDw8IDEpO1xuICAgIHZhciB4O1xuICAgIGZvciAodmFyIHkgPSAwOyB5IDwgZGltZW5zaW9uWTsgeSsrKSB7XG4gICAgICB2YXIgbWF4ID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgIHZhciBpVmFsdWUgPSB5ICsgMC41O1xuICAgICAgZm9yICh4ID0gMDsgeCA8IG1heDsgeCArPSAyKSB7XG4gICAgICAgIHBvaW50c1t4XSA9ICh4ID4+IDEpICsgMC41O1xuICAgICAgICBwb2ludHNbeCArIDFdID0gaVZhbHVlO1xuICAgICAgfVxuICAgICAgdHJhbnNmb3JtLnRyYW5zZm9ybVBvaW50czEocG9pbnRzKTtcbiAgICAgIC8vIFF1aWNrIGNoZWNrIHRvIHNlZSBpZiBwb2ludHMgdHJhbnNmb3JtZWQgdG8gc29tZXRoaW5nIGluc2lkZSB0aGVcbiAgICAgIC8vIGltYWdlOyBzdWZmaWNpZW50IHRvIGNoZWNrIHRoZSBlbmRwb2ludHNcbiAgICAgIEdyaWRTYW1wbGVyLmNoZWNrQW5kTnVkZ2VQb2ludHMoaW1hZ2UsIHBvaW50cyk7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHggPSAwOyB4IDwgbWF4OyB4ICs9IDIpIHtcbiAgICAgICAgICBpZiAoaW1hZ2UuZ2V0KHBvaW50c1t4XSA+PiAwLCBwb2ludHNbeCArIDFdID4+IDApKSB7XG4gICAgICAgICAgICAvLyBCbGFjaygtaXNoKSBwaXhlbFxuICAgICAgICAgICAgYml0cy5zZXQoeCA+PiAxLCB5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGFpb29iZSkge1xuICAgICAgICAvLyBUaGlzIGZlZWxzIHdyb25nLCBidXQsIHNvbWV0aW1lcyBpZiB0aGUgZmluZGVyIHBhdHRlcm5zIGFyZVxuICAgICAgICAvLyBtaXNpZGVudGlmaWVkLCB0aGUgcmVzdWx0aW5nIHRyYW5zZm9ybSBnZXRzIFwidHdpc3RlZFwiIHN1Y2ggdGhhdCBpdFxuICAgICAgICAvLyBtYXBzIGEgc3RyYWlnaHQgbGluZSBvZiBwb2ludHMgdG8gYSBzZXQgb2YgcG9pbnRzIHdob3NlIGVuZHBvaW50c1xuICAgICAgICAvLyBhcmUgaW4gYm91bmRzLCBidXQgb3RoZXJzIGFyZSBub3QuIFRoZXJlIGlzIHByb2JhYmx5IHNvbWVcbiAgICAgICAgLy8gbWF0aGVtYXRpY2FsIHdheSB0byBkZXRlY3QgdGhpcyBhYm91dCB0aGUgdHJhbnNmb3JtYXRpb24gdGhhdCBJXG4gICAgICAgIC8vIGRvbid0IGtub3cgeWV0LiAgVGhpcyByZXN1bHRzIGluIGFuIHVnbHkgcnVudGltZSBleGNlcHRpb24gZGVzcGl0ZVxuICAgICAgICAvLyBvdXIgY2xldmVyIGNoZWNrcyBhYm92ZSAtLSBjYW4ndCBoYXZlIHRoYXQuIFdlIGNvdWxkIGNoZWNrIGVhY2hcbiAgICAgICAgLy8gcG9pbnQncyBjb29yZGluYXRlcyBidXQgdGhhdCBmZWVscyBkdXBsaWNhdGl2ZS4gV2Ugc2V0dGxlIGZvclxuICAgICAgICAvLyBjYXRjaGluZyBhbmQgd3JhcHBpbmcgQXJyYXlJbmRleE91dE9mQm91bmRzRXhjZXB0aW9uLlxuICAgICAgICB0aHJvdyBuZXcgdzY5Yi5xci5Ob3RGb3VuZEVycm9yKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiaXRzO1xuICB9O1xuXG4gIC8vIHNldCBkZWZhdWx0IGdyaWQgc2FtcGxlci5cbiAgR3JpZFNhbXBsZXIuc2V0R3JpZFNhbXBsZXIobmV3IHc2OWIucXIuRGVmYXVsdEdyaWRTYW1wbGVyKCkpO1xuXG59KTtcbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gKiBDb3B5cmlnaHQgMjAwNyBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZ29vZy5wcm92aWRlKCd3NjliLnFyLkRlY29kZUhpbnRUeXBlJyk7XG5cbi8qKlxuICogRGVjb2RlIGhpbnQga2V5IGNvbnN0YW50cy5cbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbnc2OWIucXIuRGVjb2RlSGludFR5cGUgPSB7XG4gIFRSWV9IQVJERVI6IDEsXG4gIENIQVJBQ1RFUl9TRVQ6IDJcbn07XG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG4vKlxuICpcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuRmluZGVyUGF0dGVybicpO1xuZ29vZy5wcm92aWRlKCd3NjliLnFyLkZpbmRlclBhdHRlcm5JbmZvJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuUmVzdWx0UG9pbnQnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NYIHggcG9zLlxuICAgKiBAcGFyYW0ge251bWJlcn0gcG9zWSB5IHBvcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGVzdGltYXRlZE1vZHVsZVNpemUgZXN0aW1hdGVkIHNpemUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2NvdW50IGNvdW50LCBkZWZhdWx0cyB0byAxLlxuICAgKiBAZXh0ZW5kcyB7dzY5Yi5xci5SZXN1bHRQb2ludH1cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB3NjliLnFyLkZpbmRlclBhdHRlcm4gPSBmdW5jdGlvbihwb3NYLCBwb3NZLCBlc3RpbWF0ZWRNb2R1bGVTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRfY291bnQpIHtcbiAgICBnb29nLmJhc2UodGhpcywgcG9zWCwgcG9zWSk7XG4gICAgdGhpcy5jb3VudCA9IGdvb2cuaXNEZWYob3B0X2NvdW50KSA/IG9wdF9jb3VudCA6IDE7XG4gICAgdGhpcy5lc3RpbWF0ZWRNb2R1bGVTaXplID0gZXN0aW1hdGVkTW9kdWxlU2l6ZTtcbiAgfTtcbiAgdmFyIEZpbmRlclBhdHRlcm4gPSB3NjliLnFyLkZpbmRlclBhdHRlcm47XG4gIGdvb2cuaW5oZXJpdHMoRmluZGVyUGF0dGVybiwgdzY5Yi5xci5SZXN1bHRQb2ludCk7XG4gIHZhciBwcm8gPSBGaW5kZXJQYXR0ZXJuLnByb3RvdHlwZTtcblxuICBwcm8uaW5jcmVtZW50Q291bnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvdW50Kys7XG4gIH07XG5cbiAgcHJvLmdldENvdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY291bnQ7XG4gIH07XG5cbiAgcHJvLmFib3V0RXF1YWxzID0gZnVuY3Rpb24obW9kdWxlU2l6ZSwgaSwgaikge1xuICAgIGlmIChNYXRoLmFicyhpIC0gdGhpcy55KSA8PSBtb2R1bGVTaXplICYmXG4gICAgICBNYXRoLmFicyhqIC0gdGhpcy54KSA8PSBtb2R1bGVTaXplKSB7XG4gICAgICB2YXIgbW9kdWxlU2l6ZURpZmYgPSBNYXRoLmFicyhtb2R1bGVTaXplIC0gdGhpcy5lc3RpbWF0ZWRNb2R1bGVTaXplKTtcbiAgICAgIHJldHVybiBtb2R1bGVTaXplRGlmZiA8PSAxLjAgfHxcbiAgICAgICAgbW9kdWxlU2l6ZURpZmYgPD0gdGhpcy5lc3RpbWF0ZWRNb2R1bGVTaXplO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbWJpbmVzIHRoaXMgb2JqZWN0J3MgY3VycmVudCBlc3RpbWF0ZSBvZiBhIGZpbmRlciBwYXR0ZXJuIHBvc2l0aW9uIGFuZFxuICAgKiBtb2R1bGUgc2l6ZVxuICAgKiB3aXRoIGEgbmV3IGVzdGltYXRlLiBJdCByZXR1cm5zIGEgbmV3IHtAY29kZSBGaW5kZXJQYXR0ZXJufSBjb250YWluaW5nXG4gICAqIGEgd2VpZ2h0ZWQgYXZlcmFnZSBiYXNlZCBvbiBjb3VudC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGkgcG9zaXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBqIHBvc2l0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbmV3TW9kdWxlU2l6ZSBzaXplLlxuICAgKiBAcmV0dXJuIHtGaW5kZXJQYXR0ZXJufSBjb21iaW5lZCBwYXR0ZXJuLlxuICAgKi9cbiAgcHJvLmNvbWJpbmVFc3RpbWF0ZSA9IGZ1bmN0aW9uKGksIGosIG5ld01vZHVsZVNpemUpIHtcbiAgICB2YXIgY291bnQgPSB0aGlzLmNvdW50O1xuICAgIHZhciBjb21iaW5lZENvdW50ID0gY291bnQgKyAxO1xuICAgIHZhciBjb21iaW5lZFggPSAoY291bnQgKiB0aGlzLnggKyBqKSAvIGNvbWJpbmVkQ291bnQ7XG4gICAgdmFyIGNvbWJpbmVkWSA9IChjb3VudCAqIHRoaXMueSArIGkpIC8gY29tYmluZWRDb3VudDtcbiAgICB2YXIgY29tYmluZWRNb2R1bGVTaXplID0gKGNvdW50ICogdGhpcy5lc3RpbWF0ZWRNb2R1bGVTaXplICtcbiAgICAgIG5ld01vZHVsZVNpemUpIC8gY29tYmluZWRDb3VudDtcbiAgICByZXR1cm4gbmV3IEZpbmRlclBhdHRlcm4oY29tYmluZWRYLCBjb21iaW5lZFksXG4gICAgICBjb21iaW5lZE1vZHVsZVNpemUsIGNvbWJpbmVkQ291bnQpO1xuICB9O1xuXG5cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBtb2R1bGUgc2l6ZS5cbiAgICovXG4gIHByby5nZXRFc3RpbWF0ZWRNb2R1bGVTaXplID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZXN0aW1hdGVkTW9kdWxlU2l6ZTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSB4IHBvcy5cbiAgICovXG4gIHByby5nZXRYID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMueDtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSB5IHBvcy5cbiAgICovXG4gIHByby5nZXRZID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMueTtcbiAgfTtcblxuICAvKipcbiAgICogT3JkZXJzIGFuIGFycmF5IG9mIHRocmVlIFJlc3VsdFBvaW50cyBpbiBhbiBvcmRlciBbQSxCLENdIHN1Y2ggdGhhdFxuICAgKiBBQiA8IEFDIGFuZFxuICAgKiBCQyA8IEFDIGFuZFxuICAgKiB0aGUgYW5nbGUgYmV0d2VlbiBCQyBhbmQgQkEgaXMgbGVzcyB0aGFuIDE4MCBkZWdyZWVzLlxuXG4gICAqIEBwYXJhbSB7QXJyYXkuPHc2OWIucXIuRmluZGVyUGF0dGVybj59IHBhdHRlcm5zIHBhdHRlcm5zIHRvIHNvcnQuXG4gICAqL1xuICBGaW5kZXJQYXR0ZXJuLm9yZGVyQmVzdFBhdHRlcm5zID0gZnVuY3Rpb24ocGF0dGVybnMpIHtcbiAgICBmdW5jdGlvbiBkaXN0YW5jZShwYXR0ZXJuMSwgcGF0dGVybjIpIHtcbiAgICAgIHZhciB4RGlmZiA9IHBhdHRlcm4xLnggLSBwYXR0ZXJuMi54O1xuICAgICAgdmFyIHlEaWZmID0gcGF0dGVybjEueSAtIHBhdHRlcm4yLnk7XG4gICAgICByZXR1cm4gKHhEaWZmICogeERpZmYgKyB5RGlmZiAqIHlEaWZmKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB6IGNvbXBvbmVudCBvZiB0aGUgY3Jvc3MgcHJvZHVjdCBiZXR3ZWVuXG4gICAgLy8gdmVjdG9ycyBCQyBhbmQgQkEuXG4gICAgZnVuY3Rpb24gY3Jvc3NQcm9kdWN0Wihwb2ludEEsIHBvaW50QiwgcG9pbnRDKSB7XG4gICAgICB2YXIgYlggPSBwb2ludEIueDtcbiAgICAgIHZhciBiWSA9IHBvaW50Qi55O1xuICAgICAgcmV0dXJuICgocG9pbnRDLnggLSBiWCkgKiAocG9pbnRBLnkgLSBiWSkpIC1cbiAgICAgICAgKChwb2ludEMueSAtIGJZKSAqIChwb2ludEEueCAtIGJYKSk7XG4gICAgfVxuXG5cbiAgICAvLyBGaW5kIGRpc3RhbmNlcyBiZXR3ZWVuIHBhdHRlcm4gY2VudGVyc1xuICAgIHZhciB6ZXJvT25lRGlzdGFuY2UgPSBkaXN0YW5jZShwYXR0ZXJuc1swXSwgcGF0dGVybnNbMV0pO1xuICAgIHZhciBvbmVUd29EaXN0YW5jZSA9IGRpc3RhbmNlKHBhdHRlcm5zWzFdLCBwYXR0ZXJuc1syXSk7XG4gICAgdmFyIHplcm9Ud29EaXN0YW5jZSA9IGRpc3RhbmNlKHBhdHRlcm5zWzBdLCBwYXR0ZXJuc1syXSk7XG5cbiAgICB2YXIgcG9pbnRBLCBwb2ludEIsIHBvaW50QztcbiAgICAvLyBBc3N1bWUgb25lIGNsb3Nlc3QgdG8gb3RoZXIgdHdvIGlzIEI7IEEgYW5kIEMgd2lsbCBqdXN0IGJlIGd1ZXNzZXMgYXRcbiAgICAvLyBmaXJzdC5cbiAgICBpZiAob25lVHdvRGlzdGFuY2UgPj0gemVyb09uZURpc3RhbmNlICYmXG4gICAgICBvbmVUd29EaXN0YW5jZSA+PSB6ZXJvVHdvRGlzdGFuY2UpIHtcbiAgICAgIHBvaW50QiA9IHBhdHRlcm5zWzBdO1xuICAgICAgcG9pbnRBID0gcGF0dGVybnNbMV07XG4gICAgICBwb2ludEMgPSBwYXR0ZXJuc1syXTtcbiAgICB9IGVsc2UgaWYgKHplcm9Ud29EaXN0YW5jZSA+PSBvbmVUd29EaXN0YW5jZSAmJlxuICAgICAgemVyb1R3b0Rpc3RhbmNlID49IHplcm9PbmVEaXN0YW5jZSkge1xuICAgICAgcG9pbnRCID0gcGF0dGVybnNbMV07XG4gICAgICBwb2ludEEgPSBwYXR0ZXJuc1swXTtcbiAgICAgIHBvaW50QyA9IHBhdHRlcm5zWzJdO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb2ludEIgPSBwYXR0ZXJuc1syXTtcbiAgICAgIHBvaW50QSA9IHBhdHRlcm5zWzBdO1xuICAgICAgcG9pbnRDID0gcGF0dGVybnNbMV07XG4gICAgfVxuXG4gICAgLy8gVXNlIGNyb3NzIHByb2R1Y3QgdG8gZmlndXJlIG91dCB3aGV0aGVyIEEgYW5kIEMgYXJlIGNvcnJlY3Qgb3IgZmxpcHBlZC5cbiAgICAvLyBUaGlzIGFza3Mgd2hldGhlciBCQyB4IEJBIGhhcyBhIHBvc2l0aXZlIHogY29tcG9uZW50LCB3aGljaCBpcyB0aGVcbiAgICAvLyBhcnJhbmdlbWVudCB3ZSB3YW50IGZvciBBLCBCLCBDLiBJZiBpdCdzIG5lZ2F0aXZlLCB0aGVuIHdlJ3ZlIGdvdCBpdFxuICAgIC8vIGZsaXBwZWQgYXJvdW5kIGFuZCBzaG91bGQgc3dhcCBBIGFuZCBDLlxuICAgIGlmIChjcm9zc1Byb2R1Y3RaKHBvaW50QSwgcG9pbnRCLCBwb2ludEMpIDwgMC4wKSB7XG4gICAgICB2YXIgdGVtcCA9IHBvaW50QTtcbiAgICAgIHBvaW50QSA9IHBvaW50QztcbiAgICAgIHBvaW50QyA9IHRlbXA7XG4gICAgfVxuXG4gICAgcGF0dGVybnNbMF0gPSBwb2ludEE7XG4gICAgcGF0dGVybnNbMV0gPSBwb2ludEI7XG4gICAgcGF0dGVybnNbMl0gPSBwb2ludEM7XG4gIH07XG5cblxuICAvKipcbiAgICogQHJldHVybiB7T2JqZWN0fSBKU09OIG9iamVjdCBmb3IgcGF0dGVybi5cbiAgICovXG4gIHByb1sndG9KU09OJ10gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ3gnOiB0aGlzLmdldFgoKSxcbiAgICAgICd5JzogdGhpcy5nZXRZKCksXG4gICAgICAnc2l6ZSc6IHRoaXMuZ2V0RXN0aW1hdGVkTW9kdWxlU2l6ZSgpfTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5LjxGaW5kZXJQYXR0ZXJuPn0gcGF0dGVybkNlbnRlcnMgc2l6ZSAzIGFycmF5IHdpdGhcbiAgICogYm90dG9tIGxlZnQsIHRvcCBsZWZ0IGFuZCB0b3AgcmlnaHQgY29ybmVyLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHc2OWIucXIuRmluZGVyUGF0dGVybkluZm8gPSBmdW5jdGlvbihwYXR0ZXJuQ2VudGVycykge1xuICAgIC8vIEJvdHRvbSBsZWZ0IGFuZCB0b3AgcmlnaHQgaXMgZmxpcHBlZC4gV2h5P1xuICAgIHRoaXMuYm90dG9tTGVmdCA9IHBhdHRlcm5DZW50ZXJzWzBdO1xuICAgIHRoaXMudG9wTGVmdCA9IHBhdHRlcm5DZW50ZXJzWzFdO1xuICAgIHRoaXMudG9wUmlnaHQgPSBwYXR0ZXJuQ2VudGVyc1syXTtcbiAgfTtcbn0pO1xuIiwiLy8gKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbmdvb2cucHJvdmlkZSgndzY5Yi5xci5RUkltYWdlJyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG5cbiAgLyoqIEB0eXBlZGVmIHsoVWludDhDbGFtcGVkQXJyYXl8VWludDhBcnJheSl9ICovXG4gIHc2OWIucXIuSW1hZ2VEYXRhO1xuICAvKipcbiAgICogSW1hZ2UgZGF0YSBjb250YWluZXIgd2l0aCB3aWR0aC9oZWlnaHQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBpbWFnZSB3aWR0aCBpbiBwaXhlbHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgaW1hZ2UgaGVpZ2h0IGluIHBpeGVscy5cbiAgICogQHBhcmFtIHt3NjliLnFyLkltYWdlRGF0YX0gZGF0YSBkYXRhIGFycmF5LlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHc2OWIucXIuUVJJbWFnZSA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQsIGRhdGEpIHtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgfTtcbiAgdmFyIFFSSW1hZ2UgPSB3NjliLnFyLlFSSW1hZ2U7XG4gIHZhciBwcm8gPSBRUkltYWdlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogR2V0IHZhbHVlIGF0IGdpdmVuIHBvc2l0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0geCB4IHBvcyAoY29sKS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgeSBwb3MgKHJvdykuXG4gICAqIEByZXR1cm4ge251bWJlcn0gdmFsdWUuXG4gICAqL1xuICBwcm8uZ2V0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB0aGlzLmRhdGFbeSAqIHRoaXMud2lkdGggKyB4XTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSB3aWR0aC5cbiAgICovXG4gIHByby5nZXRXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLndpZHRoO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGhlaWdodC5cbiAgICovXG4gIHByby5nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5oZWlnaHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3c2OWIucXIuSW1hZ2VEYXRhfSByYXcgZGF0YS5cbiAgICovXG4gIHByby5nZXRNYXRyaXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0geSBpbmRleC5cbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSBvcHRfcm93IHByZS1hbGxvY2F0ZWQuXG4gICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9IHJvdy5cbiAgICovXG4gIHByby5nZXRSb3cgPSBmdW5jdGlvbih5LCBvcHRfcm93KSB7XG4gICAgdmFyIHJvdztcbiAgICBpZiAob3B0X3JvdyA9PSBudWxsIHx8IG9wdF9yb3cubGVuZ3RoIDwgdGhpcy53aWR0aClcbiAgICAgIHJvdyA9IG5ldyBVaW50OEFycmF5KHRoaXMud2lkdGgpO1xuICAgIGVsc2VcbiAgICAgIHJvdyA9IG9wdF9yb3c7XG4gICAgdmFyIG9mZnNldCA9IHkgKiB0aGlzLndpZHRoO1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGhpcy53aWR0aDsgKyt4KVxuICAgICAgcm93W3hdID0gdGhpcy5kYXRhW29mZnNldCArIHhdO1xuICAgIHJldHVybiByb3c7XG4gIH07XG5cblxuICAvKipcbiAgICogR2V0IGluZGV4IGluIGRhdGEgZm9yIGdpdmVuIHBvc2l0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0geCB4IHBvcyAoY29sKS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgeSBwb3MgKHJvdykuXG4gICAqIEByZXR1cm4ge251bWJlcn0gaW5kZXggaW4gZGF0YS5cbiAgICovXG4gIHByby5nZXRJbmRleCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gdGhpcy53aWR0aCAqIHkgKyB4O1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgdmFsdWUgYXQgZ2l2ZW4gcG9zaXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHggcG9zIChjb2wpLlxuICAgKiBAcGFyYW0ge251bWJlcn0geSB5IHBvcyAocm93KS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIHZhbHVlIHRvIHNldC5cbiAgICovXG4gIHByby5zZXRWYWx1ZSA9IGZ1bmN0aW9uKHgsIHksIHZhbHVlKSB7XG4gICAgdGhpcy5kYXRhW3kgKiB0aGlzLndpZHRoICsgeF0gPSB2YWx1ZTtcbiAgfTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IEltYWdlIHdpdGggbmV3IGVtcHR5IGJ1ZmZlci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIGltYWdlIHdpZHRoLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IGltYWdlIGhlaWdodC5cbiAgICogQHJldHVybiB7dzY5Yi5xci5RUkltYWdlfSBpbWFnZSB3aXRoIGdpdmVuIHNpemUgYW5kIGEgbmV3LCBlbXB0eSBidWZmZXIuXG4gICAqL1xuICBRUkltYWdlLm5ld0VtcHR5ID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgIHJldHVybiBuZXcgUVJJbWFnZSh3aWR0aCwgaGVpZ2h0LFxuICAgICAgbmV3IFVpbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKHdpZHRoICogaGVpZ2h0KSkpO1xuICB9O1xufSk7XG5cbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gKiBDb3B5cmlnaHQgMjAwNyBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuRmluZGVyUGF0dGVybkZpbmRlcicpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmFycmF5Jyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuaW1nLkJpdE1hdHJpeExpa2UnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5EZWNvZGVIaW50VHlwZScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkZpbmRlclBhdHRlcm4nKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5GaW5kZXJQYXR0ZXJuSW5mbycpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLk5vdEZvdW5kRXJyb3InKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5RUkltYWdlJyk7XG5cblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgdmFyIEZpbmRlclBhdHRlcm4gPSB3NjliLnFyLkZpbmRlclBhdHRlcm47XG4gIHZhciBGaW5kZXJQYXR0ZXJuSW5mbyA9IHc2OWIucXIuRmluZGVyUGF0dGVybkluZm87XG5cbiAgLyoqIEB0eXBlZGVmIHtmdW5jdGlvbigodzY5Yi5xci5BbGlnbm1lbnRQYXR0ZXJufHc2OWIucXIuRmluZGVyUGF0dGVybikpfSAqL1xuICB3NjliLnFyLlJlc3VsdFBvaW50Q2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIDxwPlRoaXMgY2xhc3MgYXR0ZW1wdHMgdG8gZmluZCBmaW5kZXIgcGF0dGVybnMgaW4gYSBRUiBDb2RlLiBGaW5kZXJcbiAgICogcGF0dGVybnMgYXJlIHRoZSBzcXVhcmVcbiAgICogbWFya2VycyBhdCB0aHJlZSBjb3JuZXJzIG9mIGEgUVIgQ29kZS48L3A+XG4gICAqXG4gICAqIDxwPlRoaXMgY2xhc3MgaXMgdGhyZWFkLXNhZmUgYnV0IG5vdCByZWVudHJhbnQuIEVhY2ggdGhyZWFkIG11c3QgYWxsb2NhdGVcbiAgICogaXRzIG93biBvYmplY3QuXG4gICAqXG4gICAqIEBhdXRob3IgU2VhbiBPd2VuXG4gICAqIHBvcnRlZCB0byBqcyBieSBNYW51ZWwgQnJhdW5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IXc2OWIuaW1nLkJpdE1hdHJpeExpa2V9IGltYWdlIGJpbmFyeSBpbWFnZS5cbiAgICogQHBhcmFtIHs/dzY5Yi5xci5SZXN1bHRQb2ludENhbGxiYWNrPX0gb3B0X2NhbGxiYWNrIGNhbGxiYWNrLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHc2OWIucXIuRmluZGVyUGF0dGVybkZpbmRlciA9IGZ1bmN0aW9uKGltYWdlLCBvcHRfY2FsbGJhY2spIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7IXc2OWIuaW1nLkJpdE1hdHJpeExpa2V9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmltYWdlXyA9IGltYWdlO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheS48RmluZGVyUGF0dGVybj59XG4gICAgICovXG4gICAgdGhpcy5wb3NzaWJsZUNlbnRlcnNfID0gW107XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmNyb3NzQ2hlY2tTdGF0ZUNvdW50XyA9IG5ldyBBcnJheSg1KTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7P3c2OWIucXIuUmVzdWx0UG9pbnRDYWxsYmFja31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMucmVzdWx0UG9pbnRDYWxsYmFja18gPSBvcHRfY2FsbGJhY2sgfHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuaGFzU2tpcHBlZF8gPSBmYWxzZTtcblxuICB9O1xuICB2YXIgXyA9IHc2OWIucXIuRmluZGVyUGF0dGVybkZpbmRlcjtcbiAgdmFyIHBybyA9IHc2OWIucXIuRmluZGVyUGF0dGVybkZpbmRlci5wcm90b3R5cGU7XG5cbiAgLy8gbWFudTogY2hhbmdlZCBmcm9tIDIgdG8gMyBmb3IgbW9yZSByb2J1c3RuZXNzLlxuICBfLkNFTlRFUl9RVU9SVU0gPSAyO1xuICBfLk1JTl9TS0lQID0gMzsgLy8gMSBwaXhlbC9tb2R1bGUgdGltZXMgMyBtb2R1bGVzL2NlbnRlclxuICBfLk1BWF9NT0RVTEVTID0gNTc7IC8vIHN1cHBvcnQgdXAgdG8gdmVyc2lvbiAxMCBmb3IgbW9iaWxlIGNsaWVudHNcbiAgXy5JTlRFR0VSX01BVEhfU0hJRlQgPSA4O1xuXG4gIC8vIE1heGltdW0gc2tldyBlcnJvciB0byBza2lwIHNjYW5uaW5nIHNvb24uXG4gIF8uU0tFV19USFJFU0hPTEQgPSAwLjA1O1xuICAvLyBQcmVjb21wdXRlZCBjb21iaW5hdGlvbnMgZm9yIDMgb3V0IG9mIDYuXG4gIF8uU0tFV19DT01CSU5BVElPTlMgPSBbXG4gICAgWzAsIDEsIDJdLFxuICAgIFswLCAxLCAzXSxcbiAgICBbMCwgMSwgNF0sXG4gICAgWzAsIDEsIDVdLFxuICAgIFswLCAyLCAzXSxcbiAgICBbMCwgMiwgNF0sXG4gICAgWzAsIDIsIDVdLFxuICAgIFswLCAzLCA0XSxcbiAgICBbMCwgMywgNV0sXG4gICAgWzAsIDQsIDVdLFxuICAgIFsxLCAyLCAzXSxcbiAgICBbMSwgMiwgNF0sXG4gICAgWzEsIDIsIDVdLFxuICAgIFsxLCAzLCA0XSxcbiAgICBbMSwgMywgNV0sXG4gICAgWzEsIDQsIDVdLFxuICAgIFsyLCAzLCA0XSxcbiAgICBbMiwgMywgNV0sXG4gICAgWzIsIDQsIDVdLFxuICAgIFszLCA0LCA1XVxuICBdO1xuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2hpbnRzIGhpbnRzLlxuICAgKiBAcmV0dXJuIHtGaW5kZXJQYXR0ZXJuSW5mb30gaW5mby5cbiAgICovXG4gIHByby5maW5kID0gZnVuY3Rpb24ob3B0X2hpbnRzKSB7XG4gICAgdmFyIHRyeUhhcmRlciA9IG9wdF9oaW50cyAmJiAhIW9wdF9oaW50c1t3NjliLnFyLkRlY29kZUhpbnRUeXBlLlRSWV9IQVJERVJdO1xuICAgIHZhciBtYXhJID0gdGhpcy5pbWFnZV8uaGVpZ2h0O1xuICAgIHZhciBtYXhKID0gdGhpcy5pbWFnZV8ud2lkdGg7XG4gICAgLy8gV2UgYXJlIGxvb2tpbmcgZm9yIGJsYWNrL3doaXRlL2JsYWNrL3doaXRlL2JsYWNrIG1vZHVsZXMgaW5cbiAgICAvLyAxOjE6MzoxOjEgcmF0aW87IHRoaXMgdHJhY2tzIHRoZSBudW1iZXIgb2Ygc3VjaCBtb2R1bGVzIHNlZW4gc28gZmFyXG5cbiAgICAvLyBMZXQncyBhc3N1bWUgdGhhdCB0aGUgbWF4aW11bSB2ZXJzaW9uIFFSIENvZGUgd2Ugc3VwcG9ydCB0YWtlcyB1cCAxLzRcbiAgICAvLyB0aGUgaGVpZ2h0IG9mIHRoZVxuICAgIC8vIHRoaXMuaW1hZ2VfLCBhbmQgdGhlbiBhY2NvdW50IGZvciB0aGUgY2VudGVyIGJlaW5nIDMgbW9kdWxlcyBpbiBzaXplLlxuICAgIC8vIFRoaXMgZ2l2ZXMgdGhlIHNtYWxsZXN0XG4gICAgLy8gbnVtYmVyIG9mIHBpeGVscyB0aGUgY2VudGVyIGNvdWxkIGJlLCBzbyBza2lwIHRoaXMgb2Z0ZW4uIFdoZW4gdHJ5aW5nXG4gICAgLy8gaGFyZGVyLCBsb29rIGZvciBhbGxcbiAgICAvLyBRUiB2ZXJzaW9ucyByZWdhcmRsZXNzIG9mIGhvdyBkZW5zZSB0aGV5IGFyZS5cbiAgICB2YXIgaVNraXAgPSBNYXRoLmZsb29yKCgzICogbWF4SSkgLyAoNCAqIF8uTUFYX01PRFVMRVMpKTtcbiAgICBpZiAoaVNraXAgPCBfLk1JTl9TS0lQIHx8IHRyeUhhcmRlcikge1xuICAgICAgaVNraXAgPSBfLk1JTl9TS0lQO1xuICAgIH1cblxuICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgdmFyIHN0YXRlQ291bnQgPSBuZXcgQXJyYXkoNSk7XG4gICAgdmFyIGNvbmZpcm1lZDtcbiAgICBmb3IgKHZhciBpID0gaVNraXAgLSAxOyBpIDwgbWF4SSAmJiAhZG9uZTsgaSArPSBpU2tpcCkge1xuICAgICAgLy8gR2V0IGEgcm93IG9mIGJsYWNrL3doaXRlIHZhbHVlc1xuICAgICAgc3RhdGVDb3VudFswXSA9IDA7XG4gICAgICBzdGF0ZUNvdW50WzFdID0gMDtcbiAgICAgIHN0YXRlQ291bnRbMl0gPSAwO1xuICAgICAgc3RhdGVDb3VudFszXSA9IDA7XG4gICAgICBzdGF0ZUNvdW50WzRdID0gMDtcbiAgICAgIHZhciBjdXJyZW50U3RhdGUgPSAwO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXhKOyBqKyspIHtcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VfLmdldChqLCBpKSkge1xuICAgICAgICAgIC8vIEJsYWNrIHBpeGVsXG4gICAgICAgICAgaWYgKChjdXJyZW50U3RhdGUgJiAxKSA9PSAxKSB7IC8vIENvdW50aW5nIHdoaXRlIHBpeGVsc1xuICAgICAgICAgICAgY3VycmVudFN0YXRlKys7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRlQ291bnRbY3VycmVudFN0YXRlXSsrO1xuICAgICAgICB9IGVsc2UgeyAvLyBXaGl0ZSBwaXhlbFxuICAgICAgICAgIGlmICgoY3VycmVudFN0YXRlICYgMSkgPT0gMCkgeyAvLyBDb3VudGluZyBibGFjayBwaXhlbHNcbiAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUgPT0gNCkgeyAvLyBBIHdpbm5lcj9cbiAgICAgICAgICAgICAgaWYgKF8uZm91bmRQYXR0ZXJuQ3Jvc3Moc3RhdGVDb3VudCkpIHsgLy8gWWVzXG4gICAgICAgICAgICAgICAgY29uZmlybWVkID0gdGhpcy5oYW5kbGVQb3NzaWJsZUNlbnRlcihzdGF0ZUNvdW50LCBpLCBqKTtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlybWVkKSB7XG4gICAgICAgICAgICAgICAgICAvLyBTdGFydCBleGFtaW5pbmcgZXZlcnkgb3RoZXIgbGluZS4gQ2hlY2tpbmcgZWFjaCBsaW5lXG4gICAgICAgICAgICAgICAgICAvLyB0dXJuZWQgb3V0IHRvIGJlIHRvb1xuICAgICAgICAgICAgICAgICAgLy8gZXhwZW5zaXZlIGFuZCBkaWRuJ3QgaW1wcm92ZSBwZXJmb3JtYW5jZS5cbiAgICAgICAgICAgICAgICAgIGlTa2lwID0gMjtcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc1NraXBwZWRfKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUgPSB0aGlzLmhhdmVNdWx0aXBseUNvbmZpcm1lZENlbnRlcnMoKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dTa2lwID0gdGhpcy5maW5kUm93U2tpcCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93U2tpcCA+IHN0YXRlQ291bnRbMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBTa2lwIHJvd3MgYmV0d2VlbiByb3cgb2YgbG93ZXIgY29uZmlybWVkIGNlbnRlclxuICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0b3Agb2YgcHJlc3VtZWQgdGhpcmQgY29uZmlybWVkIGNlbnRlclxuICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBiYWNrIHVwIGEgYml0IHRvIGdldCBhIGZ1bGwgY2hhbmNlIG9mIGRldGVjdGluZ1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGl0LCBlbnRpcmUgd2lkdGggb2YgY2VudGVyIG9mIGZpbmRlciBwYXR0ZXJuXG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBTa2lwIGJ5IHJvd1NraXAsIGJ1dCBiYWNrIG9mZiBieSBzdGF0ZUNvdW50WzJdXG4gICAgICAgICAgICAgICAgICAgICAgLy8gKHNpemUgb2YgbGFzdCBjZW50ZXJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBvZiBwYXR0ZXJuIHdlIHNhdykgdG8gYmUgY29uc2VydmF0aXZlLCBhbmQgYWxzb1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGJhY2sgb2ZmIGJ5IGlTa2lwIHdoaWNoXG4gICAgICAgICAgICAgICAgICAgICAgLy8gaXMgYWJvdXQgdG8gYmUgcmUtYWRkZWRcbiAgICAgICAgICAgICAgICAgICAgICBpICs9IHJvd1NraXAgLSBzdGF0ZUNvdW50WzJdIC0gaVNraXA7XG4gICAgICAgICAgICAgICAgICAgICAgaiA9IG1heEogLSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRlQ291bnRbMF0gPSBzdGF0ZUNvdW50WzJdO1xuICAgICAgICAgICAgICAgICAgc3RhdGVDb3VudFsxXSA9IHN0YXRlQ291bnRbM107XG4gICAgICAgICAgICAgICAgICBzdGF0ZUNvdW50WzJdID0gc3RhdGVDb3VudFs0XTtcbiAgICAgICAgICAgICAgICAgIHN0YXRlQ291bnRbM10gPSAxO1xuICAgICAgICAgICAgICAgICAgc3RhdGVDb3VudFs0XSA9IDA7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGUgPSAzO1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIENsZWFyIHN0YXRlIHRvIHN0YXJ0IGxvb2tpbmcgYWdhaW5cbiAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGUgPSAwO1xuICAgICAgICAgICAgICAgIHN0YXRlQ291bnRbMF0gPSAwO1xuICAgICAgICAgICAgICAgIHN0YXRlQ291bnRbMV0gPSAwO1xuICAgICAgICAgICAgICAgIHN0YXRlQ291bnRbMl0gPSAwO1xuICAgICAgICAgICAgICAgIHN0YXRlQ291bnRbM10gPSAwO1xuICAgICAgICAgICAgICAgIHN0YXRlQ291bnRbNF0gPSAwO1xuICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBObywgc2hpZnQgY291bnRzIGJhY2sgYnkgdHdvXG4gICAgICAgICAgICAgICAgc3RhdGVDb3VudFswXSA9IHN0YXRlQ291bnRbMl07XG4gICAgICAgICAgICAgICAgc3RhdGVDb3VudFsxXSA9IHN0YXRlQ291bnRbM107XG4gICAgICAgICAgICAgICAgc3RhdGVDb3VudFsyXSA9IHN0YXRlQ291bnRbNF07XG4gICAgICAgICAgICAgICAgc3RhdGVDb3VudFszXSA9IDE7XG4gICAgICAgICAgICAgICAgc3RhdGVDb3VudFs0XSA9IDA7XG4gICAgICAgICAgICAgICAgY3VycmVudFN0YXRlID0gMztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RhdGVDb3VudFsrK2N1cnJlbnRTdGF0ZV0rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgeyAvLyBDb3VudGluZyB3aGl0ZSBwaXhlbHNcbiAgICAgICAgICAgIHN0YXRlQ291bnRbY3VycmVudFN0YXRlXSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKF8uZm91bmRQYXR0ZXJuQ3Jvc3Moc3RhdGVDb3VudCkpIHtcbiAgICAgICAgY29uZmlybWVkID0gdGhpcy5oYW5kbGVQb3NzaWJsZUNlbnRlcihzdGF0ZUNvdW50LCBpLCBtYXhKKTtcbiAgICAgICAgaWYgKGNvbmZpcm1lZCkge1xuICAgICAgICAgIGlTa2lwID0gc3RhdGVDb3VudFswXTtcbiAgICAgICAgICBpZiAodGhpcy5oYXNTa2lwcGVkXykge1xuICAgICAgICAgICAgLy8gRm91bmQgYSB0aGlyZCBvbmVcbiAgICAgICAgICAgIGRvbmUgPSB0aGlzLmhhdmVNdWx0aXBseUNvbmZpcm1lZENlbnRlcnMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcGF0dGVybkluZm8gPSB0aGlzLnNlbGVjdEJlc3RQYXR0ZXJucyh0cnVlKTtcbiAgICB3NjliLnFyLkZpbmRlclBhdHRlcm4ub3JkZXJCZXN0UGF0dGVybnMocGF0dGVybkluZm8pO1xuXG4gICAgcmV0dXJuIG5ldyBGaW5kZXJQYXR0ZXJuSW5mbyhwYXR0ZXJuSW5mbyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgY291bnQgb2YgYmxhY2svd2hpdGUvYmxhY2svd2hpdGUvYmxhY2sgcGl4ZWxzIGp1c3Qgc2VlbiBhbmQgYW5cbiAgICogZW5kIHBvc2l0aW9uLFxuICAgKiBmaWd1cmVzIHRoZSBsb2NhdGlvbiBvZiB0aGUgY2VudGVyIG9mIHRoaXMgcnVuLlxuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBzdGF0ZUNvdW50IHN0YXRlIGNvdW50LlxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIGVuZCBwb3NpdGlvbi5cbiAgICogQHJldHVybiB7bnVtYmVyfSBwb3NpdGlvbi5cbiAgICovXG4gIHByby5jZW50ZXJGcm9tRW5kID0gZnVuY3Rpb24oc3RhdGVDb3VudCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGF0ZUNvdW50WzRdIC0gc3RhdGVDb3VudFszXSkgLSBzdGF0ZUNvdW50WzJdIC8gMi47XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHN0YXRlQ291bnQgY291bnQgb2ZcbiAgICogYmxhY2svd2hpdGUvYmxhY2svd2hpdGUvYmxhY2sgcGl4ZWxzIGp1c3QgcmVhZC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZmYgdGhlIHByb3BvcnRpb25zIG9mIHRoZSBjb3VudHMgaXMgY2xvc2UgZW5vdWdoXG4gICAqIHRvIHRoZSAxLzEvMy8xLzEgcmF0aW9zIHVzZWQgYnkgZmluZGVyIHBhdHRlcm5zIHRvIGJlIGNvbnNpZGVyZWQgYSBtYXRjaC5cbiAgICovXG4gIF8uZm91bmRQYXR0ZXJuQ3Jvc3MgPSBmdW5jdGlvbihzdGF0ZUNvdW50KSB7XG4gICAgdmFyIHRvdGFsTW9kdWxlU2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgIHZhciBjb3VudCA9IHN0YXRlQ291bnRbaV07XG4gICAgICBpZiAoY291bnQgPT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0b3RhbE1vZHVsZVNpemUgKz0gY291bnQ7XG4gICAgfVxuICAgIGlmICh0b3RhbE1vZHVsZVNpemUgPCA3KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBtb2R1bGVTaXplID0gTWF0aC5mbG9vcigodG90YWxNb2R1bGVTaXplIDw8IF8uSU5URUdFUl9NQVRIX1NISUZUKSAvIDcpO1xuICAgIHZhciBtYXhWYXJpYW5jZSA9IE1hdGguZmxvb3IobW9kdWxlU2l6ZSAvIDIpO1xuICAgIC8vIEFsbG93IGxlc3MgdGhhbiA1MCUgdmFyaWFuY2UgZnJvbSAxLTEtMy0xLTEgcHJvcG9ydGlvbnNcbiAgICByZXR1cm4gTWF0aC5hYnMobW9kdWxlU2l6ZSAtIChzdGF0ZUNvdW50WzBdIDw8IF8uSU5URUdFUl9NQVRIX1NISUZUKSkgPFxuICAgICAgbWF4VmFyaWFuY2UgJiZcbiAgICAgIE1hdGguYWJzKG1vZHVsZVNpemUgLSAoc3RhdGVDb3VudFsxXSA8PCBfLklOVEVHRVJfTUFUSF9TSElGVCkpIDxcbiAgICAgICAgbWF4VmFyaWFuY2UgJiZcbiAgICAgIE1hdGguYWJzKDMgKiBtb2R1bGVTaXplIC0gKHN0YXRlQ291bnRbMl0gPDwgXy5JTlRFR0VSX01BVEhfU0hJRlQpKSA8XG4gICAgICAgIDMgKiBtYXhWYXJpYW5jZSAmJlxuICAgICAgTWF0aC5hYnMobW9kdWxlU2l6ZSAtIChzdGF0ZUNvdW50WzNdIDw8IF8uSU5URUdFUl9NQVRIX1NISUZUKSkgPFxuICAgICAgICBtYXhWYXJpYW5jZSAmJlxuICAgICAgTWF0aC5hYnMobW9kdWxlU2l6ZSAtIChzdGF0ZUNvdW50WzRdIDw8IF8uSU5URUdFUl9NQVRIX1NISUZUKSkgPFxuICAgICAgICBtYXhWYXJpYW5jZTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXkuPG51bWJlcj59IGNvdW50LlxuICAgKi9cbiAgcHJvLmdldENyb3NzQ2hlY2tTdGF0ZUNvdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jcm9zc0NoZWNrU3RhdGVDb3VudF9bMF0gPSAwO1xuICAgIHRoaXMuY3Jvc3NDaGVja1N0YXRlQ291bnRfWzFdID0gMDtcbiAgICB0aGlzLmNyb3NzQ2hlY2tTdGF0ZUNvdW50X1syXSA9IDA7XG4gICAgdGhpcy5jcm9zc0NoZWNrU3RhdGVDb3VudF9bM10gPSAwO1xuICAgIHRoaXMuY3Jvc3NDaGVja1N0YXRlQ291bnRfWzRdID0gMDtcbiAgICByZXR1cm4gdGhpcy5jcm9zc0NoZWNrU3RhdGVDb3VudF87XG4gIH07XG5cbiAgLyoqXG4gICAqIDxwPkFmdGVyIGEgaG9yaXpvbnRhbCBzY2FuIGZpbmRzIGEgcG90ZW50aWFsIGZpbmRlciBwYXR0ZXJuLCB0aGlzIG1ldGhvZFxuICAgKiBcImNyb3NzLWNoZWNrc1wiIGJ5IHNjYW5uaW5nIGRvd24gdmVydGljYWxseSB0aHJvdWdoIHRoZSBjZW50ZXIgb2YgdGhlXG4gICAqIHBvc3NpYmxlIGZpbmRlciBwYXR0ZXJuIHRvIHNlZSBpZiB0aGUgc2FtZSBwcm9wb3J0aW9uIGlzIGRldGVjdGVkLjwvcD5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0SSByb3cgd2hlcmUgYSBmaW5kZXIgcGF0dGVybiB3YXMgZGV0ZWN0ZWQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjZW50ZXJKIGNlbnRlciBvZiB0aGUgc2VjdGlvbiB0aGF0IGFwcGVhcnMgdG8gY3Jvc3NcbiAgICogYSBmaW5kZXIgcGF0dGVybi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heENvdW50IG1heGltdW0gcmVhc29uYWJsZSBudW1iZXIgb2YgbW9kdWxlcyB0aGF0XG4gICAqIHNob3VsZCBiZW9ic2VydmVkIGluIGFueSByZWFkaW5nIHN0YXRlLCBiYXNlZCBvbiB0aGUgcmVzdWx0cyBvZiB0aGVcbiAgICogaG9yaXpvbnRhbCBzY2FuLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb3JpZ2luYWxTdGF0ZUNvdW50VG90YWwgbm9kb2MuXG4gICAqIEByZXR1cm4ge251bWJlcn0gdmVydGljYWwgY2VudGVyIG9mIGZpbmRlciBwYXR0ZXJuLCBvciB7QGxpbmsgTmFOfVxuICAgKiBpZiBub3QgZm91bmQuXG4gICAqL1xuICBwcm8uY3Jvc3NDaGVja1ZlcnRpY2FsID0gZnVuY3Rpb24oc3RhcnRJLCBjZW50ZXJKLCBtYXhDb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsU3RhdGVDb3VudFRvdGFsKSB7XG4gICAgdmFyIGltYWdlID0gdGhpcy5pbWFnZV87XG5cbiAgICB2YXIgbWF4SSA9IGltYWdlLmhlaWdodDtcbiAgICB2YXIgc3RhdGVDb3VudCA9IHRoaXMuZ2V0Q3Jvc3NDaGVja1N0YXRlQ291bnQoKTtcblxuICAgIC8vIFN0YXJ0IGNvdW50aW5nIHVwIGZyb20gY2VudGVyXG4gICAgdmFyIGkgPSBzdGFydEk7XG4gICAgd2hpbGUgKGkgPj0gMCAmJiBpbWFnZS5nZXQoY2VudGVySiwgaSkpIHtcbiAgICAgIHN0YXRlQ291bnRbMl0rKztcbiAgICAgIGktLTtcbiAgICB9XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICB3aGlsZSAoaSA+PSAwICYmICFpbWFnZS5nZXQoY2VudGVySiwgaSkgJiZcbiAgICAgIHN0YXRlQ291bnRbMV0gPD0gbWF4Q291bnQpIHtcbiAgICAgIHN0YXRlQ291bnRbMV0rKztcbiAgICAgIGktLTtcbiAgICB9XG4gICAgLy8gSWYgYWxyZWFkeSB0b28gbWFueSBtb2R1bGVzIGluIHRoaXMgc3RhdGUgb3IgcmFuIG9mZiB0aGUgZWRnZTpcbiAgICBpZiAoaSA8IDAgfHwgc3RhdGVDb3VudFsxXSA+IG1heENvdW50KSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICB3aGlsZSAoaSA+PSAwICYmIGltYWdlLmdldChjZW50ZXJKLCBpKSAmJlxuICAgICAgc3RhdGVDb3VudFswXSA8PSBtYXhDb3VudCkge1xuICAgICAgc3RhdGVDb3VudFswXSsrO1xuICAgICAgaS0tO1xuICAgIH1cbiAgICBpZiAoc3RhdGVDb3VudFswXSA+IG1heENvdW50KSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIC8vIE5vdyBhbHNvIGNvdW50IGRvd24gZnJvbSBjZW50ZXJcbiAgICBpID0gc3RhcnRJICsgMTtcbiAgICB3aGlsZSAoaSA8IG1heEkgJiYgaW1hZ2UuZ2V0KGNlbnRlckosIGkpKSB7XG4gICAgICBzdGF0ZUNvdW50WzJdKys7XG4gICAgICBpKys7XG4gICAgfVxuICAgIGlmIChpID09IG1heEkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHdoaWxlIChpIDwgbWF4SSAmJiAhaW1hZ2UuZ2V0KGNlbnRlckosIGkpICYmXG4gICAgICBzdGF0ZUNvdW50WzNdIDwgbWF4Q291bnQpIHtcbiAgICAgIHN0YXRlQ291bnRbM10rKztcbiAgICAgIGkrKztcbiAgICB9XG4gICAgaWYgKGkgPT0gbWF4SSB8fCBzdGF0ZUNvdW50WzNdID49IG1heENvdW50KSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICB3aGlsZSAoaSA8IG1heEkgJiYgaW1hZ2UuZ2V0KGNlbnRlckosIGkpICYmXG4gICAgICBzdGF0ZUNvdW50WzRdIDwgbWF4Q291bnQpIHtcbiAgICAgIHN0YXRlQ291bnRbNF0rKztcbiAgICAgIGkrKztcbiAgICB9XG4gICAgaWYgKHN0YXRlQ291bnRbNF0gPj0gbWF4Q291bnQpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZm91bmQgYSBmaW5kZXItcGF0dGVybi1saWtlIHNlY3Rpb24sIGJ1dCBpdHMgc2l6ZSBpcyBtb3JlIHRoYW5cbiAgICAvLyA0MCUgZGlmZmVyZW50IHRoYW4gdGhlIG9yaWdpbmFsLCBhc3N1bWUgaXQncyBhIGZhbHNlIHBvc2l0aXZlXG4gICAgdmFyIHN0YXRlQ291bnRUb3RhbCA9IHN0YXRlQ291bnRbMF0gKyBzdGF0ZUNvdW50WzFdICtcbiAgICAgIHN0YXRlQ291bnRbMl0gKyBzdGF0ZUNvdW50WzNdICtcbiAgICAgIHN0YXRlQ291bnRbNF07XG4gICAgaWYgKDUgKiBNYXRoLmFicyhzdGF0ZUNvdW50VG90YWwgLSBvcmlnaW5hbFN0YXRlQ291bnRUb3RhbCkgPj1cbiAgICAgIDIgKiBvcmlnaW5hbFN0YXRlQ291bnRUb3RhbCkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICByZXR1cm4gXy5mb3VuZFBhdHRlcm5Dcm9zcyhzdGF0ZUNvdW50KSA/XG4gICAgICB0aGlzLmNlbnRlckZyb21FbmQoc3RhdGVDb3VudCwgaSkgOiBOYU47XG4gIH07XG5cbiAgLyoqXG4gICAqIDxwPkxpa2Uge0BsaW5rICNjcm9zc0NoZWNrVmVydGljYWwoaW50LCBpbnQsIGludCwgaW50KX0sIGFuZCBpbiBmYWN0XG4gICAqIGlzIGJhc2ljYWxseSBpZGVudGljYWwsIGV4Y2VwdCBpdCByZWFkcyBob3Jpem9udGFsbHkgaW5zdGVhZCBvZlxuICAgKiB2ZXJ0aWNhbGx5LiBUaGlzIGlzIHVzZWQgdG8gY3Jvc3MtY3Jvc3MgY2hlY2sgYSB2ZXJ0aWNhbCBjcm9zcyBjaGVja1xuICAgKiBhbmQgbG9jYXRlIHRoZSByZWFsIGNlbnRlciBvZiB0aGUgYWxpZ25tZW50IHBhdHRlcm4uPC9wPlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRKIGNvbCB3aGVyZSBhIGZpbmRlciBwYXR0ZXJuIHdhcyBkZXRlY3RlZC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGNlbnRlckkgY2VudGVyIG9mIHRoZSBzZWN0aW9uIHRoYXQgYXBwZWFycyB0byBjcm9zcyBhXG4gICAqIGZpbmRlciBwYXR0ZXJuLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4Q291bnQgbWF4aW11bSByZWFzb25hYmxlIG51bWJlciBvZiBtb2R1bGVzIHRoYXQgc2hvdWxkXG4gICAqIGJlIG9ic2VydmVkIGluIGFueSByZWFkaW5nIHN0YXRlLCBiYXNlZCBvbiB0aGUgcmVzdWx0cyBvZiB0aGUgaG9yaXpvbnRhbFxuICAgKiBzY2FuLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb3JpZ2luYWxTdGF0ZUNvdW50VG90YWwgbm9kb2MuXG4gICAqIEByZXR1cm4ge251bWJlcn0gaG9yaXpvbnRhbCBjZW50ZXIgb2YgZmluZGVyIHBhdHRlcm4sIG9yIE5hTiBpZiBub3QgZm91bmQuXG4gICAqL1xuICBwcm8uY3Jvc3NDaGVja0hvcml6b250YWwgPSBmdW5jdGlvbihzdGFydEosIGNlbnRlckksIG1heENvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFN0YXRlQ291bnRUb3RhbCkge1xuICAgIHZhciBpbWFnZSA9IHRoaXMuaW1hZ2VfO1xuXG4gICAgdmFyIG1heEogPSBpbWFnZS53aWR0aDtcbiAgICB2YXIgc3RhdGVDb3VudCA9IHRoaXMuZ2V0Q3Jvc3NDaGVja1N0YXRlQ291bnQoKTtcblxuICAgIHZhciBqID0gc3RhcnRKO1xuICAgIHdoaWxlIChqID49IDAgJiYgaW1hZ2UuZ2V0KGosIGNlbnRlckkpKSB7XG4gICAgICBzdGF0ZUNvdW50WzJdKys7XG4gICAgICBqLS07XG4gICAgfVxuICAgIGlmIChqIDwgMCkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgd2hpbGUgKGogPj0gMCAmJiAhaW1hZ2UuZ2V0KGosIGNlbnRlckkpICYmXG4gICAgICBzdGF0ZUNvdW50WzFdIDw9IG1heENvdW50KSB7XG4gICAgICBzdGF0ZUNvdW50WzFdKys7XG4gICAgICBqLS07XG4gICAgfVxuICAgIGlmIChqIDwgMCB8fCBzdGF0ZUNvdW50WzFdID4gbWF4Q291bnQpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHdoaWxlIChqID49IDAgJiYgaW1hZ2UuZ2V0KGosIGNlbnRlckkpICYmXG4gICAgICBzdGF0ZUNvdW50WzBdIDw9IG1heENvdW50KSB7XG4gICAgICBzdGF0ZUNvdW50WzBdKys7XG4gICAgICBqLS07XG4gICAgfVxuICAgIGlmIChzdGF0ZUNvdW50WzBdID4gbWF4Q291bnQpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuXG4gICAgaiA9IHN0YXJ0SiArIDE7XG4gICAgd2hpbGUgKGogPCBtYXhKICYmIGltYWdlLmdldChqLCBjZW50ZXJJKSkge1xuICAgICAgc3RhdGVDb3VudFsyXSsrO1xuICAgICAgaisrO1xuICAgIH1cbiAgICBpZiAoaiA9PSBtYXhKKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICB3aGlsZSAoaiA8IG1heEogJiYgIWltYWdlLmdldChqLCBjZW50ZXJJKSAmJlxuICAgICAgc3RhdGVDb3VudFszXSA8IG1heENvdW50KSB7XG4gICAgICBzdGF0ZUNvdW50WzNdKys7XG4gICAgICBqKys7XG4gICAgfVxuICAgIGlmIChqID09IG1heEogfHwgc3RhdGVDb3VudFszXSA+PSBtYXhDb3VudCkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgd2hpbGUgKGogPCBtYXhKICYmIGltYWdlLmdldChqLCBjZW50ZXJJKSAmJlxuICAgICAgc3RhdGVDb3VudFs0XSA8IG1heENvdW50KSB7XG4gICAgICBzdGF0ZUNvdW50WzRdKys7XG4gICAgICBqKys7XG4gICAgfVxuICAgIGlmIChzdGF0ZUNvdW50WzRdID49IG1heENvdW50KSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGZvdW5kIGEgZmluZGVyLXBhdHRlcm4tbGlrZSBzZWN0aW9uLCBidXQgaXRzIHNpemUgaXNcbiAgICAvLyBzaWduaWZpY2FudGx5IGRpZmZlcmVudCB0aGFuXG4gICAgLy8gdGhlIG9yaWdpbmFsLCBhc3N1bWUgaXQncyBhIGZhbHNlIHBvc2l0aXZlXG4gICAgdmFyIHN0YXRlQ291bnRUb3RhbCA9IHN0YXRlQ291bnRbMF0gKyBzdGF0ZUNvdW50WzFdICtcbiAgICAgIHN0YXRlQ291bnRbMl0gKyBzdGF0ZUNvdW50WzNdICsgc3RhdGVDb3VudFs0XTtcbiAgICBpZiAoNSAqIE1hdGguYWJzKHN0YXRlQ291bnRUb3RhbCAtIG9yaWdpbmFsU3RhdGVDb3VudFRvdGFsKSA+PVxuICAgICAgb3JpZ2luYWxTdGF0ZUNvdW50VG90YWwpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuXG4gICAgcmV0dXJuIF8uZm91bmRQYXR0ZXJuQ3Jvc3Moc3RhdGVDb3VudCkgP1xuICAgICAgdGhpcy5jZW50ZXJGcm9tRW5kKHN0YXRlQ291bnQsIGopIDogTmFOO1xuICB9O1xuXG4gIC8qKlxuICAgKiA8cD5UaGlzIGlzIGNhbGxlZCB3aGVuIGEgaG9yaXpvbnRhbCBzY2FuIGZpbmRzIGEgcG9zc2libGUgYWxpZ25tZW50XG4gICAqIHBhdHRlcm4uIEl0IHdpbGwgY3Jvc3MgY2hlY2sgd2l0aCBhIHZlcnRpY2FsIHNjYW4sIGFuZCBpZiBzdWNjZXNzZnVsLFxuICAgKiB3aWxsLCBhaCwgY3Jvc3MtY3Jvc3MtY2hlY2sgd2l0aCBhbm90aGVyIGhvcml6b250YWwgc2Nhbi4gVGhpcyBpcyBuZWVkZWRcbiAgICogcHJpbWFyaWx5IHRvIGxvY2F0ZSB0aGUgcmVhbCBob3Jpem9udGFsIGNlbnRlciBvZiB0aGUgcGF0dGVybiBpbiBjYXNlcyBvZlxuICAgKiBleHRyZW1lIHNrZXcuPC9wPlxuICAgKlxuICAgKiA8cD5JZiB0aGF0IHN1Y2NlZWRzIHRoZSBmaW5kZXIgcGF0dGVybiBsb2NhdGlvbiBpcyBhZGRlZCB0byBhIGxpc3QgdGhhdFxuICAgKiB0cmFja3MgdGhlIG51bWJlciBvZiB0aW1lcyBlYWNoIGxvY2F0aW9uIGhhcyBiZWVuIG5lYXJseS1tYXRjaGVkIGFzIGFcbiAgICogZmluZGVyIHBhdHRlcm4uICBFYWNoIGFkZGl0aW9uYWwgZmluZCBpcyBtb3JlIGV2aWRlbmNlIHRoYXQgdGhlIGxvY2F0aW9uXG4gICAqIGlzIGluIGZhY3QgYSBmaW5kZXIgcGF0dGVybiBjZW50ZXJcbiAgICpcbiAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gc3RhdGVDb3VudCByZWFkaW5nIHN0YXRlIG1vZHVsZSBjb3VudHMgZnJvbVxuICAgKiBob3Jpem9udGFsIHNjYW4uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpIHJvdyB3aGVyZSBmaW5kZXIgcGF0dGVybiBtYXkgYmUgZm91bmQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBqIGVuZCBvZiBwb3NzaWJsZSBmaW5kZXIgcGF0dGVybiBpbiByb3cuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgYSBmaW5kZXIgcGF0dGVybiBjYW5kaWRhdGUgd2FzIGZvdW5kIHRoaXMgdGltZS5cbiAgICovXG4gIHByby5oYW5kbGVQb3NzaWJsZUNlbnRlciA9IGZ1bmN0aW9uKHN0YXRlQ291bnQsIGksIGopIHtcbiAgICB2YXIgc3RhdGVDb3VudFRvdGFsID0gc3RhdGVDb3VudFswXSArIHN0YXRlQ291bnRbMV0gK1xuICAgICAgc3RhdGVDb3VudFsyXSArIHN0YXRlQ291bnRbM10gKyBzdGF0ZUNvdW50WzRdO1xuICAgIHZhciBjZW50ZXJKID0gdGhpcy5jZW50ZXJGcm9tRW5kKHN0YXRlQ291bnQsIGopO1xuICAgIHZhciBjZW50ZXJJID0gdGhpcy5jcm9zc0NoZWNrVmVydGljYWwoaSwgTWF0aC5mbG9vcihjZW50ZXJKKSxcbiAgICAgIHN0YXRlQ291bnRbMl0sIHN0YXRlQ291bnRUb3RhbCk7XG4gICAgaWYgKCFpc05hTihjZW50ZXJJKSkge1xuICAgICAgLy8gUmUtY3Jvc3MgY2hlY2tcbiAgICAgIGNlbnRlckogPSB0aGlzLmNyb3NzQ2hlY2tIb3Jpem9udGFsKE1hdGguZmxvb3IoY2VudGVySiksXG4gICAgICAgIE1hdGguZmxvb3IoY2VudGVySSksIHN0YXRlQ291bnRbMl0sIHN0YXRlQ291bnRUb3RhbCk7XG4gICAgICBpZiAoIWlzTmFOKGNlbnRlckopKSB7XG4gICAgICAgIHZhciBlc3RpbWF0ZWRNb2R1bGVTaXplID0gc3RhdGVDb3VudFRvdGFsIC8gNy47XG4gICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5wb3NzaWJsZUNlbnRlcnNfLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHZhciBjZW50ZXIgPSB0aGlzLnBvc3NpYmxlQ2VudGVyc19baW5kZXhdO1xuICAgICAgICAgIC8vIExvb2sgZm9yIGFib3V0IHRoZSBzYW1lIGNlbnRlciBhbmQgbW9kdWxlIHNpemU6XG4gICAgICAgICAgaWYgKGNlbnRlci5hYm91dEVxdWFscyhlc3RpbWF0ZWRNb2R1bGVTaXplLCBjZW50ZXJJLCBjZW50ZXJKKSkge1xuICAgICAgICAgICAgdGhpcy5wb3NzaWJsZUNlbnRlcnNfW2luZGV4XSA9XG4gICAgICAgICAgICAgIGNlbnRlci5jb21iaW5lRXN0aW1hdGUoY2VudGVySSwgY2VudGVySiwgZXN0aW1hdGVkTW9kdWxlU2l6ZSk7XG4gICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgIHZhciBwb2ludCA9IG5ldyBGaW5kZXJQYXR0ZXJuKGNlbnRlckosIGNlbnRlckksIGVzdGltYXRlZE1vZHVsZVNpemUpO1xuICAgICAgICAgIHRoaXMucG9zc2libGVDZW50ZXJzXy5wdXNoKHBvaW50KTtcbiAgICAgICAgICBpZiAodGhpcy5yZXN1bHRQb2ludENhbGxiYWNrXyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFBvaW50Q2FsbGJhY2tfKHBvaW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBudW1iZXIgb2Ygcm93cyB3ZSBjb3VsZCBzYWZlbHkgc2tpcCBkdXJpbmcgc2Nhbm5pbmcsXG4gICAqIGJhc2VkIG9uIHRoZSBmaXJzdCB0d28gZmluZGVyIHBhdHRlcm5zIHRoYXQgaGF2ZSBiZWVuIGxvY2F0ZWQuIEluIHNvbWVcbiAgICogY2FzZXMgdGhlaXIgcG9zaXRpb24gd2lsbCBhbGxvdyB1cyB0byBpbmZlciB0aGF0IHRoZSB0aGlyZCBwYXR0ZXJuIG11c3RcbiAgICogbGllIGJlbG93IGEgY2VydGFpbiBwb2ludCBmYXJ0aGVyIGRvd24gaW4gdGhlIGltYWdlLlxuICAgKi9cbiAgcHJvLmZpbmRSb3dTa2lwID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1heCA9IHRoaXMucG9zc2libGVDZW50ZXJzXy5sZW5ndGg7XG4gICAgaWYgKG1heCA8PSAxKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIGZpcnN0Q29uZmlybWVkQ2VudGVyID0gbnVsbDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucG9zc2libGVDZW50ZXJzXy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGNlbnRlciA9IHRoaXMucG9zc2libGVDZW50ZXJzX1tpXTtcbiAgICAgIGlmIChjZW50ZXIuZ2V0Q291bnQoKSA+PSBfLkNFTlRFUl9RVU9SVU0pIHtcbiAgICAgICAgaWYgKGZpcnN0Q29uZmlybWVkQ2VudGVyID09IG51bGwpIHtcbiAgICAgICAgICBmaXJzdENvbmZpcm1lZENlbnRlciA9IGNlbnRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBXZSBoYXZlIHR3byBjb25maXJtZWQgY2VudGVyc1xuICAgICAgICAgIC8vIEhvdyBmYXIgZG93biBjYW4gd2Ugc2tpcCBiZWZvcmUgcmVzdW1pbmcgbG9va2luZyBmb3IgdGhlIG5leHRcbiAgICAgICAgICAvLyBwYXR0ZXJuPyBJbiB0aGUgd29yc3QgY2FzZSwgb25seSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZVxuICAgICAgICAgIC8vIGRpZmZlcmVuY2UgaW4gdGhlIHggLyB5IGNvb3JkaW5hdGVzIG9mIHRoZSB0d28gY2VudGVycy5cbiAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBjYXNlIHdoZXJlIHlvdSBmaW5kIHRvcCBsZWZ0IGxhc3QuXG4gICAgICAgICAgdGhpcy5oYXNTa2lwcGVkXyA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKFxuICAgICAgICAgICAgTWF0aC5hYnMoZmlyc3RDb25maXJtZWRDZW50ZXIuZ2V0WCgpIC0gY2VudGVyLmdldFgoKSkgLVxuICAgICAgICAgICAgICBNYXRoLmFicyhmaXJzdENvbmZpcm1lZENlbnRlci5nZXRZKCkgLSBjZW50ZXIuZ2V0WSgpKSkgLyAyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZmYgd2UgaGF2ZSBmb3VuZCBhdCBsZWFzdCAzIGZpbmRlciBwYXR0ZXJucyB0aGF0XG4gICAqIGhhdmUgYmVlbiBkZXRlY3RlZCBhdCBsZWFzdCB7QGxpbmsgI0NFTlRFUl9RVU9SVU19IHRpbWVzIGVhY2gsIGFuZFxuICAgKiAsIHRoZSBlc3RpbWF0ZWQgbW9kdWxlIHNpemUgb2YgdGhlIGNhbmRpZGF0ZXMgaXMgXCJwcmV0dHkgc2ltaWxhclwiLlxuICAgKi9cbiAgcHJvLmhhdmVNdWx0aXBseUNvbmZpcm1lZENlbnRlcnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29uZmlybWVkQ291bnQgPSAwO1xuICAgIHZhciB0b3RhbE1vZHVsZVNpemUgPSAwLjtcbiAgICB2YXIgbWF4ID0gdGhpcy5wb3NzaWJsZUNlbnRlcnNfLmxlbmd0aDtcbiAgICB0aGlzLnBvc3NpYmxlQ2VudGVyc18uZm9yRWFjaChmdW5jdGlvbihwYXR0ZXJuKSB7XG4gICAgICBpZiAocGF0dGVybi5nZXRDb3VudCgpID49IF8uQ0VOVEVSX1FVT1JVTSkge1xuICAgICAgICBjb25maXJtZWRDb3VudCsrO1xuICAgICAgICB0b3RhbE1vZHVsZVNpemUgKz0gcGF0dGVybi5nZXRFc3RpbWF0ZWRNb2R1bGVTaXplKCk7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gICAgaWYgKGNvbmZpcm1lZENvdW50IDwgMykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBPSywgd2UgaGF2ZSBhdCBsZWFzdCAzIGNvbmZpcm1lZCBjZW50ZXJzLCBidXQsIGl0J3MgcG9zc2libGUgdGhhdCBvbmVcbiAgICAvLyBpcyBhIFwiZmFsc2UgcG9zaXRpdmVcIlxuICAgIC8vIGFuZCB0aGF0IHdlIG5lZWQgdG8ga2VlcCBsb29raW5nLiBXZSBkZXRlY3QgdGhpcyBieSBhc2tpbmcgaWYgdGhlXG4gICAgLy8gZXN0aW1hdGVkIG1vZHVsZSBzaXplc1xuICAgIC8vIHZhcnkgdG9vIG11Y2guIFdlIGFyYml0cmFyaWx5IHNheSB0aGF0IHdoZW4gdGhlIHRvdGFsIGRldmlhdGlvblxuICAgIC8vIGZyb20gYXZlcmFnZSBleGNlZWRzXG4gICAgLy8gNSUgb2YgdGhlIHRvdGFsIG1vZHVsZSBzaXplIGVzdGltYXRlcywgaXQncyB0b28gbXVjaC5cbiAgICAvLyBtYW51OiBEb2VzIGl0IG1ha2Ugc2Vuc2UgdG8gZGl2aWRlIGJ5IG1heCB3aGlsZSBjb3VudGluZ1xuICAgIC8vIG9ubHkgdGhvc2Ugd2l0aCA+PSBDRU5URVJfUVVPUlVNLlxuICAgIHZhciBhdmVyYWdlID0gdG90YWxNb2R1bGVTaXplIC8gbWF4O1xuICAgIHZhciB0b3RhbERldmlhdGlvbiA9IDAuO1xuICAgIHRoaXMucG9zc2libGVDZW50ZXJzXy5mb3JFYWNoKGZ1bmN0aW9uKHBhdHRlcm4pIHtcbiAgICAgIHRvdGFsRGV2aWF0aW9uICs9IE1hdGguYWJzKHBhdHRlcm4uZ2V0RXN0aW1hdGVkTW9kdWxlU2l6ZSgpIC0gYXZlcmFnZSk7XG4gICAgfSk7XG4gICAgaWYgKHRvdGFsRGV2aWF0aW9uID4gMC4wNSAqIHRvdGFsTW9kdWxlU2l6ZSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIC8vIENoZWNrIHNrZXcgb2YgYmVzdCBwYXR0ZXJucy5cbiAgICB2YXIgY2VudGVycyA9IHRoaXMuc2VsZWN0QmVzdFBhdHRlcm5zKCk7XG4gICAgdmFyIHNrZXcgPSBfLmNvbXB1dGVTa2V3KGNlbnRlcnMpO1xuXG4gICAgcmV0dXJuIHNrZXcgPCBfLlNLRVdfVEhSRVNIT0xEO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfY2hlY2tTa2V3IGNoZWNrIHNrZXcsIGRlZmF1bHRzIHRvIGZhbHNlLlxuICAgKiBAcmV0dXJuIHtBcnJheS48RmluZGVyUGF0dGVybj59IHRoZSAzIGJlc3QgRmluZGVyUGF0dGVybnMgZnJvbSBvdXIgbGlzdFxuICAgKiBvZiBjYW5kaWRhdGVzLiBUaGUgXCJiZXN0XCIgYXJlIHRob3NlIHRoYXQgaGF2ZSBiZWVuIGRldGVjdGVkIGF0XG4gICAqIGxlYXN0IENFTlRFUl9RVU9SVU0gdGltZXMsIGFuZCB3aG9zZSBtb2R1bGUgc2l6ZSBkaWZmZXJzIGZyb20gdGhlXG4gICAqIGF2ZXJhZ2UgYW1vbmcgdGhvc2UgcGF0dGVybnMgdGhlIGxlYXN0LlxuICAgKi9cbiAgcHJvLnNlbGVjdEJlc3RQYXR0ZXJucyA9IGZ1bmN0aW9uKG9wdF9jaGVja1NrZXcpIHtcbiAgICB2YXIgc3RhcnRTaXplID0gdGhpcy5wb3NzaWJsZUNlbnRlcnNfLmxlbmd0aDtcbiAgICBpZiAoc3RhcnRTaXplIDwgMykge1xuICAgICAgLy8gQ291bGRuJ3QgZmluZCBlbm91Z2ggZmluZGVyIHBhdHRlcm5zXG4gICAgICB0aHJvdyBuZXcgdzY5Yi5xci5Ob3RGb3VuZEVycm9yKCk7XG4gICAgfVxuICAgIHZhciBhdmVyYWdlO1xuICAgIHZhciBjZW50ZXJzID0gZ29vZy5hcnJheS5jbG9uZSh0aGlzLnBvc3NpYmxlQ2VudGVyc18pO1xuXG4gICAgLy8gRmlsdGVyIG91dGxpZXIgcG9zc2liaWxpdGllcyB3aG9zZSBtb2R1bGUgc2l6ZSBpcyB0b28gZGlmZmVyZW50XG4gICAgaWYgKHN0YXJ0U2l6ZSA+IDMpIHtcbiAgICAgIC8vIEJ1dCB3ZSBjYW4gb25seSBhZmZvcmQgdG8gZG8gc28gaWYgd2UgaGF2ZSBhdCBsZWFzdCA0IHBvc3NpYmlsaXRpZXNcbiAgICAgIC8vIHRvIGNob29zZSBmcm9tXG4gICAgICB2YXIgdG90YWxNb2R1bGVTaXplID0gMC47XG4gICAgICB2YXIgc3F1YXJlID0gMC47XG4gICAgICBjZW50ZXJzLmZvckVhY2goZnVuY3Rpb24oY2VudGVyKSB7XG4gICAgICAgIHZhciBzaXplID0gY2VudGVyLmdldEVzdGltYXRlZE1vZHVsZVNpemUoKTtcbiAgICAgICAgdG90YWxNb2R1bGVTaXplICs9IHNpemU7XG4gICAgICAgIHNxdWFyZSArPSBzaXplICogc2l6ZTtcbiAgICAgIH0pO1xuICAgICAgYXZlcmFnZSA9IHRvdGFsTW9kdWxlU2l6ZSAvIHN0YXJ0U2l6ZTtcbiAgICAgIHZhciBzdGREZXYgPSBNYXRoLnNxcnQoc3F1YXJlIC8gc3RhcnRTaXplIC0gYXZlcmFnZSAqIGF2ZXJhZ2UpO1xuXG4gICAgICBjZW50ZXJzLnNvcnQoXy5GdXJ0aGVzdEZyb21BdmVyYWdlQ29tcGFyYXRvcihhdmVyYWdlKSk7XG5cbiAgICAgIHZhciBsaW1pdCA9IE1hdGgubWF4KDAuMiAqIGF2ZXJhZ2UsIHN0ZERldik7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2VudGVycy5sZW5ndGggJiZcbiAgICAgICAgY2VudGVycy5sZW5ndGggPiAzOyBpKyspIHtcbiAgICAgICAgdmFyIHBhdHRlcm4gPSBjZW50ZXJzW2ldO1xuICAgICAgICBpZiAoTWF0aC5hYnMocGF0dGVybi5nZXRFc3RpbWF0ZWRNb2R1bGVTaXplKCkgLSBhdmVyYWdlKSA+IGxpbWl0KSB7XG4gICAgICAgICAgZ29vZy5hcnJheS5yZW1vdmVBdChjZW50ZXJzLCBpKTtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2VudGVycy5sZW5ndGggPiAzKSB7XG4gICAgICAvLyBUaHJvdyBhd2F5IGFsbCBidXQgdGhvc2UgZmlyc3Qgc2l6ZSBjYW5kaWRhdGUgcG9pbnRzIHdlIGZvdW5kLlxuXG4gICAgICB0b3RhbE1vZHVsZVNpemUgPSAwLjtcbiAgICAgIGNlbnRlcnMuZm9yRWFjaChmdW5jdGlvbihwb3NzaWJsZUNlbnRlcikge1xuICAgICAgICB0b3RhbE1vZHVsZVNpemUgKz0gcG9zc2libGVDZW50ZXIuZ2V0RXN0aW1hdGVkTW9kdWxlU2l6ZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGF2ZXJhZ2UgPSB0b3RhbE1vZHVsZVNpemUgLyBjZW50ZXJzLmxlbmd0aDtcblxuICAgICAgY2VudGVycy5zb3J0KF8uQ2VudGVyQ29tcGFyYXRvcihhdmVyYWdlKSk7XG5cbiAgICAgIGlmIChvcHRfY2hlY2tTa2V3KSB7XG4gICAgICAgIC8vIGNoZWNrIHNrZXcgZXJyb3Igb2YgZmlyc3QgZmV3IHNldHMuXG4gICAgICAgIHZhciB3aXRoU2tldyA9IF8uZ2V0Q29tYmluYXRpb25zKGNlbnRlcnMpLm1hcChmdW5jdGlvbihjb21iaW5hdGlvbikge1xuICAgICAgICAgIHJldHVybiB7Y2VudGVyczogY29tYmluYXRpb24sXG4gICAgICAgICAgICBza2V3OiBfLmNvbXB1dGVTa2V3KGNvbWJpbmF0aW9uKX07XG4gICAgICAgIH0pO1xuICAgICAgICB3aXRoU2tldy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gZ29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZShhLnNrZXcsIGIuc2tldyk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBwaWNrIGNhbmlkYXRlcyB3aXRoIGxvd2VzdCBza2V3LlxuICAgICAgICBjZW50ZXJzID0gd2l0aFNrZXdbMF0uY2VudGVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNlbnRlcnMgPSBjZW50ZXJzLnNsaWNlKDAsIDMpO1xuICAgICAgfVxuXG5cbiAgICB9XG5cbiAgICByZXR1cm4gY2VudGVycztcbiAgfTtcblxuICAvKipcbiAgICogR2V0IGNcbiAgICogQHBhcmFtIHtBcnJheS48RmluZGVyUGF0dGVybj59IGNlbnRlcnMgZmluZGVyIHBhdHRlcm4gY2FuZGlkYXRlcy5cbiAgICogQHJldHVybiB7QXJyYXkuPEFycmF5LjxGaW5kZXJQYXR0ZXJuPj59IHJlc3VsdC5cbiAgICovXG4gIF8uZ2V0Q29tYmluYXRpb25zID0gZnVuY3Rpb24oY2VudGVycykge1xuICAgIHZhciBsZW4gPSBjZW50ZXJzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgXy5TS0VXX0NPTUJJTkFUSU9OUy5mb3JFYWNoKGZ1bmN0aW9uKGluZGljZXMpIHtcbiAgICAgIGlmIChpbmRpY2VzWzBdIDwgbGVuICYmIGluZGljZXNbMV0gJiYgbGVuICYmIGluZGljZXNbMl0gPCBsZW4pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goW2NlbnRlcnNbaW5kaWNlc1swXV0sIGNlbnRlcnNbaW5kaWNlc1sxXV0sXG4gICAgICAgICAgY2VudGVyc1tpbmRpY2VzWzJdXV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIDxwPk9yZGVycyBieSBmdXJ0aGVzdCBmcm9tIGF2ZXJhZ2U8L3A+XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhdmVyYWdlIGF2ZXJhZ2UuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9uKEZpbmRlclBhdHRlcm4sIEZpbmRlclBhdHRlcm4pOm51bWJlcn0gY29tcGFyZSBmdW5jdGlvbi5cbiAgICovXG4gIF8uRnVydGhlc3RGcm9tQXZlcmFnZUNvbXBhcmF0b3IgPSBmdW5jdGlvbihhdmVyYWdlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGNlbnRlcjEsIGNlbnRlcjIpIHtcbiAgICAgIHZhciBkQSA9IE1hdGguYWJzKGNlbnRlcjIuZ2V0RXN0aW1hdGVkTW9kdWxlU2l6ZSgpIC0gYXZlcmFnZSk7XG4gICAgICB2YXIgZEIgPSBNYXRoLmFicyhjZW50ZXIxLmdldEVzdGltYXRlZE1vZHVsZVNpemUoKSAtIGF2ZXJhZ2UpO1xuICAgICAgcmV0dXJuIGRBIDwgZEIgPyAtMSA6IGRBID09IGRCID8gMCA6IDE7XG4gICAgfTtcbiAgfTtcblxuICAvKipcbiAgICogPHA+T3JkZXJzIGJ5IHtAbGluayBGaW5kZXJQYXR0ZXJuI2dldENvdW50KCl9LCBkZXNjZW5kaW5nLjwvcD5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGF2ZXJhZ2UgYXZlcmFnZS5cbiAgICogQHJldHVybiB7ZnVuY3Rpb24oRmluZGVyUGF0dGVybiwgRmluZGVyUGF0dGVybik6bnVtYmVyfSBjb21wYXJlIGZ1bmN0aW9uLlxuICAgKi9cbiAgXy5DZW50ZXJDb21wYXJhdG9yID0gZnVuY3Rpb24oYXZlcmFnZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihjZW50ZXIxLCBjZW50ZXIyKSB7XG4gICAgICBpZiAoY2VudGVyMi5nZXRDb3VudCgpID09IGNlbnRlcjEuZ2V0Q291bnQoKSkge1xuICAgICAgICB2YXIgZEEgPSBNYXRoLmFicyhjZW50ZXIyLmdldEVzdGltYXRlZE1vZHVsZVNpemUoKSAtIGF2ZXJhZ2UpO1xuICAgICAgICB2YXIgZEIgPSBNYXRoLmFicyhjZW50ZXIxLmdldEVzdGltYXRlZE1vZHVsZVNpemUoKSAtIGF2ZXJhZ2UpO1xuICAgICAgICByZXR1cm4gZEEgPCBkQiA/IDEgOiBkQSA9PSBkQiA/IDAgOiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjZW50ZXIyLmdldENvdW50KCkgLSBjZW50ZXIxLmdldENvdW50KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgYSAtIGIgLyB8YS1ifC5cbiAgICogQHBhcmFtIHt3NjliLnFyLlJlc3VsdFBvaW50fSBwYXR0ZXJuMSBhLlxuICAgKiBAcGFyYW0ge3c2OWIucXIuUmVzdWx0UG9pbnR9IHBhdHRlcm4yIGIuXG4gICAqIEByZXR1cm4ge0FycmF5LjxudW1iZXI+fSByZXN1bHQgYXMgYXJyYXkgW3gsIHldLlxuICAgKi9cbiAgXy5kaWZmID0gZnVuY3Rpb24ocGF0dGVybjEsIHBhdHRlcm4yKSB7XG4gICAgdmFyIGRpZmZYID0gcGF0dGVybjEuZ2V0WCgpIC0gcGF0dGVybjIuZ2V0WCgpO1xuICAgIHZhciBkaWZmWSA9IHBhdHRlcm4xLmdldFkoKSAtIHBhdHRlcm4yLmdldFkoKTtcbiAgICB2YXIgbGVuID0gTWF0aC5zcXJ0KGRpZmZYICogZGlmZlggKyBkaWZmWSAqIGRpZmZZKTtcbiAgICByZXR1cm4gW2RpZmZYIC8gbGVuLCBkaWZmWSAvIGxlbl07XG4gIH07XG5cbiAgLyoqXG4gICAqIFNjYWxhciBwcm9kdWN0XG4gICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IGEgdmVjdG9yIGEuXG4gICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IGIgdmVjdG9yIGEuXG4gICAqIEByZXR1cm4ge251bWJlcn0gc2NhbGFyIHByb2R1Y3QuXG4gICAqL1xuICBfLnNjYWxhclByb2R1Y3QgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV07XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb2YgMS8yXG4gIF8uU1FSVF8wNSA9IE1hdGguc3FydCgwLjUpO1xuICAvKipcbiAgICogQ29tcHV0ZXMgYSBudW1iZXIgdGhhdCBleHByZXNzZXMgaG93IGdvb2QgYWxpZ25lbWVudCBvZiB0aGUgZ2l2ZXZuXG4gICAqIHBhdHRlcm5zIGNhbiBiZSBleHBsYWluZWQgYnkgYSBzaW1saWFyaXR5IHRyYW5zZm9ybWF0aW9uLiBUaGlzXG4gICAqIGFzc3VtZXMgdGhhdCB0aGV5IGFyZSBvcmllbnRlZCBpbiB0cmlhbmd1bGFyIHNoYXBlLlxuICAgKiBAcGFyYW0ge0FycmF5Ljx3NjliLnFyLlJlc3VsdFBvaW50Pn0gcGF0dGVybnMgYXJyYXkgb2Ygc2l6ZSAzLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHNrZXcgZXJyb3IuXG4gICAqL1xuICBfLmNvbXB1dGVTa2V3ID0gZnVuY3Rpb24ocGF0dGVybnMpIHtcbiAgICB2YXIgZGlmZjAxID0gXy5kaWZmKHBhdHRlcm5zWzBdLCBwYXR0ZXJuc1sxXSk7XG4gICAgdmFyIGRpZmYwMiA9IF8uZGlmZihwYXR0ZXJuc1swXSwgcGF0dGVybnNbMl0pO1xuICAgIHZhciBkaWZmMTIgPSBfLmRpZmYocGF0dGVybnNbMV0sIHBhdHRlcm5zWzJdKTtcbiAgICB2YXIgc2NhbGFycyA9IFtNYXRoLmFicyhfLnNjYWxhclByb2R1Y3QoZGlmZjAxLCBkaWZmMDIpKSxcbiAgICAgIE1hdGguYWJzKF8uc2NhbGFyUHJvZHVjdChkaWZmMDEsIGRpZmYxMikpLFxuICAgICAgTWF0aC5hYnMoXy5zY2FsYXJQcm9kdWN0KGRpZmYwMiwgZGlmZjEyKSlcbiAgICBdO1xuXG4gICAgc2NhbGFycy5zb3J0KCk7XG4gICAgdmFyIGVycm9yID0gc2NhbGFyc1swXSArXG4gICAgICBNYXRoLmFicyhzY2FsYXJzWzFdIC0gXy5TUVJUXzA1KSArXG4gICAgICBNYXRoLmFicyhzY2FsYXJzWzJdIC0gXy5TUVJUXzA1KTtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH07XG5cbn0pO1xuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuTWF0aFV0aWxzJyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIHZhciBfID0gdzY5Yi5xci5NYXRoVXRpbHM7XG5cbiAgLyoqXG4gICAqIEV1Y2xpZGVhbiBkaXN0YW5jZS5cbiAgICovXG4gIF8uZGlzdGFuY2UgPSBmdW5jdGlvbihhWCwgYVksIGJYLCBiWSkge1xuICAgIHZhciB4RGlmZiA9IGFYIC0gYlg7XG4gICAgdmFyIHlEaWZmID0gYVkgLSBiWTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHhEaWZmICogeERpZmYgKyB5RGlmZiAqIHlEaWZmKTtcbiAgfTtcblxuXG59KTtcbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gUG9ydGVkIHRvIEphdmFTY3JpcHQgYnkgTGF6YXIgTGFzemxvIDIwMTFcblxuIGxhemFyc29mdEBnbWFpbC5jb20sIHd3dy5sYXphcnNvZnQuaW5mb1xuXG4gKi9cblxuLypcbiAqXG4gKiBDb3B5cmlnaHQgMjAwNyBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuVmVyc2lvbicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkJpdE1hdHJpeCcpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkZvcm1hdEVycm9yJyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIHZhciBGb3JtYXRFcnJvciA9IHc2OWIucXIuRm9ybWF0RXJyb3I7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHc2OWIucXIuRUNCID0gZnVuY3Rpb24oY291bnQsIGRhdGFDb2Rld29yZHMpIHtcbiAgICB0aGlzLmNvdW50ID0gY291bnQ7XG4gICAgdGhpcy5kYXRhQ29kZXdvcmRzID0gZGF0YUNvZGV3b3JkcztcbiAgfTtcbiAgdmFyIEVDQiA9IHc2OWIucXIuRUNCO1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVjQ29kZXdvcmRzUGVyQmxvY2sgY29kZSB3b3JkcyBwZXIgYmxvY2suXG4gICAqIEBwYXJhbSB7IUVDQn0gZWNCbG9ja3MxIGJsb2NrMS5cbiAgICogQHBhcmFtIHtFQ0I9fSBvcHRfZWNCbG9ja3MyIGJsb2NrMi5cbiAgICovXG4gIHc2OWIucXIuRUNCbG9ja3MgPSBmdW5jdGlvbihlY0NvZGV3b3Jkc1BlckJsb2NrLCBlY0Jsb2NrczEsIG9wdF9lY0Jsb2NrczIpIHtcbiAgICB0aGlzLmVjQ29kZXdvcmRzUGVyQmxvY2sgPSBlY0NvZGV3b3Jkc1BlckJsb2NrO1xuICAgIGlmIChvcHRfZWNCbG9ja3MyKVxuICAgICAgdGhpcy5lY0Jsb2NrcyA9IFtlY0Jsb2NrczEsIG9wdF9lY0Jsb2NrczJdO1xuICAgIGVsc2VcbiAgICAgIHRoaXMuZWNCbG9ja3MgPSBbZWNCbG9ja3MxXTtcblxuICB9O1xuICB2YXIgRUNCbG9ja3MgPSB3NjliLnFyLkVDQmxvY2tzO1xuXG4gIEVDQmxvY2tzLnByb3RvdHlwZS5nZXRFQ0Jsb2NrcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVjQmxvY2tzO1xuICB9O1xuXG4gIEVDQmxvY2tzLnByb3RvdHlwZS5nZXRUb3RhbEVDQ29kZXdvcmRzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWNDb2Rld29yZHNQZXJCbG9jayAqIHRoaXMuZ2V0TnVtQmxvY2tzKCk7XG4gIH07XG5cbiAgRUNCbG9ja3MucHJvdG90eXBlLmdldE51bUJsb2NrcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0b3RhbCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmVjQmxvY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0b3RhbCArPSB0aGlzLmVjQmxvY2tzW2ldLmNvdW50O1xuICAgIH1cbiAgICByZXR1cm4gdG90YWw7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdzY5Yi5xci5WZXJzaW9uID0gZnVuY3Rpb24odmVyc2lvbk51bWJlciwgYWxpZ25tZW50UGF0dGVybkNlbnRlcnMsIGVjQmxvY2tzMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNCbG9ja3MyLCBlY0Jsb2NrczMsIGVjQmxvY2tzNCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy52ZXJzaW9uTnVtYmVyID0gdmVyc2lvbk51bWJlcjtcbiAgICB0aGlzLmFsaWdubWVudFBhdHRlcm5DZW50ZXJzID0gYWxpZ25tZW50UGF0dGVybkNlbnRlcnM7XG4gICAgdGhpcy5lY0Jsb2NrcyA9IG5ldyBBcnJheShlY0Jsb2NrczEsIGVjQmxvY2tzMiwgZWNCbG9ja3MzLCBlY0Jsb2NrczQpO1xuXG4gICAgdmFyIHRvdGFsID0gMDtcbiAgICB2YXIgZWNDb2Rld29yZHMgPSBlY0Jsb2NrczEuZWNDb2Rld29yZHNQZXJCbG9jaztcbiAgICB2YXIgZWNiQXJyYXkgPSBlY0Jsb2NrczEuZ2V0RUNCbG9ja3MoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVjYkFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZWNCbG9jayA9IGVjYkFycmF5W2ldO1xuICAgICAgdG90YWwgKz0gZWNCbG9jay5jb3VudCAqIChlY0Jsb2NrLmRhdGFDb2Rld29yZHMgKyBlY0NvZGV3b3Jkcyk7XG4gICAgfVxuICAgIHRoaXMudG90YWxDb2Rld29yZHMgPSB0b3RhbDtcbiAgfTtcbiAgdmFyIFZlcnNpb24gPSB3NjliLnFyLlZlcnNpb247XG4gIHZhciBwcm8gPSBWZXJzaW9uLnByb3RvdHlwZTtcblxuICBwcm8uZ2V0VmVyc2lvbk51bWJlciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnZlcnNpb25OdW1iZXI7XG4gIH07XG5cbiAgcHJvLmdldFRvdGFsQ29kZXdvcmRzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudG90YWxDb2Rld29yZHM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gZGVidWcgc3RyaW5nLlxuICAgKi9cbiAgcHJvLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICcnICsgdGhpcy52ZXJzaW9uTnVtYmVyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGRpbWVuc2lvbi5cbiAgICovXG4gIHByby5nZXREaW1lbnNpb25Gb3JWZXJzaW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIDE3ICsgNCAqIHRoaXMudmVyc2lvbk51bWJlcjtcbiAgfTtcblxuICBwcm8uYnVpbGRGdW5jdGlvblBhdHRlcm4gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5nZXREaW1lbnNpb25Gb3JWZXJzaW9uKCk7XG4gICAgdmFyIGJpdE1hdHJpeCA9IG5ldyB3NjliLnFyLkJpdE1hdHJpeChkaW1lbnNpb24pO1xuXG4gICAgLy8gVG9wIGxlZnQgZmluZGVyIHBhdHRlcm4gKyBzZXBhcmF0b3IgKyBmb3JtYXRcbiAgICBiaXRNYXRyaXguc2V0UmVnaW9uKDAsIDAsIDksIDkpO1xuICAgIC8vIFRvcCByaWdodCBmaW5kZXIgcGF0dGVybiArIHNlcGFyYXRvciArIGZvcm1hdFxuICAgIGJpdE1hdHJpeC5zZXRSZWdpb24oZGltZW5zaW9uIC0gOCwgMCwgOCwgOSk7XG4gICAgLy8gQm90dG9tIGxlZnQgZmluZGVyIHBhdHRlcm4gKyBzZXBhcmF0b3IgKyBmb3JtYXRcbiAgICBiaXRNYXRyaXguc2V0UmVnaW9uKDAsIGRpbWVuc2lvbiAtIDgsIDksIDgpO1xuXG4gICAgLy8gQWxpZ25tZW50IHBhdHRlcm5zXG4gICAgdmFyIG1heCA9IHRoaXMuYWxpZ25tZW50UGF0dGVybkNlbnRlcnMubGVuZ3RoO1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgbWF4OyB4KyspIHtcbiAgICAgIHZhciBpID0gdGhpcy5hbGlnbm1lbnRQYXR0ZXJuQ2VudGVyc1t4XSAtIDI7XG4gICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IG1heDsgeSsrKSB7XG4gICAgICAgIGlmICgoeCA9PSAwICYmICh5ID09IDAgfHwgeSA9PSBtYXggLSAxKSkgfHwgKHggPT0gbWF4IC0gMSAmJiB5ID09IDApKSB7XG4gICAgICAgICAgLy8gTm8gYWxpZ25tZW50IHBhdHRlcm5zIG5lYXIgdGhlIHRocmVlIGZpbmRlciBwYXRlcm5zXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYml0TWF0cml4LnNldFJlZ2lvbih0aGlzLmFsaWdubWVudFBhdHRlcm5DZW50ZXJzW3ldIC0gMiwgaSwgNSwgNSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVmVydGljYWwgdGltaW5nIHBhdHRlcm5cbiAgICBiaXRNYXRyaXguc2V0UmVnaW9uKDYsIDksIDEsIGRpbWVuc2lvbiAtIDE3KTtcbiAgICAvLyBIb3Jpem9udGFsIHRpbWluZyBwYXR0ZXJuXG4gICAgYml0TWF0cml4LnNldFJlZ2lvbig5LCA2LCBkaW1lbnNpb24gLSAxNywgMSk7XG5cbiAgICBpZiAodGhpcy52ZXJzaW9uTnVtYmVyID4gNikge1xuICAgICAgLy8gVmVyc2lvbiBpbmZvLCB0b3AgcmlnaHRcbiAgICAgIGJpdE1hdHJpeC5zZXRSZWdpb24oZGltZW5zaW9uIC0gMTEsIDAsIDMsIDYpO1xuICAgICAgLy8gVmVyc2lvbiBpbmZvLCBib3R0b20gbGVmdFxuICAgICAgYml0TWF0cml4LnNldFJlZ2lvbigwLCBkaW1lbnNpb24gLSAxMSwgNiwgMyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJpdE1hdHJpeDtcbiAgfTtcbiAgcHJvLmdldEVDQmxvY2tzRm9yTGV2ZWwgPSBmdW5jdGlvbihlY0xldmVsKSB7XG4gICAgcmV0dXJuIHRoaXMuZWNCbG9ja3NbZWNMZXZlbC5vcmRpbmFsXTtcbiAgfTtcblxuICBWZXJzaW9uLlZFUlNJT05fREVDT0RFX0lORk8gPSBuZXcgQXJyYXkoMHgwN0M5NCwgMHgwODVCQywgMHgwOUE5OSwgMHgwQTREMyxcbiAgICAweDBCQkY2LCAweDBDNzYyLCAweDBEODQ3LCAweDBFNjBELCAweDBGOTI4LCAweDEwQjc4LCAweDExNDVELCAweDEyQTE3LFxuICAgIDB4MTM1MzIsIDB4MTQ5QTYsIDB4MTU2ODMsIDB4MTY4QzksIDB4MTc3RUMsIDB4MThFQzQsIDB4MTkxRTEsIDB4MUFGQUIsXG4gICAgMHgxQjA4RSwgMHgxQ0MxQSwgMHgxRDMzRiwgMHgxRUQ3NSwgMHgxRjI1MCwgMHgyMDlENSwgMHgyMTZGMCwgMHgyMjhCQSxcbiAgICAweDIzNzlGLCAweDI0QjBCLCAweDI1NDJFLCAweDI2QTY0LCAweDI3NTQxLCAweDI4QzY5KTtcblxuICBWZXJzaW9uLlZFUlNJT05TID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheShuZXcgVmVyc2lvbigxLCBbXSxcbiAgICAgIG5ldyBFQ0Jsb2Nrcyg3LCBuZXcgRUNCKDEsIDE5KSksXG4gICAgICBuZXcgRUNCbG9ja3MoMTAsIG5ldyBFQ0IoMSwgMTYpKSwgbmV3IEVDQmxvY2tzKDEzLCBuZXcgRUNCKDEsIDEzKSksXG4gICAgICBuZXcgRUNCbG9ja3MoMTcsIG5ldyBFQ0IoMSwgOSkpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDIsIG5ldyBBcnJheSg2LCAxOCksIG5ldyBFQ0Jsb2NrcygxMCwgbmV3IEVDQigxLCAzNCkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMTYsIG5ldyBFQ0IoMSwgMjgpKSwgbmV3IEVDQmxvY2tzKDIyLCBuZXcgRUNCKDEsIDIyKSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQigxLCAxNikpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDMsIG5ldyBBcnJheSg2LCAyMiksIG5ldyBFQ0Jsb2NrcygxNSwgbmV3IEVDQigxLCA1NSkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjYsIG5ldyBFQ0IoMSwgNDQpKSwgbmV3IEVDQmxvY2tzKDE4LCBuZXcgRUNCKDIsIDE3KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyMiwgbmV3IEVDQigyLCAxMykpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDQsIG5ldyBBcnJheSg2LCAyNiksIG5ldyBFQ0Jsb2NrcygyMCwgbmV3IEVDQigxLCA4MCkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMTgsIG5ldyBFQ0IoMiwgMzIpKSwgbmV3IEVDQmxvY2tzKDI2LCBuZXcgRUNCKDIsIDI0KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygxNiwgbmV3IEVDQig0LCA5KSkpLFxuICAgICAgbmV3IFZlcnNpb24oNSwgbmV3IEFycmF5KDYsIDMwKSwgbmV3IEVDQmxvY2tzKDI2LCBuZXcgRUNCKDEsIDEwOCkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjQsIG5ldyBFQ0IoMiwgNDMpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDE4LCBuZXcgRUNCKDIsIDE1KSwgbmV3IEVDQigyLCAxNikpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjIsIG5ldyBFQ0IoMiwgMTEpLCBuZXcgRUNCKDIsIDEyKSkpLFxuICAgICAgbmV3IFZlcnNpb24oNiwgbmV3IEFycmF5KDYsIDM0KSwgbmV3IEVDQmxvY2tzKDE4LCBuZXcgRUNCKDIsIDY4KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygxNiwgbmV3IEVDQig0LCAyNykpLCBuZXcgRUNCbG9ja3MoMjQsIG5ldyBFQ0IoNCwgMTkpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI4LCBuZXcgRUNCKDQsIDE1KSkpLFxuICAgICAgbmV3IFZlcnNpb24oNywgbmV3IEFycmF5KDYsIDIyLCAzOCksIG5ldyBFQ0Jsb2NrcygyMCwgbmV3IEVDQigyLCA3OCkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMTgsIG5ldyBFQ0IoNCwgMzEpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDE4LCBuZXcgRUNCKDIsIDE0KSwgbmV3IEVDQig0LCAxNSkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjYsIG5ldyBFQ0IoNCwgMTMpLCBuZXcgRUNCKDEsIDE0KSkpLFxuICAgICAgbmV3IFZlcnNpb24oOCwgbmV3IEFycmF5KDYsIDI0LCA0MiksIG5ldyBFQ0Jsb2NrcygyNCwgbmV3IEVDQigyLCA5NykpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjIsIG5ldyBFQ0IoMiwgMzgpLCBuZXcgRUNCKDIsIDM5KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyMiwgbmV3IEVDQig0LCAxOCksIG5ldyBFQ0IoMiwgMTkpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI2LCBuZXcgRUNCKDQsIDE0KSwgbmV3IEVDQigyLCAxNSkpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDksIG5ldyBBcnJheSg2LCAyNiwgNDYpLCBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMiwgMTE2KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyMiwgbmV3IEVDQigzLCAzNiksIG5ldyBFQ0IoMiwgMzcpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDIwLCBuZXcgRUNCKDQsIDE2KSwgbmV3IEVDQig0LCAxNykpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjQsIG5ldyBFQ0IoNCwgMTIpLCBuZXcgRUNCKDQsIDEzKSkpLFxuICAgICAgbmV3IFZlcnNpb24oMTAsIG5ldyBBcnJheSg2LCAyOCwgNTApLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMTgsIG5ldyBFQ0IoMiwgNjgpLCBuZXcgRUNCKDIsIDY5KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyNiwgbmV3IEVDQig0LCA0MyksIG5ldyBFQ0IoMSwgNDQpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI0LCBuZXcgRUNCKDYsIDE5KSwgbmV3IEVDQigyLCAyMCkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoNiwgMTUpLCBuZXcgRUNCKDIsIDE2KSkpLFxuICAgICAgbmV3IFZlcnNpb24oMTEsIG5ldyBBcnJheSg2LCAzMCwgNTQpLCBuZXcgRUNCbG9ja3MoMjAsIG5ldyBFQ0IoNCwgODEpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDEsIDUwKSwgbmV3IEVDQig0LCA1MSkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoNCwgMjIpLCBuZXcgRUNCKDQsIDIzKSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyNCwgbmV3IEVDQigzLCAxMiksIG5ldyBFQ0IoOCwgMTMpKSksXG4gICAgICBuZXcgVmVyc2lvbigxMiwgbmV3IEFycmF5KDYsIDMyLCA1OCksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyNCwgbmV3IEVDQigyLCA5MiksIG5ldyBFQ0IoMiwgOTMpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDIyLCBuZXcgRUNCKDYsIDM2KSwgbmV3IEVDQigyLCAzNykpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjYsIG5ldyBFQ0IoNCwgMjApLCBuZXcgRUNCKDYsIDIxKSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQig3LCAxNCksIG5ldyBFQ0IoNCwgMTUpKSksXG4gICAgICBuZXcgVmVyc2lvbigxMywgbmV3IEFycmF5KDYsIDM0LCA2MiksIG5ldyBFQ0Jsb2NrcygyNiwgbmV3IEVDQig0LCAxMDcpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDIyLCBuZXcgRUNCKDgsIDM3KSwgbmV3IEVDQigxLCAzOCkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjQsIG5ldyBFQ0IoOCwgMjApLCBuZXcgRUNCKDQsIDIxKSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyMiwgbmV3IEVDQigxMiwgMTEpLCBuZXcgRUNCKDQsIDEyKSkpLFxuICAgICAgbmV3IFZlcnNpb24oMTQsIG5ldyBBcnJheSg2LCAyNiwgNDYsIDY2KSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDMsIDExNSksIG5ldyBFQ0IoMSwgMTE2KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyNCwgbmV3IEVDQig0LCA0MCksIG5ldyBFQ0IoNSwgNDEpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDIwLCBuZXcgRUNCKDExLCAxNiksIG5ldyBFQ0IoNSwgMTcpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI0LCBuZXcgRUNCKDExLCAxMiksIG5ldyBFQ0IoNSwgMTMpKSksXG4gICAgICBuZXcgVmVyc2lvbigxNSwgbmV3IEFycmF5KDYsIDI2LCA0OCwgNzApLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjIsIG5ldyBFQ0IoNSwgODcpLCBuZXcgRUNCKDEsIDg4KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyNCwgbmV3IEVDQig1LCA0MSksIG5ldyBFQ0IoNSwgNDIpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDUsIDI0KSwgbmV3IEVDQig3LCAyNSkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjQsIG5ldyBFQ0IoMTEsIDEyKSwgbmV3IEVDQig3LCAxMykpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDE2LCBuZXcgQXJyYXkoNiwgMjYsIDUwLCA3NCksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyNCwgbmV3IEVDQig1LCA5OCksIG5ldyBFQ0IoMSwgOTkpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI4LCBuZXcgRUNCKDcsIDQ1KSwgbmV3IEVDQigzLCA0NikpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjQsIG5ldyBFQ0IoMTUsIDE5KSwgbmV3IEVDQigyLCAyMCkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMywgMTUpLCBuZXcgRUNCKDEzLCAxNikpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDE3LCBuZXcgQXJyYXkoNiwgMzAsIDU0LCA3OCksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQigxLCAxMDcpLCBuZXcgRUNCKDUsIDEwOCkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoMTAsIDQ2KSwgbmV3IEVDQigxLCA0NykpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoMSwgMjIpLCBuZXcgRUNCKDE1LCAyMykpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoMiwgMTQpLCBuZXcgRUNCKDE3LCAxNSkpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDE4LCBuZXcgQXJyYXkoNiwgMzAsIDU2LCA4MiksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQig1LCAxMjApLCBuZXcgRUNCKDEsIDEyMSkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjYsIG5ldyBFQ0IoOSwgNDMpLCBuZXcgRUNCKDQsIDQ0KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQigxNywgMjIpLCBuZXcgRUNCKDEsIDIzKSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQigyLCAxNCksIG5ldyBFQ0IoMTksIDE1KSkpLFxuICAgICAgbmV3IFZlcnNpb24oMTksIG5ldyBBcnJheSg2LCAzMCwgNTgsIDg2KSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI4LCBuZXcgRUNCKDMsIDExMyksIG5ldyBFQ0IoNCwgMTE0KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyNiwgbmV3IEVDQigzLCA0NCksIG5ldyBFQ0IoMTEsIDQ1KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyNiwgbmV3IEVDQigxNywgMjEpLCBuZXcgRUNCKDQsIDIyKSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyNiwgbmV3IEVDQig5LCAxMyksIG5ldyBFQ0IoMTYsIDE0KSkpLFxuICAgICAgbmV3IFZlcnNpb24oMjAsIG5ldyBBcnJheSg2LCAzNCwgNjIsIDkwKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI4LCBuZXcgRUNCKDMsIDEwNyksIG5ldyBFQ0IoNSwgMTA4KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyNiwgbmV3IEVDQigzLCA0MSksIG5ldyBFQ0IoMTMsIDQyKSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigxNSwgMjQpLCBuZXcgRUNCKDUsIDI1KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQigxNSwgMTUpLCBuZXcgRUNCKDEwLCAxNikpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDIxLCBuZXcgQXJyYXkoNiwgMjgsIDUwLCA3MiwgOTQpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoNCwgMTE2KSwgbmV3IEVDQig0LCAxMTcpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI2LCBuZXcgRUNCKDE3LCA0MikpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoMTcsIDIyKSwgbmV3IEVDQig2LCAyMykpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMTksIDE2KSwgbmV3IEVDQig2LCAxNykpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDIyLCBuZXcgQXJyYXkoNiwgMjYsIDUwLCA3NCwgOTgpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoMiwgMTExKSwgbmV3IEVDQig3LCAxMTIpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI4LCBuZXcgRUNCKDE3LCA0NikpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoNywgMjQpLCBuZXcgRUNCKDE2LCAyNSkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjQsIG5ldyBFQ0IoMzQsIDEzKSkpLFxuICAgICAgbmV3IFZlcnNpb24oMjMsIG5ldyBBcnJheSg2LCAzMCwgNTQsIDc0LCAxMDIpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoNCwgMTIxKSwgbmV3IEVDQig1LCAxMjIpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI4LCBuZXcgRUNCKDQsIDQ3KSwgbmV3IEVDQigxNCwgNDgpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDExLCAyNCksIG5ldyBFQ0IoMTQsIDI1KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigxNiwgMTUpLCBuZXcgRUNCKDE0LCAxNikpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDI0LCBuZXcgQXJyYXkoNiwgMjgsIDU0LCA4MCwgMTA2KSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDYsIDExNyksIG5ldyBFQ0IoNCwgMTE4KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQig2LCA0NSksIG5ldyBFQ0IoMTQsIDQ2KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigxMSwgMjQpLCBuZXcgRUNCKDE2LCAyNSkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMzAsIDE2KSwgbmV3IEVDQigyLCAxNykpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDI1LCBuZXcgQXJyYXkoNiwgMzIsIDU4LCA4NCwgMTEwKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI2LCBuZXcgRUNCKDgsIDEwNiksIG5ldyBFQ0IoNCwgMTA3KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQig4LCA0NyksIG5ldyBFQ0IoMTMsIDQ4KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQig3LCAyNCksIG5ldyBFQ0IoMjIsIDI1KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigyMiwgMTUpLCBuZXcgRUNCKDEzLCAxNikpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDI2LCBuZXcgQXJyYXkoNiwgMzAsIDU4LCA4NiwgMTE0KSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI4LCBuZXcgRUNCKDEwLCAxMTQpLCBuZXcgRUNCKDIsIDExNSkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoMTksIDQ2KSwgbmV3IEVDQig0LCA0NykpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoMjgsIDIyKSwgbmV3IEVDQig2LCAyMykpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMzMsIDE2KSwgbmV3IEVDQig0LCAxNykpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDI3LCBuZXcgQXJyYXkoNiwgMzQsIDYyLCA5MCwgMTE4KSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDgsIDEyMiksIG5ldyBFQ0IoNCwgMTIzKSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQigyMiwgNDUpLCBuZXcgRUNCKDMsIDQ2KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQig4LCAyMyksIG5ldyBFQ0IoMjYsIDI0KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigxMiwgMTUpLCBuZXcgRUNCKDI4LCAxNikpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDI4LCBuZXcgQXJyYXkoNiwgMjYsIDUwLCA3NCwgOTgsIDEyMiksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigzLCAxMTcpLCBuZXcgRUNCKDEwLCAxMTgpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI4LCBuZXcgRUNCKDMsIDQ1KSwgbmV3IEVDQigyMywgNDYpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDQsIDI0KSwgbmV3IEVDQigzMSwgMjUpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDExLCAxNSksIG5ldyBFQ0IoMzEsIDE2KSkpLFxuICAgICAgbmV3IFZlcnNpb24oMjksIG5ldyBBcnJheSg2LCAzMCwgNTQsIDc4LCAxMDIsIDEyNiksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQig3LCAxMTYpLCBuZXcgRUNCKDcsIDExNykpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoMjEsIDQ1KSwgbmV3IEVDQig3LCA0NikpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMSwgMjMpLCBuZXcgRUNCKDM3LCAyNCkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMTksIDE1KSwgbmV3IEVDQigyNiwgMTYpKSksXG4gICAgICBuZXcgVmVyc2lvbigzMCwgbmV3IEFycmF5KDYsIDI2LCA1MiwgNzgsIDEwNCwgMTMwKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDUsIDExNSksIG5ldyBFQ0IoMTAsIDExNikpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoMTksIDQ3KSwgbmV3IEVDQigxMCwgNDgpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDE1LCAyNCksIG5ldyBFQ0IoMjUsIDI1KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigyMywgMTUpLCBuZXcgRUNCKDI1LCAxNikpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDMxLCBuZXcgQXJyYXkoNiwgMzAsIDU2LCA4MiwgMTA4LCAxMzQpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMTMsIDExNSksIG5ldyBFQ0IoMywgMTE2KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQigyLCA0NiksIG5ldyBFQ0IoMjksIDQ3KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQig0MiwgMjQpLCBuZXcgRUNCKDEsIDI1KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigyMywgMTUpLCBuZXcgRUNCKDI4LCAxNikpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDMyLCBuZXcgQXJyYXkoNiwgMzQsIDYwLCA4NiwgMTEyLCAxMzgpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMTcsIDExNSkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoMTAsIDQ2KSwgbmV3IEVDQigyMywgNDcpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDEwLCAyNCksIG5ldyBFQ0IoMzUsIDI1KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigxOSwgMTUpLCBuZXcgRUNCKDM1LCAxNikpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDMzLCBuZXcgQXJyYXkoNiwgMzAsIDU4LCA4NiwgMTE0LCAxNDIpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMTcsIDExNSksIG5ldyBFQ0IoMSwgMTE2KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQigxNCwgNDYpLCBuZXcgRUNCKDIxLCA0NykpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMjksIDI0KSwgbmV3IEVDQigxOSwgMjUpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDExLCAxNSksIG5ldyBFQ0IoNDYsIDE2KSkpLFxuICAgICAgbmV3IFZlcnNpb24oMzQsIG5ldyBBcnJheSg2LCAzNCwgNjIsIDkwLCAxMTgsIDE0NiksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigxMywgMTE1KSwgbmV3IEVDQig2LCAxMTYpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI4LCBuZXcgRUNCKDE0LCA0NiksIG5ldyBFQ0IoMjMsIDQ3KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQig0NCwgMjQpLCBuZXcgRUNCKDcsIDI1KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQig1OSwgMTYpLCBuZXcgRUNCKDEsIDE3KSkpLFxuICAgICAgbmV3IFZlcnNpb24oMzUsIG5ldyBBcnJheSg2LCAzMCwgNTQsIDc4LCAxMDIsIDEyNiwgMTUwKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDEyLCAxMjEpLCBuZXcgRUNCKDcsIDEyMikpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoMTIsIDQ3KSwgbmV3IEVDQigyNiwgNDgpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDM5LCAyNCksIG5ldyBFQ0IoMTQsIDI1KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigyMiwgMTUpLCBuZXcgRUNCKDQxLCAxNikpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDM2LCBuZXcgQXJyYXkoNiwgMjQsIDUwLCA3NiwgMTAyLCAxMjgsIDE1NCksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQig2LCAxMjEpLCBuZXcgRUNCKDE0LCAxMjIpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI4LCBuZXcgRUNCKDYsIDQ3KSwgbmV3IEVDQigzNCwgNDgpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDQ2LCAyNCksIG5ldyBFQ0IoMTAsIDI1KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigyLCAxNSksIG5ldyBFQ0IoNjQsIDE2KSkpLFxuICAgICAgbmV3IFZlcnNpb24oMzcsIG5ldyBBcnJheSg2LCAyOCwgNTQsIDgwLCAxMDYsIDEzMiwgMTU4KSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDE3LCAxMjIpLCBuZXcgRUNCKDQsIDEyMykpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMjgsIG5ldyBFQ0IoMjksIDQ2KSwgbmV3IEVDQigxNCwgNDcpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDQ5LCAyNCksIG5ldyBFQ0IoMTAsIDI1KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQigyNCwgMTUpLCBuZXcgRUNCKDQ2LCAxNikpKSxcbiAgICAgIG5ldyBWZXJzaW9uKDM4LCBuZXcgQXJyYXkoNiwgMzIsIDU4LCA4NCwgMTEwLCAxMzYsIDE2MiksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQig0LCAxMjIpLCBuZXcgRUNCKDE4LCAxMjMpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDI4LCBuZXcgRUNCKDEzLCA0NiksIG5ldyBFQ0IoMzIsIDQ3KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQig0OCwgMjQpLCBuZXcgRUNCKDE0LCAyNSkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoNDIsIDE1KSwgbmV3IEVDQigzMiwgMTYpKSksXG4gICAgICBuZXcgVmVyc2lvbigzOSwgbmV3IEFycmF5KDYsIDI2LCA1NCwgODIsIDExMCwgMTM4LCAxNjYpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMjAsIDExNyksIG5ldyBFQ0IoNCwgMTE4KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQig0MCwgNDcpLCBuZXcgRUNCKDcsIDQ4KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygzMCwgbmV3IEVDQig0MywgMjQpLCBuZXcgRUNCKDIyLCAyNSkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMTAsIDE1KSwgbmV3IEVDQig2NywgMTYpKSksXG4gICAgICBuZXcgVmVyc2lvbig0MCwgbmV3IEFycmF5KDYsIDMwLCA1OCwgODYsIDExNCwgMTQyLCAxNzApLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMTksIDExOCksIG5ldyBFQ0IoNiwgMTE5KSksXG4gICAgICAgIG5ldyBFQ0Jsb2NrcygyOCwgbmV3IEVDQigxOCwgNDcpLCBuZXcgRUNCKDMxLCA0OCkpLFxuICAgICAgICBuZXcgRUNCbG9ja3MoMzAsIG5ldyBFQ0IoMzQsIDI0KSwgbmV3IEVDQigzNCwgMjUpKSxcbiAgICAgICAgbmV3IEVDQmxvY2tzKDMwLCBuZXcgRUNCKDIwLCAxNSksIG5ldyBFQ0IoNjEsIDE2KSkpKTtcbiAgfSgpO1xuXG4gIFZlcnNpb24uZ2V0VmVyc2lvbkZvck51bWJlciA9IGZ1bmN0aW9uKHZlcnNpb25OdW1iZXIpIHtcbiAgICBpZiAodmVyc2lvbk51bWJlciA8IDEgfHwgdmVyc2lvbk51bWJlciA+IDQwKSB7XG4gICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoKTtcbiAgICB9XG4gICAgcmV0dXJuIFZlcnNpb24uVkVSU0lPTlNbdmVyc2lvbk51bWJlciAtIDFdO1xuICB9O1xuXG4gIFZlcnNpb24uZ2V0UHJvdmlzaW9uYWxWZXJzaW9uRm9yRGltZW5zaW9uID0gZnVuY3Rpb24oZGltZW5zaW9uKSB7XG4gICAgaWYgKGRpbWVuc2lvbiAlIDQgIT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCk7XG4gICAgfVxuICAgIHJldHVybiBWZXJzaW9uLmdldFZlcnNpb25Gb3JOdW1iZXIoKGRpbWVuc2lvbiAtIDE3KSA+PiAyKTtcbiAgfTtcblxuICBWZXJzaW9uLmRlY29kZVZlcnNpb25JbmZvcm1hdGlvbiA9IGZ1bmN0aW9uKHZlcnNpb25CaXRzKSB7XG4gICAgdmFyIGJlc3REaWZmZXJlbmNlID0gMHhmZmZmZmZmZjtcbiAgICB2YXIgYmVzdFZlcnNpb24gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgVmVyc2lvbi5WRVJTSU9OX0RFQ09ERV9JTkZPLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdGFyZ2V0VmVyc2lvbiA9IFZlcnNpb24uVkVSU0lPTl9ERUNPREVfSU5GT1tpXTtcbiAgICAgIC8vIERvIHRoZSB2ZXJzaW9uIGluZm8gYml0cyBtYXRjaCBleGFjdGx5PyBkb25lLlxuICAgICAgaWYgKHRhcmdldFZlcnNpb24gPT0gdmVyc2lvbkJpdHMpIHtcbiAgICAgICAgcmV0dXJuIFZlcnNpb24uZ2V0VmVyc2lvbkZvck51bWJlcihpICsgNyk7XG4gICAgICB9XG4gICAgICAvLyBPdGhlcndpc2Ugc2VlIGlmIHRoaXMgaXMgdGhlIGNsb3Nlc3QgdG8gYSByZWFsIHZlcnNpb24gaW5mbyBiaXQgc3RyaW5nXG4gICAgICAvLyB3ZSBoYXZlIHNlZW4gc28gZmFyXG4gICAgICB2YXIgYml0c0RpZmZlcmVuY2UgPSB3NjliLnFyLkZvcm1hdEluZm9ybWF0aW9uLm51bUJpdHNEaWZmZXJpbmcoXG4gICAgICAgIHZlcnNpb25CaXRzLCB0YXJnZXRWZXJzaW9uKTtcbiAgICAgIGlmIChiaXRzRGlmZmVyZW5jZSA8IGJlc3REaWZmZXJlbmNlKSB7XG4gICAgICAgIGJlc3RWZXJzaW9uID0gaSArIDc7XG4gICAgICAgIGJlc3REaWZmZXJlbmNlID0gYml0c0RpZmZlcmVuY2U7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFdlIGNhbiB0b2xlcmF0ZSB1cCB0byAzIGJpdHMgb2YgZXJyb3Igc2luY2Ugbm8gdHdvIHZlcnNpb24gaW5mbyBjb2Rld29yZHNcbiAgICAvLyB3aWxsIGRpZmZlciBpbiBsZXNzIHRoYW4gNCBiaXRzLlxuICAgIGlmIChiZXN0RGlmZmVyZW5jZSA8PSAzKSB7XG4gICAgICByZXR1cm4gVmVyc2lvbi5nZXRWZXJzaW9uRm9yTnVtYmVyKGJlc3RWZXJzaW9uKTtcbiAgICB9XG4gICAgLy8gSWYgd2UgZGlkbid0IGZpbmQgYSBjbG9zZSBlbm91Z2ggbWF0Y2gsIGZhaWxcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn0pO1xuXG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG4vKlxuICpcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5xci5EZXRlY3RvcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLmltZy5CaXRNYXRyaXhMaWtlJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuQWxpZ25tZW50UGF0dGVybicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkFsaWdubWVudFBhdHRlcm5GaW5kZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5CaXRNYXRyaXgnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5EZWZhdWx0R3JpZFNhbXBsZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5GaW5kZXJQYXR0ZXJuRmluZGVyJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuTWF0aFV0aWxzJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuTm90Rm91bmRFcnJvcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLlZlcnNpb24nKTtcblxuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICB2YXIgVmVyc2lvbiA9IHc2OWIucXIuVmVyc2lvbjtcbiAgdmFyIFBlcnNwZWN0aXZlVHJhbnNmb3JtID0gdzY5Yi5xci5QZXJzcGVjdGl2ZVRyYW5zZm9ybTtcbiAgdmFyIE5vdEZvdW5kRXJyb3IgPSB3NjliLnFyLk5vdEZvdW5kRXJyb3I7XG4gIHZhciBNYXRoVXRpbHMgPSB3NjliLnFyLk1hdGhVdGlscztcbiAgdmFyIEFsaWdubWVudFBhdHRlcm4gPSB3NjliLnFyLkFsaWdubWVudFBhdHRlcm47XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdzY5Yi5xci5EZXRlY3RvclJlc3VsdCA9IGZ1bmN0aW9uKGJpdHMsIHBvaW50cykge1xuICAgIHRoaXMuYml0cyA9IGJpdHM7XG4gICAgdGhpcy5wb2ludHMgPSBwb2ludHM7XG4gIH07XG4gIHZhciBEZXRlY3RvclJlc3VsdCA9IHc2OWIucXIuRGV0ZWN0b3JSZXN1bHQ7XG5cbiAgLyoqXG4gICAqIEVuY2Fwc3VsYXRlcyBsb2dpYyB0aGF0IGNhbiBkZXRlY3QgYSBRUiBDb2RlIGluIGFuIGltYWdlLCBldmVuIGlmIHRoZVxuICAgKiBRUiBDb2RlIGlzIHJvdGF0ZWQgb3Igc2tld2VkLCBvciBwYXJ0aWFsbHkgb2JzY3VyZWQuXG4gICAqXG4gICAqIEBhdXRob3IgU2VhbiBPd2VuXG4gICAqIEBhdXRob3IgbWJAdzY5Yi5jb20gKE1hbnVlbCBCcmF1bikgLSBwb3J0ZWQgdG8ganNcbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7IXc2OWIuaW1nLkJpdE1hdHJpeExpa2V9IGltYWdlIHRoZSBpbWFnZS5cbiAgICogQHBhcmFtIHs/dzY5Yi5xci5SZXN1bHRQb2ludENhbGxiYWNrPX0gb3B0X2NhbGxiYWNrIGNhbGxiYWNrLlxuICAgKi9cbiAgdzY5Yi5xci5EZXRlY3RvciA9IGZ1bmN0aW9uKGltYWdlLCBvcHRfY2FsbGJhY2spIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7IXc2OWIuaW1nLkJpdE1hdHJpeExpa2V9XG4gICAgICovXG4gICAgdGhpcy5pbWFnZSA9IGltYWdlO1xuICAgIHRoaXMucmVzdWx0UG9pbnRDYWxsYmFjayA9IG9wdF9jYWxsYmFjayB8fCBudWxsO1xuICB9O1xuICB2YXIgcHJvID0gdzY5Yi5xci5EZXRlY3Rvci5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIDxwPlRoaXMgbWV0aG9kIHRyYWNlcyBhIGxpbmUgZnJvbSBhIHBvaW50IGluIHRoZSBpbWFnZSwgaW4gdGhlXG4gICAqIGRpcmVjdGlvbiB0b3dhcmRzIGFub3RoZXIgcG9pbnQuXG4gICAqIEl0IGJlZ2lucyBpbiBhIGJsYWNrIHJlZ2lvbiwgYW5kIGtlZXBzIGdvaW5nIHVudGlsIGl0IGZpbmRzIHdoaXRlLFxuICAgKiB0aGVuIGJsYWNrLCB0aGVuIHdoaXRlIGFnYWluLlxuICAgKiBJdCByZXBvcnRzIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBzdGFydCB0byB0aGlzIHBvaW50LjwvcD5cbiAgICpcbiAgICogPHA+VGhpcyBpcyB1c2VkIHdoZW4gZmlndXJpbmcgb3V0IGhvdyB3aWRlIGEgZmluZGVyIHBhdHRlcm4gaXMsXG4gICAqIHdoZW4gdGhlIGZpbmRlciBwYXR0ZXJuIG1heSBiZSBza2V3ZWQgb3Igcm90YXRlZC48L3A+XG4gICAqL1xuICAvKipcbiAgICogPHA+VGhpcyBtZXRob2QgdHJhY2VzIGEgbGluZSBmcm9tIGEgcG9pbnQgaW4gdGhlIGltYWdlLCBpbiB0aGUgZGlyZWN0aW9uXG4gICAqIHRvd2FyZHMgYW5vdGhlciBwb2ludC5cbiAgICogSXQgYmVnaW5zIGluIGEgYmxhY2sgcmVnaW9uLCBhbmQga2VlcHMgZ29pbmcgdW50aWwgaXQgZmluZHMgd2hpdGUsIHRoZW5cbiAgICogYmxhY2ssIHRoZW4gd2hpdGUgYWdhaW4uXG4gICAqIEl0IHJlcG9ydHMgdGhlIGRpc3RhbmNlIGZyb20gdGhlIHN0YXJ0IHRvIHRoaXMgcG9pbnQuPC9wPlxuICAgKlxuICAgKiA8cD5UaGlzIGlzIHVzZWQgd2hlbiBmaWd1cmluZyBvdXQgaG93IHdpZGUgYSBmaW5kZXIgcGF0dGVybiBpcywgd2hlbiB0aGVcbiAgICogZmluZGVyIHBhdHRlcm5cbiAgICogbWF5IGJlIHNrZXdlZCBvciByb3RhdGVkLjwvcD5cbiAgICovXG4gIHByby5zaXplT2ZCbGFja1doaXRlQmxhY2tSdW4gPSBmdW5jdGlvbihmcm9tWCwgZnJvbVksIHRvWCwgdG9ZKSB7XG4gICAgLy8gTWlsZCB2YXJpYW50IG9mIEJyZXNlbmhhbSdzIGFsZ29yaXRobTtcbiAgICAvLyBzZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CcmVzZW5oYW0nc19saW5lX2FsZ29yaXRobVxuICAgIHZhciBzdGVlcCA9IE1hdGguYWJzKHRvWSAtIGZyb21ZKSA+IE1hdGguYWJzKHRvWCAtIGZyb21YKTtcbiAgICBpZiAoc3RlZXApIHtcbiAgICAgIHZhciB0ZW1wID0gZnJvbVg7XG4gICAgICBmcm9tWCA9IGZyb21ZO1xuICAgICAgZnJvbVkgPSB0ZW1wO1xuICAgICAgdGVtcCA9IHRvWDtcbiAgICAgIHRvWCA9IHRvWTtcbiAgICAgIHRvWSA9IHRlbXA7XG4gICAgfVxuXG4gICAgdmFyIGR4ID0gTWF0aC5hYnModG9YIC0gZnJvbVgpO1xuICAgIHZhciBkeSA9IE1hdGguYWJzKHRvWSAtIGZyb21ZKTtcbiAgICB2YXIgZXJyb3IgPSAtZHggPj4gMTtcbiAgICB2YXIgeHN0ZXAgPSBmcm9tWCA8IHRvWCA/IDEgOiAtMTtcbiAgICB2YXIgeXN0ZXAgPSBmcm9tWSA8IHRvWSA/IDEgOiAtMTtcblxuICAgIC8vIEluIGJsYWNrIHBpeGVscywgbG9va2luZyBmb3Igd2hpdGUsIGZpcnN0IG9yIHNlY29uZCB0aW1lLlxuICAgIHZhciBzdGF0ZSA9IDA7XG4gICAgLy8gTG9vcCB1cCB1bnRpbCB4ID09IHRvWCwgYnV0IG5vdCBiZXlvbmRcbiAgICB2YXIgeExpbWl0ID0gdG9YICsgeHN0ZXA7XG4gICAgZm9yICh2YXIgeCA9IGZyb21YLCB5ID0gZnJvbVk7IHggIT0geExpbWl0OyB4ICs9IHhzdGVwKSB7XG4gICAgICB2YXIgcmVhbFggPSBzdGVlcCA/IHkgOiB4O1xuICAgICAgdmFyIHJlYWxZID0gc3RlZXAgPyB4IDogeTtcblxuICAgICAgLy8gRG9lcyBjdXJyZW50IHBpeGVsIG1lYW4gd2UgaGF2ZSBtb3ZlZCB3aGl0ZSB0byBibGFjayBvciB2aWNlIHZlcnNhP1xuICAgICAgLy8gU2Nhbm5pbmcgYmxhY2sgaW4gc3RhdGUgMCwyIGFuZCB3aGl0ZSBpbiBzdGF0ZSAxLCBzbyBpZiB3ZSBmaW5kXG4gICAgICAvLyB0aGUgd3JvbmdcbiAgICAgIC8vIGNvbG9yLCBhZHZhbmNlIHRvIG5leHQgc3RhdGUgb3IgZW5kIGlmIHdlIGFyZSBpbiBzdGF0ZSAyIGFscmVhZHlcbiAgICAgIGlmICgoc3RhdGUgPT0gMSkgPT0gISF0aGlzLmltYWdlLmdldChyZWFsWCwgcmVhbFkpKSB7XG4gICAgICAgIGlmIChzdGF0ZSA9PSAyKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGhVdGlscy5kaXN0YW5jZSh4LCB5LCBmcm9tWCwgZnJvbVkpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlKys7XG4gICAgICB9XG5cbiAgICAgIGVycm9yICs9IGR5O1xuICAgICAgaWYgKGVycm9yID4gMCkge1xuICAgICAgICBpZiAoeSA9PSB0b1kpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB5ICs9IHlzdGVwO1xuICAgICAgICBlcnJvciAtPSBkeDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRm91bmQgYmxhY2std2hpdGUtYmxhY2s7IGdpdmUgdGhlIGJlbmVmaXQgb2YgdGhlIGRvdWJ0IHRoYXQgdGhlIG5leHRcbiAgICAvLyBwaXhlbCBvdXRzaWRlIHRoZSBpbWFnZVxuICAgIC8vIGlzIFwid2hpdGVcIiBzbyB0aGlzIGxhc3QgcG9pbnQgYXQgKHRvWCt4U3RlcCx0b1kpIGlzIHRoZSByaWdodCBlbmRpbmcuXG4gICAgLy8gVGhpcyBpcyByZWFsbHkgYVxuICAgIC8vIHNtYWxsIGFwcHJveGltYXRpb247ICh0b1greFN0ZXAsdG9ZK3lTdGVwKSBtaWdodCBiZSByZWFsbHkgY29ycmVjdC5cbiAgICAvLyBJZ25vcmUgdGhpcy5cbiAgICBpZiAoc3RhdGUgPT0gMikge1xuICAgICAgcmV0dXJuIE1hdGhVdGlscy5kaXN0YW5jZSh0b1ggKyB4c3RlcCwgdG9ZLCBmcm9tWCwgZnJvbVkpO1xuICAgIH1cbiAgICAvLyBlbHNlIHdlIGRpZG4ndCBmaW5kIGV2ZW4gYmxhY2std2hpdGUtYmxhY2s7IG5vIGVzdGltYXRlIGlzIHJlYWxseVxuICAgIC8vIHBvc3NpYmxlXG4gICAgcmV0dXJuIE5hTjtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBTZWUge0BsaW5rICNzaXplT2ZCbGFja1doaXRlQmxhY2tSdW4oaW50LCBpbnQsIGludCwgaW50KX07IGNvbXB1dGVzXG4gICAqIHRoZSB0b3RhbCB3aWR0aCBvZlxuICAgKiBhIGZpbmRlciBwYXR0ZXJuIGJ5IGxvb2tpbmcgZm9yIGEgYmxhY2std2hpdGUtYmxhY2sgcnVuIGZyb20gdGhlIGNlbnRlclxuICAgKiBpbiB0aGUgZGlyZWN0aW9uXG4gICAqIG9mIGFub3RoZXIgcG9pbnQgKGFub3RoZXIgZmluZGVyIHBhdHRlcm4gY2VudGVyKSwgYW5kIGluIHRoZSBvcHBvc2l0ZVxuICAgKiBkaXJlY3Rpb24gdG9vLjwvcD5cbiAgICovXG4gIHByby5zaXplT2ZCbGFja1doaXRlQmxhY2tSdW5Cb3RoV2F5cyA9IGZ1bmN0aW9uKGZyb21YLCBmcm9tWSwgdG9YLCB0b1kpIHtcblxuICAgIHZhciByZXN1bHQgPSB0aGlzLnNpemVPZkJsYWNrV2hpdGVCbGFja1J1bihmcm9tWCwgZnJvbVksIHRvWCwgdG9ZKTtcblxuICAgIC8vIE5vdyBjb3VudCBvdGhlciB3YXkgLS0gZG9uJ3QgcnVuIG9mZiBpbWFnZSB0aG91Z2ggb2YgY291cnNlXG4gICAgdmFyIHNjYWxlID0gMS4wO1xuICAgIHZhciBvdGhlclRvWCA9IGZyb21YIC0gKHRvWCAtIGZyb21YKTtcbiAgICBpZiAob3RoZXJUb1ggPCAwKSB7XG4gICAgICBzY2FsZSA9IGZyb21YIC8gKGZyb21YIC0gb3RoZXJUb1gpO1xuICAgICAgb3RoZXJUb1ggPSAwO1xuICAgIH0gZWxzZSBpZiAob3RoZXJUb1ggPj0gdGhpcy5pbWFnZS53aWR0aCkge1xuICAgICAgc2NhbGUgPSAodGhpcy5pbWFnZS53aWR0aCAtIDEgLSBmcm9tWCkgLyAob3RoZXJUb1ggLSBmcm9tWCk7XG4gICAgICBvdGhlclRvWCA9IHRoaXMuaW1hZ2Uud2lkdGggLSAxO1xuICAgIH1cbiAgICB2YXIgb3RoZXJUb1kgPSBNYXRoLmZsb29yKGZyb21ZIC0gKHRvWSAtIGZyb21ZKSAqIHNjYWxlKTtcblxuICAgIHNjYWxlID0gMS4wO1xuICAgIGlmIChvdGhlclRvWSA8IDApIHtcbiAgICAgIHNjYWxlID0gZnJvbVkgLyAoZnJvbVkgLSBvdGhlclRvWSk7XG4gICAgICBvdGhlclRvWSA9IDA7XG4gICAgfSBlbHNlIGlmIChvdGhlclRvWSA+PSB0aGlzLmltYWdlLmhlaWdodCkge1xuICAgICAgc2NhbGUgPSAodGhpcy5pbWFnZS5oZWlnaHQgLSAxIC0gZnJvbVkpIC8gKG90aGVyVG9ZIC0gZnJvbVkpO1xuICAgICAgb3RoZXJUb1kgPSB0aGlzLmltYWdlLmhlaWdodCAtIDE7XG4gICAgfVxuICAgIG90aGVyVG9YID0gTWF0aC5mbG9vcihmcm9tWCArIChvdGhlclRvWCAtIGZyb21YKSAqIHNjYWxlKTtcblxuICAgIHJlc3VsdCArPSB0aGlzLnNpemVPZkJsYWNrV2hpdGVCbGFja1J1bihmcm9tWCwgZnJvbVksIG90aGVyVG9YLCBvdGhlclRvWSk7XG4gICAgcmV0dXJuIHJlc3VsdCAtIDEuMDsgLy8gLTEgYmVjYXVzZSB3ZSBjb3VudGVkIHRoZSBtaWRkbGUgcGl4ZWwgdHdpY2VcbiAgfTtcblxuICAvKipcbiAgICogPHA+RXN0aW1hdGVzIG1vZHVsZSBzaXplIGJhc2VkIG9uIHR3byBmaW5kZXIgcGF0dGVybnMgLS0gaXQgdXNlc1xuICAgKiB7QGxpbmsgI3NpemVPZkJsYWNrV2hpdGVCbGFja1J1bkJvdGhXYXlzKGludCwgaW50LCBpbnQsIGludCl9IHRvXG4gICAqIGZpZ3VyZSB0aGVcbiAgICogd2lkdGggb2YgZWFjaCwgbWVhc3VyaW5nIGFsb25nIHRoZSBheGlzIGJldHdlZW4gdGhlaXIgY2VudGVycy48L3A+XG4gICAqL1xuICBwcm8uY2FsY3VsYXRlTW9kdWxlU2l6ZU9uZVdheSA9IGZ1bmN0aW9uKHBhdHRlcm4sIG90aGVyUGF0dGVybikge1xuICAgIHZhciBtb2R1bGVTaXplRXN0MSA9IHRoaXMuc2l6ZU9mQmxhY2tXaGl0ZUJsYWNrUnVuQm90aFdheXMoXG4gICAgICBNYXRoLmZsb29yKHBhdHRlcm4ueCksXG4gICAgICBNYXRoLmZsb29yKHBhdHRlcm4ueSksIE1hdGguZmxvb3Iob3RoZXJQYXR0ZXJuLngpLFxuICAgICAgTWF0aC5mbG9vcihvdGhlclBhdHRlcm4ueSkpO1xuICAgIHZhciBtb2R1bGVTaXplRXN0MiA9IHRoaXMuc2l6ZU9mQmxhY2tXaGl0ZUJsYWNrUnVuQm90aFdheXMoXG4gICAgICBNYXRoLmZsb29yKG90aGVyUGF0dGVybi54KSxcbiAgICAgIE1hdGguZmxvb3Iob3RoZXJQYXR0ZXJuLnkpLCBNYXRoLmZsb29yKHBhdHRlcm4ueCksXG4gICAgICBNYXRoLmZsb29yKHBhdHRlcm4ueSkpO1xuICAgIGlmIChpc05hTihtb2R1bGVTaXplRXN0MSkpIHtcbiAgICAgIHJldHVybiBtb2R1bGVTaXplRXN0MiAvIDcuMDtcbiAgICB9XG4gICAgaWYgKGlzTmFOKG1vZHVsZVNpemVFc3QyKSkge1xuICAgICAgcmV0dXJuIG1vZHVsZVNpemVFc3QxIC8gNy4wO1xuICAgIH1cbiAgICAvLyBBdmVyYWdlIHRoZW0sIGFuZCBkaXZpZGUgYnkgNyBzaW5jZSB3ZSd2ZSBjb3VudGVkIHRoZSB3aWR0aCBvZiAzIGJsYWNrXG4gICAgLy8gbW9kdWxlcywgYW5kIDEgd2hpdGUgYW5kIDEgYmxhY2sgbW9kdWxlIG9uIGVpdGhlciBzaWRlLiBFcmdvLCBkaXZpZGUgc3VtXG4gICAgLy8gYnkgMTQuXG4gICAgcmV0dXJuIChtb2R1bGVTaXplRXN0MSArIG1vZHVsZVNpemVFc3QyKSAvIDE0LjA7XG4gIH07XG5cbiAgLyoqXG4gICAqIDxwPkNvbXB1dGVzIGFuIGF2ZXJhZ2UgZXN0aW1hdGVkIG1vZHVsZSBzaXplIGJhc2VkIG9uIGVzdGltYXRlZCBkZXJpdmVkXG4gICAqIGZyb20gdGhlIHBvc2l0aW9ucyBvZiB0aGUgdGhyZWUgZmluZGVyIHBhdHRlcm5zLjwvcD5cbiAgICovXG4gIHByby5jYWxjdWxhdGVNb2R1bGVTaXplID0gZnVuY3Rpb24odG9wTGVmdCwgdG9wUmlnaHQsIGJvdHRvbUxlZnQpIHtcbiAgICAvLyBUYWtlIHRoZSBhdmVyYWdlXG4gICAgcmV0dXJuICh0aGlzLmNhbGN1bGF0ZU1vZHVsZVNpemVPbmVXYXkodG9wTGVmdCxcbiAgICAgIHRvcFJpZ2h0KSArIHRoaXMuY2FsY3VsYXRlTW9kdWxlU2l6ZU9uZVdheSh0b3BMZWZ0LCBib3R0b21MZWZ0KSkgLyAyLjA7XG4gIH07XG5cbiAgcHJvLmRpc3RhbmNlID0gZnVuY3Rpb24ocGF0dGVybjEsIHBhdHRlcm4yKSB7XG4gICAgdmFyIHhEaWZmID0gcGF0dGVybjEueCAtIHBhdHRlcm4yLng7XG4gICAgdmFyIHlEaWZmID0gcGF0dGVybjEueSAtIHBhdHRlcm4yLnk7XG4gICAgcmV0dXJuIE1hdGguc3FydCgoeERpZmYgKiB4RGlmZiArIHlEaWZmICogeURpZmYpKTtcbiAgfTtcblxuICBwcm8uY29tcHV0ZURpbWVuc2lvbiA9IGZ1bmN0aW9uKHRvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBtb2R1bGVTaXplKSB7XG5cbiAgICB2YXIgdGx0ckNlbnRlcnNEaW1lbnNpb24gPSB0aGlzLmRpc3RhbmNlKHRvcExlZnQsXG4gICAgICB0b3BSaWdodCkgLyBtb2R1bGVTaXplO1xuICAgIHZhciB0bGJsQ2VudGVyc0RpbWVuc2lvbiA9IHRoaXMuZGlzdGFuY2UodG9wTGVmdCxcbiAgICAgIGJvdHRvbUxlZnQpIC8gbW9kdWxlU2l6ZTtcbiAgICB2YXIgZGltZW5zaW9uID0gTWF0aC5yb3VuZCgoXG4gICAgICB0bHRyQ2VudGVyc0RpbWVuc2lvbiArIHRsYmxDZW50ZXJzRGltZW5zaW9uKSAvIDIpICsgNztcbiAgICBzd2l0Y2ggKGRpbWVuc2lvbiAlIDQpIHtcbiAgICAgIC8vIG1vZCA0XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGRpbWVuc2lvbisrO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIDE/IGRvIG5vdGhpbmdcblxuICAgICAgY2FzZSAyOlxuICAgICAgICBkaW1lbnNpb24tLTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgLy8gd291bGQgaXQgYmUgYmV0dGVyIHRvIGRvIHNvbWV0aGluZyBsaWtlIGRpbWVuc2lvbiArPSAyOyA/XG4gICAgICAgIC8vIHRocm93IG5ldyBOb3RGb3VuZEVycm9yKCk7XG4gICAgICAgIGRpbWVuc2lvbiArPSAyO1xuICAgIH1cbiAgICAvLyBTb21ldGltZXMgZGltZW5zaW9uIGlzIDE3IC0gd2hpY2ggaXMgaW52YWxpZC4gV2h5P1xuICAgIHJldHVybiBkaW1lbnNpb247XG4gIH07XG5cbiAgLyoqXG4gICAqIDxwPkF0dGVtcHRzIHRvIGxvY2F0ZSBhbiBhbGlnbm1lbnQgcGF0dGVybiBpbiBhIGxpbWl0ZWQgcmVnaW9uIG9mIHRoZVxuICAgKiBpbWFnZSwgd2hpY2ggaXNcbiAgICogZ3Vlc3NlZCB0byBjb250YWluIGl0LiBUaGlzIG1ldGhvZCB1c2VzIHtAbGluayBBbGlnbm1lbnRQYXR0ZXJufS48L3A+XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvdmVyYWxsRXN0TW9kdWxlU2l6ZSBlc3RpbWF0ZWQgbW9kdWxlIHNpemUgc28gZmFyLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZXN0QWxpZ25tZW50WCB4IGNvb3JkaW5hdGUgb2YgY2VudGVyIG9mIGFyZWEgcHJvYmFibHlcbiAgICogY29udGFpbmluZyBhbGlnbm1lbnQgcGF0dGVybi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGVzdEFsaWdubWVudFkgeSBjb29yZGluYXRlIG9mIGFib3ZlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYWxsb3dhbmNlRmFjdG9yIG51bWJlciBvZiBwaXhlbHMgaW4gYWxsIGRpcmVjdGlvbnMgdG9cbiAgICogc2VhcmNoIGZyb20gdGhlIGNlbnRlci5cbiAgICogQHJldHVybiB7QWxpZ25tZW50UGF0dGVybn0gaWYgZm91bmQsIG9yIG51bGwgb3RoZXJ3aXNlLlxuICAgKi9cbiAgcHJvLmZpbmRBbGlnbm1lbnRJblJlZ2lvbiA9IGZ1bmN0aW9uKG92ZXJhbGxFc3RNb2R1bGVTaXplLCBlc3RBbGlnbm1lbnRYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXN0QWxpZ25tZW50WSwgYWxsb3dhbmNlRmFjdG9yKSB7XG4gICAgLy8gTG9vayBmb3IgYW4gYWxpZ25tZW50IHBhdHRlcm4gKDMgbW9kdWxlcyBpbiBzaXplKSBhcm91bmQgd2hlcmUgaXRcbiAgICAvLyBzaG91bGQgYmVcbiAgICB2YXIgYWxsb3dhbmNlID0gTWF0aC5mbG9vcihhbGxvd2FuY2VGYWN0b3IgKiBvdmVyYWxsRXN0TW9kdWxlU2l6ZSk7XG4gICAgdmFyIGFsaWdubWVudEFyZWFMZWZ0WCA9IE1hdGgubWF4KDAsIGVzdEFsaWdubWVudFggLSBhbGxvd2FuY2UpO1xuICAgIHZhciBhbGlnbm1lbnRBcmVhUmlnaHRYID0gTWF0aC5taW4odGhpcy5pbWFnZS53aWR0aCAtIDEsXG4gICAgICBlc3RBbGlnbm1lbnRYICsgYWxsb3dhbmNlKTtcbiAgICBpZiAoYWxpZ25tZW50QXJlYVJpZ2h0WCAtIGFsaWdubWVudEFyZWFMZWZ0WCA8XG4gICAgICBvdmVyYWxsRXN0TW9kdWxlU2l6ZSAqIDMpIHtcbiAgICAgIHRocm93IG5ldyBOb3RGb3VuZEVycm9yKCk7XG4gICAgfVxuXG4gICAgdmFyIGFsaWdubWVudEFyZWFUb3BZID0gTWF0aC5tYXgoMCwgZXN0QWxpZ25tZW50WSAtIGFsbG93YW5jZSk7XG4gICAgdmFyIGFsaWdubWVudEFyZWFCb3R0b21ZID0gTWF0aC5taW4odGhpcy5pbWFnZS5oZWlnaHQgLSAxLFxuICAgICAgZXN0QWxpZ25tZW50WSArIGFsbG93YW5jZSk7XG5cbiAgICB2YXIgYWxpZ25tZW50RmluZGVyID0gbmV3IHc2OWIucXIuQWxpZ25tZW50UGF0dGVybkZpbmRlcih0aGlzLmltYWdlLFxuICAgICAgYWxpZ25tZW50QXJlYUxlZnRYLCBhbGlnbm1lbnRBcmVhVG9wWSxcbiAgICAgIGFsaWdubWVudEFyZWFSaWdodFggLSBhbGlnbm1lbnRBcmVhTGVmdFgsXG4gICAgICBhbGlnbm1lbnRBcmVhQm90dG9tWSAtIGFsaWdubWVudEFyZWFUb3BZLCBvdmVyYWxsRXN0TW9kdWxlU2l6ZSxcbiAgICAgIHRoaXMucmVzdWx0UG9pbnRDYWxsYmFjayk7XG4gICAgcmV0dXJuIGFsaWdubWVudEZpbmRlci5maW5kKCk7XG4gIH07XG5cbiAgcHJvLmNyZWF0ZVRyYW5zZm9ybSA9IGZ1bmN0aW9uKHRvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50UGF0dGVybiwgZGltZW5zaW9uKSB7XG4gICAgdmFyIGRpbU1pbnVzVGhyZWUgPSBkaW1lbnNpb24gLSAzLjU7XG4gICAgdmFyIGJvdHRvbVJpZ2h0WDtcbiAgICB2YXIgYm90dG9tUmlnaHRZO1xuICAgIHZhciBzb3VyY2VCb3R0b21SaWdodFg7XG4gICAgdmFyIHNvdXJjZUJvdHRvbVJpZ2h0WTtcbiAgICBpZiAoYWxpZ25tZW50UGF0dGVybiAhPSBudWxsKSB7XG4gICAgICBib3R0b21SaWdodFggPSBhbGlnbm1lbnRQYXR0ZXJuLng7XG4gICAgICBib3R0b21SaWdodFkgPSBhbGlnbm1lbnRQYXR0ZXJuLnk7XG4gICAgICBzb3VyY2VCb3R0b21SaWdodFggPSBzb3VyY2VCb3R0b21SaWdodFkgPSBkaW1NaW51c1RocmVlIC0gMy4wO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBEb24ndCBoYXZlIGFuIGFsaWdubWVudCBwYXR0ZXJuLCBqdXN0IG1ha2UgdXAgdGhlIGJvdHRvbS1yaWdodCBwb2ludFxuICAgICAgYm90dG9tUmlnaHRYID0gKHRvcFJpZ2h0LnggLSB0b3BMZWZ0LngpICsgYm90dG9tTGVmdC54O1xuICAgICAgYm90dG9tUmlnaHRZID0gKHRvcFJpZ2h0LnkgLSB0b3BMZWZ0LnkpICsgYm90dG9tTGVmdC55O1xuICAgICAgc291cmNlQm90dG9tUmlnaHRYID0gc291cmNlQm90dG9tUmlnaHRZID0gZGltTWludXNUaHJlZTtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNmb3JtID0gUGVyc3BlY3RpdmVUcmFuc2Zvcm0ucXVhZHJpbGF0ZXJhbFRvUXVhZHJpbGF0ZXJhbCgzLjUsXG4gICAgICAzLjUsXG4gICAgICBkaW1NaW51c1RocmVlLCAzLjUsIHNvdXJjZUJvdHRvbVJpZ2h0WCwgc291cmNlQm90dG9tUmlnaHRZLCAzLjUsXG4gICAgICBkaW1NaW51c1RocmVlLCB0b3BMZWZ0LngsIHRvcExlZnQueSwgdG9wUmlnaHQueCwgdG9wUmlnaHQueSxcbiAgICAgIGJvdHRvbVJpZ2h0WCxcbiAgICAgIGJvdHRvbVJpZ2h0WSwgYm90dG9tTGVmdC54LCBib3R0b21MZWZ0LnkpO1xuXG4gICAgcmV0dXJuIHRyYW5zZm9ybTtcbiAgfTtcblxuICBwcm8uc2FtcGxlR3JpZCA9IGZ1bmN0aW9uKGltYWdlLCB0cmFuc2Zvcm0sIGRpbWVuc2lvbikge1xuICAgIHZhciBzYW1wbGVyID0gdzY5Yi5xci5HcmlkU2FtcGxlci5nZXRJbnN0YW5jZSgpO1xuICAgIHJldHVybiBzYW1wbGVyLnNhbXBsZUdyaWRUcmFuc2Zvcm0oaW1hZ2UsIGRpbWVuc2lvbiwgZGltZW5zaW9uLCB0cmFuc2Zvcm0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUT0RPLlxuICAgKiBAcGFyYW0ge3c2OWIucXIuRmluZGVyUGF0dGVybkluZm99IGluZm8gaW5mby5cbiAgICogQHJldHVybiB7IXc2OWIucXIuRGV0ZWN0b3JSZXN1bHR9IHJlc3VsdC5cbiAgICovXG4gIHByby5wcm9jZXNzRmluZGVyUGF0dGVybkluZm8gPSBmdW5jdGlvbihpbmZvKSB7XG5cbiAgICB2YXIgdG9wTGVmdCA9IGluZm8udG9wTGVmdDtcbiAgICB2YXIgdG9wUmlnaHQgPSBpbmZvLnRvcFJpZ2h0O1xuICAgIHZhciBib3R0b21MZWZ0ID0gaW5mby5ib3R0b21MZWZ0O1xuXG4gICAgdmFyIG1vZHVsZVNpemUgPSB0aGlzLmNhbGN1bGF0ZU1vZHVsZVNpemUodG9wTGVmdCwgdG9wUmlnaHQsIGJvdHRvbUxlZnQpO1xuICAgIGlmIChtb2R1bGVTaXplIDwgMS4wKSB7XG4gICAgICB0aHJvdyBuZXcgTm90Rm91bmRFcnJvcigpO1xuICAgIH1cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5jb21wdXRlRGltZW5zaW9uKHRvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LFxuICAgICAgbW9kdWxlU2l6ZSk7XG4gICAgdmFyIHByb3Zpc2lvbmFsVmVyc2lvbiA9IFZlcnNpb24uZ2V0UHJvdmlzaW9uYWxWZXJzaW9uRm9yRGltZW5zaW9uKFxuICAgICAgZGltZW5zaW9uKTtcbiAgICB2YXIgbW9kdWxlc0JldHdlZW5GUENlbnRlcnMgPVxuICAgICAgcHJvdmlzaW9uYWxWZXJzaW9uLmdldERpbWVuc2lvbkZvclZlcnNpb24oKSAtIDc7XG5cbiAgICB2YXIgYWxpZ25tZW50UGF0dGVybiA9IG51bGw7XG4gICAgLy8gQW55dGhpbmcgYWJvdmUgdmVyc2lvbiAxIGhhcyBhbiBhbGlnbm1lbnQgcGF0dGVyblxuICAgIGlmIChwcm92aXNpb25hbFZlcnNpb24uYWxpZ25tZW50UGF0dGVybkNlbnRlcnMubGVuZ3RoID4gMCkge1xuXG4gICAgICAvLyBHdWVzcyB3aGVyZSBhIFwiYm90dG9tIHJpZ2h0XCIgZmluZGVyIHBhdHRlcm4gd291bGQgaGF2ZSBiZWVuXG4gICAgICB2YXIgYm90dG9tUmlnaHRYID0gdG9wUmlnaHQueCAtIHRvcExlZnQueCArIGJvdHRvbUxlZnQueDtcbiAgICAgIHZhciBib3R0b21SaWdodFkgPSB0b3BSaWdodC55IC0gdG9wTGVmdC55ICsgYm90dG9tTGVmdC55O1xuXG4gICAgICAvLyBFc3RpbWF0ZSB0aGF0IGFsaWdubWVudCBwYXR0ZXJuIGlzIGNsb3NlciBieSAzIG1vZHVsZXNcbiAgICAgIC8vIGZyb20gXCJib3R0b20gcmlnaHRcIiB0byBrbm93biB0b3AgbGVmdCBsb2NhdGlvblxuICAgICAgdmFyIGNvcnJlY3Rpb25Ub1RvcExlZnQgPSAxLjAgLSAzLjAgLyBtb2R1bGVzQmV0d2VlbkZQQ2VudGVycztcbiAgICAgIHZhciBlc3RBbGlnbm1lbnRYID0gTWF0aC5mbG9vcih0b3BMZWZ0LnggK1xuICAgICAgICBjb3JyZWN0aW9uVG9Ub3BMZWZ0ICogKGJvdHRvbVJpZ2h0WCAtIHRvcExlZnQueCkpO1xuICAgICAgdmFyIGVzdEFsaWdubWVudFkgPSBNYXRoLmZsb29yKHRvcExlZnQueSArXG4gICAgICAgIGNvcnJlY3Rpb25Ub1RvcExlZnQgKiAoYm90dG9tUmlnaHRZIC0gdG9wTGVmdC55KSk7XG5cbiAgICAgIC8vIEtpbmQgb2YgYXJiaXRyYXJ5IC0tIGV4cGFuZCBzZWFyY2ggcmFkaXVzIGJlZm9yZSBnaXZpbmcgdXBcbiAgICAgIGZvciAodmFyIGkgPSA0OyBpIDw9IDE2OyBpICo9IDIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhbGlnbm1lbnRQYXR0ZXJuID1cbiAgICAgICAgICAgIHRoaXMuZmluZEFsaWdubWVudEluUmVnaW9uKG1vZHVsZVNpemUsIGVzdEFsaWdubWVudFgsXG4gICAgICAgICAgICAgIGVzdEFsaWdubWVudFksIGkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBOb3RGb3VuZEVycm9yKSlcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAvLyB0cnkgbmV4dCByb3VuZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBJZiB3ZSBkaWRuJ3QgZmluZCBhbGlnbm1lbnQgcGF0dGVybi4uLiB3ZWxsIHRyeSBhbnl3YXkgd2l0aG91dCBpdFxuICAgIH1cblxuICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLmNyZWF0ZVRyYW5zZm9ybSh0b3BMZWZ0LCB0b3BSaWdodCwgYm90dG9tTGVmdCxcbiAgICAgIGFsaWdubWVudFBhdHRlcm4sIGRpbWVuc2lvbik7XG5cbiAgICB2YXIgYml0cyA9IHRoaXMuc2FtcGxlR3JpZCh0aGlzLmltYWdlLCB0cmFuc2Zvcm0sIGRpbWVuc2lvbik7XG5cbiAgICB2YXIgcG9pbnRzO1xuICAgIGlmIChhbGlnbm1lbnRQYXR0ZXJuID09IG51bGwpIHtcbiAgICAgIHBvaW50cyA9IFtib3R0b21MZWZ0LCB0b3BMZWZ0LCB0b3BSaWdodF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50cyA9IFtib3R0b21MZWZ0LCB0b3BMZWZ0LCB0b3BSaWdodCwgYWxpZ25tZW50UGF0dGVybl07XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGV0ZWN0b3JSZXN1bHQoYml0cywgcG9pbnRzKTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshdzY5Yi5xci5EZXRlY3RvclJlc3VsdH0gcmVzdWx0LlxuICAgKi9cbiAgcHJvLmRldGVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmZvID0gbmV3IHc2OWIucXIuRmluZGVyUGF0dGVybkZpbmRlcih0aGlzLmltYWdlLFxuICAgICAgdGhpcy5yZXN1bHRQb2ludENhbGxiYWNrKS5maW5kKCk7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc0ZpbmRlclBhdHRlcm5JbmZvKGluZm8pO1xuICB9O1xufSk7XG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG4vKlxuICpcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5xci5FcnJvckNvcnJlY3Rpb25MZXZlbCcpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogU2VlIElTTyAxODAwNDoyMDA2LCA2LjUuMS4gVGhpcyBlbnVtIGVuY2Fwc3VsYXRlcyB0aGUgZm91ciBlcnJvclxuICAgKiBjb3JyZWN0aW9uIGxldmVscyBkZWZpbmVkIGJ5IHRoZSBRUiBjb2RlIHN0YW5kYXJkLlxuICAgKlxuICAgKiBAYXV0aG9yIFNlYW4gT3dlblxuICAgKiBAYXV0aG9yIG1iQHc2OWIuY29tIChNYW51ZWwgQnJhdW4pXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdzY5Yi5xci5FcnJvckNvcnJlY3Rpb25MZXZlbCA9IGZ1bmN0aW9uKG9yZGluYWwsIGJpdHMsIG5hbWUpIHtcbiAgICB0aGlzLm9yZGluYWwgPSBvcmRpbmFsO1xuICAgIHRoaXMuYml0cyA9IGJpdHM7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgfTtcbiAgdmFyIEVycm9yQ29ycmVjdGlvbkxldmVsID0gdzY5Yi5xci5FcnJvckNvcnJlY3Rpb25MZXZlbDtcblxuICBFcnJvckNvcnJlY3Rpb25MZXZlbC5MID0gbmV3IEVycm9yQ29ycmVjdGlvbkxldmVsKDAsIDB4MDEsICdMJyk7XG4gIEVycm9yQ29ycmVjdGlvbkxldmVsLk0gPSBuZXcgRXJyb3JDb3JyZWN0aW9uTGV2ZWwoMSwgMHgwMCwgJ00nKTtcbiAgRXJyb3JDb3JyZWN0aW9uTGV2ZWwuUSA9IG5ldyBFcnJvckNvcnJlY3Rpb25MZXZlbCgyLCAweDAzLCAnUScpO1xuICBFcnJvckNvcnJlY3Rpb25MZXZlbC5IID0gbmV3IEVycm9yQ29ycmVjdGlvbkxldmVsKDMsIDB4MDIsICdIJyk7XG4gIEVycm9yQ29ycmVjdGlvbkxldmVsLkZPUl9CSVRTID0gW1xuICAgIEVycm9yQ29ycmVjdGlvbkxldmVsLk0sXG4gICAgRXJyb3JDb3JyZWN0aW9uTGV2ZWwuTCxcbiAgICBFcnJvckNvcnJlY3Rpb25MZXZlbC5ILFxuICAgIEVycm9yQ29ycmVjdGlvbkxldmVsLlFdO1xuXG4gIC8qKlxuICAgKiBnZXQgYnkgbmFtZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgb25lIG9mICdMJywgJ00nLCAnUScsICdIJzsuXG4gICAqIEByZXR1cm4ge0Vycm9yQ29ycmVjdGlvbkxldmVsfSBlYyBsZXZlbCBvciBudWxsIGlmIG5hbWUgaXMgaW52YWxpZC5cbiAgICovXG4gIEVycm9yQ29ycmVjdGlvbkxldmVsLmdldEJ5TmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWFwID0geydMJzogRXJyb3JDb3JyZWN0aW9uTGV2ZWwuTCxcbiAgICAgICdNJzogRXJyb3JDb3JyZWN0aW9uTGV2ZWwuTSxcbiAgICAgICdRJzogRXJyb3JDb3JyZWN0aW9uTGV2ZWwuUSxcbiAgICAgICdIJzogRXJyb3JDb3JyZWN0aW9uTGV2ZWwuSH07XG4gICAgaWYgKG1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgcmV0dXJuIG1hcFtuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG4gIHZhciBwcm8gPSBFcnJvckNvcnJlY3Rpb25MZXZlbC5wcm90b3R5cGU7XG5cbiAgcHJvLmdldEJpdHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5iaXRzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGRlYnVnIHN0cmluZy5cbiAgICovXG4gIHByby50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRzIGludCBjb250YWluaW5nIHRoZSB0d28gYml0cyBlbmNvZGluZyBhIFFSIENvZGUnc1xuICAgKiBlcnJvciBjb3JyZWN0aW9uIGxldmVsLlxuICAgKiBAcmV0dXJuIHshRXJyb3JDb3JyZWN0aW9uTGV2ZWx9IHJlcHJlc2VudGluZyB0aGUgZW5jb2RlZCBlcnJvclxuICAgKiBjb3JyZWN0aW9uIGxldmVsLlxuICAgKi9cbiAgRXJyb3JDb3JyZWN0aW9uTGV2ZWwuZm9yQml0cyA9IGZ1bmN0aW9uKGJpdHMpIHtcbiAgICBpZiAoYml0cyA8IDAgfHwgYml0cyA+PSBFcnJvckNvcnJlY3Rpb25MZXZlbC5GT1JfQklUUy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gRXJyb3JDb3JyZWN0aW9uTGV2ZWwuRk9SX0JJVFNbYml0c107XG4gIH07XG59KTtcbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gUG9ydGVkIHRvIEphdmFTY3JpcHQgYnkgTGF6YXIgTGFzemxvIDIwMTFcblxuIGxhemFyc29mdEBnbWFpbC5jb20sIHd3dy5sYXphcnNvZnQuaW5mb1xuXG4gKi9cblxuLypcbiAqXG4gKiBDb3B5cmlnaHQgMjAwNyBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZ29vZy5wcm92aWRlKCd3NjliLnFyLkZvcm1hdEluZm9ybWF0aW9uJyk7XG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuVVJTaGlmdCcpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkVycm9yQ29ycmVjdGlvbkxldmVsJyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG5cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciB0b2RvLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYml0cyB0b2RvLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHRvZG8uXG4gICAqL1xuICB3NjliLnFyLlVSU2hpZnQgPSBmdW5jdGlvbihudW1iZXIsIGJpdHMpIHtcbiAgICBpZiAobnVtYmVyID49IDApXG4gICAgICByZXR1cm4gbnVtYmVyID4+IGJpdHM7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIChudW1iZXIgPj4gYml0cykgKyAoMiA8PCB+Yml0cyk7XG4gIH07XG4gIHZhciBVUlNoaWZ0ID0gdzY5Yi5xci5VUlNoaWZ0O1xuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmb3JtYXRJbmZvIGZvcm1hdCBpbmZvcm1hdGlvbi5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB3NjliLnFyLkZvcm1hdEluZm9ybWF0aW9uID0gZnVuY3Rpb24oZm9ybWF0SW5mbykge1xuICAgIHRoaXMuZXJyb3JDb3JyZWN0aW9uTGV2ZWwgPVxuICAgICAgdzY5Yi5xci5FcnJvckNvcnJlY3Rpb25MZXZlbC5mb3JCaXRzKChmb3JtYXRJbmZvID4+IDMpICYgMHgwMyk7XG4gICAgdGhpcy5kYXRhTWFzayA9IChmb3JtYXRJbmZvICYgMHgwNyk7XG4gIH07XG4gIHZhciBGb3JtYXRJbmZvcm1hdGlvbiA9IHc2OWIucXIuRm9ybWF0SW5mb3JtYXRpb247XG4gIHZhciBwcm8gPSBGb3JtYXRJbmZvcm1hdGlvbi5wcm90b3R5cGU7XG5cbiAgRm9ybWF0SW5mb3JtYXRpb24uRk9STUFUX0lORk9fTUFTS19RUiA9IDB4NTQxMjtcbiAgRm9ybWF0SW5mb3JtYXRpb24uRk9STUFUX0lORk9fREVDT0RFX0xPT0tVUCA9IFtcbiAgICBbMHg1NDEyLCAweDAwXSxcbiAgICBbMHg1MTI1LCAweDAxXSxcbiAgICBbMHg1RTdDLCAweDAyXSxcbiAgICBbMHg1QjRCLCAweDAzXSxcbiAgICBbMHg0NUY5LCAweDA0XSxcbiAgICBbMHg0MENFLCAweDA1XSxcbiAgICBbMHg0Rjk3LCAweDA2XSxcbiAgICBbMHg0QUEwLCAweDA3XSxcbiAgICBbMHg3N0M0LCAweDA4XSxcbiAgICBbMHg3MkYzLCAweDA5XSxcbiAgICBbMHg3REFBLCAweDBBXSxcbiAgICBbMHg3ODlELCAweDBCXSxcbiAgICBbMHg2NjJGLCAweDBDXSxcbiAgICBbMHg2MzE4LCAweDBEXSxcbiAgICBbMHg2QzQxLCAweDBFXSxcbiAgICBbMHg2OTc2LCAweDBGXSxcbiAgICBbMHgxNjg5LCAweDEwXSxcbiAgICBbMHgxM0JFLCAweDExXSxcbiAgICBbMHgxQ0U3LCAweDEyXSxcbiAgICBbMHgxOUQwLCAweDEzXSxcbiAgICBbMHgwNzYyLCAweDE0XSxcbiAgICBbMHgwMjU1LCAweDE1XSxcbiAgICBbMHgwRDBDLCAweDE2XSxcbiAgICBbMHgwODNCLCAweDE3XSxcbiAgICBbMHgzNTVGLCAweDE4XSxcbiAgICBbMHgzMDY4LCAweDE5XSxcbiAgICBbMHgzRjMxLCAweDFBXSxcbiAgICBbMHgzQTA2LCAweDFCXSxcbiAgICBbMHgyNEI0LCAweDFDXSxcbiAgICBbMHgyMTgzLCAweDFEXSxcbiAgICBbMHgyRURBLCAweDFFXSxcbiAgICBbMHgyQkVELCAweDFGXVxuICBdO1xuXG4gIC8qKlxuICAgKiBPZmZzZXQgaSBob2xkcyB0aGUgbnVtYmVyIG9mIDEgYml0cyBpbiB0aGUgYmluYXJ5IHJlcHJlc2VudGF0aW9uIG9mIGlcbiAgICovXG4gIEZvcm1hdEluZm9ybWF0aW9uLkJJVFNfU0VUX0lOX0hBTEZfQllURSA9IFswLCAxLCAxLCAyLCAxLCAyLCAyLCAzLFxuICAgIDEsIDIsIDIsIDMsIDIsIDMsIDMsIDRdO1xuXG4gIHByby5HZXRIYXNoQ29kZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAodGhpcy5lcnJvckNvcnJlY3Rpb25MZXZlbC5vcmRpbmFsIDw8IDMpIHwgdGhpcy5kYXRhTWFzaztcbiAgfTtcblxuICBwcm8uRXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5lcnJvckNvcnJlY3Rpb25MZXZlbCA9PSBvdGhlci5lcnJvckNvcnJlY3Rpb25MZXZlbCAmJlxuICAgICAgdGhpcy5kYXRhTWFzayA9PSBvdGhlci5kYXRhTWFzaztcbiAgfTtcblxuICBGb3JtYXRJbmZvcm1hdGlvbi5udW1CaXRzRGlmZmVyaW5nID0gZnVuY3Rpb24oYSwgYikge1xuICAgIGEgXj0gYjsgLy8gYSBub3cgaGFzIGEgMSBiaXQgZXhhY3RseSB3aGVyZSBpdHMgYml0IGRpZmZlcnMgd2l0aCBiJ3NcbiAgICAvLyBDb3VudCBiaXRzIHNldCBxdWlja2x5IHdpdGggYSBzZXJpZXMgb2YgbG9va3VwczpcbiAgICByZXR1cm4gRm9ybWF0SW5mb3JtYXRpb24uQklUU19TRVRfSU5fSEFMRl9CWVRFW2EgJiAweDBGXSArXG4gICAgICBGb3JtYXRJbmZvcm1hdGlvbi5CSVRTX1NFVF9JTl9IQUxGX0JZVEVbKFVSU2hpZnQoYSwgNCkgJiAweDBGKV0gK1xuICAgICAgRm9ybWF0SW5mb3JtYXRpb24uQklUU19TRVRfSU5fSEFMRl9CWVRFWyhVUlNoaWZ0KGEsIDgpICYgMHgwRildICtcbiAgICAgIEZvcm1hdEluZm9ybWF0aW9uLkJJVFNfU0VUX0lOX0hBTEZfQllURVsoVVJTaGlmdChhLCAxMikgJiAweDBGKV0gK1xuICAgICAgRm9ybWF0SW5mb3JtYXRpb24uQklUU19TRVRfSU5fSEFMRl9CWVRFWyhVUlNoaWZ0KGEsIDE2KSAmIDB4MEYpXSArXG4gICAgICBGb3JtYXRJbmZvcm1hdGlvbi5CSVRTX1NFVF9JTl9IQUxGX0JZVEVbKFVSU2hpZnQoYSwgMjApICYgMHgwRildICtcbiAgICAgIEZvcm1hdEluZm9ybWF0aW9uLkJJVFNfU0VUX0lOX0hBTEZfQllURVsoVVJTaGlmdChhLCAyNCkgJiAweDBGKV0gK1xuICAgICAgRm9ybWF0SW5mb3JtYXRpb24uQklUU19TRVRfSU5fSEFMRl9CWVRFWyhVUlNoaWZ0KGEsIDI4KSAmIDB4MEYpXTtcbiAgfTtcblxuICBGb3JtYXRJbmZvcm1hdGlvbi5kZWNvZGVGb3JtYXRJbmZvcm1hdGlvbiA9IGZ1bmN0aW9uKG1hc2tlZEZvcm1hdEluZm8pIHtcbiAgICB2YXIgZm9ybWF0SW5mbyA9IEZvcm1hdEluZm9ybWF0aW9uLmRvRGVjb2RlRm9ybWF0SW5mb3JtYXRpb24oXG4gICAgICBtYXNrZWRGb3JtYXRJbmZvKTtcbiAgICBpZiAoZm9ybWF0SW5mbyAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gZm9ybWF0SW5mbztcbiAgICB9XG4gICAgLy8gU2hvdWxkIHJldHVybiBudWxsLCBidXQsIHNvbWUgUVIgY29kZXMgYXBwYXJlbnRseVxuICAgIC8vIGRvIG5vdCBtYXNrIHRoaXMgaW5mby4gVHJ5IGFnYWluIGJ5IGFjdHVhbGx5IG1hc2tpbmcgdGhlIHBhdHRlcm5cbiAgICAvLyBmaXJzdFxuICAgIHJldHVybiBGb3JtYXRJbmZvcm1hdGlvbi5kb0RlY29kZUZvcm1hdEluZm9ybWF0aW9uKG1hc2tlZEZvcm1hdEluZm8gXlxuICAgICAgRm9ybWF0SW5mb3JtYXRpb24uRk9STUFUX0lORk9fTUFTS19RUik7XG4gIH07XG5cbiAgRm9ybWF0SW5mb3JtYXRpb24uZG9EZWNvZGVGb3JtYXRJbmZvcm1hdGlvbiA9IGZ1bmN0aW9uKG1hc2tlZEZvcm1hdEluZm8pIHtcbiAgICAvLyBGaW5kIHRoZSBpbnQgaW4gRk9STUFUX0lORk9fREVDT0RFX0xPT0tVUCB3aXRoIGZld2VzdCBiaXRzIGRpZmZlcmluZ1xuICAgIHZhciBiZXN0RGlmZmVyZW5jZSA9IDB4ZmZmZmZmZmY7XG4gICAgdmFyIGJlc3RGb3JtYXRJbmZvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IEZvcm1hdEluZm9ybWF0aW9uLkZPUk1BVF9JTkZPX0RFQ09ERV9MT09LVVAubGVuZ3RoO1xuICAgICAgICAgaSsrKSB7XG4gICAgICB2YXIgZGVjb2RlSW5mbyA9IEZvcm1hdEluZm9ybWF0aW9uLkZPUk1BVF9JTkZPX0RFQ09ERV9MT09LVVBbaV07XG4gICAgICB2YXIgdGFyZ2V0SW5mbyA9IGRlY29kZUluZm9bMF07XG4gICAgICBpZiAodGFyZ2V0SW5mbyA9PSBtYXNrZWRGb3JtYXRJbmZvKSB7XG4gICAgICAgIC8vIEZvdW5kIGFuIGV4YWN0IG1hdGNoXG4gICAgICAgIHJldHVybiBuZXcgRm9ybWF0SW5mb3JtYXRpb24oZGVjb2RlSW5mb1sxXSk7XG4gICAgICB9XG4gICAgICB2YXIgYml0c0RpZmZlcmVuY2UgPSBGb3JtYXRJbmZvcm1hdGlvbi5udW1CaXRzRGlmZmVyaW5nKFxuICAgICAgICBtYXNrZWRGb3JtYXRJbmZvLCB0YXJnZXRJbmZvKTtcbiAgICAgIGlmIChiaXRzRGlmZmVyZW5jZSA8IGJlc3REaWZmZXJlbmNlKSB7XG4gICAgICAgIGJlc3RGb3JtYXRJbmZvID0gZGVjb2RlSW5mb1sxXTtcbiAgICAgICAgYmVzdERpZmZlcmVuY2UgPSBiaXRzRGlmZmVyZW5jZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gSGFtbWluZyBkaXN0YW5jZSBvZiB0aGUgMzIgbWFza2VkIGNvZGVzIGlzIDcsIGJ5IGNvbnN0cnVjdGlvbixcbiAgICAvLyBzbyA8PSAzIGJpdHMgZGlmZmVyaW5nIG1lYW5zIHdlIGZvdW5kIGEgbWF0Y2hcbiAgICBpZiAoYmVzdERpZmZlcmVuY2UgPD0gMykge1xuICAgICAgcmV0dXJuIG5ldyBGb3JtYXRJbmZvcm1hdGlvbihiZXN0Rm9ybWF0SW5mbyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG59KTtcbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gUG9ydGVkIHRvIEphdmFTY3JpcHQgYnkgTGF6YXIgTGFzemxvIDIwMTFcblxuIGxhemFyc29mdEBnbWFpbC5jb20sIHd3dy5sYXphcnNvZnQuaW5mb1xuXG4gKi9cblxuLypcbiAqXG4gKiBDb3B5cmlnaHQgMjAwNyBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuRGF0YU1hc2snKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5VUlNoaWZ0Jyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIHZhciBVUlNoaWZ0ID0gdzY5Yi5xci5VUlNoaWZ0O1xuXG4gIHZhciBfID0gdzY5Yi5xci5EYXRhTWFzaztcblxuICAvKiogQGludGVyZmFjZSAqL1xuICBfLkRhdGFNYXNrSW50ZXJmYWNlID0gZnVuY3Rpb24oKSB7fTtcblxuICAvKipcbiAgICogQHBhcmFtIHt3NjliLnFyLkJpdE1hdHJpeH0gYml0cyBiaXRzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZGltIGRpbWVuc2lvbnMuXG4gICAqL1xuICBfLkRhdGFNYXNrSW50ZXJmYWNlLnByb3RvdHlwZS51bm1hc2tCaXRNYXRyaXggPSBmdW5jdGlvbihiaXRzLCBkaW0pIHt9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaSBpZHguXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBqIGlkeC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gaWYgcG9zaXRpb24gaXMgbWFza2VkLlxuICAgKi9cbiAgXy5EYXRhTWFza0ludGVyZmFjZS5wcm90b3R5cGUuaXNNYXNrZWQgPSBmdW5jdGlvbihpLCBqKSB7fTtcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gcmVmZXJlbmNlIG1hc2sgbnVtYmVyLlxuICAgKiBAcmV0dXJuIHshXy5EYXRhTWFza0ludGVyZmFjZX0gZGF0YSBtYXNrLlxuICAgKi9cbiAgXy5mb3JSZWZlcmVuY2UgPSBmdW5jdGlvbihyZWZlcmVuY2UpIHtcbiAgICBpZiAocmVmZXJlbmNlIDwgMCB8fCByZWZlcmVuY2UgPiA3KSB7XG4gICAgICB0aHJvdyBFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gXy5EQVRBX01BU0tTX1tyZWZlcmVuY2VdO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIF8uRGF0YU1hc2swMDAgPSBmdW5jdGlvbigpIHtcbiAgfTtcbiAgXy5EYXRhTWFzazAwMC5wcm90b3R5cGUudW5tYXNrQml0TWF0cml4ID0gZnVuY3Rpb24oYml0cywgZGltZW5zaW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaW1lbnNpb247IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkaW1lbnNpb247IGorKykge1xuICAgICAgICBpZiAodGhpcy5pc01hc2tlZChpLCBqKSkge1xuICAgICAgICAgIGJpdHMuZmxpcChqLCBpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXy5EYXRhTWFzazAwMC5wcm90b3R5cGUuaXNNYXNrZWQgPSBmdW5jdGlvbihpLCBqKSB7XG4gICAgcmV0dXJuICgoaSArIGopICYgMHgwMSkgPT0gMDtcbiAgfTtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBfLkRhdGFNYXNrMDAxID0gZnVuY3Rpb24oKSB7XG4gIH07XG4gIF8uRGF0YU1hc2swMDEucHJvdG90eXBlLnVubWFza0JpdE1hdHJpeCA9IGZ1bmN0aW9uKGJpdHMsIGRpbWVuc2lvbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGltZW5zaW9uOyBpKyspIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGltZW5zaW9uOyBqKyspIHtcbiAgICAgICAgaWYgKHRoaXMuaXNNYXNrZWQoaSwgaikpIHtcbiAgICAgICAgICBiaXRzLmZsaXAoaiwgaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIF8uRGF0YU1hc2swMDEucHJvdG90eXBlLmlzTWFza2VkID0gZnVuY3Rpb24oaSwgaikge1xuICAgIHJldHVybiAoaSAmIDB4MDEpID09IDA7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgXy5EYXRhTWFzazAxMCA9IGZ1bmN0aW9uKCkge1xuICB9O1xuICBfLkRhdGFNYXNrMDEwLnByb3RvdHlwZS51bm1hc2tCaXRNYXRyaXggPSBmdW5jdGlvbihiaXRzLCBkaW1lbnNpb24pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpbWVuc2lvbjsgaSsrKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRpbWVuc2lvbjsgaisrKSB7XG4gICAgICAgIGlmICh0aGlzLmlzTWFza2VkKGksIGopKSB7XG4gICAgICAgICAgYml0cy5mbGlwKGosIGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBfLkRhdGFNYXNrMDEwLnByb3RvdHlwZS5pc01hc2tlZCA9IGZ1bmN0aW9uKGksIGopIHtcbiAgICByZXR1cm4gaiAlIDMgPT0gMDtcbiAgfTtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBfLkRhdGFNYXNrMDExID0gZnVuY3Rpb24oKSB7XG5cbiAgfTtcbiAgXy5EYXRhTWFzazAxMS5wcm90b3R5cGUudW5tYXNrQml0TWF0cml4ID0gZnVuY3Rpb24oYml0cywgZGltZW5zaW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaW1lbnNpb247IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkaW1lbnNpb247IGorKykge1xuICAgICAgICBpZiAodGhpcy5pc01hc2tlZChpLCBqKSkge1xuICAgICAgICAgIGJpdHMuZmxpcChqLCBpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXy5EYXRhTWFzazAxMS5wcm90b3R5cGUuaXNNYXNrZWQgPSBmdW5jdGlvbihpLCBqKSB7XG4gICAgcmV0dXJuIChpICsgaikgJSAzID09IDA7XG4gIH07XG5cblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBfLkRhdGFNYXNrMTAwID0gZnVuY3Rpb24oKSB7XG4gIH07XG4gIF8uRGF0YU1hc2sxMDAucHJvdG90eXBlLnVubWFza0JpdE1hdHJpeCA9IGZ1bmN0aW9uKGJpdHMsIGRpbWVuc2lvbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGltZW5zaW9uOyBpKyspIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGltZW5zaW9uOyBqKyspIHtcbiAgICAgICAgaWYgKHRoaXMuaXNNYXNrZWQoaSwgaikpIHtcbiAgICAgICAgICBiaXRzLmZsaXAoaiwgaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIF8uRGF0YU1hc2sxMDAucHJvdG90eXBlLmlzTWFza2VkID0gZnVuY3Rpb24oaSwgaikge1xuICAgIHJldHVybiAoKChVUlNoaWZ0KGksIDEpKSArIChqIC8gMykpICYgMHgwMSkgPT0gMDtcbiAgfTtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBfLkRhdGFNYXNrMTAxID0gZnVuY3Rpb24oKSB7XG4gIH07XG5cbiAgXy5EYXRhTWFzazEwMS5wcm90b3R5cGUudW5tYXNrQml0TWF0cml4ID0gZnVuY3Rpb24oYml0cywgZGltZW5zaW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaW1lbnNpb247IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkaW1lbnNpb247IGorKykge1xuICAgICAgICBpZiAodGhpcy5pc01hc2tlZChpLCBqKSkge1xuICAgICAgICAgIGJpdHMuZmxpcChqLCBpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfLkRhdGFNYXNrMTAxLnByb3RvdHlwZS5pc01hc2tlZCA9IGZ1bmN0aW9uKGksIGopIHtcbiAgICB2YXIgdGVtcCA9IGkgKiBqO1xuICAgIHJldHVybiAodGVtcCAmIDB4MDEpICsgKHRlbXAgJSAzKSA9PSAwO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIF8uRGF0YU1hc2sxMTAgPSBmdW5jdGlvbigpIHtcbiAgfTtcbiAgXy5EYXRhTWFzazExMC5wcm90b3R5cGUudW5tYXNrQml0TWF0cml4ID0gZnVuY3Rpb24oYml0cywgZGltZW5zaW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaW1lbnNpb247IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkaW1lbnNpb247IGorKykge1xuICAgICAgICBpZiAodGhpcy5pc01hc2tlZChpLCBqKSkge1xuICAgICAgICAgIGJpdHMuZmxpcChqLCBpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXy5EYXRhTWFzazExMC5wcm90b3R5cGUuaXNNYXNrZWQgPSBmdW5jdGlvbihpLCBqKSB7XG4gICAgdmFyIHRlbXAgPSBpICogajtcbiAgICByZXR1cm4gKCgodGVtcCAmIDB4MDEpICsgKHRlbXAgJSAzKSkgJiAweDAxKSA9PSAwO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIF8uRGF0YU1hc2sxMTEgPSBmdW5jdGlvbigpIHtcbiAgfTtcbiAgXy5EYXRhTWFzazExMS5wcm90b3R5cGUudW5tYXNrQml0TWF0cml4ID0gZnVuY3Rpb24oYml0cywgZGltZW5zaW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaW1lbnNpb247IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkaW1lbnNpb247IGorKykge1xuICAgICAgICBpZiAodGhpcy5pc01hc2tlZChpLCBqKSkge1xuICAgICAgICAgIGJpdHMuZmxpcChqLCBpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXy5EYXRhTWFzazExMS5wcm90b3R5cGUuaXNNYXNrZWQgPSBmdW5jdGlvbihpLCBqKSB7XG4gICAgcmV0dXJuICgoKChpICsgaikgJiAweDAxKSArICgoaSAqIGopICUgMykpICYgMHgwMSkgPT0gMDtcbiAgfTtcblxuICAvKipcbiAgICogQHR5cGUge0FycmF5LjwhXy5EYXRhTWFza0ludGVyZmFjZT59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfLkRBVEFfTUFTS1NfID0gbmV3IEFycmF5KG5ldyBfLkRhdGFNYXNrMDAwKCksIG5ldyBfLkRhdGFNYXNrMDAxKCksXG4gICAgbmV3IF8uRGF0YU1hc2swMTAoKSwgbmV3IF8uRGF0YU1hc2swMTEoKSwgbmV3IF8uRGF0YU1hc2sxMDAoKSxcbiAgICBuZXcgXy5EYXRhTWFzazEwMSgpLFxuICAgIG5ldyBfLkRhdGFNYXNrMTEwKCksIG5ldyBfLkRhdGFNYXNrMTExKCkpO1xuXG59KTtcblxuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiBQb3J0ZWQgdG8gSmF2YVNjcmlwdCBieSBMYXphciBMYXN6bG8gMjAxMVxuXG4gbGF6YXJzb2Z0QGdtYWlsLmNvbSwgd3d3LmxhemFyc29mdC5pbmZvXG5cbiAqL1xuXG4vKlxuICpcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuQml0TWF0cml4UGFyc2VyJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuRGF0YU1hc2snKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5Gb3JtYXRFcnJvcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkZvcm1hdEluZm9ybWF0aW9uJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuVmVyc2lvbicpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICB2YXIgRm9ybWF0SW5mb3JtYXRpb24gPSB3NjliLnFyLkZvcm1hdEluZm9ybWF0aW9uO1xuICB2YXIgVmVyc2lvbiA9IHc2OWIucXIuVmVyc2lvbjtcbiAgdmFyIERhdGFNYXNrID0gdzY5Yi5xci5EYXRhTWFzaztcbiAgdmFyIEZvcm1hdEVycm9yID0gdzY5Yi5xci5Gb3JtYXRFcnJvcjtcblxuICAvKipcbiAgICogQHBhcmFtIHt3NjliLnFyLkJpdE1hdHJpeH0gYml0TWF0cml4IG1hdHJpeC5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB3NjliLnFyLkJpdE1hdHJpeFBhcnNlciA9IGZ1bmN0aW9uKGJpdE1hdHJpeCkge1xuICAgIHZhciBkaW1lbnNpb24gPSBiaXRNYXRyaXguZ2V0SGVpZ2h0KCk7XG4gICAgaWYgKGRpbWVuc2lvbiA8IDIxIHx8IChkaW1lbnNpb24gJiAweDAzKSAhPSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoKTtcbiAgICB9XG4gICAgdGhpcy5iaXRNYXRyaXggPSBiaXRNYXRyaXg7XG4gICAgLyoqXG4gICAgICogQHR5cGUge3c2OWIucXIuVmVyc2lvbn1cbiAgICAgKi9cbiAgICB0aGlzLnBhcnNlZFZlcnNpb24gPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHt3NjliLnFyLkZvcm1hdEluZm9ybWF0aW9ufVxuICAgICAqL1xuICAgIHRoaXMucGFyc2VkRm9ybWF0SW5mbyA9IG51bGw7XG4gIH07XG4gIHZhciBCaXRNYXRyaXhQYXJzZXIgPSB3NjliLnFyLkJpdE1hdHJpeFBhcnNlcjtcbiAgdmFyIHBybyA9IEJpdE1hdHJpeFBhcnNlci5wcm90b3R5cGU7XG5cbiAgcHJvLmNvcHlCaXQgPSBmdW5jdGlvbihpLCBqLCB2ZXJzaW9uQml0cykge1xuICAgIHJldHVybiB0aGlzLmJpdE1hdHJpeC5nZXQoaSxcbiAgICAgIGopID8gKHZlcnNpb25CaXRzIDw8IDEpIHwgMHgxIDogdmVyc2lvbkJpdHMgPDwgMTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7IXc2OWIucXIuRm9ybWF0SW5mb3JtYXRpb259IGZvcm1hdCBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHByby5yZWFkRm9ybWF0SW5mb3JtYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5wYXJzZWRGb3JtYXRJbmZvICE9IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlZEZvcm1hdEluZm87XG4gICAgfVxuXG4gICAgLy8gUmVhZCB0b3AtbGVmdCBmb3JtYXQgaW5mbyBiaXRzXG4gICAgdmFyIGZvcm1hdEluZm9CaXRzID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgZm9ybWF0SW5mb0JpdHMgPSB0aGlzLmNvcHlCaXQoaSwgOCwgZm9ybWF0SW5mb0JpdHMpO1xuICAgIH1cbiAgICAvLyAuLiBhbmQgc2tpcCBhIGJpdCBpbiB0aGUgdGltaW5nIHBhdHRlcm4gLi4uXG4gICAgZm9ybWF0SW5mb0JpdHMgPSB0aGlzLmNvcHlCaXQoNywgOCwgZm9ybWF0SW5mb0JpdHMpO1xuICAgIGZvcm1hdEluZm9CaXRzID0gdGhpcy5jb3B5Qml0KDgsIDgsIGZvcm1hdEluZm9CaXRzKTtcbiAgICBmb3JtYXRJbmZvQml0cyA9IHRoaXMuY29weUJpdCg4LCA3LCBmb3JtYXRJbmZvQml0cyk7XG4gICAgLy8gLi4gYW5kIHNraXAgYSBiaXQgaW4gdGhlIHRpbWluZyBwYXR0ZXJuIC4uLlxuICAgIGZvciAodmFyIGogPSA1OyBqID49IDA7IGotLSkge1xuICAgICAgZm9ybWF0SW5mb0JpdHMgPSB0aGlzLmNvcHlCaXQoOCwgaiwgZm9ybWF0SW5mb0JpdHMpO1xuICAgIH1cblxuICAgIHRoaXMucGFyc2VkRm9ybWF0SW5mbyA9XG4gICAgICBGb3JtYXRJbmZvcm1hdGlvbi5kZWNvZGVGb3JtYXRJbmZvcm1hdGlvbihmb3JtYXRJbmZvQml0cyk7XG4gICAgaWYgKHRoaXMucGFyc2VkRm9ybWF0SW5mbyAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZWRGb3JtYXRJbmZvO1xuICAgIH1cblxuICAgIC8vIEhtbSwgZmFpbGVkLiBUcnkgdGhlIHRvcC1yaWdodC9ib3R0b20tbGVmdCBwYXR0ZXJuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuYml0TWF0cml4LmdldEhlaWdodCgpO1xuICAgIGZvcm1hdEluZm9CaXRzID0gMDtcbiAgICB2YXIgaU1pbiA9IGRpbWVuc2lvbiAtIDg7XG4gICAgZm9yICh2YXIgaSA9IGRpbWVuc2lvbiAtIDE7IGkgPj0gaU1pbjsgaS0tKSB7XG4gICAgICBmb3JtYXRJbmZvQml0cyA9IHRoaXMuY29weUJpdChpLCA4LCBmb3JtYXRJbmZvQml0cyk7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSBkaW1lbnNpb24gLSA3OyBqIDwgZGltZW5zaW9uOyBqKyspIHtcbiAgICAgIGZvcm1hdEluZm9CaXRzID0gdGhpcy5jb3B5Qml0KDgsIGosIGZvcm1hdEluZm9CaXRzKTtcbiAgICB9XG5cbiAgICB0aGlzLnBhcnNlZEZvcm1hdEluZm8gPVxuICAgICAgRm9ybWF0SW5mb3JtYXRpb24uZGVjb2RlRm9ybWF0SW5mb3JtYXRpb24oZm9ybWF0SW5mb0JpdHMpO1xuICAgIGlmICh0aGlzLnBhcnNlZEZvcm1hdEluZm8gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VkRm9ybWF0SW5mbztcbiAgICB9XG4gICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3c2OWIucXIuVmVyc2lvbn0gdmVyc2lvbi5cbiAgICovXG4gIHByby5yZWFkVmVyc2lvbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnBhcnNlZFZlcnNpb24gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VkVmVyc2lvbjtcbiAgICB9XG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5iaXRNYXRyaXguZ2V0SGVpZ2h0KCk7XG5cbiAgICB2YXIgcHJvdmlzaW9uYWxWZXJzaW9uID0gKGRpbWVuc2lvbiAtIDE3KSA+PiAyO1xuICAgIGlmIChwcm92aXNpb25hbFZlcnNpb24gPD0gNikge1xuICAgICAgcmV0dXJuIFZlcnNpb24uZ2V0VmVyc2lvbkZvck51bWJlcihwcm92aXNpb25hbFZlcnNpb24pO1xuICAgIH1cblxuICAgIC8vIFJlYWQgdG9wLXJpZ2h0IHZlcnNpb24gaW5mbzogMyB3aWRlIGJ5IDYgdGFsbFxuICAgIHZhciB2ZXJzaW9uQml0cyA9IDA7XG4gICAgdmFyIGlqTWluID0gZGltZW5zaW9uIC0gMTE7XG4gICAgZm9yICh2YXIgaiA9IDU7IGogPj0gMDsgai0tKSB7XG4gICAgICBmb3IgKHZhciBpID0gZGltZW5zaW9uIC0gOTsgaSA+PSBpak1pbjsgaS0tKSB7XG4gICAgICAgIHZlcnNpb25CaXRzID0gdGhpcy5jb3B5Qml0KGksIGosIHZlcnNpb25CaXRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnBhcnNlZFZlcnNpb24gPSBWZXJzaW9uLmRlY29kZVZlcnNpb25JbmZvcm1hdGlvbih2ZXJzaW9uQml0cyk7XG4gICAgaWYgKHRoaXMucGFyc2VkVmVyc2lvbiAhPSBudWxsICYmXG4gICAgICB0aGlzLnBhcnNlZFZlcnNpb24uZ2V0RGltZW5zaW9uRm9yVmVyc2lvbigpID09IGRpbWVuc2lvbikge1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VkVmVyc2lvbjtcbiAgICB9XG5cbiAgICAvLyBIbW0sIGZhaWxlZC4gVHJ5IGJvdHRvbSBsZWZ0OiA2IHdpZGUgYnkgMyB0YWxsXG4gICAgdmVyc2lvbkJpdHMgPSAwO1xuICAgIGZvciAodmFyIGkgPSA1OyBpID49IDA7IGktLSkge1xuICAgICAgZm9yICh2YXIgaiA9IGRpbWVuc2lvbiAtIDk7IGogPj0gaWpNaW47IGotLSkge1xuICAgICAgICB2ZXJzaW9uQml0cyA9IHRoaXMuY29weUJpdChpLCBqLCB2ZXJzaW9uQml0cyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wYXJzZWRWZXJzaW9uID0gVmVyc2lvbi5kZWNvZGVWZXJzaW9uSW5mb3JtYXRpb24odmVyc2lvbkJpdHMpO1xuICAgIGlmICh0aGlzLnBhcnNlZFZlcnNpb24gIT0gbnVsbCAmJlxuICAgICAgdGhpcy5wYXJzZWRWZXJzaW9uLmdldERpbWVuc2lvbkZvclZlcnNpb24oKSA9PSBkaW1lbnNpb24pIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlZFZlcnNpb247XG4gICAgfVxuICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigpO1xuICB9O1xuXG4gIHByby5yZWFkQ29kZXdvcmRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgZm9ybWF0SW5mbyA9IHRoaXMucmVhZEZvcm1hdEluZm9ybWF0aW9uKCk7XG4gICAgdmFyIHZlcnNpb24gPSB0aGlzLnJlYWRWZXJzaW9uKCk7XG5cbiAgICAvLyBHZXQgdGhlIGRhdGEgbWFzayBmb3IgdGhlIGZvcm1hdCB1c2VkIGluIHRoaXMgUVIgQ29kZS4gVGhpcyB3aWxsIGV4Y2x1ZGVcbiAgICAvLyBzb21lIGJpdHMgZnJvbSByZWFkaW5nIGFzIHdlIHdpbmQgdGhyb3VnaCB0aGUgYml0IG1hdHJpeC5cbiAgICB2YXIgZGF0YU1hc2sgPSBEYXRhTWFzay5mb3JSZWZlcmVuY2UoZm9ybWF0SW5mby5kYXRhTWFzayk7XG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuYml0TWF0cml4LmdldEhlaWdodCgpO1xuICAgIGRhdGFNYXNrLnVubWFza0JpdE1hdHJpeCh0aGlzLmJpdE1hdHJpeCwgZGltZW5zaW9uKTtcblxuICAgIHZhciBmdW5jdGlvblBhdHRlcm4gPSB2ZXJzaW9uLmJ1aWxkRnVuY3Rpb25QYXR0ZXJuKCk7XG5cbiAgICB2YXIgcmVhZGluZ1VwID0gdHJ1ZTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KHZlcnNpb24udG90YWxDb2Rld29yZHMpO1xuICAgIHZhciByZXN1bHRPZmZzZXQgPSAwO1xuICAgIHZhciBjdXJyZW50Qnl0ZSA9IDA7XG4gICAgdmFyIGJpdHNSZWFkID0gMDtcbiAgICAvLyBSZWFkIGNvbHVtbnMgaW4gcGFpcnMsIGZyb20gcmlnaHQgdG8gbGVmdFxuICAgIGZvciAodmFyIGogPSBkaW1lbnNpb24gLSAxOyBqID4gMDsgaiAtPSAyKSB7XG4gICAgICBpZiAoaiA9PSA2KSB7XG4gICAgICAgIC8vIFNraXAgd2hvbGUgY29sdW1uIHdpdGggdmVydGljYWwgYWxpZ25tZW50IHBhdHRlcm47XG4gICAgICAgIC8vIHNhdmVzIHRpbWUgYW5kIG1ha2VzIHRoZSBvdGhlciBjb2RlIHByb2NlZWQgbW9yZSBjbGVhbmx5XG4gICAgICAgIGotLTtcbiAgICAgIH1cbiAgICAgIC8vIFJlYWQgYWx0ZXJuYXRpbmdseSBmcm9tIGJvdHRvbSB0byB0b3AgdGhlbiB0b3AgdG8gYm90dG9tXG4gICAgICBmb3IgKHZhciBjb3VudCA9IDA7IGNvdW50IDwgZGltZW5zaW9uOyBjb3VudCsrKSB7XG4gICAgICAgIHZhciBpID0gcmVhZGluZ1VwID8gZGltZW5zaW9uIC0gMSAtIGNvdW50IDogY291bnQ7XG4gICAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IDI7IGNvbCsrKSB7XG4gICAgICAgICAgLy8gSWdub3JlIGJpdHMgY292ZXJlZCBieSB0aGUgZnVuY3Rpb24gcGF0dGVyblxuICAgICAgICAgIGlmICghZnVuY3Rpb25QYXR0ZXJuLmdldChqIC0gY29sLCBpKSkge1xuICAgICAgICAgICAgLy8gUmVhZCBhIGJpdFxuICAgICAgICAgICAgYml0c1JlYWQrKztcbiAgICAgICAgICAgIGN1cnJlbnRCeXRlIDw8PSAxO1xuICAgICAgICAgICAgaWYgKHRoaXMuYml0TWF0cml4LmdldChqIC0gY29sLCBpKSkge1xuICAgICAgICAgICAgICBjdXJyZW50Qnl0ZSB8PSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgd2UndmUgbWFkZSBhIHdob2xlIGJ5dGUsIHNhdmUgaXQgb2ZmXG4gICAgICAgICAgICBpZiAoYml0c1JlYWQgPT0gOCkge1xuICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0T2Zmc2V0KytdID0gY3VycmVudEJ5dGU7XG4gICAgICAgICAgICAgIGJpdHNSZWFkID0gMDtcbiAgICAgICAgICAgICAgY3VycmVudEJ5dGUgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVhZGluZ1VwIF49IHRydWU7IC8vIHJlYWRpbmdVcCA9ICFyZWFkaW5nVXA7IC8vIHN3aXRjaCBkaXJlY3Rpb25zXG4gICAgfVxuICAgIGlmIChyZXN1bHRPZmZzZXQgIT0gdmVyc2lvbi50b3RhbENvZGV3b3Jkcykge1xuICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KTtcblxuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiBQb3J0ZWQgdG8gSmF2YVNjcmlwdCBieSBMYXphciBMYXN6bG8gMjAxMVxuXG4gbGF6YXJzb2Z0QGdtYWlsLmNvbSwgd3d3LmxhemFyc29mdC5pbmZvXG5cbiAqL1xuXG4vKlxuICpcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5xci5EYXRhQmxvY2snKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB3NjliLnFyLkRhdGFCbG9jayA9IGZ1bmN0aW9uKG51bURhdGFDb2Rld29yZHMsIGNvZGV3b3Jkcykge1xuICAgIHRoaXMubnVtRGF0YUNvZGV3b3JkcyA9IG51bURhdGFDb2Rld29yZHM7XG4gICAgdGhpcy5jb2Rld29yZHMgPSBjb2Rld29yZHM7XG4gIH07XG4gIHZhciBEYXRhQmxvY2sgPSB3NjliLnFyLkRhdGFCbG9jaztcblxuICBEYXRhQmxvY2suZ2V0RGF0YUJsb2NrcyA9IGZ1bmN0aW9uKHJhd0NvZGV3b3JkcywgdmVyc2lvbiwgZWNMZXZlbCkge1xuXG4gICAgaWYgKHJhd0NvZGV3b3Jkcy5sZW5ndGggIT0gdmVyc2lvbi50b3RhbENvZGV3b3Jkcykge1xuICAgICAgdGhyb3cgJ0FyZ3VtZW50RXhjZXB0aW9uJztcbiAgICB9XG5cbiAgICAvLyBGaWd1cmUgb3V0IHRoZSBudW1iZXIgYW5kIHNpemUgb2YgZGF0YSBibG9ja3MgdXNlZCBieSB0aGlzIHZlcnNpb24gYW5kXG4gICAgLy8gZXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICAgIHZhciBlY0Jsb2NrcyA9IHZlcnNpb24uZ2V0RUNCbG9ja3NGb3JMZXZlbChlY0xldmVsKTtcblxuICAgIC8vIEZpcnN0IGNvdW50IHRoZSB0b3RhbCBudW1iZXIgb2YgZGF0YSBibG9ja3NcbiAgICB2YXIgdG90YWxCbG9ja3MgPSAwO1xuICAgIHZhciBlY0Jsb2NrQXJyYXkgPSBlY0Jsb2Nrcy5nZXRFQ0Jsb2NrcygpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWNCbG9ja0FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0b3RhbEJsb2NrcyArPSBlY0Jsb2NrQXJyYXlbaV0uY291bnQ7XG4gICAgfVxuXG4gICAgLy8gTm93IGVzdGFibGlzaCBEYXRhQmxvY2tzIG9mIHRoZSBhcHByb3ByaWF0ZSBzaXplIGFuZCBudW1iZXIgb2YgZGF0YVxuICAgIC8vIGNvZGV3b3Jkc1xuICAgIHZhciByZXN1bHQgPSBuZXcgQXJyYXkodG90YWxCbG9ja3MpO1xuICAgIHZhciBudW1SZXN1bHRCbG9ja3MgPSAwO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgZWNCbG9ja0FycmF5Lmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgZWNCbG9jayA9IGVjQmxvY2tBcnJheVtqXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWNCbG9jay5jb3VudDsgaSsrKSB7XG4gICAgICAgIHZhciBudW1EYXRhQ29kZXdvcmRzID0gZWNCbG9jay5kYXRhQ29kZXdvcmRzO1xuICAgICAgICB2YXIgbnVtQmxvY2tDb2Rld29yZHMgPSBlY0Jsb2Nrcy5lY0NvZGV3b3Jkc1BlckJsb2NrICsgbnVtRGF0YUNvZGV3b3JkcztcbiAgICAgICAgcmVzdWx0W251bVJlc3VsdEJsb2NrcysrXSA9IG5ldyBEYXRhQmxvY2sobnVtRGF0YUNvZGV3b3JkcyxcbiAgICAgICAgICBuZXcgQXJyYXkobnVtQmxvY2tDb2Rld29yZHMpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBbGwgYmxvY2tzIGhhdmUgdGhlIHNhbWUgYW1vdW50IG9mIGRhdGEsIGV4Y2VwdCB0aGF0IHRoZSBsYXN0IG5cbiAgICAvLyAod2hlcmUgbiBtYXkgYmUgMCkgaGF2ZSAxIG1vcmUgYnl0ZS4gRmlndXJlIG91dCB3aGVyZSB0aGVzZSBzdGFydC5cbiAgICB2YXIgc2hvcnRlckJsb2Nrc1RvdGFsQ29kZXdvcmRzID0gcmVzdWx0WzBdLmNvZGV3b3Jkcy5sZW5ndGg7XG4gICAgdmFyIGxvbmdlckJsb2Nrc1N0YXJ0QXQgPSByZXN1bHQubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAobG9uZ2VyQmxvY2tzU3RhcnRBdCA+PSAwKSB7XG4gICAgICB2YXIgbnVtQ29kZXdvcmRzID0gcmVzdWx0W2xvbmdlckJsb2Nrc1N0YXJ0QXRdLmNvZGV3b3Jkcy5sZW5ndGg7XG4gICAgICBpZiAobnVtQ29kZXdvcmRzID09IHNob3J0ZXJCbG9ja3NUb3RhbENvZGV3b3Jkcykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGxvbmdlckJsb2Nrc1N0YXJ0QXQtLTtcbiAgICB9XG4gICAgbG9uZ2VyQmxvY2tzU3RhcnRBdCsrO1xuXG4gICAgdmFyIHNob3J0ZXJCbG9ja3NOdW1EYXRhQ29kZXdvcmRzID0gc2hvcnRlckJsb2Nrc1RvdGFsQ29kZXdvcmRzIC1cbiAgICAgIGVjQmxvY2tzLmVjQ29kZXdvcmRzUGVyQmxvY2s7XG4gICAgLy8gVGhlIGxhc3QgZWxlbWVudHMgb2YgcmVzdWx0IG1heSBiZSAxIGVsZW1lbnQgbG9uZ2VyO1xuICAgIC8vIGZpcnN0IGZpbGwgb3V0IGFzIG1hbnkgZWxlbWVudHMgYXMgYWxsIG9mIHRoZW0gaGF2ZVxuICAgIHZhciByYXdDb2Rld29yZHNPZmZzZXQgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hvcnRlckJsb2Nrc051bURhdGFDb2Rld29yZHM7IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBudW1SZXN1bHRCbG9ja3M7IGorKykge1xuICAgICAgICByZXN1bHRbal0uY29kZXdvcmRzW2ldID0gcmF3Q29kZXdvcmRzW3Jhd0NvZGV3b3Jkc09mZnNldCsrXTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRmlsbCBvdXQgdGhlIGxhc3QgZGF0YSBibG9jayBpbiB0aGUgbG9uZ2VyIG9uZXNcbiAgICBmb3IgKHZhciBqID0gbG9uZ2VyQmxvY2tzU3RhcnRBdDsgaiA8IG51bVJlc3VsdEJsb2NrczsgaisrKSB7XG4gICAgICByZXN1bHRbal0uY29kZXdvcmRzW3Nob3J0ZXJCbG9ja3NOdW1EYXRhQ29kZXdvcmRzXSA9XG4gICAgICAgIHJhd0NvZGV3b3Jkc1tyYXdDb2Rld29yZHNPZmZzZXQrK107XG4gICAgfVxuICAgIC8vIE5vdyBhZGQgaW4gZXJyb3IgY29ycmVjdGlvbiBibG9ja3NcbiAgICB2YXIgbWF4ID0gcmVzdWx0WzBdLmNvZGV3b3Jkcy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IHNob3J0ZXJCbG9ja3NOdW1EYXRhQ29kZXdvcmRzOyBpIDwgbWF4OyBpKyspIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbnVtUmVzdWx0QmxvY2tzOyBqKyspIHtcbiAgICAgICAgdmFyIGlPZmZzZXQgPSBqIDwgbG9uZ2VyQmxvY2tzU3RhcnRBdCA/IGkgOiBpICsgMTtcbiAgICAgICAgcmVzdWx0W2pdLmNvZGV3b3Jkc1tpT2Zmc2V0XSA9IHJhd0NvZGV3b3Jkc1tyYXdDb2Rld29yZHNPZmZzZXQrK107XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbn0pO1xuXG4iLCIvLyBDb3B5cmlnaHQgMjAwNiBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFV0aWxpdHkgZm9yIGZhc3Qgc3RyaW5nIGNvbmNhdGVuYXRpb24uXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLnN0cmluZy5TdHJpbmdCdWZmZXInKTtcblxuXG5cbi8qKlxuICogVXRpbGl0eSBjbGFzcyB0byBmYWNpbGl0YXRlIHN0cmluZyBjb25jYXRlbmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7Kj19IG9wdF9hMSBPcHRpb25hbCBmaXJzdCBpbml0aWFsIGl0ZW0gdG8gYXBwZW5kLlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBPdGhlciBpbml0aWFsIGl0ZW1zIHRvXG4gKiAgICAgYXBwZW5kLCBlLmcuLCBuZXcgZ29vZy5zdHJpbmcuU3RyaW5nQnVmZmVyKCdmb28nLCAnYmFyJykuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZ29vZy5zdHJpbmcuU3RyaW5nQnVmZmVyID0gZnVuY3Rpb24ob3B0X2ExLCB2YXJfYXJncykge1xuICBpZiAob3B0X2ExICE9IG51bGwpIHtcbiAgICB0aGlzLmFwcGVuZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG59O1xuXG5cbi8qKlxuICogSW50ZXJuYWwgYnVmZmVyIGZvciB0aGUgc3RyaW5nIHRvIGJlIGNvbmNhdGVuYXRlZC5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0cmluZy5TdHJpbmdCdWZmZXIucHJvdG90eXBlLmJ1ZmZlcl8gPSAnJztcblxuXG4vKipcbiAqIFNldHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBzdHJpbmcgYnVmZmVyIG9iamVjdCwgcmVwbGFjaW5nIHdoYXQncyBjdXJyZW50bHlcbiAqIHRoZXJlLlxuICpcbiAqIEBwYXJhbSB7Kn0gcyBTdHJpbmcgdG8gc2V0LlxuICovXG5nb29nLnN0cmluZy5TdHJpbmdCdWZmZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHMpIHtcbiAgdGhpcy5idWZmZXJfID0gJycgKyBzO1xufTtcblxuXG4vKipcbiAqIEFwcGVuZHMgb25lIG9yIG1vcmUgaXRlbXMgdG8gdGhlIGJ1ZmZlci5cbiAqXG4gKiBDYWxsaW5nIHRoaXMgd2l0aCBudWxsLCB1bmRlZmluZWQsIG9yIGVtcHR5IGFyZ3VtZW50cyBpcyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0geyp9IGExIFJlcXVpcmVkIGZpcnN0IHN0cmluZy5cbiAqIEBwYXJhbSB7Kj19IG9wdF9hMiBPcHRpb25hbCBzZWNvbmQgc3RyaW5nLlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBPdGhlciBpdGVtcyB0byBhcHBlbmQsXG4gKiAgICAgZS5nLiwgc2IuYXBwZW5kKCdmb28nLCAnYmFyJywgJ2JheicpLlxuICogQHJldHVybiB7IWdvb2cuc3RyaW5nLlN0cmluZ0J1ZmZlcn0gVGhpcyBzYW1lIFN0cmluZ0J1ZmZlciBvYmplY3QuXG4gKiBAc3VwcHJlc3Mge2R1cGxpY2F0ZX1cbiAqL1xuZ29vZy5zdHJpbmcuU3RyaW5nQnVmZmVyLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihhMSwgb3B0X2EyLCB2YXJfYXJncykge1xuICAvLyBVc2UgYTEgZGlyZWN0bHkgdG8gYXZvaWQgYXJndW1lbnRzIGluc3RhbnRpYXRpb24gZm9yIHNpbmdsZS1hcmcgY2FzZS5cbiAgdGhpcy5idWZmZXJfICs9IGExO1xuICBpZiAob3B0X2EyICE9IG51bGwpIHsgLy8gc2Vjb25kIGFyZ3VtZW50IGlzIHVuZGVmaW5lZCAobnVsbCA9PSB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuYnVmZmVyXyArPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgaW50ZXJuYWwgYnVmZmVyLlxuICovXG5nb29nLnN0cmluZy5TdHJpbmdCdWZmZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYnVmZmVyXyA9ICcnO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn0gdGhlIGxlbmd0aCBvZiB0aGUgY3VycmVudCBjb250ZW50cyBvZiB0aGUgYnVmZmVyLlxuICovXG5nb29nLnN0cmluZy5TdHJpbmdCdWZmZXIucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5idWZmZXJfLmxlbmd0aDtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb25jYXRlbmF0ZWQgc3RyaW5nLlxuICogQG92ZXJyaWRlXG4gKi9cbmdvb2cuc3RyaW5nLlN0cmluZ0J1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuYnVmZmVyXztcbn07XG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG4vKlxuICogUG9ydGVkIHRvIGpzIGJ5IE1hbnVlbCBCcmF1blxuICogQ29weXJpZ2h0IDIwMDcgWlhpbmcgYXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZ29vZy5wcm92aWRlKCd3NjliLnFyLkJpdFNvdXJjZScpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICAvKiogPHA+VGhpcyBwcm92aWRlcyBhbiBlYXN5IGFic3RyYWN0aW9uIHRvIHJlYWQgYml0cyBhdCBhIHRpbWUgZnJvbSBhXG4gICAqIHNlcXVlbmNlIG9mIGJ5dGVzLCB3aGVyZSB0aGUgbnVtYmVyIG9mIGJpdHMgcmVhZCBpcyBub3Qgb2Z0ZW4gYSBtdWx0aXBsZVxuICAgKiBvZiA4LjwvcD5cbiAgICpcbiAgICogPHA+VGhpcyBjbGFzcyBpcyB0aHJlYWQtc2FmZSBidXQgbm90IHJlZW50cmFudCAtLSB1bmxlc3MgdGhlIGNhbGxlclxuICAgKiBtb2RpZmllcyB0aGUgYnl0ZXMgYXJyYXkgaXQgcGFzc2VkIGluLCBpbiB3aGljaCBjYXNlIGFsbCBiZXRzIGFyZSBvZmYuPC9wPlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBieXRlcyBieXRlcyBieXRlcyBmcm9tIHdoaWNoIHRoaXMgd2lsbCByZWFkIGJpdHMuXG4gICAqIEJpdHMgd2lsbCBiZSByZWFkIGZyb20gdGhlIGZpcnN0IGJ5dGUgZmlyc3QuICBCaXRzIGFyZSByZWFkIHdpdGhpbiBhIGJ5dGVcbiAgICogZnJvbSBtb3N0LXNpZ25pZmljYW50IHRvIGxlYXN0LXNpZ25pZmljYW50IGJpdC4gIEBjb25zdHJ1Y3RvclxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHc2OWIucXIuQml0U291cmNlID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICB0aGlzLmJ5dGVzXyA9IGJ5dGVzO1xuICAgIHRoaXMuYnl0ZU9mZnNldF8gPSAwO1xuICAgIHRoaXMuYml0T2Zmc2V0XyA9IDA7XG4gIH07XG4gIHZhciBCaXRTb3VyY2UgPSB3NjliLnFyLkJpdFNvdXJjZTtcbiAgdmFyIHBybyA9IEJpdFNvdXJjZS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn0gaW5kZXggb2YgbmV4dCBiaXQgaW4gY3VycmVudCBieXRlIHdoaWNoIHdvdWxkIGJlIHJlYWQgYnlcbiAgICogdGhlIG5leHQgY2FsbCB0byByZWFkQml0cygpLlxuICAgKi9cbiAgcHJvLmdldEJpdE9mZnNldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmJpdE9mZnNldF87XG4gIH07XG5cbiAgLyoqXG4gICogQHJldHVybiB7bnVtYmVyfSBpbmRleCBvZiBuZXh0IGJ5dGUgaW4gaW5wdXQgYnl0ZSBhcnJheSB3aGljaCB3b3VsZCBiZSByZWFkXG4gICogYnkgdGhlIG5leHQgY2FsbCB0byByZWFkQml0cygpLlxuICAgKi9cbiAgcHJvLmdldEJ5dGVPZmZzZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5ieXRlT2Zmc2V0XztcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bUJpdHMgbnVtYmVyIG9mIGJpdHMgdG8gcmVhZC4gIEByZXR1cm4ge251bWJlcn0gaW50XG4gICAqIHJlcHJlc2VudGluZyB0aGUgYml0cyByZWFkLiBUaGUgYml0cyB3aWxsIGFwcGVhciBhcyB0aGUgbGVhc3Qtc2lnbmlmaWNhbnRcbiAgICogYml0cyBvZiB0aGUgaW50LlxuICAgKi9cbiAgcHJvLnJlYWRCaXRzID0gZnVuY3Rpb24obnVtQml0cykge1xuICAgIGlmIChudW1CaXRzIDwgMSB8fCBudW1CaXRzID4gMzIgfHwgbnVtQml0cyA+IHRoaXMuYXZhaWxhYmxlKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSAwO1xuXG4gICAgLy8gRmlyc3QsIHJlYWQgcmVtYWluZGVyIGZyb20gY3VycmVudCBieXRlXG4gICAgaWYgKHRoaXMuYml0T2Zmc2V0XyA+IDApIHtcbiAgICAgIHZhciBiaXRzTGVmdCA9IDggLSB0aGlzLmJpdE9mZnNldF87XG4gICAgICB2YXIgdG9SZWFkID0gbnVtQml0cyA8IGJpdHNMZWZ0ID8gbnVtQml0cyA6IGJpdHNMZWZ0O1xuICAgICAgdmFyIGJpdHNUb05vdFJlYWQgPSBiaXRzTGVmdCAtIHRvUmVhZDtcbiAgICAgIHZhciBtYXNrID0gKDB4RkYgPj4gKDggLSB0b1JlYWQpKSA8PCBiaXRzVG9Ob3RSZWFkO1xuICAgICAgcmVzdWx0ID0gKHRoaXMuYnl0ZXNfW3RoaXMuYnl0ZU9mZnNldF9dICYgbWFzaykgPj4gYml0c1RvTm90UmVhZDtcbiAgICAgIG51bUJpdHMgLT0gdG9SZWFkO1xuICAgICAgdGhpcy5iaXRPZmZzZXRfICs9IHRvUmVhZDtcbiAgICAgIGlmICh0aGlzLmJpdE9mZnNldF8gPT0gOCkge1xuICAgICAgICB0aGlzLmJpdE9mZnNldF8gPSAwO1xuICAgICAgICB0aGlzLmJ5dGVPZmZzZXRfKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTmV4dCByZWFkIHdob2xlIGJ5dGVzXG4gICAgaWYgKG51bUJpdHMgPiAwKSB7XG4gICAgICB3aGlsZSAobnVtQml0cyA+PSA4KSB7XG4gICAgICAgIHJlc3VsdCA9IChyZXN1bHQgPDwgOCkgfCAodGhpcy5ieXRlc19bdGhpcy5ieXRlT2Zmc2V0X10gJiAweEZGKTtcbiAgICAgICAgdGhpcy5ieXRlT2Zmc2V0XysrO1xuICAgICAgICBudW1CaXRzIC09IDg7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmFsbHkgcmVhZCBhIHBhcnRpYWwgYnl0ZVxuICAgICAgaWYgKG51bUJpdHMgPiAwKSB7XG4gICAgICAgIHZhciBiaXRzVG9Ob3RSZWFkID0gOCAtIG51bUJpdHM7XG4gICAgICAgIHZhciBtYXNrID0gKDB4RkYgPj4gYml0c1RvTm90UmVhZCkgPDwgYml0c1RvTm90UmVhZDtcbiAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCA8PCBudW1CaXRzKSB8XG4gICAgICAgICAgKCh0aGlzLmJ5dGVzX1t0aGlzLmJ5dGVPZmZzZXRfXSAmIG1hc2spID4+IGJpdHNUb05vdFJlYWQpO1xuICAgICAgICB0aGlzLmJpdE9mZnNldF8gKz0gbnVtQml0cztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBudW1iZXIgb2YgYml0cyB0aGF0IGNhbiBiZSByZWFkIHN1Y2Nlc3NmdWxseS5cbiAgICovXG4gIHByby5hdmFpbGFibGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gOCAqICh0aGlzLmJ5dGVzXy5sZW5ndGggLSB0aGlzLmJ5dGVPZmZzZXRfKSAtIHRoaXMuYml0T2Zmc2V0XztcbiAgfTtcblxufSk7XG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG4vKlxuICogQ29weXJpZ2h0IDIwMDggWlhpbmcgYXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZ29vZy5wcm92aWRlKCd3NjliLnFyLkNoYXJhY3RlclNldEVDSScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm9iamVjdCcpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuXG4gIHZhciBfID0gdzY5Yi5xci5DaGFyYWN0ZXJTZXRFQ0k7XG4gIC8qKlxuICAgKiBAdHlwZSB7T2JqZWN0fSBtYXBwaW5nIGVjaSBjb2RlcyB0byBhcnJheXMgb2YgZW5jb2RpbmcgbmFtZXMuXG4gICAqL1xuICBfLnZhbHVlc1RvTmFtZXMgPSB7XG4gICAgMDogWydDUDQzNyddLFxuICAgIDI6IFsnQ1A0MzcnXSxcbiAgICAxOiBbJ0lTTy04ODU5LTEnXSxcbiAgICAzOiBbJ0lTTy04ODU5LTEnXSxcbiAgICA0OiBbJ0lTTy04ODU5LTInXSxcbiAgICA1OiBbJ0lTTy04ODU5LTMnXSxcbiAgICA2OiBbJ0lTTy04ODU5LTQnXSxcbiAgICA3OiBbJ0lTTy04ODU5LTUnXSxcbiAgICA4OiBbJ0lTTy04ODU5LTYnXSxcbiAgICA5OiBbJ0lTTy04ODU5LTcnXSxcbiAgICAxMDogWydJU08tODg1OS03J10sXG4gICAgMTE6IFsnSVNPLTg4NTktOSddLFxuICAgIDEyOiBbJ0lTTy04ODU5LTEwJ10sXG4gICAgMTM6IFsnSVNPLTg4NTktMTEnXSxcbiAgICAxNDogWydJU08tODg1OS0xMiddLFxuICAgIDE1OiBbJ0lTTy04ODU5LTEzJ10sXG4gICAgMTY6IFsnSVNPLTg4NTktMTQnXSxcbiAgICAxNzogWydJU08tODg1OS0xNSddLFxuICAgIDE4OiBbJ0lTTy04ODU5LTE2J10sXG4gICAgMjA6IFsnU0hJRlRfSklTJ10sXG4gICAgMjE6IFsnSVNPLTg4NTktMTYnXSxcbiAgICAyMjogWydDcDEyNTEnLCAnd2luZG93cy0xMjUxJ10sXG4gICAgMjM6IFsnQ3AxMjUyJywgJ3dpbmRvd3MtMTI1MiddLFxuICAgIDI0OiBbJ0NwMTI1NicsICd3aW5kb3dzLTEyNTYnXSxcbiAgICAyNTogWydVVEYtMTZCRScsICdVbmljb2RlQmlnJ10sXG4gICAgMjY6IFsnVVRGLTgnXSxcbiAgICAyNzogWydBU0NJSScsICdVUy1BU0NJSSddLFxuICAgIDE3MDogWydBU0NJSScsICdVUy1BU0NJSSddLFxuICAgIDI4OiBbJ0JpZzUnXSxcbiAgICAyOTogWydHQjE4MDMwJywgJ0dCMjMxMicsICdFVUNfQ04nLCAnR0JLJ10sXG4gICAgMzA6IFsnRVVDLUtSJ11cbiAgfTtcbiAgXy5uYW1lc1RvVmFsdWVzID0ge307XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgXy5idWlsZE5hbWVzVG9WYWx1ZXNfID0gZnVuY3Rpb24oKSB7XG4gICAgZ29vZy5vYmplY3QuZm9yRWFjaChfLnZhbHVlc1RvTmFtZXMsIGZ1bmN0aW9uKG5hbWVzLCBudW0pIHtcbiAgICAgIG5hbWVzLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICBpZiAoIV8ubmFtZXNUb1ZhbHVlc1tuYW1lXSlcbiAgICAgICAgICBfLm5hbWVzVG9WYWx1ZXNbbmFtZV0gPSBudW07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgXy5idWlsZE5hbWVzVG9WYWx1ZXNfKCk7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG9mIGVuY29kaW5nLlxuICAgKiBAcmV0dXJuIHs/bnVtYmVyfSBlY2kgdmFsdWUuXG4gICAqL1xuICBfLmdldFZhbHVlID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiBOdW1iZXIoXy5uYW1lc1RvVmFsdWVzW25hbWVdKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIGVjaSB2YWx1ZS5cbiAgICogQHJldHVybiB7P3N0cmluZ30gbWFpbiBlbmNvZGluZyBuYW1lLlxuICAgKi9cbiAgXy5nZXROYW1lID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgbmFtZXMgPSBfLnZhbHVlc1RvTmFtZXNbdmFsdWVdO1xuICAgIGlmIChuYW1lcylcbiAgICAgIHJldHVybiBuYW1lc1swXTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxufSk7XG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG4vKlxuICogQ29weXJpZ2h0IDIwMDcgWlhpbmcgYXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZ29vZy5wcm92aWRlKCd3NjliLnFyLk1vZGUnKTtcbmdvb2cucHJvdmlkZSgndzY5Yi5xci5Nb2RlRW51bScpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogPHA+U2VlIElTTyAxODAwNDoyMDA2LCA2LjQuMSwgVGFibGVzIDIgYW5kIDMuIFRoaXMgZW51bSBlbmNhcHN1bGF0ZXMgdGhlXG4gICAqIHZhcmlvdXMgbW9kZXMgaW4gd2hpY2ggZGF0YSBjYW4gYmUgZW5jb2RlZCB0byBiaXRzIGluIHRoZSBRUiBjb2RlXG4gICAqIHN0YW5kYXJkLjwvcD5cbiAgICpcbiAgICogQGF1dGhvciBTZWFuIE93ZW5cbiAgICovXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBjaGFyYWN0ZXJDb3VudEJpdHNGb3JWZXJzaW9ucyBub2RvYy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGJpdHMgbm9kb2MuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X25hbWUgbmFtZSBmb3IgdGVzdGluZy5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB3NjliLnFyLk1vZGUgPSBmdW5jdGlvbihjaGFyYWN0ZXJDb3VudEJpdHNGb3JWZXJzaW9ucywgYml0cywgb3B0X25hbWUpIHtcbiAgICB0aGlzLmNoYXJhY3RlckNvdW50Qml0c0ZvclZlcnNpb25zID0gY2hhcmFjdGVyQ291bnRCaXRzRm9yVmVyc2lvbnM7XG4gICAgdGhpcy5iaXRzID0gYml0cztcbiAgICB0aGlzLm5hbWVfID0gb3B0X25hbWUgfHwgJ05PTkFNRSc7XG4gIH07XG4gIHZhciBNb2RlID0gdzY5Yi5xci5Nb2RlO1xuICB2YXIgcHJvID0gTW9kZS5wcm90b3R5cGU7XG5cblxuICAvKiogQGVudW0ge01vZGV9ICovXG5cbiAgdzY5Yi5xci5Nb2RlRW51bSA9IHtcbiAgICAvLyBOb3QgcmVhbGx5IGEgbW9kZS4uLlxuICAgIFRFUk1JTkFUT1I6IG5ldyBNb2RlKFswLCAwLCAwXSwgMHgwMCwgJ1RFUk1JTkFUT1InKSxcbiAgICBOVU1FUklDOiBuZXcgTW9kZShbMTAsIDEyLCAxNF0sIDB4MDEsICdOVU1FUklDJyksXG4gICAgQUxQSEFOVU1FUklDOiBuZXcgTW9kZShbOSwgMTEsIDEzXSwgMHgwMiwgJ0FMUEhBTlVNRVJJQycpLFxuICAgIC8vIE5vdCBzdXBwb3J0ZWRcbiAgICBTVFJVQ1RVUkVEX0FQUEVORDogbmV3IE1vZGUoWzAsIDAsIDBdLCAweDAzLCAnU1RSVUNUVVJFRF9BUFBFTkQnKSxcbiAgICBCWVRFOiBuZXcgTW9kZShbOCwgMTYsIDE2XSwgMHgwNCwgJ0JZVEUnKSxcbiAgICBFQ0k6IG5ldyBNb2RlKFswLCAwLCAwXSwgMHgwNywgJ0VDSScpLCAvLyBjaGFyYWN0ZXIgY291bnRzIGRvbid0IGFwcGx5XG4gICAgS0FOSkk6IG5ldyBNb2RlKFs4LCAxMCwgMTJdLCAweDA4LCAnS0FOSkknKSxcbiAgICBGTkMxX0ZJUlNUX1BPU0lUSU9OOiBuZXcgTW9kZShbMCwgMCwgMF0sIDB4MDUsICdGTkMxX0ZJUlNUX1BPU0lUSU9OJyksXG4gICAgRk5DMV9TRUNPTkRfUE9TSVRJT046IG5ldyBNb2RlKFswLCAwLCAwXSwgMHgwOSwgJ0ZOQzFfU0VDT05EX1BPU0lUSU9OJyksXG4gICAgLyoqIFNlZSBHQlQgMTgyODQtMjAwMDsgXCJIYW56aVwiIGlzIGEgdHJhbnNsaXRlcmF0aW9uIG9mIHRoaXMgbW9kZSBuYW1lLiAqL1xuICAgIEhBTlpJOiBuZXcgTW9kZShbOCwgMTAsIDEyXSwgMHgwRCwgJ0hBTlpJJylcbiAgfTtcbiAgdmFyIE1vZGVFbnVtID0gdzY5Yi5xci5Nb2RlRW51bTtcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3c2OWIucXIuVmVyc2lvbn0gdmVyc2lvbiB2ZXJzaW9uIGluIHF1ZXN0aW9uLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IG51bWJlciBvZiBiaXRzIHVzZWQsIGluIHRoaXMgUVIgQ29kZSBzeW1ib2wge0BsaW5rIFZlcnNpb259ICwgdG9cbiAgICogZW5jb2RlIHRoZSBjb3VudCBvZiBjaGFyYWN0ZXJzIHRoYXQgd2lsbCBmb2xsb3cgZW5jb2RlZCBpbiB0aGlzIE1vZGUuXG4gICAqL1xuICBwcm8uZ2V0Q2hhcmFjdGVyQ291bnRCaXRzID0gZnVuY3Rpb24odmVyc2lvbikge1xuICAgIHZhciBudW1iZXIgPSB2ZXJzaW9uLnZlcnNpb25OdW1iZXI7XG4gICAgdmFyIG9mZnNldDtcbiAgICBpZiAobnVtYmVyIDw9IDkpIHtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPD0gMjYpIHtcbiAgICAgIG9mZnNldCA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldCA9IDI7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNoYXJhY3RlckNvdW50Qml0c0ZvclZlcnNpb25zW29mZnNldF07XG4gIH07XG5cbiAgcHJvLmdldEJpdHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5iaXRzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGRlYnVnIHN0cmluZy5cbiAgICovXG4gIHByby50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWVfO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRzIGZvdXIgYml0cyBlbmNvZGluZyBhIFFSIENvZGUgZGF0YSBtb2RlLlxuICAgKiBAcmV0dXJuIHtNb2RlfSBNb2RlIGVuY29kZWQgYnkgdGhlc2UgYml0cy5cbiAgICovXG4gIE1vZGUuZm9yQml0cyA9IGZ1bmN0aW9uKGJpdHMpIHtcbiAgICBzd2l0Y2ggKGJpdHMpIHtcbiAgICAgIGNhc2UgMHgwOlxuICAgICAgICByZXR1cm4gTW9kZUVudW0uVEVSTUlOQVRPUjtcbiAgICAgIGNhc2UgMHgxOlxuICAgICAgICByZXR1cm4gTW9kZUVudW0uTlVNRVJJQztcbiAgICAgIGNhc2UgMHgyOlxuICAgICAgICByZXR1cm4gTW9kZUVudW0uQUxQSEFOVU1FUklDO1xuICAgICAgY2FzZSAweDM6XG4gICAgICAgIHJldHVybiBNb2RlRW51bS5TVFJVQ1RVUkVEX0FQUEVORDtcbiAgICAgIGNhc2UgMHg0OlxuICAgICAgICByZXR1cm4gTW9kZUVudW0uQllURTtcbiAgICAgIGNhc2UgMHg1OlxuICAgICAgICByZXR1cm4gTW9kZUVudW0uRk5DMV9GSVJTVF9QT1NJVElPTjtcbiAgICAgIGNhc2UgMHg3OlxuICAgICAgICByZXR1cm4gTW9kZUVudW0uRUNJO1xuICAgICAgY2FzZSAweDg6XG4gICAgICAgIHJldHVybiBNb2RlRW51bS5LQU5KSTtcbiAgICAgIGNhc2UgMHg5OlxuICAgICAgICByZXR1cm4gTW9kZUVudW0uRk5DMV9TRUNPTkRfUE9TSVRJT047XG4gICAgICBjYXNlIDB4RDpcbiAgICAgICAgLy8gMHhEIGlzIGRlZmluZWQgaW4gR0JUIDE4Mjg0LTIwMDAsIG1heSBub3QgYmUgc3VwcG9ydGVkIGluIGZvcmVpZ25cbiAgICAgICAgLy8gY291bnRyeVxuICAgICAgICByZXR1cm4gTW9kZUVudW0uSEFOWkk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9XG4gIH07XG59KTtcblxuIiwiZ29vZy5wcm92aWRlKCd3NjliLnV0ZjgnKTtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIHV0ZjguanNcbiAqIExpY2Vuc2U6IEFwYWNoZTIsIHYyIHNlZSBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqIEBhdXRob3IgbWJAdzY5Yi5jb20gKE1hbnVlbCBCcmF1bilcbiAqL1xuKGZ1bmN0aW9uKGdsb2JhbCkge1xuICAvKipcbiAgICogQGxpY2Vuc2VcbiAgICogU25pcHBldCBmaXhlZENoYXJDb2RlQXQgYm9ycm93ZWQgZnJvbSBodHRwOi8vZ29vLmdsLzNsUnBSLlxuICAgKiAoYykgc2VlIGNvbnRyaWJ1dGVycyBvZiBzaXRlLlxuICAgKiBMaWNlbnNlOiBNSVRcbiAgKi9cbiAgZnVuY3Rpb24gZml4ZWRDaGFyQ29kZUF0KHN0ciwgaWR4KSB7XG4gICAgICB2YXIgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCk7XG4gICAgICB2YXIgaGksIGxvdztcbiAgICAgIC8vIEhpZ2ggc3Vycm9nYXRlIChjb3VsZCBjaGFuZ2UgbGFzdCBoZXggdG8gMHhEQjdGIHRvIHRyZWF0IGhpZ2ggcHJpdmF0ZVxuICAgICAgLy8gc3Vycm9nYXRlcyBhcyBzaW5nbGUgY2hhcmFjdGVycylcbiAgICAgIGlmICgweEQ4MDAgPD0gY29kZSAmJiBjb2RlIDw9IDB4REJGRikge1xuICAgICAgICAgIGhpID0gY29kZTtcbiAgICAgICAgICBsb3cgPSBzdHIuY2hhckNvZGVBdChpZHggKyAxKTtcbiAgICAgICAgICBpZiAoaXNOYU4obG93KSkge1xuICAgICAgICAgICAgdGhyb3cgJ2ZpeGVkQ2hhckNvZGVBdDogSW52YWxpZCBFbmNvZGluZyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAoKGhpIC0gMHhEODAwKSAqIDB4NDAwKSArIChsb3cgLSAweERDMDApICsgMHgxMDAwMDtcbiAgICAgIH1cbiAgICAgIC8vIFdlIHJldHVybiBmYWxzZSB0byBhbGxvdyBsb29wcyB0byBza2lwIHRoaXMgaXRlcmF0aW9uIHNpbmNlIHNob3VsZFxuICAgICAgLy8gaGF2ZSBhbHJlYWR5IGhhbmRsZWQgaGlnaCBzdXJyb2dhdGUgYWJvdmUgaW4gdGhlIHByZXZpb3VzIGl0ZXJhdGlvblxuICAgICAgLy8gTG93IHN1cnJvZ2F0ZVxuICAgICAgaWYgKDB4REMwMCA8PSBjb2RlICYmIGNvZGUgPD0gMHhERkZGKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvZGU7XG4gIH1cblxuICAvKipcbiAgICogQGxpY2Vuc2VcbiAgICogZml4ZWRGcm9tQ29kZVBvaW50XG4gICogQ29udmVydCBhcnJheSBvZiB1bmljb2RlIGNvZGUgcG9pbnRzIHRvIHN0cmluZy5cbiAgKiBPcmlnaW5hbGx5IGZyb206XG4gICogRVM2IFVuaWNvZGUgU2hpbXMgMC4xXG4gICogKGMpIDIwMTIgU3RldmVuIExldml0aGFuIDxodHRwOi8vc2xldml0aGFuLmNvbS8+XG4gICogTUlUIExpY2Vuc2VcbiAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBjb2RlUG9pbnRzIGNvZGVQb2ludHMgc2VxdWVuY2UuXG4gICogQHJldHVybiB7c3RyaW5nfSByZXN1bHRpbmcgc3RyaW5nLlxuICAqL1xuICBmdW5jdGlvbiBmaXhlZEZyb21Db2RlUG9pbnQoY29kZVBvaW50cykge1xuICAgIHZhciBjaGFycyA9IFtdLCBwb2ludCwgb2Zmc2V0LCB1bml0cywgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgcG9pbnQgPSBjb2RlUG9pbnRzW2ldO1xuICAgICAgb2Zmc2V0ID0gcG9pbnQgLSAweDEwMDAwO1xuICAgICAgdW5pdHMgPSBwb2ludCA+IDB4RkZGRiA/XG4gICAgICAgIFsweEQ4MDAgKyAob2Zmc2V0ID4+IDEwKSwgMHhEQzAwICsgKG9mZnNldCAmIDB4M0ZGKV0gOiBbcG9pbnRdO1xuICAgICAgY2hhcnMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHVuaXRzKSk7XG4gICAgfVxuICAgIHJldHVybiBjaGFycy5qb2luKCcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHN0cmluZyB0byBVVEY4IGJ5dGUgc2VxdWVuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgamF2YXNjcmlwdCBzdHJpbmcgKHVuaWNvZGUpLlxuICAgKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn0gYnl0ZSBzZXF1ZW5jZS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvVVRGOEJ5dGVzKHN0cikge1xuICAgIHZhciBieXRlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgY29kZVBvaW50ID0gZml4ZWRDaGFyQ29kZUF0KHN0ciwgaSk7XG4gICAgICAvLyBhbHJlYWR5IGhhbmRlbGVkXG4gICAgICBpZiAoIWNvZGVQb2ludCkgY29udGludWU7XG4gICAgICBpZiAoY29kZVBvaW50IDw9IDB4N0YpIHtcbiAgICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpO1xuICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPD0gMHgwN0ZGKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goMHhDMCB8IChjb2RlUG9pbnQgPj4gNikpO1xuICAgICAgICBieXRlcy5wdXNoKDB4ODAgfCAoY29kZVBvaW50ICYgMHgzRikpO1xuICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPD0gMHhGRkZGKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goMHhFMCB8IChjb2RlUG9pbnQgPj4gMTIpKTtcbiAgICAgICAgYnl0ZXMucHVzaCgweDgwIHwgKDB4M0YgJiAoY29kZVBvaW50ID4+IDYpKSk7XG4gICAgICAgIGJ5dGVzLnB1c2goMHg4MCB8IChjb2RlUG9pbnQgJiAweDNGKSk7XG4gICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8PSAweDFGRkZGRikge1xuICAgICAgICBieXRlcy5wdXNoKDB4RjAgfCAoY29kZVBvaW50ID4+IDE4KSk7XG4gICAgICAgIGJ5dGVzLnB1c2goMHg4MCB8ICgweDNGICYgKGNvZGVQb2ludCA+PiAxMikpKTtcbiAgICAgICAgYnl0ZXMucHVzaCgweDgwIHwgKDB4M0YgJiAoY29kZVBvaW50ID4+IDYpKSk7XG4gICAgICAgIGJ5dGVzLnB1c2goMHg4MCB8IChjb2RlUG9pbnQgJiAweDNGKSk7XG4gICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8PSAweDNGRkZGRkYpIHtcbiAgICAgICAgYnl0ZXMucHVzaCgweEYwIHwgKGNvZGVQb2ludCA+PiAyNCkpO1xuICAgICAgICBieXRlcy5wdXNoKDB4ODAgfCAoMHgzRiAmIChjb2RlUG9pbnQgPj4gMTgpKSk7XG4gICAgICAgIGJ5dGVzLnB1c2goMHg4MCB8ICgweDNGICYgKGNvZGVQb2ludCA+PiAxMikpKTtcbiAgICAgICAgYnl0ZXMucHVzaCgweDgwIHwgKDB4M0YgJiAoY29kZVBvaW50ID4+IDYpKSk7XG4gICAgICAgIGJ5dGVzLnB1c2goMHg4MCB8IChjb2RlUG9pbnQgJiAweDNGKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBieXRlcy5wdXNoKDB4RjAgfCAoMHgwMSAmIChjb2RlUG9pbnQgPj4gMzApKSk7XG4gICAgICAgIGJ5dGVzLnB1c2goMHg4MCB8ICgweDNGICYgKGNvZGVQb2ludCA+PiAyNCkpKTtcbiAgICAgICAgYnl0ZXMucHVzaCgweDgwIHwgKDB4M0YgJiAoY29kZVBvaW50ID4+IDE4KSkpO1xuICAgICAgICBieXRlcy5wdXNoKDB4ODAgfCAoMHgzRiAmIChjb2RlUG9pbnQgPj4gMTIpKSk7XG4gICAgICAgIGJ5dGVzLnB1c2goMHg4MCB8ICgweDNGICYgKGNvZGVQb2ludCA+PiA2KSkpO1xuICAgICAgICBieXRlcy5wdXNoKDB4ODAgfCAoY29kZVBvaW50ICYgMHgzRikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYnl0ZXM7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBVVEY4IGJ5dGUgc2VxdWVuY2UgdG8gc3RyaW5nLlxuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBieXRlcyBVVEY4IGJ5dGUgc2VxdWVuY2UuXG4gICAqIEByZXR1cm4gez9zdHJpbmd9IHJlc3VsdCBzdHJpbmcgb3IgbnVsbCBvbiBlcnJvciAoaW52YWxpZCBpbnB1dCkuXG4gICAqL1xuICBmdW5jdGlvbiBVVEY4Qnl0ZXNUb1N0cmluZyhieXRlcykge1xuICAgIHZhciBsZW5ndGggPSBieXRlcy5sZW5ndGg7XG4gICAgdmFyIGdldENvbnRpbnVhdGlvbiA9IGZ1bmN0aW9uKGlkeCkge1xuICAgICAgaWYgKGlkeCA+IGxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICB2YXIgYiA9IGJ5dGVzW2lkeF07XG4gICAgICBpZiAoKGIgJiAweEMwKSAhPT0gMHg4MCkgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICByZXR1cm4gYiAmIDB4M0Y7XG4gICAgfTtcbiAgICB2YXIgY29kZVBvaW50cyA9IFtdO1xuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBiID0gYnl0ZXNbaV07XG4gICAgICAgIGlmIChiID4gMHhGRikgcmV0dXJuIG51bGw7XG4gICAgICAgIHZhciBjb2RlO1xuICAgICAgICBpZiAoKGIgJiAweDgwKSA9PT0gMHgwMCkge1xuICAgICAgICAgIC8vIEZpcnN0IGJpdCBub3Qgc2V0LCBzbyBpdCBpcyBhIDEtYnl0ZSBjaGFyLlxuICAgICAgICAgIGNvZGUgPSBiO1xuICAgICAgICB9IGVsc2UgaWYgKChiICYgMHhFMCkgPT09IDB4QzApIHtcbiAgICAgICAgICAvLyAyIGJ5dGVzLlxuICAgICAgICAgIGNvZGUgPSAoKDB4MUYgJiBiKSA8PCA2KSB8IGdldENvbnRpbnVhdGlvbihpICsgMSk7XG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKChiICYgMHhGMCkgPT09IDB4RTApIHtcbiAgICAgICAgICAvLyAzIGJ5dGVzLlxuICAgICAgICAgIGNvZGUgPSAoKDB4MEYgJiBiKSA8PCAxMikgfFxuICAgICAgICAgICAgKGdldENvbnRpbnVhdGlvbihpICsgMSkgPDwgNikgfFxuICAgICAgICAgICAgZ2V0Q29udGludWF0aW9uKGkgKyAyKTtcbiAgICAgICAgICBpICs9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAoKGIgJiAweEY4KSA9PT0gMHhGMCkge1xuICAgICAgICAgIC8vIDQgYnl0ZXMuXG4gICAgICAgICAgY29kZSA9ICgoMHgwNyAmIGIpIDw8IDE4KSB8XG4gICAgICAgICAgICAoZ2V0Q29udGludWF0aW9uKGkgKyAxKSA8PCAxMikgfFxuICAgICAgICAgICAgKGdldENvbnRpbnVhdGlvbihpICsgMikgPDwgNikgfFxuICAgICAgICAgICAgZ2V0Q29udGludWF0aW9uKGkgKyAzKTtcbiAgICAgICAgICBpICs9IDM7XG4gICAgICAgIH0gZWxzZSBpZiAoKGIgJiAweEZDKSA9PT0gMHhGOCkge1xuICAgICAgICAgIC8vIDUgYnl0ZXMuXG4gICAgICAgICAgY29kZSA9ICgoMHgwMyAmIGIpIDw8IDI0KSB8XG4gICAgICAgICAgICAoZ2V0Q29udGludWF0aW9uKGkgKyAxKSA8PCAxOCkgfFxuICAgICAgICAgICAgKGdldENvbnRpbnVhdGlvbihpICsgMikgPDwgMTIpIHxcbiAgICAgICAgICAgIChnZXRDb250aW51YXRpb24oaSArIDMpIDw8IDYpIHxcbiAgICAgICAgICAgIGdldENvbnRpbnVhdGlvbihpICsgNCk7XG4gICAgICAgICAgaSArPSA0O1xuICAgICAgICB9IGVsc2UgaWYgKChiICYgMHhGRSkgPT09IDB4RkMpIHtcbiAgICAgICAgICAvLyA2IGJ5dGVzLlxuICAgICAgICAgIGNvZGUgPSAoKDB4MDEgJiBiKSA8PCAzMCkgfFxuICAgICAgICAgICAgKGdldENvbnRpbnVhdGlvbihpICsgMSkgPDwgMjQpIHxcbiAgICAgICAgICAgIChnZXRDb250aW51YXRpb24oaSArIDIpIDw8IDE4KSB8XG4gICAgICAgICAgICAoZ2V0Q29udGludWF0aW9uKGkgKyAzKSA8PCAxMikgfFxuICAgICAgICAgICAgKGdldENvbnRpbnVhdGlvbihpICsgNCkgPDwgNikgfFxuICAgICAgICAgICAgZ2V0Q29udGludWF0aW9uKGkgKyA1KTtcbiAgICAgICAgICBpICs9IDU7XG4gICAgICAgIH1cbiAgICAgICAgY29kZVBvaW50cy5wdXNoKGNvZGUpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGlnbm9yZWQpIHtcbiAgICAgIC8vIE91ciBpbnZhbGlkLWluY29kaW5nIGV4Y2VwdGlvbiBpcyB0aGUgb25seSBvbmUgdGhyb3duXG4gICAgICAvLyB0aGlzIGJsb2NrLCBzbyBqdXN0IHJldHVybiBudWxsLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmaXhlZEZyb21Db2RlUG9pbnQoY29kZVBvaW50cyk7XG4gIH1cblxuICAvLyBQdWJsaWMgQVBJLlxuICB2YXIgZXhwb3J0cyA9IHtcbiAgICBzdHJpbmdUb1VURjhCeXRlczogc3RyaW5nVG9VVEY4Qnl0ZXMsXG4gICAgVVRGOEJ5dGVzVG9TdHJpbmc6IFVURjhCeXRlc1RvU3RyaW5nXG4gIH07XG5cbiAgaWYgKHR5cGVvZihnb29nKSA9PSAnb2JqZWN0JyAmJiBnb29nLnByb3ZpZGUpIHtcbiAgICAvLyBHb29nbGUgQ2xvc3VyZSBUb29scyBjb21wYXRpYmlsaXR5IGhvb2suXG4gICAgdzY5Yi51dGY4LnN0cmluZ1RvVVRGOEJ5dGVzID0gc3RyaW5nVG9VVEY4Qnl0ZXM7XG4gICAgdzY5Yi51dGY4LlVURjhCeXRlc1RvU3RyaW5nID0gVVRGOEJ5dGVzVG9TdHJpbmc7XG4gIH0gZWxzZSBpZiAodHlwZW9mKGdsb2JhbC5kZWZpbmUpID09ICdmdW5jdGlvbicpIHtcbiAgICAvLyByZXF1aXJlIGpzIGNvbXBhdGliaWxpdHkgaG9vay5cbiAgICBnbG9iYWwuZGVmaW5lKGV4cG9ydHMpO1xuICB9IGVsc2Uge1xuICAgIC8vIFBsYWluIG9sZCBnbG9iYWwgZXhwb3J0IGZhbGxiYWNrLlxuICAgIGdsb2JhbFsndXRmOCddID0gZXhwb3J0cztcbiAgfVxufSkoc2VsZik7XG4iLCIvKlxuIEBsaWNlbnNlXG4gU2luZ2xlYnl0ZSBlbmNvZGluZ3MgdmFsdWVzIHBvcnRlZCBmcm9tIGljb252LWxpdGUgKGZvciBub2RlanMpLlxuIGdvb2dsZSBjbG9zdXJlL2Jyb3dzZXIgcG9ydCAyMDEzIGJ5IE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG5cbiBMSUNFTlNFIG9mIGljb252ZS1saXRlOlxuXG4gQ29weXJpZ2h0IChjKSAyMDExIEFsZXhhbmRlciBTaHR1Y2hraW5cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkVcbiBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OXG4gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuZ29vZy5wcm92aWRlKCd3NjliLmljb252bGl0ZScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnV0ZjgnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5vYmplY3QnKTtcblxuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICB2YXIgXyA9IHc2OWIuaWNvbnZsaXRlO1xuICBfLlNJTkdMRUJZVEVTID0ge1xuICAgICdDcDEyNTEnOiAn0ILQg+KAmtGT4oCe4oCm4oCg4oCh4oKs4oCw0InigLnQitCM0IvQj9GS4oCY4oCZ4oCc4oCd4oCi4oCT4oCU77+94oSi0ZnigLrRmtGc0ZvRn1xceGEw0I7RntCIwqTSkMKmwqfQgcKp0ITCq8Kswq3CrtCHwrDCsdCG0ZbSkcK1wrbCt9GR4oSW0ZTCu9GY0IXRldGX0JDQkdCS0JPQlNCV0JbQl9CY0JnQmtCb0JzQndCe0J/QoNCh0KLQo9Ck0KXQptCn0KjQqdCq0KvQrNCt0K7Qr9Cw0LHQstCz0LTQtdC20LfQuNC50LrQu9C80L3QvtC/0YDRgdGC0YPRhNGF0YbRh9GI0YnRitGL0YzRjdGO0Y8nLFxuICAgICdDcDEyNTInOiAn4oKs77+94oCaxpLigJ7igKbigKDigKHLhuKAsMWg4oC5xZLvv73Fve+/ve+/veKAmOKAmeKAnOKAneKAouKAk+KAlMuc4oSixaHigLrFk++/vcW+xbhcXHhhMMKhwqLCo8KkwqXCpsKnwqjCqcKqwqvCrMKtwq7Cr8KwwrHCssKzwrTCtcK2wrfCuMK5wrrCu8K8wr3CvsK/w4DDgcOCw4PDhMOFw4bDh8OIw4nDisOLw4zDjcOOw4/DkMORw5LDk8OUw5XDlsOXw5jDmcOaw5vDnMOdw57Dn8Ogw6HDosOjw6TDpcOmw6fDqMOpw6rDq8Osw63DrsOvw7DDscOyw7PDtMO1w7bDt8O4w7nDusO7w7zDvcO+w78nLFxuICAgICdDcDEyNTYnOiAn4oKs2b7igJrGkuKAnuKApuKAoOKAocuG4oCw2bnigLnFktqG2pjaiNqv4oCY4oCZ4oCc4oCd4oCi4oCT4oCU2qnihKLakeKAusWT4oCM4oCN2rpcXHhhMNiMwqLCo8KkwqXCpsKnwqjCqdq+wqvCrMKtwq7Cr8KwwrHCssKzwrTCtcK2wrfCuMK52JvCu8K8wr3Cvtif24HYodii2KPYpNil2KbYp9io2KnYqtir2KzYrdiu2K/YsNix2LLYs9i02LXYtsOX2LfYuNi52LrZgNmB2YLZg8Og2YTDotmF2YbZh9mIw6fDqMOpw6rDq9mJ2YrDrsOv2YvZjNmN2Y7DtNmP2ZDDt9mRw7nZksO7w7zigI7igI/bkicsXG4gICAgJ0lTTy04ODU5LTEnOiAnwoDCgcKCwoPChMKFwobCh8KIwonCisKLwozCjcKOwo/CkMKRwpLCk8KUwpXClsKXwpjCmcKawpvCnMKdwp7Cn1xceGEwwqHCosKjwqTCpcKmwqfCqMKpwqrCq8Kswq3CrsKvwrDCscKywrPCtMK1wrbCt8K4wrnCusK7wrzCvcK+wr/DgMOBw4LDg8OEw4XDhsOHw4jDicOKw4vDjMONw47Dj8OQw5HDksOTw5TDlcOWw5fDmMOZw5rDm8Ocw53DnsOfw6DDocOiw6PDpMOlw6bDp8Oow6nDqsOrw6zDrcOuw6/DsMOxw7LDs8O0w7XDtsO3w7jDucO6w7vDvMO9w77DvycsXG4gICAgJ0lTTy04ODU5LTInOiAnwoDCgcKCwoPChMKFwobCh8KIwonCisKLwozCjcKOwo/CkMKRwpLCk8KUwpXClsKXwpjCmcKawpvCnMKdwp7Cn1xceGEwxITLmMWBwqTEvcWawqfCqMWgxZ7FpMW5wq3FvcW7wrDEhcubxYLCtMS+xZvLh8K4xaHFn8WlxbrLncW+xbzFlMOBw4LEgsOExLnEhsOHxIzDicSYw4vEmsONw47EjsSQxYPFh8OTw5TFkMOWw5fFmMWuw5rFsMOcw53FosOfxZXDocOixIPDpMS6xIfDp8SNw6nEmcOrxJvDrcOuxI/EkcWExYjDs8O0xZHDtsO3xZnFr8O6xbHDvMO9xaPLmScsXG4gICAgJ0lTTy04ODU5LTMnOiAnwoDCgcKCwoPChMKFwobCh8KIwonCisKLwozCjcKOwo/CkMKRwpLCk8KUwpXClsKXwpjCmcKawpvCnMKdwp7Cn1xceGEwxKbLmMKjwqTvv73EpMKnwqjEsMWexJ7EtMKt77+9xbvCsMSnwrLCs8K0wrXEpcK3wrjEscWfxJ/EtcK977+9xbzDgMOBw4Lvv73DhMSKxIjDh8OIw4nDisOLw4zDjcOOw4/vv73DkcOSw5PDlMSgw5bDl8Scw5nDmsObw5zFrMWcw5/DoMOhw6Lvv73DpMSLxInDp8Oow6nDqsOrw6zDrcOuw6/vv73DscOyw7PDtMShw7bDt8Sdw7nDusO7w7zFrcWdy5knLFxuICAgICdJU08tODg1OS00JzogJ8KAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp9cXHhhMMSExLjFlsKkxKjEu8KnwqjFoMSSxKLFpsKtxb3Cr8KwxIXLm8WXwrTEqcS8y4fCuMWhxJPEo8WnxYrFvsWLxIDDgcOCw4PDhMOFw4bErsSMw4nEmMOLxJbDjcOOxKrEkMWFxYzEtsOUw5XDlsOXw5jFssOaw5vDnMWoxarDn8SBw6HDosOjw6TDpcOmxK/EjcOpxJnDq8SXw63DrsSrxJHFhsWNxLfDtMO1w7bDt8O4xbPDusO7w7zFqcWry5knLFxuICAgICdJU08tODg1OS01JzogJ8KAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp9cXHhhMNCB0ILQg9CE0IXQhtCH0IjQidCK0IvQjMKt0I7Qj9CQ0JHQktCT0JTQldCW0JfQmNCZ0JrQm9Cc0J3QntCf0KDQodCi0KPQpNCl0KbQp9Co0KnQqtCr0KzQrdCu0K/QsNCx0LLQs9C00LXQttC30LjQudC60LvQvNC90L7Qv9GA0YHRgtGD0YTRhdGG0YfRiNGJ0YrRi9GM0Y3RjtGP4oSW0ZHRktGT0ZTRldGW0ZfRmNGZ0ZrRm9GcwqfRntGfJyxcbiAgICAnSVNPLTg4NTktNic6ICfCgMKBwoLCg8KEwoXChsKHwojCicKKwovCjMKNwo7Cj8KQwpHCksKTwpTClcKWwpfCmMKZwprCm8Kcwp3CnsKfXFx4YTDvv73vv73vv73CpO+/ve+/ve+/ve+/ve+/ve+/ve+/vdiMwq3vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73Ym++/ve+/ve+/vdif77+92KHYotij2KTYpdim2KfYqNip2KrYq9is2K3Yrtiv2LDYsdiy2LPYtNi12LbYt9i42LnYuu+/ve+/ve+/ve+/ve+/vdmA2YHZgtmD2YTZhdmG2YfZiNmJ2YrZi9mM2Y3ZjtmP2ZDZkdmS77+977+977+977+977+977+977+977+977+977+977+977+977+9JyxcbiAgICAnSVNPLTg4NTktNyc6ICfCgMKBwoLCg8KEwoXChsKHwojCicKKwovCjMKNwo7Cj8KQwpHCksKTwpTClcKWwpfCmMKZwprCm8Kcwp3CnsKfXFx4YTDigJjigJnCo+KCrOKCr8KmwqfCqMKpzbrCq8Kswq3vv73igJXCsMKxwrLCs86EzoXOhsK3zojOic6KwrvOjMK9zo7Oj86QzpHOks6TzpTOlc6WzpfOmM6ZzprOm86czp3Ons6fzqDOoe+/vc6jzqTOpc6mzqfOqM6pzqrOq86szq3Ors6vzrDOsc6yzrPOtM61zrbOt864zrnOus67zrzOvc6+zr/PgM+Bz4LPg8+Ez4XPhs+Hz4jPic+Kz4vPjM+Nz47vv70nLFxuICAgICdJU08tODg1OS04JzogJ8KAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp9cXHhhMO+/vcKiwqPCpMKlwqbCp8KowqnDl8KrwqzCrcKuwq/CsMKxwrLCs8K0wrXCtsK3wrjCucO3wrvCvMK9wr7vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73igJfXkNeR15LXk9eU15XXlteX15jXmdea15vXnNed157Xn9eg16HXotej16TXpdem16fXqNep16rvv73vv73igI7igI/vv70nLFxuICAgICdJU08tODg1OS05JzogJ8KAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp9cXHhhMMKhwqLCo8KkwqXCpsKnwqjCqcKqwqvCrMKtwq7Cr8KwwrHCssKzwrTCtcK2wrfCuMK5wrrCu8K8wr3CvsK/w4DDgcOCw4PDhMOFw4bDh8OIw4nDisOLw4zDjcOOw4/EnsORw5LDk8OUw5XDlsOXw5jDmcOaw5vDnMSwxZ7Dn8Ogw6HDosOjw6TDpcOmw6fDqMOpw6rDq8Osw63DrsOvxJ/DscOyw7PDtMO1w7bDt8O4w7nDusO7w7zEscWfw78nLFxuICAgICdJU08tODg1OS0xMCc6ICfCgMKBwoLCg8KEwoXChsKHwojCicKKwovCjMKNwo7Cj8KQwpHCksKTwpTClcKWwpfCmMKZwprCm8Kcwp3CnsKfXFx4YTDEhMSSxKLEqsSoxLbCp8S7xJDFoMWmxb3CrcWqxYrCsMSFxJPEo8SrxKnEt8K3xLzEkcWhxafFvuKAlcWrxYvEgMOBw4LDg8OEw4XDhsSuxIzDicSYw4vElsONw47Dj8OQxYXFjMOTw5TDlcOWxajDmMWyw5rDm8Ocw53DnsOfxIHDocOiw6PDpMOlw6bEr8SNw6nEmcOrxJfDrcOuw6/DsMWGxY3Ds8O0w7XDtsWpw7jFs8O6w7vDvMO9w77EuCcsXG4gICAgJ0lTTy04ODU5LTExJzogJ8KAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp9cXHhhMOC4geC4guC4g+C4hOC4heC4huC4h+C4iOC4ieC4iuC4i+C4jOC4jeC4juC4j+C4kOC4keC4kuC4k+C4lOC4leC4luC4l+C4mOC4meC4muC4m+C4nOC4neC4nuC4n+C4oOC4oeC4ouC4o+C4pOC4peC4puC4p+C4qOC4qeC4quC4q+C4rOC4reC4ruC4r+C4sOC4seC4suC4s+C4tOC4teC4tuC4t+C4uOC4ueC4uu+/ve+/ve+/ve+/veC4v+C5gOC5geC5guC5g+C5hOC5heC5huC5h+C5iOC5ieC5iuC5i+C5jOC5jeC5juC5j+C5kOC5keC5kuC5k+C5lOC5leC5luC5l+C5mOC5meC5muC5m++/ve+/ve+/ve+/vScsXG4gICAgJ0lTTy04ODU5LTEzJzogJ8KAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp9cXHhhMOKAncKiwqPCpOKAnsKmwqfDmMKpxZbCq8Kswq3CrsOGwrDCscKywrPigJzCtcK2wrfDuMK5xZfCu8K8wr3CvsOmxITErsSAxIbDhMOFxJjEksSMw4nFucSWxKLEtsSqxLvFoMWDxYXDk8WMw5XDlsOXxbLFgcWaxarDnMW7xb3Dn8SFxK/EgcSHw6TDpcSZxJPEjcOpxbrEl8SjxLfEq8S8xaHFhMWGw7PFjcO1w7bDt8WzxYLFm8Wrw7zFvMW+4oCZJyxcbiAgICAnSVNPLTg4NTktMTQnOiAnwoDCgcKCwoPChMKFwobCh8KIwonCisKLwozCjcKOwo/CkMKRwpLCk8KUwpXClsKXwpjCmcKawpvCnMKdwp7Cn1xceGEw4biC4biDwqPEisSL4biKwqfhuoDCqeG6guG4i+G7ssKtwq7FuOG4nuG4n8SgxKHhuYDhuYHCtuG5luG6geG5l+G6g+G5oOG7s+G6hOG6heG5ocOAw4HDgsODw4TDhcOGw4fDiMOJw4rDi8OMw43DjsOPxbTDkcOSw5PDlMOVw5bhuarDmMOZw5rDm8Ocw53FtsOfw6DDocOiw6PDpMOlw6bDp8Oow6nDqsOrw6zDrcOuw6/FtcOxw7LDs8O0w7XDtuG5q8O4w7nDusO7w7zDvcW3w78nLFxuICAgICdJU08tODg1OS0xNSc6ICfCgMKBwoLCg8KEwoXChsKHwojCicKKwovCjMKNwo7Cj8KQwpHCksKTwpTClcKWwpfCmMKZwprCm8Kcwp3CnsKfXFx4YTDCocKiwqPigqzCpcWgwqfFocKpwqrCq8Kswq3CrsKvwrDCscKywrPFvcK1wrbCt8W+wrnCusK7xZLFk8W4wr/DgMOBw4LDg8OEw4XDhsOHw4jDicOKw4vDjMONw47Dj8OQw5HDksOTw5TDlcOWw5fDmMOZw5rDm8Ocw53DnsOfw6DDocOiw6PDpMOlw6bDp8Oow6nDqsOrw6zDrcOuw6/DsMOxw7LDs8O0w7XDtsO3w7jDucO6w7vDvMO9w77DvycsXG4gICAgJ0lTTy04ODU5LTE2JzogJ8KAwoHCgsKDwoTChcKGwofCiMKJworCi8KMwo3CjsKPwpDCkcKSwpPClMKVwpbCl8KYwpnCmsKbwpzCncKewp9cXHhhMMSExIXFgeKCrOKAnsWgwqfFocKpyJjCq8W5wq3FusW7wrDCscSMxYLFveKAncK2wrfFvsSNyJnCu8WSxZPFuMW8w4DDgcOCxILDhMSGw4bDh8OIw4nDisOLw4zDjcOOw4/EkMWDw5LDk8OUxZDDlsWaxbDDmcOaw5vDnMSYyJrDn8Ogw6HDosSDw6TEh8Omw6fDqMOpw6rDq8Osw63DrsOvxJHFhMOyw7PDtMWRw7bFm8Wxw7nDusO7w7zEmcibw78nXG4gIH07XG4gIF8uQVNDSUkgPSAnXFx4MDBcXHgwMVxceDAyXFx4MDNcXHgwNFxceDA1XFx4MDZcXHgwN1xceDA4XFx0XFxuXFx4MGJcXHgwY1xcclxceDBlXFx4MGZcXHgxMFxceDExXFx4MTJcXHgxM1xceDE0XFx4MTVcXHgxNlxceDE3XFx4MThcXHgxOVxceDFhXFx4MWJcXHgxY1xceDFkXFx4MWVcXHgxZicgK1xuICAgICcgIVwiIyQlJlxcJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9flxceDdmJztcblxuICBfLlJFVkVSU0VfTUFQU18gPSB7fTtcblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gYnl0ZXMgc2VxdWVuY2Ugb2YgZ2l2ZW4gY2hhcnNldC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNoYXJzZXQgbmFtZSBvZiBjaGFyc2V0LlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGRlY29kZWQgc3RyaW5nLlxuICAgKi9cbiAgXy50b1N0cmluZyA9IGZ1bmN0aW9uKGJ5dGVzLCBjaGFyc2V0KSB7XG4gICAgdmFyIGNoYXJzID0gXy5BU0NJSSArIF8uU0lOR0xFQllURVNbY2hhcnNldF07XG4gICAgaWYgKCFjaGFycykgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgcmV0dXJuIGJ5dGVzLm1hcChmdW5jdGlvbihiKSB7XG4gICAgICByZXR1cm4gY2hhcnNbYl07XG4gICAgfSkuam9pbignJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyc2V0IG5hbWUgYXMgc3BlY2lmaWVkIGFib3ZlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBpZiBjaGFyc2V0IGlzIHN1cHBvcnRlZC5cbiAgICovXG4gIF8uaXNTdXBwb3J0ZWQgPSBmdW5jdGlvbihjaGFyc2V0KSB7XG4gICAgcmV0dXJuICEhXy5TSU5HTEVCWVRFU1tjaGFyc2V0XTtcbiAgfTtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBlbmNvZGVkIGluIGNoYXJzZXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyc2V0IGNoYXJzZXQgbmFtZVxuICAgKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn0gYnl0ZXMuXG4gICAqL1xuICBfLnRvQnl0ZXMgPSBmdW5jdGlvbihzdHJpbmcsIGNoYXJzZXQpIHtcbiAgICB2YXIgbWFwID0gXy5nZXRSZXZlcnNlTWFwXyhjaGFyc2V0KTtcbiAgICB2YXIgYnl0ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGIgPSBtYXBbc3RyaW5nW2ldXTtcbiAgICAgIGlmIChiID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xuICAgICAgYnl0ZXMucHVzaChiKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhcnNldCBuYW1lLlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IHJldmVyc2UgbWFwIChtYXBwaW5nIHN0ciB0byBieXRlcykuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfLmdldFJldmVyc2VNYXBfID0gZnVuY3Rpb24oY2hhcnNldCkge1xuICAgIHZhciBtYXAgPSBfLlJFVkVSU0VfTUFQU19bY2hhcnNldF07XG4gICAgaWYgKCFtYXApIHtcbiAgICAgIG1hcCA9IHt9O1xuICAgICAgdmFyIGNoYXJzID0gXy5BU0NJSSArIF8uU0lOR0xFQllURVNbY2hhcnNldF07XG4gICAgICBpZiAoIWNoYXJzKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgbWFwW2NoYXJzW2ldXSA9IGk7XG4gICAgICB9XG4gICAgfVxuICAgIF8uUkVWRVJTRV9NQVBTX1tjaGFyc2V0XSA9IG1hcDtcbiAgICByZXR1cm4gbWFwO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheS48c3RyaW5nPn0gc3VwcG9ydGVkIGNoYXJzZXRzLlxuICAgKi9cbiAgXy5nZXRTdXBwb3J0ZWRDaGFyc2V0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnb29nLm9iamVjdC5nZXRLZXlzKF8uU0lOR0xFQllURVMpO1xuICB9O1xuXG59KTtcbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbmdvb2cucHJvdmlkZSgndzY5Yi5xci5zdHJpbmd1dGlscycpO1xuZ29vZy5yZXF1aXJlKCd3NjliLmljb252bGl0ZScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkRlY29kZUhpbnRUeXBlJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuSW52YWxpZENoYXJzZXRFcnJvcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnV0ZjgnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgdmFyIF8gPSB3NjliLnFyLnN0cmluZ3V0aWxzO1xuICB2YXIgdXRmOCA9IHc2OWIudXRmODtcbiAgdmFyIGljb252ID0gc2VsZi5pY29udjtcbiAgdmFyIGljb252bGl0ZSA9IHc2OWIuaWNvbnZsaXRlO1xuICB2YXIgSW52YWxpZENoYXJzZXRFcnJvciA9IHc2OWIucXIuSW52YWxpZENoYXJzZXRFcnJvcjtcblxuICBfLlNISUZUX0pJUyA9ICdTSElGVF9KSVMnO1xuICBfLkdCMjMxMiA9ICdHQjE4MDMwJztcbiAgXy5FVUNfSlAgPSAnRVVDLUpQJztcbiAgXy5VVEY4ID0gJ1VURi04JztcbiAgXy5JU084ODU5MSA9ICdJU08tODg1OS0xJztcbiAgXy5QTEFURk9STV9ERUZBVUxUX0VOQ09ESU5HID0gXy5VVEY4O1xuICBfLkFTU1VNRV9TSElGVF9KSVMgPSBmYWxzZTtcbiAgLy8gU0hJRlRfSklTLmVxdWFsc0lnbm9yZUNhc2UoUExBVEZPUk1fREVGQVVMVF9FTkNPRElORykgfHxcbiAgLy8gRVVDX0pQLmVxdWFsc0lnbm9yZUNhc2UoUExBVEZPUk1fREVGQVVMVF9FTkNPRElORyk7XG5cblxuICAvKipcbiAgICogRGVjb2RlcyBieXRlcyBieXRlcyBhcnJheSBhcyByZXR1cm5lZCBieSBnZXRCeXRlcygpLlxuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBieXRlcyBzZXF1ZW5jZSBvZiBnaXZlbiBjaGFyc2V0LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9jaGFyc2V0IG5hbWUgb2YgY2hhcnNldC5cbiAgICogQHJldHVybiB7c3RyaW5nfSBkZWNvZGVkIHN0cmluZy5cbiAgICovXG4gIF8uYnl0ZXNUb1N0cmluZyA9IGZ1bmN0aW9uKGJ5dGVzLCBvcHRfY2hhcnNldCkge1xuICAgIHZhciBjaGFyc2V0ID0gb3B0X2NoYXJzZXQgfHwgJ1VURi04JztcbiAgICB2YXIgc3RyID0gbnVsbDtcblxuICAgIC8vIHRyeSBuYXRpdmUgVGV4dERlY29kZXIgZmlyc3RcbiAgICBpZiAoc2VsZi5UZXh0RGVjb2RlciAmJiBzZWxmLlVpbnQ4QXJyYXkgJiYgc2VsZi5VaW50OEFycmF5Wydmcm9tJ10pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBkZWNvZGVyID0gbmV3IHNlbGYuVGV4dERlY29kZXIoY2hhcnNldCk7XG4gICAgICAgIHJldHVybiBkZWNvZGVyLmRlY29kZShzZWxmLlVpbnQ4QXJyYXlbJ2Zyb20nXShieXRlcykpO1xuICAgICAgfSBjYXRjaCAoaWdub3JlZCkge1xuICAgICAgICAvLyB0cnkgb3RoZXIgbWV0aG9kcyBpZiBjaGFyc2V0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgbmF0aXZlIGRlY29kZXIgKGVnLiBDUDQzNyBvbiBDaHJvbWUpLlxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2hhcnNldCA9PSAnVVRGLTgnKSB7XG4gICAgICBzdHIgPSB1dGY4LlVURjhCeXRlc1RvU3RyaW5nKGJ5dGVzKTtcbiAgICB9IGVsc2UgaWYgKGljb252bGl0ZS5pc1N1cHBvcnRlZChjaGFyc2V0KSkge1xuICAgICAgc3RyID0gaWNvbnZsaXRlLnRvU3RyaW5nKGJ5dGVzLCBjaGFyc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFpY29udilcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDaGFyc2V0RXJyb3IoXG4gICAgICAgICAgJ2ljb252IG5vdCBsb2FkZWQsIGNhbm5vdCBoYW5kbGUgJyArIGNoYXJzZXQpO1xuICAgICAgdmFyIHV0ZjhCeXRlcyA9IGljb252LmNvbnZlcnQoYnl0ZXMsIGNoYXJzZXQsICdVVEYtOCcpO1xuICAgICAgaWYgKHV0ZjhCeXRlcyA9PT0gbnVsbClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDaGFyc2V0RXJyb3IoXG4gICAgICAgICAgJ3RvU3RyICcgKyBjaGFyc2V0ICsgJyB0byBVVEYtOCAnICsgYnl0ZXMpO1xuICAgICAgYnl0ZXMgPSB1dGY4Qnl0ZXM7XG4gICAgICBzdHIgPSB1dGY4LlVURjhCeXRlc1RvU3RyaW5nKGJ5dGVzKTtcbiAgICB9XG4gICAgaWYgKHN0ciA9PT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQ2hhcnNldEVycm9yKCk7XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICAvKipcbiAgICogTm90ZTogY2hhcnNldCBpcyBjdXJyZW50bHkgaWdub3JlZC5cbiAgICogRGVjb2RlcyBieXRlcyBieXRlcyBhcnJheSBhcyByZXR1cm5lZCBieSBnZXRCeXRlcygpLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIHRvIGVuY29kZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfY2hhcnNldCBuYW1lIG9mIGNoYXJzZXQuXG4gICAqIEByZXR1cm4ge0FycmF5LjxudW1iZXI+fSBieXRlcy5cbiAgICovXG4gIF8uc3RyaW5nVG9CeXRlcyA9IGZ1bmN0aW9uKHN0ciwgb3B0X2NoYXJzZXQpIHtcbiAgICB2YXIgY2hhcnNldCA9IG9wdF9jaGFyc2V0IHx8ICdVVEYtOCc7XG4gICAgdmFyIGJ5dGVzID0gbnVsbDtcbiAgICBpZiAoY2hhcnNldCA9PSAnVVRGLTgnKSB7XG4gICAgICBieXRlcyA9IHV0Zjguc3RyaW5nVG9VVEY4Qnl0ZXMoc3RyKTtcbiAgICAgIGlmIChieXRlcyA9PT0gbnVsbClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDaGFyc2V0RXJyb3IoKTtcbiAgICB9IGVsc2UgaWYgKGljb252bGl0ZS5pc1N1cHBvcnRlZChjaGFyc2V0KSkge1xuICAgICAgYnl0ZXMgPSBpY29udmxpdGUudG9CeXRlcyhzdHIsIGNoYXJzZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBieXRlcyA9IHV0Zjguc3RyaW5nVG9VVEY4Qnl0ZXMoc3RyKTtcbiAgICAgIGlmICghaWNvbnYpXG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ2hhcnNldEVycm9yKCdpY29udiBub3QgbG9hZGVkJyk7XG4gICAgICBieXRlcyA9IGljb252LmNvbnZlcnQoYnl0ZXMsICdVVEYtOCcsIGNoYXJzZXQpO1xuICAgIH1cbiAgICBpZiAoYnl0ZXMgPT09IG51bGwpXG4gICAgICB0aHJvdyBuZXcgSW52YWxpZENoYXJzZXRFcnJvcihjaGFyc2V0ICsgJyB0byBieXRlczogJyArIHN0cik7XG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBieXRlcyBieXRlcyBlbmNvZGluZyBhIHN0cmluZywgd2hvc2UgZW5jb2RpbmdcbiAgICogc2hvdWxkIGJlIGd1ZXNzZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2hpbnRzIGRlY29kZSBoaW50cyBpZiBhcHBsaWNhYmxlLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IG5hbWUgb2YgZ3Vlc3NlZCBlbmNvZGluZzsgYXQgdGhlIG1vbWVudCB3aWxsIG9ubHlcbiAgICogZ3Vlc3Mgb25lIG9mOlxuICAgKiAge0BsaW5rICNTSElGVF9KSVN9LCB7QGxpbmsgI1VURjh9LCB7QGxpbmsgI0lTTzg4NTkxfSwgb3IgdGhlIHBsYXRmb3JtXG4gICAqICBkZWZhdWx0IGVuY29kaW5nIGlmIG5vbmUgb2YgdGhlc2UgY2FuIHBvc3NpYmx5IGJlIGNvcnJlY3QuXG4gICAqL1xuICBfLmd1ZXNzRW5jb2RpbmcgPSBmdW5jdGlvbihieXRlcywgb3B0X2hpbnRzKSB7XG4gICAgaWYgKG9wdF9oaW50cykge1xuICAgICAgdmFyIGNoYXJhY3RlclNldCA9IG9wdF9oaW50cy5nZXQodzY5Yi5xci5EZWNvZGVIaW50VHlwZS5DSEFSQUNURVJfU0VUKTtcbiAgICAgIGlmIChjaGFyYWN0ZXJTZXQpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJhY3RlclNldDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRm9yIG5vdywgbWVyZWx5IHRyaWVzIHRvIGRpc3Rpbmd1aXNoIElTTy04ODU5LTEsIFVURi04IGFuZCBTaGlmdF9KSVMsXG4gICAgLy8gd2hpY2ggc2hvdWxkIGJlIGJ5IGZhciB0aGUgbW9zdCBjb21tb24gZW5jb2RpbmdzLlxuICAgIHZhciBsZW5ndGggPSBieXRlcy5sZW5ndGg7XG4gICAgdmFyIGNhbkJlSVNPODg1OTEgPSB0cnVlO1xuICAgIHZhciBjYW5CZVNoaWZ0SklTID0gdHJ1ZTtcbiAgICB2YXIgY2FuQmVVVEY4ID0gdHJ1ZTtcbiAgICB2YXIgdXRmOEJ5dGVzTGVmdCA9IDA7XG4gICAgLy92YXIgdXRmOExvd0NoYXJzID0gMDtcbiAgICB2YXIgdXRmMkJ5dGVzQ2hhcnMgPSAwO1xuICAgIHZhciB1dGYzQnl0ZXNDaGFycyA9IDA7XG4gICAgdmFyIHV0ZjRCeXRlc0NoYXJzID0gMDtcbiAgICB2YXIgc2ppc0J5dGVzTGVmdCA9IDA7XG4gICAgLy92YXIgc2ppc0xvd0NoYXJzID0gMDtcbiAgICB2YXIgc2ppc0thdGFrYW5hQ2hhcnMgPSAwO1xuICAgIC8vdmFyIHNqaXNEb3VibGVCeXRlc0NoYXJzID0gMDtcbiAgICB2YXIgc2ppc0N1ckthdGFrYW5hV29yZExlbmd0aCA9IDA7XG4gICAgdmFyIHNqaXNDdXJEb3VibGVCeXRlc1dvcmRMZW5ndGggPSAwO1xuICAgIHZhciBzamlzTWF4S2F0YWthbmFXb3JkTGVuZ3RoID0gMDtcbiAgICB2YXIgc2ppc01heERvdWJsZUJ5dGVzV29yZExlbmd0aCA9IDA7XG4gICAgLy92YXIgaXNvTG93Q2hhcnMgPSAwO1xuICAgIC8vdmFyIGlzb0hpZ2hDaGFycyA9IDA7XG4gICAgdmFyIGlzb0hpZ2hPdGhlciA9IDA7XG5cbiAgICB2YXIgdXRmOGJvbSA9IGJ5dGVzLmxlbmd0aCA+IDMgJiZcbiAgICAgIGJ5dGVzWzBdID09IDB4RUYgJiZcbiAgICAgIGJ5dGVzWzFdID09IDB4QkIgJiZcbiAgICAgIGJ5dGVzWzJdID09IDB4QkY7XG5cbiAgICBmb3IgKHZhciBpID0gMDtcbiAgICAgICAgIGkgPCBsZW5ndGggJiYgKGNhbkJlSVNPODg1OTEgfHwgY2FuQmVTaGlmdEpJUyB8fCBjYW5CZVVURjgpO1xuICAgICAgICAgaSsrKSB7XG5cbiAgICAgIHZhciB2YWx1ZSA9IGJ5dGVzW2ldICYgMHhGRjtcblxuICAgICAgLy8gVVRGLTggc3R1ZmZcbiAgICAgIGlmIChjYW5CZVVURjgpIHtcbiAgICAgICAgaWYgKHV0ZjhCeXRlc0xlZnQgPiAwKSB7XG4gICAgICAgICAgaWYgKCh2YWx1ZSAmIDB4ODApID09IDApIHtcbiAgICAgICAgICAgIGNhbkJlVVRGOCA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1dGY4Qnl0ZXNMZWZ0LS07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCh2YWx1ZSAmIDB4ODApICE9IDApIHtcbiAgICAgICAgICBpZiAoKHZhbHVlICYgMHg0MCkgPT0gMCkge1xuICAgICAgICAgICAgY2FuQmVVVEY4ID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHV0ZjhCeXRlc0xlZnQrKztcbiAgICAgICAgICAgIGlmICgodmFsdWUgJiAweDIwKSA9PSAwKSB7XG4gICAgICAgICAgICAgIHV0ZjJCeXRlc0NoYXJzKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB1dGY4Qnl0ZXNMZWZ0Kys7XG4gICAgICAgICAgICAgIGlmICgodmFsdWUgJiAweDEwKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdXRmM0J5dGVzQ2hhcnMrKztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1dGY4Qnl0ZXNMZWZ0Kys7XG4gICAgICAgICAgICAgICAgaWYgKCh2YWx1ZSAmIDB4MDgpID09IDApIHtcbiAgICAgICAgICAgICAgICAgIHV0ZjRCeXRlc0NoYXJzKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNhbkJlVVRGOCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSAvL2Vsc2Uge1xuICAgICAgICAvL3V0ZjhMb3dDaGFycysrO1xuICAgICAgICAvL31cbiAgICAgIH1cblxuICAgICAgLy8gSVNPLTg4NTktMSBzdHVmZlxuICAgICAgaWYgKGNhbkJlSVNPODg1OTEpIHtcbiAgICAgICAgaWYgKHZhbHVlID4gMHg3RiAmJiB2YWx1ZSA8IDB4QTApIHtcbiAgICAgICAgICBjYW5CZUlTTzg4NTkxID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPiAweDlGKSB7XG4gICAgICAgICAgaWYgKHZhbHVlIDwgMHhDMCB8fCB2YWx1ZSA9PSAweEQ3IHx8IHZhbHVlID09IDB4RjcpIHtcbiAgICAgICAgICAgIGlzb0hpZ2hPdGhlcisrO1xuICAgICAgICAgIH0gLy9lbHNlIHtcbiAgICAgICAgICAvL2lzb0hpZ2hDaGFycysrO1xuICAgICAgICAgIC8vfVxuICAgICAgICB9IC8vZWxzZSB7XG4gICAgICAgIC8vaXNvTG93Q2hhcnMrKztcbiAgICAgICAgLy99XG4gICAgICB9XG5cbiAgICAgIC8vIFNoaWZ0X0pJUyBzdHVmZlxuICAgICAgaWYgKGNhbkJlU2hpZnRKSVMpIHtcbiAgICAgICAgaWYgKHNqaXNCeXRlc0xlZnQgPiAwKSB7XG4gICAgICAgICAgaWYgKHZhbHVlIDwgMHg0MCB8fCB2YWx1ZSA9PSAweDdGIHx8IHZhbHVlID4gMHhGQykge1xuICAgICAgICAgICAgY2FuQmVTaGlmdEpJUyA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzamlzQnl0ZXNMZWZ0LS07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09IDB4ODAgfHwgdmFsdWUgPT0gMHhBMCB8fCB2YWx1ZSA+IDB4RUYpIHtcbiAgICAgICAgICBjYW5CZVNoaWZ0SklTID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPiAweEEwICYmIHZhbHVlIDwgMHhFMCkge1xuICAgICAgICAgIHNqaXNLYXRha2FuYUNoYXJzKys7XG4gICAgICAgICAgc2ppc0N1ckRvdWJsZUJ5dGVzV29yZExlbmd0aCA9IDA7XG4gICAgICAgICAgc2ppc0N1ckthdGFrYW5hV29yZExlbmd0aCsrO1xuICAgICAgICAgIGlmIChzamlzQ3VyS2F0YWthbmFXb3JkTGVuZ3RoID4gc2ppc01heEthdGFrYW5hV29yZExlbmd0aCkge1xuICAgICAgICAgICAgc2ppc01heEthdGFrYW5hV29yZExlbmd0aCA9IHNqaXNDdXJLYXRha2FuYVdvcmRMZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID4gMHg3Rikge1xuICAgICAgICAgIHNqaXNCeXRlc0xlZnQrKztcbiAgICAgICAgICAvL3NqaXNEb3VibGVCeXRlc0NoYXJzKys7XG4gICAgICAgICAgc2ppc0N1ckthdGFrYW5hV29yZExlbmd0aCA9IDA7XG4gICAgICAgICAgc2ppc0N1ckRvdWJsZUJ5dGVzV29yZExlbmd0aCsrO1xuICAgICAgICAgIGlmIChzamlzQ3VyRG91YmxlQnl0ZXNXb3JkTGVuZ3RoID4gc2ppc01heERvdWJsZUJ5dGVzV29yZExlbmd0aCkge1xuICAgICAgICAgICAgc2ppc01heERvdWJsZUJ5dGVzV29yZExlbmd0aCA9IHNqaXNDdXJEb3VibGVCeXRlc1dvcmRMZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vc2ppc0xvd0NoYXJzKys7XG4gICAgICAgICAgc2ppc0N1ckthdGFrYW5hV29yZExlbmd0aCA9IDA7XG4gICAgICAgICAgc2ppc0N1ckRvdWJsZUJ5dGVzV29yZExlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2FuQmVVVEY4ICYmIHV0ZjhCeXRlc0xlZnQgPiAwKSB7XG4gICAgICBjYW5CZVVURjggPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGNhbkJlU2hpZnRKSVMgJiYgc2ppc0J5dGVzTGVmdCA+IDApIHtcbiAgICAgIGNhbkJlU2hpZnRKSVMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBFYXN5IC0tIGlmIHRoZXJlIGlzIEJPTSBvciBhdCBsZWFzdCAxIHZhbGlkIG5vdC1zaW5nbGUgYnl0ZSBjaGFyYWN0ZXJcbiAgICAvLyAoYW5kIG5vIGV2aWRlbmNlIGl0IGNhbid0IGJlIFVURi04KSwgZG9uZVxuICAgIGlmIChjYW5CZVVURjggJiZcbiAgICAgICh1dGY4Ym9tIHx8IHV0ZjJCeXRlc0NoYXJzICsgdXRmM0J5dGVzQ2hhcnMgKyB1dGY0Qnl0ZXNDaGFycyA+IDApKSB7XG4gICAgICByZXR1cm4gXy5VVEY4O1xuICAgIH1cbiAgICAvLyBFYXN5IC0tIGlmIGFzc3VtaW5nIFNoaWZ0X0pJUyBvciBhdCBsZWFzdCAzIHZhbGlkIGNvbnNlY3V0aXZlIG5vdC1hc2NpaVxuICAgIC8vIGNoYXJhY3RlcnMgKGFuZCBubyBldmlkZW5jZSBpdCBjYW4ndCBiZSksIGRvbmVcbiAgICBpZiAoY2FuQmVTaGlmdEpJUyAmJlxuICAgICAgKF8uQVNTVU1FX1NISUZUX0pJUyB8fCBzamlzTWF4S2F0YWthbmFXb3JkTGVuZ3RoID49IDMgfHxcbiAgICAgICAgc2ppc01heERvdWJsZUJ5dGVzV29yZExlbmd0aCA+PSAzKSkge1xuICAgICAgcmV0dXJuIF8uU0hJRlRfSklTO1xuICAgIH1cbiAgICAvLyBEaXN0aW5ndWlzaGluZyBTaGlmdF9KSVMgYW5kIElTTy04ODU5LTEgY2FuIGJlIGEgbGl0dGxlIHRvdWdoIGZvciBzaG9ydFxuICAgIC8vIHdvcmRzLiBUaGUgY3J1ZGUgaGV1cmlzdGljIGlzOlxuICAgIC8vIC0gSWYgd2Ugc2F3XG4gICAgLy8gICAtIG9ubHkgdHdvIGNvbnNlY3V0aXZlIGthdGFrYW5hIGNoYXJzIGluIHRoZSB3aG9sZSB0ZXh0LCBvclxuICAgIC8vICAgLSBhdCBsZWFzdCAxMCUgb2YgYnl0ZXMgdGhhdCBjb3VsZCBiZSBcInVwcGVyXCIgbm90LWFscGhhbnVtZXJpYyBMYXRpbjEsXG4gICAgLy8gLSB0aGVuIHdlIGNvbmNsdWRlIFNoaWZ0X0pJUywgZWxzZSBJU08tODg1OS0xXG4gICAgaWYgKGNhbkJlSVNPODg1OTEgJiYgY2FuQmVTaGlmdEpJUykge1xuICAgICAgcmV0dXJuIChzamlzTWF4S2F0YWthbmFXb3JkTGVuZ3RoID09IDIgJiYgc2ppc0thdGFrYW5hQ2hhcnMgPT0gMikgfHxcbiAgICAgICAgaXNvSGlnaE90aGVyICogMTAgPj0gbGVuZ3RoID8gXy5TSElGVF9KSVMgOiBfLklTTzg4NTkxO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgdHJ5IGluIG9yZGVyIElTTy04ODU5LTEsIFNoaWZ0IEpJUywgVVRGLTggYW5kIGZhbGwgYmFjayB0b1xuICAgIC8vIGRlZmF1bHQgcGxhdGZvcm0gZW5jb2RpbmdcbiAgICBpZiAoY2FuQmVJU084ODU5MSkge1xuICAgICAgcmV0dXJuIF8uSVNPODg1OTE7XG4gICAgfVxuICAgIGlmIChjYW5CZVNoaWZ0SklTKSB7XG4gICAgICByZXR1cm4gXy5TSElGVF9KSVM7XG4gICAgfVxuICAgIGlmIChjYW5CZVVURjgpIHtcbiAgICAgIHJldHVybiBfLlVURjg7XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSwgd2UgdGFrZSBhIHdpbGQgZ3Vlc3Mgd2l0aCBwbGF0Zm9ybSBlbmNvZGluZ1xuICAgIHJldHVybiBfLlBMQVRGT1JNX0RFRkFVTFRfRU5DT0RJTkc7XG4gIH07XG5cbn0pO1xuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5xci5EZWNvZGVkQml0U3RyZWFtUGFyc2VyJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuc3RyaW5nLlN0cmluZ0J1ZmZlcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkJpdFNvdXJjZScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkNoYXJhY3RlclNldEVDSScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkZvcm1hdEVycm9yJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuTW9kZScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLk1vZGVFbnVtJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuc3RyaW5ndXRpbHMnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgdmFyIF8gPSB3NjliLnFyLkRlY29kZWRCaXRTdHJlYW1QYXJzZXI7XG4gIHZhciBCaXRTb3VyY2UgPSB3NjliLnFyLkJpdFNvdXJjZTtcbiAgdmFyIE1vZGUgPSB3NjliLnFyLk1vZGU7XG4gIHZhciBNb2RlRW51bSA9IHc2OWIucXIuTW9kZUVudW07XG4gIHZhciBTdHJpbmdCdWZmZXIgPSBnb29nLnN0cmluZy5TdHJpbmdCdWZmZXI7XG4gIHZhciBzdHJpbmd1dGlscyA9IHc2OWIucXIuc3RyaW5ndXRpbHM7XG4gIHZhciBGb3JtYXRFcnJvciA9IHc2OWIucXIuRm9ybWF0RXJyb3I7XG4gIHZhciBDaGFyYWN0ZXJTZXRFQ0kgPSB3NjliLnFyLkNoYXJhY3RlclNldEVDSTtcblxuICAvKipcbiAgICogPHA+UVIgQ29kZXMgY2FuIGVuY29kZSB0ZXh0IGFzIGJpdHMgaW4gb25lIG9mIHNldmVyYWwgbW9kZXMsIGFuZCBjYW4gdXNlXG4gICAqIG11bHRpcGxlIG1vZGVzIGluIG9uZSBRUiBDb2RlLiBUaGlzIGNsYXNzIGRlY29kZXMgdGhlIGJpdHMgYmFjayBpbnRvXG4gICAqIHRleHQuPC9wPlxuICAgKlxuICAgKiA8cD5TZWUgSVNPIDE4MDA0OjIwMDYsIDYuNC4zIC0gNi40Ljc8L3A+XG4gICAqXG4gICAqIEBhdXRob3IgU2VhbiBPd2VuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBTZWUgSVNPIDE4MDA0OjIwMDYsIDYuNC40IFRhYmxlIDVcbiAgICovXG4gIF8uQUxQSEFOVU1FUklDX0NIQVJTID0gW1xuICAgICcwJywgJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsICc5JywgJ0EnLCAnQicsXG4gICAgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSicsICdLJywgJ0wnLCAnTScsICdOJyxcbiAgICAnTycsICdQJywgJ1EnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJywgJ1onLFxuICAgICcgJywgJyQnLCAnJScsICcqJywgJysnLCAnLScsICcuJywgJy8nLCAnOidcbiAgXTtcbiAgXy5HQjIzMTJfU1VCU0VUID0gMTtcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBieXRlcyBieXRlIGJsb2Nrcy5cbiAgICogQHBhcmFtIHt3NjliLnFyLlZlcnNpb259IHZlcnNpb24gcXIgY29kZSB2ZXJzaW9uLlxuICAgKiBAcGFyYW0ge3c2OWIucXIuRXJyb3JDb3JyZWN0aW9uTGV2ZWx9IGVjTGV2ZWwgZXJyb3IgY29ycmVjdGlvbiBsZXZlbC5cbiAgICogQHJldHVybiB7c3RyaW5nfSBkZWNvZGVkIHN0cmluZy5cbiAgICovXG4gIF8uZGVjb2RlID0gZnVuY3Rpb24oYnl0ZXMsIHZlcnNpb24sIGVjTGV2ZWwpIHtcbiAgICB2YXIgYml0cyA9IG5ldyBCaXRTb3VyY2UoYnl0ZXMpO1xuICAgIHZhciByZXN1bHQgPSBuZXcgU3RyaW5nQnVmZmVyKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxuICAgICAqL1xuICAgIHZhciBieXRlU2VnbWVudHMgPSBbXTtcbiAgICB2YXIgZmMxSW5FZmZlY3QgPSBmYWxzZTtcbiAgICB2YXIgbW9kZTtcbiAgICB2YXIgY3VycmVudENoYXJhY3RlclNldCA9IG51bGw7XG4gICAgZG8ge1xuICAgICAgLy8gV2hpbGUgc3RpbGwgYW5vdGhlciBzZWdtZW50IHRvIHJlYWQuLi5cbiAgICAgIGlmIChiaXRzLmF2YWlsYWJsZSgpIDwgNCkge1xuICAgICAgICAvLyBPSywgYXNzdW1lIHdlJ3JlIGRvbmUuIFJlYWxseSwgYSBURVJNSU5BVE9SIG1vZGUgc2hvdWxkIGhhdmUgYmVlblxuICAgICAgICAvLyByZWNvcmRlZCBoZXJlXG4gICAgICAgIG1vZGUgPSBNb2RlRW51bS5URVJNSU5BVE9SO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbW9kZSA9IE1vZGUuZm9yQml0cyhiaXRzLnJlYWRCaXRzKDQpKTsgLy8gbW9kZSBpcyBlbmNvZGVkIGJ5IDQgYml0c1xuICAgICAgfVxuICAgICAgaWYgKG1vZGUgIT0gTW9kZUVudW0uVEVSTUlOQVRPUikge1xuICAgICAgICBpZiAobW9kZSA9PSBNb2RlRW51bS5GTkMxX0ZJUlNUX1BPU0lUSU9OIHx8XG4gICAgICAgICAgbW9kZSA9PSBNb2RlRW51bS5GTkMxX1NFQ09ORF9QT1NJVElPTikge1xuICAgICAgICAgIC8vIFdlIGRvIGxpdHRsZSB3aXRoIEZOQzEgZXhjZXB0IGFsdGVyIHRoZSBwYXJzZWQgcmVzdWx0IGEgYml0XG4gICAgICAgICAgLy8gYWNjb3JkaW5nIHRvIHRoZSBzcGVjXG4gICAgICAgICAgZmMxSW5FZmZlY3QgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT0gTW9kZUVudW0uU1RSVUNUVVJFRF9BUFBFTkQpIHtcbiAgICAgICAgICBpZiAoYml0cy5hdmFpbGFibGUoKSA8IDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoKTsgIC8vIEZvcm1hdEV4Y2VwdGlvbi5nZXRGb3JtYXRJbnN0YW5jZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBub3QgcmVhbGx5IHN1cHBvcnRlZDsgYWxsIHdlIGRvIGlzIGlnbm9yZSBpdCBSZWFkIG5leHQgOCBiaXRzXG4gICAgICAgICAgLy8gKHN5bWJvbCBzZXF1ZW5jZSAjKSBhbmQgOCBiaXRzIChwYXJpdHkgZGF0YSksIHRoZW4gY29udGludWVcbiAgICAgICAgICBiaXRzLnJlYWRCaXRzKDE2KTtcbiAgICAgICAgfSBlbHNlIGlmIChtb2RlID09IE1vZGVFbnVtLkVDSSkge1xuICAgICAgICAgIC8vIENvdW50IGRvZXNuJ3QgYXBwbHkgdG8gRUNJXG4gICAgICAgICAgdmFyIHZhbHVlID0gXy5wYXJzZUVDSVZhbHVlKGJpdHMpO1xuICAgICAgICAgIGN1cnJlbnRDaGFyYWN0ZXJTZXQgPSBDaGFyYWN0ZXJTZXRFQ0kuZ2V0TmFtZSh2YWx1ZSk7XG4gICAgICAgICAgaWYgKGN1cnJlbnRDaGFyYWN0ZXJTZXQgPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZpcnN0IGhhbmRsZSBIYW56aSBtb2RlIHdoaWNoIGRvZXMgbm90IHN0YXJ0IHdpdGggY2hhcmFjdGVyIGNvdW50XG4gICAgICAgICAgaWYgKG1vZGUgPT0gTW9kZUVudW0uSEFOWkkpIHtcbiAgICAgICAgICAgIC8vY2hpbmVzZSBtb2RlIGNvbnRhaW5zIGEgc3ViIHNldCBpbmRpY2F0b3IgcmlnaHQgYWZ0ZXIgbW9kZVxuICAgICAgICAgICAgLy9pbmRpY2F0b3JcbiAgICAgICAgICAgIHZhciBzdWJzZXQgPSBiaXRzLnJlYWRCaXRzKDQpO1xuICAgICAgICAgICAgdmFyIGNvdW50SGFuemkgPSBiaXRzLnJlYWRCaXRzKFxuICAgICAgICAgICAgICBtb2RlLmdldENoYXJhY3RlckNvdW50Qml0cyh2ZXJzaW9uKSk7XG4gICAgICAgICAgICBpZiAoc3Vic2V0ID09IF8uR0IyMzEyX1NVQlNFVCkge1xuICAgICAgICAgICAgICBfLmRlY29kZUhhbnppU2VnbWVudChiaXRzLCByZXN1bHQsIGNvdW50SGFuemkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBcIk5vcm1hbFwiIFFSIGNvZGUgbW9kZXM6XG4gICAgICAgICAgICAvLyBIb3cgbWFueSBjaGFyYWN0ZXJzIHdpbGwgZm9sbG93LCBlbmNvZGVkIGluIHRoaXMgbW9kZT9cbiAgICAgICAgICAgIHZhciBjb3VudCA9IGJpdHMucmVhZEJpdHMobW9kZS5nZXRDaGFyYWN0ZXJDb3VudEJpdHModmVyc2lvbikpO1xuICAgICAgICAgICAgaWYgKG1vZGUgPT0gTW9kZUVudW0uTlVNRVJJQykge1xuICAgICAgICAgICAgICBfLmRlY29kZU51bWVyaWNTZWdtZW50KGJpdHMsIHJlc3VsdCwgY291bnQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09IE1vZGVFbnVtLkFMUEhBTlVNRVJJQykge1xuICAgICAgICAgICAgICBfLmRlY29kZUFscGhhbnVtZXJpY1NlZ21lbnQoYml0cywgcmVzdWx0LCBjb3VudCwgZmMxSW5FZmZlY3QpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09IE1vZGVFbnVtLkJZVEUpIHtcbiAgICAgICAgICAgICAgXy5kZWNvZGVCeXRlU2VnbWVudChiaXRzLCByZXN1bHQsIGNvdW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnRDaGFyYWN0ZXJTZXQsIGJ5dGVTZWdtZW50cyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT0gTW9kZUVudW0uS0FOSkkpIHtcbiAgICAgICAgICAgICAgXy5kZWNvZGVLYW5qaVNlZ21lbnQoYml0cywgcmVzdWx0LCBjb3VudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoKTsgIC8vRm9ybWF0RXhjZXB0aW9uLmdldEZvcm1hdEluc3RhbmNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSB3aGlsZSAobW9kZSAhPSBNb2RlRW51bS5URVJNSU5BVE9SKTtcblxuICAgIHJldHVybiByZXN1bHQudG9TdHJpbmcoKTtcbiAgfTtcblxuICAvKipcbiAgICogU2VlIHNwZWNpZmljYXRpb24gR0JUIDE4Mjg0LTIwMDBcbiAgICogQHBhcmFtIHtCaXRTb3VyY2V9IGJpdHMgYml0cy5cbiAgICogQHBhcmFtIHtTdHJpbmdCdWZmZXJ9IHJlc3VsdCBzdHJpbmcgYnVmZmVyLlxuICAgKiBAcGFyYW0ge251bWJlcn0gY291bnQgYnl0ZXMgdG8gZGVjb2RlLlxuICAgKi9cbiAgXy5kZWNvZGVIYW56aVNlZ21lbnQgPSBmdW5jdGlvbihiaXRzLCByZXN1bHQsIGNvdW50KSB7XG4gICAgLy8gRG9uJ3QgY3Jhc2ggdHJ5aW5nIHRvIHJlYWQgbW9yZSBiaXRzIHRoYW4gd2UgaGF2ZSBhdmFpbGFibGUuXG4gICAgaWYgKGNvdW50ICogMTMgPiBiaXRzLmF2YWlsYWJsZSgpKSB7XG4gICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoKTsgIC8vIEZvcm1hdEV4Y2VwdGlvbi5nZXRGb3JtYXRJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIC8vIEVhY2ggY2hhcmFjdGVyIHdpbGwgcmVxdWlyZSAyIGJ5dGVzLiBSZWFkIHRoZSBjaGFyYWN0ZXJzIGFzIDItYnl0ZSBwYWlyc1xuICAgIC8vIGFuZCBkZWNvZGUgYXMgR0IyMzEyIGFmdGVyd2FyZHNcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KDIgKiBjb3VudCk7XG4gICAgdmFyIG9mZnNldCA9IDA7XG4gICAgd2hpbGUgKGNvdW50ID4gMCkge1xuICAgICAgLy8gRWFjaCAxMyBiaXRzIGVuY29kZXMgYSAyLWJ5dGUgY2hhcmFjdGVyXG4gICAgICB2YXIgdHdvQnl0ZXMgPSBiaXRzLnJlYWRCaXRzKDEzKTtcbiAgICAgIHZhciBhc3NlbWJsZWRUd29CeXRlcyA9ICgodHdvQnl0ZXMgLyAweDA2MCkgPDwgOCkgfCAodHdvQnl0ZXMgJSAweDA2MCk7XG4gICAgICBpZiAoYXNzZW1ibGVkVHdvQnl0ZXMgPCAweDAwM0JGKSB7XG4gICAgICAgIC8vIEluIHRoZSAweEExQTEgdG8gMHhBQUZFIHJhbmdlXG4gICAgICAgIGFzc2VtYmxlZFR3b0J5dGVzICs9IDB4MEExQTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJbiB0aGUgMHhCMEExIHRvIDB4RkFGRSByYW5nZVxuICAgICAgICBhc3NlbWJsZWRUd29CeXRlcyArPSAweDBBNkExO1xuICAgICAgfVxuICAgICAgYnVmZmVyW29mZnNldF0gPSAoKGFzc2VtYmxlZFR3b0J5dGVzID4+IDgpICYgMHhGRik7XG4gICAgICBidWZmZXJbb2Zmc2V0ICsgMV0gPSAoYXNzZW1ibGVkVHdvQnl0ZXMgJiAweEZGKTtcbiAgICAgIG9mZnNldCArPSAyO1xuICAgICAgY291bnQtLTtcbiAgICB9XG5cbiAgICByZXN1bHQuYXBwZW5kKHN0cmluZ3V0aWxzLmJ5dGVzVG9TdHJpbmcoYnVmZmVyLCAnR0IyMzEyJykpO1xuICAgIC8vIHJlc3VsdC5hcHBlbmQobmV3IFN0cmluZyhidWZmZXIsIFN0cmluZ1V0aWxzLkdCMjMxMikpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0JpdFNvdXJjZX0gYml0cyBiaXRzLlxuICAgKiBAcGFyYW0ge1N0cmluZ0J1ZmZlcn0gcmVzdWx0IHN0cmluZyBidWZmZXIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCBieXRlcyB0byBkZWNvZGUuXG4gICAqL1xuICBfLmRlY29kZUthbmppU2VnbWVudCA9IGZ1bmN0aW9uKGJpdHMsIHJlc3VsdCwgY291bnQpIHtcbiAgICAvLyBEb24ndCBjcmFzaCB0cnlpbmcgdG8gcmVhZCBtb3JlIGJpdHMgdGhhbiB3ZSBoYXZlIGF2YWlsYWJsZS5cbiAgICBpZiAoY291bnQgKiAxMyA+IGJpdHMuYXZhaWxhYmxlKCkpIHtcbiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigpO1xuICAgIH1cblxuICAgIC8vIEVhY2ggY2hhcmFjdGVyIHdpbGwgcmVxdWlyZSAyIGJ5dGVzLiBSZWFkIHRoZSBjaGFyYWN0ZXJzIGFzIDItYnl0ZSBwYWlyc1xuICAgIC8vIGFuZCBkZWNvZGUgYXMgU2hpZnRfSklTIGFmdGVyd2FyZHNcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KDIgKiBjb3VudCk7XG4gICAgdmFyIG9mZnNldCA9IDA7XG4gICAgd2hpbGUgKGNvdW50ID4gMCkge1xuICAgICAgLy8gRWFjaCAxMyBiaXRzIGVuY29kZXMgYSAyLWJ5dGUgY2hhcmFjdGVyXG4gICAgICB2YXIgdHdvQnl0ZXMgPSBiaXRzLnJlYWRCaXRzKDEzKTtcbiAgICAgIHZhciBhc3NlbWJsZWRUd29CeXRlcyA9ICgodHdvQnl0ZXMgLyAweDBDMCkgPDwgOCkgfCAodHdvQnl0ZXMgJSAweDBDMCk7XG4gICAgICBpZiAoYXNzZW1ibGVkVHdvQnl0ZXMgPCAweDAxRjAwKSB7XG4gICAgICAgIC8vIEluIHRoZSAweDgxNDAgdG8gMHg5RkZDIHJhbmdlXG4gICAgICAgIGFzc2VtYmxlZFR3b0J5dGVzICs9IDB4MDgxNDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJbiB0aGUgMHhFMDQwIHRvIDB4RUJCRiByYW5nZVxuICAgICAgICBhc3NlbWJsZWRUd29CeXRlcyArPSAweDBDMTQwO1xuICAgICAgfVxuICAgICAgYnVmZmVyW29mZnNldF0gPSAoYXNzZW1ibGVkVHdvQnl0ZXMgPj4gOCk7XG4gICAgICBidWZmZXJbb2Zmc2V0ICsgMV0gPSBhc3NlbWJsZWRUd29CeXRlcztcbiAgICAgIG9mZnNldCArPSAyO1xuICAgICAgY291bnQtLTtcbiAgICB9XG4gICAgLy8gU2hpZnRfSklTIG1heSBub3QgYmUgc3VwcG9ydGVkIGluIHNvbWUgZW52aXJvbm1lbnRzOlxuICAgIHJlc3VsdC5hcHBlbmQoc3RyaW5ndXRpbHMuYnl0ZXNUb1N0cmluZyhidWZmZXIsICdTSklTJykpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0JpdFNvdXJjZX0gYml0cyBiaXRzLlxuICAgKiBAcGFyYW0ge1N0cmluZ0J1ZmZlcn0gcmVzdWx0IHN0cmluZyBidWZmZXIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCBieXRlcyB0byBkZWNvZGUuXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gY2hhcmFjdGVyU2V0RWNpTmFtZSBjaGFyYWN0ZXIgc2V0IGVjaSBuYW1lLlxuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBieXRlU2VnbWVudHMgcmF3IGJ5dGVzLlxuICAgKi9cbiAgXy5kZWNvZGVCeXRlU2VnbWVudCA9IGZ1bmN0aW9uKGJpdHMsIHJlc3VsdCwgY291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJTZXRFY2lOYW1lLCBieXRlU2VnbWVudHMpIHtcbiAgICAvLyBEb24ndCBjcmFzaCB0cnlpbmcgdG8gcmVhZCBtb3JlIGJpdHMgdGhhbiB3ZSBoYXZlIGF2YWlsYWJsZS5cbiAgICBpZiAoY291bnQgPDwgMyA+IGJpdHMuYXZhaWxhYmxlKCkpIHtcbiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigpOyAgLy9Gb3JtYXRFeGNlcHRpb24uZ2V0Rm9ybWF0SW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICB2YXIgcmVhZEJ5dGVzID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIHJlYWRCeXRlc1tpXSA9IGJpdHMucmVhZEJpdHMoOCk7XG4gICAgfVxuICAgIC8vIHZhciBlbmNvZGluZyA9IHN0cmluZ3V0aWxzLmd1ZXNzRW5jb2RpbmcocmVhZEJ5dGVzKTtcbiAgICAvLyBUT0RPOiBXZSBjYW5ub3QgZGVjb2RlIG5vbi11bmljb2RlIHN0cmluZ3MgeWV0LlxuICAgIHZhciBlbmNvZGluZztcbiAgICBpZiAoIWNoYXJhY3RlclNldEVjaU5hbWUpIHtcbiAgICAgIC8vIFRoZSBzcGVjIGlzbid0IGNsZWFyIG9uIHRoaXMgbW9kZTsgc2VlXG4gICAgICAvLyBzZWN0aW9uIDYuNC41OiB0IGRvZXMgbm90IHNheSB3aGljaCBlbmNvZGluZyB0byBhc3N1bWluZ1xuICAgICAgLy8gdXBvbiBkZWNvZGluZy4gSSBoYXZlIHNlZW4gSVNPLTg4NTktMSB1c2VkIGFzIHdlbGwgYXNcbiAgICAgIC8vIFNoaWZ0X0pJUyAtLSB3aXRob3V0IGFueXRoaW5nIGxpa2UgYW4gRUNJIGRlc2lnbmF0b3IgdG9cbiAgICAgIC8vIGdpdmUgYSBoaW50LlxuICAgICAgZW5jb2RpbmcgPSBzdHJpbmd1dGlscy5ndWVzc0VuY29kaW5nKHJlYWRCeXRlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gY2hhcmFjdGVyU2V0RWNpTmFtZTtcbiAgICB9XG4gICAgcmVzdWx0LmFwcGVuZChzdHJpbmd1dGlscy5ieXRlc1RvU3RyaW5nKHJlYWRCeXRlcywgZW5jb2RpbmcpKTtcbiAgICBieXRlU2VnbWVudHMucHVzaChyZWFkQnl0ZXMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgY2hhcmFjdGVyLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGNoYXIuXG4gICAqL1xuICBfLnRvQWxwaGFOdW1lcmljQ2hhciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID49IF8uQUxQSEFOVU1FUklDX0NIQVJTLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCk7ICAvLyBGb3JtYXRFeGNlcHRpb24uZ2V0Rm9ybWF0SW5zdGFuY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIF8uQUxQSEFOVU1FUklDX0NIQVJTW01hdGguZmxvb3IodmFsdWUpXTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtCaXRTb3VyY2V9IGJpdHMgYml0cy5cbiAgICogQHBhcmFtIHtTdHJpbmdCdWZmZXJ9IHJlc3VsdCBzdHJpbmcgYnVmZmVyLlxuICAgKiBAcGFyYW0ge251bWJlcn0gY291bnQgYnl0ZXMgdG8gZGVjb2RlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZjMUluRWZmZWN0IGZsYWcuXG4gICAqL1xuICBfLmRlY29kZUFscGhhbnVtZXJpY1NlZ21lbnQgPSBmdW5jdGlvbihiaXRzLCByZXN1bHQsIGNvdW50LCBmYzFJbkVmZmVjdCkge1xuICAgIC8vIFJlYWQgdHdvIGNoYXJhY3RlcnMgYXQgYSB0aW1lXG4gICAgdmFyIHN0YXJ0ID0gcmVzdWx0LmdldExlbmd0aCgpO1xuICAgIHdoaWxlIChjb3VudCA+IDEpIHtcbiAgICAgIGlmIChiaXRzLmF2YWlsYWJsZSgpIDwgMTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCk7ICAvLyB0aHJvdyBGb3JtYXRFeGNlcHRpb24uZ2V0Rm9ybWF0SW5zdGFuY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXh0VHdvQ2hhcnNCaXRzID0gYml0cy5yZWFkQml0cygxMSk7XG4gICAgICByZXN1bHQuYXBwZW5kKF8udG9BbHBoYU51bWVyaWNDaGFyKG5leHRUd29DaGFyc0JpdHMgLyA0NSkpO1xuICAgICAgcmVzdWx0LmFwcGVuZChfLnRvQWxwaGFOdW1lcmljQ2hhcihuZXh0VHdvQ2hhcnNCaXRzICUgNDUpKTtcbiAgICAgIGNvdW50IC09IDI7XG4gICAgfVxuICAgIGlmIChjb3VudCA9PSAxKSB7XG4gICAgICAvLyBzcGVjaWFsIGNhc2U6IG9uZSBjaGFyYWN0ZXIgbGVmdFxuICAgICAgaWYgKGJpdHMuYXZhaWxhYmxlKCkgPCA2KSB7XG4gICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigpOyAgLy8gRm9ybWF0RXhjZXB0aW9uLmdldEZvcm1hdEluc3RhbmNlKCk7XG4gICAgICB9XG4gICAgICByZXN1bHQuYXBwZW5kKF8udG9BbHBoYU51bWVyaWNDaGFyKGJpdHMucmVhZEJpdHMoNikpKTtcbiAgICB9XG4gICAgLy8gU2VlIHNlY3Rpb24gNi40LjguMSwgNi40LjguMlxuICAgIC8vIGlmIChmYzFJbkVmZmVjdCkge1xuICAgIC8vICAgLy8gV2UgbmVlZCB0byBtYXNzYWdlIHRoZSByZXN1bHQgYSBiaXQgaWYgaW4gYW4gRk5DMSBtb2RlOlxuICAgIC8vICAgLy8gVE9ETzogc3ViY2xhc3Mgc3RyaW5nYnVmZmVyIGFuZCBhZGQgcmVxdWlyZWQgbWV0aG9kcy5cbiAgICAvLyAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IHJlc3VsdC5nZXRMZW5ndGgoKTsgaSsrKSB7XG4gICAgLy8gICAgIGlmIChyZXN1bHQuY2hhckF0KGkpID09ICclJykge1xuICAgIC8vICAgICAgIGlmIChpIDwgcmVzdWx0Lmxlbmd0aCgpIC0gMSAmJiByZXN1bHQuY2hhckF0KGkgKyAxKSA9PSAnJScpIHtcbiAgICAvLyAgICAgICAgIC8vICUlIGlzIHJlbmRlcmVkIGFzICVcbiAgICAvLyAgICAgICAgIHJlc3VsdC5kZWxldGVDaGFyQXQoaSArIDEpO1xuICAgIC8vICAgICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICAvLyBJbiBhbHBoYSBtb2RlLCAlIHNob3VsZCBiZSBjb252ZXJ0ZWQgdG8gRk5DMSBzZXBhcmF0b3IgMHgxRFxuICAgIC8vICAgICAgICAgcmVzdWx0LnNldENoYXJBdChpLCAweDFEKTtcbiAgICAvLyAgICAgICB9XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH1cbiAgICAvLyB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Qml0U291cmNlfSBiaXRzIGJpdHMuXG4gICAqIEBwYXJhbSB7U3RyaW5nQnVmZmVyfSByZXN1bHQgc3RyaW5nIGJ1ZmZlci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IGJ5dGVzIHRvIGRlY29kZS5cbiAgICovXG4gIF8uZGVjb2RlTnVtZXJpY1NlZ21lbnQgPSBmdW5jdGlvbihiaXRzLCByZXN1bHQsIGNvdW50KSB7XG4gICAgLy8gUmVhZCB0aHJlZSBkaWdpdHMgYXQgYSB0aW1lXG4gICAgd2hpbGUgKGNvdW50ID49IDMpIHtcbiAgICAgIC8vIEVhY2ggMTAgYml0cyBlbmNvZGVzIHRocmVlIGRpZ2l0c1xuICAgICAgaWYgKGJpdHMuYXZhaWxhYmxlKCkgPCAxMCkge1xuICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoKTsgIC8vIEZvcm1hdEV4Y2VwdGlvbi5nZXRGb3JtYXRJbnN0YW5jZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHRocmVlRGlnaXRzQml0cyA9IGJpdHMucmVhZEJpdHMoMTApO1xuICAgICAgaWYgKHRocmVlRGlnaXRzQml0cyA+PSAxMDAwKSB7XG4gICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigpOyAgLy8gRm9ybWF0RXhjZXB0aW9uLmdldEZvcm1hdEluc3RhbmNlKCk7XG4gICAgICB9XG4gICAgICByZXN1bHQuYXBwZW5kKF8udG9BbHBoYU51bWVyaWNDaGFyKHRocmVlRGlnaXRzQml0cyAvIDEwMCkpO1xuICAgICAgcmVzdWx0LmFwcGVuZChfLnRvQWxwaGFOdW1lcmljQ2hhcigodGhyZWVEaWdpdHNCaXRzIC8gMTApICUgMTApKTtcbiAgICAgIHJlc3VsdC5hcHBlbmQoXy50b0FscGhhTnVtZXJpY0NoYXIodGhyZWVEaWdpdHNCaXRzICUgMTApKTtcbiAgICAgIGNvdW50IC09IDM7XG4gICAgfVxuICAgIGlmIChjb3VudCA9PSAyKSB7XG4gICAgICAvLyBUd28gZGlnaXRzIGxlZnQgb3ZlciB0byByZWFkLCBlbmNvZGVkIGluIDcgYml0c1xuICAgICAgaWYgKGJpdHMuYXZhaWxhYmxlKCkgPCA3KSB7XG4gICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigpOyAgLy8gRm9ybWF0RXhjZXB0aW9uLmdldEZvcm1hdEluc3RhbmNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgdHdvRGlnaXRzQml0cyA9IGJpdHMucmVhZEJpdHMoNyk7XG4gICAgICBpZiAodHdvRGlnaXRzQml0cyA+PSAxMDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCk7ICAvLyBGb3JtYXRFeGNlcHRpb24uZ2V0Rm9ybWF0SW5zdGFuY2UoKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5hcHBlbmQoXy50b0FscGhhTnVtZXJpY0NoYXIodHdvRGlnaXRzQml0cyAvIDEwKSk7XG4gICAgICByZXN1bHQuYXBwZW5kKF8udG9BbHBoYU51bWVyaWNDaGFyKHR3b0RpZ2l0c0JpdHMgJSAxMCkpO1xuICAgIH0gZWxzZSBpZiAoY291bnQgPT0gMSkge1xuICAgICAgLy8gT25lIGRpZ2l0IGxlZnQgb3ZlciB0byByZWFkXG4gICAgICBpZiAoYml0cy5hdmFpbGFibGUoKSA8IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCk7ICAvLyBGb3JtYXRFeGNlcHRpb24uZ2V0Rm9ybWF0SW5zdGFuY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBkaWdpdEJpdHMgPSBiaXRzLnJlYWRCaXRzKDQpO1xuICAgICAgaWYgKGRpZ2l0Qml0cyA+PSAxMCkge1xuICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoKTsgIC8vIEZvcm1hdEV4Y2VwdGlvbi5nZXRGb3JtYXRJbnN0YW5jZSgpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmFwcGVuZChfLnRvQWxwaGFOdW1lcmljQ2hhcihkaWdpdEJpdHMpKTtcbiAgICB9XG4gIH07XG5cbiAgXy5wYXJzZUVDSVZhbHVlID0gZnVuY3Rpb24oYml0cykge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBiaXRzLnJlYWRCaXRzKDgpO1xuICAgIGlmICgoZmlyc3RCeXRlICYgMHg4MCkgPT0gMCkge1xuICAgICAgLy8ganVzdCBvbmUgYnl0ZVxuICAgICAgcmV0dXJuIGZpcnN0Qnl0ZSAmIDB4N0Y7XG4gICAgfVxuICAgIGlmICgoZmlyc3RCeXRlICYgMHhDMCkgPT0gMHg4MCkge1xuICAgICAgLy8gdHdvIGJ5dGVzXG4gICAgICB2YXIgc2Vjb25kQnl0ZSA9IGJpdHMucmVhZEJpdHMoOCk7XG4gICAgICByZXR1cm4gKChmaXJzdEJ5dGUgJiAweDNGKSA8PCA4KSB8IHNlY29uZEJ5dGU7XG4gICAgfVxuICAgIGlmICgoZmlyc3RCeXRlICYgMHhFMCkgPT0gMHhDMCkge1xuICAgICAgLy8gdGhyZWUgYnl0ZXNcbiAgICAgIHZhciBzZWNvbmRUaGlyZEJ5dGVzID0gYml0cy5yZWFkQml0cygxNik7XG4gICAgICByZXR1cm4gKChmaXJzdEJ5dGUgJiAweDFGKSA8PCAxNikgfCBzZWNvbmRUaGlyZEJ5dGVzO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoKTsgIC8vIEZvcm1hdEV4Y2VwdGlvbi5nZXRGb3JtYXRJbnN0YW5jZSgpO1xuICB9O1xuXG59KTtcblxuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiBQb3J0ZWQgdG8gSmF2YVNjcmlwdCBieSBMYXphciBMYXN6bG8gMjAxMVxuXG4gbGF6YXJzb2Z0QGdtYWlsLmNvbSwgd3d3LmxhemFyc29mdC5pbmZvXG5cbiAqL1xuXG4vKlxuICpcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5xci5HRjI1NlBvbHknKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5cbi8qKlxuICogPHA+UmVwcmVzZW50cyBhIHBvbHlub21pYWwgd2hvc2UgY29lZmZpY2llbnRzIGFyZSBlbGVtZW50cyBvZiBhIEdGLlxuICogSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgYXJlIGltbXV0YWJsZS48L3A+XG4gKlxuICogPHA+TXVjaCBjcmVkaXQgaXMgZHVlIHRvIFdpbGxpYW0gUnVja2xpZGdlIHNpbmNlIHBvcnRpb25zIG9mIHRoaXMgY29kZVxuICogYXJlIGFuIGluZGlyZWN0IHBvcnQgb2YgaGlzIEMrKyBSZWVkLVNvbG9tb24gaW1wbGVtZW50YXRpb24uPC9wPlxuICpcbiAqIEBhdXRob3IgU2VhbiBPd2VuXG4gKi9cblxuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuXG4gIC8qKlxuICAgKiBHRjI1NlBvbHlzIGRvIG5vdCBoYXZlIHNhbWUgR0YyNTYgZmllbGQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X21lc3NhZ2UgQWRkaXRpb25hbCBtZXNzYWdlLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMge0Vycm9yfVxuICAgKi9cbiAgdzY5Yi5xci5Xcm9uZ0ZpZWxkRXJyb3IgPSBmdW5jdGlvbihvcHRfbWVzc2FnZSkge1xuICAgIGdvb2cuYmFzZSh0aGlzLCBvcHRfbWVzc2FnZSk7XG4gIH07XG4gIGdvb2cuaW5oZXJpdHModzY5Yi5xci5Xcm9uZ0ZpZWxkRXJyb3IsIEVycm9yKTtcbiAgdmFyIFdyb25nRmllbGRFcnJvciA9IHc2OWIucXIuV3JvbmdGaWVsZEVycm9yO1xuXG5cblxuICAvKipcbiAgICogQHBhcmFtIHshdzY5Yi5xci5HRjI1Nn0gZmllbGQgZmllbGQuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNvZWZmaWNpZW50cyBjb2VmZmljaWVudHMuXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdzY5Yi5xci5HRjI1NlBvbHkgPSBmdW5jdGlvbihmaWVsZCwgY29lZmZpY2llbnRzKSB7XG4gICAgZ29vZy5hc3NlcnRzLmFzc2VydChjb2VmZmljaWVudHMgIT0gbnVsbCAmJiBjb2VmZmljaWVudHMubGVuZ3RoICE9IDApO1xuICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICB2YXIgY29lZmZpY2llbnRzTGVuZ3RoID0gY29lZmZpY2llbnRzLmxlbmd0aDtcbiAgICBpZiAoY29lZmZpY2llbnRzTGVuZ3RoID4gMSAmJiBjb2VmZmljaWVudHNbMF0gPT0gMCkge1xuICAgICAgLy8gTGVhZGluZyB0ZXJtIG11c3QgYmUgbm9uLXplcm8gZm9yIGFueXRoaW5nIGV4Y2VwdCB0aGUgY29uc3RhbnRcbiAgICAgIC8vIHBvbHlub21pYWwgXCIwXCJcbiAgICAgIHZhciBmaXJzdE5vblplcm8gPSAxO1xuICAgICAgd2hpbGUgKGZpcnN0Tm9uWmVybyA8IGNvZWZmaWNpZW50c0xlbmd0aCAmJlxuICAgICAgICBjb2VmZmljaWVudHNbZmlyc3ROb25aZXJvXSA9PSAwKSB7XG4gICAgICAgIGZpcnN0Tm9uWmVybysrO1xuICAgICAgfVxuICAgICAgaWYgKGZpcnN0Tm9uWmVybyA9PSBjb2VmZmljaWVudHNMZW5ndGgpIHtcbiAgICAgICAgdGhpcy5jb2VmZmljaWVudHMgPSBmaWVsZC56ZXJvLmNvZWZmaWNpZW50cztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29lZmZpY2llbnRzID0gbmV3IEFycmF5KGNvZWZmaWNpZW50c0xlbmd0aCAtIGZpcnN0Tm9uWmVybyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb2VmZmljaWVudHMubGVuZ3RoOyBpKyspdGhpcy5jb2VmZmljaWVudHNbaV0gPVxuICAgICAgICAgIDA7XG4gICAgICAgIGZvciAodmFyIGNpID0gMDsgY2kgPFxuICAgICAgICAgIHRoaXMuY29lZmZpY2llbnRzLmxlbmd0aDsgY2krKyl0aGlzLmNvZWZmaWNpZW50c1tjaV0gPVxuICAgICAgICAgIGNvZWZmaWNpZW50c1tmaXJzdE5vblplcm8gKyBjaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29lZmZpY2llbnRzID0gY29lZmZpY2llbnRzO1xuICAgIH1cbiAgfTtcbiAgdmFyIEdGMjU2UG9seSA9IHc2OWIucXIuR0YyNTZQb2x5O1xuICB2YXIgcHJvID0gR0YyNTZQb2x5LnByb3RvdHlwZTtcblxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIGEgXiBiLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYSBudW1iZXIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiIG51bWJlci5cbiAgICogQHJldHVybiB7bnVtYmVyfSByZXN1bHQuXG4gICAqL1xuICBHRjI1NlBvbHkuYWRkT3JTdWJ0cmFjdFNjYWxhciA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYSBeIGI7XG4gIH07XG5cbiAgcHJvLmlzWmVybyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvZWZmaWNpZW50c1swXSA9PSAwO1xuICB9O1xuXG4gIHByby5nZXREZWdyZWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jb2VmZmljaWVudHMubGVuZ3RoIC0gMTtcbiAgfTtcblxuICBwcm8uZ2V0Q29lZmZpY2llbnQgPSBmdW5jdGlvbihkZWdyZWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb2VmZmljaWVudHNbdGhpcy5jb2VmZmljaWVudHMubGVuZ3RoIC0gMSAtIGRlZ3JlZV07XG4gIH07XG5cbiAgcHJvLmV2YWx1YXRlQXQgPSBmdW5jdGlvbihhKSB7XG4gICAgaWYgKGEgPT0gMCkge1xuICAgICAgLy8gSnVzdCByZXR1cm4gdGhlIHheMCBjb2VmZmljaWVudFxuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29lZmZpY2llbnQoMCk7XG4gICAgfVxuICAgIHZhciBzaXplID0gdGhpcy5jb2VmZmljaWVudHMubGVuZ3RoO1xuICAgIGlmIChhID09IDEpIHtcbiAgICAgIC8vIEp1c3QgdGhlIHN1bSBvZiB0aGUgY29lZmZpY2llbnRzXG4gICAgICB2YXIgcmVzdWx0ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IEdGMjU2UG9seS5hZGRPclN1YnRyYWN0U2NhbGFyKHJlc3VsdCwgdGhpcy5jb2VmZmljaWVudHNbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgdmFyIHJlc3VsdDIgPSB0aGlzLmNvZWZmaWNpZW50c1swXTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHNpemU7IGkrKykge1xuICAgICAgcmVzdWx0MiA9IEdGMjU2UG9seS5hZGRPclN1YnRyYWN0U2NhbGFyKHRoaXMuZmllbGQubXVsdGlwbHkoYSwgcmVzdWx0MiksXG4gICAgICAgIHRoaXMuY29lZmZpY2llbnRzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDI7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBvciBzdWJzdHJhY3Qgb3RoZXIgIHBvbHkuXG4gICAqIEBwYXJhbSB7IXc2OWIucXIuR0YyNTZQb2x5fSBvdGhlciBvdGhlciBwb2x5LlxuICAgKiBAcmV0dXJuIHshdzY5Yi5xci5HRjI1NlBvbHl9IHJlc3VsdC5cbiAgICovXG4gIHByby5hZGRPclN1YnRyYWN0ID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgICBpZiAodGhpcy5maWVsZCAhPSBvdGhlci5maWVsZCkge1xuICAgICAgdGhyb3cgbmV3IFdyb25nRmllbGRFcnJvcigpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIG90aGVyO1xuICAgIH1cbiAgICBpZiAob3RoZXIuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBzbWFsbGVyQ29lZmZpY2llbnRzID0gdGhpcy5jb2VmZmljaWVudHM7XG4gICAgdmFyIGxhcmdlckNvZWZmaWNpZW50cyA9IG90aGVyLmNvZWZmaWNpZW50cztcbiAgICBpZiAoc21hbGxlckNvZWZmaWNpZW50cy5sZW5ndGggPiBsYXJnZXJDb2VmZmljaWVudHMubGVuZ3RoKSB7XG4gICAgICB2YXIgdGVtcCA9IHNtYWxsZXJDb2VmZmljaWVudHM7XG4gICAgICBzbWFsbGVyQ29lZmZpY2llbnRzID0gbGFyZ2VyQ29lZmZpY2llbnRzO1xuICAgICAgbGFyZ2VyQ29lZmZpY2llbnRzID0gdGVtcDtcbiAgICB9XG4gICAgdmFyIHN1bURpZmYgPSBuZXcgQXJyYXkobGFyZ2VyQ29lZmZpY2llbnRzLmxlbmd0aCk7XG4gICAgdmFyIGxlbmd0aERpZmYgPSBsYXJnZXJDb2VmZmljaWVudHMubGVuZ3RoIC0gc21hbGxlckNvZWZmaWNpZW50cy5sZW5ndGg7XG4gICAgLy8gQ29weSBoaWdoLW9yZGVyIHRlcm1zIG9ubHkgZm91bmQgaW4gaGlnaGVyLWRlZ3JlZSBwb2x5bm9taWFsJ3NcbiAgICAvLyBjb2VmZmljaWVudHNcbiAgICBmb3IgKHZhciBjaSA9IDA7IGNpIDwgbGVuZ3RoRGlmZjsgY2krKylzdW1EaWZmW2NpXSA9XG4gICAgICBsYXJnZXJDb2VmZmljaWVudHNbY2ldO1xuXG4gICAgZm9yICh2YXIgaSA9IGxlbmd0aERpZmY7IGkgPCBsYXJnZXJDb2VmZmljaWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN1bURpZmZbaV0gPSBHRjI1NlBvbHkuYWRkT3JTdWJ0cmFjdFNjYWxhcihcbiAgICAgICAgc21hbGxlckNvZWZmaWNpZW50c1tpIC0gbGVuZ3RoRGlmZl0sXG4gICAgICAgIGxhcmdlckNvZWZmaWNpZW50c1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBHRjI1NlBvbHkodGhpcy5maWVsZCwgc3VtRGlmZik7XG4gIH07XG5cbiAgLyoqXG4gICAqIE11bHRpcGx5IHdpdGggb3RoZXIgcG9seS5cbiAgICogQHBhcmFtIHshdzY5Yi5xci5HRjI1NlBvbHl9IG90aGVyIG90aGVyIHBvbHkuXG4gICAqIEByZXR1cm4ge3c2OWIucXIuR0YyNTZQb2x5fSByZXN1bHQuXG4gICAqL1xuICBwcm8ubXVsdGlwbHkxID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgICBpZiAodGhpcy5maWVsZCAhPSBvdGhlci5maWVsZCkge1xuICAgICAgdGhyb3cgbmV3IFdyb25nRmllbGRFcnJvcigpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc1plcm8oKSB8fCBvdGhlci5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmllbGQuemVybztcbiAgICB9XG4gICAgdmFyIGFDb2VmZmljaWVudHMgPSB0aGlzLmNvZWZmaWNpZW50cztcbiAgICB2YXIgYUxlbmd0aCA9IGFDb2VmZmljaWVudHMubGVuZ3RoO1xuICAgIHZhciBiQ29lZmZpY2llbnRzID0gb3RoZXIuY29lZmZpY2llbnRzO1xuICAgIHZhciBiTGVuZ3RoID0gYkNvZWZmaWNpZW50cy5sZW5ndGg7XG4gICAgdmFyIHByb2R1Y3QgPSBuZXcgQXJyYXkoYUxlbmd0aCArIGJMZW5ndGggLSAxKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFMZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGFDb2VmZiA9IGFDb2VmZmljaWVudHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJMZW5ndGg7IGorKykge1xuICAgICAgICBwcm9kdWN0W2kgKyBqXSA9IEdGMjU2UG9seS5hZGRPclN1YnRyYWN0U2NhbGFyKHByb2R1Y3RbaSArIGpdLFxuICAgICAgICAgIHRoaXMuZmllbGQubXVsdGlwbHkoYUNvZWZmLCBiQ29lZmZpY2llbnRzW2pdKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgR0YyNTZQb2x5KHRoaXMuZmllbGQsIHByb2R1Y3QpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBNdWx0aXBseSB3aXRoIHNjYWxhci5cbiAgICogQHBhcmFtIHshbnVtYmVyfSBzY2FsYXIgb3RoZXIgcG9seS5cbiAgICogQHJldHVybiB7dzY5Yi5xci5HRjI1NlBvbHl9IHJlc3VsdC5cbiAgICovXG4gIHByby5tdWx0aXBseTIgPSBmdW5jdGlvbihzY2FsYXIpIHtcbiAgICBpZiAoc2NhbGFyID09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmZpZWxkLnplcm87XG4gICAgfVxuICAgIGlmIChzY2FsYXIgPT0gMSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBzaXplID0gdGhpcy5jb2VmZmljaWVudHMubGVuZ3RoO1xuICAgIHZhciBwcm9kdWN0ID0gbmV3IEFycmF5KHNpemUpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICBwcm9kdWN0W2ldID0gdGhpcy5maWVsZC5tdWx0aXBseSh0aGlzLmNvZWZmaWNpZW50c1tpXSwgc2NhbGFyKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBHRjI1NlBvbHkodGhpcy5maWVsZCwgcHJvZHVjdCk7XG4gIH07XG4gIC8qKlxuICAgKiBUT0RPLlxuICAgKiBAcmV0dXJuIHshdzY5Yi5xci5HRjI1NlBvbHl9IHJlc3VsdC5cbiAgICovXG4gIHByby5tdWx0aXBseUJ5TW9ub21pYWwgPSBmdW5jdGlvbihkZWdyZWUsIGNvZWZmaWNpZW50KSB7XG4gICAgZ29vZy5hc3NlcnRzLmFzc2VydChkZWdyZWUgPj0gMCk7XG4gICAgaWYgKGNvZWZmaWNpZW50ID09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmZpZWxkLnplcm87XG4gICAgfVxuICAgIHZhciBzaXplID0gdGhpcy5jb2VmZmljaWVudHMubGVuZ3RoO1xuICAgIHZhciBwcm9kdWN0ID0gbmV3IEFycmF5KHNpemUgKyBkZWdyZWUpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvZHVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvZHVjdFtpXSA9IDA7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICBwcm9kdWN0W2ldID0gdGhpcy5maWVsZC5tdWx0aXBseSh0aGlzLmNvZWZmaWNpZW50c1tpXSwgY29lZmZpY2llbnQpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEdGMjU2UG9seSh0aGlzLmZpZWxkLCBwcm9kdWN0KTtcbiAgfTtcblxuICAvKipcbiAgICogRGl2aWRlIGJ5IG90aGVyIHBvbHkuXG4gICAqIEBwYXJhbSB7IXc2OWIucXIuR0YyNTZQb2x5fSBvdGhlciBvdGhlciBwb2x5LlxuICAgKiBAcmV0dXJuIHtBcnJheS48dzY5Yi5xci5HRjI1NlBvbHk+fSByZXN1bHQgKHF1b3RpZW50LCByZW1haW5kZXIpLlxuICAgKi9cbiAgcHJvLmRpdmlkZSA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgaWYgKHRoaXMuZmllbGQgIT0gb3RoZXIuZmllbGQpIHtcbiAgICAgIHRocm93IG5ldyBXcm9uZ0ZpZWxkRXJyb3IoKTtcbiAgICB9XG4gICAgZ29vZy5hc3NlcnRzLmFzc2VydCghb3RoZXIuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHF1b3RpZW50ID0gdGhpcy5maWVsZC56ZXJvO1xuICAgIHZhciByZW1haW5kZXIgPSB0aGlzO1xuXG4gICAgdmFyIGRlbm9taW5hdG9yTGVhZGluZ1Rlcm0gPSBvdGhlci5nZXRDb2VmZmljaWVudChvdGhlci5nZXREZWdyZWUoKSk7XG4gICAgdmFyIGludmVyc2VEZW5vbWluYXRvckxlYWRpbmdUZXJtID0gdGhpcy5maWVsZC5pbnZlcnNlKFxuICAgICAgZGVub21pbmF0b3JMZWFkaW5nVGVybSk7XG5cbiAgICB3aGlsZSAocmVtYWluZGVyLmdldERlZ3JlZSgpID49IG90aGVyLmdldERlZ3JlZSgpICYmICFyZW1haW5kZXIuaXNaZXJvKCkpIHtcbiAgICAgIHZhciBkZWdyZWVEaWZmZXJlbmNlID0gcmVtYWluZGVyLmdldERlZ3JlZSgpIC0gb3RoZXIuZ2V0RGVncmVlKCk7XG4gICAgICB2YXIgc2NhbGUgPSB0aGlzLmZpZWxkLm11bHRpcGx5KFxuICAgICAgICByZW1haW5kZXIuZ2V0Q29lZmZpY2llbnQocmVtYWluZGVyLmdldERlZ3JlZSgpKSxcbiAgICAgICAgaW52ZXJzZURlbm9taW5hdG9yTGVhZGluZ1Rlcm0pO1xuICAgICAgdmFyIHRlcm0gPSBvdGhlci5tdWx0aXBseUJ5TW9ub21pYWwoZGVncmVlRGlmZmVyZW5jZSwgc2NhbGUpO1xuICAgICAgdmFyIGl0ZXJhdGlvblF1b3RpZW50ID0gdGhpcy5maWVsZC5idWlsZE1vbm9taWFsKGRlZ3JlZURpZmZlcmVuY2UsXG4gICAgICAgIHNjYWxlKTtcbiAgICAgIHF1b3RpZW50ID0gcXVvdGllbnQuYWRkT3JTdWJ0cmFjdChpdGVyYXRpb25RdW90aWVudCk7XG4gICAgICByZW1haW5kZXIgPSByZW1haW5kZXIuYWRkT3JTdWJ0cmFjdCh0ZXJtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFycmF5KHF1b3RpZW50LCByZW1haW5kZXIpO1xuICB9O1xuXG4gIHByby50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBkZWdyZWUgPSB0aGlzLmdldERlZ3JlZSgpOyBkZWdyZWUgPj0gMDsgZGVncmVlLS0pIHtcbiAgICAgIHZhciBjb2VmZmljaWVudCA9IHRoaXMuZ2V0Q29lZmZpY2llbnQoZGVncmVlKTtcbiAgICAgIGlmIChjb2VmZmljaWVudCAhPSAwKSB7XG4gICAgICAgIGlmIChjb2VmZmljaWVudCA8IDApIHtcbiAgICAgICAgICByZXN1bHQucHVzaCgnIC0gJyk7XG4gICAgICAgICAgY29lZmZpY2llbnQgPSAtY29lZmZpY2llbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgnICsgJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWdyZWUgPT0gMCB8fCBjb2VmZmljaWVudCAhPSAxKSB7XG4gICAgICAgICAgdmFyIGFscGhhUG93ZXIgPSB0aGlzLmZpZWxkLmxvZyhjb2VmZmljaWVudCk7XG4gICAgICAgICAgaWYgKGFscGhhUG93ZXIgPT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goJzEnKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFscGhhUG93ZXIgPT0gMSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goJ2EnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goJ2FeJyk7XG4gICAgICAgICAgICByZXN1bHQucHVzaChhbHBoYVBvd2VyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZ3JlZSAhPSAwKSB7XG4gICAgICAgICAgaWYgKGRlZ3JlZSA9PSAxKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgneCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgneF4nKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRlZ3JlZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gIH07XG5cblxufSk7XG5cbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gUG9ydGVkIHRvIEphdmFTY3JpcHQgYnkgTGF6YXIgTGFzemxvIDIwMTFcblxuIGxhemFyc29mdEBnbWFpbC5jb20sIHd3dy5sYXphcnNvZnQuaW5mb1xuXG4gKi9cblxuLypcbiAqXG4gKiBDb3B5cmlnaHQgMjAwNyBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuR0YyNTYnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5HRjI1NlBvbHknKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgdmFyIEdGMjU2UG9seSA9IHc2OWIucXIuR0YyNTZQb2x5O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gcHJpbWl0aXZlIG51bWJlci5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB3NjliLnFyLkdGMjU2ID0gZnVuY3Rpb24ocHJpbWl0aXZlKSB7XG4gICAgdGhpcy5leHBUYWJsZSA9IG5ldyBBcnJheSgyNTYpO1xuICAgIHRoaXMubG9nVGFibGUgPSBuZXcgQXJyYXkoMjU2KTtcbiAgICB2YXIgeCA9IDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgdGhpcy5leHBUYWJsZVtpXSA9IHg7XG4gICAgICB4IDw8PSAxOyAvLyB4ID0geCAqIDI7IHdlJ3JlIGFzc3VtaW5nIHRoZSBnZW5lcmF0b3IgYWxwaGEgaXMgMlxuICAgICAgaWYgKHggPj0gMHgxMDApIHtcbiAgICAgICAgeCBePSBwcmltaXRpdmU7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU1OyBpKyspIHtcbiAgICAgIHRoaXMubG9nVGFibGVbdGhpcy5leHBUYWJsZVtpXV0gPSBpO1xuICAgIH1cbiAgICAvLyBsb2dUYWJsZVswXSA9PSAwIGJ1dCB0aGlzIHNob3VsZCBuZXZlciBiZSB1c2VkXG4gICAgdmFyIGF0MCA9IG5ldyBBcnJheSgxKTtcbiAgICBhdDBbMF0gPSAwO1xuICAgIHRoaXMuemVybyA9IG5ldyBHRjI1NlBvbHkodGhpcywgbmV3IEFycmF5KGF0MCkpO1xuICAgIHZhciBhdDEgPSBuZXcgQXJyYXkoMSk7XG4gICAgYXQxWzBdID0gMTtcbiAgICB0aGlzLm9uZSA9IG5ldyBHRjI1NlBvbHkodGhpcywgbmV3IEFycmF5KGF0MSkpO1xuICB9O1xuICB2YXIgR0YyNTYgPSB3NjliLnFyLkdGMjU2O1xuICB2YXIgcHJvID0gR0YyNTYucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshR0YyNTZQb2x5fSBwb2x5LlxuICAgKi9cbiAgcHJvLmJ1aWxkTW9ub21pYWwgPSBmdW5jdGlvbihkZWdyZWUsIGNvZWZmaWNpZW50KSB7XG4gICAgaWYgKGRlZ3JlZSA8IDApIHtcbiAgICAgIHRocm93IEVycm9yKCk7XG4gICAgfVxuICAgIGlmIChjb2VmZmljaWVudCA9PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy56ZXJvO1xuICAgIH1cbiAgICB2YXIgY29lZmZpY2llbnRzID0gbmV3IEFycmF5KGRlZ3JlZSArIDEpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29lZmZpY2llbnRzLmxlbmd0aDsgaSsrKWNvZWZmaWNpZW50c1tpXSA9IDA7XG4gICAgY29lZmZpY2llbnRzWzBdID0gY29lZmZpY2llbnQ7XG4gICAgcmV0dXJuIG5ldyBHRjI1NlBvbHkodGhpcywgY29lZmZpY2llbnRzKTtcbiAgfTtcbiAgcHJvLmV4cCA9IGZ1bmN0aW9uKGEpIHtcbiAgICByZXR1cm4gdGhpcy5leHBUYWJsZVthXTtcbiAgfTtcbiAgcHJvLmxvZyA9IGZ1bmN0aW9uKGEpIHtcbiAgICBpZiAoYSA9PSAwKSB7XG4gICAgICB0aHJvdyBFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5sb2dUYWJsZVthXTtcbiAgfTtcbiAgcHJvLmludmVyc2UgPSBmdW5jdGlvbihhKSB7XG4gICAgaWYgKGEgPT0gMCkge1xuICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZXhwVGFibGVbMjU1IC0gdGhpcy5sb2dUYWJsZVthXV07XG4gIH07XG4gIHByby5tdWx0aXBseSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICBpZiAoYSA9PSAwIHx8IGIgPT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChhID09IDEpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH1cbiAgICBpZiAoYiA9PSAxKSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZXhwVGFibGVbKHRoaXMubG9nVGFibGVbYV0gKyB0aGlzLmxvZ1RhYmxlW2JdKSAlIDI1NV07XG4gIH07XG5cbiAgR0YyNTYuUVJfQ09ERV9GSUVMRCA9IG5ldyBHRjI1NigweDAxMUQpO1xuICBHRjI1Ni5EQVRBX01BVFJJWF9GSUVMRCA9IG5ldyBHRjI1NigweDAxMkQpO1xuXG59KTtcblxuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiBQb3J0ZWQgdG8gSmF2YVNjcmlwdCBieSBMYXphciBMYXN6bG8gMjAxMVxuXG4gbGF6YXJzb2Z0QGdtYWlsLmNvbSwgd3d3LmxhemFyc29mdC5pbmZvXG5cbiAqL1xuXG4vKlxuICpcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5xci5SZWVkU29sb21vbkRlY29kZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5HRjI1NlBvbHknKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5SZWFkZXJFcnJvcicpO1xuXG4vKipcbiAqIDxwPkltcGxlbWVudHMgUmVlZC1Tb2xvbW9uIGRlY29kaW5nLCBhcyB0aGUgbmFtZSBpbXBsaWVzLjwvcD5cbiAqXG4gKiA8cD5UaGUgYWxnb3JpdGhtIHdpbGwgbm90IGJlIGV4cGxhaW5lZCBoZXJlLCBidXQgdGhlIGZvbGxvd2luZyByZWZlcmVuY2VzXG4gKiB3ZXJlIGhlbHBmdWxcbiAqIGluIGNyZWF0aW5nIHRoaXMgaW1wbGVtZW50YXRpb246PC9wPlxuICpcbiAqIDx1bD5cbiAqIDxsaT5CcnVjZSBNYWdncy5cbiAqIDxhIGhyZWY9XCJodHRwOi8vd3d3LmNzLmNtdS5lZHUvYWZzL2NzLmNtdS5lZHUvcHJvamVjdC9wc2NpY28tZ3V5Yi9yZWFsd29ybGRcbiAqIC93d3cvcnNfZGVjb2RlLnBzXCI+XG4gKiBcIkRlY29kaW5nIFJlZWQtU29sb21vbiBDb2Rlc1wiPC9hPiAoc2VlIGRpc2N1c3Npb24gb2YgRm9ybmV5J3MgRm9ybXVsYSk8L2xpPlxuICogPGxpPkouSS4gSGFsbC4gPGEgaHJlZj1cInd3dy5tdGgubXN1LmVkdS9+amhhbGwvY2xhc3Nlcy9jb2Rlbm90ZXMvR1JTLnBkZlwiPlxuICogXCJDaGFwdGVyIDUuIEdlbmVyYWxpemVkIFJlZWQtU29sb21vbiBDb2Rlc1wiPC9hPlxuICogKHNlZSBkaXNjdXNzaW9uIG9mIEV1Y2xpZGVhbiBhbGdvcml0aG0pPC9saT5cbiAqIDwvdWw+XG4gKlxuICogPHA+TXVjaCBjcmVkaXQgaXMgZHVlIHRvIFdpbGxpYW0gUnVja2xpZGdlIHNpbmNlIHBvcnRpb25zIG9mIHRoaXMgY29kZSBhcmVcbiAqIGFuIGluZGlyZWN0IHBvcnQgb2YgaGlzIEMrKyBSZWVkLVNvbG9tb24gaW1wbGVtZW50YXRpb24uPC9wPlxuICpcbiAqIEBhdXRob3IgU2VhbiBPd2VuXG4gKiBAYXV0aG9yIFdpbGxpYW0gUnVja2xpZGdlXG4gKiBAYXV0aG9yIHNhbmZvcmRzcXVpcmVzXG4gKi9cblxuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICB2YXIgR0YyNTZQb2x5ID0gdzY5Yi5xci5HRjI1NlBvbHk7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9tc2cgbWVzc2FnZS5cbiAgICogQGV4dGVuZHMge3c2OWIucXIuUmVhZGVyRXJyb3J9XG4gICAqL1xuICB3NjliLnFyLlJlZWRTb2xvbW9uRXJyb3IgPSBmdW5jdGlvbihvcHRfbXNnKSB7XG4gICAgZ29vZy5iYXNlKHRoaXMsIG9wdF9tc2cpO1xuICB9O1xuICBnb29nLmluaGVyaXRzKHc2OWIucXIuUmVlZFNvbG9tb25FcnJvciwgdzY5Yi5xci5SZWFkZXJFcnJvcik7XG4gIHZhciBSZWVkU29sb21vbkVycm9yID0gdzY5Yi5xci5SZWVkU29sb21vbkVycm9yO1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7IXc2OWIucXIuR0YyNTZ9IGZpZWxkIGZpZWxkLlxuICAgKi9cbiAgdzY5Yi5xci5SZWVkU29sb21vbkRlY29kZXIgPSBmdW5jdGlvbihmaWVsZCkge1xuICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgfTtcbiAgdmFyIFJlZWRTb2xvbW9uRGVjb2RlciA9IHc2OWIucXIuUmVlZFNvbG9tb25EZWNvZGVyO1xuICB2YXIgcHJvID0gUmVlZFNvbG9tb25EZWNvZGVyLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogPHA+RGVjb2RlcyBnaXZlbiBzZXQgb2YgcmVjZWl2ZWQgY29kZXdvcmRzLCB3aGljaCBpbmNsdWRlIGJvdGggZGF0YSBhbmRcbiAgICogZXJyb3ItY29ycmVjdGlvbiBjb2Rld29yZHMuXG4gICAqIFJlYWxseSwgdGhpcyBtZWFucyBpdCB1c2VzIFJlZWQtU29sb21vbiB0byBkZXRlY3QgYW5kIGNvcnJlY3QgIGVycm9ycyxcbiAgICogaW4tcGxhY2UsIGluIHRoZSBpbnB1dC48L3A+XG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHJlY2VpdmVkIGRhdGEgYW5kIGVycm9yLWNvcnJlY3Rpb24gY29kZXdvcmRzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdHdvUyBudW1iZXIgb2YgZXJyb3ItY29ycmVjdGlvbiBjb2Rld29yZHMgYXZhaWxhYmxlLlxuICAgKi9cbiAgcHJvLmRlY29kZSA9IGZ1bmN0aW9uKHJlY2VpdmVkLCB0d29TKSB7XG4gICAgdmFyIHBvbHkgPSBuZXcgR0YyNTZQb2x5KHRoaXMuZmllbGQsIHJlY2VpdmVkKTtcbiAgICB2YXIgc3luZHJvbWVDb2VmZmljaWVudHMgPSBuZXcgQXJyYXkodHdvUyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPFxuICAgICAgc3luZHJvbWVDb2VmZmljaWVudHMubGVuZ3RoOyBpKyspc3luZHJvbWVDb2VmZmljaWVudHNbaV0gPSAwO1xuICAgIHZhciBkYXRhTWF0cml4ID0gZmFsc2U7Ly90aGlzLmZpZWxkLkVxdWFscyhHRjI1Ni5EQVRBX01BVFJJWF9GSUVMRCk7XG4gICAgdmFyIG5vRXJyb3IgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHdvUzsgaSsrKSB7XG4gICAgICAvLyBUaGFua3MgdG8gc2FuZm9yZHNxdWlyZXMgZm9yIHRoaXMgZml4OlxuICAgICAgdmFyIHZhbCA9IHBvbHkuZXZhbHVhdGVBdCh0aGlzLmZpZWxkLmV4cChkYXRhTWF0cml4ID8gaSArIDEgOiBpKSk7XG4gICAgICBzeW5kcm9tZUNvZWZmaWNpZW50c1tzeW5kcm9tZUNvZWZmaWNpZW50cy5sZW5ndGggLSAxIC0gaV0gPSB2YWw7XG4gICAgICBpZiAodmFsICE9IDApIHtcbiAgICAgICAgbm9FcnJvciA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9FcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgc3luZHJvbWUgPSBuZXcgR0YyNTZQb2x5KHRoaXMuZmllbGQsIHN5bmRyb21lQ29lZmZpY2llbnRzKTtcbiAgICB2YXIgc2lnbWFPbWVnYSA9IHRoaXMucnVuRXVjbGlkZWFuQWxnb3JpdGhtKHRoaXMuZmllbGQuYnVpbGRNb25vbWlhbCh0d29TLFxuICAgICAgMSksIHN5bmRyb21lLCB0d29TKTtcbiAgICB2YXIgc2lnbWEgPSBzaWdtYU9tZWdhWzBdO1xuICAgIHZhciBvbWVnYSA9IHNpZ21hT21lZ2FbMV07XG4gICAgdmFyIGVycm9yTG9jYXRpb25zID0gdGhpcy5maW5kRXJyb3JMb2NhdGlvbnMoc2lnbWEpO1xuICAgIHZhciBlcnJvck1hZ25pdHVkZXMgPSB0aGlzLmZpbmRFcnJvck1hZ25pdHVkZXMob21lZ2EsIGVycm9yTG9jYXRpb25zLFxuICAgICAgZGF0YU1hdHJpeCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlcnJvckxvY2F0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBvc2l0aW9uID0gcmVjZWl2ZWQubGVuZ3RoIC0gMSAtIHRoaXMuZmllbGQubG9nKGVycm9yTG9jYXRpb25zW2ldKTtcbiAgICAgIGlmIChwb3NpdGlvbiA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJlZWRTb2xvbW9uRXJyb3IoJ2JhZCBlcnJvciBsb2NhdGlvbicpO1xuICAgICAgfVxuICAgICAgcmVjZWl2ZWRbcG9zaXRpb25dID0gR0YyNTZQb2x5LmFkZE9yU3VidHJhY3RTY2FsYXIocmVjZWl2ZWRbcG9zaXRpb25dLFxuICAgICAgICBlcnJvck1hZ25pdHVkZXNbaV0pO1xuICAgIH1cbiAgfTtcblxuICBwcm8ucnVuRXVjbGlkZWFuQWxnb3JpdGhtID0gZnVuY3Rpb24oYSwgYiwgUikge1xuICAgIC8vIEFzc3VtZSBhJ3MgZGVncmVlIGlzID49IGInc1xuICAgIGlmIChhLmdldERlZ3JlZSgpIDwgYi5nZXREZWdyZWUoKSkge1xuICAgICAgdmFyIHRlbXAgPSBhO1xuICAgICAgYSA9IGI7XG4gICAgICBiID0gdGVtcDtcbiAgICB9XG5cbiAgICB2YXIgckxhc3QgPSBhO1xuICAgIHZhciByID0gYjtcbiAgICB2YXIgc0xhc3QgPSB0aGlzLmZpZWxkLm9uZTtcbiAgICB2YXIgcyA9IHRoaXMuZmllbGQuemVybztcbiAgICB2YXIgdExhc3QgPSB0aGlzLmZpZWxkLnplcm87XG4gICAgdmFyIHQgPSB0aGlzLmZpZWxkLm9uZTtcblxuICAgIC8vIFJ1biBFdWNsaWRlYW4gYWxnb3JpdGhtIHVudGlsIHIncyBkZWdyZWUgaXMgbGVzcyB0aGFuIFIvMlxuICAgIHdoaWxlIChyLmdldERlZ3JlZSgpID49IE1hdGguZmxvb3IoUiAvIDIpKSB7XG4gICAgICB2YXIgckxhc3RMYXN0ID0gckxhc3Q7XG4gICAgICB2YXIgc0xhc3RMYXN0ID0gc0xhc3Q7XG4gICAgICB2YXIgdExhc3RMYXN0ID0gdExhc3Q7XG4gICAgICByTGFzdCA9IHI7XG4gICAgICBzTGFzdCA9IHM7XG4gICAgICB0TGFzdCA9IHQ7XG5cbiAgICAgIC8vIERpdmlkZSByTGFzdExhc3QgYnkgckxhc3QsIHdpdGggcXVvdGllbnQgaW4gcSBhbmQgcmVtYWluZGVyIGluIHJcbiAgICAgIGlmIChyTGFzdC5pc1plcm8oKSkge1xuICAgICAgICAvLyBPb3BzLCBFdWNsaWRlYW4gYWxnb3JpdGhtIGFscmVhZHkgdGVybWluYXRlZD9cbiAgICAgICAgdGhyb3cgbmV3IFJlZWRTb2xvbW9uRXJyb3IoJ3Jfe2ktMX0gd2FzIHplcm8nKTtcbiAgICAgIH1cbiAgICAgIHIgPSByTGFzdExhc3Q7XG4gICAgICB2YXIgcSA9IHRoaXMuZmllbGQuemVybztcbiAgICAgIHZhciBkZW5vbWluYXRvckxlYWRpbmdUZXJtID0gckxhc3QuZ2V0Q29lZmZpY2llbnQockxhc3QuZ2V0RGVncmVlKCkpO1xuICAgICAgdmFyIGRsdEludmVyc2UgPSB0aGlzLmZpZWxkLmludmVyc2UoZGVub21pbmF0b3JMZWFkaW5nVGVybSk7XG4gICAgICB3aGlsZSAoci5nZXREZWdyZWUoKSA+PSByTGFzdC5nZXREZWdyZWUoKSAmJiAhci5pc1plcm8oKSkge1xuICAgICAgICB2YXIgZGVncmVlRGlmZiA9IHIuZ2V0RGVncmVlKCkgLSByTGFzdC5nZXREZWdyZWUoKTtcbiAgICAgICAgdmFyIHNjYWxlID0gdGhpcy5maWVsZC5tdWx0aXBseShyLmdldENvZWZmaWNpZW50KHIuZ2V0RGVncmVlKCkpLFxuICAgICAgICAgIGRsdEludmVyc2UpO1xuICAgICAgICBxID0gcS5hZGRPclN1YnRyYWN0KHRoaXMuZmllbGQuYnVpbGRNb25vbWlhbChkZWdyZWVEaWZmLCBzY2FsZSkpO1xuICAgICAgICByID0gci5hZGRPclN1YnRyYWN0KHJMYXN0Lm11bHRpcGx5QnlNb25vbWlhbChkZWdyZWVEaWZmLCBzY2FsZSkpO1xuICAgICAgICAvL3IuRVhFKCk7XG4gICAgICB9XG5cbiAgICAgIHMgPSBxLm11bHRpcGx5MShzTGFzdCkuYWRkT3JTdWJ0cmFjdChzTGFzdExhc3QpO1xuICAgICAgdCA9IHEubXVsdGlwbHkxKHRMYXN0KS5hZGRPclN1YnRyYWN0KHRMYXN0TGFzdCk7XG4gICAgfVxuXG4gICAgdmFyIHNpZ21hVGlsZGVBdFplcm8gPSB0LmdldENvZWZmaWNpZW50KDApO1xuICAgIGlmIChzaWdtYVRpbGRlQXRaZXJvID09IDApIHtcbiAgICAgIHRocm93IG5ldyBSZWVkU29sb21vbkVycm9yKCdzaWdtYVRpbGRlKDApIHdhcyB6ZXJvJyk7XG4gICAgfVxuXG4gICAgdmFyIGludmVyc2UgPSB0aGlzLmZpZWxkLmludmVyc2Uoc2lnbWFUaWxkZUF0WmVybyk7XG4gICAgdmFyIHNpZ21hID0gdC5tdWx0aXBseTIoaW52ZXJzZSk7XG4gICAgdmFyIG9tZWdhID0gci5tdWx0aXBseTIoaW52ZXJzZSk7XG4gICAgcmV0dXJuIG5ldyBBcnJheShzaWdtYSwgb21lZ2EpO1xuICB9O1xuICBwcm8uZmluZEVycm9yTG9jYXRpb25zID0gZnVuY3Rpb24oZXJyb3JMb2NhdG9yKSB7XG4gICAgLy8gVGhpcyBpcyBhIGRpcmVjdCBhcHBsaWNhdGlvbiBvZiBDaGllbidzIHNlYXJjaFxuICAgIHZhciBudW1FcnJvcnMgPSBlcnJvckxvY2F0b3IuZ2V0RGVncmVlKCk7XG4gICAgaWYgKG51bUVycm9ycyA9PSAxKSB7XG4gICAgICAvLyBzaG9ydGN1dFxuICAgICAgcmV0dXJuIFtlcnJvckxvY2F0b3IuZ2V0Q29lZmZpY2llbnQoMSldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KG51bUVycm9ycyk7XG4gICAgdmFyIGUgPSAwO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgMjU2ICYmIGUgPCBudW1FcnJvcnM7IGkrKykge1xuICAgICAgaWYgKGVycm9yTG9jYXRvci5ldmFsdWF0ZUF0KGkpID09IDApIHtcbiAgICAgICAgcmVzdWx0W2VdID0gdGhpcy5maWVsZC5pbnZlcnNlKGkpO1xuICAgICAgICBlKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlICE9IG51bUVycm9ycykge1xuICAgICAgdGhyb3cgbmV3IFJlZWRTb2xvbW9uRXJyb3IoJ2xvY2F0b3IgZGVncmVlIGRvZXMgbm90IG1hdGNoICcgK1xuICAgICAgICAnbnVtYmVyIG9mIHJvb3RzJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHByby5maW5kRXJyb3JNYWduaXR1ZGVzID1cbiAgICBmdW5jdGlvbihlcnJvckV2YWx1YXRvciwgZXJyb3JMb2NhdGlvbnMsIGRhdGFNYXRyaXgpIHtcbiAgICAgIC8vIFRoaXMgaXMgZGlyZWN0bHkgYXBwbHlpbmcgRm9ybmV5J3MgRm9ybXVsYVxuICAgICAgdmFyIHMgPSBlcnJvckxvY2F0aW9ucy5sZW5ndGg7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KHMpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdmFyIHhpSW52ZXJzZSA9IHRoaXMuZmllbGQuaW52ZXJzZShlcnJvckxvY2F0aW9uc1tpXSk7XG4gICAgICAgIHZhciBkZW5vbWluYXRvciA9IDE7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgaWYgKGkgIT0gaikge1xuICAgICAgICAgICAgZGVub21pbmF0b3IgPVxuICAgICAgICAgICAgICB0aGlzLmZpZWxkLm11bHRpcGx5KGRlbm9taW5hdG9yLCBHRjI1NlBvbHkuYWRkT3JTdWJ0cmFjdFNjYWxhcigxLFxuICAgICAgICAgICAgICAgIHRoaXMuZmllbGQubXVsdGlwbHkoZXJyb3JMb2NhdGlvbnNbal0sIHhpSW52ZXJzZSkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W2ldID0gdGhpcy5maWVsZC5tdWx0aXBseShlcnJvckV2YWx1YXRvci5ldmFsdWF0ZUF0KHhpSW52ZXJzZSksXG4gICAgICAgICAgdGhpcy5maWVsZC5pbnZlcnNlKGRlbm9taW5hdG9yKSk7XG4gICAgICAgIC8vIFRoYW5rcyB0byBzYW5mb3Jkc3F1aXJlcyBmb3IgdGhpcyBmaXg6XG4gICAgICAgIGlmIChkYXRhTWF0cml4KSB7XG4gICAgICAgICAgcmVzdWx0W2ldID0gdGhpcy5maWVsZC5tdWx0aXBseShyZXN1bHRbaV0sIHhpSW52ZXJzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn0pO1xuXG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG4vKlxuIFBvcnRlZCB0byBKYXZhU2NyaXB0IGJ5IExhemFyIExhc3psbyAyMDExXG5cbiBsYXphcnNvZnRAZ21haWwuY29tLCB3d3cubGF6YXJzb2Z0LmluZm9cblxuICovXG5cbi8qXG4gKlxuICogQ29weXJpZ2h0IDIwMDcgWlhpbmcgYXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZ29vZy5wcm92aWRlKCd3NjliLnFyLmRlY29kZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5CaXRNYXRyaXhQYXJzZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5EYXRhQmxvY2snKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5EZWNvZGVkQml0U3RyZWFtUGFyc2VyJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuR0YyNTYnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5SZWVkU29sb21vbkRlY29kZXInKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgdmFyIEdGMjU2ID0gdzY5Yi5xci5HRjI1NjtcbiAgdmFyIERhdGFCbG9jayA9IHc2OWIucXIuRGF0YUJsb2NrO1xuXG4gIHZhciBfID0gdzY5Yi5xci5kZWNvZGVyO1xuICBfLnJzRGVjb2RlciA9IG5ldyB3NjliLnFyLlJlZWRTb2xvbW9uRGVjb2RlcihHRjI1Ni5RUl9DT0RFX0ZJRUxEKTtcblxuICBfLmNvcnJlY3RFcnJvcnMgPSBmdW5jdGlvbihjb2Rld29yZEJ5dGVzLCBudW1EYXRhQ29kZXdvcmRzKSB7XG4gICAgdmFyIG51bUNvZGV3b3JkcyA9IGNvZGV3b3JkQnl0ZXMubGVuZ3RoO1xuICAgIC8vIEZpcnN0IHJlYWQgaW50byBhbiBhcnJheSBvZiBpbnRzXG4gICAgdmFyIGNvZGV3b3Jkc0ludHMgPSBuZXcgQXJyYXkobnVtQ29kZXdvcmRzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUNvZGV3b3JkczsgaSsrKSB7XG4gICAgICBjb2Rld29yZHNJbnRzW2ldID0gY29kZXdvcmRCeXRlc1tpXSAmIDB4RkY7XG4gICAgfVxuICAgIHZhciBudW1FQ0NvZGV3b3JkcyA9IGNvZGV3b3JkQnl0ZXMubGVuZ3RoIC0gbnVtRGF0YUNvZGV3b3JkcztcbiAgICBfLnJzRGVjb2Rlci5kZWNvZGUoY29kZXdvcmRzSW50cywgbnVtRUNDb2Rld29yZHMpO1xuICAgICAgLy92YXIgY29ycmVjdG9yID0gbmV3IFJlZWRTb2xvbW9uKGNvZGV3b3Jkc0ludHMsIG51bUVDQ29kZXdvcmRzKTtcbiAgICAgIC8vY29ycmVjdG9yLmNvcnJlY3QoKTtcbiAgICAvLyBDb3B5IGJhY2sgaW50byBhcnJheSBvZiBieXRlcyAtLSBvbmx5IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhlIGJ5dGVzIHRoYXRcbiAgICAvLyB3ZXJlIGRhdGEgV2UgZG9uJ3QgY2FyZSBhYm91dCBlcnJvcnMgaW4gdGhlIGVycm9yLWNvcnJlY3Rpb24gY29kZXdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1EYXRhQ29kZXdvcmRzOyBpKyspIHtcbiAgICAgIGNvZGV3b3JkQnl0ZXNbaV0gPSBjb2Rld29yZHNJbnRzW2ldO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHt3NjliLnFyLkJpdE1hdHJpeH0gYml0cyBtYXRyaXguXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcmVhZGVyIGluc3RuYW5jZS5cbiAgICovXG4gIF8uZGVjb2RlID0gZnVuY3Rpb24oYml0cykge1xuICAgIHZhciBwYXJzZXIgPSBuZXcgdzY5Yi5xci5CaXRNYXRyaXhQYXJzZXIoYml0cyk7XG4gICAgdmFyIHZlcnNpb24gPSBwYXJzZXIucmVhZFZlcnNpb24oKTtcbiAgICB2YXIgZWNMZXZlbCA9IHBhcnNlci5yZWFkRm9ybWF0SW5mb3JtYXRpb24oKS5lcnJvckNvcnJlY3Rpb25MZXZlbDtcblxuICAgIC8vIFJlYWQgY29kZXdvcmRzXG4gICAgdmFyIGNvZGV3b3JkcyA9IHBhcnNlci5yZWFkQ29kZXdvcmRzKCk7XG5cbiAgICAvLyBTZXBhcmF0ZSBpbnRvIGRhdGEgYmxvY2tzXG4gICAgdmFyIGRhdGFCbG9ja3MgPSBEYXRhQmxvY2suZ2V0RGF0YUJsb2Nrcyhjb2Rld29yZHMsIHZlcnNpb24sIGVjTGV2ZWwpO1xuXG4gICAgLy8gQ291bnQgdG90YWwgbnVtYmVyIG9mIGRhdGEgYnl0ZXNcbiAgICB2YXIgdG90YWxCeXRlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhQmxvY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0b3RhbEJ5dGVzICs9IGRhdGFCbG9ja3NbaV0ubnVtRGF0YUNvZGV3b3JkcztcbiAgICB9XG4gICAgdmFyIHJlc3VsdEJ5dGVzID0gbmV3IEFycmF5KHRvdGFsQnl0ZXMpO1xuICAgIHZhciByZXN1bHRPZmZzZXQgPSAwO1xuXG4gICAgLy8gRXJyb3ItY29ycmVjdCBhbmQgY29weSBkYXRhIGJsb2NrcyB0b2dldGhlciBpbnRvIGEgc3RyZWFtIG9mIGJ5dGVzXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBkYXRhQmxvY2tzLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgZGF0YUJsb2NrID0gZGF0YUJsb2Nrc1tqXTtcbiAgICAgIHZhciBjb2Rld29yZEJ5dGVzID0gZGF0YUJsb2NrLmNvZGV3b3JkcztcbiAgICAgIHZhciBudW1EYXRhQ29kZXdvcmRzID0gZGF0YUJsb2NrLm51bURhdGFDb2Rld29yZHM7XG4gICAgICBfLmNvcnJlY3RFcnJvcnMoY29kZXdvcmRCeXRlcywgbnVtRGF0YUNvZGV3b3Jkcyk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bURhdGFDb2Rld29yZHM7IGkrKykge1xuICAgICAgICByZXN1bHRCeXRlc1tyZXN1bHRPZmZzZXQrK10gPSBjb2Rld29yZEJ5dGVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlY29kZSB0aGUgY29udGVudHMgb2YgdGhhdCBzdHJlYW0gb2YgYnl0ZXNcbiAgICByZXR1cm4gdzY5Yi5xci5EZWNvZGVkQml0U3RyZWFtUGFyc2VyLmRlY29kZShyZXN1bHRCeXRlcyxcbiAgICAgIHZlcnNpb24sIGVjTGV2ZWwuYml0cyk7XG4gICAgLy9yZXR1cm4gRGVjb2RlZEJpdFN0cmVhbVBhcnNlck9sZC5kZWNvZGUocmVzdWx0Qnl0ZXMsIHZlcnNpb24sIGVjTGV2ZWwpO1xuICB9O1xuXG59KTtcbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gKiBDb3B5cmlnaHQgMjAwNyBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuQml0QXJyYXknKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbi8qKlxuICAgKiA8cD5BIHNpbXBsZSwgZmFzdCBhcnJheSBvZiBiaXRzLCByZXByZXNlbnRlZCBjb21wYWN0bHkgYnkgYW4gYXJyYXkgb2YgaW50c1xuICAgKiBpbnRlcm5hbGx5LjwvcD5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBvcHRfc2l6ZSBzaXplLCBkZWZhdWx0cyB0byAwLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGF1dGhvciBTZWFuIE93ZW5cbiAgICovXG4gIHc2OWIucXIuQml0QXJyYXkgPSBmdW5jdGlvbihvcHRfc2l6ZSkge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnNpemVfID0gb3B0X3NpemUgfHwgMDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SW50MzJBcnJheX0gYml0cy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuYml0c18gPSB3NjliLnFyLkJpdEFycmF5Lm1ha2VBcnJheSh0aGlzLnNpemVfKTtcbiAgfTtcbiAgdmFyIF8gPSB3NjliLnFyLkJpdEFycmF5O1xuICB2YXIgcHJvID0gXy5wcm90b3R5cGU7XG5cbiAgXy5udW1iZXJPZlRyYWlsaW5nWmVyb3MgPSBmdW5jdGlvbihpKSB7XG4gICAgLy8gSEQsIEZpZ3VyZSA1LTE0XG4gICAgdmFyIHk7XG4gICAgaWYgKGkgPT0gMCkgcmV0dXJuIDMyO1xuICAgIHZhciBuID0gMzE7XG4gICAgeSA9IGkgPDwgMTY7IGlmICh5ICE9IDApIHsgbiA9IG4gLSAxNjsgaSA9IHk7IH1cbiAgICB5ID0gaSA8PCA4OyBpZiAoeSAhPSAwKSB7IG4gPSBuIC0gODsgaSA9IHk7IH1cbiAgICB5ID0gaSA8PCA0OyBpZiAoeSAhPSAwKSB7IG4gPSBuIC0gNDsgaSA9IHk7IH1cbiAgICB5ID0gaSA8PCAyOyBpZiAoeSAhPSAwKSB7IG4gPSBuIC0gMjsgaSA9IHk7IH1cbiAgICByZXR1cm4gbiAtICgoaSA8PCAxKSA+Pj4gMzEpO1xuICB9O1xuXG4gIHByby5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc2l6ZV87XG4gIH07XG5cbiAgcHJvLmdldFNpemVJbkJ5dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICh0aGlzLnNpemVfICsgNykgPj4gMztcbiAgfTtcblxuICBwcm8uZW5zdXJlQ2FwYWNpdHkgPSBmdW5jdGlvbihzaXplKSB7XG4gICAgaWYgKHNpemUgPiB0aGlzLmJpdHNfLmxlbmd0aCA8PCA1KSB7XG4gICAgICB2YXIgbmV3Qml0cyA9IF8ubWFrZUFycmF5KHNpemUpO1xuICAgICAgbmV3Qml0cy5zZXQodGhpcy5iaXRzXywgMCk7XG4gICAgICB0aGlzLmJpdHNfID0gbmV3Qml0cztcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpIGJpdCB0byBnZXQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWZmIGJpdCBpIGlzIHNldC5cbiAgICovXG4gIHByby5nZXQgPSBmdW5jdGlvbihpKSB7XG4gICAgcmV0dXJuICh0aGlzLmJpdHNfW2kgPj4gNV0gJiAoMSA8PCAoaSAmIDB4MUYpKSkgIT0gMDtcbiAgfTtcblxuICAvKipcbiAgICogU2V0cyBiaXQgaS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGkgYml0IHRvIHNldC5cbiAgICovXG4gIHByby5zZXQgPSBmdW5jdGlvbihpKSB7XG4gICAgdGhpcy5iaXRzX1tpID4+IDVdIHw9IDEgPDwgKGkgJiAweDFGKTtcbiAgfTtcblxuICAvKipcbiAgICogRmxpcHMgYml0IGkuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpIGJpdCB0byBzZXQuXG4gICAqL1xuICBwcm8uZmxpcCA9IGZ1bmN0aW9uKGkpIHtcbiAgICB0aGlzLmJpdHNfW2kgPj4gNV0gXj0gMSA8PCAoaSAmIDB4MUYpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbSBmaXJzdCBiaXQgdG8gY2hlY2suXG4gICAqIEByZXR1cm4ge251bWJlcn0gaW5kZXggb2YgZmlyc3QgYml0IHRoYXQgaXMgc2V0LCBzdGFydGluZyBmcm9tIHRoZSBnaXZlblxuICAgKiBpbmRleCwgb3Igc2l6ZSBpZiBub25lIGFyZSBzZXQgYXQgb3IgYmV5b25kIHRoaXMgZ2l2ZW4gaW5kZXguXG4gICAqIEBzZWUgI2dldE5leHRVbnNldChpbnQpXG4gICAqL1xuICBwcm8uZ2V0TmV4dFNldCA9IGZ1bmN0aW9uKGZyb20pIHtcbiAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZV87XG4gICAgaWYgKGZyb20gPj0gc2l6ZSkge1xuICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuICAgIHZhciBiaXRzT2Zmc2V0ID0gZnJvbSA+PiA1O1xuICAgIHZhciBjdXJyZW50Qml0cyA9IHRoaXMuYml0c19bYml0c09mZnNldF07XG4gICAgLy8gbWFzayBvZmYgbGVzc2VyIGJpdHMgZmlyc3RcbiAgICBjdXJyZW50Qml0cyAmPSB+KCgxIDw8IChmcm9tICYgMHgxRikpIC0gMSk7XG4gICAgd2hpbGUgKGN1cnJlbnRCaXRzID09IDApIHtcbiAgICAgIGlmICgrK2JpdHNPZmZzZXQgPT0gdGhpcy5iaXRzXy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICB9XG4gICAgICBjdXJyZW50Qml0cyA9IHRoaXMuYml0c19bYml0c09mZnNldF07XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSAoYml0c09mZnNldCA8PCA1KSArIF8ubnVtYmVyT2ZUcmFpbGluZ1plcm9zKGN1cnJlbnRCaXRzKTtcbiAgICByZXR1cm4gcmVzdWx0ID4gc2l6ZSA/IHNpemUgOiByZXN1bHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBzZWUgI2dldE5leHRTZXQoaW50KVxuICAgKi9cbiAgcHJvLmdldE5leHRVbnNldCA9IGZ1bmN0aW9uKGZyb20pIHtcbiAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZV87XG4gICAgaWYgKGZyb20gPj0gc2l6ZSkge1xuICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuICAgIHZhciBiaXRzT2Zmc2V0ID0gZnJvbSA+PiA1O1xuICAgIHZhciBjdXJyZW50Qml0cyA9IH50aGlzLmJpdHNfW2JpdHNPZmZzZXRdO1xuICAgIC8vIG1hc2sgb2ZmIGxlc3NlciBiaXRzIGZpcnN0XG4gICAgY3VycmVudEJpdHMgJj0gfigoMSA8PCAoZnJvbSAmIDB4MUYpKSAtIDEpO1xuICAgIHdoaWxlIChjdXJyZW50Qml0cyA9PSAwKSB7XG4gICAgICBpZiAoKytiaXRzT2Zmc2V0ID09IHRoaXMuYml0c18ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgICAgfVxuICAgICAgY3VycmVudEJpdHMgPSB+dGhpcy5iaXRzX1tiaXRzT2Zmc2V0XTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IChiaXRzT2Zmc2V0IDw8IDUpICsgXy5udW1iZXJPZlRyYWlsaW5nWmVyb3MoY3VycmVudEJpdHMpO1xuICAgIHJldHVybiByZXN1bHQgPiBzaXplID8gc2l6ZSA6IHJlc3VsdDtcbiAgfTtcblxuICAvKipcbiAgICogU2V0cyBhIGJsb2NrIG9mIDMyIGJpdHMsIHN0YXJ0aW5nIGF0IGJpdCBpLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaSBmaXJzdCBiaXQgdG8gc2V0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gbmV3Qml0cyB0aGUgbmV3IHZhbHVlIG9mIHRoZSBuZXh0IDMyIGJpdHMuIE5vdGUgYWdhaW4gdGhhdFxuICAgKiB0aGUgbGVhc3Qtc2lnbmlmaWNhbnQgYml0IGNvcnJlc3BvbmRzIHRvIGJpdCBpLCB0aGUgbmV4dC1sZWFzdC1zaWduaWZpY2FudFxuICAgKiB0byBpKzEsIGFuZCBzbyBvbi5cbiAgICovXG4gIHByby5zZXRCdWxrID0gZnVuY3Rpb24oaSwgbmV3Qml0cykge1xuICAgIHRoaXMuYml0c19baSA+PiA1XSA9IG5ld0JpdHM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgYSByYW5nZSBvZiBiaXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgc3RhcnQgb2YgcmFuZ2UsIGluY2x1c2l2ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBlbmQgb2YgcmFuZ2UsIGV4Y2x1c2l2ZS5cbiAgICovXG4gIHByby5zZXRSYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbiAgICBpZiAoZW5kID09IHN0YXJ0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHdpbGwgYmUgZWFzaWVyIHRvIHRyZWF0IHRoaXMgYXMgdGhlIGxhc3QgYWN0dWFsbHkgc2V0IGJpdCAtLSBpbmNsdXNpdmVcbiAgICBlbmQtLTtcbiAgICB2YXIgZmlyc3RJbnQgPSBzdGFydCA+PiA1O1xuICAgIHZhciBsYXN0SW50ID0gZW5kID4+IDU7XG4gICAgZm9yICh2YXIgaSA9IGZpcnN0SW50OyBpIDw9IGxhc3RJbnQ7IGkrKykge1xuICAgICAgdmFyIGZpcnN0Qml0ID0gaSA+IGZpcnN0SW50ID8gMCA6IHN0YXJ0ICYgMHgxRjtcbiAgICAgIHZhciBsYXN0Qml0ID0gaSA8IGxhc3RJbnQgPyAzMSA6IGVuZCAmIDB4MUY7XG4gICAgICB2YXIgbWFzaztcbiAgICAgIGlmIChmaXJzdEJpdCA9PSAwICYmIGxhc3RCaXQgPT0gMzEpIHtcbiAgICAgICAgbWFzayA9IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFzayA9IDA7XG4gICAgICAgIGZvciAodmFyIGogPSBmaXJzdEJpdDsgaiA8PSBsYXN0Qml0OyBqKyspIHtcbiAgICAgICAgICBtYXNrIHw9IDEgPDwgajtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5iaXRzX1tpXSB8PSBtYXNrO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ2xlYXJzIGFsbCBiaXRzIChzZXRzIHRvIGZhbHNlKS5cbiAgICovXG4gIHByby5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBtYXggPSB0aGlzLmJpdHNfLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heDsgaSsrKSB7XG4gICAgICB0aGlzLmJpdHNfW2ldID0gMDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEVmZmljaWVudCBtZXRob2QgdG8gY2hlY2sgaWYgYSByYW5nZSBvZiBiaXRzIGlzIHNldCwgb3Igbm90IHNldC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IHN0YXJ0IG9mIHJhbmdlLCBpbmNsdXNpdmUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgZW5kIG9mIHJhbmdlLCBleGNsdXNpdmUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgaWYgdHJ1ZSwgY2hlY2tzIHRoYXQgYml0cyBpbiByYW5nZSBhcmUgc2V0LFxuICAgKiBvdGhlcndpc2UgY2hlY2tzIHRoYXQgdGhleSBhcmUgbm90IHNldC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZmYgYWxsIGJpdHMgYXJlIHNldCBvciBub3Qgc2V0IGluIHJhbmdlLCBhY2NvcmRpbmdcbiAgICogdG8gdmFsdWUgYXJndW1lbnQuXG4gICAqL1xuICBwcm8uaXNSYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHZhbHVlKSB7XG4gICAgaWYgKGVuZCA8IHN0YXJ0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9XG4gICAgaWYgKGVuZCA9PSBzdGFydCkge1xuICAgICAgcmV0dXJuIHRydWU7IC8vIGVtcHR5IHJhbmdlIG1hdGNoZXNcbiAgICB9XG4gICAgLy8gd2lsbCBiZSBlYXNpZXIgdG8gdHJlYXQgdGhpcyBhcyB0aGUgbGFzdCBhY3R1YWxseSBzZXQgYml0IC0tIGluY2x1c2l2ZVxuICAgIGVuZC0tO1xuICAgIHZhciBmaXJzdEludCA9IHN0YXJ0ID4+IDU7XG4gICAgdmFyIGxhc3RJbnQgPSBlbmQgPj4gNTtcbiAgICBmb3IgKHZhciBpID0gZmlyc3RJbnQ7IGkgPD0gbGFzdEludDsgaSsrKSB7XG4gICAgICB2YXIgZmlyc3RCaXQgPSBpID4gZmlyc3RJbnQgPyAwIDogc3RhcnQgJiAweDFGO1xuICAgICAgdmFyIGxhc3RCaXQgPSBpIDwgbGFzdEludCA/IDMxIDogZW5kICYgMHgxRjtcbiAgICAgIHZhciBtYXNrO1xuICAgICAgaWYgKGZpcnN0Qml0ID09IDAgJiYgbGFzdEJpdCA9PSAzMSkge1xuICAgICAgICBtYXNrID0gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXNrID0gMDtcbiAgICAgICAgZm9yICh2YXIgaiA9IGZpcnN0Qml0OyBqIDw9IGxhc3RCaXQ7IGorKykge1xuICAgICAgICAgIG1hc2sgfD0gMSA8PCBqO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBmYWxzZSBpZiB3ZSdyZSBsb29raW5nIGZvciAxcyBhbmQgdGhlIG1hc2tlZCBiaXRzW2ldIGlzbid0IGFsbFxuICAgICAgLy8gMXMgKHRoYXQgaXMsIGVxdWFscyB0aGUgbWFzaywgb3Igd2UncmUgbG9va2luZyBmb3IgMHMgYW5kIHRoZSBtYXNrZWRcbiAgICAgIC8vIHBvcnRpb24gaXMgbm90IGFsbCAwc1xuICAgICAgaWYgKCh0aGlzLmJpdHNfW2ldICYgbWFzaykgIT0gKHZhbHVlID8gbWFzayA6IDApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgcHJvLmFwcGVuZEJpdCA9IGZ1bmN0aW9uKGJpdCkge1xuICAgIHRoaXMuZW5zdXJlQ2FwYWNpdHkodGhpcy5zaXplXyArIDEpO1xuICAgIGlmIChiaXQpIHtcbiAgICAgIHRoaXMuYml0c19bdGhpcy5zaXplXyA+PiA1XSB8PSAxIDw8ICh0aGlzLnNpemVfICYgMHgxRik7XG4gICAgfVxuICAgIHRoaXMuc2l6ZV8rKztcbiAgfTtcblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgbGVhc3Qtc2lnbmlmaWNhbnQgdGhpcy5iaXRzXywgZnJvbSB2YWx1ZSwgaW4gb3JkZXIgZnJvbVxuICAgKiBtb3N0LXNpZ25pZmljYW50IHRvIGxlYXN0LXNpZ25pZmljYW50LiBGb3IgZXhhbXBsZSwgYXBwZW5kaW5nIDYgdGhpcy5iaXRzX1xuICAgKiBmcm9tIDB4MDAwMDAxRSB3aWxsIGFwcGVuZCB0aGUgdGhpcy5iaXRzXyAwLCAxLCAxLCAxLCAxLCAwIGluIHRoYXQgb3JkZXIuXG4gICAqL1xuICBwcm8uYXBwZW5kQml0cyA9IGZ1bmN0aW9uKHZhbHVlLCBudW1CaXRzKSB7XG4gICAgaWYgKG51bUJpdHMgPCAwIHx8IG51bUJpdHMgPiAzMikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfVxuICAgIHRoaXMuZW5zdXJlQ2FwYWNpdHkodGhpcy5zaXplXyArIG51bUJpdHMpO1xuICAgIGZvciAodmFyIG51bUJpdHNMZWZ0ID0gbnVtQml0czsgbnVtQml0c0xlZnQgPiAwOyBudW1CaXRzTGVmdC0tKSB7XG4gICAgICB0aGlzLmFwcGVuZEJpdCgoKHZhbHVlID4+IChudW1CaXRzTGVmdCAtIDEpKSAmIDB4MDEpID09IDEpO1xuICAgIH1cbiAgfTtcblxuICBwcm8uYXBwZW5kQml0QXJyYXkgPSBmdW5jdGlvbihvdGhlcikge1xuICAgIHZhciBvdGhlclNpemUgPSBvdGhlci5zaXplXztcbiAgICB0aGlzLmVuc3VyZUNhcGFjaXR5KHRoaXMuc2l6ZV8gKyBvdGhlclNpemUpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3RoZXJTaXplOyBpKyspIHtcbiAgICAgIHRoaXMuYXBwZW5kQml0KG90aGVyLmdldChpKSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3c2OWIucXIuQml0QXJyYXl9IG90aGVyIG90aGVyLlxuICAgKi9cbiAgcHJvLnhvciA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgaWYgKHRoaXMuYml0c18ubGVuZ3RoICE9IG90aGVyLmJpdHNfLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5iaXRzXy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gVGhlIGxhc3QgYnl0ZSBjb3VsZCBiZSBpbmNvbXBsZXRlIChpLmUuIG5vdCBoYXZlIDggdGhpcy5iaXRzXyBpblxuICAgICAgLy8gaXQpIGJ1dCB0aGVyZSBpcyBubyBwcm9ibGVtIHNpbmNlIDAgWE9SIDAgPT0gMC5cbiAgICAgIHRoaXMuYml0c19baV0gXj0gb3RoZXIuYml0c19baV07XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gYml0T2Zmc2V0IGZpcnN0IGJpdCB0byBzdGFydCB3cml0aW5nLlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBhcnJheSB0byB3cml0ZSB2YXJvLiBCeXRlcyBhcmUgd3JpdHRlblxuICAgKiBtb3N0LXNpZ25pZmljYW50IGJ5dGUgZmlyc3QuIFRoaXMgaXMgdGhlIG9wcG9zaXRlIG9mIHRoZSB2YXJlcm5hbFxuICAgKiByZXByZXNlbnRhdGlvbiwgd2hpY2ggaXMgKiBleHBvc2VkIGJ5IHtAbGluayAjZ2V0Qml0QXJyYXkoKX0uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgcG9zaXRpb24gaW4gYXJyYXkgdG8gc3RhcnQgd3JpdGluZy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bUJ5dGVzIGhvdyBtYW55IGJ5dGVzIHRvIHdyaXRlLlxuICAgKi9cbiAgcHJvLnRvQnl0ZXMgPSBmdW5jdGlvbihiaXRPZmZzZXQsIGFycmF5LCBvZmZzZXQsIG51bUJ5dGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1CeXRlczsgaSsrKSB7XG4gICAgICB2YXIgdGhlQnl0ZSA9IDA7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDg7IGorKykge1xuICAgICAgICBpZiAodGhpcy5nZXQoYml0T2Zmc2V0KSkge1xuICAgICAgICAgIHRoZUJ5dGUgfD0gMSA8PCAoNyAtIGopO1xuICAgICAgICB9XG4gICAgICAgIGJpdE9mZnNldCsrO1xuICAgICAgfVxuICAgICAgYXJyYXlbb2Zmc2V0ICsgaV0gPSB0aGVCeXRlO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7SW50MzJBcnJheX0gYXJyYXkgb2YgdmFycy4gVGhlIGZpcnN0IGVsZW1lbnQgaG9sZHMgdGhlIGZpcnN0IDMyXG4gICAqIGJpdHMsIGFuZCB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0IGlzIGJpdCAwLlxuICAgKi9cbiAgcHJvLmdldEJpdEFycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYml0c187XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldmVyc2VzIGFsbCBiaXRzIGluIHRoZSBhcnJheS5cbiAgICovXG4gIHByby5yZXZlcnNlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5ld0JpdHMgPSBuZXcgSW50MzJBcnJheSh0aGlzLmJpdHNfLmxlbmd0aCk7XG4gICAgdmFyIHNpemUgPSB0aGlzLnNpemVfO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5nZXQoc2l6ZSAtIGkgLSAxKSkge1xuICAgICAgICBuZXdCaXRzW2kgPj4gNV0gfD0gMSA8PCAoaSAmIDB4MUYpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmJpdHNfID0gbmV3Qml0cztcbiAgfTtcblxuICBfLm1ha2VBcnJheSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICByZXR1cm4gbmV3IEludDMyQXJyYXkoKHNpemUgKyAzMSkgPj4gNSk7XG4gIH07XG5cbiAgcHJvLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zaXplXzsgaSsrKSB7XG4gICAgICBpZiAoKGkgJiAweDA3KSA9PSAwKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcgJyk7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCh0aGlzLmdldChpKSA/ICdYJyA6ICcuJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gIH07XG5cbn0pO1xuXG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG4vKlxuICpcbiAqIENvcHlyaWdodCAyMDA3IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuRW5jb2RlSGludFR5cGUnKTtcblxuLyoqXG4gKiBFbmNvZGUgaGludCBrZXkgY29uc3RhbnRzLlxuICogQGVudW0ge251bWJlcn1cbiAqL1xudzY5Yi5xci5FbmNvZGVIaW50VHlwZSA9IHtcbiAgQ0hBUkFDVEVSX1NFVDogMSxcbiAgRk9SQ0VfQUREX0VDSTogMlxufTtcbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gKiBDb3B5cmlnaHQgMjAwOCBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuUmVlZFNvbG9tb25FbmNvZGVyJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuR0YyNTYnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5HRjI1NlBvbHknKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgdmFyIEdGMjU2ID0gdzY5Yi5xci5HRjI1NjtcbiAgdmFyIEdGMjU2UG9seSA9IHc2OWIucXIuR0YyNTZQb2x5O1xuXG4gIC8qKlxuICAgKiA8cD5JbXBsZW1lbnRzIFJlZWQtU29sb21vbiBlbmJjb2RpbmcsIGFzIHRoZSBuYW1lIGltcGxpZXMuPC9wPlxuICAgKlxuICAgKiBAYXV0aG9yIFNlYW4gT3dlblxuICAgKiBAYXV0aG9yIFdpbGxpYW0gUnVja2xpZGdlXG4gICAqIEBhdXRob3IgbWJAdzY5Yi5jb20gKE1haHVlbCBCcmF1bikgcG9ydGVkIHRvIGpzLlxuICAgKi9cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHshR0YyNTZ9IGZpZWxkIHRvIHVzZS5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB3NjliLnFyLlJlZWRTb2xvbW9uRW5jb2RlciA9IGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7IUdGMjU2fVxuICAgICAqL1xuICAgIHRoaXMuZmllbGRfID0gZmllbGQ7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7QXJyYXkuPCFHRjI1NlBvbHk+fVxuICAgICAqL1xuICAgIHRoaXMuY2FjaGVkR2VuZXJhdG9yc18gPSBbbmV3IEdGMjU2UG9seShmaWVsZCwgWzFdKV07XG4gIH07XG4gIHZhciBwcm8gPSB3NjliLnFyLlJlZWRTb2xvbW9uRW5jb2Rlci5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWdyZWUgZGVncmVlLlxuICAgKiBAcmV0dXJuIHshR0YyNTZQb2x5fSBnZW5lcmF0b3IuXG4gICAqL1xuICBwcm8uYnVpbGRHZW5lcmF0b3IgPSBmdW5jdGlvbihkZWdyZWUpIHtcbiAgICB2YXIgY2FjaGVkR2VuZXJhdG9ycyA9IHRoaXMuY2FjaGVkR2VuZXJhdG9yc187XG4gICAgaWYgKGRlZ3JlZSA+PSBjYWNoZWRHZW5lcmF0b3JzLmxlbmd0aCkge1xuICAgICAgdmFyIGxhc3RHZW5lcmF0b3IgPSBjYWNoZWRHZW5lcmF0b3JzW2NhY2hlZEdlbmVyYXRvcnMubGVuZ3RoIC0gMV07XG4gICAgICBmb3IgKHZhciBkID0gY2FjaGVkR2VuZXJhdG9ycy5sZW5ndGg7IGQgPD0gZGVncmVlOyBkKyspIHtcbiAgICAgICAgdmFyIG5leHRHZW5lcmF0b3IgPSBsYXN0R2VuZXJhdG9yLm11bHRpcGx5MShcbiAgICAgICAgICBuZXcgR0YyNTZQb2x5KHRoaXMuZmllbGRfLCBbMSwgdGhpcy5maWVsZF8uZXhwKGQgLSAxKV0pKTtcbiAgICAgICAgY2FjaGVkR2VuZXJhdG9ycy5wdXNoKG5leHRHZW5lcmF0b3IpO1xuICAgICAgICBsYXN0R2VuZXJhdG9yID0gbmV4dEdlbmVyYXRvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZEdlbmVyYXRvcnNbZGVncmVlXTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gdG9FbmNvZGUgZGF0YSB0byBlbmNvZGUsIGluY2x1ZGluZyBwcmUtYWxsb2NhdGVkXG4gICAqIHNwYWNlIGZvciBlY2MgYnl0ZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlY0J5dGVzIG51bWJlciBvZiBlYyBieXRlcy5cbiAgICovXG4gIHByby5lbmNvZGUgPSBmdW5jdGlvbih0b0VuY29kZSwgZWNCeXRlcykge1xuICAgIGlmIChlY0J5dGVzID09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZXJyb3IgY29ycmVjdGlvbiBieXRlcycpO1xuICAgIH1cbiAgICB2YXIgZGF0YUJ5dGVzID0gdG9FbmNvZGUubGVuZ3RoIC0gZWNCeXRlcztcbiAgICBpZiAoZGF0YUJ5dGVzIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZGF0YSBieXRlcyBwcm92aWRlZCcpO1xuICAgIH1cbiAgICB2YXIgZ2VuZXJhdG9yID0gdGhpcy5idWlsZEdlbmVyYXRvcihlY0J5dGVzKTtcbiAgICB2YXIgaW5mb0NvZWZmaWNpZW50cyA9IHRvRW5jb2RlLnNsaWNlKDAsIGRhdGFCeXRlcyk7XG4gICAgdmFyIGluZm8gPSBuZXcgR0YyNTZQb2x5KHRoaXMuZmllbGRfLCBpbmZvQ29lZmZpY2llbnRzKTtcbiAgICBpbmZvID0gaW5mby5tdWx0aXBseUJ5TW9ub21pYWwoZWNCeXRlcywgMSk7XG4gICAgdmFyIHJlbWFpbmRlciA9IGluZm8uZGl2aWRlKGdlbmVyYXRvcilbMV07XG4gICAgdmFyIGNvZWZmaWNpZW50cyA9IHJlbWFpbmRlci5jb2VmZmljaWVudHM7XG4gICAgdmFyIG51bVplcm9Db2VmZmljaWVudHMgPSBlY0J5dGVzIC0gY29lZmZpY2llbnRzLmxlbmd0aDtcbiAgICB2YXIgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtWmVyb0NvZWZmaWNpZW50czsgaSsrKSB7XG4gICAgICB0b0VuY29kZVtkYXRhQnl0ZXMgKyBpXSA9IDA7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBjb2VmZmljaWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHRvRW5jb2RlW2RhdGFCeXRlcyArIG51bVplcm9Db2VmZmljaWVudHMgKyBpXSA9IGNvZWZmaWNpZW50c1tpXTtcbiAgICB9XG4gICAgLy8gU3lzdGVtLmFycmF5Y29weShjb2VmZmljaWVudHMsIDAsIHRvRW5jb2RlLFxuICAgIC8vICAgZGF0YUJ5dGVzICsgbnVtWmVyb0NvZWZmaWNpZW50cywgY29lZmZpY2llbnRzLmxlbmd0aCk7XG4gIH07XG5cbn0pO1xuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiAqIENvcHlyaWdodCAyMDA4IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5xci5lbmNvZGVyLkJsb2NrUGFpcicpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB3NjliLnFyLmVuY29kZXIuQmxvY2tQYWlyID0gZnVuY3Rpb24oZGF0YSwgZXJyb3JDb3JyZWN0aW9uKSB7XG4gICAgdGhpcy5kYXRhQnl0ZXMgPSBkYXRhO1xuICAgIHRoaXMuZXJyb3JDb3JyZWN0aW9uQnl0ZXMgPSBlcnJvckNvcnJlY3Rpb247XG4gIH07XG4gIHZhciBwcm8gPSB3NjliLnFyLmVuY29kZXIuQmxvY2tQYWlyLnByb3RvdHlwZTtcblxuICBwcm8uZ2V0RGF0YUJ5dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YUJ5dGVzO1xuICB9O1xuXG4gIHByby5nZXRFcnJvckNvcnJlY3Rpb25CeXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVycm9yQ29ycmVjdGlvbkJ5dGVzO1xuICB9O1xuXG59KTtcbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gKiBDb3B5cmlnaHQgMjAwOCBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuZW5jb2Rlci5CeXRlTWF0cml4Jyk7XG5cbi8qKlxuICogQSBjbGFzcyB3aGljaCB3cmFwcyBhIDJEIGFycmF5IG9mIGJ5dGVzLiBUaGUgZGVmYXVsdCB1c2FnZSBpcyBzaWduZWQuXG4gKiBJZiB5b3Ugd2FudCB0byB1c2UgaXQgYXMgYVxuICogdW5zaWduZWQgY29udGFpbmVyLCBpdCdzIHVwIHRvIHlvdSB0byBkbyBieXRlVmFsdWUgJiAweGZmIGF0IGVhY2ggbG9jYXRpb24uXG4gKlxuICogSkFWQVBPUlQ6IFRoZSBvcmlnaW5hbCBjb2RlIHdhcyBhIDJEIGFycmF5IG9mIGludHMsIGJ1dCBzaW5jZSBpdCBvbmx5IGV2ZXJcbiAqIGdldHMgYXNzaWduZWRcbiAqIC0xLCAwLCBhbmQgMSwgSSdtIGdvaW5nIHRvIHVzZSBsZXNzIG1lbW9yeSBhbmQgZ28gd2l0aCBieXRlcy5cbiAqXG4gKiBAYXV0aG9yIGRzd2l0a2luQGdvb2dsZS5jb20gKERhbmllbCBTd2l0a2luKVxuICogQGF1dGhvciBtYkB3NjliLmNvbSAoTWFudWVsIEJyYXVuKSAtIHBvcnRlZCB0byBqcy5cbiAqL1xuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcblxuICAvKipcbiAgICogUm93ICh5KSBmaXJzdCBieXRlIG1hdHJpeC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIHdpdGguXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgaGVpZ2h0LlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHc2OWIucXIuZW5jb2Rlci5CeXRlTWF0cml4ID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLndpZHRoXyA9IHdpZHRoO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmhlaWdodF8gPSBoZWlnaHQ7XG4gICAgdGhpcy5ieXRlc18gPSBuZXcgSW50OEFycmF5KHdpZHRoICogaGVpZ2h0KTtcbiAgfTtcbiAgdmFyIHBybyA9IHc2OWIucXIuZW5jb2Rlci5CeXRlTWF0cml4LnByb3RvdHlwZTtcblxuICBwcm8uZ2V0Qnl0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5ieXRlc187XG4gIH07XG5cbiAgcHJvLmdldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmhlaWdodF87XG4gIH07XG5cbiAgcHJvLmdldFdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMud2lkdGhfO1xuICB9O1xuXG4gIHByby5nZXQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIHRoaXMuYnl0ZXNfW3RoaXMud2lkdGhfICogeSArIHhdO1xuICB9O1xuXG4gIHByby5zZXQgPSBmdW5jdGlvbih4LCB5LCB2YWx1ZSkge1xuICAgIHRoaXMuYnl0ZXNfW3RoaXMud2lkdGhfICogeSArIHhdID0gdmFsdWU7XG4gIH07XG5cbiAgcHJvLmNsZWFyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYnl0ZXNfLmxlbmd0aDsgKytpKVxuICAgICAgdGhpcy5ieXRlc19baV0gPSB2YWx1ZTtcbiAgfTtcblxuICBwcm8udG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgZm9yICh2YXIgeSA9IDA7IHkgPCB0aGlzLmhlaWdodF87ICsreSkge1xuICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0aGlzLndpZHRoXzsgKyt4KSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5nZXQoeCwgeSkpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXN1bHQucHVzaCgnIDAnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcgMScpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcgICcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKCdcXG4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbiAgfTtcblxufSk7XG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG4vKlxuICogQ29weXJpZ2h0IDIwMDggWlhpbmcgYXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZ29vZy5wcm92aWRlKCd3NjliLnFyLmVuY29kZXIuTWFza1V0aWwnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5lbmNvZGVyLkJ5dGVNYXRyaXgnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgdmFyIEJ5dGVNYXRyaXggPSB3NjliLnFyLmVuY29kZXIuQnl0ZU1hdHJpeDtcblxuLyoqXG4gKiBAYXV0aG9yIFNhdG9ydSBUYWthYmF5YXNoaVxuICogQGF1dGhvciBEYW5pZWwgU3dpdGtpblxuICogQGF1dGhvciBTZWFuIE93ZW5cbiAqIEBhdXRob3IgbWJANjliLmNvbSAoTWFudWVsIEJyYXVuKSBwb3J0ZWQgdG8ganNcbiAqL1xudmFyIF8gPSB3NjliLnFyLmVuY29kZXIuTWFza1V0aWw7XG5cbiAgLy8gUGVuYWx0eSB3ZWlnaHRzIGZyb20gc2VjdGlvbiA2LjguMi4xXG4gIF8uTjEgPSAzO1xuICBfLk4yID0gMztcbiAgXy5OMyA9IDQwO1xuICBfLk40ID0gMTA7XG5cbiAgLyoqXG4gICAqIEFwcGx5IG1hc2sgcGVuYWx0eSBydWxlIDEgYW5kIHJldHVybiB0aGUgcGVuYWx0eS5cbiAgICogRmluZCByZXBldGl0aXZlIGNlbGxzIHdpdGggdGhlIHNhbWUgY29sb3IgYW5kXG4gICAqIGdpdmUgcGVuYWx0eSB0byB0aGVtLiBFeGFtcGxlOiAwMDAwMCBvciAxMTExMS5cbiAgICogQHBhcmFtIHtCeXRlTWF0cml4fSBtYXRyaXggd29ya2luZyBtYXRyaXguXG4gICAqIEByZXR1cm4ge251bWJlcn0gcmVzdWx0LlxuICAgKi9cbiAgXy5hcHBseU1hc2tQZW5hbHR5UnVsZTEgPSBmdW5jdGlvbihtYXRyaXgpIHtcbiAgICByZXR1cm4gXy5hcHBseU1hc2tQZW5hbHR5UnVsZTFJbnRlcm5hbChtYXRyaXgsIHRydWUpICtcbiAgICAgIF8uYXBwbHlNYXNrUGVuYWx0eVJ1bGUxSW50ZXJuYWwobWF0cml4LCBmYWxzZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFwcGx5IG1hc2sgcGVuYWx0eSBydWxlIDIgYW5kIHJldHVybiB0aGUgcGVuYWx0eS5cbiAgICogRmluZCAyeDIgYmxvY2tzIHdpdGggdGhlIHNhbWUgY29sb3IgYW5kIGdpdmVcbiAgICogcGVuYWx0eSB0byB0aGVtLiBUaGlzIGlzIGFjdHVhbGx5IGVxdWl2YWxlbnQgdG8gdGhlIHNwZWMncyBydWxlLFxuICAgKiB3aGljaCBpcyB0byBmaW5kIE14TiBibG9ja3MgYW5kIGdpdmUgYVxuICAgKiBwZW5hbHR5IHByb3BvcnRpb25hbCB0byAoTS0xKXgoTi0xKSwgYmVjYXVzZSB0aGlzIGlzIHRoZSBudW1iZXIgb2ZcbiAgICogMngyIGJsb2NrcyBpbnNpZGUgc3VjaCBhIGJsb2NrLlxuICAgKiBAcGFyYW0ge0J5dGVNYXRyaXh9IG1hdHJpeCB3b3JraW5nIG1hdHJpeC5cbiAgICogQHJldHVybiB7bnVtYmVyfSByZXN1bHQuXG4gICAqL1xuICBfLmFwcGx5TWFza1BlbmFsdHlSdWxlMiA9IGZ1bmN0aW9uKG1hdHJpeCkge1xuICAgIHZhciBwZW5hbHR5ID0gMDtcbiAgICB2YXIgd2lkdGggPSBtYXRyaXguZ2V0V2lkdGgoKTtcbiAgICB2YXIgaGVpZ2h0ID0gbWF0cml4LmdldEhlaWdodCgpO1xuICAgIGZvciAodmFyIHkgPSAwOyB5IDwgaGVpZ2h0IC0gMTsgeSsrKSB7XG4gICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHdpZHRoIC0gMTsgeCsrKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG1hdHJpeC5nZXQoeCwgeSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBtYXRyaXguZ2V0KHggKyAxLCB5KSAmJiB2YWx1ZSA9PSBtYXRyaXguZ2V0KHgsIHkgKyAxKSAmJlxuICAgICAgICAgIHZhbHVlID09IG1hdHJpeC5nZXQoeCArIDEsIHkgKyAxKSkge1xuICAgICAgICAgIHBlbmFsdHkrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gXy5OMiAqIHBlbmFsdHk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFwcGx5IG1hc2sgcGVuYWx0eSBydWxlIDMgYW5kIHJldHVybiB0aGUgcGVuYWx0eS4gRmluZCBjb25zZWN1dGl2ZVxuICAgKiBjZWxscyBvZiAwMDAwMTAxMTEwMSBvclxuICAgKiAxMDExMTAxMDAwMCwgYW5kIGdpdmUgcGVuYWx0eSB0byB0aGVtLlxuICAgKiBJZiB3ZSBmaW5kIHBhdHRlcm5zIGxpa2UgMDAwMDEwMTExMDEwMDAwLCB3ZSBnaXZlXG4gICAqIHBlbmFsdGllcyB0d2ljZSAoaS5lLiA0MCAqIDIpLlxuICAgKiBAcGFyYW0ge0J5dGVNYXRyaXh9IG1hdHJpeCB3b3JraW5nIG1hdHJpeC5cbiAgICogQHJldHVybiB7bnVtYmVyfSByZXN1bHQuXG4gICAqL1xuICBfLmFwcGx5TWFza1BlbmFsdHlSdWxlMyA9IGZ1bmN0aW9uKG1hdHJpeCkge1xuICAgIHZhciBwZW5hbHR5ID0gMDtcbiAgICB2YXIgd2lkdGggPSBtYXRyaXguZ2V0V2lkdGgoKTtcbiAgICB2YXIgaGVpZ2h0ID0gbWF0cml4LmdldEhlaWdodCgpO1xuICAgIHZhciBieXRlcyA9IG1hdHJpeC5nZXRCeXRlcygpO1xuICAgIGZvciAodmFyIHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgIHZhciB5T2Zmc2V0ID0gd2lkdGggKiB5O1xuICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgIC8vIFRyaWVkIHRvIHNpbXBsaWZ5IGZvbGxvd2luZyBjb25kaXRpb25zIGJ1dCBmYWlsZWQuXG4gICAgICAgIGlmICh4ICsgNiA8IHdpZHRoICYmXG4gICAgICAgICAgICBieXRlc1t5T2Zmc2V0ICsgeF0gPT0gMSAmJlxuICAgICAgICAgICAgYnl0ZXNbeU9mZnNldCArIHggKyAxXSA9PSAwICYmXG4gICAgICAgICAgICBieXRlc1t5T2Zmc2V0ICsgeCArIDJdID09IDEgJiZcbiAgICAgICAgICAgIGJ5dGVzW3lPZmZzZXQgKyB4ICsgM10gPT0gMSAmJlxuICAgICAgICAgICAgYnl0ZXNbeU9mZnNldCArIHggKyA0XSA9PSAxICYmXG4gICAgICAgICAgICBieXRlc1t5T2Zmc2V0ICsgeCArIDVdID09IDAgJiZcbiAgICAgICAgICAgIGJ5dGVzW3lPZmZzZXQgKyB4ICsgNl0gPT0gMSAmJlxuICAgICAgICAgICAgKCh4ICsgMTAgPCB3aWR0aCAmJlxuICAgICAgICAgICAgICAgIGJ5dGVzW3lPZmZzZXQgKyB4ICsgN10gPT0gMCAmJlxuICAgICAgICAgICAgICAgIGJ5dGVzW3lPZmZzZXQgKyB4ICsgOF0gPT0gMCAmJlxuICAgICAgICAgICAgICAgIGJ5dGVzW3lPZmZzZXQgKyB4ICsgOV0gPT0gMCAmJlxuICAgICAgICAgICAgICAgIGJ5dGVzW3lPZmZzZXQgKyB4ICsgMTBdID09IDApIHx8XG4gICAgICAgICAgICAgKHggLSA0ID49IDAgJiZcbiAgICAgICAgICAgICAgICBieXRlc1t5T2Zmc2V0ICsgeCAtIDFdID09IDAgJiZcbiAgICAgICAgICAgICAgICBieXRlc1t5T2Zmc2V0ICsgeCAtIDJdID09IDAgJiZcbiAgICAgICAgICAgICAgICBieXRlc1t5T2Zmc2V0ICsgeCAtIDNdID09IDAgJiZcbiAgICAgICAgICAgICAgICBieXRlc1t5T2Zmc2V0ICsgeCAtIDRdID09IDApKSkge1xuICAgICAgICAgIHBlbmFsdHkgKz0gXy5OMztcbiAgICAgICAgfVxuICAgICAgICBpZiAoeSArIDYgPCBoZWlnaHQgJiZcbiAgICAgICAgICAgIG1hdHJpeC5nZXQoeCwgeSkgPT0gMSAmJlxuICAgICAgICAgICAgbWF0cml4LmdldCh4LCB5ICsgMSkgPT0gMCAmJlxuICAgICAgICAgICAgbWF0cml4LmdldCh4LCB5ICsgMikgPT0gMSAmJlxuICAgICAgICAgICAgbWF0cml4LmdldCh4LCB5ICsgMykgPT0gMSAmJlxuICAgICAgICAgICAgbWF0cml4LmdldCh4LCB5ICsgNCkgPT0gMSAmJlxuICAgICAgICAgICAgbWF0cml4LmdldCh4LCB5ICsgNSkgPT0gMCAmJlxuICAgICAgICAgICAgbWF0cml4LmdldCh4LCB5ICsgNikgPT0gMSAmJlxuICAgICAgICAgICAgKCh5ICsgMTAgPCBoZWlnaHQgJiZcbiAgICAgICAgICAgICAgICBtYXRyaXguZ2V0KHgsIHkgKyA3KSA9PSAwICYmXG4gICAgICAgICAgICAgICAgbWF0cml4LmdldCh4LCB5ICsgOCkgPT0gMCAmJlxuICAgICAgICAgICAgICAgIG1hdHJpeC5nZXQoeCwgeSArIDkpID09IDAgJiZcbiAgICAgICAgICAgICAgICBtYXRyaXguZ2V0KHgsIHkgKyAxMCkgPT0gMCkgfHxcbiAgICAgICAgICAgICAoeSAtIDQgPj0gMCAmJlxuICAgICAgICAgICAgICAgIG1hdHJpeC5nZXQoeCwgeSAtIDEpID09IDAgJiZcbiAgICAgICAgICAgICAgICBtYXRyaXguZ2V0KHgsIHkgLSAyKSA9PSAwICYmXG4gICAgICAgICAgICAgICAgbWF0cml4LmdldCh4LCB5IC0gMykgPT0gMCAmJlxuICAgICAgICAgICAgICAgIG1hdHJpeC5nZXQoeCwgeSAtIDQpID09IDApKSkge1xuICAgICAgICAgIHBlbmFsdHkgKz0gXy5OMztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGVuYWx0eTtcbiAgfTtcblxuICAvKiogQXBwbHkgbWFzayBwZW5hbHR5IHJ1bGUgNCBhbmQgcmV0dXJuIHRoZSBwZW5hbHR5LiBDYWxjdWxhdGUgdGhlIHJhdGlvIG9mXG4gICAqIGRhcmsgY2VsbHMgYW5kIGdpdmUgcGVuYWx0eSBpZiB0aGUgcmF0aW8gaXMgZmFyIGZyb20gNTAlLiBJdCBnaXZlcyAxMFxuICAgKiBwZW5hbHR5IGZvciA1JSBkaXN0YW5jZS5cbiAgICogQHBhcmFtIHtCeXRlTWF0cml4fSBtYXRyaXggd29ya2luZyBtYXRyaXguXG4gICAqIEByZXR1cm4ge251bWJlcn0gcmVzdWx0LlxuICAgKi9cbiAgXy5hcHBseU1hc2tQZW5hbHR5UnVsZTQgPSBmdW5jdGlvbihtYXRyaXgpIHtcbiAgICB2YXIgbnVtRGFya0NlbGxzID0gMDtcbiAgICB2YXIgd2lkdGggPSBtYXRyaXguZ2V0V2lkdGgoKTtcbiAgICB2YXIgaGVpZ2h0ID0gbWF0cml4LmdldEhlaWdodCgpO1xuICAgIGZvciAodmFyIHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICBpZiAobWF0cml4LmdldCh4LCB5KSA9PSAxKSB7XG4gICAgICAgICAgbnVtRGFya0NlbGxzKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG51bVRvdGFsQ2VsbHMgPSBtYXRyaXguZ2V0SGVpZ2h0KCkgKiBtYXRyaXguZ2V0V2lkdGgoKTtcbiAgICB2YXIgZGFya1JhdGlvID0gbnVtRGFya0NlbGxzIC8gbnVtVG90YWxDZWxscztcbiAgICAvLyAqIDEwMC4wIC8gNS4wXG4gICAgdmFyIGZpdmVQZXJjZW50VmFyaWFuY2VzID0gTWF0aC5mbG9vcihNYXRoLmFicyhkYXJrUmF0aW8gLSAwLjUpICogMjAuMCk7XG4gICAgcmV0dXJuIGZpdmVQZXJjZW50VmFyaWFuY2VzICogXy5ONDtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBtYXNrIGJpdCBmb3IgXCJnZXRNYXNrUGF0dGVyblwiIGF0IFwieFwiIGFuZCBcInlcIi4gU2VlIDguOCBvZlxuICAgKiBKSVNYMDUxMDoyMDA0IGZvciBtYXNrXG4gICAqIHBhdHRlcm4gY29uZGl0aW9ucy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1hc2tQYXR0ZXJuIHBhdHRlcm4uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHBvcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgcG9zLlxuICAgKi9cbiAgXy5nZXREYXRhTWFza0JpdCA9IGZ1bmN0aW9uKG1hc2tQYXR0ZXJuLCB4LCB5KSB7XG4gICAgdmFyIGludGVybWVkaWF0ZTtcbiAgICB2YXIgdGVtcDtcbiAgICBzd2l0Y2ggKG1hc2tQYXR0ZXJuKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGludGVybWVkaWF0ZSA9ICh5ICsgeCkgJiAweDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpbnRlcm1lZGlhdGUgPSB5ICYgMHgxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaW50ZXJtZWRpYXRlID0geCAlIDM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBpbnRlcm1lZGlhdGUgPSAoeSArIHgpICUgMztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIGludGVybWVkaWF0ZSA9ICgoeSA+Pj4gMSkgKyAoeCAvIDMpKSAmIDB4MTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHRlbXAgPSB5ICogeDtcbiAgICAgICAgaW50ZXJtZWRpYXRlID0gKHRlbXAgJiAweDEpICsgKHRlbXAgJSAzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDY6XG4gICAgICAgIHRlbXAgPSB5ICogeDtcbiAgICAgICAgaW50ZXJtZWRpYXRlID0gKCh0ZW1wICYgMHgxKSArICh0ZW1wICUgMykpICYgMHgxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNzpcbiAgICAgICAgdGVtcCA9IHkgKiB4O1xuICAgICAgICBpbnRlcm1lZGlhdGUgPSAoKHRlbXAgJSAzKSArICgoeSArIHgpICYgMHgxKSkgJiAweDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1hc2sgcGF0dGVybjogJyArIG1hc2tQYXR0ZXJuKTtcbiAgICB9XG4gICAgcmV0dXJuIGludGVybWVkaWF0ZSA9PSAwO1xuICB9O1xuXG4gIC8qKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGFwcGx5TWFza1BlbmFsdHlSdWxlMS4gV2UgbmVlZCB0aGlzIGZvciBkb2luZyB0aGlzXG4gICAqIGNhbGN1bGF0aW9uIGluIGJvdGggdmVydGljYWwgYW5kIGhvcml6b250YWwgb3JkZXJzIHJlc3BlY3RpdmVseS5cbiAgICogQHBhcmFtIHtCeXRlTWF0cml4fSBtYXRyaXggd29ya2luZyBtYXRyaXguXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNIb3Jpem9udGFsIGhvcml6b250YWwgc3dpdGNoLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHBlbmFsdHkuXG4gICAqL1xuICBfLmFwcGx5TWFza1BlbmFsdHlSdWxlMUludGVybmFsID0gZnVuY3Rpb24obWF0cml4LCBpc0hvcml6b250YWwpIHtcbiAgICB2YXIgcGVuYWx0eSA9IDA7XG4gICAgdmFyIGlMaW1pdCA9IGlzSG9yaXpvbnRhbCA/IG1hdHJpeC5nZXRIZWlnaHQoKSA6IG1hdHJpeC5nZXRXaWR0aCgpO1xuICAgIHZhciBqTGltaXQgPSBpc0hvcml6b250YWwgPyBtYXRyaXguZ2V0V2lkdGgoKSA6IG1hdHJpeC5nZXRIZWlnaHQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlMaW1pdDsgaSsrKSB7XG4gICAgICB2YXIgbnVtU2FtZUJpdENlbGxzID0gMDtcbiAgICAgIHZhciBwcmV2Qml0ID0gLTE7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGpMaW1pdDsgaisrKSB7XG4gICAgICAgIHZhciBiaXQgPSBpc0hvcml6b250YWwgPyBtYXRyaXguZ2V0KGosIGkpIDogbWF0cml4LmdldChpLCBqKTtcbiAgICAgICAgaWYgKGJpdCA9PSBwcmV2Qml0KSB7XG4gICAgICAgICAgbnVtU2FtZUJpdENlbGxzKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG51bVNhbWVCaXRDZWxscyA+PSA1KSB7XG4gICAgICAgICAgICBwZW5hbHR5ICs9IF8uTjEgKyAobnVtU2FtZUJpdENlbGxzIC0gNSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG51bVNhbWVCaXRDZWxscyA9IDE7ICAvLyBJbmNsdWRlIHRoZSBjZWxsIGl0c2VsZi5cbiAgICAgICAgICBwcmV2Qml0ID0gYml0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobnVtU2FtZUJpdENlbGxzID4gNSkge1xuICAgICAgICBwZW5hbHR5ICs9IF8uTjEgKyAobnVtU2FtZUJpdENlbGxzIC0gNSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwZW5hbHR5O1xuICB9O1xuXG59KTtcbiIsIi8vIChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuV3JpdGVyRXJyb3InKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5kZWJ1Zy5FcnJvcicpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X21zZyBtZXNzYWdlLlxuICAgKiBAZXh0ZW5kcyB7Z29vZy5kZWJ1Zy5FcnJvcn1cbiAgICovXG4gIHc2OWIucXIuV3JpdGVyRXJyb3IgPSBmdW5jdGlvbihvcHRfbXNnKSB7XG4gICAgZ29vZy5iYXNlKHRoaXMsIG9wdF9tc2cpO1xuICB9O1xuICBnb29nLmluaGVyaXRzKHc2OWIucXIuV3JpdGVyRXJyb3IsIGdvb2cuZGVidWcuRXJyb3IpO1xuXG59KTtcbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gKiBDb3B5cmlnaHQgMjAwOCBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuZW5jb2Rlci5RUkNvZGUnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5FcnJvckNvcnJlY3Rpb25MZXZlbCcpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLk1vZGUnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5WZXJzaW9uJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuZW5jb2Rlci5CeXRlTWF0cml4Jyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG5cbiAgdmFyIEVycm9yQ29ycmVjdGlvbkxldmVsID0gdzY5Yi5xci5FcnJvckNvcnJlY3Rpb25MZXZlbDtcbiAgdmFyIE1vZGUgPSB3NjliLnFyLk1vZGU7XG4gIHZhciBWZXJzaW9uID0gdzY5Yi5xci5WZXJzaW9uO1xuICB2YXIgQnl0ZU1hdHJpeCA9IHc2OWIucXIuZW5jb2Rlci5CeXRlTWF0cml4O1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGF1dGhvciBzYXRvcnV4QGdvb2dsZS5jb20gKFNhdG9ydSBUYWthYmF5YXNoaSkgLSBjcmVhdG9yXG4gICAqIEBhdXRob3IgZHN3aXRraW5AZ29vZ2xlLmNvbSAoRGFuaWVsIFN3aXRraW4pIC0gcG9ydGVkIGZyb20gQysrXG4gICAqIEBhdXRob3IgbWJAdzY5Yi5jb20gKE1hbnVlbCBCcmF1bikgLSBwb3J0ZWQgdG8ganMuXG4gICAqL1xuICB3NjliLnFyLmVuY29kZXIuUVJDb2RlID0gZnVuY3Rpb24oKSB7XG4gIH07XG4gIHZhciBfID0gdzY5Yi5xci5lbmNvZGVyLlFSQ29kZTtcbiAgdmFyIHBybyA9IF8ucHJvdG90eXBlO1xuICAvKipcbiAgICogQHR5cGUge01vZGV9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8ubW9kZV8gPSBudWxsO1xuICAvKipcbiAgICpcbiAgICogQHR5cGUge0Vycm9yQ29ycmVjdGlvbkxldmVsfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvLmVjTGV2ZWxfID0gbnVsbDtcbiAgLyoqXG4gICAqXG4gICAqIEB0eXBlIHtWZXJzaW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvLnZlcnNpb25fID0gbnVsbDtcbiAgLyoqXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8ubWFza1BhdHRlcm5fID0gLTE7XG4gIC8qKlxuICAgKlxuICAgKiBAdHlwZSB7Qnl0ZU1hdHJpeH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByby5tYXRyaXhfID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIF8uTlVNX01BU0tfUEFUVEVSTlMgPSA4O1xuXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge01vZGV9IG1vZGUuXG4gICAqL1xuICBwcm8uZ2V0TW9kZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1vZGVfO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtFcnJvckNvcnJlY3Rpb25MZXZlbH0gZWMgbGV2ZWwuXG4gICAqL1xuICBwcm8uZ2V0RUNMZXZlbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVjTGV2ZWxfO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtWZXJzaW9ufSB2ZXJzaW9uLlxuICAgKi9cbiAgcHJvLmdldFZlcnNpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy52ZXJzaW9uXztcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBtYXNrIHBhdHRlcm4uXG4gICAqL1xuICBwcm8uZ2V0TWFza1BhdHRlcm4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXNrUGF0dGVybl87XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0J5dGVNYXRyaXh9IG1hdHJpeC5cbiAgICovXG4gIHByby5nZXRNYXRyaXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRyaXhfO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gZGVidWcgc3RyaW5nLlxuICAgKi9cbiAgcHJvLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5wdXNoKCc8PFxcbicpO1xuICAgIHJlc3VsdC5wdXNoKCcgbW9kZTogJyk7XG4gICAgcmVzdWx0LnB1c2godGhpcy5tb2RlXy50b1N0cmluZygpKTtcbiAgICByZXN1bHQucHVzaCgnXFxuIGVjTGV2ZWw6ICcpO1xuICAgIHJlc3VsdC5wdXNoKHRoaXMuZWNMZXZlbF8udG9TdHJpbmcoKSk7XG4gICAgcmVzdWx0LnB1c2goJ1xcbiB2ZXJzaW9uOiAnKTtcbiAgICByZXN1bHQucHVzaCh0aGlzLnZlcnNpb25fLnRvU3RyaW5nKCkpO1xuICAgIHJlc3VsdC5wdXNoKCdcXG4gbWFza1BhdHRlcm46ICcpO1xuICAgIHJlc3VsdC5wdXNoKHRoaXMubWFza1BhdHRlcm5fKTtcbiAgICBpZiAodGhpcy5tYXRyaXhfID09IG51bGwpIHtcbiAgICAgIHJlc3VsdC5wdXNoKCdcXG4gbWF0cml4OiBudWxsXFxuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wdXNoKCdcXG4gbWF0cml4OlxcbicpO1xuICAgICAgcmVzdWx0LnB1c2godGhpcy5tYXRyaXhfLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgICByZXN1bHQucHVzaCgnPj5cXG4nKTtcbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge01vZGV9IHZhbHVlIG1vZGUuXG4gICAqL1xuICBwcm8uc2V0TW9kZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5tb2RlXyA9IHZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yQ29ycmVjdGlvbkxldmVsfSB2YWx1ZSBlYyBsZXZlbC5cbiAgICovXG4gIHByby5zZXRFQ0xldmVsID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB0aGlzLmVjTGV2ZWxfID0gdmFsdWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VmVyc2lvbn0gdmVyc2lvbiB2ZXJzaW9uLlxuICAgKi9cbiAgcHJvLnNldFZlcnNpb24gPSBmdW5jdGlvbih2ZXJzaW9uKSB7XG4gICAgdGhpcy52ZXJzaW9uXyA9IHZlcnNpb247XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBwYXR0ZXJuLlxuICAgKi9cbiAgcHJvLnNldE1hc2tQYXR0ZXJuID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB0aGlzLm1hc2tQYXR0ZXJuXyA9IHZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0J5dGVNYXRyaXh9IHZhbHVlIG1hdHJpeC5cbiAgICovXG4gIHByby5zZXRNYXRyaXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHRoaXMubWF0cml4XyA9IHZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWFza1BhdHRlcm4gcGF0dGVybi5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gd2VhdGhlciBpdCBpcyB2YWxpZC5cbiAgICovXG4gIF8uaXNWYWxpZE1hc2tQYXR0ZXJuID0gZnVuY3Rpb24obWFza1BhdHRlcm4pIHtcbiAgICByZXR1cm4gbWFza1BhdHRlcm4gPj0gMCAmJiBtYXNrUGF0dGVybiA8IF8uTlVNX01BU0tfUEFUVEVSTlM7XG4gIH07XG5cbn0pO1xuXG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG4vKlxuICogQ29weXJpZ2h0IDIwMDggWlhpbmcgYXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZ29vZy5wcm92aWRlKCd3NjliLnFyLmVuY29kZXIuTWF0cml4VXRpbCcpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkJpdEFycmF5Jyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuRXJyb3JDb3JyZWN0aW9uTGV2ZWwnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5WZXJzaW9uJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuV3JpdGVyRXJyb3InKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5lbmNvZGVyLkJ5dGVNYXRyaXgnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5lbmNvZGVyLk1hc2tVdGlsJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuZW5jb2Rlci5RUkNvZGUnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgdmFyIEVycm9yQ29ycmVjdGlvbkxldmVsID0gdzY5Yi5xci5FcnJvckNvcnJlY3Rpb25MZXZlbDtcbiAgdmFyIEJpdEFycmF5ID0gdzY5Yi5xci5CaXRBcnJheTtcbiAgdmFyIEJ5dGVNYXRyaXggPSB3NjliLnFyLmVuY29kZXIuQnl0ZU1hdHJpeDtcbiAgdmFyIFZlcnNpb24gPSB3NjliLnFyLlZlcnNpb247XG4gIHZhciBXcml0ZXJFcnJvciA9IHc2OWIucXIuV3JpdGVyRXJyb3I7XG4gIHZhciBRUkNvZGUgPSB3NjliLnFyLmVuY29kZXIuUVJDb2RlO1xuICB2YXIgTWFza1V0aWwgPSB3NjliLnFyLmVuY29kZXIuTWFza1V0aWw7XG5cblxuICAvKipcbiAgICogQGF1dGhvciBzYXRvcnV4QGdvb2dsZS5jb20gKFNhdG9ydSBUYWthYmF5YXNoaSkgLSBjcmVhdG9yXG4gICAqIEBhdXRob3IgZHN3aXRraW5AZ29vZ2xlLmNvbSAoRGFuaWVsIFN3aXRraW4pIC0gcG9ydGVkIGZyb20gQysrXG4gICAqIEBhdXRob3IgbWJAdzY5Yi5jb20gKE1hbnVlbCBCcmF1bikgLSBwb3J0ZWQgdG8ganMuXG4gICAqL1xuICB2YXIgXyA9IHc2OWIucXIuZW5jb2Rlci5NYXRyaXhVdGlsO1xuXG4gIF8uUE9TSVRJT05fREVURUNUSU9OX1BBVFRFUk4gPSBbXG4gICAgWzEsIDEsIDEsIDEsIDEsIDEsIDFdLFxuICAgIFsxLCAwLCAwLCAwLCAwLCAwLCAxXSxcbiAgICBbMSwgMCwgMSwgMSwgMSwgMCwgMV0sXG4gICAgWzEsIDAsIDEsIDEsIDEsIDAsIDFdLFxuICAgIFsxLCAwLCAxLCAxLCAxLCAwLCAxXSxcbiAgICBbMSwgMCwgMCwgMCwgMCwgMCwgMV0sXG4gICAgWzEsIDEsIDEsIDEsIDEsIDEsIDFdXG4gIF07XG5cbiAgXy5QT1NJVElPTl9BREpVU1RNRU5UX1BBVFRFUk4gPSBbXG4gICAgWzEsIDEsIDEsIDEsIDFdLFxuICAgIFsxLCAwLCAwLCAwLCAxXSxcbiAgICBbMSwgMCwgMSwgMCwgMV0sXG4gICAgWzEsIDAsIDAsIDAsIDFdLFxuICAgIFsxLCAxLCAxLCAxLCAxXVxuICBdO1xuXG4gIC8vIEZyb20gQXBwZW5kaXggRS4gVGFibGUgMSwgSklTMDUxMFg6MjAwNCAocCA3MSkuIFRoZSB0YWJsZSB3YXNcbiAgLy8gZG91YmxlLWNoZWNrZWQgYnkga29tYXRzdS5cbiAgXy5QT1NJVElPTl9BREpVU1RNRU5UX1BBVFRFUk5fQ09PUkRJTkFURV9UQUJMRSA9IFtcbiAgICBbLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiAxXG4gICAgWzYsIDE4LCAtMSwgLTEsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiAyXG4gICAgWzYsIDIyLCAtMSwgLTEsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiAzXG4gICAgWzYsIDI2LCAtMSwgLTEsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiA0XG4gICAgWzYsIDMwLCAtMSwgLTEsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiA1XG4gICAgWzYsIDM0LCAtMSwgLTEsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiA2XG4gICAgWzYsIDIyLCAzOCwgLTEsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiA3XG4gICAgWzYsIDI0LCA0MiwgLTEsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiA4XG4gICAgWzYsIDI2LCA0NiwgLTEsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiA5XG4gICAgWzYsIDI4LCA1MCwgLTEsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiAxMFxuICAgIFs2LCAzMCwgNTQsIC0xLCAtMSwgLTEsIC0xXSwgIC8vIFZlcnNpb24gMTFcbiAgICBbNiwgMzIsIDU4LCAtMSwgLTEsIC0xLCAtMV0sICAvLyBWZXJzaW9uIDEyXG4gICAgWzYsIDM0LCA2MiwgLTEsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiAxM1xuICAgIFs2LCAyNiwgNDYsIDY2LCAtMSwgLTEsIC0xXSwgIC8vIFZlcnNpb24gMTRcbiAgICBbNiwgMjYsIDQ4LCA3MCwgLTEsIC0xLCAtMV0sICAvLyBWZXJzaW9uIDE1XG4gICAgWzYsIDI2LCA1MCwgNzQsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiAxNlxuICAgIFs2LCAzMCwgNTQsIDc4LCAtMSwgLTEsIC0xXSwgIC8vIFZlcnNpb24gMTdcbiAgICBbNiwgMzAsIDU2LCA4MiwgLTEsIC0xLCAtMV0sICAvLyBWZXJzaW9uIDE4XG4gICAgWzYsIDMwLCA1OCwgODYsIC0xLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiAxOVxuICAgIFs2LCAzNCwgNjIsIDkwLCAtMSwgLTEsIC0xXSwgIC8vIFZlcnNpb24gMjBcbiAgICBbNiwgMjgsIDUwLCA3MiwgOTQsIC0xLCAtMV0sICAvLyBWZXJzaW9uIDIxXG4gICAgWzYsIDI2LCA1MCwgNzQsIDk4LCAtMSwgLTFdLCAgLy8gVmVyc2lvbiAyMlxuICAgIFs2LCAzMCwgNTQsIDc4LCAxMDIsIC0xLCAtMV0sICAvLyBWZXJzaW9uIDIzXG4gICAgWzYsIDI4LCA1NCwgODAsIDEwNiwgLTEsIC0xXSwgIC8vIFZlcnNpb24gMjRcbiAgICBbNiwgMzIsIDU4LCA4NCwgMTEwLCAtMSwgLTFdLCAgLy8gVmVyc2lvbiAyNVxuICAgIFs2LCAzMCwgNTgsIDg2LCAxMTQsIC0xLCAtMV0sICAvLyBWZXJzaW9uIDI2XG4gICAgWzYsIDM0LCA2MiwgOTAsIDExOCwgLTEsIC0xXSwgIC8vIFZlcnNpb24gMjdcbiAgICBbNiwgMjYsIDUwLCA3NCwgOTgsIDEyMiwgLTFdLCAgLy8gVmVyc2lvbiAyOFxuICAgIFs2LCAzMCwgNTQsIDc4LCAxMDIsIDEyNiwgLTFdLCAgLy8gVmVyc2lvbiAyOVxuICAgIFs2LCAyNiwgNTIsIDc4LCAxMDQsIDEzMCwgLTFdLCAgLy8gVmVyc2lvbiAzMFxuICAgIFs2LCAzMCwgNTYsIDgyLCAxMDgsIDEzNCwgLTFdLCAgLy8gVmVyc2lvbiAzMVxuICAgIFs2LCAzNCwgNjAsIDg2LCAxMTIsIDEzOCwgLTFdLCAgLy8gVmVyc2lvbiAzMlxuICAgIFs2LCAzMCwgNTgsIDg2LCAxMTQsIDE0MiwgLTFdLCAgLy8gVmVyc2lvbiAzM1xuICAgIFs2LCAzNCwgNjIsIDkwLCAxMTgsIDE0NiwgLTFdLCAgLy8gVmVyc2lvbiAzNFxuICAgIFs2LCAzMCwgNTQsIDc4LCAxMDIsIDEyNiwgMTUwXSwgIC8vIFZlcnNpb24gMzVcbiAgICBbNiwgMjQsIDUwLCA3NiwgMTAyLCAxMjgsIDE1NF0sICAvLyBWZXJzaW9uIDM2XG4gICAgWzYsIDI4LCA1NCwgODAsIDEwNiwgMTMyLCAxNThdLCAgLy8gVmVyc2lvbiAzN1xuICAgIFs2LCAzMiwgNTgsIDg0LCAxMTAsIDEzNiwgMTYyXSwgIC8vIFZlcnNpb24gMzhcbiAgICBbNiwgMjYsIDU0LCA4MiwgMTEwLCAxMzgsIDE2Nl0sICAvLyBWZXJzaW9uIDM5XG4gICAgWzYsIDMwLCA1OCwgODYsIDExNCwgMTQyLCAxNzBdICAvLyBWZXJzaW9uIDQwXG4gIF07XG5cbiAgLy8gVHlwZSBpbmZvIGNlbGxzIGF0IHRoZSBsZWZ0IHRvcCBjb3JuZXIuXG4gIF8uVFlQRV9JTkZPX0NPT1JESU5BVEVTID0gW1xuICAgIFs4LCAwXSxcbiAgICBbOCwgMV0sXG4gICAgWzgsIDJdLFxuICAgIFs4LCAzXSxcbiAgICBbOCwgNF0sXG4gICAgWzgsIDVdLFxuICAgIFs4LCA3XSxcbiAgICBbOCwgOF0sXG4gICAgWzcsIDhdLFxuICAgIFs1LCA4XSxcbiAgICBbNCwgOF0sXG4gICAgWzMsIDhdLFxuICAgIFsyLCA4XSxcbiAgICBbMSwgOF0sXG4gICAgWzAsIDhdXG4gIF07XG5cbiAgLy8gRnJvbSBBcHBlbmRpeCBEIGluIEpJU1gwNTEwOjIwMDQgKHAuIDY3KVxuICBfLlZFUlNJT05fSU5GT19QT0xZID0gMHgxZjI1OyAgLy8gMSAxMTExIDAwMTAgMDEwMVxuXG4gIC8vIEZyb20gQXBwZW5kaXggQyBpbiBKSVNYMDUxMDoyMDA0IChwLjY1KS5cbiAgXy5UWVBFX0lORk9fUE9MWSA9IDB4NTM3O1xuICBfLlRZUEVfSU5GT19NQVNLX1BBVFRFUk4gPSAweDU0MTI7XG5cbiAgLy8gU2V0IGFsbCBjZWxscyB0byAtMS4gIC0xIG1lYW5zIHRoYXQgdGhlIGNlbGwgaXMgZW1wdHkgKG5vdCBzZXQgeWV0KS5cbiAgLy9cbiAgLy8gSkFWQVBPUlQ6IFdlIHNob3VsZG4ndCBuZWVkIHRvIGRvIHRoaXMgYXQgYWxsLiBUaGUgY29kZSBzaG91bGQgYmVcbiAgLy8gcmV3cml0dGVuIHRvIGJlZ2luIGVuY29kaW5nIHdpdGggdGhlIEJ5dGVNYXRyaXggaW5pdGlhbGl6ZWQgYWxsIHRvIHplcm8uXG4gIC8qKlxuICAgKiBAcGFyYW0ge0J5dGVNYXRyaXh9IG1hdHJpeCBtYXRyaXguXG4gICAqL1xuICBfLmNsZWFyTWF0cml4ID0gZnVuY3Rpb24obWF0cml4KSB7XG4gICAgbWF0cml4LmNsZWFyKC0xKTtcbiAgfTtcblxuICAvKipcbiAgICogQnVpbGQgMkQgbWF0cml4IG9mIFFSIENvZGUgZnJvbSBcImRhdGFCaXRzXCIgd2l0aCBcImVjTGV2ZWxcIiwgXCJ2ZXJzaW9uXCIgYW5kXG4gICAqIFwiZ2V0TWFza1BhdHRlcm5cIi4gT24gc3VjY2Vzcywgc3RvcmUgdGhlIHJlc3VsdCBpbiBcIm1hdHJpeFwiIC5cbiAgICogQHBhcmFtIHtCaXRBcnJheX0gZGF0YUJpdHMgYml0cy5cbiAgICogQHBhcmFtIHtFcnJvckNvcnJlY3Rpb25MZXZlbH0gZWNMZXZlbCBlcnJvciBjb3JyZWN0aW9uIGxldmFsLlxuICAgKiBAcGFyYW0ge1ZlcnNpb259IHZlcnNpb24gdmVyc2lvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1hc2tQYXR0ZXJuIG1hc2suXG4gICAqIEBwYXJhbSB7Qnl0ZU1hdHJpeH0gbWF0cml4IHJlc3VsdCBtYXRyaXguXG4gICAqL1xuICBfLmJ1aWxkTWF0cml4ID0gZnVuY3Rpb24oZGF0YUJpdHMsIGVjTGV2ZWwsIHZlcnNpb24sIG1hc2tQYXR0ZXJuLCBtYXRyaXgpIHtcbiAgICBfLmNsZWFyTWF0cml4KG1hdHJpeCk7XG4gICAgXy5lbWJlZEJhc2ljUGF0dGVybnModmVyc2lvbiwgbWF0cml4KTtcbiAgICAvLyBUeXBlIGluZm9ybWF0aW9uIGFwcGVhciB3aXRoIGFueSB2ZXJzaW9uLlxuICAgIF8uZW1iZWRUeXBlSW5mbyhlY0xldmVsLCBtYXNrUGF0dGVybiwgbWF0cml4KTtcbiAgICAvLyBWZXJzaW9uIGluZm8gYXBwZWFyIGlmIHZlcnNpb24gPj0gNy5cbiAgICBfLm1heWJlRW1iZWRWZXJzaW9uSW5mbyh2ZXJzaW9uLCBtYXRyaXgpO1xuICAgIC8vIERhdGEgc2hvdWxkIGJlIGVtYmVkZGVkIGF0IGVuZC5cbiAgICBfLmVtYmVkRGF0YUJpdHMoZGF0YUJpdHMsIG1hc2tQYXR0ZXJuLCBtYXRyaXgpO1xuICB9O1xuXG4gIC8qKlxuICAgKlxuICAgKiBFbWJlZCBiYXNpYyBwYXR0ZXJucy4gT24gc3VjY2VzcywgbW9kaWZ5IHRoZSBtYXRyaXggYW5kIHJldHVybiB0cnVlLlxuICAgKiBUaGUgYmFzaWMgcGF0dGVybnMgYXJlOlxuICAgKiAtIFBvc2l0aW9uIGRldGVjdGlvbiBwYXR0ZXJuc1xuICAgKiAtIFRpbWluZyBwYXR0ZXJuc1xuICAgKiAtIERhcmsgZG90IGF0IHRoZSBsZWZ0IGJvdHRvbSBjb3JuZXJcbiAgICogLSBQb3NpdGlvbiBhZGp1c3RtZW50IHBhdHRlcm5zLCBpZiBuZWVkZWRcbiAgICogQHBhcmFtIHtWZXJzaW9ufSB2ZXJzaW9uIHZlcnNpb24uXG4gICAqIEBwYXJhbSB7Qnl0ZU1hdHJpeH0gbWF0cml4IHJlc3VsdC5cbiAgICovXG4gIF8uZW1iZWRCYXNpY1BhdHRlcm5zID0gZnVuY3Rpb24odmVyc2lvbiwgbWF0cml4KSB7XG4gICAgLy8gTGV0J3MgZ2V0IHN0YXJ0ZWQgd2l0aCBlbWJlZGRpbmcgYmlnIHNxdWFyZXMgYXQgY29ybmVycy5cbiAgICBfLmVtYmVkUG9zaXRpb25EZXRlY3Rpb25QYXR0ZXJuc0FuZFNlcGFyYXRvcnMobWF0cml4KTtcbiAgICAvLyBUaGVuLCBlbWJlZCB0aGUgZGFyayBkb3QgYXQgdGhlIGxlZnQgYm90dG9tIGNvcm5lci5cbiAgICBfLmVtYmVkRGFya0RvdEF0TGVmdEJvdHRvbUNvcm5lcihtYXRyaXgpO1xuXG4gICAgLy8gUG9zaXRpb24gYWRqdXN0bWVudCBwYXR0ZXJucyBhcHBlYXIgaWYgdmVyc2lvbiA+PSAyLlxuICAgIF8ubWF5YmVFbWJlZFBvc2l0aW9uQWRqdXN0bWVudFBhdHRlcm5zKHZlcnNpb24sIG1hdHJpeCk7XG4gICAgLy8gVGltaW5nIHBhdHRlcm5zIHNob3VsZCBiZSBlbWJlZGRlZCBhZnRlciBwb3NpdGlvbiBhZGouIHBhdHRlcm5zLlxuICAgIF8uZW1iZWRUaW1pbmdQYXR0ZXJucyhtYXRyaXgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBFbWJlZCB0eXBlIGluZm9ybWF0aW9uLiBPbiBzdWNjZXNzLCBtb2RpZnkgdGhlIG1hdHJpeC5cbiAgICogQHBhcmFtIHtFcnJvckNvcnJlY3Rpb25MZXZlbH0gZWNMZXZlbCBlcnJvciBjb3JyZWNpdG9uIGxldmVsLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWFza1BhdHRlcm4gcGF0dGVybi5cbiAgICogQHBhcmFtIHtCeXRlTWF0cml4fSBtYXRyaXggcmVzdWx0LlxuICAgKi9cbiAgXy5lbWJlZFR5cGVJbmZvID0gZnVuY3Rpb24oZWNMZXZlbCwgbWFza1BhdHRlcm4sIG1hdHJpeCkge1xuICAgIHZhciB0eXBlSW5mb0JpdHMgPSBuZXcgQml0QXJyYXkoKTtcbiAgICBfLm1ha2VUeXBlSW5mb0JpdHMoZWNMZXZlbCwgbWFza1BhdHRlcm4sIHR5cGVJbmZvQml0cyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVJbmZvQml0cy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgLy8gUGxhY2UgYml0cyBpbiBMU0IgdG8gTVNCIG9yZGVyLiAgTFNCIChsZWFzdCBzaWduaWZpY2FudCBiaXQpIGlzIHRoZVxuICAgICAgLy8gbGFzdCB2YWx1ZSBpbiBcInR5cGVJbmZvQml0c1wiLlxuICAgICAgdmFyIGJpdCA9IHR5cGVJbmZvQml0cy5nZXQodHlwZUluZm9CaXRzLmdldFNpemUoKSAtIDEgLSBpKTtcblxuICAgICAgLy8gVHlwZSBpbmZvIGJpdHMgYXQgdGhlIGxlZnQgdG9wIGNvcm5lci4gU2VlIDguOSBvZiBKSVNYMDUxMDoyMDA0IChwLjQ2KS5cbiAgICAgIHZhciB4MSA9IF8uVFlQRV9JTkZPX0NPT1JESU5BVEVTW2ldWzBdO1xuICAgICAgdmFyIHkxID0gXy5UWVBFX0lORk9fQ09PUkRJTkFURVNbaV1bMV07XG4gICAgICBtYXRyaXguc2V0KHgxLCB5MSwgYml0KTtcblxuICAgICAgaWYgKGkgPCA4KSB7XG4gICAgICAgIC8vIFJpZ2h0IHRvcCBjb3JuZXIuXG4gICAgICAgIHZhciB4MiA9IG1hdHJpeC5nZXRXaWR0aCgpIC0gaSAtIDE7XG4gICAgICAgIHZhciB5MiA9IDg7XG4gICAgICAgIG1hdHJpeC5zZXQoeDIsIHkyLCBiaXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTGVmdCBib3R0b20gY29ybmVyLlxuICAgICAgICB2YXIgeDIgPSA4O1xuICAgICAgICB2YXIgeTIgPSBtYXRyaXguZ2V0SGVpZ2h0KCkgLSA3ICsgKGkgLSA4KTtcbiAgICAgICAgbWF0cml4LnNldCh4MiwgeTIsIGJpdCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBFbWJlZCB2ZXJzaW9uIGluZm9ybWF0aW9uIGlmIG5lZWQgYmUuIE9uIHN1Y2Nlc3MsIG1vZGlmeSB0aGUgbWF0cml4LlxuICAgKiBTZWUgOC4xMCBvZiBKSVNYMDUxMDoyMDA0IChwLjQ3KSBmb3IgaG93IHRvIGVtYmVkIHZlcnNpb24gaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSB7VmVyc2lvbn0gdmVyc2lvbiB2ZXJzaW9uLlxuICAgKiBAcGFyYW0ge0J5dGVNYXRyaXh9IG1hdHJpeCByZXN1bHQuXG4gICAqL1xuICBfLm1heWJlRW1iZWRWZXJzaW9uSW5mbyA9IGZ1bmN0aW9uKHZlcnNpb24sIG1hdHJpeCkge1xuICAgIC8vIFZlcnNpb24gaW5mbyBpcyBuZWNlc3NhcnkgaWYgdmVyc2lvbiA+PSA3LlxuICAgIGlmICh2ZXJzaW9uLmdldFZlcnNpb25OdW1iZXIoKSA8IDcpIHtcbiAgICAgIHJldHVybjsgIC8vIERvbid0IG5lZWQgdmVyc2lvbiBpbmZvLlxuICAgIH1cbiAgICB2YXIgdmVyc2lvbkluZm9CaXRzID0gbmV3IEJpdEFycmF5KCk7XG4gICAgXy5tYWtlVmVyc2lvbkluZm9CaXRzKHZlcnNpb24sIHZlcnNpb25JbmZvQml0cyk7XG5cbiAgICB2YXIgYml0SW5kZXggPSA2ICogMyAtIDE7ICAvLyBJdCB3aWxsIGRlY3JlYXNlIGZyb20gMTcgdG8gMC5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY7ICsraSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAzOyArK2opIHtcbiAgICAgICAgLy8gUGxhY2UgYml0cyBpbiBMU0IgKGxlYXN0IHNpZ25pZmljYW50IGJpdCkgdG8gTVNCIG9yZGVyLlxuICAgICAgICB2YXIgYml0ID0gdmVyc2lvbkluZm9CaXRzLmdldChiaXRJbmRleCk7XG4gICAgICAgIGJpdEluZGV4LS07XG4gICAgICAgIC8vIExlZnQgYm90dG9tIGNvcm5lci5cbiAgICAgICAgbWF0cml4LnNldChpLCBtYXRyaXguZ2V0SGVpZ2h0KCkgLSAxMSArIGosIGJpdCk7XG4gICAgICAgIC8vIFJpZ2h0IGJvdHRvbSBjb3JuZXIuXG4gICAgICAgIG1hdHJpeC5zZXQobWF0cml4LmdldEhlaWdodCgpIC0gMTEgKyBqLCBpLCBiaXQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRW1iZWQgXCJkYXRhQml0c1wiIHVzaW5nIFwiZ2V0TWFza1BhdHRlcm5cIi4gT24gc3VjY2VzcywgbW9kaWZ5IHRoZSBtYXRyaXggYW5kXG4gICAqIHJldHVybiB0cnVlLiAgRm9yIGRlYnVnZ2luZyBwdXJwb3NlcywgaXQgc2tpcHMgbWFza2luZyBwcm9jZXNzIGlmXG4gICAqIFwiZ2V0TWFza1BhdHRlcm5cIiBpcyAtMS4gIFNlZSA4Ljcgb2YgSklTWDA1MTA6MjAwNCAocC4zOCkgZm9yIGhvdyB0byBlbWJlZFxuICAgKiBkYXRhIGJpdHMuXG4gICAqIEBwYXJhbSB7Qml0QXJyYXl9IGRhdGFCaXRzIGJpdHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXNrUGF0dGVybiBtYXNrLlxuICAgKiBAcGFyYW0ge0J5dGVNYXRyaXh9IG1hdHJpeCByZXN1bHQuLlxuICAgKi9cbiAgXy5lbWJlZERhdGFCaXRzID0gZnVuY3Rpb24oZGF0YUJpdHMsIG1hc2tQYXR0ZXJuLCBtYXRyaXgpIHtcbiAgICB2YXIgYml0SW5kZXggPSAwO1xuICAgIHZhciBkaXJlY3Rpb24gPSAtMTtcbiAgICAvLyBTdGFydCBmcm9tIHRoZSByaWdodCBib3R0b20gY2VsbC5cbiAgICB2YXIgeCA9IG1hdHJpeC5nZXRXaWR0aCgpIC0gMTtcbiAgICB2YXIgeSA9IG1hdHJpeC5nZXRIZWlnaHQoKSAtIDE7XG4gICAgd2hpbGUgKHggPiAwKSB7XG4gICAgICAvLyBTa2lwIHRoZSB2ZXJ0aWNhbCB0aW1pbmcgcGF0dGVybi5cbiAgICAgIGlmICh4ID09IDYpIHtcbiAgICAgICAgeCAtPSAxO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHkgPj0gMCAmJiB5IDwgbWF0cml4LmdldEhlaWdodCgpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjsgKytpKSB7XG4gICAgICAgICAgdmFyIHh4ID0geCAtIGk7XG4gICAgICAgICAgLy8gU2tpcCB0aGUgY2VsbCBpZiBpdCdzIG5vdCBlbXB0eS5cbiAgICAgICAgICBpZiAoIV8uaXNFbXB0eShtYXRyaXguZ2V0KHh4LCB5KSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgYml0O1xuICAgICAgICAgIGlmIChiaXRJbmRleCA8IGRhdGFCaXRzLmdldFNpemUoKSkge1xuICAgICAgICAgICAgYml0ID0gZGF0YUJpdHMuZ2V0KGJpdEluZGV4KTtcbiAgICAgICAgICAgICsrYml0SW5kZXg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFBhZGRpbmcgYml0LiBJZiB0aGVyZSBpcyBubyBiaXQgbGVmdCwgd2UnbGwgZmlsbCB0aGUgbGVmdCBjZWxsc1xuICAgICAgICAgICAgLy8gd2l0aCAwLCBhcyBkZXNjcmliZWQgaW4gOC40Ljkgb2YgSklTWDA1MTA6MjAwNCAocC4gMjQpLlxuICAgICAgICAgICAgYml0ID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU2tpcCBtYXNraW5nIGlmIG1hc2tfcGF0dGVybiBpcyAtMS5cbiAgICAgICAgICBpZiAobWFza1BhdHRlcm4gIT0gLTEgJiYgTWFza1V0aWwuZ2V0RGF0YU1hc2tCaXQobWFza1BhdHRlcm4sIHh4LFxuICAgICAgICAgICAgeSkpIHtcbiAgICAgICAgICAgIGJpdCA9ICFiaXQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1hdHJpeC5zZXQoeHgsIHksIGJpdCk7XG4gICAgICAgIH1cbiAgICAgICAgeSArPSBkaXJlY3Rpb247XG4gICAgICB9XG4gICAgICBkaXJlY3Rpb24gPSAtZGlyZWN0aW9uOyAgLy8gUmV2ZXJzZSB0aGUgZGlyZWN0aW9uLlxuICAgICAgeSArPSBkaXJlY3Rpb247XG4gICAgICB4IC09IDI7ICAvLyBNb3ZlIHRvIHRoZSBsZWZ0LlxuICAgIH1cbiAgICAvLyBBbGwgYml0cyBzaG91bGQgYmUgY29uc3VtZWQuXG4gICAgaWYgKGJpdEluZGV4ICE9IGRhdGFCaXRzLmdldFNpemUoKSkge1xuICAgICAgdGhyb3cgbmV3IFdyaXRlckVycm9yKCdOb3QgYWxsIGJpdHMgY29uc3VtZWQ6ICcgK1xuICAgICAgICBiaXRJbmRleCArICcvJyArIGRhdGFCaXRzLmdldFNpemUoKSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKlxuICAgKiBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBtb3N0IHNpZ25pZmljYW50IGJpdCBzZXQgKHRvIG9uZSkgaW4gdGhlXG4gICAqIFwidmFsdWVcIi4gVGhlIG1vc3Qgc2lnbmlmaWNhbnQgYml0IGlzIHBvc2l0aW9uIDMyLiBJZiB0aGVyZSBpcyBubyBiaXQgc2V0LFxuICAgKiByZXR1cm4gMC4gRXhhbXBsZXM6XG4gICAqIC0gZmluZE1TQlNldCgwKSA9PiAwXG4gICAqIC0gZmluZE1TQlNldCgxKSA9PiAxXG4gICAqIC0gZmluZE1TQlNldCgyNTUpID0+IDhcbiAgICovXG4gIF8uZmluZE1TQlNldCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIG51bURpZ2l0cyA9IDA7XG4gICAgd2hpbGUgKHZhbHVlICE9IDApIHtcbiAgICAgIHZhbHVlID4+Pj0gMTtcbiAgICAgICsrbnVtRGlnaXRzO1xuICAgIH1cbiAgICByZXR1cm4gbnVtRGlnaXRzO1xuICB9O1xuXG4gIC8qKlxuICAgKlxuICAgKiBDYWxjdWxhdGUgQkNIIChCb3NlLUNoYXVkaHVyaS1Ib2NxdWVuZ2hlbSkgY29kZSBmb3IgXCJ2YWx1ZVwiIHVzaW5nXG4gICAqIHBvbHlub21pYWwgXCJwb2x5XCIuIFRoZSBCQ0hcbiAgICogY29kZSBpcyB1c2VkIGZvciBlbmNvZGluZyB0eXBlIGluZm9ybWF0aW9uIGFuZCB2ZXJzaW9uIGluZm9ybWF0aW9uLlxuICAgKiBFeGFtcGxlOiBDYWxjdWxhdGlvbiBvZiB2ZXJzaW9uIGluZm9ybWF0aW9uIG9mIDcuXG4gICAqIGYoeCkgaXMgY3JlYXRlZCBmcm9tIDcuXG4gICAqICAgLSA3ID0gMDAwMTExIGluIDYgYml0c1xuICAgKiAgIC0gZih4KSA9IHheMiArIHheMSArIHheMFxuICAgKiBnKHgpIGlzIGdpdmVuIGJ5IHRoZSBzdGFuZGFyZCAocC4gNjcpXG4gICAqICAgLSBnKHgpID0geF4xMiArIHheMTEgKyB4XjEwICsgeF45ICsgeF44ICsgeF41ICsgeF4yICsgMVxuICAgKiBNdWx0aXBseSBmKHgpIGJ5IHheKDE4IC0gNilcbiAgICogICAtIGYnKHgpID0gZih4KSAqIHheKDE4IC0gNilcbiAgICogICAtIGYnKHgpID0geF4xNCArIHheMTMgKyB4XjEyXG4gICAqIENhbGN1bGF0ZSB0aGUgcmVtYWluZGVyIG9mIGYnKHgpIC8gZyh4KVxuICAgKiAgICAgICAgIHheMlxuICAgKiAgICAgICAgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXG4gICAqICAgZyh4KSApeF4xNCArIHheMTMgKyB4XjEyXG4gICAqICAgICAgICAgeF4xNCArIHheMTMgKyB4XjEyICsgeF4xMSArIHheMTAgKyB4XjcgKyB4XjQgKyB4XjJcbiAgICogICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHheMTEgKyB4XjEwICsgeF43ICsgeF40ICsgeF4yXG4gICAqXG4gICAqIFRoZSByZW1haW5kZXIgaXMgeF4xMSArIHheMTAgKyB4XjcgKyB4XjQgKyB4XjJcbiAgICogRW5jb2RlIGl0IGluIGJpbmFyeTogMTEwMDEwMDEwMTAwXG4gICAqIFRoZSByZXR1cm4gdmFsdWUgaXMgMHhjOTQgKDExMDAgMTAwMSAwMTAwKVxuICAgKlxuICAgKiBTaW5jZSBhbGwgY29lZmZpY2llbnRzIGluIHRoZSBwb2x5bm9taWFscyBhcmUgMSBvciAwLCB3ZSBjYW4gZG8gdGhlXG4gICAqIGNhbGN1bGF0aW9uIGJ5IGJpdFxuICAgKiBvcGVyYXRpb25zLiBXZSBkb24ndCBjYXJlIGlmIGNvZmZpY2llbnRzIGFyZSBwb3NpdGl2ZSBvciBuZWdhdGl2ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIHNlZSBhYm92ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBvbHkgc2VlIGFib3ZlLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHNlZSBhYm92ZS5cbiAgICovXG4gIF8uY2FsY3VsYXRlQkNIQ29kZSA9IGZ1bmN0aW9uKHZhbHVlLCBwb2x5KSB7XG4gICAgLy8gSWYgcG9seSBpcyBcIjEgMTExMSAwMDEwIDAxMDFcIiAodmVyc2lvbiBpbmZvIHBvbHkpLCBtc2JTZXRJblBvbHkgaXMgMTMuXG4gICAgLy8gV2UnbGwgc3VidHJhY3QgMSBmcm9tIDEzIHRvIG1ha2UgaXQgMTIuXG4gICAgdmFyIG1zYlNldEluUG9seSA9IF8uZmluZE1TQlNldChwb2x5KTtcbiAgICB2YWx1ZSA8PD0gbXNiU2V0SW5Qb2x5IC0gMTtcbiAgICAvLyBEbyB0aGUgZGl2aXNpb24gYnVzaW5lc3MgdXNpbmcgZXhjbHVzaXZlLW9yIG9wZXJhdGlvbnMuXG4gICAgd2hpbGUgKF8uZmluZE1TQlNldCh2YWx1ZSkgPj0gbXNiU2V0SW5Qb2x5KSB7XG4gICAgICB2YWx1ZSBePSBwb2x5IDw8IChfLmZpbmRNU0JTZXQodmFsdWUpIC0gbXNiU2V0SW5Qb2x5KTtcbiAgICB9XG4gICAgLy8gTm93IHRoZSBcInZhbHVlXCIgaXMgdGhlIHJlbWFpbmRlciAoaS5lLiB0aGUgQkNIIGNvZGUpXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBNYWtlIGJpdCB2ZWN0b3Igb2YgdHlwZSBpbmZvcm1hdGlvbi4gT24gc3VjY2Vzcywgc3RvcmUgdGhlIHJlc3VsdCBpblxuICAgKiBcImJpdHNcIiBhbmQgcmV0dXJuIHRydWUuICBFbmNvZGUgZXJyb3IgY29ycmVjdGlvbiBsZXZlbCBhbmQgbWFzayBwYXR0ZXJuLlxuICAgKiBTZWUgOC45IG9mIEpJU1gwNTEwOjIwMDQgKHAuNDUpIGZvciBkZXRhaWxzLlxuICAgKiBAcGFyYW0ge0Vycm9yQ29ycmVjdGlvbkxldmVsfSBlY0xldmVsIGVycm9yIGNvcnJlY3Rpb24gbGV2ZWwuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXNrUGF0dGVybiBwYXR0ZXJuLlxuICAgKiBAcGFyYW0ge0JpdEFycmF5fSBiaXRzIHJlc3VsdCBhcnJheS5cbiAgICovXG4gIF8ubWFrZVR5cGVJbmZvQml0cyA9IGZ1bmN0aW9uKGVjTGV2ZWwsIG1hc2tQYXR0ZXJuLCBiaXRzKSB7XG4gICAgaWYgKCFRUkNvZGUuaXNWYWxpZE1hc2tQYXR0ZXJuKG1hc2tQYXR0ZXJuKSkge1xuICAgICAgdGhyb3cgbmV3IFdyaXRlckVycm9yKCdJbnZhbGlkIG1hc2sgcGF0dGVybicpO1xuICAgIH1cbiAgICB2YXIgdHlwZUluZm8gPSAoZWNMZXZlbC5nZXRCaXRzKCkgPDwgMykgfCBtYXNrUGF0dGVybjtcbiAgICBiaXRzLmFwcGVuZEJpdHModHlwZUluZm8sIDUpO1xuXG4gICAgdmFyIGJjaENvZGUgPSBfLmNhbGN1bGF0ZUJDSENvZGUodHlwZUluZm8sIF8uVFlQRV9JTkZPX1BPTFkpO1xuICAgIGJpdHMuYXBwZW5kQml0cyhiY2hDb2RlLCAxMCk7XG5cbiAgICB2YXIgbWFza0JpdHMgPSBuZXcgQml0QXJyYXkoKTtcbiAgICBtYXNrQml0cy5hcHBlbmRCaXRzKF8uVFlQRV9JTkZPX01BU0tfUEFUVEVSTiwgMTUpO1xuICAgIGJpdHMueG9yKG1hc2tCaXRzKTtcblxuICAgIGlmIChiaXRzLmdldFNpemUoKSAhPSAxNSkgeyAgLy8gSnVzdCBpbiBjYXNlLlxuICAgICAgdGhyb3cgbmV3IFdyaXRlckVycm9yKCdzaG91bGQgbm90IGhhcHBlbiBidXQgd2UgZ290OiAnICtcbiAgICAgICAgYml0cy5nZXRTaXplKCkpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogTWFrZSBiaXQgdmVjdG9yIG9mIHZlcnNpb24gaW5mb3JtYXRpb24uIE9uIHN1Y2Nlc3MsIHN0b3JlIHRoZSByZXN1bHQgaW5cbiAgICogXCJiaXRzXCIgYW5kIHJldHVybiB0cnVlLiAgU2VlIDguMTAgb2YgSklTWDA1MTA6MjAwNCAocC40NSkgZm9yIGRldGFpbHMuXG4gICAqIEBwYXJhbSB7VmVyc2lvbn0gdmVyc2lvbiB2ZXJzaW9uLlxuICAgKiBAcGFyYW0ge0JpdEFycmF5fSBiaXRzIHJlc3VsdCBhcnJheS5cbiAgICovXG4gIF8ubWFrZVZlcnNpb25JbmZvQml0cyA9IGZ1bmN0aW9uKHZlcnNpb24sIGJpdHMpIHtcbiAgICBiaXRzLmFwcGVuZEJpdHModmVyc2lvbi5nZXRWZXJzaW9uTnVtYmVyKCksIDYpO1xuICAgIHZhciBiY2hDb2RlID0gXy5jYWxjdWxhdGVCQ0hDb2RlKHZlcnNpb24uZ2V0VmVyc2lvbk51bWJlcigpLFxuICAgICAgXy5WRVJTSU9OX0lORk9fUE9MWSk7XG4gICAgYml0cy5hcHBlbmRCaXRzKGJjaENvZGUsIDEyKTtcblxuICAgIGlmIChiaXRzLmdldFNpemUoKSAhPSAxOCkgeyAgLy8gSnVzdCBpbiBjYXNlLlxuICAgICAgdGhyb3cgbmV3IFdyaXRlckVycm9yKCdzaG91bGQgbm90IGhhcHBlbiBidXQgd2UgZ290OiAnICtcbiAgICAgICAgYml0cy5nZXRTaXplKCkpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gaWYgdmFsdWUgaXMgZW1wdHkuXG4gICAqL1xuICBfLmlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSAtMTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtCeXRlTWF0cml4fSBtYXRyaXggbWF0cml4IHRvIGFkZCB0aW1pbmcgcGF0dGVybnMgdG8uXG4gICAqL1xuICBfLmVtYmVkVGltaW5nUGF0dGVybnMgPSBmdW5jdGlvbihtYXRyaXgpIHtcbiAgICAvLyAtOCBpcyBmb3Igc2tpcHBpbmcgcG9zaXRpb24gZGV0ZWN0aW9uIHBhdHRlcm5zIChzaXplIDcpLCBhbmQgdHdvXG4gICAgLy8gaG9yaXpvbnRhbC92ZXJ0aWNhbCBzZXBhcmF0aW9uIHBhdHRlcm5zIChzaXplIDEpLiBUaHVzLCA4ID0gNyArIDEuXG4gICAgZm9yICh2YXIgaSA9IDg7IGkgPCBtYXRyaXguZ2V0V2lkdGgoKSAtIDg7ICsraSkge1xuICAgICAgdmFyIGJpdCA9IChpICsgMSkgJSAyO1xuICAgICAgLy8gSG9yaXpvbnRhbCBsaW5lLlxuICAgICAgaWYgKF8uaXNFbXB0eShtYXRyaXguZ2V0KGksIDYpKSkge1xuICAgICAgICBtYXRyaXguc2V0KGksIDYsIGJpdCk7XG4gICAgICB9XG4gICAgICAvLyBWZXJ0aWNhbCBsaW5lLlxuICAgICAgaWYgKF8uaXNFbXB0eShtYXRyaXguZ2V0KDYsIGkpKSkge1xuICAgICAgICBtYXRyaXguc2V0KDYsIGksIGJpdCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBFbWJlZCB0aGUgbG9uZWx5IGRhcmsgZG90IGF0IGxlZnQgYm90dG9tIGNvcm5lci4gSklTWDA1MTA6MjAwNCAocC40NilcbiAgICogQHBhcmFtIHtCeXRlTWF0cml4fSBtYXRyaXggdGhlIG1hdHJpeC5cbiAgICovXG4gIF8uZW1iZWREYXJrRG90QXRMZWZ0Qm90dG9tQ29ybmVyID0gZnVuY3Rpb24obWF0cml4KSB7XG4gICAgaWYgKG1hdHJpeC5nZXQoOCwgbWF0cml4LmdldEhlaWdodCgpIC0gOCkgPT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFdyaXRlckVycm9yKCk7XG4gICAgfVxuICAgIG1hdHJpeC5zZXQoOCwgbWF0cml4LmdldEhlaWdodCgpIC0gOCwgMSk7XG4gIH07XG5cbiAgXy5lbWJlZEhvcml6b250YWxTZXBhcmF0aW9uUGF0dGVybiA9IGZ1bmN0aW9uKHhTdGFydCwgeVN0YXJ0LCBtYXRyaXgpIHtcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDg7ICsreCkge1xuICAgICAgaWYgKCFfLmlzRW1wdHkobWF0cml4LmdldCh4U3RhcnQgKyB4LCB5U3RhcnQpKSkge1xuICAgICAgICB0aHJvdyBuZXcgV3JpdGVyRXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIG1hdHJpeC5zZXQoeFN0YXJ0ICsgeCwgeVN0YXJ0LCAwKTtcbiAgICB9XG4gIH07XG5cbiAgXy5lbWJlZFZlcnRpY2FsU2VwYXJhdGlvblBhdHRlcm4gPSBmdW5jdGlvbih4U3RhcnQsIHlTdGFydCwgbWF0cml4KSB7XG4gICAgZm9yICh2YXIgeSA9IDA7IHkgPCA3OyArK3kpIHtcbiAgICAgIGlmICghXy5pc0VtcHR5KG1hdHJpeC5nZXQoeFN0YXJ0LCB5U3RhcnQgKyB5KSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFdyaXRlckVycm9yKCk7XG4gICAgICB9XG4gICAgICBtYXRyaXguc2V0KHhTdGFydCwgeVN0YXJ0ICsgeSwgMCk7XG4gICAgfVxuICB9O1xuXG4gIF8uZW1iZWRQb3NpdGlvbkFkanVzdG1lbnRQYXR0ZXJuID0gZnVuY3Rpb24oeFN0YXJ0LCB5U3RhcnQsIG1hdHJpeCkge1xuICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgKyt5KSB7XG4gICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7ICsreCkge1xuICAgICAgICBtYXRyaXguc2V0KHhTdGFydCArIHgsIHlTdGFydCArIHksXG4gICAgICAgICAgXy5QT1NJVElPTl9BREpVU1RNRU5UX1BBVFRFUk5beV1beF0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfLmVtYmVkUG9zaXRpb25EZXRlY3Rpb25QYXR0ZXJuID0gZnVuY3Rpb24oeFN0YXJ0LCB5U3RhcnQsIG1hdHJpeCkge1xuICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNzsgKyt5KSB7XG4gICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDc7ICsreCkge1xuICAgICAgICBtYXRyaXguc2V0KHhTdGFydCArIHgsIHlTdGFydCArIHksIF8uUE9TSVRJT05fREVURUNUSU9OX1BBVFRFUk5beV1beF0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRW1iZWQgcG9zaXRpb24gZGV0ZWN0aW9uIHBhdHRlcm5zIGFuZCBzdXJyb3VuZGluZyB2ZXJ0aWNhbC9ob3Jpem9udGFsXG4gICAqIHNlcGFyYXRvcnMuXG4gICAqIEBwYXJhbSB7Qnl0ZU1hdHJpeH0gbWF0cml4IHdvcmtpbmcgbWF0cml4LlxuICAgKi9cbiAgXy5lbWJlZFBvc2l0aW9uRGV0ZWN0aW9uUGF0dGVybnNBbmRTZXBhcmF0b3JzID0gZnVuY3Rpb24obWF0cml4KSB7XG4gICAgLy8gRW1iZWQgdGhyZWUgYmlnIHNxdWFyZXMgYXQgY29ybmVycy5cbiAgICB2YXIgcGRwV2lkdGggPSBfLlBPU0lUSU9OX0RFVEVDVElPTl9QQVRURVJOWzBdLmxlbmd0aDtcbiAgICAvLyBMZWZ0IHRvcCBjb3JuZXIuXG4gICAgXy5lbWJlZFBvc2l0aW9uRGV0ZWN0aW9uUGF0dGVybigwLCAwLCBtYXRyaXgpO1xuICAgIC8vIFJpZ2h0IHRvcCBjb3JuZXIuXG4gICAgXy5lbWJlZFBvc2l0aW9uRGV0ZWN0aW9uUGF0dGVybihtYXRyaXguZ2V0V2lkdGgoKSAtIHBkcFdpZHRoLCAwLCBtYXRyaXgpO1xuICAgIC8vIExlZnQgYm90dG9tIGNvcm5lci5cbiAgICBfLmVtYmVkUG9zaXRpb25EZXRlY3Rpb25QYXR0ZXJuKDAsIG1hdHJpeC5nZXRXaWR0aCgpIC0gcGRwV2lkdGgsIG1hdHJpeCk7XG5cbiAgICAvLyBFbWJlZCBob3Jpem9udGFsIHNlcGFyYXRpb24gcGF0dGVybnMgYXJvdW5kIHRoZSBzcXVhcmVzLlxuICAgIHZhciBoc3BXaWR0aCA9IDg7XG4gICAgLy8gTGVmdCB0b3AgY29ybmVyLlxuICAgIF8uZW1iZWRIb3Jpem9udGFsU2VwYXJhdGlvblBhdHRlcm4oMCwgaHNwV2lkdGggLSAxLCBtYXRyaXgpO1xuICAgIC8vIFJpZ2h0IHRvcCBjb3JuZXIuXG4gICAgXy5lbWJlZEhvcml6b250YWxTZXBhcmF0aW9uUGF0dGVybihtYXRyaXguZ2V0V2lkdGgoKSAtIGhzcFdpZHRoLFxuICAgICAgaHNwV2lkdGggLSAxLCBtYXRyaXgpO1xuICAgIC8vIExlZnQgYm90dG9tIGNvcm5lci5cbiAgICBfLmVtYmVkSG9yaXpvbnRhbFNlcGFyYXRpb25QYXR0ZXJuKDAsIG1hdHJpeC5nZXRXaWR0aCgpIC0gaHNwV2lkdGgsXG4gICAgICBtYXRyaXgpO1xuXG4gICAgLy8gRW1iZWQgdmVydGljYWwgc2VwYXJhdGlvbiBwYXR0ZXJucyBhcm91bmQgdGhlIHNxdWFyZXMuXG4gICAgdmFyIHZzcFNpemUgPSA3O1xuICAgIC8vIExlZnQgdG9wIGNvcm5lci5cbiAgICBfLmVtYmVkVmVydGljYWxTZXBhcmF0aW9uUGF0dGVybih2c3BTaXplLCAwLCBtYXRyaXgpO1xuICAgIC8vIFJpZ2h0IHRvcCBjb3JuZXIuXG4gICAgXy5lbWJlZFZlcnRpY2FsU2VwYXJhdGlvblBhdHRlcm4obWF0cml4LmdldEhlaWdodCgpIC0gdnNwU2l6ZSAtIDEsIDAsXG4gICAgICBtYXRyaXgpO1xuICAgIC8vIExlZnQgYm90dG9tIGNvcm5lci5cbiAgICBfLmVtYmVkVmVydGljYWxTZXBhcmF0aW9uUGF0dGVybih2c3BTaXplLCBtYXRyaXguZ2V0SGVpZ2h0KCkgLSB2c3BTaXplLFxuICAgICAgbWF0cml4KTtcbiAgfTtcblxuICAvKipcbiAgICogRW1iZWQgcG9zaXRpb24gYWRqdXN0bWVudCBwYXR0ZXJucyBpZiBuZWVkZWQuXG4gICAqL1xuICBfLm1heWJlRW1iZWRQb3NpdGlvbkFkanVzdG1lbnRQYXR0ZXJucyA9IGZ1bmN0aW9uKHZlcnNpb24sIG1hdHJpeCkge1xuICAgIC8vIFRoZSBwYXR0ZXJucyBhcHBlYXIgaWYgdmVyc2lvbiA+PSAyXG4gICAgaWYgKHZlcnNpb24uZ2V0VmVyc2lvbk51bWJlcigpIDwgMikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSB2ZXJzaW9uLmdldFZlcnNpb25OdW1iZXIoKSAtIDE7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gXy5QT1NJVElPTl9BREpVU1RNRU5UX1BBVFRFUk5fQ09PUkRJTkFURV9UQUJMRVtpbmRleF07XG4gICAgdmFyIG51bUNvb3JkaW5hdGVzID1cbiAgICAgIF8uUE9TSVRJT05fQURKVVNUTUVOVF9QQVRURVJOX0NPT1JESU5BVEVfVEFCTEVbaW5kZXhdLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUNvb3JkaW5hdGVzOyArK2kpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbnVtQ29vcmRpbmF0ZXM7ICsraikge1xuICAgICAgICB2YXIgeSA9IGNvb3JkaW5hdGVzW2ldO1xuICAgICAgICB2YXIgeCA9IGNvb3JkaW5hdGVzW2pdO1xuICAgICAgICBpZiAoeCA9PSAtMSB8fCB5ID09IC0xKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIGNlbGwgaXMgdW5zZXQsIHdlIGVtYmVkIHRoZSBwb3NpdGlvbiBhZGp1c3RtZW50IHBhdHRlcm4gaGVyZS5cbiAgICAgICAgaWYgKF8uaXNFbXB0eShtYXRyaXguZ2V0KHgsIHkpKSkge1xuICAgICAgICAgIC8vIC0yIGlzIG5lY2Vzc2FyeSBzaW5jZSB0aGUgeC95IGNvb3JkaW5hdGVzIHBvaW50IHRvIHRoZSBjZW50ZXIgb2ZcbiAgICAgICAgICAvLyB0aGUgcGF0dGVybiwgbm90IHRoZVxuICAgICAgICAgIC8vIGxlZnQgdG9wIGNvcm5lci5cbiAgICAgICAgICBfLmVtYmVkUG9zaXRpb25BZGp1c3RtZW50UGF0dGVybih4IC0gMiwgeSAtIDIsIG1hdHJpeCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbn0pO1xuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiAqIENvcHlyaWdodCAyMDA4IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5xci5lbmNvZGVyLkVuY29kZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5CaXRBcnJheScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkNoYXJhY3RlclNldEVDSScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkVuY29kZUhpbnRUeXBlJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuRXJyb3JDb3JyZWN0aW9uTGV2ZWwnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5HRjI1NicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLk1vZGUnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5Nb2RlRW51bScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLlJlZWRTb2xvbW9uRW5jb2RlcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLlZlcnNpb24nKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5lbmNvZGVyLkJsb2NrUGFpcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLmVuY29kZXIuTWFza1V0aWwnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5lbmNvZGVyLk1hdHJpeFV0aWwnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5lbmNvZGVyLlFSQ29kZScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLnN0cmluZ3V0aWxzJyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIHZhciBFcnJvckNvcnJlY3Rpb25MZXZlbCA9IHc2OWIucXIuRXJyb3JDb3JyZWN0aW9uTGV2ZWw7XG4gIHZhciBCaXRBcnJheSA9IHc2OWIucXIuQml0QXJyYXk7XG4gIHZhciBCeXRlTWF0cml4ID0gdzY5Yi5xci5lbmNvZGVyLkJ5dGVNYXRyaXg7XG4gIHZhciBNYXRyaXhVdGlsID0gdzY5Yi5xci5lbmNvZGVyLk1hdHJpeFV0aWw7XG4gIHZhciBWZXJzaW9uID0gdzY5Yi5xci5WZXJzaW9uO1xuICB2YXIgV3JpdGVyRXJyb3IgPSB3NjliLnFyLldyaXRlckVycm9yO1xuICB2YXIgQmxvY2tQYWlyID0gdzY5Yi5xci5lbmNvZGVyLkJsb2NrUGFpcjtcbiAgdmFyIFFSQ29kZSA9IHc2OWIucXIuZW5jb2Rlci5RUkNvZGU7XG4gIHZhciBNYXNrVXRpbCA9IHc2OWIucXIuZW5jb2Rlci5NYXNrVXRpbDtcbiAgdmFyIE1vZGUgPSB3NjliLnFyLk1vZGU7XG4gIHZhciBNb2RlRW51bSA9IHc2OWIucXIuTW9kZUVudW07XG4gIHZhciBFbmNvZGVIaW50VHlwZSA9IHc2OWIucXIuRW5jb2RlSGludFR5cGU7XG4gIHZhciBDaGFyYWN0ZXJTZXRFQ0kgPSB3NjliLnFyLkNoYXJhY3RlclNldEVDSTtcbiAgdmFyIFJlZWRTb2xvbW9uRW5jb2RlciA9IHc2OWIucXIuUmVlZFNvbG9tb25FbmNvZGVyO1xuICB2YXIgc3RyaW5ndXRpbHMgPSB3NjliLnFyLnN0cmluZ3V0aWxzO1xuXG5cbiAgLyoqXG4gICAqIEBhdXRob3Igc2F0b3J1eEBnb29nbGUuY29tIChTYXRvcnUgVGFrYWJheWFzaGkpIC0gY3JlYXRvclxuICAgKiBAYXV0aG9yIGRzd2l0a2luQGdvb2dsZS5jb20gKERhbmllbCBTd2l0a2luKSAtIHBvcnRlZCBmcm9tIEMrXG4gICAqIEBhdXRob3IgbWJAdzY5Yi5jb20gKE1hbnVlbCBCcmF1bikgLSBwb3J0ZWQgdG8ganNcbiAgICovXG4gIHZhciBfID0gdzY5Yi5xci5lbmNvZGVyLkVuY29kZXI7XG5cbiAgLy8gVGhlIG9yaWdpbmFsIHRhYmxlIGlzIGRlZmluZWQgaW4gdGhlIHRhYmxlIDUgb2YgSklTWDA1MTA6MjAwNCAocC4xOSkuXG4gIF8uQUxQSEFOVU1FUklDX1RBQkxFID0gW1xuICAgIC8vIDB4MDAtMHgwZlxuICAgIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLFxuICAgIC8vIDB4MTAtMHgxZlxuICAgIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLFxuICAgIC8vIDB4MjAtMHgyZlxuICAgIDM2LCAtMSwgLTEsIC0xLCAzNywgMzgsIC0xLCAtMSwgLTEsIC0xLCAzOSwgNDAsIC0xLCA0MSwgNDIsIDQzLFxuICAgIC8vIDB4MzAtMHgzZlxuICAgIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDQ0LCAtMSwgLTEsIC0xLCAtMSwgLTEsXG4gICAgLy8gMHg0MC0weDRmXG4gICAgLTEsIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsXG4gICAgLy8gMHg1MC0weDVmXG4gICAgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsIDM1LCAtMSwgLTEsIC0xLCAtMSwgLTFcbiAgXTtcblxuICBfLkRFRkFVTFRfQllURV9NT0RFX0VOQ09ESU5HID0gJ1VURi04JztcblxuICAvKiogVGhlIG1hc2sgcGVuYWx0eSBjYWxjdWxhdGlvbiBpcyBjb21wbGljYXRlZC4gIFNlZSBUYWJsZSAyMSBvZlxuICAgKiBKSVNYMDUxMDoyMDA0IChwLjQ1KSBmb3IgZGV0YWlscy4gIEJhc2ljYWxseSBpdCBhcHBsaWVzIGZvdXIgcnVsZXMgYW5kXG4gICAqIHN1bW1hdGUgYWxsIHBlbmFsdGllcy5cbiAgICovXG4gIF8uY2FsY3VsYXRlTWFza1BlbmFsdHkgPSBmdW5jdGlvbihtYXRyaXgpIHtcbiAgICByZXR1cm4gTWFza1V0aWwuYXBwbHlNYXNrUGVuYWx0eVJ1bGUxKG1hdHJpeCkgK1xuICAgICAgTWFza1V0aWwuYXBwbHlNYXNrUGVuYWx0eVJ1bGUyKG1hdHJpeCkgK1xuICAgICAgTWFza1V0aWwuYXBwbHlNYXNrUGVuYWx0eVJ1bGUzKG1hdHJpeCkgK1xuICAgICAgTWFza1V0aWwuYXBwbHlNYXNrUGVuYWx0eVJ1bGU0KG1hdHJpeCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICBFbmNvZGUgXCJieXRlc1wiIHdpdGggdGhlIGVycm9yIGNvcnJlY3Rpb24gbGV2ZWwgXCJlY0xldmVsXCIuIFRoZSBlbmNvZGluZ1xuICAgKiAgbW9kZSB3aWxsIGJlIGNob3NlbiBpbnRlcm5hbGx5IGJ5IGNob29zZU1vZGUoKS4gT24gc3VjY2Vzcywgc3RvcmUgdGhlXG4gICAqICByZXN1bHQgaW4gXCJxckNvZGVcIi5cbiAgICpcbiAgICogV2UgcmVjb21tZW5kIHlvdSB0byB1c2UgUVJDb2RlLkVDX0xFVkVMX0wgKHRoZSBsb3dlc3QgbGV2ZWwpIGZvclxuICAgKiBcImdldEVDTGV2ZWxcIiBzaW5jZSBvdXIgcHJpbWFyeSB1c2UgaXMgdG8gc2hvdyBRUiBjb2RlIG9uIGRlc2t0b3Agc2NyZWVucy5cbiAgICogV2UgZG9uJ3QgbmVlZCB2ZXJ5IHN0cm9uZyBlcnJvciBjb3JyZWN0aW9uIGZvciB0aGlzIHB1cnBvc2UuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGVyZSBpcyBubyB3YXkgdG8gZW5jb2RlIGJ5dGVzIGluIE1PREVfS0FOSkkuIFdlIG1pZ2h0IHdhbnQgdG9cbiAgICogYWRkIEVuY29kZVdpdGhNb2RlKCkgd2l0aCB3aGljaCBjbGllbnRzIGNhbiBzcGVjaWZ5IHRoZSBlbmNvZGluZyBtb2RlLiBGb3JcbiAgICogbm93LCB3ZSBkb24ndCBuZWVkIHRoZSBmdW5jdGlvbmFsaXR5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCBzdHJpbmcuXG4gICAqIEBwYXJhbSB7RXJyb3JDb3JyZWN0aW9uTGV2ZWx9IGVjTGV2ZWwgZXJyb3IgY29ycmVjdGlvbiBsZXZlbC5cbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfaGludHMgZW5jb2RpbmcgaGludHMuXG4gICAqXG4gICAqL1xuXG4gIF8uZW5jb2RlID0gZnVuY3Rpb24oY29udGVudCwgZWNMZXZlbCwgb3B0X2hpbnRzKSB7XG5cbiAgICAvLyBEZXRlcm1pbmUgd2hhdCBjaGFyYWN0ZXIgZW5jb2RpbmcgaGFzIGJlZW4gc3BlY2lmaWVkIGJ5IHRoZSBjYWxsZXIsIGlmXG4gICAgLy8gYW55XG4gICAgdmFyIGVuY29kaW5nID0gb3B0X2hpbnRzID8gb3B0X2hpbnRzW0VuY29kZUhpbnRUeXBlLkNIQVJBQ1RFUl9TRVRdIDogbnVsbDtcbiAgICB2YXIgZm9yY2VFQ0kgPSBvcHRfaGludHMgPyBvcHRfaGludHNbRW5jb2RlSGludFR5cGUuRk9SQ0VfQUREX0VDSV0gOiBmYWxzZTtcbiAgICBpZiAoZW5jb2RpbmcgPT0gbnVsbCkge1xuICAgICAgZW5jb2RpbmcgPSBfLkRFRkFVTFRfQllURV9NT0RFX0VOQ09ESU5HO1xuICAgIH1cblxuICAgIC8vIFBpY2sgYW4gZW5jb2RpbmcgbW9kZSBhcHByb3ByaWF0ZSBmb3IgdGhlIGNvbnRlbnQuIE5vdGUgdGhhdCB0aGlzIHdpbGxcbiAgICAvLyBub3QgYXR0ZW1wdCB0byB1c2UgbXVsdGlwbGUgbW9kZXMgLyBzZWdtZW50cyBldmVuIGlmIHRoYXQgd2VyZSBtb3JlXG4gICAgLy8gZWZmaWNpZW50LiBUd291bGQgYmUgbmljZS5cbiAgICB2YXIgbW9kZSA9IF8uY2hvb3NlTW9kZShjb250ZW50LCBlbmNvZGluZyk7XG5cbiAgICAvLyBUaGlzIHdpbGwgc3RvcmUgdGhlIGhlYWRlciBpbmZvcm1hdGlvbiwgbGlrZSBtb2RlIGFuZFxuICAgIC8vIGxlbmd0aCwgYXMgd2VsbCBhcyBcImhlYWRlclwiIHNlZ21lbnRzIGxpa2UgYW4gRUNJIHNlZ21lbnQuXG4gICAgdmFyIGhlYWRlckJpdHMgPSBuZXcgQml0QXJyYXkoKTtcblxuICAgIC8vIEFwcGVuZCBFQ0kgc2VnbWVudCBpZiBhcHBsaWNhYmxlXG4gICAgLy8gRGlzYWJsZWQgaW4gY29tcGF0IG1vZGUgYXMgc29tZSBzY2FubmVycyBzZWVtIHRvIGhhdmUgcHJvYmxlbXMgd2l0aCBpdC5cbiAgICBpZiAoZm9yY2VFQ0kgfHxcbiAgICAgIChtb2RlID09IE1vZGVFbnVtLkJZVEUgJiYgXy5ERUZBVUxUX0JZVEVfTU9ERV9FTkNPRElORyAhPSBlbmNvZGluZykpIHtcbiAgICAgIHZhciBlY2kgPSBDaGFyYWN0ZXJTZXRFQ0kuZ2V0VmFsdWUoZW5jb2RpbmcpO1xuICAgICAgaWYgKGVjaSkge1xuICAgICAgICBfLmFwcGVuZEVDSShlY2ksIGhlYWRlckJpdHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIChXaXRoIEVDSSBpbiBwbGFjZSwpIFdyaXRlIHRoZSBtb2RlIG1hcmtlclxuICAgIF8uYXBwZW5kTW9kZUluZm8obW9kZSwgaGVhZGVyQml0cyk7XG5cbiAgICAvLyBDb2xsZWN0IGRhdGEgd2l0aGluIHRoZSBtYWluIHNlZ21lbnQsIHNlcGFyYXRlbHksIHRvIGNvdW50IGl0cyBzaXplIGlmXG4gICAgLy8gbmVlZGVkLiBEb24ndCBhZGQgaXQgdG8gbWFpbiBwYXlsb2FkIHlldC5cbiAgICB2YXIgZGF0YUJpdHMgPSBuZXcgQml0QXJyYXkoKTtcbiAgICBfLmFwcGVuZEJ5dGVzKGNvbnRlbnQsIG1vZGUsIGRhdGFCaXRzLCBlbmNvZGluZyk7XG5cbiAgICAvLyBIYXJkIHBhcnQ6IG5lZWQgdG8ga25vdyB2ZXJzaW9uIHRvIGtub3cgaG93IG1hbnkgYml0cyBsZW5ndGggdGFrZXMuIEJ1dFxuICAgIC8vIG5lZWQgdG8ga25vdyBob3cgbWFueSBiaXRzIGl0IHRha2VzIHRvIGtub3cgdmVyc2lvbi4gRmlyc3Qgd2UgdGFrZSBhXG4gICAgLy8gZ3Vlc3MgYXQgdmVyc2lvbiBieSBhc3N1bWluZyB2ZXJzaW9uIHdpbGwgYmUgdGhlIG1pbmltdW0sIDE6XG5cbiAgICB2YXIgcHJvdmlzaW9uYWxCaXRzTmVlZGVkID0gaGVhZGVyQml0cy5nZXRTaXplKCkgK1xuICAgICAgbW9kZS5nZXRDaGFyYWN0ZXJDb3VudEJpdHMoVmVyc2lvbi5nZXRWZXJzaW9uRm9yTnVtYmVyKDEpKSArXG4gICAgICBkYXRhQml0cy5nZXRTaXplKCk7XG4gICAgdmFyIHByb3Zpc2lvbmFsVmVyc2lvbiA9IF8uY2hvb3NlVmVyc2lvbihwcm92aXNpb25hbEJpdHNOZWVkZWQsIGVjTGV2ZWwpO1xuXG4gICAgLy8gVXNlIHRoYXQgZ3Vlc3MgdG8gY2FsY3VsYXRlIHRoZSByaWdodCB2ZXJzaW9uLiBJIGFtIHN0aWxsIG5vdCBzdXJlIHRoaXNcbiAgICAvLyB3b3JrcyBpbiAxMDAlIG9mIGNhc2VzLlxuXG4gICAgdmFyIGJpdHNOZWVkZWQgPSBoZWFkZXJCaXRzLmdldFNpemUoKSArXG4gICAgICBtb2RlLmdldENoYXJhY3RlckNvdW50Qml0cyhwcm92aXNpb25hbFZlcnNpb24pICtcbiAgICAgIGRhdGFCaXRzLmdldFNpemUoKTtcbiAgICB2YXIgdmVyc2lvbiA9IF8uY2hvb3NlVmVyc2lvbihiaXRzTmVlZGVkLCBlY0xldmVsKTtcblxuICAgIHZhciBoZWFkZXJBbmREYXRhQml0cyA9IG5ldyBCaXRBcnJheSgpO1xuICAgIGhlYWRlckFuZERhdGFCaXRzLmFwcGVuZEJpdEFycmF5KGhlYWRlckJpdHMpO1xuICAgIC8vIEZpbmQgXCJsZW5ndGhcIiBvZiBtYWluIHNlZ21lbnQgYW5kIHdyaXRlIGl0XG4gICAgdmFyIG51bUxldHRlcnMgPVxuICAgICAgKG1vZGUgPT0gTW9kZUVudW0uQllURSA/IGRhdGFCaXRzLmdldFNpemVJbkJ5dGVzKCkgOiBjb250ZW50Lmxlbmd0aCk7XG4gICAgXy5hcHBlbmRMZW5ndGhJbmZvKG51bUxldHRlcnMsIHZlcnNpb24sIG1vZGUsIGhlYWRlckFuZERhdGFCaXRzKTtcbiAgICAvLyBQdXQgZGF0YSB0b2dldGhlciBpbnRvIHRoZSBvdmVyYWxsIHBheWxvYWRcbiAgICBoZWFkZXJBbmREYXRhQml0cy5hcHBlbmRCaXRBcnJheShkYXRhQml0cyk7XG5cbiAgICB2YXIgZWNCbG9ja3MgPSB2ZXJzaW9uLmdldEVDQmxvY2tzRm9yTGV2ZWwoZWNMZXZlbCk7XG4gICAgdmFyIG51bURhdGFCeXRlcyA9IHZlcnNpb24uZ2V0VG90YWxDb2Rld29yZHMoKSAtXG4gICAgICBlY0Jsb2Nrcy5nZXRUb3RhbEVDQ29kZXdvcmRzKCk7XG5cbiAgICAvLyBUZXJtaW5hdGUgdGhlIGJpdHMgcHJvcGVybHkuXG4gICAgXy50ZXJtaW5hdGVCaXRzKG51bURhdGFCeXRlcywgaGVhZGVyQW5kRGF0YUJpdHMpO1xuXG4gICAgLy8gSW50ZXJsZWF2ZSBkYXRhIGJpdHMgd2l0aCBlcnJvciBjb3JyZWN0aW9uIGNvZGUuXG4gICAgdmFyIGZpbmFsQml0cyA9IF8uaW50ZXJsZWF2ZVdpdGhFQ0J5dGVzKGhlYWRlckFuZERhdGFCaXRzLFxuICAgICAgdmVyc2lvbi5nZXRUb3RhbENvZGV3b3JkcygpLFxuICAgICAgbnVtRGF0YUJ5dGVzLFxuICAgICAgZWNCbG9ja3MuZ2V0TnVtQmxvY2tzKCkpO1xuXG4gICAgdmFyIHFyQ29kZSA9IG5ldyBRUkNvZGUoKTtcblxuICAgIHFyQ29kZS5zZXRFQ0xldmVsKGVjTGV2ZWwpO1xuICAgIHFyQ29kZS5zZXRNb2RlKG1vZGUpO1xuICAgIHFyQ29kZS5zZXRWZXJzaW9uKHZlcnNpb24pO1xuXG4gICAgLy8gIENob29zZSB0aGUgbWFzayBwYXR0ZXJuIGFuZCBzZXQgdG8gXCJxckNvZGVcIi5cbiAgICB2YXIgZGltZW5zaW9uID0gdmVyc2lvbi5nZXREaW1lbnNpb25Gb3JWZXJzaW9uKCk7XG4gICAgdmFyIG1hdHJpeCA9IG5ldyBCeXRlTWF0cml4KGRpbWVuc2lvbiwgZGltZW5zaW9uKTtcbiAgICB2YXIgbWFza1BhdHRlcm4gPSBfLmNob29zZU1hc2tQYXR0ZXJuKGZpbmFsQml0cywgZWNMZXZlbCwgdmVyc2lvbiwgbWF0cml4KTtcbiAgICBxckNvZGUuc2V0TWFza1BhdHRlcm4obWFza1BhdHRlcm4pO1xuXG4gICAgLy8gQnVpbGQgdGhlIG1hdHJpeCBhbmQgc2V0IGl0IHRvIFwicXJDb2RlXCIuXG4gICAgTWF0cml4VXRpbC5idWlsZE1hdHJpeChmaW5hbEJpdHMsIGVjTGV2ZWwsIHZlcnNpb24sIG1hc2tQYXR0ZXJuLCBtYXRyaXgpO1xuICAgIHFyQ29kZS5zZXRNYXRyaXgobWF0cml4KTtcblxuICAgIHJldHVybiBxckNvZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlIGFzY2lpIGNvZGUuXG4gICAqIEByZXR1cm4ge251bWJlcn0gdGhlIGNvZGUgcG9pbnQgb2YgdGhlIHRhYmxlIHVzZWQgaW4gYWxwaGFudW1lcmljIG1vZGUgb3JcbiAgICogIC0xIGlmIHRoZXJlIGlzIG5vIGNvcnJlc3BvbmRpbmcgY29kZSBpbiB0aGUgdGFibGUuXG4gICAqL1xuICBfLmdldEFscGhhbnVtZXJpY0NvZGUgPSBmdW5jdGlvbihjb2RlKSB7XG4gICAgY29kZSA9IE51bWJlcihjb2RlKTtcbiAgICBpZiAoY29kZSA8IF8uQUxQSEFOVU1FUklDX1RBQkxFLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIF8uQUxQSEFOVU1FUklDX1RBQkxFW2NvZGVdO1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH07XG5cblxuICAvKipcbiAgICogQ2hvb3NlIHRoZSBiZXN0IG1vZGUgYnkgZXhhbWluaW5nIHRoZSBjb250ZW50LiBOb3RlIHRoYXQgJ2VuY29kaW5nJyBpc1xuICAgKiB1c2VkIGFzIGEgaGludDtcbiAgICogaWYgaXQgaXMgU2hpZnRfSklTLCBhbmQgdGhlIGlucHV0IGlzIG9ubHkgZG91YmxlLWJ5dGUgS2FuamksIHRoZW4gd2VcbiAgICogcmV0dXJuIHtAbGluayBNb2RlI0tBTkpJfS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgdG8gZW5jb2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9lbmNvZGluZyBvcHRpb25hbCBlbmNvZGluZy4uXG4gICAqL1xuICBfLmNob29zZU1vZGUgPSBmdW5jdGlvbihjb250ZW50LCBvcHRfZW5jb2RpbmcpIHtcbiAgICBpZiAoJ1NISUZUX0pJUycgPT0gb3B0X2VuY29kaW5nKSB7XG4gICAgICAvLyBDaG9vc2UgS2FuamkgbW9kZSBpZiBhbGwgaW5wdXQgYXJlIGRvdWJsZS1ieXRlIGNoYXJhY3RlcnNcbiAgICAgIHJldHVybiBfLmlzT25seURvdWJsZUJ5dGVLYW5qaShjb250ZW50KSA/IE1vZGVFbnVtLktBTkpJIDogTW9kZUVudW0uQllURTtcbiAgICB9XG4gICAgdmFyIGhhc051bWVyaWMgPSBmYWxzZTtcbiAgICB2YXIgaGFzQWxwaGFudW1lcmljID0gZmFsc2U7XG4gICAgdmFyIHplcm9DaGFyID0gJzAnLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIG5pbmVDaGFyID0gJzknLmNoYXJDb2RlQXQoMCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZW50Lmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgYyA9IGNvbnRlbnQuY2hhckNvZGVBdChpKTtcbiAgICAgIGlmIChjID49IHplcm9DaGFyICYmIGMgPD0gbmluZUNoYXIpIHtcbiAgICAgICAgaGFzTnVtZXJpYyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKF8uZ2V0QWxwaGFudW1lcmljQ29kZShjKSAhPSAtMSkge1xuICAgICAgICBoYXNBbHBoYW51bWVyaWMgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1vZGVFbnVtLkJZVEU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChoYXNBbHBoYW51bWVyaWMpIHtcbiAgICAgIHJldHVybiBNb2RlRW51bS5BTFBIQU5VTUVSSUM7XG4gICAgfVxuICAgIGlmIChoYXNOdW1lcmljKSB7XG4gICAgICByZXR1cm4gTW9kZUVudW0uTlVNRVJJQztcbiAgICB9XG4gICAgcmV0dXJuIE1vZGVFbnVtLkJZVEU7XG4gIH07XG5cbiAgXy5pc09ubHlEb3VibGVCeXRlS2FuamkgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gICAgdmFyIGJ5dGVzID0gW107XG4gICAgdHJ5IHtcbiAgICAgIGJ5dGVzID0gc3RyaW5ndXRpbHMuc3RyaW5nVG9CeXRlcyhjb250ZW50LCAnU0hJRlRfSklTJyk7XG4gICAgfSBjYXRjaCAodWVlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBieXRlcy5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCAlIDIgIT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAyKSB7XG4gICAgICB2YXIgYnl0ZTEgPSBieXRlc1tpXSAmIDB4RkY7XG4gICAgICBpZiAoKGJ5dGUxIDwgMHg4MSB8fCBieXRlMSA+IDB4OUYpICYmIChieXRlMSA8IDB4RTAgfHwgYnl0ZTEgPiAweEVCKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIF8uY2hvb3NlTWFza1BhdHRlcm4gPSBmdW5jdGlvbihiaXRzLCBlY0xldmVsLCB2ZXJzaW9uLCBtYXRyaXgpIHtcblxuICAgIHZhciBtaW5QZW5hbHR5ID0gTnVtYmVyLk1BWF9WQUxVRTsgIC8vIExvd2VyIHBlbmFsdHkgaXMgYmV0dGVyLlxuICAgIHZhciBiZXN0TWFza1BhdHRlcm4gPSAtMTtcbiAgICAvLyBXZSB0cnkgYWxsIG1hc2sgcGF0dGVybnMgdG8gY2hvb3NlIHRoZSBiZXN0IG9uZS5cbiAgICBmb3IgKHZhciBtYXNrUGF0dGVybiA9IDA7IG1hc2tQYXR0ZXJuIDwgUVJDb2RlLk5VTV9NQVNLX1BBVFRFUk5TO1xuICAgICAgICAgbWFza1BhdHRlcm4rKykge1xuICAgICAgTWF0cml4VXRpbC5idWlsZE1hdHJpeChiaXRzLCBlY0xldmVsLCB2ZXJzaW9uLCBtYXNrUGF0dGVybiwgbWF0cml4KTtcbiAgICAgIHZhciBwZW5hbHR5ID0gXy5jYWxjdWxhdGVNYXNrUGVuYWx0eShtYXRyaXgpO1xuICAgICAgaWYgKHBlbmFsdHkgPCBtaW5QZW5hbHR5KSB7XG4gICAgICAgIG1pblBlbmFsdHkgPSBwZW5hbHR5O1xuICAgICAgICBiZXN0TWFza1BhdHRlcm4gPSBtYXNrUGF0dGVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJlc3RNYXNrUGF0dGVybjtcbiAgfTtcblxuICBfLmNob29zZVZlcnNpb24gPSBmdW5jdGlvbihudW1JbnB1dEJpdHMsIGVjTGV2ZWwpIHtcbiAgICAvLyBJbiB0aGUgZm9sbG93aW5nIGNvbW1lbnRzLCB3ZSB1c2UgbnVtYmVycyBvZiBWZXJzaW9uIDctSC5cbiAgICBmb3IgKHZhciB2ZXJzaW9uTnVtID0gMTsgdmVyc2lvbk51bSA8PSA0MDsgdmVyc2lvbk51bSsrKSB7XG4gICAgICB2YXIgdmVyc2lvbiA9IFZlcnNpb24uZ2V0VmVyc2lvbkZvck51bWJlcih2ZXJzaW9uTnVtKTtcbiAgICAgIC8vIG51bUJ5dGVzID0gMTk2XG4gICAgICB2YXIgbnVtQnl0ZXMgPSB2ZXJzaW9uLmdldFRvdGFsQ29kZXdvcmRzKCk7XG4gICAgICAvLyBnZXROdW1FQ0J5dGVzID0gMTMwXG4gICAgICB2YXIgZWNCbG9ja3MgPSB2ZXJzaW9uLmdldEVDQmxvY2tzRm9yTGV2ZWwoZWNMZXZlbCk7XG4gICAgICB2YXIgbnVtRWNCeXRlcyA9IGVjQmxvY2tzLmdldFRvdGFsRUNDb2Rld29yZHMoKTtcbiAgICAgIC8vIGdldE51bURhdGFCeXRlcyA9IDE5NiAtIDEzMCA9IDY2XG4gICAgICB2YXIgbnVtRGF0YUJ5dGVzID0gbnVtQnl0ZXMgLSBudW1FY0J5dGVzO1xuICAgICAgdmFyIHRvdGFsSW5wdXRCeXRlcyA9IE1hdGguZmxvb3IoKG51bUlucHV0Qml0cyArIDcpIC8gOCk7XG4gICAgICBpZiAobnVtRGF0YUJ5dGVzID49IHRvdGFsSW5wdXRCeXRlcykge1xuICAgICAgICByZXR1cm4gdmVyc2lvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IFdyaXRlckVycm9yKCdEYXRhIHRvbyBiaWcnKTtcbiAgfTtcblxuICAvKipcbiAgICogVGVybWluYXRlIGJpdHMgYXMgZGVzY3JpYmVkIGluIDguNC44IGFuZCA4LjQuOSBvZiBKSVNYMDUxMDoyMDA0IChwLjI0KS5cbiAgICovXG4gIF8udGVybWluYXRlQml0cyA9IGZ1bmN0aW9uKG51bURhdGFCeXRlcywgYml0cykge1xuICAgIHZhciBpO1xuICAgIHZhciBjYXBhY2l0eSA9IG51bURhdGFCeXRlcyA8PCAzO1xuICAgIGlmIChiaXRzLmdldFNpemUoKSA+IGNhcGFjaXR5KSB7XG4gICAgICB0aHJvdyBuZXcgV3JpdGVyRXJyb3IoJ2RhdGEgYml0cyBjYW5ub3QgZml0IGluIHRoZSBRUiBDb2RlJyArXG4gICAgICAgIGJpdHMuZ2V0U2l6ZSgpICsgJyA+ICcgKyBjYXBhY2l0eSk7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCA0ICYmIGJpdHMuZ2V0U2l6ZSgpIDwgY2FwYWNpdHk7ICsraSkge1xuICAgICAgYml0cy5hcHBlbmRCaXQoZmFsc2UpO1xuICAgIH1cbiAgICAvLyBBcHBlbmQgdGVybWluYXRpb24gYml0cy4gU2VlIDguNC44IG9mIEpJU1gwNTEwOjIwMDQgKHAuMjQpIGZvciBkZXRhaWxzLlxuICAgIC8vIElmIHRoZSBsYXN0IGJ5dGUgaXNuJ3QgOC1iaXQgYWxpZ25lZCwgd2UnbGwgYWRkIHBhZGRpbmcgYml0cy5cbiAgICB2YXIgbnVtQml0c0luTGFzdEJ5dGUgPSBiaXRzLmdldFNpemUoKSAmIDB4MDc7XG4gICAgaWYgKG51bUJpdHNJbkxhc3RCeXRlID4gMCkge1xuICAgICAgZm9yIChpID0gbnVtQml0c0luTGFzdEJ5dGU7IGkgPCA4OyBpKyspIHtcbiAgICAgICAgYml0cy5hcHBlbmRCaXQoZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBJZiB3ZSBoYXZlIG1vcmUgc3BhY2UsIHdlJ2xsIGZpbGwgdGhlIHNwYWNlIHdpdGggcGFkZGluZyBwYXR0ZXJuc1xuICAgIC8vIGRlZmluZWQgaW4gOC40LjkgKHAuMjQpLlxuICAgIHZhciBudW1QYWRkaW5nQnl0ZXMgPSBudW1EYXRhQnl0ZXMgLSBiaXRzLmdldFNpemVJbkJ5dGVzKCk7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bVBhZGRpbmdCeXRlczsgKytpKSB7XG4gICAgICBiaXRzLmFwcGVuZEJpdHMoKGkgJiAweDAxKSA9PSAwID8gMHhFQyA6IDB4MTEsIDgpO1xuICAgIH1cbiAgICBpZiAoYml0cy5nZXRTaXplKCkgIT0gY2FwYWNpdHkpIHtcbiAgICAgIHRocm93IG5ldyBXcml0ZXJFcnJvcignQml0cyBzaXplIGRvZXMgbm90IGVxdWFsIGNhcGFjaXR5Jyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKiBHZXQgbnVtYmVyIG9mIGRhdGEgYnl0ZXMgYW5kIG51bWJlciBvZiBlcnJvciBjb3JyZWN0aW9uIGJ5dGVzIGZvciBibG9ja1xuICAgKiBpZCBcImJsb2NrSURcIi4gU3RvcmUgdGhlIHJlc3VsdCBpbiBcIm51bURhdGFCeXRlc0luQmxvY2tcIiwgYW5kXG4gICAqIFwibnVtRUNCeXRlc0luQmxvY2tcIi4gU2VlIHRhYmxlIDEyIGluIDguNS4xIG9mIEpJU1gwNTEwOjIwMDQgKHAuMzApXG4gICAqL1xuICBfLmdldE51bURhdGFCeXRlc0FuZE51bUVDQnl0ZXNGb3JCbG9ja0lEID0gZnVuY3Rpb24obnVtVG90YWxCeXRlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bURhdGFCeXRlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVJTQmxvY2tzLCBibG9ja0lELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtRGF0YUJ5dGVzSW5CbG9jayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bUVDQnl0ZXNJbkJsb2NrKSB7XG4gICAgaWYgKGJsb2NrSUQgPj0gbnVtUlNCbG9ja3MpIHtcbiAgICAgIHRocm93IG5ldyBXcml0ZXJFcnJvcignQmxvY2sgSUQgdG9vIGxhcmdlJyk7XG4gICAgfVxuICAgIC8vIG51bVJzQmxvY2tzSW5Hcm91cDIgPSAxOTYgJSA1ID0gMVxuICAgIHZhciBudW1Sc0Jsb2Nrc0luR3JvdXAyID0gbnVtVG90YWxCeXRlcyAlIG51bVJTQmxvY2tzO1xuICAgIC8vIG51bVJzQmxvY2tzSW5Hcm91cDEgPSA1IC0gMSA9IDRcbiAgICB2YXIgbnVtUnNCbG9ja3NJbkdyb3VwMSA9IG51bVJTQmxvY2tzIC0gbnVtUnNCbG9ja3NJbkdyb3VwMjtcbiAgICAvLyBudW1Ub3RhbEJ5dGVzSW5Hcm91cDEgPSAxOTYgLyA1ID0gMzlcbiAgICB2YXIgbnVtVG90YWxCeXRlc0luR3JvdXAxID0gTWF0aC5mbG9vcihudW1Ub3RhbEJ5dGVzIC8gbnVtUlNCbG9ja3MpO1xuICAgIC8vIG51bVRvdGFsQnl0ZXNJbkdyb3VwMiA9IDM5ICsgMSA9IDQwXG4gICAgdmFyIG51bVRvdGFsQnl0ZXNJbkdyb3VwMiA9IG51bVRvdGFsQnl0ZXNJbkdyb3VwMSArIDE7XG4gICAgLy8gbnVtRGF0YUJ5dGVzSW5Hcm91cDEgPSA2NiAvIDUgPSAxM1xuICAgIHZhciBudW1EYXRhQnl0ZXNJbkdyb3VwMSA9IE1hdGguZmxvb3IobnVtRGF0YUJ5dGVzIC8gbnVtUlNCbG9ja3MpO1xuICAgIC8vIG51bURhdGFCeXRlc0luR3JvdXAyID0gMTMgKyAxID0gMTRcbiAgICB2YXIgbnVtRGF0YUJ5dGVzSW5Hcm91cDIgPSBudW1EYXRhQnl0ZXNJbkdyb3VwMSArIDE7XG4gICAgLy8gbnVtRWNCeXRlc0luR3JvdXAxID0gMzkgLSAxMyA9IDI2XG4gICAgdmFyIG51bUVjQnl0ZXNJbkdyb3VwMSA9IG51bVRvdGFsQnl0ZXNJbkdyb3VwMSAtIG51bURhdGFCeXRlc0luR3JvdXAxO1xuICAgIC8vIG51bUVjQnl0ZXNJbkdyb3VwMiA9IDQwIC0gMTQgPSAyNlxuICAgIHZhciBudW1FY0J5dGVzSW5Hcm91cDIgPSBudW1Ub3RhbEJ5dGVzSW5Hcm91cDIgLSBudW1EYXRhQnl0ZXNJbkdyb3VwMjtcbiAgICAvLyBTYW5pdHkgY2hlY2tzLlxuICAgIC8vIDI2ID0gMjZcbiAgICBpZiAobnVtRWNCeXRlc0luR3JvdXAxICE9IG51bUVjQnl0ZXNJbkdyb3VwMikge1xuICAgICAgdGhyb3cgbmV3IFdyaXRlckVycm9yKCdFQyBieXRlcyBtaXNtYXRjaCcpO1xuICAgIH1cbiAgICAvLyA1ID0gNCArIDEuXG4gICAgaWYgKG51bVJTQmxvY2tzICE9IG51bVJzQmxvY2tzSW5Hcm91cDEgKyBudW1Sc0Jsb2Nrc0luR3JvdXAyKSB7XG4gICAgICB0aHJvdyBuZXcgV3JpdGVyRXJyb3IoJ1JTIGJsb2NrcyBtaXNtYXRjaCcpO1xuICAgIH1cbiAgICAvLyAxOTYgPSAoMTMgKyAyNikgKiA0ICsgKDE0ICsgMjYpICogMVxuICAgIGlmIChudW1Ub3RhbEJ5dGVzICE9XG4gICAgICAoKG51bURhdGFCeXRlc0luR3JvdXAxICsgbnVtRWNCeXRlc0luR3JvdXAxKSAqXG4gICAgICAgIG51bVJzQmxvY2tzSW5Hcm91cDEpICtcbiAgICAgICAgKChudW1EYXRhQnl0ZXNJbkdyb3VwMiArIG51bUVjQnl0ZXNJbkdyb3VwMikgKlxuICAgICAgICAgIG51bVJzQmxvY2tzSW5Hcm91cDIpKSB7XG4gICAgICB0aHJvdyBuZXcgV3JpdGVyRXJyb3IoJ1RvdGFsIGJ5dGVzIG1pc21hdGNoJyk7XG4gICAgfVxuXG4gICAgaWYgKGJsb2NrSUQgPCBudW1Sc0Jsb2Nrc0luR3JvdXAxKSB7XG4gICAgICBudW1EYXRhQnl0ZXNJbkJsb2NrWzBdID0gbnVtRGF0YUJ5dGVzSW5Hcm91cDE7XG4gICAgICBudW1FQ0J5dGVzSW5CbG9ja1swXSA9IG51bUVjQnl0ZXNJbkdyb3VwMTtcbiAgICB9IGVsc2Uge1xuICAgICAgbnVtRGF0YUJ5dGVzSW5CbG9ja1swXSA9IG51bURhdGFCeXRlc0luR3JvdXAyO1xuICAgICAgbnVtRUNCeXRlc0luQmxvY2tbMF0gPSBudW1FY0J5dGVzSW5Hcm91cDI7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBJbnRlcmxlYXZlIFwiYml0c1wiIHdpdGggY29ycmVzcG9uZGluZyBlcnJvciBjb3JyZWN0aW9uIGJ5dGVzLiBPbiBzdWNjZXNzLFxuICAgKiBzdG9yZSB0aGUgcmVzdWx0IGluIFwicmVzdWx0XCIuIFRoZSBpbnRlcmxlYXZlIHJ1bGUgaXMgY29tcGxpY2F0ZWQuIFNlZSA4LjZcbiAgICogb2YgSklTWDA1MTA6MjAwNCAocC4zNykgZm9yIGRldGFpbHMuXG4gICAqL1xuICBfLmludGVybGVhdmVXaXRoRUNCeXRlcyA9IGZ1bmN0aW9uKGJpdHMsIG51bVRvdGFsQnl0ZXMsIG51bURhdGFCeXRlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1SU0Jsb2Nrcykge1xuXG4gICAgLy8gXCJiaXRzXCIgbXVzdCBoYXZlIFwiZ2V0TnVtRGF0YUJ5dGVzXCIgYnl0ZXMgb2YgZGF0YS5cbiAgICBpZiAoYml0cy5nZXRTaXplSW5CeXRlcygpICE9IG51bURhdGFCeXRlcykge1xuICAgICAgdGhyb3cgbmV3IFdyaXRlckVycm9yKCdOdW1iZXIgb2YgYml0cyBhbmQgZGF0YSBieXRlcyBkb2VzIG5vdCBtYXRjaCcpO1xuICAgIH1cblxuICAgIC8vIFN0ZXAgMS4gIERpdmlkZSBkYXRhIGJ5dGVzIGludG8gYmxvY2tzIGFuZCBnZW5lcmF0ZSBlcnJvciBjb3JyZWN0aW9uXG4gICAgLy8gYnl0ZXMgZm9yIHRoZW0uIFdlJ2xsIHN0b3JlIHRoZSBkaXZpZGVkIGRhdGEgYnl0ZXMgYmxvY2tzIGFuZCBlcnJvclxuICAgIC8vIGNvcnJlY3Rpb24gYnl0ZXMgYmxvY2tzIGludG8gXCJibG9ja3NcIi5cbiAgICB2YXIgZGF0YUJ5dGVzT2Zmc2V0ID0gMDtcbiAgICB2YXIgbWF4TnVtRGF0YUJ5dGVzID0gMDtcbiAgICB2YXIgbWF4TnVtRWNCeXRlcyA9IDA7XG5cbiAgICAvLyBTaW5jZSwgd2Uga25vdyB0aGUgbnVtYmVyIG9mIHJlZWRzb2xtb24gYmxvY2tzLCB3ZSBjYW4gaW5pdGlhbGl6ZSB0aGVcbiAgICAvLyB2ZWN0b3Igd2l0aCB0aGUgbnVtYmVyLlxuICAgIHZhciBibG9ja3MgPSBbXTtcbiAgICB2YXIgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBudW1SU0Jsb2NrczsgKytpKSB7XG4gICAgICB2YXIgbnVtRGF0YUJ5dGVzSW5CbG9jayA9IFswXTtcbiAgICAgIHZhciBudW1FY0J5dGVzSW5CbG9jayA9IFswXTtcbiAgICAgIF8uZ2V0TnVtRGF0YUJ5dGVzQW5kTnVtRUNCeXRlc0ZvckJsb2NrSUQoXG4gICAgICAgIG51bVRvdGFsQnl0ZXMsIG51bURhdGFCeXRlcywgbnVtUlNCbG9ja3MsIGksXG4gICAgICAgIG51bURhdGFCeXRlc0luQmxvY2ssIG51bUVjQnl0ZXNJbkJsb2NrKTtcblxuICAgICAgdmFyIHNpemUgPSBudW1EYXRhQnl0ZXNJbkJsb2NrWzBdO1xuICAgICAgdmFyIGRhdGFCeXRlcyA9IG5ldyBBcnJheShzaXplKTtcbiAgICAgIGJpdHMudG9CeXRlcyg4ICogZGF0YUJ5dGVzT2Zmc2V0LCBkYXRhQnl0ZXMsIDAsIHNpemUpO1xuICAgICAgdmFyIGVjQnl0ZXMgPSBfLmdlbmVyYXRlRUNCeXRlcyhkYXRhQnl0ZXMsIG51bUVjQnl0ZXNJbkJsb2NrWzBdKTtcbiAgICAgIGJsb2Nrcy5wdXNoKG5ldyBCbG9ja1BhaXIoZGF0YUJ5dGVzLCBlY0J5dGVzKSk7XG5cbiAgICAgIG1heE51bURhdGFCeXRlcyA9IE1hdGgubWF4KG1heE51bURhdGFCeXRlcywgc2l6ZSk7XG4gICAgICBtYXhOdW1FY0J5dGVzID0gTWF0aC5tYXgobWF4TnVtRWNCeXRlcywgZWNCeXRlcy5sZW5ndGgpO1xuICAgICAgZGF0YUJ5dGVzT2Zmc2V0ICs9IG51bURhdGFCeXRlc0luQmxvY2tbMF07XG4gICAgfVxuICAgIGlmIChudW1EYXRhQnl0ZXMgIT0gZGF0YUJ5dGVzT2Zmc2V0KSB7XG4gICAgICB0aHJvdyBuZXcgV3JpdGVyRXJyb3IoJ0RhdGEgYnl0ZXMgZG9lcyBub3QgbWF0Y2ggb2Zmc2V0Jyk7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBCaXRBcnJheSgpO1xuXG4gICAgLy8gRmlyc3QsIHBsYWNlIGRhdGEgYmxvY2tzLlxuICAgIGZvciAoaSA9IDA7IGkgPCBtYXhOdW1EYXRhQnl0ZXM7ICsraSkge1xuICAgICAgYmxvY2tzLmZvckVhY2goZnVuY3Rpb24oYmxvY2spIHtcbiAgICAgICAgdmFyIGRhdGFCeXRlcyA9IGJsb2NrLmdldERhdGFCeXRlcygpO1xuICAgICAgICBpZiAoaSA8IGRhdGFCeXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHQuYXBwZW5kQml0cyhkYXRhQnl0ZXNbaV0sIDgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gVGhlbiwgcGxhY2UgZXJyb3IgY29ycmVjdGlvbiBibG9ja3MuXG4gICAgZm9yIChpID0gMDsgaSA8IG1heE51bUVjQnl0ZXM7ICsraSkge1xuICAgICAgYmxvY2tzLmZvckVhY2goZnVuY3Rpb24oYmxvY2spIHtcbiAgICAgICAgdmFyIGVjQnl0ZXMgPSBibG9jay5nZXRFcnJvckNvcnJlY3Rpb25CeXRlcygpO1xuICAgICAgICBpZiAoaSA8IGVjQnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0LmFwcGVuZEJpdHMoZWNCeXRlc1tpXSwgOCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobnVtVG90YWxCeXRlcyAhPSByZXN1bHQuZ2V0U2l6ZUluQnl0ZXMoKSkgeyAgLy8gU2hvdWxkIGJlIHNhbWUuXG4gICAgICB0aHJvdyBuZXcgV3JpdGVyRXJyb3IoJ0ludGVybGVhdmluZyBlcnJvcjogJyArIG51bVRvdGFsQnl0ZXMgK1xuICAgICAgICAnIGFuZCAnICsgcmVzdWx0LmdldFNpemVJbkJ5dGVzKCkgKyAnIGRpZmZlci4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBkYXRhQnl0ZXMgYnl0ZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1FY0J5dGVzSW5CbG9jayBudW0uXG4gICAqIEByZXR1cm4ge0FycmF5LjxudW1iZXI+fSBieXRlcy5cbiAgICovXG4gIF8uZ2VuZXJhdGVFQ0J5dGVzID0gZnVuY3Rpb24oZGF0YUJ5dGVzLCBudW1FY0J5dGVzSW5CbG9jaykge1xuICAgIHZhciBudW1EYXRhQnl0ZXMgPSBkYXRhQnl0ZXMubGVuZ3RoO1xuICAgIHZhciB0b0VuY29kZSA9IG5ldyBBcnJheShudW1EYXRhQnl0ZXMgKyBudW1FY0J5dGVzSW5CbG9jayk7XG4gICAgdmFyIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bURhdGFCeXRlczsgaSsrKSB7XG4gICAgICB0b0VuY29kZVtpXSA9IGRhdGFCeXRlc1tpXSAmIDB4RkY7XG4gICAgfVxuICAgIG5ldyBSZWVkU29sb21vbkVuY29kZXIodzY5Yi5xci5HRjI1Ni5RUl9DT0RFX0ZJRUxEKS5lbmNvZGUodG9FbmNvZGUsXG4gICAgICBudW1FY0J5dGVzSW5CbG9jayk7XG5cbiAgICB2YXIgZWNCeXRlcyA9IG5ldyBBcnJheShudW1FY0J5dGVzSW5CbG9jayk7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bUVjQnl0ZXNJbkJsb2NrOyBpKyspIHtcbiAgICAgIGVjQnl0ZXNbaV0gPSB0b0VuY29kZVtudW1EYXRhQnl0ZXMgKyBpXTtcbiAgICB9XG4gICAgcmV0dXJuIGVjQnl0ZXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFwcGVuZCBtb2RlIGluZm8uIE9uIHN1Y2Nlc3MsIHN0b3JlIHRoZSByZXN1bHQgaW4gXCJiaXRzXCIuXG4gICAqL1xuICBfLmFwcGVuZE1vZGVJbmZvID0gZnVuY3Rpb24obW9kZSwgYml0cykge1xuICAgIGJpdHMuYXBwZW5kQml0cyhtb2RlLmdldEJpdHMoKSwgNCk7XG4gIH07XG5cblxuICAvKipcbiAgICogQXBwZW5kIGxlbmd0aCBpbmZvLiBPbiBzdWNjZXNzLCBzdG9yZSB0aGUgcmVzdWx0IGluIFwiYml0c1wiLlxuICAgKi9cbiAgXy5hcHBlbmRMZW5ndGhJbmZvID0gZnVuY3Rpb24obnVtTGV0dGVycywgdmVyc2lvbiwgbW9kZSwgYml0cykge1xuICAgIHZhciBudW1CaXRzID0gbW9kZS5nZXRDaGFyYWN0ZXJDb3VudEJpdHModmVyc2lvbik7XG4gICAgaWYgKG51bUxldHRlcnMgPj0gKDEgPDwgbnVtQml0cykpIHtcbiAgICAgIHRocm93IG5ldyBXcml0ZXJFcnJvcihudW1MZXR0ZXJzICsgJyBpcyBiaWdnZXIgdGhhbiAnICtcbiAgICAgICAgKCgxIDw8IG51bUJpdHMpIC0gMSkpO1xuICAgIH1cbiAgICBiaXRzLmFwcGVuZEJpdHMobnVtTGV0dGVycywgbnVtQml0cyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFwcGVuZCBcImJ5dGVzXCIgaW4gXCJtb2RlXCIgbW9kZSAoZW5jb2RpbmcpIGludG8gXCJiaXRzXCIuXG4gICAqIE9uIHN1Y2Nlc3MsIHN0b3JlIHRoZSByZXN1bHQgaW4gXCJiaXRzXCIuXG4gICAqL1xuICBfLmFwcGVuZEJ5dGVzID0gZnVuY3Rpb24oY29udGVudCwgbW9kZSwgYml0cywgZW5jb2RpbmcpIHtcbiAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgIGNhc2UgTW9kZUVudW0uTlVNRVJJQzpcbiAgICAgICAgXy5hcHBlbmROdW1lcmljQnl0ZXMoY29udGVudCwgYml0cyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBNb2RlRW51bS5BTFBIQU5VTUVSSUM6XG4gICAgICAgIF8uYXBwZW5kQWxwaGFudW1lcmljQnl0ZXMoY29udGVudCwgYml0cyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBNb2RlRW51bS5CWVRFOlxuICAgICAgICBfLmFwcGVuZDhCaXRCeXRlcyhjb250ZW50LCBiaXRzLCBlbmNvZGluZyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBNb2RlRW51bS5LQU5KSTpcbiAgICAgICAgXy5hcHBlbmRLYW5qaUJ5dGVzKGNvbnRlbnQsIGJpdHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBXcml0ZXJFcnJvcignSW52YWxpZCBtb2RlOiAnICsgbW9kZSk7XG4gICAgfVxuICB9O1xuXG4gIF8uYXBwZW5kTnVtZXJpY0J5dGVzID0gZnVuY3Rpb24oY29udGVudCwgYml0cykge1xuICAgIHZhciBsZW5ndGggPSBjb250ZW50Lmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIG51bTI7XG4gICAgdmFyIGNvZGVaZXJvID0gJzAnLmNoYXJDb2RlQXQoMCk7XG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgIHZhciBudW0xID0gY29udGVudC5jaGFyQ29kZUF0KGkpIC0gY29kZVplcm87XG4gICAgICBpZiAoaSArIDIgPCBsZW5ndGgpIHtcbiAgICAgICAgLy8gRW5jb2RlIHRocmVlIG51bWVyaWMgbGV0dGVycyBpbiB0ZW4gYml0cy5cbiAgICAgICAgbnVtMiA9IGNvbnRlbnQuY2hhckNvZGVBdChpICsgMSkgLSBjb2RlWmVybztcbiAgICAgICAgdmFyIG51bTMgPSBjb250ZW50LmNoYXJDb2RlQXQoaSArIDIpIC0gY29kZVplcm87XG4gICAgICAgIGJpdHMuYXBwZW5kQml0cyhudW0xICogMTAwICsgbnVtMiAqIDEwICsgbnVtMywgMTApO1xuICAgICAgICBpICs9IDM7XG4gICAgICB9IGVsc2UgaWYgKGkgKyAxIDwgbGVuZ3RoKSB7XG4gICAgICAgIC8vIEVuY29kZSB0d28gbnVtZXJpYyBsZXR0ZXJzIGluIHNldmVuIGJpdHMuXG4gICAgICAgIG51bTIgPSBjb250ZW50LmNoYXJDb2RlQXQoaSArIDEpIC0gY29kZVplcm87XG4gICAgICAgIGJpdHMuYXBwZW5kQml0cyhudW0xICogMTAgKyBudW0yLCA3KTtcbiAgICAgICAgaSArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRW5jb2RlIG9uZSBudW1lcmljIGxldHRlciBpbiBmb3VyIGJpdHMuXG4gICAgICAgIGJpdHMuYXBwZW5kQml0cyhudW0xLCA0KTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfLmFwcGVuZEFscGhhbnVtZXJpY0J5dGVzID0gZnVuY3Rpb24oY29udGVudCwgYml0cykge1xuICAgIHZhciBsZW5ndGggPSBjb250ZW50Lmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgIHZhciBjb2RlMSA9IF8uZ2V0QWxwaGFudW1lcmljQ29kZShjb250ZW50LmNoYXJDb2RlQXQoaSkpO1xuICAgICAgaWYgKGNvZGUxID09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBXcml0ZXJFcnJvcigpO1xuICAgICAgfVxuICAgICAgaWYgKGkgKyAxIDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBjb2RlMiA9IF8uZ2V0QWxwaGFudW1lcmljQ29kZShjb250ZW50LmNoYXJDb2RlQXQoaSArIDEpKTtcbiAgICAgICAgaWYgKGNvZGUyID09IC0xKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFdyaXRlckVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5jb2RlIHR3byBhbHBoYW51bWVyaWMgbGV0dGVycyBpbiAxMSBiaXRzLlxuICAgICAgICBiaXRzLmFwcGVuZEJpdHMoY29kZTEgKiA0NSArIGNvZGUyLCAxMSk7XG4gICAgICAgIGkgKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEVuY29kZSBvbmUgYWxwaGFudW1lcmljIGxldHRlciBpbiBzaXggYml0cy5cbiAgICAgICAgYml0cy5hcHBlbmRCaXRzKGNvZGUxLCA2KTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfLmFwcGVuZDhCaXRCeXRlcyA9IGZ1bmN0aW9uKGNvbnRlbnQsIGJpdHMsIGVuY29kaW5nKSB7XG4gICAgdmFyIGJ5dGVzO1xuICAgIHRyeSB7XG4gICAgICBieXRlcyA9IHN0cmluZ3V0aWxzLnN0cmluZ1RvQnl0ZXMoY29udGVudCwgZW5jb2RpbmcpO1xuICAgIH0gY2F0Y2ggKHVlZSkge1xuICAgICAgdGhyb3cgbmV3IFdyaXRlckVycm9yKHVlZSk7XG4gICAgfVxuICAgIGJ5dGVzLmZvckVhY2goZnVuY3Rpb24oYikge1xuICAgICAgYml0cy5hcHBlbmRCaXRzKGIsIDgpO1xuICAgIH0pO1xuICB9O1xuXG4gIF8uYXBwZW5kS2FuamlCeXRlcyA9IGZ1bmN0aW9uKGNvbnRlbnQsIGJpdHMpIHtcbiAgICB2YXIgYnl0ZXM7XG4gICAgdHJ5IHtcbiAgICAgIGJ5dGVzID0gc3RyaW5ndXRpbHMuc3RyaW5nVG9CeXRlcyhjb250ZW50LCAnU2hpZnRfSklTJyk7XG4gICAgfSBjYXRjaCAodWVlKSB7XG4gICAgICB0aHJvdyBuZXcgV3JpdGVyRXJyb3IodWVlKTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IGJ5dGVzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAyKSB7XG4gICAgICB2YXIgYnl0ZTEgPSBieXRlc1tpXSAmIDB4RkY7XG4gICAgICB2YXIgYnl0ZTIgPSBieXRlc1tpICsgMV0gJiAweEZGO1xuICAgICAgdmFyIGNvZGUgPSAoYnl0ZTEgPDwgOCkgfCBieXRlMjtcbiAgICAgIHZhciBzdWJ0cmFjdGVkID0gLTE7XG4gICAgICBpZiAoY29kZSA+PSAweDgxNDAgJiYgY29kZSA8PSAweDlmZmMpIHtcbiAgICAgICAgc3VidHJhY3RlZCA9IGNvZGUgLSAweDgxNDA7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUgPj0gMHhlMDQwICYmIGNvZGUgPD0gMHhlYmJmKSB7XG4gICAgICAgIHN1YnRyYWN0ZWQgPSBjb2RlIC0gMHhjMTQwO1xuICAgICAgfVxuICAgICAgaWYgKHN1YnRyYWN0ZWQgPT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IFdyaXRlckVycm9yKCdJbnZhbGlkIGJ5dGUgc2VxdWVuY2UnKTtcbiAgICAgIH1cbiAgICAgIHZhciBlbmNvZGVkID0gKChzdWJ0cmFjdGVkID4+IDgpICogMHhjMCkgKyAoc3VidHJhY3RlZCAmIDB4ZmYpO1xuICAgICAgYml0cy5hcHBlbmRCaXRzKGVuY29kZWQsIDEzKTtcbiAgICB9XG4gIH07XG5cbiAgXy5hcHBlbmRFQ0kgPSBmdW5jdGlvbihlY2ksIGJpdHMpIHtcbiAgICBiaXRzLmFwcGVuZEJpdHMoTW9kZUVudW0uRUNJLmdldEJpdHMoKSwgNCk7XG4gICAgLy8gVGhpcyBpcyBjb3JyZWN0IGZvciB2YWx1ZXMgdXAgdG8gMTI3LCB3aGljaCBpcyBhbGwgd2UgbmVlZCBub3cuXG4gICAgYml0cy5hcHBlbmRCaXRzKGVjaSwgOCk7XG4gIH07XG5cbn0pO1xuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiAqIENvcHlyaWdodCAyMDA5IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuQmluYXJpemVyJyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBoaWVyYXJjaHkgcHJvdmlkZXMgYSBzZXQgb2YgbWV0aG9kcyB0byBjb252ZXJ0IGx1bWluYW5jZSBkYXRhIHRvXG4gKiAxIGJpdCBkYXRhLiAgSXQgYWxsb3dzIHRoZSBhbGdvcml0aG0gdG8gdmFyeSBwb2x5bW9ycGhpY2FsbHksIGZvciBleGFtcGxlXG4gKiBhbGxvd2luZyBhIHZlcnkgZXhwZW5zaXZlIHRocmVzaG9sZGluZyB0ZWNobmlxdWUgZm9yIHNlcnZlcnMgYW5kIGEgZmFzdCBvbmVcbiAqIGZvciBtb2JpbGUuIEl0IGFsc28gcGVybWl0cyB0aGUgaW1wbGVtZW50YXRpb24gdG8gdmFyeSwgZS5nLiBhIEpOSSB2ZXJzaW9uXG4gKiBmb3IgQW5kcm9pZCBhbmQgYSBKYXZhIGZhbGxiYWNrIHZlcnNpb24gZm9yIG90aGVyIHBsYXRmb3Jtcy5cbiAqXG4gKiBAYXV0aG9yIGRzd2l0a2luQGdvb2dsZS5jb20gKERhbmllbCBTd2l0a2luKVxuICogUG9ydGVkIHRvIGpzIGJ5IE1hbnVlbCBCcmF1blxuICpcbiAqICBAcGFyYW0ge3c2OWIucXIuUVJJbWFnZX0gc291cmNlIGdyYXkgdmFsdWVzIC5cbiAqICBAY29uc3RydWN0b3JcbiAqL1xudzY5Yi5xci5CaW5hcml6ZXIgPSBmdW5jdGlvbihzb3VyY2UpIHtcbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQHR5cGUge3c2OWIucXIuUVJJbWFnZX1cbiAgICovXG4gIHRoaXMuc291cmNlID0gc291cmNlO1xufTtcbiAgdmFyIEJpbmFyaXplciA9IHc2OWIucXIuQmluYXJpemVyO1xuICB2YXIgcHJvID0gQmluYXJpemVyLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQHJldHVybiB7dzY5Yi5xci5RUkltYWdlfSBpbWFnZS5cbiAgICovXG4gIHByby5nZXRMdW1pbmFuY2VTb3VyY2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIG9uZSByb3cgb2YgbHVtaW5hbmNlIGRhdGEgdG8gMSBiaXQgZGF0YS4gTWF5IGFjdHVhbGx5IGRvIHRoZVxuICAgKiBjb252ZXJzaW9uLCBvciByZXR1cm4gY2FjaGVkIGRhdGEuIENhbGxlcnMgc2hvdWxkIGFzc3VtZSB0aGlzIG1ldGhvZCBpc1xuICAgKiBleHBlbnNpdmUgYW5kIGNhbGwgaXQgYXMgc2VsZG9tIGFzIHBvc3NpYmxlLiAgVGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgZm9yXG4gICAqIGRlY29kaW5nIDFEIGJhcmNvZGVzIGFuZCBtYXkgY2hvb3NlIHRvIGFwcGx5IHNoYXJwZW5pbmcuICBGb3IgY2FsbGVyc1xuICAgKiB3aGljaCBvbmx5IGV4YW1pbmUgb25lIHJvdyBvZiBwaXhlbHMgYXQgYSB0aW1lLCB0aGUgc2FtZSBCaXRBcnJheSBzaG91bGRcbiAgICogYmUgcmV1c2VkIGFuZCBwYXNzZWQgaW4gd2l0aCBlYWNoIGNhbGwgZm9yIHBlcmZvcm1hbmNlLiBIb3dldmVyIGl0IGlzXG4gICAqIGxlZ2FsIHRvIGtlZXAgbW9yZSB0aGFuIG9uZSByb3cgYXQgYSB0aW1lIGlmIG5lZWRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIHJvdyB0byBmZXRjaCwgMCA8PSB5IDwgYml0bWFwIGhlaWdodC5cbiAgICogQHBhcmFtIHt3NjliLnFyLkJpdEFycmF5fSBvcHRfcm93IEFuIG9wdGlvbmFsIHByZWFsbG9jYXRlZCBhcnJheS4gSWYgbnVsbFxuICAgKiBvciB0b28gc21hbGwsIGl0IHdpbGwgYmUgaWdub3JlZC4gIElmIHVzZWQsIHRoZSBCaW5hcml6ZXIgd2lsbCBjYWxsXG4gICAqIEJpdEFycmF5LmNsZWFyKCkuIEFsd2F5cyB1c2UgdGhlIHJldHVybmVkIG9iamVjdC5cbiAgICogQHJldHVybiB7IXc2OWIucXIuQml0QXJyYXl9IFRoZSBhcnJheSBvZiBiaXRzIGZvciB0aGlzIHJvdyAodHJ1ZSBtZWFuc1xuICAgKiBibGFjaykuXG4gICAqL1xuICBwcm8uZ2V0QmxhY2tSb3cgPSBmdW5jdGlvbih5LCBvcHRfcm93KSB7IHRocm93IEVycm9yKCk7IH07XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgMkQgYXJyYXkgb2YgbHVtaW5hbmNlIGRhdGEgdG8gMSBiaXQgZGF0YS4gQXMgYWJvdmUsIGFzc3VtZSB0aGlzXG4gICAqIG1ldGhvZCBpcyBleHBlbnNpdmUgYW5kIGRvIG5vdCBjYWxsIGl0IHJlcGVhdGVkbHkuIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkXG4gICAqIGZvciBkZWNvZGluZyAyRCBiYXJjb2RlcyBhbmQgbWF5IG9yIG1heSBub3QgYXBwbHkgc2hhcnBlbmluZy4gVGhlcmVmb3JlLCBhXG4gICAqIHJvdyBmcm9tIHRoaXMgbWF0cml4IG1heSBub3QgYmUgaWRlbnRpY2FsIHRvIG9uZSBmZXRjaGVkIHVzaW5nXG4gICAqIGdldEJsYWNrUm93KCksIHNvIGRvbid0IG1peCBhbmQgbWF0Y2ggYmV0d2VlbiB0aGVtLlxuICAgKlxuICAgKiBAcmV0dXJuIHshdzY5Yi5xci5CaXRNYXRyaXh9IFRoZSAyRCBhcnJheSBvZiBiaXRzIGZvciB0aGUgaW1hZ2VcbiAgICogKHRydWUgbWVhbnMgYmxhY2spLlxuICAgKi9cbiAgcHJvLmdldEJsYWNrTWF0cml4ID0gZnVuY3Rpb24oKSB7IHRocm93IEVycm9yKCk7IH07XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgdHlwZSBhcyB0aGlzIEJpbmFyaXplciBpbXBsZW1lbnRhdGlvbixcbiAgICogYnV0IHdpdGggcHJpc3RpbmUgc3RhdGUuIFRoaXMgaXMgbmVlZGVkIGJlY2F1c2UgQmluYXJpemVyIGltcGxlbWVudGF0aW9uc1xuICAgKiBtYXkgYmUgc3RhdGVmdWwsIGUuZy4ga2VlcGluZyBhIGNhY2hlIG9mIDEgYml0IGRhdGEuIFNlZSBFZmZlY3RpdmUgSmF2YVxuICAgKiBmb3Igd2h5IHdlIGNhbid0IHVzZSBKYXZhJ3MgY2xvbmUoKSBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7dzY5Yi5xci5RUkltYWdlfSBzb3VyY2UgVGhlIEx1bWluYW5jZVNvdXJjZSB0aGlzIEJpbmFyaXplclxuICAgKiB3aWxsIG9wZXJhdGUgb24uXG4gICAqIEByZXR1cm4ge3c2OWIucXIuQmluYXJpemVyfSBBIG5ldyBjb25jcmV0ZSBCaW5hcml6ZXIgaW1wbGVtZW50YXRpb25cbiAgICogb2JqZWN0LlxuICAgKi9cbiAgcHJvLmNyZWF0ZUJpbmFyaXplciA9IGZ1bmN0aW9uKHNvdXJjZSkgeyB0aHJvdyBFcnJvcigpOyB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHdpZHRoLlxuICAgKi9cbiAgcHJvLmdldFdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlLndpZHRoO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGhlaWdodC5cbiAgICovXG4gIHByby5nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2UuaGVpZ2h0O1xuICB9O1xuXG59KTtcblxuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiAqIENvcHlyaWdodCAyMDA5IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5xci5HbG9iYWxIaXN0b2dyYW1CaW5hcml6ZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5CaW5hcml6ZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5CaXRBcnJheScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkJpdE1hdHJpeCcpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLk5vdEZvdW5kRXJyb3InKTtcblxuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICB2YXIgQml0TWF0cml4ID0gdzY5Yi5xci5CaXRNYXRyaXg7XG4gIHZhciBCaXRBcnJheSA9IHc2OWIucXIuQml0QXJyYXk7XG4gICAvKipcbiAgICogVGhpcyBCaW5hcml6ZXIgaW1wbGVtZW50YXRpb24gdXNlcyB0aGUgb2xkIFpYaW5nIGdsb2JhbCBoaXN0b2dyYW1cbiAgICogYXBwcm9hY2guIEl0IGlzIHN1aXRhYmxlIGZvciBsb3ctZW5kIG1vYmlsZSBkZXZpY2VzIHdoaWNoIGRvbid0IGhhdmVcbiAgICogZW5vdWdoIENQVSBvciBtZW1vcnkgdG8gdXNlIGEgbG9jYWwgdGhyZXNob2xkaW5nIGFsZ29yaXRobS4gSG93ZXZlcixcbiAgICogYmVjYXVzZSBpdCBwaWNrcyBhIGdsb2JhbCBibGFjayBwb2ludCwgaXQgY2Fubm90IGhhbmRsZSBkaWZmaWN1bHQgc2hhZG93c1xuICAgKiBhbmQgZ3JhZGllbnRzLlxuICAgKlxuICAgKiBGYXN0ZXIgbW9iaWxlIGRldmljZXMgYW5kIGFsbCBkZXNrdG9wIGFwcGxpY2F0aW9ucyBzaG91bGQgcHJvYmFibHkgdXNlXG4gICAqIEh5YnJpZEJpbmFyaXplciBpbnN0ZWFkLlxuICAgKlxuICAgKiBAYXV0aG9yIGRzd2l0a2luQGdvb2dsZS5jb20gKERhbmllbCBTd2l0a2luKVxuICAgKiBAYXV0aG9yIFNlYW4gT3dlblxuICAgKiBQb3J0ZWQgdG8ganMgYnkgTWFudWVsIEJyYXVuXG4gICAqXG4gICAgKiBAcGFyYW0ge3c2OWIucXIuUVJJbWFnZX0gc291cmNlIGdyYXkgdmFsdWVzLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMge3c2OWIucXIuQmluYXJpemVyfVxuICAgKi9cbiAgdzY5Yi5xci5HbG9iYWxIaXN0b2dyYW1CaW5hcml6ZXIgPSBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICBnb29nLmJhc2UodGhpcywgc291cmNlKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7VWludDhBcnJheX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMubHVtaW5hbmNlc18gPSBuZXcgVWludDhBcnJheSgwKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7VWludDhBcnJheX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuYnVja2V0c18gPSBuZXcgVWludDhBcnJheShfLkxVTUlOQU5DRV9CVUNLRVRTKTtcbiAgfTtcbiAgdmFyIF8gPSB3NjliLnFyLkdsb2JhbEhpc3RvZ3JhbUJpbmFyaXplcjtcbiAgZ29vZy5pbmhlcml0cyhfLCB3NjliLnFyLkJpbmFyaXplcik7XG4gIHZhciBwcm8gPSBfLnByb3RvdHlwZTtcblxuXG4gIF8uTFVNSU5BTkNFX0JJVFMgPSA1O1xuICBfLkxVTUlOQU5DRV9TSElGVCA9IDggLSBfLkxVTUlOQU5DRV9CSVRTO1xuICBfLkxVTUlOQU5DRV9CVUNLRVRTID0gMSA8PCBfLkxVTUlOQU5DRV9CSVRTO1xuXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgc2ltcGxlIHNoYXJwZW5pbmcgdG8gdGhlIHJvdyBkYXRhIHRvIGltcHJvdmUgcGVyZm9ybWFuY2Ugb2YgdGhlIDFEXG4gICAqIFJlYWRlcnMuXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgICBwcm8uZ2V0QmxhY2tSb3cgPSBmdW5jdGlvbih5LCByb3cpIHtcbiAgICAgIHZhciB4O1xuICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuZ2V0THVtaW5hbmNlU291cmNlKCk7XG4gICAgICB2YXIgd2lkdGggPSBzb3VyY2UuZ2V0V2lkdGgoKTtcbiAgICAgIGlmIChyb3cgPT0gbnVsbCB8fCByb3cuZ2V0U2l6ZSgpIDwgd2lkdGgpIHtcbiAgICAgICAgcm93ID0gbmV3IEJpdEFycmF5KHdpZHRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvdy5jbGVhcigpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluaXRBcnJheXMod2lkdGgpO1xuICAgICAgdmFyIGxvY2FsTHVtaW5hbmNlcyA9IHNvdXJjZS5nZXRSb3coeSwgdGhpcy5sdW1pbmFuY2VzXyk7XG4gICAgICB2YXIgbG9jYWxCdWNrZXRzID0gdGhpcy5idWNrZXRzXztcbiAgICAgIGZvciAoeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgIHZhciBwaXhlbCA9IGxvY2FsTHVtaW5hbmNlc1t4XSAmIDB4ZmY7XG4gICAgICAgIGxvY2FsQnVja2V0c1twaXhlbCA+PiBfLkxVTUlOQU5DRV9TSElGVF0rKztcbiAgICAgIH1cbiAgICAgIHZhciBibGFja1BvaW50ID0gXy5lc3RpbWF0ZUJsYWNrUG9pbnQobG9jYWxCdWNrZXRzKTtcblxuICAgICAgdmFyIGxlZnQgPSBsb2NhbEx1bWluYW5jZXNbMF0gJiAweGZmO1xuICAgICAgdmFyIGNlbnRlciA9IGxvY2FsTHVtaW5hbmNlc1sxXSAmIDB4ZmY7XG4gICAgICBmb3IgKHggPSAxOyB4IDwgd2lkdGggLSAxOyB4KyspIHtcbiAgICAgICAgdmFyIHJpZ2h0ID0gbG9jYWxMdW1pbmFuY2VzW3ggKyAxXSAmIDB4ZmY7XG4gICAgICAgIC8vIEEgc2ltcGxlIC0xIDQgLTEgYm94IGZpbHRlciB3aXRoIGEgd2VpZ2h0IG9mIDIuXG4gICAgICAgIHZhciBsdW1pbmFuY2UgPSAoKGNlbnRlciA8PCAyKSAtIGxlZnQgLSByaWdodCkgPj4gMTtcbiAgICAgICAgaWYgKGx1bWluYW5jZSA8IGJsYWNrUG9pbnQpIHtcbiAgICAgICAgICByb3cuc2V0KHgpO1xuICAgICAgICB9XG4gICAgICAgIGxlZnQgPSBjZW50ZXI7XG4gICAgICAgIGNlbnRlciA9IHJpZ2h0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJvdztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRG9lcyBub3Qgc2hhcnBlbiB0aGUgZGF0YSwgYXMgdGhpcyBjYWxsIGlzIGludGVuZGVkIHRvIG9ubHkgYmUgdXNlZCBieVxuICAgICAqIDJEIFJlYWRlcnMuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgcHJvLmdldEJsYWNrTWF0cml4ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0gdGhpcy5nZXRMdW1pbmFuY2VTb3VyY2UoKTtcbiAgICAgIHZhciB3aWR0aCA9IHNvdXJjZS5nZXRXaWR0aCgpO1xuICAgICAgdmFyIGhlaWdodCA9IHNvdXJjZS5nZXRIZWlnaHQoKTtcbiAgICAgIHZhciBtYXRyaXggPSBuZXcgQml0TWF0cml4KHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAvLyBuYXN0eSBqcyBzY29wZXMuXG4gICAgICB2YXIgbG9jYWxMdW1pbmFuY2VzLCBwaXhlbCwgeCwgeTtcbiAgICAgIC8vIFF1aWNrbHkgY2FsY3VsYXRlcyB0aGUgaGlzdG9ncmFtIGJ5IHNhbXBsaW5nIGZvdXIgcm93cyBmcm9tIHRoZSBpbWFnZS5cbiAgICAgIC8vIFRoaXMgcHJvdmVkIHRvIGJlIG1vcmUgcm9idXN0IG9uIHRoZSBibGFja2JveCB0ZXN0cyB0aGFuIHNhbXBsaW5nIGFcbiAgICAgIC8vIGRpYWdvbmFsIGFzIHdlIHVzZWQgdG8gZG8uXG4gICAgICB0aGlzLmluaXRBcnJheXMod2lkdGgpO1xuICAgICAgdmFyIGxvY2FsQnVja2V0cyA9IHRoaXMuYnVja2V0c187XG4gICAgICBmb3IgKHkgPSAxOyB5IDwgNTsgeSsrKSB7XG4gICAgICAgIHZhciByb3cgPSBoZWlnaHQgKiB5IC8gNTtcbiAgICAgICAgbG9jYWxMdW1pbmFuY2VzID0gc291cmNlLmdldFJvdyhyb3csIHRoaXMubHVtaW5hbmNlc18pO1xuICAgICAgICB2YXIgcmlnaHQgPSAod2lkdGggPDwgMikgLyA1O1xuICAgICAgICBmb3IgKHggPSB3aWR0aCAvIDU7IHggPCByaWdodDsgeCsrKSB7XG4gICAgICAgICAgcGl4ZWwgPSBsb2NhbEx1bWluYW5jZXNbeF0gJiAweGZmO1xuICAgICAgICAgIGxvY2FsQnVja2V0c1twaXhlbCA+PiBfLkxVTUlOQU5DRV9TSElGVF0rKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGJsYWNrUG9pbnQgPSBfLmVzdGltYXRlQmxhY2tQb2ludChsb2NhbEJ1Y2tldHMpO1xuXG4gICAgICAvLyBXZSBkZWxheSByZWFkaW5nIHRoZSBlbnRpcmUgaW1hZ2UgbHVtaW5hbmNlIHVudGlsIHRoZSBibGFjayBwb2ludFxuICAgICAgLy8gZXN0aW1hdGlvbiBzdWNjZWVkcy4gIEFsdGhvdWdoIHdlIGVuZCB1cCByZWFkaW5nIGZvdXIgcm93cyB0d2ljZSwgaXRcbiAgICAgIC8vIGlzIGNvbnNpc3RlbnQgd2l0aCBvdXIgbW90dG8gb2YgXCJmYWlsIHF1aWNrbHlcIiB3aGljaCBpcyBuZWNlc3NhcnkgZm9yXG4gICAgICAvLyBjb250aW51b3VzIHNjYW5uaW5nLlxuICAgICAgbG9jYWxMdW1pbmFuY2VzID0gc291cmNlLmdldE1hdHJpeCgpO1xuICAgICAgZm9yICh5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB5ICogd2lkdGg7XG4gICAgICAgIGZvciAoeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgICAgcGl4ZWwgPSBsb2NhbEx1bWluYW5jZXNbb2Zmc2V0ICsgeF0gJiAweGZmO1xuICAgICAgICAgIGlmIChwaXhlbCA8IGJsYWNrUG9pbnQpIHtcbiAgICAgICAgICAgIG1hdHJpeC5zZXQoeCwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfTtcblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICAgIHByby5jcmVhdGVCaW5hcml6ZXIgPSBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgIHJldHVybiBuZXcgXyhzb3VyY2UpO1xuICAgIH07XG5cbiAgICBwcm8uaW5pdEFycmF5cyA9IGZ1bmN0aW9uKGx1bWluYW5jZVNpemUpIHtcbiAgICAgIGlmICh0aGlzLmx1bWluYW5jZXNfLmxlbmd0aCA8IGx1bWluYW5jZVNpemUpIHtcbiAgICAgICAgdGhpcy5sdW1pbmFuY2VzXyA9IG5ldyBVaW50OEFycmF5KGx1bWluYW5jZVNpemUpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBfLkxVTUlOQU5DRV9CVUNLRVRTOyB4KyspIHtcbiAgICAgICAgdGhpcy5idWNrZXRzX1t4XSA9IDA7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF8uZXN0aW1hdGVCbGFja1BvaW50ID0gZnVuY3Rpb24oYnVja2V0cykge1xuICAgICAgdmFyIHgsIHNjb3JlO1xuICAgICAgLy8gRmluZCB0aGUgdGFsbGVzdCBwZWFrIGluIHRoZSBoaXN0b2dyYW0uXG4gICAgICB2YXIgbnVtQnVja2V0cyA9IGJ1Y2tldHMubGVuZ3RoO1xuICAgICAgdmFyIG1heEJ1Y2tldENvdW50ID0gMDtcbiAgICAgIHZhciBmaXJzdFBlYWsgPSAwO1xuICAgICAgdmFyIGZpcnN0UGVha1NpemUgPSAwO1xuICAgICAgZm9yICh4ID0gMDsgeCA8IG51bUJ1Y2tldHM7IHgrKykge1xuICAgICAgICBpZiAoYnVja2V0c1t4XSA+IGZpcnN0UGVha1NpemUpIHtcbiAgICAgICAgICBmaXJzdFBlYWsgPSB4O1xuICAgICAgICAgIGZpcnN0UGVha1NpemUgPSBidWNrZXRzW3hdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChidWNrZXRzW3hdID4gbWF4QnVja2V0Q291bnQpIHtcbiAgICAgICAgICBtYXhCdWNrZXRDb3VudCA9IGJ1Y2tldHNbeF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRmluZCB0aGUgc2Vjb25kLXRhbGxlc3QgcGVhayB3aGljaCBpcyBzb21ld2hhdCBmYXIgZnJvbSB0aGUgdGFsbGVzdFxuICAgICAgLy8gcGVhay5cbiAgICAgIHZhciBzZWNvbmRQZWFrID0gMDtcbiAgICAgIHZhciBzZWNvbmRQZWFrU2NvcmUgPSAwO1xuICAgICAgZm9yICh4ID0gMDsgeCA8IG51bUJ1Y2tldHM7IHgrKykge1xuICAgICAgICB2YXIgZGlzdGFuY2VUb0JpZ2dlc3QgPSB4IC0gZmlyc3RQZWFrO1xuICAgICAgICAvLyBFbmNvdXJhZ2UgbW9yZSBkaXN0YW50IHNlY29uZCBwZWFrcyBieSBtdWx0aXBseWluZyBieSBzcXVhcmUgb2ZcbiAgICAgICAgLy8gZGlzdGFuY2UuXG4gICAgICAgIHNjb3JlID0gYnVja2V0c1t4XSAqIGRpc3RhbmNlVG9CaWdnZXN0ICogZGlzdGFuY2VUb0JpZ2dlc3Q7XG4gICAgICAgIGlmIChzY29yZSA+IHNlY29uZFBlYWtTY29yZSkge1xuICAgICAgICAgIHNlY29uZFBlYWsgPSB4O1xuICAgICAgICAgIHNlY29uZFBlYWtTY29yZSA9IHNjb3JlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE1ha2Ugc3VyZSBmaXJzdFBlYWsgY29ycmVzcG9uZHMgdG8gdGhlIGJsYWNrIHBlYWsuXG4gICAgICBpZiAoZmlyc3RQZWFrID4gc2Vjb25kUGVhaykge1xuICAgICAgICB2YXIgdGVtcCA9IGZpcnN0UGVhaztcbiAgICAgICAgZmlyc3RQZWFrID0gc2Vjb25kUGVhaztcbiAgICAgICAgc2Vjb25kUGVhayA9IHRlbXA7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZXJlIGlzIHRvbyBsaXR0bGUgY29udHJhc3QgaW4gdGhlIGltYWdlIHRvIHBpY2sgYSBtZWFuaW5nZnVsXG4gICAgICAvLyBibGFjayBwb2ludCwgdGhyb3cgcmF0aGVyIHRoYW4gd2FzdGUgdGltZSB0cnlpbmcgdG8gZGVjb2RlIHRoZSBpbWFnZSxcbiAgICAgIC8vIGFuZCByaXNrIGZhbHNlIHBvc2l0aXZlcy5cbiAgICAgIGlmIChzZWNvbmRQZWFrIC0gZmlyc3RQZWFrIDw9IG51bUJ1Y2tldHMgPj4gNCkge1xuICAgICAgICB0aHJvdyBuZXcgdzY5Yi5xci5Ob3RGb3VuZEVycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgYSB2YWxsZXkgYmV0d2VlbiB0aGVtIHRoYXQgaXMgbG93IGFuZCBjbG9zZXIgdG8gdGhlIHdoaXRlIHBlYWsuXG4gICAgICB2YXIgYmVzdFZhbGxleSA9IHNlY29uZFBlYWsgLSAxO1xuICAgICAgdmFyIGJlc3RWYWxsZXlTY29yZSA9IC0xO1xuICAgICAgZm9yICh4ID0gc2Vjb25kUGVhayAtIDE7IHggPiBmaXJzdFBlYWs7IHgtLSkge1xuICAgICAgICB2YXIgZnJvbUZpcnN0ID0geCAtIGZpcnN0UGVhaztcbiAgICAgICAgc2NvcmUgPSBmcm9tRmlyc3QgKiBmcm9tRmlyc3QgKiAoc2Vjb25kUGVhayAtIHgpICpcbiAgICAgICAgICAobWF4QnVja2V0Q291bnQgLSBidWNrZXRzW3hdKTtcbiAgICAgICAgaWYgKHNjb3JlID4gYmVzdFZhbGxleVNjb3JlKSB7XG4gICAgICAgICAgYmVzdFZhbGxleSA9IHg7XG4gICAgICAgICAgYmVzdFZhbGxleVNjb3JlID0gc2NvcmU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJlc3RWYWxsZXkgPDwgXy5MVU1JTkFOQ0VfU0hJRlQ7XG4gICAgfTtcbn0pO1xuXG4iLCIvLyBqYXZhc2NyaXB0IChjbG9zdXJlKSBwb3J0IChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuSW50QXJyYXkyRCcpO1xuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgcHJlLWFsbG9jYXRlZCByb3ctZmlyc3QgMmQgaW50ZWdlciBhcnJheS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHNpemUxIHNpemUgb2YgZmlyc3QgZGltZW5zaW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZTIgc2l6ZSBvZnNlY29uZCBkaW1lbnNpb24uXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgdzY5Yi5xci5JbnRBcnJheTJEID0gZnVuY3Rpb24oc2l6ZTEsIHNpemUyKSB7XG4gICAgdGhpcy5zaXplMSA9IHNpemUxO1xuICAgIHRoaXMuc2l6ZTIgPSBzaXplMjtcbiAgICB0aGlzLmRhdGEgPSBuZXcgSW50MzJBcnJheShzaXplMSAqIHNpemUyKTtcbiAgfTtcbiAgdmFyIHBybyA9IHc2OWIucXIuSW50QXJyYXkyRC5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEdldCB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGRpbTEgZmlyc3QgZGltZW5zaW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZGltMiBzZWNvbmQgZGltZW5zaW9uLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHZhbHVlIGF0IGdpdmVuIHBvc2l0aW9uLlxuICAgKi9cbiAgcHJvLmdldEF0ID0gZnVuY3Rpb24oZGltMSwgZGltMikge1xuICAgIHJldHVybiB0aGlzLmRhdGFbdGhpcy5zaXplMiAqIGRpbTEgKyBkaW0yXTtcbiAgfTtcbiAgLyoqXG4gICAqIFNldCB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGRpbTEgZmlyc3QgZGltZW5zaW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZGltMiBzZWNvbmQgZGltZW5zaW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgYXQgZ2l2ZW4gcG9zaXRpb24uXG4gICAqL1xuICBwcm8uc2V0QXQgPSBmdW5jdGlvbihkaW0xLCBkaW0yLCB2YWx1ZSkge1xuICAgIHRoaXMuZGF0YVt0aGlzLnNpemUyICogZGltMSArIGRpbTJdID0gdmFsdWU7XG4gIH07XG59KTtcbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbi8qXG4gKiBDb3B5cmlnaHQgMjAwOSBaWGluZyBhdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuSHlicmlkQmluYXJpemVyJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuQml0QXJyYXknKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5CaXRNYXRyaXgnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5HbG9iYWxIaXN0b2dyYW1CaW5hcml6ZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5JbnRBcnJheTJEJyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIHZhciBCaXRNYXRyaXggPSB3NjliLnFyLkJpdE1hdHJpeDtcbiAgdmFyIEludEFycmF5MkQgPSB3NjliLnFyLkludEFycmF5MkQ7XG4gIC8qKlxuICAgKiBUaGlzIGNsYXNzIGltcGxlbWVudHMgYSBsb2NhbCB0aHJlc2hvbGRpbmcgYWxnb3JpdGhtLCB3aGljaCB3aGlsZSBzbG93ZXJcbiAgICogdGhhbiB0aGUgR2xvYmFsSGlzdG9ncmFtQmluYXJpemVyLCBpcyBmYWlybHkgZWZmaWNpZW50IGZvciB3aGF0IGl0IGRvZXMuXG4gICAqIEl0IGlzIGRlc2lnbmVkIGZvciBoaWdoIGZyZXF1ZW5jeSBpbWFnZXMgb2YgYmFyY29kZXMgd2l0aCBibGFjayBkYXRhIG9uXG4gICAqIHdoaXRlIGJhY2tncm91bmRzLiBGb3IgdGhpcyBhcHBsaWNhdGlvbiwgaXQgZG9lcyBhIG11Y2ggYmV0dGVyIGpvYiB0aGFuIGFcbiAgICogZ2xvYmFsIGJsYWNrcG9pbnQgd2l0aCBzZXZlcmUgc2hhZG93cyBhbmQgZ3JhZGllbnRzLiAgSG93ZXZlciBpdCB0ZW5kcyB0b1xuICAgKiBwcm9kdWNlIGFydGlmYWN0cyBvbiBsb3dlciBmcmVxdWVuY3kgaW1hZ2VzIGFuZCBpcyB0aGVyZWZvcmUgbm90IGEgZ29vZFxuICAgKiBnZW5lcmFsIHB1cnBvc2UgYmluYXJpemVyIGZvciB1c2VzIG91dHNpZGUgWlhpbmcuXG4gICAqXG4gICAqIFRoaXMgY2xhc3MgZXh0ZW5kcyBHbG9iYWxIaXN0b2dyYW1CaW5hcml6ZXIsIHVzaW5nIHRoZSBvbGRlciBoaXN0b2dyYW1cbiAgICogYXBwcm9hY2ggZm9yIDFEIHJlYWRlcnMsIGFuZCB0aGUgbmV3ZXIgbG9jYWwgYXBwcm9hY2ggZm9yIDJEIHJlYWRlcnMuIDFEXG4gICAqIGRlY29kaW5nIHVzaW5nIGEgcGVyLXJvdyBoaXN0b2dyYW0gaXMgYWxyZWFkeSBpbmhlcmVudGx5IGxvY2FsLCBhbmQgb25seVxuICAgKiBmYWlscyBmb3IgaG9yaXpvbnRhbCBncmFkaWVudHMuIFdlIGNhbiByZXZpc2l0IHRoYXQgcHJvYmxlbSBsYXRlciwgYnV0IGZvclxuICAgKiBub3cgaXQgd2FzIG5vdCBhIHdpbiB0byB1c2UgbG9jYWwgYmxvY2tzIGZvciAxRC5cbiAgICpcbiAgICogVGhpcyBCaW5hcml6ZXIgaXMgdGhlIGRlZmF1bHQgZm9yIHRoZSB1bml0IHRlc3RzIGFuZCB0aGUgcmVjb21tZW5kZWQgY2xhc3NcbiAgICogZm9yIGxpYnJhcnkgdXNlcnMuXG4gICAqXG4gICAqIEBhdXRob3IgZHN3aXRraW5AZ29vZ2xlLmNvbSAoRGFuaWVsIFN3aXRraW4pXG4gICAqIHBvcnRlZCB0byBqcyBieSBNYW51ZWwgQnJhdW5cbiAgICpcbiAgICogQHBhcmFtIHt3NjliLnFyLlFSSW1hZ2V9IHNvdXJjZSBncmF5IHZhbHVlcy5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIHt3NjliLnFyLkdsb2JhbEhpc3RvZ3JhbUJpbmFyaXplcn1cbiAgICovXG4gIHc2OWIucXIuSHlicmlkQmluYXJpemVyID0gZnVuY3Rpb24oc291cmNlKSB7XG4gICAgZ29vZy5iYXNlKHRoaXMsIHNvdXJjZSk7XG4gIH07XG4gIGdvb2cuaW5oZXJpdHModzY5Yi5xci5IeWJyaWRCaW5hcml6ZXIsIHc2OWIucXIuR2xvYmFsSGlzdG9ncmFtQmluYXJpemVyKTtcbiAgdmFyIF8gPSB3NjliLnFyLkh5YnJpZEJpbmFyaXplcjtcbiAgdmFyIHBybyA9IF8ucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7Qml0TWF0cml4fVxuICAgKi9cbiAgcHJvLm1hdHJpeF87XG5cbiAgLy8gVGhpcyBjbGFzcyB1c2VzIDV4NSBibG9ja3MgdG8gY29tcHV0ZSBsb2NhbCBsdW1pbmFuY2UsIHdoZXJlIGVhY2ggYmxvY2sgaXNcbiAgLy8gOHg4IHBpeGVscy4gIFNvIHRoaXMgaXMgdGhlIHNtYWxsZXN0IGRpbWVuc2lvbiBpbiBlYWNoIGF4aXMgd2UgY2FuIGFjY2VwdC5cbiAgXy5CTE9DS19TSVpFX1BPV0VSID0gMztcbiAgXy5CTE9DS19TSVpFID0gMSA8PCBfLkJMT0NLX1NJWkVfUE9XRVI7IC8vIC4uLjAxMDAuLi4wMFxuICBfLkJMT0NLX1NJWkVfTUFTSyA9IF8uQkxPQ0tfU0laRSAtIDE7ICAgLy8gLi4uMDAxMS4uLjExXG4gIF8uTUlOSU1VTV9ESU1FTlNJT04gPSBfLkJMT0NLX1NJWkUgKiA1O1xuICBfLk1JTl9EWU5BTUlDX1JBTkdFID0gMjQ7XG5cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgZmluYWwgQml0TWF0cml4IG9uY2UgZm9yIGFsbCByZXF1ZXN0cy4gVGhpcyBjb3VsZCBiZSBjYWxsZWRcbiAgICogb25jZSBmcm9tIHRoZSBjb25zdHJ1Y3RvciBpbnN0ZWFkLCBidXQgdGhlcmUgYXJlIHNvbWUgYWR2YW50YWdlcyB0byBkb2luZ1xuICAgKiBpdCBsYXppbHksIHN1Y2ggYXMgbWFraW5nIHByb2ZpbGluZyBlYXNpZXIsIGFuZCBub3QgZG9pbmcgaGVhdnkgbGlmdGluZ1xuICAgKiB3aGVuIGNhbGxlcnMgZG9uJ3QgZXhwZWN0IGl0LlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByby5nZXRCbGFja01hdHJpeCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLm1hdHJpeF8gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMubWF0cml4XztcbiAgICB9XG4gICAgdmFyIHNvdXJjZSA9IHRoaXMuZ2V0THVtaW5hbmNlU291cmNlKCk7XG4gICAgdmFyIHdpZHRoID0gc291cmNlLmdldFdpZHRoKCk7XG4gICAgdmFyIGhlaWdodCA9IHNvdXJjZS5nZXRIZWlnaHQoKTtcbiAgICBpZiAod2lkdGggPj0gXy5NSU5JTVVNX0RJTUVOU0lPTiAmJiBoZWlnaHQgPj0gXy5NSU5JTVVNX0RJTUVOU0lPTikge1xuICAgICAgdmFyIGx1bWluYW5jZXMgPSBzb3VyY2UuZ2V0TWF0cml4KCk7XG4gICAgICAvLyBkaXZlZCBieSA4XG4gICAgICB2YXIgc3ViV2lkdGggPSB3aWR0aCA+PiBfLkJMT0NLX1NJWkVfUE9XRVI7XG4gICAgICAvLyBvbmx5IGV2ZW4gbnVtYmVyc1xuICAgICAgaWYgKCh3aWR0aCAmIF8uQkxPQ0tfU0laRV9NQVNLKSAhPSAwKSB7XG4gICAgICAgIHN1YldpZHRoKys7XG4gICAgICB9XG4gICAgICB2YXIgc3ViSGVpZ2h0ID0gaGVpZ2h0ID4+IF8uQkxPQ0tfU0laRV9QT1dFUjtcbiAgICAgIGlmICgoaGVpZ2h0ICYgXy5CTE9DS19TSVpFX01BU0spICE9IDApIHtcbiAgICAgICAgc3ViSGVpZ2h0Kys7XG4gICAgICB9XG4gICAgICB2YXIgYmxhY2tQb2ludHMgPSBfLmNhbGN1bGF0ZUJsYWNrUG9pbnRzKGx1bWluYW5jZXMsIHN1YldpZHRoLFxuICAgICAgICBzdWJIZWlnaHQsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICB2YXIgbmV3TWF0cml4ID0gbmV3IEJpdE1hdHJpeCh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIF8uY2FsY3VsYXRlVGhyZXNob2xkRm9yQmxvY2sobHVtaW5hbmNlcywgc3ViV2lkdGgsIHN1YkhlaWdodCxcbiAgICAgICAgd2lkdGgsIGhlaWdodCwgYmxhY2tQb2ludHMsIG5ld01hdHJpeCk7XG4gICAgICB0aGlzLm1hdHJpeF8gPSBuZXdNYXRyaXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSBpbWFnZSBpcyB0b28gc21hbGwsIGZhbGwgYmFjayB0byB0aGUgZ2xvYmFsIGhpc3RvZ3JhbSBhcHByb2FjaC5cbiAgICAgIHRoaXMubWF0cml4XyA9IGdvb2cuYmFzZSh0aGlzLCAnZ2V0QmxhY2tNYXRyaXgnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubWF0cml4XztcbiAgfTtcblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm8uY3JlYXRlQmluYXJpemVyID0gZnVuY3Rpb24oc291cmNlKSB7XG4gICAgcmV0dXJuIG5ldyBfKHNvdXJjZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZvciBlYWNoIGJsb2NrIGluIHRoZSBpbWFnZSwgY2FsY3VsYXRlIHRoZSBhdmVyYWdlIGJsYWNrIHBvaW50IHVzaW5nIGEgNXg1XG4gICAqIGdyaWQgb2YgdGhlIGJsb2NrcyBhcm91bmQgaXQuIEFsc28gaGFuZGxlcyB0aGUgY29ybmVyIGNhc2VzIChmcmFjdGlvbmFsXG4gICAqIGJsb2NrcyBhcmUgY29tcHV0ZWQgYmFzZWQgb24gdGhlIGxhc3QgcGl4ZWxzIGluIHRoZSByb3cvY29sdW1uIHdoaWNoIGFyZVxuICAgKiBhbHNvIHVzZWQgaW4gdGhlIHByZXZpb3VzIGJsb2NrKS5cbiAgICovXG4gIF8uY2FsY3VsYXRlVGhyZXNob2xkRm9yQmxvY2sgPSBmdW5jdGlvbihsdW1pbmFuY2VzLCBzdWJXaWR0aCwgc3ViSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgYmxhY2tQb2ludHMsIG1hdHJpeCkge1xuICAgIGZvciAodmFyIHkgPSAwOyB5IDwgc3ViSGVpZ2h0OyB5KyspIHtcbiAgICAgIHZhciB5b2Zmc2V0ID0geSA8PCBfLkJMT0NLX1NJWkVfUE9XRVI7XG4gICAgICB2YXIgbWF4WU9mZnNldCA9IGhlaWdodCAtIF8uQkxPQ0tfU0laRTtcbiAgICAgIGlmICh5b2Zmc2V0ID4gbWF4WU9mZnNldCkge1xuICAgICAgICB5b2Zmc2V0ID0gbWF4WU9mZnNldDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgc3ViV2lkdGg7IHgrKykge1xuICAgICAgICB2YXIgeG9mZnNldCA9IHggPDwgXy5CTE9DS19TSVpFX1BPV0VSO1xuICAgICAgICB2YXIgbWF4WE9mZnNldCA9IHdpZHRoIC0gXy5CTE9DS19TSVpFO1xuICAgICAgICBpZiAoeG9mZnNldCA+IG1heFhPZmZzZXQpIHtcbiAgICAgICAgICB4b2Zmc2V0ID0gbWF4WE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVmdCA9IF8uY2FwKHgsIDIsIHN1YldpZHRoIC0gMyk7XG4gICAgICAgIHZhciB0b3AgPSBfLmNhcCh5LCAyLCBzdWJIZWlnaHQgLSAzKTtcbiAgICAgICAgdmFyIHN1bSA9IDA7XG4gICAgICAgIGZvciAodmFyIHogPSAtMjsgeiA8PSAyOyB6KyspIHtcbiAgICAgICAgICB2YXIgb2Zmc2V0ID0gKHRvcCArIHopICogYmxhY2tQb2ludHMuc2l6ZTI7XG4gICAgICAgICAgdmFyIHJhdyA9IGJsYWNrUG9pbnRzLmRhdGE7XG4gICAgICAgICAgc3VtICs9IHJhd1tvZmZzZXQgKyBsZWZ0IC0gMl0gKyByYXdbb2Zmc2V0ICsgbGVmdCAtIDFdICtcbiAgICAgICAgICAgIHJhd1tvZmZzZXQgKyBsZWZ0XSArIHJhd1tvZmZzZXQgKyBsZWZ0ICsgMV0gK1xuICAgICAgICAgICAgcmF3W29mZnNldCArIGxlZnQgKyAyXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXZlcmFnZSA9IHN1bSAvIDI1O1xuICAgICAgICBfLnRocmVzaG9sZEJsb2NrKGx1bWluYW5jZXMsIHhvZmZzZXQsIHlvZmZzZXQsIGF2ZXJhZ2UsIHdpZHRoLCBtYXRyaXgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWluIG1pbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heCBtYXguXG4gICAqIEByZXR1cm4ge251bWJlcn0gY2FwcGVkIHZhbHVlLlxuICAgKi9cbiAgXy5jYXAgPSBmdW5jdGlvbih2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPCBtaW4gPyBtaW4gOiB2YWx1ZSA+IG1heCA/IG1heCA6IHZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgc2luZ2xlIHRocmVzaG9sZCB0byBhIGJsb2NrIG9mIHBpeGVscy5cbiAgICovXG4gIF8udGhyZXNob2xkQmxvY2sgPSBmdW5jdGlvbihsdW1pbmFuY2VzLCB4b2Zmc2V0LCB5b2Zmc2V0LCB0aHJlc2hvbGQsIHN0cmlkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdHJpeCkge1xuICAgIGZvciAodmFyIHkgPSAwLCBvZmZzZXQgPSB5b2Zmc2V0ICogc3RyaWRlICsgeG9mZnNldDsgeSA8IF8uQkxPQ0tfU0laRTtcbiAgICAgICAgIHkrKywgb2Zmc2V0ICs9IHN0cmlkZSkge1xuICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBfLkJMT0NLX1NJWkU7IHgrKykge1xuICAgICAgICAvLyBDb21wYXJpc29uIG5lZWRzIHRvIGJlIDw9IHNvIHRoYXQgYmxhY2sgPT0gMCBwaXhlbHMgYXJlXG4gICAgICAgIC8vIGJsYWNrIGV2ZW4gaWYgdGhlIHRocmVzaG9sZCBpcyAwLlxuICAgICAgICBpZiAoKGx1bWluYW5jZXNbb2Zmc2V0ICsgeF0gJiAweEZGKSA8PSB0aHJlc2hvbGQpIHtcbiAgICAgICAgICBtYXRyaXguc2V0KHhvZmZzZXQgKyB4LCB5b2Zmc2V0ICsgeSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYSBzaW5nbGUgYmxhY2sgcG9pbnQgZm9yIGVhY2ggYmxvY2sgb2YgcGl4ZWxzIGFuZCBzYXZlcyBpdCBhd2F5LlxuICAgKiBTZWUgdGhlIGZvbGxvd2luZyB0aHJlYWQgZm9yIGEgZGlzY3Vzc2lvbiBvZiB0aGlzIGFsZ29yaXRobTpcbiAgICogIGh0dHA6Ly9ncm91cHMuZ29vZ2xlLmNvbS9ncm91cC96eGluZy9icm93c2VfdGhyZWFkL3RocmVhZC9kMDZlZmEyYzM1YTdkZGMwXG4gICAqL1xuICBfLmNhbGN1bGF0ZUJsYWNrUG9pbnRzID0gZnVuY3Rpb24obHVtaW5hbmNlcywgc3ViV2lkdGgsIHN1YkhlaWdodCwgd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQpIHtcbiAgICB2YXIgeHg7XG4gICAgdmFyIGJsYWNrUG9pbnRzID0gbmV3IEludEFycmF5MkQoc3ViSGVpZ2h0LCBzdWJXaWR0aCk7XG4gICAgZm9yICh2YXIgeSA9IDA7IHkgPCBzdWJIZWlnaHQ7IHkrKykge1xuICAgICAgdmFyIHlvZmZzZXQgPSB5IDw8IF8uQkxPQ0tfU0laRV9QT1dFUjtcbiAgICAgIHZhciBtYXhZT2Zmc2V0ID0gaGVpZ2h0IC0gXy5CTE9DS19TSVpFO1xuICAgICAgaWYgKHlvZmZzZXQgPiBtYXhZT2Zmc2V0KSB7XG4gICAgICAgIHlvZmZzZXQgPSBtYXhZT2Zmc2V0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBzdWJXaWR0aDsgeCsrKSB7XG4gICAgICAgIHZhciB4b2Zmc2V0ID0geCA8PCBfLkJMT0NLX1NJWkVfUE9XRVI7XG4gICAgICAgIHZhciBtYXhYT2Zmc2V0ID0gd2lkdGggLSBfLkJMT0NLX1NJWkU7XG4gICAgICAgIGlmICh4b2Zmc2V0ID4gbWF4WE9mZnNldCkge1xuICAgICAgICAgIHhvZmZzZXQgPSBtYXhYT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdW0gPSAwO1xuICAgICAgICB2YXIgbWluID0gMHhGRjtcbiAgICAgICAgdmFyIG1heCA9IDA7XG4gICAgICAgIGZvciAodmFyIHl5ID0gMCwgb2Zmc2V0ID0geW9mZnNldCAqIHdpZHRoICsgeG9mZnNldDtcbiAgICAgICAgICAgICB5eSA8IF8uQkxPQ0tfU0laRTsgeXkrKywgb2Zmc2V0ICs9IHdpZHRoKSB7XG4gICAgICAgICAgZm9yICh4eCA9IDA7IHh4IDwgXy5CTE9DS19TSVpFOyB4eCsrKSB7XG4gICAgICAgICAgICB2YXIgcGl4ZWwgPSBsdW1pbmFuY2VzW29mZnNldCArIHh4XSAmIDB4RkY7XG4gICAgICAgICAgICBzdW0gKz0gcGl4ZWw7XG4gICAgICAgICAgICAvLyBzdGlsbCBsb29raW5nIGZvciBnb29kIGNvbnRyYXN0XG4gICAgICAgICAgICBpZiAocGl4ZWwgPCBtaW4pIHtcbiAgICAgICAgICAgICAgbWluID0gcGl4ZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGl4ZWwgPiBtYXgpIHtcbiAgICAgICAgICAgICAgbWF4ID0gcGl4ZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHNob3J0LWNpcmN1aXQgbWluL21heCB0ZXN0cyBvbmNlIGR5bmFtaWMgcmFuZ2UgaXMgbWV0XG4gICAgICAgICAgaWYgKG1heCAtIG1pbiA+IF8uTUlOX0RZTkFNSUNfUkFOR0UpIHtcbiAgICAgICAgICAgIC8vIGZpbmlzaCB0aGUgcmVzdCBvZiB0aGUgcm93cyBxdWlja2x5XG4gICAgICAgICAgICBmb3IgKHl5KyssIG9mZnNldCArPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgeXkgPCBfLkJMT0NLX1NJWkU7IHl5KyssIG9mZnNldCArPSB3aWR0aCkge1xuICAgICAgICAgICAgICBmb3IgKHh4ID0gMDsgeHggPCBfLkJMT0NLX1NJWkU7IHh4KyspIHtcbiAgICAgICAgICAgICAgICBzdW0gKz0gbHVtaW5hbmNlc1tvZmZzZXQgKyB4eF0gJiAweEZGO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGRlZmF1bHQgZXN0aW1hdGUgaXMgdGhlIGF2ZXJhZ2Ugb2YgdGhlIHZhbHVlcyBpbiB0aGUgYmxvY2suXG4gICAgICAgIHZhciBhdmVyYWdlID0gc3VtID4+IChfLkJMT0NLX1NJWkVfUE9XRVIgKiAyKTtcbiAgICAgICAgaWYgKG1heCAtIG1pbiA8PSBfLk1JTl9EWU5BTUlDX1JBTkdFKSB7XG4gICAgICAgICAgLy8gSWYgdmFyaWF0aW9uIHdpdGhpbiB0aGUgYmxvY2sgaXMgbG93LCBhc3N1bWUgdGhpcyBpcyBhIGJsb2NrIHdpdGhcbiAgICAgICAgICAvLyBvbmx5IGxpZ2h0IG9yIG9ubHkgZGFyayBwaXhlbHMuIEluIHRoYXQgY2FzZSB3ZSBkbyBub3Qgd2FudCB0byB1c2VcbiAgICAgICAgICAvLyB0aGUgYXZlcmFnZSwgYXMgaXQgd291bGQgZGl2aWRlIHRoaXMgbG93IGNvbnRyYXN0IGFyZWEgaW50byBibGFja1xuICAgICAgICAgIC8vIGFuZCB3aGl0ZSBwaXhlbHMsIGVzc2VudGlhbGx5IGNyZWF0aW5nIGRhdGEgb3V0IG9mIG5vaXNlLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gVGhlIGRlZmF1bHQgYXNzdW1wdGlvbiBpcyB0aGF0IHRoZSBibG9jayBpcyBsaWdodC9iYWNrZ3JvdW5kLlxuICAgICAgICAgIC8vIFNpbmNlIG5vIGVzdGltYXRlIGZvciB0aGUgbGV2ZWwgb2YgZGFyayBwaXhlbHMgZXhpc3RzIGxvY2FsbHksIHVzZVxuICAgICAgICAgIC8vIGhhbGYgdGhlIG1pbiBmb3IgdGhlIGJsb2NrLlxuICAgICAgICAgIGF2ZXJhZ2UgPSBtaW4gPj4gMTtcblxuICAgICAgICAgIGlmICh5ID4gMCAmJiB4ID4gMCkge1xuICAgICAgICAgICAgLy8gQ29ycmVjdCB0aGUgXCJ3aGl0ZSBiYWNrZ3JvdW5kXCIgYXNzdW1wdGlvbiBmb3IgYmxvY2tzIHRoYXQgaGF2ZVxuICAgICAgICAgICAgLy8gbmVpZ2hib3JzIGJ5IGNvbXBhcmluZyB0aGUgcGl4ZWxzIGluIHRoaXMgYmxvY2sgdG8gdGhlXG4gICAgICAgICAgICAvLyBwcmV2aW91c2x5IGNhbGN1bGF0ZWQgYmxhY2sgcG9pbnRzLiBUaGlzIGlzIGJhc2VkIG9uIHRoZSBmYWN0XG4gICAgICAgICAgICAvLyB0aGF0IGRhcmsgYmFyY29kZSBzeW1ib2xvZ3kgaXMgYWx3YXlzIHN1cnJvdW5kZWQgYnkgc29tZSBhbW91bnRcbiAgICAgICAgICAgIC8vIG9mIGxpZ2h0IGJhY2tncm91bmQgZm9yIHdoaWNoIHJlYXNvbmFibGUgYmxhY2sgcG9pbnQgZXN0aW1hdGVzXG4gICAgICAgICAgICAvLyB3ZXJlIG1hZGUuIFRoZSBicCBlc3RpbWF0ZWQgYXQgdGhlIGJvdW5kYXJpZXMgaXMgdXNlZCBmb3IgdGhlXG4gICAgICAgICAgICAvLyBpbnRlcmlvci5cblxuICAgICAgICAgICAgLy8gVGhlIChtaW4gPCBicCkgaXMgYXJiaXRyYXJ5IGJ1dCB3b3JrcyBiZXR0ZXIgdGhhbiBvdGhlclxuICAgICAgICAgICAgLy8gaGV1cmlzdGljcyB0aGF0IHdlcmUgdHJpZWQuXG4gICAgICAgICAgICB2YXIgYXZlcmFnZU5laWdoYm9yQmxhY2tQb2ludCA9IChibGFja1BvaW50cy5nZXRBdCh5IC0gMSwgeCkgK1xuICAgICAgICAgICAgICAoMiAqIGJsYWNrUG9pbnRzLmdldEF0KHksIHggLSAxKSkgK1xuICAgICAgICAgICAgICBibGFja1BvaW50cy5nZXRBdCh5IC0gMSwgeCAtIDEpKSA+PiAyO1xuICAgICAgICAgICAgaWYgKG1pbiA8IGF2ZXJhZ2VOZWlnaGJvckJsYWNrUG9pbnQpIHtcbiAgICAgICAgICAgICAgYXZlcmFnZSA9IGF2ZXJhZ2VOZWlnaGJvckJsYWNrUG9pbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJsYWNrUG9pbnRzLnNldEF0KHksIHgsIGF2ZXJhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmxhY2tQb2ludHM7XG4gIH07XG59KTtcblxuIiwiLy8gKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcblxuZ29vZy5wcm92aWRlKCd3NjliLnFyLm5hdGl2ZXByZXByb2Nlc3NpbmcnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5IeWJyaWRCaW5hcml6ZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5RUkltYWdlJyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIHZhciBfID0gdzY5Yi5xci5uYXRpdmVwcmVwcm9jZXNzaW5nO1xuICB2YXIgUVJJbWFnZSA9IHc2OWIucXIuUVJJbWFnZTtcblxuICAvKipcbiAgICogQHBhcmFtIHsoIUltYWdlRGF0YXwhdzY5Yi5xci5RUkltYWdlKX0gaW1hZ2VEYXRhIGZyb20gY2FudmFzLlxuICAgKiBAcmV0dXJuIHshdzY5Yi5xci5CaXRNYXRyaXh9IGJpbmFyeSBkYXRhLlxuICAgKi9cbiAgXy5iaW5hcml6ZUltYWdlRGF0YSA9IGZ1bmN0aW9uKGltYWdlRGF0YSkge1xuICAgIHZhciBncmF5ID0gXy5ncmF5c2NhbGUoaW1hZ2VEYXRhKTtcbiAgICB2YXIgYmluYXJpemVyID0gbmV3IHc2OWIucXIuSHlicmlkQmluYXJpemVyKGdyYXkpO1xuICAgIHJldHVybiBiaW5hcml6ZXIuZ2V0QmxhY2tNYXRyaXgoKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBncmF5c2NhbGUgdmVyc2lvbiBvZiBpbWFnZS5cbiAgICogQHBhcmFtIHsoIUltYWdlRGF0YXwhdzY5Yi5xci5RUkltYWdlKX0gaW1hZ2VEYXRhIGZyb20gY2FudmFzLlxuICAgKiBAcmV0dXJuIHshdzY5Yi5xci5RUkltYWdlfSBiaW5hcnkgZGF0YS5cbiAgICovXG4gIF8uZ3JheXNjYWxlID0gZnVuY3Rpb24oaW1hZ2VEYXRhKSB7XG4gICAgdmFyIGdyYXlJbWcgPSBRUkltYWdlLm5ld0VtcHR5KGltYWdlRGF0YS53aWR0aCwgaW1hZ2VEYXRhLmhlaWdodCk7XG4gICAgdmFyIGdyYXlEYXRhID0gZ3JheUltZy5kYXRhO1xuICAgIHZhciByZ2JhRGF0YSA9IGltYWdlRGF0YS5kYXRhO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncmF5RGF0YS5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHJnYmFQb3MgPSBpICogNDtcbiAgICAgIGdyYXlEYXRhW2ldID0gKHJnYmFEYXRhW3JnYmFQb3NdICogMzMgK1xuICAgICAgICByZ2JhRGF0YVtyZ2JhUG9zICsgMV0gKiAzNCArXG4gICAgICAgIHJnYmFEYXRhW3JnYmFQb3MgKyAyXSAqIDMzKSAvIDEwMDtcbiAgICB9XG4gICAgcmV0dXJuIGdyYXlJbWc7XG4gIH07XG5cbn0pO1xuXG4iLCIvLyAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuZ29vZy5wcm92aWRlKCd3NjliLnFyLmltYWdlZGVjb2RpbmcnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5pbWcuUkdCQUJpdE1hdHJpeCcpO1xuZ29vZy5yZXF1aXJlKCd3NjliLmltZy5XZWJHTEJpbmFyaXplcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLmltZ3Rvb2xzJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuRGVjb2RlUmVzdWx0Jyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuRGV0ZWN0b3InKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5RUkltYWdlJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuUmVhZGVyRXJyb3InKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5kZWNvZGVyJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuZW5jb2Rlci5FbmNvZGVyJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIubmF0aXZlcHJlcHJvY2Vzc2luZycpO1xuXG4vKipcbiAqIFNpbXBsZSBoaWdoLWxldmVsIGludGVyZmFjZSB0byBkZWNvZGUgcXIgY29kZXMuXG4gKiBAYXV0aG9yIG1iQHc2OWIuY29tIChNYW51ZWwgQnJhdW4pXG4gKi9cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIHZhciBEZXRlY3RvciA9IHc2OWIucXIuRGV0ZWN0b3I7XG4gIHZhciBSR0JBQml0TWF0cml4ID0gdzY5Yi5pbWcuUkdCQUJpdE1hdHJpeDtcbiAgdmFyIERlY29kZVJlc3VsdCA9IHc2OWIucXIuRGVjb2RlUmVzdWx0O1xuICB2YXIgV2ViR0xCaW5hcml6ZXIgPSB3NjliLmltZy5XZWJHTEJpbmFyaXplcjtcbiAgdmFyIGltZ3Rvb2xzID0gdzY5Yi5pbWd0b29scztcbiAgdmFyIHByZXByb2Nlc3NpbmcgPSB3NjliLnFyLm5hdGl2ZXByZXByb2Nlc3Npbmc7XG5cbiAgdmFyIF8gPSB3NjliLnFyLmltYWdlZGVjb2Rpbmc7XG5cbiAgXy53ZWJHTEJpbmFyaXplcl8gPSBudWxsO1xuXG4gIF8uZ2V0V2ViR0xCaW5hcml6ZXJfID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFfLndlYkdMQmluYXJpemVyXykge1xuICAgICAgXy53ZWJHTEJpbmFyaXplcl8gPSBuZXcgV2ViR0xCaW5hcml6ZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIF8ud2ViR0xCaW5hcml6ZXJfO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZWNvZGUgcXIgY29kZSBpbiBtYWluIHRocmVhZC5cbiAgICogQHBhcmFtIHsoSW1hZ2V8SFRNTFZpZGVvRWxlbWVudCl9IGltZyBpbWFnZSBvciB2aWRlby5cbiAgICogQHBhcmFtIHs/dzY5Yi5xci5SZXN1bHRQb2ludENhbGxiYWNrPX0gY2FsbGJhY2sgY2FsbGJhY2sgZm9yIHBhdHRlcm5zLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfd2ViZ2wgd2hldGhlciB0byB1c2UgV2ViR2wgYmluYXJpemVyIGlmIHN1cHBvcnRlZC5cbiAgICogQHJldHVybiB7RGVjb2RlUmVzdWx0fSByZXN1bHQuXG4gICAqL1xuICBfLmRlY29kZSA9IGZ1bmN0aW9uKGltZywgY2FsbGJhY2ssIG9wdF93ZWJnbCkge1xuICAgIHZhciBpbWdEYXRhO1xuICAgIGlmIChvcHRfd2ViZ2wgJiYgV2ViR0xCaW5hcml6ZXIuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgdmFyIGJpbmFyaXplciA9IF8uZ2V0V2ViR0xCaW5hcml6ZXJfKCk7XG4gICAgICBiaW5hcml6ZXIuc2V0dXAoaW1nLndpZHRoIHx8IGltZy52aWRlb0hlaWdodCwgaW1nLmhlaWdodCB8fCBpbWcudmlkZW9IZWlnaHQpO1xuICAgICAgYmluYXJpemVyLnJlbmRlcihpbWcpO1xuICAgICAgaW1nRGF0YSA9IGJpbmFyaXplci5nZXRCaXRNYXRyaXgoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW1nRGF0YSA9IGltZ3Rvb2xzLmdldEltYWdlRGF0YShpbWcsIDcwMCk7XG4gICAgfVxuICAgIHJldHVybiBfLmRlY29kZUZyb21JbWFnZURhdGEoaW1nRGF0YSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZWNvZGUgcXIgY29kZSBmcm9tIEltYWdlRGF0YSBvciBwcmVwcm9jZXNzZWQgUkdCQUJpdE1hdHJpeC5cbiAgICogQHBhcmFtIHsoIUltYWdlRGF0YXwhdzY5Yi5xci5RUkltYWdlfCFSR0JBQml0TWF0cml4KX0gaW1nZGF0YSBmcm9tIGNhbnZhcy5cbiAgICogQHBhcmFtIHs/dzY5Yi5xci5SZXN1bHRQb2ludENhbGxiYWNrPX0gb3B0X2NhbGxiYWNrIGNhbGxiYWNrLlxuICAgKiBAcmV0dXJuIHtEZWNvZGVSZXN1bHR9IGRlY29kZWQgcXIgY29kZS5cbiAgICovXG4gIF8uZGVjb2RlRnJvbUltYWdlRGF0YSA9IGZ1bmN0aW9uKGltZ2RhdGEsIG9wdF9jYWxsYmFjaykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IF8uZGVjb2RlRnJvbUltYWdlRGF0YVRocm93aW5nKGltZ2RhdGEsIG9wdF9jYWxsYmFjayk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXN1bHQgPSBuZXcgRGVjb2RlUmVzdWx0KGVycik7XG4gICAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiB3NjliLnFyLlJlYWRlckVycm9yKSlcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBUaHJvd3MgUmVhZGVyRXJyb3IgaWYgZGV0ZWN0aW9uIGZhaWxzLlxuICAgKiBAcGFyYW0geyghSW1hZ2VEYXRhfCF3NjliLnFyLlFSSW1hZ2V8IVJHQkFCaXRNYXRyaXgpfSBpbWdkYXRhIGZyb20gY2FudmFzLlxuICAgKiBAcGFyYW0gez93NjliLnFyLlJlc3VsdFBvaW50Q2FsbGJhY2s9fSBvcHRfY2FsbGJhY2sgY2FsbGJhY2suXG4gICAqIEByZXR1cm4ge0RlY29kZVJlc3VsdH0gZGVjb2RlZCBxciBjb2RlLlxuICAgKi9cbiAgXy5kZWNvZGVGcm9tSW1hZ2VEYXRhVGhyb3dpbmcgPSBmdW5jdGlvbihpbWdkYXRhLCBvcHRfY2FsbGJhY2spIHtcbiAgICB2YXIgYml0bWFwO1xuICAgIGlmIChpbWdkYXRhIGluc3RhbmNlb2YgUkdCQUJpdE1hdHJpeCkge1xuICAgICAgYml0bWFwID0gaW1nZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgYml0bWFwID0gcHJlcHJvY2Vzc2luZy5iaW5hcml6ZUltYWdlRGF0YShpbWdkYXRhKTtcbiAgICB9XG4gICAgdmFyIGRldGVjdG9yID0gbmV3IERldGVjdG9yKGJpdG1hcCwgb3B0X2NhbGxiYWNrKTtcblxuICAgIHZhciBkZXRlY3RvclJlc3VsdCA9IGRldGVjdG9yLmRldGVjdCgpO1xuICAgIHZhciB0ZXh0ID0gdzY5Yi5xci5kZWNvZGVyLmRlY29kZShkZXRlY3RvclJlc3VsdC5iaXRzKTtcblxuICAgIHJldHVybiBuZXcgRGVjb2RlUmVzdWx0KHRleHQsIGRldGVjdG9yUmVzdWx0LnBvaW50cyk7XG4gIH07XG5cbn0pO1xuXG5nb29nLmV4cG9ydFN5bWJvbCgndzY5Yi5xci5pbWFnZWRlY29kaW5nLmRlY29kZUZyb21JbWFnZURhdGEnLFxuICB3NjliLnFyLmltYWdlZGVjb2RpbmcuZGVjb2RlRnJvbUltYWdlRGF0YSk7XG4iLCIvLyAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuZ29vZy5wcm92aWRlKCd3NjliLnFyLkRlY29kZUluV29ya2VySGVscGVyJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubWF0aC5TaXplJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubmV0LmpzbG9hZGVyJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuc3RyaW5nJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuc3RyaW5nLnBhdGgnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy51c2VyQWdlbnQnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5pbWcuUkdCQUJpdE1hdHJpeCcpO1xuZ29vZy5yZXF1aXJlKCd3NjliLmltZy5XZWJHTEJpbmFyaXplcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLmltZ3Rvb2xzJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuSW52YWxpZENoYXJzZXRFcnJvcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLldvcmtlck1lc3NhZ2VUeXBlJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuaW1hZ2VkZWNvZGluZycpO1xuXG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIHZhciBxcmNvZGUgPSB3NjliLnFyLmltYWdlZGVjb2Rpbmc7XG4gIHZhciBqc2xvYWRlciA9IGdvb2cubmV0LmpzbG9hZGVyO1xuICB2YXIgV29ya2VyTWVzc2FnZVR5cGUgPSB3NjliLnFyLldvcmtlck1lc3NhZ2VUeXBlO1xuICB2YXIgV2ViR0xCaW5hcml6ZXIgPSB3NjliLmltZy5XZWJHTEJpbmFyaXplcjtcblxuICAvKipcbiAgICogSGVscGVyIGNsYXNzIHRoYXQgZGVjb2RlcyBpbiB3b3JrZXIgaWYgYXZhaWxhYmxlIGFuZCByZWFzb25hYmxlXG4gICAqIGFuZCBmYWxscyBiYWNrIHRvIG1haW4gdGhyZWFkIGRlY29kaW5nIGlmIG5vdC5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB3NjliLnFyLkRlY29kZUluV29ya2VySGVscGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jYWxsYmFja18gPSBudWxsO1xuICB9O1xuICB2YXIgRGVjb2RlSW5Xb3JrZXJIZWxwZXIgPSB3NjliLnFyLkRlY29kZUluV29ya2VySGVscGVyO1xuICB2YXIgcHJvID0gRGVjb2RlSW5Xb3JrZXJIZWxwZXIucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByby5lbmFibGVXZWJHbF8gPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByby5lbmFibGVXb3JrZXJfID0gdHJ1ZTtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZWQgd2l0aCBiaW5hcml6ZXIgaWYgc3VwcG9ydGVkLlxuICAgKiBAdHlwZSB7V2ViR0xCaW5hcml6ZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8ud2ViZ2xCaW5hcml6ZXJfID0gbnVsbDtcblxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBTZXQgdGhpcyBhY2NvcmRpbmcgdG8geW91ciBzZXR1cC5cbiAgICogQHR5cGUge3N0cmluZ30gdXJsIG9mIHdvcmtlciBqcyBmaWxlLlxuICAgKi9cbiAgRGVjb2RlSW5Xb3JrZXJIZWxwZXIud29ya2VyVXJsXyA9ICcnO1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogU2V0IHRoaXMgaWYgeW91IHdhbnQgdG8gdXNlIGljb252IHdoZW4gbmVlZGVkLlxuICAgKiBAdHlwZSB7P3N0cmluZ30gdXJsIG9mIGljb252LmpzIGZpbGUuXG4gICAqL1xuICBEZWNvZGVJbldvcmtlckhlbHBlci5pY29udlVybF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyBhY2NvcmRpbmcgdG8geW91ciBzZXR1cCBiZWZvcmUgY3JlYXRpbmcgYW4gaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgb2Ygd29ya2VyIGpzIGZpbGUuXG4gICAqL1xuICBEZWNvZGVJbldvcmtlckhlbHBlci5zZXRXb3JrZXJVcmwgPSBmdW5jdGlvbih1cmwpIHtcbiAgICBEZWNvZGVJbldvcmtlckhlbHBlci53b3JrZXJVcmxfID0gdXJsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyBpZiB5b3Ugd2FudCB0byB1c2UgaWNvbnYgd2hlbiBuZWVkZWQuIFJlbGF0aXZlIHBhdGhzIGFyZVxuICAgKiByZWxhdGl2ZSB0byB0aGUgd29ya2VyIHVybC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBvZiBpY29udi5qcyBmaWxlLlxuICAgKi9cbiAgRGVjb2RlSW5Xb3JrZXJIZWxwZXIuc2V0SWNvbnZVcmwgPSBmdW5jdGlvbih1cmwpIHtcbiAgICBEZWNvZGVJbldvcmtlckhlbHBlci5pY29udlVybF8gPSB1cmw7XG4gIH07XG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIFdlYkdsIGJpbmFyaXplci5cbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGUgV2ViR0wuXG4gICAqL1xuICBwcm8uZW5hYmxlV2ViR2wgPSBmdW5jdGlvbihlbmFibGUpIHtcbiAgICB0aGlzLmVuYWJsZVdlYkdsXyA9IGVuYWJsZTtcbiAgfTtcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZGVjb2RpbmcgaW4gd2ViIHdvcmtlci5cbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGUgd29ya2VyLlxuICAgKi9cbiAgcHJvLmVuYWJsZVdvcmtlciA9IGZ1bmN0aW9uKGVuYWJsZSkge1xuICAgIHRoaXMuZW5hYmxlV29ya2VyXyA9IGVuYWJsZTtcbiAgfTtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBjbGFzcy4gWW91IG11c3QgY2FsbCB0aGlzIGJlZm9yZSB1c2luZyBpdC5cbiAgICovXG4gIHByby5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZW5hYmxlV29ya2VyXykge1xuICAgICAgdmFyIHVybCA9IHc2OWIucXIuRGVjb2RlSW5Xb3JrZXJIZWxwZXIud29ya2VyVXJsXztcbiAgICAgIGlmICghdXJsKVxuICAgICAgICB0aHJvdyBFcnJvcignbWlzc2luZyB3b3JrZXIgdXJsIHNldHVwJyk7XG4gICAgICB0aGlzLndvcmtlcl8gPSBuZXcgV29ya2VyKHVybCk7XG4gICAgICB0aGlzLnVzZVdvcmtlcl8gPSB0aGlzLnNoYWxsVXNlV29ya2VyKCk7XG4gICAgICBpZiAodGhpcy51c2VXb3JrZXJfKSB7XG4gICAgICAgIC8vIGhhY2sgZm9yIGludmFsaWQgZXh0ZXJuLlxuICAgICAgICB0aGlzLndvcmtlcl9bJ2FkZEV2ZW50TGlzdGVuZXInXSgnbWVzc2FnZScsIHRoaXMub25NZXNzYWdlXy5iaW5kKHRoaXMpKTtcbiAgICAgICAgaWYgKHc2OWIucXIuRGVjb2RlSW5Xb3JrZXJIZWxwZXIuaWNvbnZVcmxfKSB7XG4gICAgICAgICAgdGhpcy53b3JrZXJfLnBvc3RNZXNzYWdlKFxuICAgICAgICAgICAgeydzZXRJY29udlVybCc6IHc2OWIucXIuRGVjb2RlSW5Xb3JrZXJIZWxwZXIuaWNvbnZVcmxffSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29ya2VyXy50ZXJtaW5hdGUoKTtcbiAgICAgICAgdGhpcy53b3JrZXJfID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIFdlYkdsIGlzIHVzZWQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgd2ViR2wgaXMgZW5hYmxlZCBhbmQgc3VwcG9ydGVkXG4gICAqL1xuICBwcm8uaXNXZWJHbEVuYWJsZWRBbmRTdXBwb3J0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5lbmFibGVXZWJHbF8gJiYgV2ViR0xCaW5hcml6ZXIuaXNTdXBwb3J0ZWQoKTtcbiAgfTtcblxuICAvKipcbiAgICogT25seSB1c2Ugd29ya2VycyBpbiBicm93c2VycyB0aGF0IHN1cHBvcnQgdHJhbnNmZXJhYmxlIG9iamVjdHMuXG4gICAqL1xuICBwcm8uc2hhbGxVc2VXb3JrZXIgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuZW5hYmxlV29ya2VyXykgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoMSk7XG4gICAgdGhpcy53b3JrZXJfLnBvc3RNZXNzYWdlKFxuICAgICAgeydpc2ZlYXR1cmVkZXRlY3QnOiB0cnVlLCAnYnVmZmVyJzogYnVmZmVyfSwgW2J1ZmZlcl0pO1xuICAgIC8vIFdoZW4gYnVmZmVyIGlzIHRyYW5zZmVyZWQgYW5kIG5vdCBjb3BpZWQsIGl0cyBsZW5ndGggaXMgc2V0IHRvIHplcm8uXG4gICAgcmV0dXJuIGJ1ZmZlci5ieXRlTGVuZ3RoID09IDA7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1lc3NhZ2UgZm9ybSB3b3JrZXIgcmVjZWl2ZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByby5vbk1lc3NhZ2VfID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAodGhpcy5jYWxsYmFja18pIHtcbiAgICAgIHZhciB0eXBlID0gZXZlbnQuZGF0YVswXTtcbiAgICAgIC8vIEhhY2sgZm9yIEZGIG1lbW9yeSBsZWFrIHdpdGggd2ViZ2wgKyB3b3JrZXIuXG4gICAgICBpZiAodHlwZSA9PSAnZmZtZW1vcnloYWNrJylcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdmFyIHZhbHVlID0gZXZlbnQuZGF0YVsxXTtcbiAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgdmFsdWUgPSB3aW5kb3cuSlNPTi5wYXJzZSgvKiogQHR5cGUge3N0cmluZ30gKi8gKHZhbHVlKSk7XG4gICAgICB0aGlzLmNhbGxiYWNrXyh0eXBlLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyEoSFRNTENhbnZhc0VsZW1lbnR8SW1hZ2VEYXRhfEltYWdlfEhUTUxWaWRlb0VsZW1lbnQpfSBpbWdkYXRhIGZyYW1lIHRvIHByb2Nlc3MuXG4gICAqIEBwYXJhbSB7IWdvb2cubWF0aC5TaXplfSBzaXplIG9mIGltYWdlIGRhdGEsIG9yIGRlc2lyZWQgc2l6ZSBvZiBiaW5hcml6ZXIgb3V0cHV0IGluXG4gICAqIGNhc2Ugd2ViR2wgaXMgdXNlZC4gSWYgYXNwZWN0IHJhdGlvIGlzIGRpZmZlcmVudCBmcm9tIGlucHV0IGVzcGVjdCByYXRpbywgd2Ugb25seSB1c2UgdGhlXG4gICAqIHRvcC1sZWZ0IHJlY3RhbmdlIG9mIHRoZSBpbnB1dCBpbWFnZSB0aGF0IGNvdmVycyB0aGUgZGVzaXJlZCBzaXplLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgPz0pfSBjYWxsYmFjayBjYWxsZWQgd2l0aCByZXN1bHQuLlxuICAgKi9cbiAgcHJvLmRlY29kZSA9IGZ1bmN0aW9uKGltZ2RhdGEsIHNpemUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGlzQmluYXJ5ID0gZmFsc2U7XG4gICAgdmFyIGltZ0RhdGFPck1hdHJpeCA9IGltZ2RhdGE7XG4gICAgc2l6ZS5yb3VuZCgpO1xuICAgIGlmICh0aGlzLmVuYWJsZVdlYkdsXykge1xuICAgICAgLy8gbGF6emlseSBpbml0aWFsaXplIGJpbmFyaXplclxuICAgICAgaWYgKCF0aGlzLndlYkdMQmluYXJpemVyXyAmJiBXZWJHTEJpbmFyaXplci5pc1N1cHBvcnRlZCgpKVxuICAgICAgICB0aGlzLndlYkdMQmluYXJpemVyXyA9IG5ldyBXZWJHTEJpbmFyaXplcigpO1xuICAgICAgLy8gYmluYXJpemVcbiAgICAgIGlmICh0aGlzLndlYkdMQmluYXJpemVyXykge1xuICAgICAgICB2YXIgY292ZXJTaXplID0gbmV3IGdvb2cubWF0aC5TaXplKFxuICAgICAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW1nZGF0YS53aWR0aCB8fCBpbWdkYXRhLnZpZGVvV2lkdGgpLFxuICAgICAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW1nZGF0YS5oZWlnaHQgfHwgaW1nZGF0YS52aWRlb0hlaWdodCkpO1xuICAgICAgICBpZiAoY292ZXJTaXplLmZpdHNJbnNpZGUoc2l6ZSkpXG4gICAgICAgICAgc2l6ZSA9IGNvdmVyU2l6ZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGNvdmVyU2l6ZSA9IGNvdmVyU2l6ZS5zY2FsZVRvQ292ZXIoc2l6ZSk7XG4gICAgICAgIHRoaXMud2ViR0xCaW5hcml6ZXJfLnNldHVwKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0LCBjb3ZlclNpemUud2lkdGgsIGNvdmVyU2l6ZS5oZWlnaHQpO1xuICAgICAgICB0aGlzLndlYkdMQmluYXJpemVyXy5yZW5kZXIoaW1nZGF0YSk7XG4gICAgICAgIGltZ0RhdGFPck1hdHJpeCA9IHRoaXMud2ViR0xCaW5hcml6ZXJfLmdldEJpdE1hdHJpeCgpO1xuICAgICAgICBpc0JpbmFyeSA9IHRydWU7XG4gICAgICAgIC8vIHdpbmRvdy5jb25zb2xlLmxvZygnZGVjb2RlZCB3aXRoIHdlYmdsJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghKGltZ0RhdGFPck1hdHJpeCBpbnN0YW5jZW9mIEltYWdlRGF0YSB8fFxuICAgICAgaW1nRGF0YU9yTWF0cml4IGluc3RhbmNlb2YgdzY5Yi5pbWcuUkdCQUJpdE1hdHJpeCkpIHtcbiAgICAgIGltZ0RhdGFPck1hdHJpeCA9IHc2OWIuaW1ndG9vbHMuZ2V0SW1hZ2VEYXRhKGltZ0RhdGFPck1hdHJpeCwgc2l6ZSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnVzZVdvcmtlcl8pIHtcbiAgICAgIHZhciBidWZmZXIgPSAoLyoqIEB0eXBlIHtVaW50OENsYW1wZWRBcnJheX0gICovIChpbWdEYXRhT3JNYXRyaXguZGF0YSkpLmJ1ZmZlcjtcbiAgICAgIHZhciBtc2cgPSB7XG4gICAgICAgICd3aWR0aCc6IGltZ0RhdGFPck1hdHJpeC53aWR0aCxcbiAgICAgICAgJ2hlaWdodCc6IGltZ0RhdGFPck1hdHJpeC5oZWlnaHQsXG4gICAgICAgICdidWZmZXInOiBidWZmZXIsXG4gICAgICAgICdpc0JpbmFyeSc6IGlzQmluYXJ5XG4gICAgICB9O1xuICAgICAgdGhpcy5jYWxsYmFja18gPSBjYWxsYmFjaztcbiAgICAgIHRoaXMud29ya2VyXy5wb3N0TWVzc2FnZShtc2csIFtidWZmZXJdKTtcbiAgICAgIGltZ0RhdGFPck1hdHJpeC5kYXRhID0gbnVsbDtcbiAgICAgIGltZ2RhdGEuZGF0YSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGxvY2FsIGZhbGxiYWNrXG4gICAgICB0aGlzLmRlY29kZUxvY2FsRmFsbGJhY2tfKGltZ0RhdGFPck1hdHJpeCwgY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGlzcG9zZSBoZWxwZXJcbiAgICovXG4gIHByby5kaXNwb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMud29ya2VyXylcbiAgICAgIHRoaXMud29ya2VyXy50ZXJtaW5hdGUoKTtcbiAgfTtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHshKEltYWdlRGF0YXx3NjliLmltZy5SR0JBQml0TWF0cml4KX0gaW1nZGF0YSBpbWFnZSBkYXRhLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgPz0pfSBjYWxsYmFjayBjYWxsZWQgd2l0aCByZXN1bHQuLlxuICAgKi9cbiAgcHJvLmRlY29kZUxvY2FsRmFsbGJhY2tfID0gZnVuY3Rpb24oaW1nZGF0YSwgY2FsbGJhY2spIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHJlc3VsdCA9IHFyY29kZS5kZWNvZGVGcm9tSW1hZ2VEYXRhKGltZ2RhdGEsIGZ1bmN0aW9uKHBhdHRlcm4pIHtcbiAgICAgICAgY2FsbGJhY2soV29ya2VyTWVzc2FnZVR5cGUuUEFUVEVSTiwgcGF0dGVyblsndG9KU09OJ10oKSk7XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIHc2OWIucXIuSW52YWxpZENoYXJzZXRFcnJvciAmJiAhc2VsZi5pY29udiAmJlxuICAgICAgICBEZWNvZGVJbldvcmtlckhlbHBlci5pY29udlVybF8pIHtcbiAgICAgICAgLy8gbG9hZCBpY29udi4gaW1wb3J0U2NyaXB0cyhfLmljb252UGF0aCk7XG4gICAgICAgIHZhciB1cmwgPSBEZWNvZGVJbldvcmtlckhlbHBlci5pY29udlVybF87XG4gICAgICAgIGlmICghZ29vZy5zdHJpbmcuc3RhcnRzV2l0aCh1cmwsXG4gICAgICAgICAgICAnaHR0cDovLycpICYmICFnb29nLnN0cmluZy5zdGFydHNXaXRoKHVybCwgJ2h0dHBzOi8vJykpIHtcbiAgICAgICAgICAvLyBwYXRoIGlzIHJlbGF0aXZlIHRvIHdvcmtlciwgc28gcmVzb2x2ZSBpdCBmaXJzdC5cbiAgICAgICAgICB1cmwgPSBnb29nLnN0cmluZy5wYXRoLmRpcm5hbWUoRGVjb2RlSW5Xb3JrZXJIZWxwZXIud29ya2VyVXJsXykgK1xuICAgICAgICAgICAgJy8nICsgdXJsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFuZCB0cnkgYWdhaW4gd2hlbiBsb2FkZWQuXG4gICAgICAgIGpzbG9hZGVyLmxvYWQodXJsKS5hZGRDYWxsYmFjayhmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLmRlY29kZUxvY2FsRmFsbGJhY2tfKGltZ2RhdGEsIGNhbGxiYWNrKTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlc3VsdC5pc0Vycm9yKCkpIHtcbiAgICAgIHZhciBlcnIgPSByZXN1bHQuZ2V0RXJyb3IoKTtcbiAgICAgIGNhbGxiYWNrKFdvcmtlck1lc3NhZ2VUeXBlLk5PVEZPVU5ELCBlcnIgJiYgZXJyLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayhXb3JrZXJNZXNzYWdlVHlwZS5ERUNPREVELCByZXN1bHRbJ3RvSlNPTiddKCkpO1xuICAgIH1cbiAgICAvLyBoYWNrIHRvIHdvcmsgYXJvdXQgbWVtb3J5IGxlYWsgaW4gRkZcbiAgICBkZWxldGUgaW1nZGF0YS5kYXRhO1xuICB9O1xufSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNSBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuLy8gUHVibGljIEFQSSBleHBvcnRzXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuZGVjb2RpbmcnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5Qcm9taXNlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubWF0aC5TaXplJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cub2JqZWN0Jyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuaW1nLldlYkdMQmluYXJpemVyJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuRGVjb2RlSW5Xb3JrZXJIZWxwZXInKTtcblxuXG4vKipcbiAqIFB1YmxpYyBoaWdoLWxldmVsIGRlY29kaW5nIEFQSSBleHBvcnRzLlxuICogQGF1dGhvciBtYkB3NjliLmNvbSAoTWFudWVsIEJyYXVuKVxuICovXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICB2YXIgV29ya2VyTWVzc2FnZVR5cGUgPSB3NjliLnFyLldvcmtlck1lc3NhZ2VUeXBlO1xuICB2YXIgRGVjb2RlSW5Xb3JrZXJIZWxwZXIgPSB3NjliLnFyLkRlY29kZUluV29ya2VySGVscGVyO1xuICB2YXIgb2JqZWN0ID0gZ29vZy5vYmplY3Q7XG4gIHZhciBQcm9taXNlID0gZ29vZy5Qcm9taXNlO1xuICB2YXIgXyA9IHc2OWIucXIuZGVjb2Rpbmc7XG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIGFjY29yZGluZyB0byB5b3VyIHNldHVwIGJlZm9yZSBjcmVhdGluZyBhbiBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBvZiB3b3JrZXIganMgZmlsZS5cbiAgICogQGV4cG9ydFxuICAgKi9cbiAgXy5zZXRXb3JrZXJVcmwgPSBmdW5jdGlvbih1cmwpIHtcbiAgICBEZWNvZGVJbldvcmtlckhlbHBlci5zZXRXb3JrZXJVcmwodXJsKTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0IHRoaXMgaWYgeW91IHdhbnQgdG8gdXNlIGljb252IHdoZW4gbmVlZGVkLiBSZWxhdGl2ZSBwYXRocyBhcmVcbiAgICogcmVsYXRpdmUgdG8gdGhlIHdvcmtlciB1cmwuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgb2YgaWNvbnYuanMgZmlsZS5cbiAgICogQGV4cG9ydFxuICAgKi9cbiAgXy5zZXRJY29udlVybCA9IGZ1bmN0aW9uKHVybCkge1xuICAgIERlY29kZUluV29ya2VySGVscGVyLnNldEljb252VXJsKHVybCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrIFdlYkdsIGltYWdlIHByb2Nlc3Npbmcgc3VwcG9ydC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciBXZWJHTCBiaW5hcml6ZXIgY2FuIGJlIHVzZWQuXG4gICAqIEBleHBvcnRcbiAgICovXG4gIF8uaXNXZWJHbFN1cHBvcnRlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB3NjliLmltZy5XZWJHTEJpbmFyaXplci5pc1N1cHBvcnRlZCgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDbGFzcyB0byBkZWNvZGUgUVIgQ29kZSBpbWFnZXMuIExvYWRzIGEgd29ya2VyIGF0IGluaXRpYWxpemF0aW9uLCBpZiBlbmFibGVkLFxuICAgKiBzbyBtYWtlIHN1cmUgdG8gcmUtdXNlIGluc3RhbmNlcyB3aGVuZXZlciBwb3NzaWJsZS5cbiAgICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCo+PX0gb3B0aW9ucyBvcHRpb25zIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKiAtIHtib29sZWFufSB3b3JrZXI6IHVzZSB3ZWIgd29ya2VyLCBpZiBzdXBwb3J0ZWQsIGRlZmF1bHRzIHRvIHRydWVcbiAgICogLSB7Ym9vbGVhbn0gd2ViZ2w6IHVzZSB3ZWJnbCBiaW5hcml6ZXIsIGlmIHN1cHBvcnRlZCwgZGVmYXVsdHMgdG8gdHJ1ZVxuICAgKiAtIHtudW1iZXJ9IG1heFNpemU6IHNjYWxlIGRvd24gaW1hZ2UgaWYgbGFyZ2UgdGhhbiB0aGlzIHZhbHVlIGluIGFueSBkaW1lbnNpb24uXG4gICAqICBEZWZhdWx0cyB0byA3MDBweC5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHBvcnRcbiAgICovXG4gIF8uRGVjb2RlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgb3B0ID0ge1xuICAgICAgJ3dvcmtlcic6IHRydWUsXG4gICAgICAnd2ViZ2wnOiB0cnVlLFxuICAgICAgJ21heFNpemUnOiA3MDBcbiAgICB9O1xuICAgIG9iamVjdC5leHRlbmQob3B0LCBvcHRpb25zIHx8IHt9KTtcbiAgICB2YXIgd29ya2VyID0gbmV3IERlY29kZUluV29ya2VySGVscGVyKCk7XG4gICAgd29ya2VyLmVuYWJsZVdlYkdsKG9wdFsnd2ViZ2wnXSk7XG4gICAgd29ya2VyLmVuYWJsZVdvcmtlcihvcHRbJ3dvcmtlciddKTtcbiAgICB3b3JrZXIuaW5pdCgpO1xuICAgIHRoaXMub3B0aW9uc18gPSBvcHQ7XG4gICAgdGhpcy53b3JrZXJfID0gd29ya2VyO1xuICAgIHRoaXMuYnVzeV8gPSBmYWxzZTtcbiAgfTtcblxuICAvKipcbiAgICogUmVsZWFzZSByZXNvdXJjZXMuXG4gICAqIEBleHBvcnRcbiAgICovXG4gIF8uRGVjb2Rlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMud29ya2VyXy5kaXNwb3NlKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIERlY29kZSBpbWFnZSB0aGF0IGNvbnRhaW5zIGEgUVIgQ29kZS4gSXQgY2FuIGhhbmRsZSBpbWFnZS92aWRlbyBhbmQgaW1hZ2VkYXRhIG9iamVjdHMuXG4gICAqIE5vdGUgdGhhdCBpbWFnZSBjb252ZXJzaW9uIGlzIGV4cGVuc2l2ZSwgc28gcGFzcyB5b3VyIGltYWdlIGFzLWlzIHdoZW5ldmVyIHBvc3NpYmxlLlxuICAgKiBAcGFyYW0ge0ltYWdlfEhUTUxWaWRlb0VsZW1lbnR8SW1hZ2VEYXRhfSBpbWcgaW1hZ2UgdG8gZGVjb2RlLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXN1bHQuIFJlc29sdmVzIHRvIGFuIG9iamVjdFxuICAgKiB3aXRoIGEgdGV4dCBwcm9wZXJ0eSB0aGF0IGNvbnRhaW5zIHRoZSBkZWNvZGVkIHN0cmluZyBvbiBzdWNjZXNzLlxuICAgKiBSZWplY3RzIGlmIG5vIFFSIGNvZGUgY291bGQgYmUgZm91bmQgb3IgZGVjb2RpbmcgZmFpbGVkLlxuICAgKiBAZXhwb3J0XG4gICAqL1xuICBfLkRlY29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uKGltZykge1xuICAgIGlmICh0aGlzLmJ1c3lfKSB0aHJvdyBuZXcgRXJyb3IoJ0RlY29kZXIgaXMgc3RpbGwgYnVzeScpO1xuICAgIHRoaXMuYnVzeV8gPSB0cnVlO1xuICAgIHZhciBvcHQgPSB0aGlzLm9wdGlvbnNfO1xuICAgIHZhciB3b3JrZXIgPSB0aGlzLndvcmtlcl87XG4gICAgdmFyIHJlc29sdmVyID0gUHJvbWlzZS53aXRoUmVzb2x2ZXIoKTtcbiAgICAvLyBTaXplIG9mIGRvd24tc2NhbGVkIGltYWdlIHVzZWQgZm9yIGRlY29kaW5nIGludGVybmFsbHkuXG4gICAgdmFyIHNpemUgPSBuZXcgZ29vZy5tYXRoLlNpemUoXG4gICAgICAvKiogQHR5cGUge251bWJlcn0gKi8gKGltZy53aWR0aCB8fCBpbWcudmlkZW9XaWR0aCksXG4gICAgICAvKiogQHR5cGUge251bWJlcn0gKi8gKGltZy5oZWlnaHQgfHwgaW1nLnZpZGVvSGVpZ2h0KSk7XG4gICAgaWYgKG9wdFsnbWF4U2l6ZSddKSB7XG4gICAgICB2YXIgbWF4U2l6ZSA9IG5ldyBnb29nLm1hdGguU2l6ZShvcHRbJ21heFNpemUnXSwgb3B0WydtYXhTaXplJ10pO1xuICAgICAgaWYgKCFzaXplLmZpdHNJbnNpZGUobWF4U2l6ZSkpIHtcbiAgICAgICAgc2l6ZSA9IHNpemUuc2NhbGVUb0ZpdChtYXhTaXplKTtcbiAgICAgICAgc2l6ZS5mbG9vcigpO1xuICAgICAgfVxuICAgIH1cbiAgICB3b3JrZXIuZGVjb2RlKGltZywgc2l6ZSwgZnVuY3Rpb24odHlwZSwgdmFsdWUpIHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFdvcmtlck1lc3NhZ2VUeXBlLkRFQ09ERUQ6XG4gICAgICAgICAgcmVzb2x2ZXIucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgV29ya2VyTWVzc2FnZVR5cGUuTk9URk9VTkQ6XG4gICAgICAgICAgcmVzb2x2ZXIucmVqZWN0KHZhbHVlID8gbmV3IEVycm9yKHZhbHVlKSA6IG51bGwpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJlc29sdmVyLnByb21pc2UudGhlbkFsd2F5cyhmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuYnVzeV8gPSBmYWxzZTtcbiAgICB9LmJpbmQodGhpcykpO1xuICAgIHJldHVybiByZXNvbHZlci5wcm9taXNlO1xuICB9O1xufSk7XG4iLCIvLyAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuZ29vZy5wcm92aWRlKCd3NjliLnFyLkRyYXdhYmxlJyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiBJbnRlcmZhY2UgdXNlcyB0byBkcmF3IHFyIGNvZGVzLlxuICAgKiBAaW50ZXJmYWNlXG4gICAqL1xuICB3NjliLnFyLkRyYXdhYmxlID0gZnVuY3Rpb24oKSB7XG4gIH07XG4gIHZhciBwcm8gPSB3NjliLnFyLkRyYXdhYmxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogU2V0IHNpemUgb2YgZHJhd2FibGUgYW5kIGZpbGwgYmFja2dyb3VuZC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZGh0IHdpdGggb2YgZHJhd2FibGUgaW4gcGl4ZWxzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IGhlaWdodCBvZiBkcmF3YWJsZSBpbiBwaXhlbHMuXG4gICAqL1xuICBwcm8uZmlsbEJhY2tncm91bmQgPSBmdW5jdGlvbih3aWRodCwgaGVpZ2h0KSB7IH07XG5cbiAgLyoqXG4gICAqIEZpbGwgcmVjdGFuZ2xlIHdpdGggYmxhY2sgY29sb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHggcG9zLlxuICAgKiBAcGFyYW0ge251bWJlcn0geSB5IHBvcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZGh0IHdpZGh0IG9mIHJlY3RhbmdsZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBoZWlnaHQgb2YgcmVjdGFuZ2xlLlxuICAgKi9cbiAgcHJvLmZpbGxCbGFjayA9IGZ1bmN0aW9uKHgsIHksIHdpZGh0LCBoZWlnaHQpIHsgfTtcbn0pO1xuXG4iLCIvLyAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuZ29vZy5wcm92aWRlKCd3NjliLnFyLkNhbnZhc0RyYXdhYmxlJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuRHJhd2FibGUnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXMgdG8gZHJhdyBvbi5cbiAgICogQGltcGxlbWVudHMge3c2OWIucXIuRHJhd2FibGV9XG4gICAqL1xuICB3NjliLnFyLkNhbnZhc0RyYXdhYmxlID0gZnVuY3Rpb24oY2FudmFzKSB7XG4gICAgdGhpcy5jYW52YXNfID0gY2FudmFzO1xuICAgIHRoaXMuY29udGV4dF8gPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0aGlzLmJnU3R5bGVfID0gJ3JnYigyNTUsIDI1NSwgMjU1KSc7XG4gICAgdGhpcy5mZ1N0eWxlXyA9ICdyZ2IoMCwgMCwgMCknO1xuICB9O1xuICB2YXIgcHJvID0gdzY5Yi5xci5DYW52YXNEcmF3YWJsZS5wcm90b3R5cGU7XG5cbiAgcHJvLmZpbGxCYWNrZ3JvdW5kID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgIHRoaXMuY2FudmFzXy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuY2FudmFzXy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5jb250ZXh0Xy5maWxsU3R5bGUgPSB0aGlzLmJnU3R5bGVfO1xuICAgIHRoaXMuY29udGV4dF8uZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gIH07XG5cbiAgcHJvLmZpbGxCbGFjayA9IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLmNvbnRleHRfLmZpbGxTdHlsZSA9IHRoaXMuZmdTdHlsZV87XG4gICAgLy8gdGhpcy5jb250ZXh0Xy5zdHJva2VTdHlsZSA9IHRoaXMuZmdTdHlsZV87XG4gICAgdGhpcy5jb250ZXh0Xy5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgfTtcblxufSk7XG4iLCIvLyAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuZ29vZy5wcm92aWRlKCd3NjliLnFyLkVwc0RyYXdhYmxlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkRyYXdhYmxlJyk7XG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGltcGxlbWVudHMge3c2OWIucXIuRHJhd2FibGV9XG4gICAqL1xuICB3NjliLnFyLkVwc0RyYXdhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5idWZmZXJfID0gW107XG4gICAgdGhpcy5iZ0NvbG9yXyA9ICcxIDEgMSc7XG4gICAgdGhpcy5mZ0NvbG9yXyA9ICcwIDAgMCc7XG4gICAgdGhpcy5wcmV2Q29sb3JfID0gbnVsbDtcbiAgICB0aGlzLmhlaWdodF8gPSAwO1xuICAgIHRoaXMud2lkdGhfID0gMDtcbiAgfTtcbiAgdmFyIHBybyA9IHc2OWIucXIuRXBzRHJhd2FibGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBXcml0ZXMgaGVhZGVyIHRvIGJ1ZmZlci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIHdpZHRoIG9mIHN2Zy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBoZWlnaHQgb2Ygc3ZnLlxuICAgKi9cbiAgcHJvLndyaXRlSGVhZGVyID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgIHRoaXMuYnVmZmVyXy5wdXNoKCclIVBTLUFkb2JlLTMuMCBFUFNGLTMuMCcpO1xuICAgIHRoaXMuYnVmZmVyXy5wdXNoKCclJUJvdW5kaW5nQm94OiAwIDAgJyArIHdpZHRoICsgJyAnICsgaGVpZ2h0KTtcbiAgICB0aGlzLndpZHRoXyA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0XyA9IGhlaWdodDtcbiAgfTtcblxuICAvKipcbiAgICogRHJhd3MgcmVjdGFuZ2xlIHRvIGJ1ZmZlci5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByby53cml0ZVJlY3RfID0gZnVuY3Rpb24oeCwgeSwgd2lkdGgsIGhlaWdodCwgY29sb3IpIHtcbiAgICBpZiAodGhpcy5wcmV2Q29sb3JfICE9IGNvbG9yKSB7XG4gICAgICB0aGlzLmJ1ZmZlcl8ucHVzaChjb2xvciArICcgc2V0cmdiY29sb3InKTtcbiAgICAgIHRoaXMucHJldkNvbG9yXyA9IGNvbG9yO1xuICAgIH1cbiAgICAvLyBQcm9qZWN0IHRvIGVwcyBjb29yZGluYXRlIHN5c3RlbS4gKDAsIDApIGlzIHRoZSBib3R0b20gbGVmdCBjb3JuZXIuXG4gICAgeSA9IHRoaXMuaGVpZ2h0XyAtIHk7XG4gICAgdGhpcy5idWZmZXJfLnB1c2goeCArICcgJyArIHkgKyAnIG1vdmV0bycpO1xuICAgIHRoaXMuYnVmZmVyXy5wdXNoKCcwICcgKyAoLWhlaWdodCkgKyAnIHJsaW5ldG8gJyArIHdpZHRoICtcbiAgICAgICcgMCBybGluZXRvIDAgJyArIGhlaWdodCArICcgcmxpbmV0byBjbG9zZXBhdGgnKTtcbiAgICB0aGlzLmJ1ZmZlcl8ucHVzaCgnZmlsbCcpO1xuICB9O1xuXG4gIHByby5maWxsQmFja2dyb3VuZCA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuYnVmZmVyXy5sZW5ndGggPT0gMCk7XG4gICAgdGhpcy53cml0ZUhlYWRlcih3aWR0aCwgaGVpZ2h0KTtcbiAgICB0aGlzLndyaXRlUmVjdF8oMCwgMCwgd2lkdGgsIGhlaWdodCwgdGhpcy5iZ0NvbG9yXyk7XG4gIH07XG5cbiAgcHJvLmZpbGxCbGFjayA9IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuYnVmZmVyXy5sZW5ndGggPiAwKTtcbiAgICB0aGlzLndyaXRlUmVjdF8oeCwgeSwgd2lkdGgsIGhlaWdodCwgdGhpcy5mZ0NvbG9yXyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBzdmcgc291cmNlLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHN2ZyBhcyBzdHJpbmcuXG4gICAqL1xuICBwcm8udG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuYnVmZmVyXy5sZW5ndGggPiAwKTtcbiAgICByZXR1cm4gdGhpcy5idWZmZXJfLmpvaW4oJ1xcbicpO1xuICB9O1xuXG59KTtcbiIsIi8vIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbmdvb2cucHJvdmlkZSgndzY5Yi5xci5TdmdEcmF3YWJsZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmFzc2VydHMnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5EcmF3YWJsZScpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBpbXBsZW1lbnRzIHt3NjliLnFyLkRyYXdhYmxlfVxuICAgKi9cbiAgdzY5Yi5xci5TdmdEcmF3YWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYnVmZmVyXyA9IFtdO1xuICAgIHRoaXMuYmdTdHlsZV8gPSAnd2hpdGUnO1xuICAgIHRoaXMuZmdTdHlsZV8gPSAnYmxhY2snO1xuICB9O1xuICB2YXIgcHJvID0gdzY5Yi5xci5TdmdEcmF3YWJsZS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIFdyaXRlcyBoZWFkZXIgdG8gYnVmZmVyLlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggd2lkdGggb2Ygc3ZnLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IGhlaWdodCBvZiBzdmcuXG4gICAqL1xuICBwcm8ud3JpdGVIZWFkZXIgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdGhpcy5idWZmZXJfLnB1c2goJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PicpO1xuICAgIHRoaXMuYnVmZmVyXy5wdXNoKCc8c3ZnIHZlcnNpb249XCIxLjFcIiBiYXNlUHJvZmlsZT1cInRpbnlcIiAnICtcbiAgICAgICd4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgJyArXG4gICAgICAnd2lkdGg9XCInICsgd2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIGhlaWdodCArICdcIicgKyAnPicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEcmF3cyByZWN0YW5nbGUgdG8gYnVmZmVyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvLndyaXRlUmVjdF8gPSBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0LCBjb2xvcikge1xuICAgIHRoaXMuYnVmZmVyXy5wdXNoKFxuICAgICAgJzxyZWN0IHNoYXBlLXJlbmRlcmluZz1cIm9wdGltaXplU3BlZWRcIiAnICtcbiAgICAgICAgJyB4PVwiJyArIHggKyAnXCIgeT1cIicgKyB5ICsgJ1wiIHdpZHRoPVwiJyArXG4gICAgICAgIHdpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBoZWlnaHQgKyAnXCIgZmlsbD1cIicgKyBjb2xvciArICdcIiAvPicpO1xuICB9O1xuXG4gIHByby5maWxsQmFja2dyb3VuZCA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuYnVmZmVyXy5sZW5ndGggPT0gMCk7XG4gICAgdGhpcy53cml0ZUhlYWRlcih3aWR0aCwgaGVpZ2h0KTtcbiAgICB0aGlzLndyaXRlUmVjdF8oMCwgMCwgd2lkdGgsIGhlaWdodCwgdGhpcy5iZ1N0eWxlXyk7XG4gIH07XG5cbiAgcHJvLmZpbGxCbGFjayA9IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuYnVmZmVyXy5sZW5ndGggPiAwKTtcbiAgICB0aGlzLndyaXRlUmVjdF8oeCwgeSwgd2lkdGgsIGhlaWdodCwgdGhpcy5mZ1N0eWxlXyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBzdmcgc291cmNlLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHN2ZyBhcyBzdHJpbmcuXG4gICAqL1xuICBwcm8udG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuYnVmZmVyXy5sZW5ndGggPiAwKTtcbiAgICByZXR1cm4gdGhpcy5idWZmZXJfLmpvaW4oJ1xcbicpICsgJzwvc3ZnPic7XG4gIH07XG5cbn0pO1xuIiwiLy8gamF2YXNjcmlwdCAoY2xvc3VyZSkgcG9ydCAoYykgMjAxMyBNYW51ZWwgQnJhdW4gKG1iQHc2OWIuY29tKVxuLypcbiAqIENvcHlyaWdodCAyMDA4IFpYaW5nIGF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmdvb2cucHJvdmlkZSgndzY5Yi5xci5yZW5kZXJlcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkRyYXdhYmxlJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuZW5jb2Rlci5RUkNvZGUnKTtcblxuLyoqXG4gKiBSZW5kZXJzIGEgUVIgQ29kZSBvbiBhIGRyYXdhYmxlLlxuICpcbiAqIEBhdXRob3IgZHN3aXRraW5AZ29vZ2xlLmNvbSAoRGFuaWVsIFN3aXRraW4pXG4gKiBAYXV0aG9yIG1iQHc2OWIuY29tIChNYW51ZWwgQnJhdW4pXG4gKi9cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4gIHZhciBfID0gdzY5Yi5xci5yZW5kZXJlcjtcbiAgXy5RVUlFVF9aT05FX1NJWkUgPSA0O1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIFFSQ29kZSBvbiBkcmF3YWJsZS4gVGhlIFFSQ29kZSBpcyB1cHNjYWxlZCB0byB0aGUgbWF4aW11bVxuICAgKiB3aG9sZS1udW1iZXIgbXVsdGlwbGUgb2YgdGhlIGlucHV0IHFyY29kZSB3aXRoIHRoYXQgZml0cyBpbiB0aGUgZGVzaXJlZFxuICAgKiBzaXplLCBpbmNsdWRpbmcgdGhlIHF1aWV0IHpvbmVzLiBXaGF0IHJlbWFpbnMgaXMgZmlsbGVkIHdpdGggd2hpdGVcbiAgICogcGFkZGluZyAoaWUgdGhlIHFyIGNvZGUgaXMgY2VudGVyZWQgb24gIHRoZSBkZXNpcmVkIGltYWdlIHdpdGgpLlxuICAgKiBAcGFyYW0ge3c2OWIucXIuZW5jb2Rlci5RUkNvZGV9IHFyQ29kZSBxciBjb2RlIHRvIHJlbmRlci5cbiAgICogQHBhcmFtIHt3NjliLnFyLkRyYXdhYmxlfSBkcmF3YWJsZSB0byBkcmF3IG9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggZGVzaXJlZCB3aXRoIG9mIG91dHB1dCBpbWFnZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBkZXNpcmVkIGhlaWdodCBvZiBvdXRwdXQgaW1hZ2UuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBxdWlldFpvbmUgbnVtYmVyIG9mIGJsb2NrcyAocGl4c2VscyBpbiBpbnB1dCkgdG8gdXNlXG4gICAqIGZvciBxdWlldCB6b25lcy5cbiAgICovXG4gIF8ucmVuZGVyID0gZnVuY3Rpb24ocXJDb2RlLCBkcmF3YWJsZSwgd2lkdGgsIGhlaWdodCwgcXVpZXRab25lKSB7XG4gICAgdmFyIGlucHV0ID0gcXJDb2RlLmdldE1hdHJpeCgpO1xuICAgIHZhciBpbnB1dFdpZHRoID0gaW5wdXQuZ2V0V2lkdGgoKTtcbiAgICB2YXIgaW5wdXRIZWlnaHQgPSBpbnB1dC5nZXRIZWlnaHQoKTtcbiAgICB2YXIgcXJXaWR0aCA9IGlucHV0V2lkdGggKyAocXVpZXRab25lIDw8IDEpO1xuICAgIHZhciBxckhlaWdodCA9IGlucHV0SGVpZ2h0ICsgKHF1aWV0Wm9uZSA8PCAxKTtcbiAgICB2YXIgb3V0cHV0V2lkdGggPSBNYXRoLm1heCh3aWR0aCwgcXJXaWR0aCk7XG4gICAgdmFyIG91dHB1dEhlaWdodCA9IE1hdGgubWF4KGhlaWdodCwgcXJIZWlnaHQpO1xuXG4gICAgdmFyIG11bHRpcGxlID0gTWF0aC5mbG9vcihNYXRoLm1pbihvdXRwdXRXaWR0aCAvIHFyV2lkdGgsXG4gICAgICBvdXRwdXRIZWlnaHQgLyBxckhlaWdodCkpO1xuICAgIC8vIFBhZGRpbmcgaW5jbHVkZXMgYm90aCB0aGUgcXVpZXQgem9uZSBhbmQgdGhlIGV4dHJhIHdoaXRlIHBpeGVscyB0b1xuICAgIC8vIGFjY29tbW9kYXRlIHRoZSByZXF1ZXN0ZWQgZGltZW5zaW9ucy4gRm9yIGV4YW1wbGUsIGlmIGlucHV0IGlzIDI1eDI1XG4gICAgLy8gdGhlIFFSIHdpbGwgYmUgMzN4MzMgaW5jbHVkaW5nIHRoZSBxdWlldCB6b25lLlxuICAgIC8vIElmIHRoZSByZXF1ZXN0ZWQgc2l6ZSBpcyAyMDB4MTYwLCB0aGUgbXVsdGlwbGUgd2lsbCBiZSA0LCBmb3IgYSBRUiBvZlxuICAgIC8vIDEzMngxMzIuIFRoZXNlIHdpbGwgaGFuZGxlIGFsbCB0aGUgcGFkZGluZyBmcm9tIDEwMHgxMDAgKHRoZSBhY3R1YWwgUVIpXG4gICAgLy8gdXAgdG8gMjAweDE2MC5cbiAgICB2YXIgbGVmdFBhZGRpbmcgPSAob3V0cHV0V2lkdGggLSAoaW5wdXRXaWR0aCAqIG11bHRpcGxlKSkgPj4gMTtcbiAgICB2YXIgdG9wUGFkZGluZyA9IChvdXRwdXRIZWlnaHQgLSAoaW5wdXRIZWlnaHQgKiBtdWx0aXBsZSkpID4+IDE7XG5cbiAgICBkcmF3YWJsZS5maWxsQmFja2dyb3VuZChvdXRwdXRXaWR0aCwgb3V0cHV0SGVpZ2h0KTtcblxuICAgIGZvciAodmFyIGlucHV0WSA9IDAsIG91dHB1dFkgPSB0b3BQYWRkaW5nOyBpbnB1dFkgPCBpbnB1dEhlaWdodDtcbiAgICAgICAgIGlucHV0WSsrLCBvdXRwdXRZICs9IG11bHRpcGxlKSB7XG4gICAgICAvLyBXcml0ZSB0aGUgY29udGVudHMgb2YgdGhpcyByb3cgb2YgdGhlIGJhcmNvZGVcbiAgICAgIGZvciAodmFyIGlucHV0WCA9IDAsIG91dHB1dFggPSBsZWZ0UGFkZGluZzsgaW5wdXRYIDwgaW5wdXRXaWR0aDtcbiAgICAgICAgICAgaW5wdXRYKyssIG91dHB1dFggKz0gbXVsdGlwbGUpIHtcbiAgICAgICAgaWYgKGlucHV0LmdldChpbnB1dFgsIGlucHV0WSkgPT0gMSkge1xuICAgICAgICAgIGRyYXdhYmxlLmZpbGxCbGFjayhvdXRwdXRYLCBvdXRwdXRZLCBtdWx0aXBsZSwgbXVsdGlwbGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG59KTtcbiIsIi8vIChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIuZW5jb2RpbmcnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5DYW52YXNEcmF3YWJsZScpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLkVuY29kZUhpbnRUeXBlJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuRXBzRHJhd2FibGUnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5FcnJvckNvcnJlY3Rpb25MZXZlbCcpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLlN2Z0RyYXdhYmxlJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuZW5jb2Rlci5FbmNvZGVyJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIucmVuZGVyZXInKTtcblxuLyoqXG4gKiBTaW1wbGUgaGlnaC1sZXZlbCBpbnRlcmZhY2UgdG8gY3JlYXRlIHFyIGNvZGVzLlxuICovXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICB2YXIgRW5jb2RlciA9IHc2OWIucXIuZW5jb2Rlci5FbmNvZGVyO1xuICB2YXIgRXJyb3JDb3JyZWN0aW9uTGV2ZWwgPSB3NjliLnFyLkVycm9yQ29ycmVjdGlvbkxldmVsO1xuICB2YXIgcmVuZGVyZXIgPSB3NjliLnFyLnJlbmRlcmVyO1xuICB2YXIgRW5jb2RlSGludFR5cGUgPSB3NjliLnFyLkVuY29kZUhpbnRUeXBlO1xuICB2YXIgU3ZnRHJhd2FibGUgPSB3NjliLnFyLlN2Z0RyYXdhYmxlO1xuICB2YXIgRXBzRHJhd2FibGUgPSB3NjliLnFyLkVwc0RyYXdhYmxlO1xuXG4gIHZhciBfID0gdzY5Yi5xci5lbmNvZGluZztcblxuICAvKipcbiAgICogQHR5cGUge09iamVjdH0gY2FjaGUgb2YgKGN1cnJlbnRseSBvbmx5IHRoZSBsYXN0KSBlbmNvZGUgY2FsbCBhbmQgaXRzXG4gICAqIHJlc3VsdC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF8uY2FjaGVfID0ge1xuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgZWNMZXZlbDogbnVsbCxcbiAgICByZXN1bHQ6IG51bGxcbiAgfTtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgdG8gZW5jb2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9lY05hbWUgb3B0aW9uYWwgZXJyb3IgY29ycmVjaXRvbiBuYW1lLlxuICAgKiBEZWZhdWx0cyB0byBMIC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF8uZW5jb2RlXyA9IGZ1bmN0aW9uKGNvbnRlbnQsIG9wdF9lY05hbWUpIHtcbiAgICB2YXIgZWNMZXZlbCA9IG51bGw7XG4gICAgaWYgKG9wdF9lY05hbWUpXG4gICAgICBlY0xldmVsID0gRXJyb3JDb3JyZWN0aW9uTGV2ZWwuZ2V0QnlOYW1lKG9wdF9lY05hbWUpO1xuICAgIGVjTGV2ZWwgPSBlY0xldmVsIHx8IEVycm9yQ29ycmVjdGlvbkxldmVsLkw7XG5cbiAgICAvLyBDaGVjayBpZiByZXN1bHQgaXMgY2FjaGVkLlxuICAgIGlmIChfLmNhY2hlXy5jb250ZW50ID09IGNvbnRlbnQgJiZcbiAgICAgIF8uY2FjaGVfLmVjTGV2ZWwgPT0gZWNMZXZlbClcbiAgICAgIHJldHVybiBfLmNhY2hlXy5yZXN1bHQ7XG5cbiAgICB2YXIgcXJjb2RlID0gRW5jb2Rlci5lbmNvZGUoY29udGVudCwgZWNMZXZlbCk7XG4gICAgLy8gQ2FjaGUgcmVzdWx0LiBDdXJyZW50bHkganVzdCB0aGUgbGFzdCBjYWxsIGlzIGNhY2hlZC5cbiAgICBfLmNhY2hlXy5jb250ZW50ID0gY29udGVudDtcbiAgICBfLmNhY2hlXy5lY0xldmVsID0gZWNMZXZlbDtcbiAgICBfLmNhY2hlXy5yZXN1bHQgPSBxcmNvZGU7XG5cbiAgICByZXR1cm4gcXJjb2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB0byBlbmNvZGUuXG4gICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcyBjYW52YXMgdG8gZHJhdyBvbi5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBvcHRfbWFyZ2luIHNpemUgb2YgcXVpdCB6b25lLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9lY05hbWUgb3B0aW9uYWwgZXJyb3IgY29ycmVjaXRvbiBuYW1lLlxuICAgKiBEZWZhdWx0cyB0byBMIC5cbiAgICovXG4gIF8uZHJhd09uQ2FudmFzID0gZnVuY3Rpb24oY29udGVudCwgY2FudmFzLCBvcHRfbWFyZ2luLCBvcHRfZWNOYW1lKSB7XG4gICAgdmFyIHFyQ29kZSA9IF8uZW5jb2RlXyhjb250ZW50LCBvcHRfZWNOYW1lKTtcbiAgICB2YXIgcXVpZXQgPSBnb29nLmlzRGVmKG9wdF9tYXJnaW4pID8gb3B0X21hcmdpbiA6IHJlbmRlcmVyLlFVSUVUX1pPTkVfU0laRTtcbiAgICB2YXIgZHJhd2FibGUgPSBuZXcgdzY5Yi5xci5DYW52YXNEcmF3YWJsZShjYW52YXMpO1xuICAgIHJlbmRlcmVyLnJlbmRlcihxckNvZGUsIGRyYXdhYmxlLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQsXG4gICAgICBxdWlldCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBtaW5pbWFsIHNpemUgKHdpaHRvdXQgbWFyZ2luKSBvZiBjb250ZW50IGVuY29kZWQgYXMgcXIgY29kZS5cbiAgICogVGhpcyBlbmNvZGVzIHRoZSBjb250ZW50IGFzIHFyIGNvZGUgYW5kIHJlYWRzIG9mIGl0cyBzaXplLlxuICAgKiBTbyBpdCBpcyBxdWl0ZSBzbG93LiBIb3dldmVyIHRoZSBlbmNvZGVkIHFyIGNvZGUgaXMgY2FjaGVkLiBTbyBhXG4gICAqIHN1YnNlcXVlbnQgZHJhdyBjYWxsIHdpdGggZXF1YWwgcGFyYW1ldGVycyBpcyBjaGVhcC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgdG8gZW5jb2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9lY05hbWUgb3B0aW9uYWwgZXJyb3IgY29ycmVjaXRvbiBuYW1lLlxuICAgKiBEZWZhdWx0cyB0byBMIC5cbiAgICogQHJldHVybiB7bnVtYmVyfSBzaXplIG9mIHFyIGNvZGUuXG4gICAqL1xuICBfLmdldFNpemUgPSBmdW5jdGlvbihjb250ZW50LCBvcHRfZWNOYW1lKSB7XG4gICAgdmFyIHFyY29kZSA9IF8uZW5jb2RlXyhjb250ZW50LCBvcHRfZWNOYW1lKTtcbiAgICByZXR1cm4gcXJjb2RlLmdldE1hdHJpeCgpLmdldFdpZHRoKCk7XG4gIH07XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgdG8gZW5jb2RlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSB0byB1c2UgYXMgc3ZnIHdpZHRoL2hlaWdodC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBvcHRfbWFyZ2luIHNpemUgb2YgcXVpdCB6b25lLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9lY05hbWUgb3B0aW9uYWwgZXJyb3IgY29ycmVjaXRvbiBuYW1lLlxuICAgKiBEZWZhdWx0cyB0byBMIC5cbiAgICogQHJldHVybiB7c3RyaW5nfSBzdmcgc291cmNlLlxuICAgKi9cbiAgXy5kcmF3QXNTVkcgPSBmdW5jdGlvbihjb250ZW50LCBzaXplLCBvcHRfbWFyZ2luLCBvcHRfZWNOYW1lKSB7XG4gICAgdmFyIHFyQ29kZSA9IF8uZW5jb2RlXyhjb250ZW50LCBvcHRfZWNOYW1lKTtcbiAgICB2YXIgcXVpZXQgPSBnb29nLmlzRGVmKG9wdF9tYXJnaW4pID8gb3B0X21hcmdpbiA6IHJlbmRlcmVyLlFVSUVUX1pPTkVfU0laRTtcbiAgICB2YXIgZHJhd2FibGUgPSBuZXcgU3ZnRHJhd2FibGUoKTtcbiAgICByZW5kZXJlci5yZW5kZXIocXJDb2RlLCBkcmF3YWJsZSwgc2l6ZSwgc2l6ZSwgcXVpZXQpO1xuICAgIHJldHVybiBkcmF3YWJsZS50b1N0cmluZygpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB0byBlbmNvZGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIHRvIHVzZSBhcyBlcHMgd2lkdGgvaGVpZ2h0LlxuICAgKiBAcGFyYW0ge251bWJlcj19IG9wdF9tYXJnaW4gc2l6ZSBvZiBxdWl0IHpvbmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X2VjTmFtZSBvcHRpb25hbCBlcnJvciBjb3JyZWNpdG9uIG5hbWUuXG4gICAqIERlZmF1bHRzIHRvIEwgLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGVwcyBzb3VyY2UuXG4gICAqL1xuICBfLmRyYXdBc0VQUyA9IGZ1bmN0aW9uKGNvbnRlbnQsIHNpemUsIG9wdF9tYXJnaW4sIG9wdF9lY05hbWUpIHtcbiAgICB2YXIgcXJDb2RlID0gXy5lbmNvZGVfKGNvbnRlbnQsIG9wdF9lY05hbWUpO1xuICAgIHZhciBxdWlldCA9IGdvb2cuaXNEZWYob3B0X21hcmdpbikgPyBvcHRfbWFyZ2luIDogcmVuZGVyZXIuUVVJRVRfWk9ORV9TSVpFO1xuICAgIHZhciBkcmF3YWJsZSA9IG5ldyBFcHNEcmF3YWJsZSgpO1xuICAgIHJlbmRlcmVyLnJlbmRlcihxckNvZGUsIGRyYXdhYmxlLCBzaXplLCBzaXplLCBxdWlldCk7XG4gICAgcmV0dXJuIGRyYXdhYmxlLnRvU3RyaW5nKCk7XG4gIH07XG5cbiAgZ29vZy5leHBvcnRTeW1ib2woJ3c2OWIucXIuZW5jb2RpbmcuZHJhd09uQ2FudmFzJywgXy5kcmF3T25DYW52YXMpO1xuICBnb29nLmV4cG9ydFN5bWJvbCgndzY5Yi5xci5lbmNvZGluZy5kcmF3QXNTVkcnLCBfLmRyYXdBc1NWRyk7XG4gIGdvb2cuZXhwb3J0U3ltYm9sKCd3NjliLnFyLmVuY29kaW5nLmRyYXdBc0VQUycsIF8uZHJhd0FzRVBTKTtcbiAgZ29vZy5leHBvcnRTeW1ib2woJ3c2OWIucXIuZW5jb2RpbmcuZ2V0U2l6ZScsIF8uZ2V0U2l6ZSk7XG59KTtcbiIsIi8vIFdlIHJlcHJvZHVjZSB1bi1hbm5vdGF0ZSBsaWNlbnNlIG5vdGVzIG9mIGluY2x1ZGVkIGZpbGVzIGhlcmUsIHRvXG4vLyBhZGQgdGhlbSB0byB0aGUgY2xvc3VyZSBvdXRwdXQgb25jZS5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJhcmNvZGUuanMuXG4gKlxuICogYmFyY29kZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogIGJhcmNvZGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqICBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogIGFsb25nIHdpdGggYmFyY29kZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBMaWNlbnNlcyBvZiBpbmNsdWRlZCB0aGlyZCBzb2Z0d2FyZTpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogTGljZW5zZSBmb3IgenhpbmcgZmlsZXMgKGh0dHBzOi8vZ2l0aHViLmNvbS96eGluZy96eGluZyk6XG4gKlxuICogQ29weXJpZ2h0IDIwMDcgWlhpbmcgYXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogUG9ydGVkIHRvIEphdmFTY3JpcHQgYnkgTGF6YXIgTGFzemxvIDIwMTFcbiAqIGxhemFyc29mdEBnbWFpbC5jb20sIHd3dy5sYXphcnNvZnQuaW5mb1xuICpcbiAqIGphdmFzY3JpcHQgKGNsb3N1cmUpIHBvcnQgKGMpIDIwMTMgTWFudWVsIEJyYXVuIChtYkB3NjliLmNvbSlcbiAqXG4gKiBYWmluZyBOT1RJQ0VTOlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIE5PVElDRVMgRk9SIEJBUkNPREU0SlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBCYXJjb2RlNEpcbiAqIENvcHlyaWdodCAyMDAyLTIwMTAgSmVyZW1pYXMgTcOkcmtpXG4gKiBDb3B5cmlnaHQgMjAwNS0yMDA2IERpZXRtYXIgQsO8cmtsZVxuICpcbiAqIFBvcnRpb25zIG9mIHRoaXMgc29mdHdhcmUgd2VyZSBjb250cmlidXRlZCB1bmRlciBzZWN0aW9uIDUgb2YgdGhlXG4gKiBBcGFjaGUgTGljZW5zZS4gQ29udHJpYnV0b3JzIGFyZSBsaXN0ZWQgdW5kZXI6XG4gKiBodHRwOi8vYmFyY29kZTRqLnNvdXJjZWZvcmdlLm5ldC9jb250cmlidXRvcnMuaHRtbFxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBOT1RJQ0VTIEZPUiBKQ09NTUFOREVSXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIENvcHlyaWdodCAyMDEwIENlZHJpYyBCZXVzdCBjZWRyaWNAYmV1c3QuY29tXG4gKlxuICogKi9cblxuZ29vZy5wcm92aWRlKCd3NjliLnFyLmxpY2Vuc2VzJyk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxMiBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFZlbmRvciBwcmVmaXggZ2V0dGVycy5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZG9tLnZlbmRvcicpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuc3RyaW5nJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cudXNlckFnZW50Jyk7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBKUyB2ZW5kb3IgcHJlZml4IHVzZWQgaW4gQ1NTIHByb3BlcnRpZXMuIERpZmZlcmVudCB2ZW5kb3JzXG4gKiB1c2UgZGlmZmVyZW50IG1ldGhvZHMgb2YgY2hhbmdpbmcgdGhlIGNhc2Ugb2YgdGhlIHByb3BlcnR5IG5hbWVzLlxuICpcbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBKUyB2ZW5kb3IgcHJlZml4IG9yIG51bGwgaWYgdGhlcmUgaXMgbm9uZS5cbiAqL1xuZ29vZy5kb20udmVuZG9yLmdldFZlbmRvckpzUHJlZml4ID0gZnVuY3Rpb24oKSB7XG4gIGlmIChnb29nLnVzZXJBZ2VudC5XRUJLSVQpIHtcbiAgICByZXR1cm4gJ1dlYmtpdCc7XG4gIH0gZWxzZSBpZiAoZ29vZy51c2VyQWdlbnQuR0VDS08pIHtcbiAgICByZXR1cm4gJ01veic7XG4gIH0gZWxzZSBpZiAoZ29vZy51c2VyQWdlbnQuSUUpIHtcbiAgICByZXR1cm4gJ21zJztcbiAgfSBlbHNlIGlmIChnb29nLnVzZXJBZ2VudC5PUEVSQSkge1xuICAgIHJldHVybiAnTyc7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2ZW5kb3IgcHJlZml4IHVzZWQgaW4gQ1NTIHByb3BlcnRpZXMuXG4gKlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIHZlbmRvciBwcmVmaXggb3IgbnVsbCBpZiB0aGVyZSBpcyBub25lLlxuICovXG5nb29nLmRvbS52ZW5kb3IuZ2V0VmVuZG9yUHJlZml4ID0gZnVuY3Rpb24oKSB7XG4gIGlmIChnb29nLnVzZXJBZ2VudC5XRUJLSVQpIHtcbiAgICByZXR1cm4gJy13ZWJraXQnO1xuICB9IGVsc2UgaWYgKGdvb2cudXNlckFnZW50LkdFQ0tPKSB7XG4gICAgcmV0dXJuICctbW96JztcbiAgfSBlbHNlIGlmIChnb29nLnVzZXJBZ2VudC5JRSkge1xuICAgIHJldHVybiAnLW1zJztcbiAgfSBlbHNlIGlmIChnb29nLnVzZXJBZ2VudC5PUEVSQSkge1xuICAgIHJldHVybiAnLW8nO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5TmFtZSBBIHByb3BlcnR5IG5hbWUuXG4gKiBAcGFyYW0geyFPYmplY3Q9fSBvcHRfb2JqZWN0IElmIHByb3ZpZGVkLCB3ZSB2ZXJpZnkgaWYgdGhlIHByb3BlcnR5IGV4aXN0cyBpblxuICogICAgIHRoZSBvYmplY3QuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBBIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eSBuYW1lLCBvciBudWxsIGlmIGl0IGRvZXMgbm90XG4gKiAgICAgZXhpc3QuXG4gKi9cbmdvb2cuZG9tLnZlbmRvci5nZXRQcmVmaXhlZFByb3BlcnR5TmFtZSA9IGZ1bmN0aW9uKHByb3BlcnR5TmFtZSwgb3B0X29iamVjdCkge1xuICAvLyBXZSBmaXJzdCBjaGVjayBmb3IgYSBub24tcHJlZml4ZWQgcHJvcGVydHksIGlmIGF2YWlsYWJsZS5cbiAgaWYgKG9wdF9vYmplY3QgJiYgcHJvcGVydHlOYW1lIGluIG9wdF9vYmplY3QpIHtcbiAgICByZXR1cm4gcHJvcGVydHlOYW1lO1xuICB9XG4gIHZhciBwcmVmaXggPSBnb29nLmRvbS52ZW5kb3IuZ2V0VmVuZG9ySnNQcmVmaXgoKTtcbiAgaWYgKHByZWZpeCkge1xuICAgIHByZWZpeCA9IHByZWZpeC50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBwcmVmaXhlZFByb3BlcnR5TmFtZSA9IHByZWZpeCArIGdvb2cuc3RyaW5nLnRvVGl0bGVDYXNlKHByb3BlcnR5TmFtZSk7XG4gICAgcmV0dXJuICghZ29vZy5pc0RlZihvcHRfb2JqZWN0KSB8fCBwcmVmaXhlZFByb3BlcnR5TmFtZSBpbiBvcHRfb2JqZWN0KSA/XG4gICAgICAgIHByZWZpeGVkUHJvcGVydHlOYW1lIDogbnVsbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEFuIGV2ZW50IHR5cGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgbG93ZXItY2FzZWQgdmVuZG9yIHByZWZpeGVkIGV2ZW50IHR5cGUuXG4gKi9cbmdvb2cuZG9tLnZlbmRvci5nZXRQcmVmaXhlZEV2ZW50VHlwZSA9IGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuICB2YXIgcHJlZml4ID0gZ29vZy5kb20udmVuZG9yLmdldFZlbmRvckpzUHJlZml4KCkgfHwgJyc7XG4gIHJldHVybiAocHJlZml4ICsgZXZlbnRUeXBlKS50b0xvd2VyQ2FzZSgpO1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDA2IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSB1dGlsaXR5IGNsYXNzIGZvciByZXByZXNlbnRpbmcgYSBudW1lcmljIGJveC5cbiAqL1xuXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5tYXRoLkJveCcpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cubWF0aC5Db29yZGluYXRlJyk7XG5cblxuXG4vKipcbiAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgYSBib3guIEEgYm94IGlzIHNwZWNpZmllZCBhcyBhIHRvcCwgcmlnaHQsIGJvdHRvbSxcbiAqIGFuZCBsZWZ0LiBBIGJveCBpcyB1c2VmdWwgZm9yIHJlcHJlc2VudGluZyBtYXJnaW5zIGFuZCBwYWRkaW5nLlxuICpcbiAqIFRoaXMgY2xhc3MgYXNzdW1lcyAnc2NyZWVuIGNvb3JkaW5hdGVzJzogbGFyZ2VyIFkgY29vcmRpbmF0ZXMgYXJlIGZ1cnRoZXJcbiAqIGZyb20gdGhlIHRvcCBvZiB0aGUgc2NyZWVuLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgVG9wLlxuICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFJpZ2h0LlxuICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSBCb3R0b20uXG4gKiBAcGFyYW0ge251bWJlcn0gbGVmdCBMZWZ0LlxuICogQHN0cnVjdFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmdvb2cubWF0aC5Cb3ggPSBmdW5jdGlvbih0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQpIHtcbiAgLyoqXG4gICAqIFRvcFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy50b3AgPSB0b3A7XG5cbiAgLyoqXG4gICAqIFJpZ2h0XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG5cbiAgLyoqXG4gICAqIEJvdHRvbVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5ib3R0b20gPSBib3R0b207XG5cbiAgLyoqXG4gICAqIExlZnRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMubGVmdCA9IGxlZnQ7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIEJveCBieSBib3VuZGluZyBhIGNvbGxlY3Rpb24gb2YgZ29vZy5tYXRoLkNvb3JkaW5hdGUgb2JqZWN0c1xuICogQHBhcmFtIHsuLi5nb29nLm1hdGguQ29vcmRpbmF0ZX0gdmFyX2FyZ3MgQ29vcmRpbmF0ZXMgdG8gYmUgaW5jbHVkZWQgaW5zaWRlXG4gKiAgICAgdGhlIGJveC5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguQm94fSBBIEJveCBjb250YWluaW5nIGFsbCB0aGUgc3BlY2lmaWVkIENvb3JkaW5hdGVzLlxuICovXG5nb29nLm1hdGguQm94LmJvdW5kaW5nQm94ID0gZnVuY3Rpb24odmFyX2FyZ3MpIHtcbiAgdmFyIGJveCA9IG5ldyBnb29nLm1hdGguQm94KGFyZ3VtZW50c1swXS55LCBhcmd1bWVudHNbMF0ueCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXS55LCBhcmd1bWVudHNbMF0ueCk7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgYm94LmV4cGFuZFRvSW5jbHVkZUNvb3JkaW5hdGUoYXJndW1lbnRzW2ldKTtcbiAgfVxuICByZXR1cm4gYm94O1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn0gd2lkdGggVGhlIHdpZHRoIG9mIHRoaXMgQm94LlxuICovXG5nb29nLm1hdGguQm94LnByb3RvdHlwZS5nZXRXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5yaWdodCAtIHRoaXMubGVmdDtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoaXMgQm94LlxuICovXG5nb29nLm1hdGguQm94LnByb3RvdHlwZS5nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuYm90dG9tIC0gdGhpcy50b3A7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhlIGJveCB3aXRoIHRoZSBzYW1lIGRpbWVuc2lvbnMuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkJveH0gQSBjbG9uZSBvZiB0aGlzIEJveC5cbiAqL1xuZ29vZy5tYXRoLkJveC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBnb29nLm1hdGguQm94KHRoaXMudG9wLCB0aGlzLnJpZ2h0LCB0aGlzLmJvdHRvbSwgdGhpcy5sZWZ0KTtcbn07XG5cblxuaWYgKGdvb2cuREVCVUcpIHtcbiAgLyoqXG4gICAqIFJldHVybnMgYSBuaWNlIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGJveC5cbiAgICogQHJldHVybiB7c3RyaW5nfSBJbiB0aGUgZm9ybSAoNTB0LCA3M3IsIDI0YiwgMTNsKS5cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnb29nLm1hdGguQm94LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnKCcgKyB0aGlzLnRvcCArICd0LCAnICsgdGhpcy5yaWdodCArICdyLCAnICsgdGhpcy5ib3R0b20gKyAnYiwgJyArXG4gICAgICAgICAgIHRoaXMubGVmdCArICdsKSc7XG4gIH07XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGJveCBjb250YWlucyBhIGNvb3JkaW5hdGUgb3IgYW5vdGhlciBib3guXG4gKlxuICogQHBhcmFtIHtnb29nLm1hdGguQ29vcmRpbmF0ZXxnb29nLm1hdGguQm94fSBvdGhlciBBIENvb3JkaW5hdGUgb3IgYSBCb3guXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBib3ggY29udGFpbnMgdGhlIGNvb3JkaW5hdGUgb3Igb3RoZXIgYm94LlxuICovXG5nb29nLm1hdGguQm94LnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gIHJldHVybiBnb29nLm1hdGguQm94LmNvbnRhaW5zKHRoaXMsIG90aGVyKTtcbn07XG5cblxuLyoqXG4gKiBFeHBhbmRzIGJveCB3aXRoIHRoZSBnaXZlbiBtYXJnaW5zLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfGdvb2cubWF0aC5Cb3h9IHRvcCBUb3AgbWFyZ2luIG9yIGJveCB3aXRoIGFsbCBtYXJnaW5zLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfcmlnaHQgUmlnaHQgbWFyZ2luLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfYm90dG9tIEJvdHRvbSBtYXJnaW4uXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9sZWZ0IExlZnQgbWFyZ2luLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Cb3h9IEEgcmVmZXJlbmNlIHRvIHRoaXMgQm94LlxuICovXG5nb29nLm1hdGguQm94LnByb3RvdHlwZS5leHBhbmQgPSBmdW5jdGlvbih0b3AsIG9wdF9yaWdodCwgb3B0X2JvdHRvbSxcbiAgICBvcHRfbGVmdCkge1xuICBpZiAoZ29vZy5pc09iamVjdCh0b3ApKSB7XG4gICAgdGhpcy50b3AgLT0gdG9wLnRvcDtcbiAgICB0aGlzLnJpZ2h0ICs9IHRvcC5yaWdodDtcbiAgICB0aGlzLmJvdHRvbSArPSB0b3AuYm90dG9tO1xuICAgIHRoaXMubGVmdCAtPSB0b3AubGVmdDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnRvcCAtPSB0b3A7XG4gICAgdGhpcy5yaWdodCArPSBvcHRfcmlnaHQ7XG4gICAgdGhpcy5ib3R0b20gKz0gb3B0X2JvdHRvbTtcbiAgICB0aGlzLmxlZnQgLT0gb3B0X2xlZnQ7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBFeHBhbmQgdGhpcyBib3ggdG8gaW5jbHVkZSBhbm90aGVyIGJveC5cbiAqIE5PVEUodXNlcik6IFRoaXMgaXMgdXNlZCBpbiBjb2RlIHRoYXQgbmVlZHMgdG8gYmUgdmVyeSBmYXN0LCBwbGVhc2UgZG9uJ3RcbiAqIGFkZCBmdW5jdGlvbmFsaXR5IHRvIHRoaXMgZnVuY3Rpb24gYXQgdGhlIGV4cGVuc2Ugb2Ygc3BlZWQgKHZhcmlhYmxlXG4gKiBhcmd1bWVudHMsIGFjY2VwdGluZyBtdWx0aXBsZSBhcmd1bWVudCB0eXBlcywgZXRjKS5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLkJveH0gYm94IFRoZSBib3ggdG8gaW5jbHVkZSBpbiB0aGlzIG9uZS5cbiAqL1xuZ29vZy5tYXRoLkJveC5wcm90b3R5cGUuZXhwYW5kVG9JbmNsdWRlID0gZnVuY3Rpb24oYm94KSB7XG4gIHRoaXMubGVmdCA9IE1hdGgubWluKHRoaXMubGVmdCwgYm94LmxlZnQpO1xuICB0aGlzLnRvcCA9IE1hdGgubWluKHRoaXMudG9wLCBib3gudG9wKTtcbiAgdGhpcy5yaWdodCA9IE1hdGgubWF4KHRoaXMucmlnaHQsIGJveC5yaWdodCk7XG4gIHRoaXMuYm90dG9tID0gTWF0aC5tYXgodGhpcy5ib3R0b20sIGJveC5ib3R0b20pO1xufTtcblxuXG4vKipcbiAqIEV4cGFuZCB0aGlzIGJveCB0byBpbmNsdWRlIHRoZSBjb29yZGluYXRlLlxuICogQHBhcmFtIHshZ29vZy5tYXRoLkNvb3JkaW5hdGV9IGNvb3JkIFRoZSBjb29yZGluYXRlIHRvIGJlIGluY2x1ZGVkXG4gKiAgICAgaW5zaWRlIHRoZSBib3guXG4gKi9cbmdvb2cubWF0aC5Cb3gucHJvdG90eXBlLmV4cGFuZFRvSW5jbHVkZUNvb3JkaW5hdGUgPSBmdW5jdGlvbihjb29yZCkge1xuICB0aGlzLnRvcCA9IE1hdGgubWluKHRoaXMudG9wLCBjb29yZC55KTtcbiAgdGhpcy5yaWdodCA9IE1hdGgubWF4KHRoaXMucmlnaHQsIGNvb3JkLngpO1xuICB0aGlzLmJvdHRvbSA9IE1hdGgubWF4KHRoaXMuYm90dG9tLCBjb29yZC55KTtcbiAgdGhpcy5sZWZ0ID0gTWF0aC5taW4odGhpcy5sZWZ0LCBjb29yZC54KTtcbn07XG5cblxuLyoqXG4gKiBDb21wYXJlcyBib3hlcyBmb3IgZXF1YWxpdHkuXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5Cb3h9IGEgQSBCb3guXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5Cb3h9IGIgQSBCb3guXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmZiB0aGUgYm94ZXMgYXJlIGVxdWFsLCBvciBpZiBib3RoIGFyZSBudWxsLlxuICovXG5nb29nLm1hdGguQm94LmVxdWFscyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgaWYgKGEgPT0gYikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICghYSB8fCAhYikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gYS50b3AgPT0gYi50b3AgJiYgYS5yaWdodCA9PSBiLnJpZ2h0ICYmXG4gICAgICAgICBhLmJvdHRvbSA9PSBiLmJvdHRvbSAmJiBhLmxlZnQgPT0gYi5sZWZ0O1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBhIGJveCBjb250YWlucyBhIGNvb3JkaW5hdGUgb3IgYW5vdGhlciBib3guXG4gKlxuICogQHBhcmFtIHtnb29nLm1hdGguQm94fSBib3ggQSBCb3guXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5Db29yZGluYXRlfGdvb2cubWF0aC5Cb3h9IG90aGVyIEEgQ29vcmRpbmF0ZSBvciBhIEJveC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGJveCBjb250YWlucyB0aGUgY29vcmRpbmF0ZSBvciBvdGhlciBib3guXG4gKi9cbmdvb2cubWF0aC5Cb3guY29udGFpbnMgPSBmdW5jdGlvbihib3gsIG90aGVyKSB7XG4gIGlmICghYm94IHx8ICFvdGhlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChvdGhlciBpbnN0YW5jZW9mIGdvb2cubWF0aC5Cb3gpIHtcbiAgICByZXR1cm4gb3RoZXIubGVmdCA+PSBib3gubGVmdCAmJiBvdGhlci5yaWdodCA8PSBib3gucmlnaHQgJiZcbiAgICAgICAgb3RoZXIudG9wID49IGJveC50b3AgJiYgb3RoZXIuYm90dG9tIDw9IGJveC5ib3R0b207XG4gIH1cblxuICAvLyBvdGhlciBpcyBhIENvb3JkaW5hdGUuXG4gIHJldHVybiBvdGhlci54ID49IGJveC5sZWZ0ICYmIG90aGVyLnggPD0gYm94LnJpZ2h0ICYmXG4gICAgICAgICBvdGhlci55ID49IGJveC50b3AgJiYgb3RoZXIueSA8PSBib3guYm90dG9tO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJlbGF0aXZlIHggcG9zaXRpb24gb2YgYSBjb29yZGluYXRlIGNvbXBhcmVkIHRvIGEgYm94LiAgUmV0dXJuc1xuICogemVybyBpZiB0aGUgY29vcmRpbmF0ZSBpcyBpbnNpZGUgdGhlIGJveC5cbiAqXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5Cb3h9IGJveCBBIEJveC5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLkNvb3JkaW5hdGV9IGNvb3JkIEEgQ29vcmRpbmF0ZS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHggcG9zaXRpb24gb2Yge0Bjb2RlIGNvb3JkfSByZWxhdGl2ZSB0byB0aGUgbmVhcmVzdFxuICogICAgIHNpZGUgb2Yge0Bjb2RlIGJveH0sIG9yIHplcm8gaWYge0Bjb2RlIGNvb3JkfSBpcyBpbnNpZGUge0Bjb2RlIGJveH0uXG4gKi9cbmdvb2cubWF0aC5Cb3gucmVsYXRpdmVQb3NpdGlvblggPSBmdW5jdGlvbihib3gsIGNvb3JkKSB7XG4gIGlmIChjb29yZC54IDwgYm94LmxlZnQpIHtcbiAgICByZXR1cm4gY29vcmQueCAtIGJveC5sZWZ0O1xuICB9IGVsc2UgaWYgKGNvb3JkLnggPiBib3gucmlnaHQpIHtcbiAgICByZXR1cm4gY29vcmQueCAtIGJveC5yaWdodDtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZWxhdGl2ZSB5IHBvc2l0aW9uIG9mIGEgY29vcmRpbmF0ZSBjb21wYXJlZCB0byBhIGJveC4gIFJldHVybnNcbiAqIHplcm8gaWYgdGhlIGNvb3JkaW5hdGUgaXMgaW5zaWRlIHRoZSBib3guXG4gKlxuICogQHBhcmFtIHtnb29nLm1hdGguQm94fSBib3ggQSBCb3guXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5Db29yZGluYXRlfSBjb29yZCBBIENvb3JkaW5hdGUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB5IHBvc2l0aW9uIG9mIHtAY29kZSBjb29yZH0gcmVsYXRpdmUgdG8gdGhlIG5lYXJlc3RcbiAqICAgICBzaWRlIG9mIHtAY29kZSBib3h9LCBvciB6ZXJvIGlmIHtAY29kZSBjb29yZH0gaXMgaW5zaWRlIHtAY29kZSBib3h9LlxuICovXG5nb29nLm1hdGguQm94LnJlbGF0aXZlUG9zaXRpb25ZID0gZnVuY3Rpb24oYm94LCBjb29yZCkge1xuICBpZiAoY29vcmQueSA8IGJveC50b3ApIHtcbiAgICByZXR1cm4gY29vcmQueSAtIGJveC50b3A7XG4gIH0gZWxzZSBpZiAoY29vcmQueSA+IGJveC5ib3R0b20pIHtcbiAgICByZXR1cm4gY29vcmQueSAtIGJveC5ib3R0b207XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGlzdGFuY2UgYmV0d2VlbiBhIGNvb3JkaW5hdGUgYW5kIHRoZSBuZWFyZXN0IGNvcm5lci9zaWRlIG9mIGFcbiAqIGJveC4gUmV0dXJucyB6ZXJvIGlmIHRoZSBjb29yZGluYXRlIGlzIGluc2lkZSB0aGUgYm94LlxuICpcbiAqIEBwYXJhbSB7Z29vZy5tYXRoLkJveH0gYm94IEEgQm94LlxuICogQHBhcmFtIHtnb29nLm1hdGguQ29vcmRpbmF0ZX0gY29vcmQgQSBDb29yZGluYXRlLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgZGlzdGFuY2UgYmV0d2VlbiB7QGNvZGUgY29vcmR9IGFuZCB0aGUgbmVhcmVzdFxuICogICAgIGNvcm5lci9zaWRlIG9mIHtAY29kZSBib3h9LCBvciB6ZXJvIGlmIHtAY29kZSBjb29yZH0gaXMgaW5zaWRlXG4gKiAgICAge0Bjb2RlIGJveH0uXG4gKi9cbmdvb2cubWF0aC5Cb3guZGlzdGFuY2UgPSBmdW5jdGlvbihib3gsIGNvb3JkKSB7XG4gIHZhciB4ID0gZ29vZy5tYXRoLkJveC5yZWxhdGl2ZVBvc2l0aW9uWChib3gsIGNvb3JkKTtcbiAgdmFyIHkgPSBnb29nLm1hdGguQm94LnJlbGF0aXZlUG9zaXRpb25ZKGJveCwgY29vcmQpO1xuICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0d28gYm94ZXMgaW50ZXJzZWN0LlxuICpcbiAqIEBwYXJhbSB7Z29vZy5tYXRoLkJveH0gYSBBIEJveC5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLkJveH0gYiBBIHNlY29uZCBCb3guXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBib3hlcyBpbnRlcnNlY3QuXG4gKi9cbmdvb2cubWF0aC5Cb3guaW50ZXJzZWN0cyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIChhLmxlZnQgPD0gYi5yaWdodCAmJiBiLmxlZnQgPD0gYS5yaWdodCAmJlxuICAgICAgICAgIGEudG9wIDw9IGIuYm90dG9tICYmIGIudG9wIDw9IGEuYm90dG9tKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdHdvIGJveGVzIHdvdWxkIGludGVyc2VjdCB3aXRoIGFkZGl0aW9uYWwgcGFkZGluZy5cbiAqXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5Cb3h9IGEgQSBCb3guXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5Cb3h9IGIgQSBzZWNvbmQgQm94LlxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmcgVGhlIGFkZGl0aW9uYWwgcGFkZGluZy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGJveGVzIGludGVyc2VjdC5cbiAqL1xuZ29vZy5tYXRoLkJveC5pbnRlcnNlY3RzV2l0aFBhZGRpbmcgPSBmdW5jdGlvbihhLCBiLCBwYWRkaW5nKSB7XG4gIHJldHVybiAoYS5sZWZ0IDw9IGIucmlnaHQgKyBwYWRkaW5nICYmIGIubGVmdCA8PSBhLnJpZ2h0ICsgcGFkZGluZyAmJlxuICAgICAgICAgIGEudG9wIDw9IGIuYm90dG9tICsgcGFkZGluZyAmJiBiLnRvcCA8PSBhLmJvdHRvbSArIHBhZGRpbmcpO1xufTtcblxuXG4vKipcbiAqIFJvdW5kcyB0aGUgZmllbGRzIHRvIHRoZSBuZXh0IGxhcmdlciBpbnRlZ2VyIHZhbHVlcy5cbiAqXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkJveH0gVGhpcyBib3ggd2l0aCBjZWlsJ2QgZmllbGRzLlxuICovXG5nb29nLm1hdGguQm94LnByb3RvdHlwZS5jZWlsID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudG9wID0gTWF0aC5jZWlsKHRoaXMudG9wKTtcbiAgdGhpcy5yaWdodCA9IE1hdGguY2VpbCh0aGlzLnJpZ2h0KTtcbiAgdGhpcy5ib3R0b20gPSBNYXRoLmNlaWwodGhpcy5ib3R0b20pO1xuICB0aGlzLmxlZnQgPSBNYXRoLmNlaWwodGhpcy5sZWZ0KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogUm91bmRzIHRoZSBmaWVsZHMgdG8gdGhlIG5leHQgc21hbGxlciBpbnRlZ2VyIHZhbHVlcy5cbiAqXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkJveH0gVGhpcyBib3ggd2l0aCBmbG9vcmVkIGZpZWxkcy5cbiAqL1xuZ29vZy5tYXRoLkJveC5wcm90b3R5cGUuZmxvb3IgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy50b3AgPSBNYXRoLmZsb29yKHRoaXMudG9wKTtcbiAgdGhpcy5yaWdodCA9IE1hdGguZmxvb3IodGhpcy5yaWdodCk7XG4gIHRoaXMuYm90dG9tID0gTWF0aC5mbG9vcih0aGlzLmJvdHRvbSk7XG4gIHRoaXMubGVmdCA9IE1hdGguZmxvb3IodGhpcy5sZWZ0KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogUm91bmRzIHRoZSBmaWVsZHMgdG8gbmVhcmVzdCBpbnRlZ2VyIHZhbHVlcy5cbiAqXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkJveH0gVGhpcyBib3ggd2l0aCByb3VuZGVkIGZpZWxkcy5cbiAqL1xuZ29vZy5tYXRoLkJveC5wcm90b3R5cGUucm91bmQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy50b3AgPSBNYXRoLnJvdW5kKHRoaXMudG9wKTtcbiAgdGhpcy5yaWdodCA9IE1hdGgucm91bmQodGhpcy5yaWdodCk7XG4gIHRoaXMuYm90dG9tID0gTWF0aC5yb3VuZCh0aGlzLmJvdHRvbSk7XG4gIHRoaXMubGVmdCA9IE1hdGgucm91bmQodGhpcy5sZWZ0KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogVHJhbnNsYXRlcyB0aGlzIGJveCBieSB0aGUgZ2l2ZW4gb2Zmc2V0cy4gSWYgYSB7QGNvZGUgZ29vZy5tYXRoLkNvb3JkaW5hdGV9XG4gKiBpcyBnaXZlbiwgdGhlbiB0aGUgbGVmdCBhbmQgcmlnaHQgdmFsdWVzIGFyZSB0cmFuc2xhdGVkIGJ5IHRoZSBjb29yZGluYXRlJ3NcbiAqIHggdmFsdWUgYW5kIHRoZSB0b3AgYW5kIGJvdHRvbSB2YWx1ZXMgYXJlIHRyYW5zbGF0ZWQgYnkgdGhlIGNvb3JkaW5hdGUncyB5XG4gKiB2YWx1ZS4gIE90aGVyd2lzZSwge0Bjb2RlIHR4fSBhbmQge0Bjb2RlIG9wdF90eX0gYXJlIHVzZWQgdG8gdHJhbnNsYXRlIHRoZSB4XG4gKiBhbmQgeSBkaW1lbnNpb24gdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfGdvb2cubWF0aC5Db29yZGluYXRlfSB0eCBUaGUgdmFsdWUgdG8gdHJhbnNsYXRlIHRoZSB4XG4gKiAgICAgZGltZW5zaW9uIHZhbHVlcyBieSBvciB0aGUgdGhlIGNvb3JkaW5hdGUgdG8gdHJhbnNsYXRlIHRoaXMgYm94IGJ5LlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfdHkgVGhlIHZhbHVlIHRvIHRyYW5zbGF0ZSB5IGRpbWVuc2lvbiB2YWx1ZXMgYnkuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkJveH0gVGhpcyBib3ggYWZ0ZXIgdHJhbnNsYXRpbmcuXG4gKi9cbmdvb2cubWF0aC5Cb3gucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKHR4LCBvcHRfdHkpIHtcbiAgaWYgKHR4IGluc3RhbmNlb2YgZ29vZy5tYXRoLkNvb3JkaW5hdGUpIHtcbiAgICB0aGlzLmxlZnQgKz0gdHgueDtcbiAgICB0aGlzLnJpZ2h0ICs9IHR4Lng7XG4gICAgdGhpcy50b3AgKz0gdHgueTtcbiAgICB0aGlzLmJvdHRvbSArPSB0eC55O1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGVmdCArPSB0eDtcbiAgICB0aGlzLnJpZ2h0ICs9IHR4O1xuICAgIGlmIChnb29nLmlzTnVtYmVyKG9wdF90eSkpIHtcbiAgICAgIHRoaXMudG9wICs9IG9wdF90eTtcbiAgICAgIHRoaXMuYm90dG9tICs9IG9wdF90eTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogU2NhbGVzIHRoaXMgY29vcmRpbmF0ZSBieSB0aGUgZ2l2ZW4gc2NhbGUgZmFjdG9ycy4gVGhlIHggYW5kIHkgZGltZW5zaW9uXG4gKiB2YWx1ZXMgYXJlIHNjYWxlZCBieSB7QGNvZGUgc3h9IGFuZCB7QGNvZGUgb3B0X3N5fSByZXNwZWN0aXZlbHkuXG4gKiBJZiB7QGNvZGUgb3B0X3N5fSBpcyBub3QgZ2l2ZW4sIHRoZW4ge0Bjb2RlIHN4fSBpcyB1c2VkIGZvciBib3RoIHggYW5kIHkuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHN4IFRoZSBzY2FsZSBmYWN0b3IgdG8gdXNlIGZvciB0aGUgeCBkaW1lbnNpb24uXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9zeSBUaGUgc2NhbGUgZmFjdG9yIHRvIHVzZSBmb3IgdGhlIHkgZGltZW5zaW9uLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Cb3h9IFRoaXMgYm94IGFmdGVyIHNjYWxpbmcuXG4gKi9cbmdvb2cubWF0aC5Cb3gucHJvdG90eXBlLnNjYWxlID0gZnVuY3Rpb24oc3gsIG9wdF9zeSkge1xuICB2YXIgc3kgPSBnb29nLmlzTnVtYmVyKG9wdF9zeSkgPyBvcHRfc3kgOiBzeDtcbiAgdGhpcy5sZWZ0ICo9IHN4O1xuICB0aGlzLnJpZ2h0ICo9IHN4O1xuICB0aGlzLnRvcCAqPSBzeTtcbiAgdGhpcy5ib3R0b20gKj0gc3k7XG4gIHJldHVybiB0aGlzO1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDA2IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSB1dGlsaXR5IGNsYXNzIGZvciByZXByZXNlbnRpbmcgcmVjdGFuZ2xlcy5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cubWF0aC5SZWN0Jyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5tYXRoLkJveCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm1hdGguQ29vcmRpbmF0ZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm1hdGguU2l6ZScpO1xuXG5cblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIHJlY3Rhbmd1bGFyIHJlZ2lvbnMuXG4gKiBAcGFyYW0ge251bWJlcn0geCBMZWZ0LlxuICogQHBhcmFtIHtudW1iZXJ9IHkgVG9wLlxuICogQHBhcmFtIHtudW1iZXJ9IHcgV2lkdGguXG4gKiBAcGFyYW0ge251bWJlcn0gaCBIZWlnaHQuXG4gKiBAc3RydWN0XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZ29vZy5tYXRoLlJlY3QgPSBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICB0aGlzLmxlZnQgPSB4O1xuXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICB0aGlzLnRvcCA9IHk7XG5cbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gIHRoaXMud2lkdGggPSB3O1xuXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICB0aGlzLmhlaWdodCA9IGg7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7IWdvb2cubWF0aC5SZWN0fSBBIG5ldyBjb3B5IG9mIHRoaXMgUmVjdGFuZ2xlLlxuICovXG5nb29nLm1hdGguUmVjdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBnb29nLm1hdGguUmVjdCh0aGlzLmxlZnQsIHRoaXMudG9wLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBCb3ggb2JqZWN0IHdpdGggdGhlIHNhbWUgcG9zaXRpb24gYW5kIGRpbWVuc2lvbnMgYXMgdGhpc1xuICogcmVjdGFuZ2xlLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Cb3h9IEEgbmV3IEJveCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIFJlY3RhbmdsZS5cbiAqL1xuZ29vZy5tYXRoLlJlY3QucHJvdG90eXBlLnRvQm94ID0gZnVuY3Rpb24oKSB7XG4gIHZhciByaWdodCA9IHRoaXMubGVmdCArIHRoaXMud2lkdGg7XG4gIHZhciBib3R0b20gPSB0aGlzLnRvcCArIHRoaXMuaGVpZ2h0O1xuICByZXR1cm4gbmV3IGdvb2cubWF0aC5Cb3godGhpcy50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdCk7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBSZWN0IG9iamVjdCB3aXRoIHRoZSBwb3NpdGlvbiBhbmQgc2l6ZSBnaXZlbi5cbiAqIEBwYXJhbSB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBwb3NpdGlvbiBUaGUgdG9wLWxlZnQgY29vcmRpbmF0ZSBvZiB0aGUgUmVjdFxuICogQHBhcmFtIHshZ29vZy5tYXRoLlNpemV9IHNpemUgVGhlIHNpemUgb2YgdGhlIFJlY3RcbiAqIEByZXR1cm4geyFnb29nLm1hdGguUmVjdH0gQSBuZXcgUmVjdCBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiBwb3NpdGlvbiBhbmRcbiAqICAgICBzaXplLlxuICovXG5nb29nLm1hdGguUmVjdC5jcmVhdGVGcm9tUG9zaXRpb25BbmRTaXplID0gZnVuY3Rpb24ocG9zaXRpb24sIHNpemUpIHtcbiAgcmV0dXJuIG5ldyBnb29nLm1hdGguUmVjdChwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBzaXplLndpZHRoLCBzaXplLmhlaWdodCk7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBSZWN0IG9iamVjdCB3aXRoIHRoZSBzYW1lIHBvc2l0aW9uIGFuZCBkaW1lbnNpb25zIGFzIGEgZ2l2ZW5cbiAqIEJveC4gIE5vdGUgdGhhdCB0aGlzIGlzIG9ubHkgdGhlIGludmVyc2Ugb2YgdG9Cb3ggaWYgbGVmdC90b3AgYXJlIGRlZmluZWQuXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5Cb3h9IGJveCBBIGJveC5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguUmVjdH0gQSBuZXcgUmVjdCBpbml0aWFsaXplZCB3aXRoIHRoZSBib3gncyBwb3NpdGlvblxuICogICAgIGFuZCBzaXplLlxuICovXG5nb29nLm1hdGguUmVjdC5jcmVhdGVGcm9tQm94ID0gZnVuY3Rpb24oYm94KSB7XG4gIHJldHVybiBuZXcgZ29vZy5tYXRoLlJlY3QoYm94LmxlZnQsIGJveC50b3AsXG4gICAgICBib3gucmlnaHQgLSBib3gubGVmdCwgYm94LmJvdHRvbSAtIGJveC50b3ApO1xufTtcblxuXG5pZiAoZ29vZy5ERUJVRykge1xuICAvKipcbiAgICogUmV0dXJucyBhIG5pY2Ugc3RyaW5nIHJlcHJlc2VudGluZyBzaXplIGFuZCBkaW1lbnNpb25zIG9mIHJlY3RhbmdsZS5cbiAgICogQHJldHVybiB7c3RyaW5nfSBJbiB0aGUgZm9ybSAoNTAsIDczIC0gNzV3IHggMjVoKS5cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnb29nLm1hdGguUmVjdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJygnICsgdGhpcy5sZWZ0ICsgJywgJyArIHRoaXMudG9wICsgJyAtICcgKyB0aGlzLndpZHRoICsgJ3cgeCAnICtcbiAgICAgICAgICAgdGhpcy5oZWlnaHQgKyAnaCknO1xuICB9O1xufVxuXG5cbi8qKlxuICogQ29tcGFyZXMgcmVjdGFuZ2xlcyBmb3IgZXF1YWxpdHkuXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5SZWN0fSBhIEEgUmVjdGFuZ2xlLlxuICogQHBhcmFtIHtnb29nLm1hdGguUmVjdH0gYiBBIFJlY3RhbmdsZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWZmIHRoZSByZWN0YW5nbGVzIGhhdmUgdGhlIHNhbWUgbGVmdCwgdG9wLCB3aWR0aCxcbiAqICAgICBhbmQgaGVpZ2h0LCBvciBpZiBib3RoIGFyZSBudWxsLlxuICovXG5nb29nLm1hdGguUmVjdC5lcXVhbHMgPSBmdW5jdGlvbihhLCBiKSB7XG4gIGlmIChhID09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIWEgfHwgIWIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGEubGVmdCA9PSBiLmxlZnQgJiYgYS53aWR0aCA9PSBiLndpZHRoICYmXG4gICAgICAgICBhLnRvcCA9PSBiLnRvcCAmJiBhLmhlaWdodCA9PSBiLmhlaWdodDtcbn07XG5cblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoaXMgcmVjdGFuZ2xlIGFuZCB0aGUgcmVjdGFuZ2xlIHBhcmFtZXRlci4gIElmXG4gKiB0aGVyZSBpcyBubyBpbnRlcnNlY3Rpb24sIHJldHVybnMgZmFsc2UgYW5kIGxlYXZlcyB0aGlzIHJlY3RhbmdsZSBhcyBpcy5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLlJlY3R9IHJlY3QgQSBSZWN0YW5nbGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmZiB0aGlzIHJlY3RhbmdsZSBpbnRlcnNlY3RzIHdpdGggdGhlIHBhcmFtZXRlci5cbiAqL1xuZ29vZy5tYXRoLlJlY3QucHJvdG90eXBlLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKHJlY3QpIHtcbiAgdmFyIHgwID0gTWF0aC5tYXgodGhpcy5sZWZ0LCByZWN0LmxlZnQpO1xuICB2YXIgeDEgPSBNYXRoLm1pbih0aGlzLmxlZnQgKyB0aGlzLndpZHRoLCByZWN0LmxlZnQgKyByZWN0LndpZHRoKTtcblxuICBpZiAoeDAgPD0geDEpIHtcbiAgICB2YXIgeTAgPSBNYXRoLm1heCh0aGlzLnRvcCwgcmVjdC50b3ApO1xuICAgIHZhciB5MSA9IE1hdGgubWluKHRoaXMudG9wICsgdGhpcy5oZWlnaHQsIHJlY3QudG9wICsgcmVjdC5oZWlnaHQpO1xuXG4gICAgaWYgKHkwIDw9IHkxKSB7XG4gICAgICB0aGlzLmxlZnQgPSB4MDtcbiAgICAgIHRoaXMudG9wID0geTA7XG4gICAgICB0aGlzLndpZHRoID0geDEgLSB4MDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0geTEgLSB5MDtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gb2YgdHdvIHJlY3RhbmdsZXMuIFR3byByZWN0YW5nbGVzIGludGVyc2VjdCBpZiB0aGV5XG4gKiB0b3VjaCBhdCBhbGwsIGZvciBleGFtcGxlLCB0d28gemVybyB3aWR0aCBhbmQgaGVpZ2h0IHJlY3RhbmdsZXMgd291bGRcbiAqIGludGVyc2VjdCBpZiB0aGV5IGhhZCB0aGUgc2FtZSB0b3AgYW5kIGxlZnQuXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5SZWN0fSBhIEEgUmVjdGFuZ2xlLlxuICogQHBhcmFtIHtnb29nLm1hdGguUmVjdH0gYiBBIFJlY3RhbmdsZS5cbiAqIEByZXR1cm4ge2dvb2cubWF0aC5SZWN0fSBBIG5ldyBpbnRlcnNlY3Rpb24gcmVjdCAoZXZlbiBpZiB3aWR0aCBhbmQgaGVpZ2h0XG4gKiAgICAgYXJlIDApLCBvciBudWxsIGlmIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbi5cbiAqL1xuZ29vZy5tYXRoLlJlY3QuaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24oYSwgYikge1xuICAvLyBUaGVyZSBpcyBubyBuaWNlIHdheSB0byBkbyBpbnRlcnNlY3Rpb24gdmlhIGEgY2xvbmUsIGJlY2F1c2UgYW55IHN1Y2hcbiAgLy8gY2xvbmUgbWlnaHQgYmUgdW5uZWNlc3NhcnkgaWYgdGhpcyBmdW5jdGlvbiByZXR1cm5zIG51bGwuICBTbywgd2UgZHVwbGljYXRlXG4gIC8vIGNvZGUgZnJvbSBhYm92ZS5cblxuICB2YXIgeDAgPSBNYXRoLm1heChhLmxlZnQsIGIubGVmdCk7XG4gIHZhciB4MSA9IE1hdGgubWluKGEubGVmdCArIGEud2lkdGgsIGIubGVmdCArIGIud2lkdGgpO1xuXG4gIGlmICh4MCA8PSB4MSkge1xuICAgIHZhciB5MCA9IE1hdGgubWF4KGEudG9wLCBiLnRvcCk7XG4gICAgdmFyIHkxID0gTWF0aC5taW4oYS50b3AgKyBhLmhlaWdodCwgYi50b3AgKyBiLmhlaWdodCk7XG5cbiAgICBpZiAoeTAgPD0geTEpIHtcbiAgICAgIHJldHVybiBuZXcgZ29vZy5tYXRoLlJlY3QoeDAsIHkwLCB4MSAtIHgwLCB5MSAtIHkwKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHR3byByZWN0YW5nbGVzIGludGVyc2VjdC4gVHdvIHJlY3RhbmdsZXMgaW50ZXJzZWN0IGlmIHRoZXlcbiAqIHRvdWNoIGF0IGFsbCwgZm9yIGV4YW1wbGUsIHR3byB6ZXJvIHdpZHRoIGFuZCBoZWlnaHQgcmVjdGFuZ2xlcyB3b3VsZFxuICogaW50ZXJzZWN0IGlmIHRoZXkgaGFkIHRoZSBzYW1lIHRvcCBhbmQgbGVmdC5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLlJlY3R9IGEgQSBSZWN0YW5nbGUuXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5SZWN0fSBiIEEgUmVjdGFuZ2xlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhIGFuZCBiIGludGVyc2VjdC5cbiAqL1xuZ29vZy5tYXRoLlJlY3QuaW50ZXJzZWN0cyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIChhLmxlZnQgPD0gYi5sZWZ0ICsgYi53aWR0aCAmJiBiLmxlZnQgPD0gYS5sZWZ0ICsgYS53aWR0aCAmJlxuICAgICAgYS50b3AgPD0gYi50b3AgKyBiLmhlaWdodCAmJiBiLnRvcCA8PSBhLnRvcCArIGEuaGVpZ2h0KTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgYSByZWN0YW5nbGUgaW50ZXJzZWN0cyB0aGlzIHJlY3RhbmdsZS5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLlJlY3R9IHJlY3QgQSByZWN0YW5nbGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHJlY3QgaW50ZXJzZWN0cyB0aGlzIHJlY3RhbmdsZS5cbiAqL1xuZ29vZy5tYXRoLlJlY3QucHJvdG90eXBlLmludGVyc2VjdHMgPSBmdW5jdGlvbihyZWN0KSB7XG4gIHJldHVybiBnb29nLm1hdGguUmVjdC5pbnRlcnNlY3RzKHRoaXMsIHJlY3QpO1xufTtcblxuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBkaWZmZXJlbmNlIHJlZ2lvbnMgYmV0d2VlbiB0d28gcmVjdGFuZ2xlcy4gVGhlIHJldHVybiB2YWx1ZSBpc1xuICogYW4gYXJyYXkgb2YgMCB0byA0IHJlY3RhbmdsZXMgZGVmaW5pbmcgdGhlIHJlbWFpbmluZyByZWdpb25zIG9mIHRoZSBmaXJzdFxuICogcmVjdGFuZ2xlIGFmdGVyIHRoZSBzZWNvbmQgaGFzIGJlZW4gc3VidHJhY3RlZC5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLlJlY3R9IGEgQSBSZWN0YW5nbGUuXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5SZWN0fSBiIEEgUmVjdGFuZ2xlLlxuICogQHJldHVybiB7IUFycmF5PCFnb29nLm1hdGguUmVjdD59IEFuIGFycmF5IHdpdGggMCB0byA0IHJlY3RhbmdsZXMgd2hpY2hcbiAqICAgICB0b2dldGhlciBkZWZpbmUgdGhlIGRpZmZlcmVuY2UgYXJlYSBvZiByZWN0YW5nbGUgYSBtaW51cyByZWN0YW5nbGUgYi5cbiAqL1xuZ29vZy5tYXRoLlJlY3QuZGlmZmVyZW5jZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGludGVyc2VjdGlvbiA9IGdvb2cubWF0aC5SZWN0LmludGVyc2VjdGlvbihhLCBiKTtcbiAgaWYgKCFpbnRlcnNlY3Rpb24gfHwgIWludGVyc2VjdGlvbi5oZWlnaHQgfHwgIWludGVyc2VjdGlvbi53aWR0aCkge1xuICAgIHJldHVybiBbYS5jbG9uZSgpXTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBbXTtcblxuICB2YXIgdG9wID0gYS50b3A7XG4gIHZhciBoZWlnaHQgPSBhLmhlaWdodDtcblxuICB2YXIgYXIgPSBhLmxlZnQgKyBhLndpZHRoO1xuICB2YXIgYWIgPSBhLnRvcCArIGEuaGVpZ2h0O1xuXG4gIHZhciBiciA9IGIubGVmdCArIGIud2lkdGg7XG4gIHZhciBiYiA9IGIudG9wICsgYi5oZWlnaHQ7XG5cbiAgLy8gU3VidHJhY3Qgb2ZmIGFueSBhcmVhIG9uIHRvcCB3aGVyZSBBIGV4dGVuZHMgcGFzdCBCXG4gIGlmIChiLnRvcCA+IGEudG9wKSB7XG4gICAgcmVzdWx0LnB1c2gobmV3IGdvb2cubWF0aC5SZWN0KGEubGVmdCwgYS50b3AsIGEud2lkdGgsIGIudG9wIC0gYS50b3ApKTtcbiAgICB0b3AgPSBiLnRvcDtcbiAgICAvLyBJZiB3ZSdyZSBtb3ZpbmcgdGhlIHRvcCBkb3duLCB3ZSBhbHNvIG5lZWQgdG8gc3VidHJhY3QgdGhlIGhlaWdodCBkaWZmLlxuICAgIGhlaWdodCAtPSBiLnRvcCAtIGEudG9wO1xuICB9XG4gIC8vIFN1YnRyYWN0IG9mZiBhbnkgYXJlYSBvbiBib3R0b20gd2hlcmUgQSBleHRlbmRzIHBhc3QgQlxuICBpZiAoYmIgPCBhYikge1xuICAgIHJlc3VsdC5wdXNoKG5ldyBnb29nLm1hdGguUmVjdChhLmxlZnQsIGJiLCBhLndpZHRoLCBhYiAtIGJiKSk7XG4gICAgaGVpZ2h0ID0gYmIgLSB0b3A7XG4gIH1cbiAgLy8gU3VidHJhY3QgYW55IGFyZWEgb24gbGVmdCB3aGVyZSBBIGV4dGVuZHMgcGFzdCBCXG4gIGlmIChiLmxlZnQgPiBhLmxlZnQpIHtcbiAgICByZXN1bHQucHVzaChuZXcgZ29vZy5tYXRoLlJlY3QoYS5sZWZ0LCB0b3AsIGIubGVmdCAtIGEubGVmdCwgaGVpZ2h0KSk7XG4gIH1cbiAgLy8gU3VidHJhY3QgYW55IGFyZWEgb24gcmlnaHQgd2hlcmUgQSBleHRlbmRzIHBhc3QgQlxuICBpZiAoYnIgPCBhcikge1xuICAgIHJlc3VsdC5wdXNoKG5ldyBnb29nLm1hdGguUmVjdChiciwgdG9wLCBhciAtIGJyLCBoZWlnaHQpKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGRpZmZlcmVuY2UgcmVnaW9ucyBiZXR3ZWVuIHRoaXMgcmVjdGFuZ2xlIGFuZCB7QGNvZGUgcmVjdH0uIFRoZVxuICogcmV0dXJuIHZhbHVlIGlzIGFuIGFycmF5IG9mIDAgdG8gNCByZWN0YW5nbGVzIGRlZmluaW5nIHRoZSByZW1haW5pbmcgcmVnaW9uc1xuICogb2YgdGhpcyByZWN0YW5nbGUgYWZ0ZXIgdGhlIG90aGVyIGhhcyBiZWVuIHN1YnRyYWN0ZWQuXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5SZWN0fSByZWN0IEEgUmVjdGFuZ2xlLlxuICogQHJldHVybiB7IUFycmF5PCFnb29nLm1hdGguUmVjdD59IEFuIGFycmF5IHdpdGggMCB0byA0IHJlY3RhbmdsZXMgd2hpY2hcbiAqICAgICB0b2dldGhlciBkZWZpbmUgdGhlIGRpZmZlcmVuY2UgYXJlYSBvZiByZWN0YW5nbGUgYSBtaW51cyByZWN0YW5nbGUgYi5cbiAqL1xuZ29vZy5tYXRoLlJlY3QucHJvdG90eXBlLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihyZWN0KSB7XG4gIHJldHVybiBnb29nLm1hdGguUmVjdC5kaWZmZXJlbmNlKHRoaXMsIHJlY3QpO1xufTtcblxuXG4vKipcbiAqIEV4cGFuZCB0aGlzIHJlY3RhbmdsZSB0byBhbHNvIGluY2x1ZGUgdGhlIGFyZWEgb2YgdGhlIGdpdmVuIHJlY3RhbmdsZS5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLlJlY3R9IHJlY3QgVGhlIG90aGVyIHJlY3RhbmdsZS5cbiAqL1xuZ29vZy5tYXRoLlJlY3QucHJvdG90eXBlLmJvdW5kaW5nUmVjdCA9IGZ1bmN0aW9uKHJlY3QpIHtcbiAgLy8gV2UgY29tcHV0ZSByaWdodCBhbmQgYm90dG9tIGJlZm9yZSB3ZSBjaGFuZ2UgbGVmdCBhbmQgdG9wIGJlbG93LlxuICB2YXIgcmlnaHQgPSBNYXRoLm1heCh0aGlzLmxlZnQgKyB0aGlzLndpZHRoLCByZWN0LmxlZnQgKyByZWN0LndpZHRoKTtcbiAgdmFyIGJvdHRvbSA9IE1hdGgubWF4KHRoaXMudG9wICsgdGhpcy5oZWlnaHQsIHJlY3QudG9wICsgcmVjdC5oZWlnaHQpO1xuXG4gIHRoaXMubGVmdCA9IE1hdGgubWluKHRoaXMubGVmdCwgcmVjdC5sZWZ0KTtcbiAgdGhpcy50b3AgPSBNYXRoLm1pbih0aGlzLnRvcCwgcmVjdC50b3ApO1xuXG4gIHRoaXMud2lkdGggPSByaWdodCAtIHRoaXMubGVmdDtcbiAgdGhpcy5oZWlnaHQgPSBib3R0b20gLSB0aGlzLnRvcDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IHJlY3RhbmdsZSB3aGljaCBjb21wbGV0ZWx5IGNvbnRhaW5zIGJvdGggaW5wdXQgcmVjdGFuZ2xlcy5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLlJlY3R9IGEgQSByZWN0YW5nbGUuXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5SZWN0fSBiIEEgcmVjdGFuZ2xlLlxuICogQHJldHVybiB7Z29vZy5tYXRoLlJlY3R9IEEgbmV3IGJvdW5kaW5nIHJlY3QsIG9yIG51bGwgaWYgZWl0aGVyIHJlY3QgaXNcbiAqICAgICBudWxsLlxuICovXG5nb29nLm1hdGguUmVjdC5ib3VuZGluZ1JlY3QgPSBmdW5jdGlvbihhLCBiKSB7XG4gIGlmICghYSB8fCAhYikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGNsb25lID0gYS5jbG9uZSgpO1xuICBjbG9uZS5ib3VuZGluZ1JlY3QoYik7XG5cbiAgcmV0dXJuIGNsb25lO1xufTtcblxuXG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgdGhpcyByZWN0YW5nbGUgZW50aXJlbHkgY29udGFpbnMgYW5vdGhlciByZWN0YW5nbGUgb3JcbiAqIGNvb3JkaW5hdGUuXG4gKlxuICogQHBhcmFtIHtnb29nLm1hdGguUmVjdHxnb29nLm1hdGguQ29vcmRpbmF0ZX0gYW5vdGhlciBUaGUgcmVjdGFuZ2xlIG9yXG4gKiAgICAgY29vcmRpbmF0ZSB0byB0ZXN0IGZvciBjb250YWlubWVudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyByZWN0YW5nbGUgY29udGFpbnMgZ2l2ZW4gcmVjdGFuZ2xlIG9yXG4gKiAgICAgY29vcmRpbmF0ZS5cbiAqL1xuZ29vZy5tYXRoLlJlY3QucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24oYW5vdGhlcikge1xuICBpZiAoYW5vdGhlciBpbnN0YW5jZW9mIGdvb2cubWF0aC5SZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMubGVmdCA8PSBhbm90aGVyLmxlZnQgJiZcbiAgICAgICAgICAgdGhpcy5sZWZ0ICsgdGhpcy53aWR0aCA+PSBhbm90aGVyLmxlZnQgKyBhbm90aGVyLndpZHRoICYmXG4gICAgICAgICAgIHRoaXMudG9wIDw9IGFub3RoZXIudG9wICYmXG4gICAgICAgICAgIHRoaXMudG9wICsgdGhpcy5oZWlnaHQgPj0gYW5vdGhlci50b3AgKyBhbm90aGVyLmhlaWdodDtcbiAgfSBlbHNlIHsgLy8gKGFub3RoZXIgaW5zdGFuY2VvZiBnb29nLm1hdGguQ29vcmRpbmF0ZSlcbiAgICByZXR1cm4gYW5vdGhlci54ID49IHRoaXMubGVmdCAmJlxuICAgICAgICAgICBhbm90aGVyLnggPD0gdGhpcy5sZWZ0ICsgdGhpcy53aWR0aCAmJlxuICAgICAgICAgICBhbm90aGVyLnkgPj0gdGhpcy50b3AgJiZcbiAgICAgICAgICAgYW5vdGhlci55IDw9IHRoaXMudG9wICsgdGhpcy5oZWlnaHQ7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFnb29nLm1hdGguQ29vcmRpbmF0ZX0gcG9pbnQgQSBjb29yZGluYXRlLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBwb2ludCBhbmQgdGhlIGNsb3Nlc3RcbiAqICAgICBwb2ludCBpbnNpZGUgdGhlIHJlY3RhbmdsZS4gUmV0dXJucyAwIGlmIHRoZSBwb2ludCBpcyBpbnNpZGUgdGhlXG4gKiAgICAgcmVjdGFuZ2xlLlxuICovXG5nb29nLm1hdGguUmVjdC5wcm90b3R5cGUuc3F1YXJlZERpc3RhbmNlID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgdmFyIGR4ID0gcG9pbnQueCA8IHRoaXMubGVmdCA/XG4gICAgICB0aGlzLmxlZnQgLSBwb2ludC54IDogTWF0aC5tYXgocG9pbnQueCAtICh0aGlzLmxlZnQgKyB0aGlzLndpZHRoKSwgMCk7XG4gIHZhciBkeSA9IHBvaW50LnkgPCB0aGlzLnRvcCA/XG4gICAgICB0aGlzLnRvcCAtIHBvaW50LnkgOiBNYXRoLm1heChwb2ludC55IC0gKHRoaXMudG9wICsgdGhpcy5oZWlnaHQpLCAwKTtcbiAgcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBwb2ludCBBIGNvb3JkaW5hdGUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBwb2ludCBhbmQgdGhlIGNsb3Nlc3QgcG9pbnRcbiAqICAgICBpbnNpZGUgdGhlIHJlY3RhbmdsZS4gUmV0dXJucyAwIGlmIHRoZSBwb2ludCBpcyBpbnNpZGUgdGhlIHJlY3RhbmdsZS5cbiAqL1xuZ29vZy5tYXRoLlJlY3QucHJvdG90eXBlLmRpc3RhbmNlID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnNxdWFyZWREaXN0YW5jZShwb2ludCkpO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4geyFnb29nLm1hdGguU2l6ZX0gVGhlIHNpemUgb2YgdGhpcyByZWN0YW5nbGUuXG4gKi9cbmdvb2cubWF0aC5SZWN0LnByb3RvdHlwZS5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgZ29vZy5tYXRoLlNpemUodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4geyFnb29nLm1hdGguQ29vcmRpbmF0ZX0gQSBuZXcgY29vcmRpbmF0ZSBmb3IgdGhlIHRvcC1sZWZ0IGNvcm5lciBvZlxuICogICAgIHRoZSByZWN0YW5nbGUuXG4gKi9cbmdvb2cubWF0aC5SZWN0LnByb3RvdHlwZS5nZXRUb3BMZWZ0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgZ29vZy5tYXRoLkNvb3JkaW5hdGUodGhpcy5sZWZ0LCB0aGlzLnRvcCk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBBIG5ldyBjb29yZGluYXRlIGZvciB0aGUgY2VudGVyIG9mIHRoZVxuICogICAgIHJlY3RhbmdsZS5cbiAqL1xuZ29vZy5tYXRoLlJlY3QucHJvdG90eXBlLmdldENlbnRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IGdvb2cubWF0aC5Db29yZGluYXRlKFxuICAgICAgdGhpcy5sZWZ0ICsgdGhpcy53aWR0aCAvIDIsIHRoaXMudG9wICsgdGhpcy5oZWlnaHQgLyAyKTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkNvb3JkaW5hdGV9IEEgbmV3IGNvb3JkaW5hdGUgZm9yIHRoZSBib3R0b20tcmlnaHQgY29ybmVyXG4gKiAgICAgb2YgdGhlIHJlY3RhbmdsZS5cbiAqL1xuZ29vZy5tYXRoLlJlY3QucHJvdG90eXBlLmdldEJvdHRvbVJpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgZ29vZy5tYXRoLkNvb3JkaW5hdGUoXG4gICAgICB0aGlzLmxlZnQgKyB0aGlzLndpZHRoLCB0aGlzLnRvcCArIHRoaXMuaGVpZ2h0KTtcbn07XG5cblxuLyoqXG4gKiBSb3VuZHMgdGhlIGZpZWxkcyB0byB0aGUgbmV4dCBsYXJnZXIgaW50ZWdlciB2YWx1ZXMuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLlJlY3R9IFRoaXMgcmVjdGFuZ2xlIHdpdGggY2VpbCdkIGZpZWxkcy5cbiAqL1xuZ29vZy5tYXRoLlJlY3QucHJvdG90eXBlLmNlaWwgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5sZWZ0ID0gTWF0aC5jZWlsKHRoaXMubGVmdCk7XG4gIHRoaXMudG9wID0gTWF0aC5jZWlsKHRoaXMudG9wKTtcbiAgdGhpcy53aWR0aCA9IE1hdGguY2VpbCh0aGlzLndpZHRoKTtcbiAgdGhpcy5oZWlnaHQgPSBNYXRoLmNlaWwodGhpcy5oZWlnaHQpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBSb3VuZHMgdGhlIGZpZWxkcyB0byB0aGUgbmV4dCBzbWFsbGVyIGludGVnZXIgdmFsdWVzLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5SZWN0fSBUaGlzIHJlY3RhbmdsZSB3aXRoIGZsb29yZWQgZmllbGRzLlxuICovXG5nb29nLm1hdGguUmVjdC5wcm90b3R5cGUuZmxvb3IgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5sZWZ0ID0gTWF0aC5mbG9vcih0aGlzLmxlZnQpO1xuICB0aGlzLnRvcCA9IE1hdGguZmxvb3IodGhpcy50b3ApO1xuICB0aGlzLndpZHRoID0gTWF0aC5mbG9vcih0aGlzLndpZHRoKTtcbiAgdGhpcy5oZWlnaHQgPSBNYXRoLmZsb29yKHRoaXMuaGVpZ2h0KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogUm91bmRzIHRoZSBmaWVsZHMgdG8gbmVhcmVzdCBpbnRlZ2VyIHZhbHVlcy5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguUmVjdH0gVGhpcyByZWN0YW5nbGUgd2l0aCByb3VuZGVkIGZpZWxkcy5cbiAqL1xuZ29vZy5tYXRoLlJlY3QucHJvdG90eXBlLnJvdW5kID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMubGVmdCA9IE1hdGgucm91bmQodGhpcy5sZWZ0KTtcbiAgdGhpcy50b3AgPSBNYXRoLnJvdW5kKHRoaXMudG9wKTtcbiAgdGhpcy53aWR0aCA9IE1hdGgucm91bmQodGhpcy53aWR0aCk7XG4gIHRoaXMuaGVpZ2h0ID0gTWF0aC5yb3VuZCh0aGlzLmhlaWdodCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIFRyYW5zbGF0ZXMgdGhpcyByZWN0YW5nbGUgYnkgdGhlIGdpdmVuIG9mZnNldHMuIElmIGFcbiAqIHtAY29kZSBnb29nLm1hdGguQ29vcmRpbmF0ZX0gaXMgZ2l2ZW4sIHRoZW4gdGhlIGxlZnQgYW5kIHRvcCB2YWx1ZXMgYXJlXG4gKiB0cmFuc2xhdGVkIGJ5IHRoZSBjb29yZGluYXRlJ3MgeCBhbmQgeSB2YWx1ZXMuIE90aGVyd2lzZSwgdG9wIGFuZCBsZWZ0IGFyZVxuICogdHJhbnNsYXRlZCBieSB7QGNvZGUgdHh9IGFuZCB7QGNvZGUgb3B0X3R5fSByZXNwZWN0aXZlbHkuXG4gKiBAcGFyYW0ge251bWJlcnxnb29nLm1hdGguQ29vcmRpbmF0ZX0gdHggVGhlIHZhbHVlIHRvIHRyYW5zbGF0ZSBsZWZ0IGJ5IG9yIHRoZVxuICogICAgIHRoZSBjb29yZGluYXRlIHRvIHRyYW5zbGF0ZSB0aGlzIHJlY3QgYnkuXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF90eSBUaGUgdmFsdWUgdG8gdHJhbnNsYXRlIHRvcCBieS5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguUmVjdH0gVGhpcyByZWN0YW5nbGUgYWZ0ZXIgdHJhbnNsYXRpbmcuXG4gKi9cbmdvb2cubWF0aC5SZWN0LnByb3RvdHlwZS50cmFuc2xhdGUgPSBmdW5jdGlvbih0eCwgb3B0X3R5KSB7XG4gIGlmICh0eCBpbnN0YW5jZW9mIGdvb2cubWF0aC5Db29yZGluYXRlKSB7XG4gICAgdGhpcy5sZWZ0ICs9IHR4Lng7XG4gICAgdGhpcy50b3AgKz0gdHgueTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmxlZnQgKz0gdHg7XG4gICAgaWYgKGdvb2cuaXNOdW1iZXIob3B0X3R5KSkge1xuICAgICAgdGhpcy50b3AgKz0gb3B0X3R5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBTY2FsZXMgdGhpcyByZWN0YW5nbGUgYnkgdGhlIGdpdmVuIHNjYWxlIGZhY3RvcnMuIFRoZSBsZWZ0IGFuZCB3aWR0aCB2YWx1ZXNcbiAqIGFyZSBzY2FsZWQgYnkge0Bjb2RlIHN4fSBhbmQgdGhlIHRvcCBhbmQgaGVpZ2h0IHZhbHVlcyBhcmUgc2NhbGVkIGJ5XG4gKiB7QGNvZGUgb3B0X3N5fS4gIElmIHtAY29kZSBvcHRfc3l9IGlzIG5vdCBnaXZlbiwgdGhlbiBhbGwgZmllbGRzIGFyZSBzY2FsZWRcbiAqIGJ5IHtAY29kZSBzeH0uXG4gKiBAcGFyYW0ge251bWJlcn0gc3ggVGhlIHNjYWxlIGZhY3RvciB0byB1c2UgZm9yIHRoZSB4IGRpbWVuc2lvbi5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X3N5IFRoZSBzY2FsZSBmYWN0b3IgdG8gdXNlIGZvciB0aGUgeSBkaW1lbnNpb24uXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLlJlY3R9IFRoaXMgcmVjdGFuZ2xlIGFmdGVyIHNjYWxpbmcuXG4gKi9cbmdvb2cubWF0aC5SZWN0LnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uKHN4LCBvcHRfc3kpIHtcbiAgdmFyIHN5ID0gZ29vZy5pc051bWJlcihvcHRfc3kpID8gb3B0X3N5IDogc3g7XG4gIHRoaXMubGVmdCAqPSBzeDtcbiAgdGhpcy53aWR0aCAqPSBzeDtcbiAgdGhpcy50b3AgKj0gc3k7XG4gIHRoaXMuaGVpZ2h0ICo9IHN5O1xuICByZXR1cm4gdGhpcztcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAwNiBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFV0aWxpdGllcyBmb3IgZWxlbWVudCBzdHlsZXMuXG4gKlxuICogQGF1dGhvciBhcnZAZ29vZ2xlLmNvbSAoRXJpayBBcnZpZHNzb24pXG4gKiBAYXV0aG9yIGVhZUBnb29nbGUuY29tIChFbWlsIEEgRWtsdW5kKVxuICogQHNlZSAuLi9kZW1vcy9pbmxpbmVfYmxvY2tfcXVpcmtzLmh0bWxcbiAqIEBzZWUgLi4vZGVtb3MvaW5saW5lX2Jsb2NrX3N0YW5kYXJkcy5odG1sXG4gKiBAc2VlIC4uL2RlbW9zL3N0eWxlX3ZpZXdwb3J0Lmh0bWxcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuc3R5bGUnKTtcblxuXG5nb29nLnJlcXVpcmUoJ2dvb2cuYXJyYXknKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZG9tJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZG9tLk5vZGVUeXBlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZG9tLlRhZ05hbWUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5kb20udmVuZG9yJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubWF0aC5Cb3gnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5tYXRoLkNvb3JkaW5hdGUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5tYXRoLlJlY3QnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5tYXRoLlNpemUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5vYmplY3QnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy51c2VyQWdlbnQnKTtcblxuZ29vZy5mb3J3YXJkRGVjbGFyZSgnZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50Jyk7XG5nb29nLmZvcndhcmREZWNsYXJlKCdnb29nLmV2ZW50cy5FdmVudCcpO1xuXG5cbi8qKlxuICogU2V0cyBhIHN0eWxlIHZhbHVlIG9uIGFuIGVsZW1lbnQuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBub3QgaW5kZW5kZWQgdG8gcGF0Y2ggaXNzdWVzIGluIHRoZSBicm93c2VyJ3Mgc3R5bGVcbiAqIGhhbmRsaW5nLCBidXQgdG8gYWxsb3cgZWFzeSBwcm9ncmFtbWF0aWMgYWNjZXNzIHRvIHNldHRpbmcgZGFzaC1zZXBhcmF0ZWRcbiAqIHN0eWxlIHByb3BlcnRpZXMuICBBbiBleGFtcGxlIGlzIHNldHRpbmcgYSBiYXRjaCBvZiBwcm9wZXJ0aWVzIGZyb20gYSBkYXRhXG4gKiBvYmplY3Qgd2l0aG91dCBvdmVyd3JpdGluZyBvbGQgc3R5bGVzLiAgV2hlbiBwb3NzaWJsZSwgdXNlIG5hdGl2ZSBBUElzOlxuICogZWxlbS5zdHlsZS5wcm9wZXJ0eUtleSA9ICd2YWx1ZScgb3IgKGlmIG9ibGl0ZXJhdGluZyBvbGQgc3R5bGVzIGlzIGZpbmUpXG4gKiBlbGVtLnN0eWxlLmNzc1RleHQgPSAncHJvcGVydHkxOiB2YWx1ZTE7IHByb3BlcnR5MjogdmFsdWUyJy5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY2hhbmdlLlxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBzdHlsZSBJZiBhIHN0cmluZywgYSBzdHlsZSBuYW1lLiBJZiBhbiBvYmplY3QsIGEgaGFzaFxuICogICAgIG9mIHN0eWxlIG5hbWVzIHRvIHN0eWxlIHZhbHVlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxib29sZWFuPX0gb3B0X3ZhbHVlIElmIHN0eWxlIHdhcyBhIHN0cmluZywgdGhlbiB0aGlzXG4gKiAgICAgc2hvdWxkIGJlIHRoZSB2YWx1ZS5cbiAqL1xuZ29vZy5zdHlsZS5zZXRTdHlsZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIHN0eWxlLCBvcHRfdmFsdWUpIHtcbiAgaWYgKGdvb2cuaXNTdHJpbmcoc3R5bGUpKSB7XG4gICAgZ29vZy5zdHlsZS5zZXRTdHlsZV8oZWxlbWVudCwgb3B0X3ZhbHVlLCBzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIga2V5IGluIHN0eWxlKSB7XG4gICAgICBnb29nLnN0eWxlLnNldFN0eWxlXyhlbGVtZW50LCBzdHlsZVtrZXldLCBrZXkpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIFNldHMgYSBzdHlsZSB2YWx1ZSBvbiBhbiBlbGVtZW50LCB3aXRoIHBhcmFtZXRlcnMgc3dhcHBlZCB0byB3b3JrIHdpdGhcbiAqIHtAY29kZSBnb29nLm9iamVjdC5mb3JFYWNoKCl9LiBQcmVwZW5kcyBhIHZlbmRvci1zcGVjaWZpYyBwcmVmaXggd2hlblxuICogbmVjZXNzYXJ5LlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGNoYW5nZS5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxib29sZWFufHVuZGVmaW5lZH0gdmFsdWUgU3R5bGUgdmFsdWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGUgU3R5bGUgbmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3R5bGUuc2V0U3R5bGVfID0gZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUsIHN0eWxlKSB7XG4gIHZhciBwcm9wZXJ0eU5hbWUgPSBnb29nLnN0eWxlLmdldFZlbmRvckpzU3R5bGVOYW1lXyhlbGVtZW50LCBzdHlsZSk7XG5cbiAgaWYgKHByb3BlcnR5TmFtZSkge1xuICAgIGVsZW1lbnQuc3R5bGVbcHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuICB9XG59O1xuXG5cbi8qKlxuICogU3R5bGUgbmFtZSBjYWNoZSB0aGF0IHN0b3JlcyBwcmV2aW91cyBwcm9wZXJ0eSBuYW1lIGxvb2t1cHMuXG4gKlxuICogVGhpcyBpcyB1c2VkIGJ5IHNldFN0eWxlIHRvIHNwZWVkIHVwIHByb3BlcnR5IGxvb2t1cHMsIGVudHJpZXMgbG9vayBsaWtlOlxuICogICB7IFN0eWxlTmFtZTogQWN0dWFsUHJvcGVydHlOYW1lIH1cbiAqXG4gKiBAcHJpdmF0ZSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gKi9cbmdvb2cuc3R5bGUuc3R5bGVOYW1lQ2FjaGVfID0ge307XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdHlsZSBwcm9wZXJ0eSBuYW1lIGluIGNhbWVsLWNhc2UuIElmIGl0IGRvZXMgbm90IGV4aXN0IGFuZCBhXG4gKiB2ZW5kb3Itc3BlY2lmaWMgdmVyc2lvbiBvZiB0aGUgcHJvcGVydHkgZG9lcyBleGlzdCwgdGhlbiByZXR1cm4gdGhlIHZlbmRvci1cbiAqIHNwZWNpZmljIHByb3BlcnR5IG5hbWUgaW5zdGVhZC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBjaGFuZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGUgU3R5bGUgbmFtZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVmVuZG9yLXNwZWNpZmljIHN0eWxlLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHlsZS5nZXRWZW5kb3JKc1N0eWxlTmFtZV8gPSBmdW5jdGlvbihlbGVtZW50LCBzdHlsZSkge1xuICB2YXIgcHJvcGVydHlOYW1lID0gZ29vZy5zdHlsZS5zdHlsZU5hbWVDYWNoZV9bc3R5bGVdO1xuICBpZiAoIXByb3BlcnR5TmFtZSkge1xuICAgIHZhciBjYW1lbFN0eWxlID0gZ29vZy5zdHJpbmcudG9DYW1lbENhc2Uoc3R5bGUpO1xuICAgIHByb3BlcnR5TmFtZSA9IGNhbWVsU3R5bGU7XG5cbiAgICBpZiAoZWxlbWVudC5zdHlsZVtjYW1lbFN0eWxlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgcHJlZml4ZWRTdHlsZSA9IGdvb2cuZG9tLnZlbmRvci5nZXRWZW5kb3JKc1ByZWZpeCgpICtcbiAgICAgICAgICBnb29nLnN0cmluZy50b1RpdGxlQ2FzZShjYW1lbFN0eWxlKTtcblxuICAgICAgaWYgKGVsZW1lbnQuc3R5bGVbcHJlZml4ZWRTdHlsZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9wZXJ0eU5hbWUgPSBwcmVmaXhlZFN0eWxlO1xuICAgICAgfVxuICAgIH1cbiAgICBnb29nLnN0eWxlLnN0eWxlTmFtZUNhY2hlX1tzdHlsZV0gPSBwcm9wZXJ0eU5hbWU7XG4gIH1cblxuICByZXR1cm4gcHJvcGVydHlOYW1lO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0eWxlIHByb3BlcnR5IG5hbWUgaW4gQ1NTIG5vdGF0aW9uLiBJZiBpdCBkb2VzIG5vdCBleGlzdCBhbmQgYVxuICogdmVuZG9yLXNwZWNpZmljIHZlcnNpb24gb2YgdGhlIHByb3BlcnR5IGRvZXMgZXhpc3QsIHRoZW4gcmV0dXJuIHRoZSB2ZW5kb3ItXG4gKiBzcGVjaWZpYyBwcm9wZXJ0eSBuYW1lIGluc3RlYWQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY2hhbmdlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlIFN0eWxlIG5hbWUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFZlbmRvci1zcGVjaWZpYyBzdHlsZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3R5bGUuZ2V0VmVuZG9yU3R5bGVOYW1lXyA9IGZ1bmN0aW9uKGVsZW1lbnQsIHN0eWxlKSB7XG4gIHZhciBjYW1lbFN0eWxlID0gZ29vZy5zdHJpbmcudG9DYW1lbENhc2Uoc3R5bGUpO1xuXG4gIGlmIChlbGVtZW50LnN0eWxlW2NhbWVsU3R5bGVdID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcHJlZml4ZWRTdHlsZSA9IGdvb2cuZG9tLnZlbmRvci5nZXRWZW5kb3JKc1ByZWZpeCgpICtcbiAgICAgICAgZ29vZy5zdHJpbmcudG9UaXRsZUNhc2UoY2FtZWxTdHlsZSk7XG5cbiAgICBpZiAoZWxlbWVudC5zdHlsZVtwcmVmaXhlZFN0eWxlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZ29vZy5kb20udmVuZG9yLmdldFZlbmRvclByZWZpeCgpICsgJy0nICsgc3R5bGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufTtcblxuXG4vKipcbiAqIFJldHJpZXZlcyBhbiBleHBsaWNpdGx5LXNldCBzdHlsZSB2YWx1ZSBvZiBhIG5vZGUuIFRoaXMgcmV0dXJucyAnJyBpZiB0aGVyZVxuICogaXNuJ3QgYSBzdHlsZSBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgb3IgaWYgdGhpcyBzdHlsZSBwcm9wZXJ0eSBoYXMgbm90IGJlZW5cbiAqIGV4cGxpY2l0bHkgc2V0IGluIHNjcmlwdC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBnZXQgc3R5bGUgb2YuXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdG8gZ2V0LCBjc3Mtc3R5bGUgKGlmIHlvdSBoYXZlIGEgY2FtZWwtY2FzZVxuICogcHJvcGVydHksIHVzZSBlbGVtZW50LnN0eWxlW3N0eWxlXSkuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFN0eWxlIHZhbHVlLlxuICovXG5nb29nLnN0eWxlLmdldFN0eWxlID0gZnVuY3Rpb24oZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgLy8gZWxlbWVudC5zdHlsZSBpcyAnJyBmb3Igd2VsbC1rbm93biBwcm9wZXJ0aWVzIHdoaWNoIGFyZSB1bnNldC5cbiAgLy8gRm9yIGZvciBicm93c2VyIHNwZWNpZmljIHN0eWxlcyBhcyAnZmlsdGVyJyBpcyB1bmRlZmluZWRcbiAgLy8gc28gd2UgbmVlZCB0byByZXR1cm4gJycgZXhwbGljaXRseSB0byBtYWtlIGl0IGNvbnNpc3RlbnQgYWNyb3NzXG4gIC8vIGJyb3dzZXJzLlxuICB2YXIgc3R5bGVWYWx1ZSA9IGVsZW1lbnQuc3R5bGVbZ29vZy5zdHJpbmcudG9DYW1lbENhc2UocHJvcGVydHkpXTtcblxuICAvLyBVc2luZyB0eXBlb2YgaGVyZSBiZWNhdXNlIG9mIGEgYnVnIGluIFNhZmFyaSA1LjEsIHdoZXJlIHRoaXMgdmFsdWVcbiAgLy8gd2FzIHVuZGVmaW5lZCwgYnV0ID09PSB1bmRlZmluZWQgcmV0dXJuZWQgZmFsc2UuXG4gIGlmICh0eXBlb2Yoc3R5bGVWYWx1ZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHN0eWxlVmFsdWU7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5zdHlsZVtnb29nLnN0eWxlLmdldFZlbmRvckpzU3R5bGVOYW1lXyhlbGVtZW50LCBwcm9wZXJ0eSldIHx8XG4gICAgICAnJztcbn07XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgYSBjb21wdXRlZCBzdHlsZSB2YWx1ZSBvZiBhIG5vZGUuIEl0IHJldHVybnMgZW1wdHkgc3RyaW5nIGlmIHRoZVxuICogdmFsdWUgY2Fubm90IGJlIGNvbXB1dGVkICh3aGljaCB3aWxsIGJlIHRoZSBjYXNlIGluIEludGVybmV0IEV4cGxvcmVyKSBvclxuICogXCJub25lXCIgaWYgdGhlIHByb3BlcnR5IHJlcXVlc3RlZCBpcyBhbiBTVkcgb25lIGFuZCBpdCBoYXMgbm90IGJlZW5cbiAqIGV4cGxpY2l0bHkgc2V0IChmaXJlZm94IGFuZCB3ZWJraXQpLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGdldCBzdHlsZSBvZi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0byBnZXQgKGNhbWVsLWNhc2UpLlxuICogQHJldHVybiB7c3RyaW5nfSBTdHlsZSB2YWx1ZS5cbiAqL1xuZ29vZy5zdHlsZS5nZXRDb21wdXRlZFN0eWxlID0gZnVuY3Rpb24oZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgdmFyIGRvYyA9IGdvb2cuZG9tLmdldE93bmVyRG9jdW1lbnQoZWxlbWVudCk7XG4gIGlmIChkb2MuZGVmYXVsdFZpZXcgJiYgZG9jLmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICB2YXIgc3R5bGVzID0gZG9jLmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gICAgaWYgKHN0eWxlcykge1xuICAgICAgLy8gZWxlbWVudC5zdHlsZVsuLl0gaXMgdW5kZWZpbmVkIGZvciBicm93c2VyIHNwZWNpZmljIHN0eWxlc1xuICAgICAgLy8gYXMgJ2ZpbHRlcicuXG4gICAgICByZXR1cm4gc3R5bGVzW3Byb3BlcnR5XSB8fCBzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkgfHwgJyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICcnO1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIGNhc2NhZGVkIHN0eWxlIHZhbHVlIG9mIGEgbm9kZSwgb3IgbnVsbCBpZiB0aGUgdmFsdWUgY2Fubm90IGJlXG4gKiBjb21wdXRlZCAob25seSBJbnRlcm5ldCBFeHBsb3JlciBjYW4gZG8gdGhpcykuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gZ2V0IHN0eWxlIG9mLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlIFByb3BlcnR5IHRvIGdldCAoY2FtZWwtY2FzZSkuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFN0eWxlIHZhbHVlLlxuICovXG5nb29nLnN0eWxlLmdldENhc2NhZGVkU3R5bGUgPSBmdW5jdGlvbihlbGVtZW50LCBzdHlsZSkge1xuICAvLyBUT0RPKG5pY2tzYW50b3MpOiBUaGlzIHNob3VsZCBiZSBkb2N1bWVudGVkIHRvIHJldHVybiBudWxsLiAjZml4VHlwZXNcbiAgcmV0dXJuIGVsZW1lbnQuY3VycmVudFN0eWxlID8gZWxlbWVudC5jdXJyZW50U3R5bGVbc3R5bGVdIDogbnVsbDtcbn07XG5cblxuLyoqXG4gKiBDcm9zcy1icm93c2VyIHBzZXVkbyBnZXQgY29tcHV0ZWQgc3R5bGUuIEl0IHJldHVybnMgdGhlIGNvbXB1dGVkIHN0eWxlIHdoZXJlXG4gKiBhdmFpbGFibGUuIElmIG5vdCBhdmFpbGFibGUgaXQgdHJpZXMgdGhlIGNhc2NhZGVkIHN0eWxlIHZhbHVlIChJRVxuICogY3VycmVudFN0eWxlKSBhbmQgaW4gd29yc3QgY2FzZSB0aGUgaW5saW5lIHN0eWxlIHZhbHVlLiAgSXQgc2hvdWxkbid0IGJlXG4gKiBjYWxsZWQgZGlyZWN0bHksIHNlZSBodHRwOi8vd2lraS9NYWluL0NvbXB1dGVkU3R5bGVWc0Nhc2NhZGVkU3R5bGUgZm9yXG4gKiBkaXNjdXNzaW9uLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGdldCBzdHlsZSBvZi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHlsZSBQcm9wZXJ0eSB0byBnZXQgKG11c3QgYmUgY2FtZWxDYXNlLCBub3QgY3NzLXN0eWxlLikuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFN0eWxlIHZhbHVlLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHlsZS5nZXRTdHlsZV8gPSBmdW5jdGlvbihlbGVtZW50LCBzdHlsZSkge1xuICByZXR1cm4gZ29vZy5zdHlsZS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIHN0eWxlKSB8fFxuICAgICAgICAgZ29vZy5zdHlsZS5nZXRDYXNjYWRlZFN0eWxlKGVsZW1lbnQsIHN0eWxlKSB8fFxuICAgICAgICAgKGVsZW1lbnQuc3R5bGUgJiYgZWxlbWVudC5zdHlsZVtzdHlsZV0pO1xufTtcblxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY29tcHV0ZWQgdmFsdWUgb2YgdGhlIGJveC1zaXppbmcgQ1NTIGF0dHJpYnV0ZS5cbiAqIEJyb3dzZXIgc3VwcG9ydDogaHR0cDovL2Nhbml1c2UuY29tL2NzczMtYm94c2l6aW5nLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB3aG9zZSBib3gtc2l6aW5nIHRvIGdldC5cbiAqIEByZXR1cm4gez9zdHJpbmd9ICdjb250ZW50LWJveCcsICdib3JkZXItYm94JyBvciAncGFkZGluZy1ib3gnLiBudWxsIGlmXG4gKiAgICAgYm94LXNpemluZyBpcyBub3Qgc3VwcG9ydGVkIChJRTcgYW5kIGJlbG93KS5cbiAqL1xuZ29vZy5zdHlsZS5nZXRDb21wdXRlZEJveFNpemluZyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdvb2cuc3R5bGUuZ2V0U3R5bGVfKGVsZW1lbnQsICdib3hTaXppbmcnKSB8fFxuICAgICAgZ29vZy5zdHlsZS5nZXRTdHlsZV8oZWxlbWVudCwgJ01vekJveFNpemluZycpIHx8XG4gICAgICBnb29nLnN0eWxlLmdldFN0eWxlXyhlbGVtZW50LCAnV2Via2l0Qm94U2l6aW5nJykgfHwgbnVsbDtcbn07XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGNvbXB1dGVkIHZhbHVlIG9mIHRoZSBwb3NpdGlvbiBDU1MgYXR0cmlidXRlLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGdldCB0aGUgcG9zaXRpb24gb2YuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFBvc2l0aW9uIHZhbHVlLlxuICovXG5nb29nLnN0eWxlLmdldENvbXB1dGVkUG9zaXRpb24gPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIHJldHVybiBnb29nLnN0eWxlLmdldFN0eWxlXyhlbGVtZW50LCAncG9zaXRpb24nKTtcbn07XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGNvbXB1dGVkIGJhY2tncm91bmQgY29sb3Igc3RyaW5nIGZvciBhIGdpdmVuIGVsZW1lbnQuIFRoZVxuICogc3RyaW5nIHJldHVybmVkIGlzIHN1aXRhYmxlIGZvciBhc3NpZ25pbmcgdG8gYW5vdGhlciBlbGVtZW50J3NcbiAqIGJhY2tncm91bmQtY29sb3IsIGJ1dCBpcyBub3QgZ3VhcmFudGVlZCB0byBiZSBpbiBhbnkgcGFydGljdWxhciBzdHJpbmdcbiAqIGZvcm1hdC4gQWNjZXNzaW5nIHRoZSBjb2xvciBpbiBhIG51bWVyaWMgZm9ybSBtYXkgbm90IGJlIHBvc3NpYmxlIGluIGFsbFxuICogYnJvd3NlcnMgb3Igd2l0aCBhbGwgaW5wdXQuXG4gKlxuICogSWYgdGhlIGJhY2tncm91bmQgY29sb3IgZm9yIHRoZSBlbGVtZW50IGlzIGRlZmluZWQgYXMgYSBoZXhhZGVjaW1hbCB2YWx1ZSxcbiAqIHRoZSByZXN1bHRpbmcgc3RyaW5nIGNhbiBiZSBwYXJzZWQgYnkgZ29vZy5jb2xvci5wYXJzZSBpbiBhbGwgc3VwcG9ydGVkXG4gKiBicm93c2Vycy5cbiAqXG4gKiBXaGV0aGVyIG5hbWVkIGNvbG9ycyBsaWtlIFwicmVkXCIgb3IgXCJsaWdodGJsdWVcIiBnZXQgdHJhbnNsYXRlZCBpbnRvIGFcbiAqIGZvcm1hdCB3aGljaCBjYW4gYmUgcGFyc2VkIGlzIGJyb3dzZXIgZGVwZW5kZW50LiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gb25cbiAqIHRyYW5zcGFyZW50IGVsZW1lbnRzIHdpbGwgcmV0dXJuIFwidHJhbnNwYXJlbnRcIiBpbiBtb3N0IGJyb3dzZXJzIG9yXG4gKiBcInJnYmEoMCwgMCwgMCwgMClcIiBpbiBXZWJLaXQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgY29tcHV0ZWQgc3RyaW5nIHZhbHVlIG9mIHRoZSBiYWNrZ3JvdW5kIGNvbG9yLlxuICovXG5nb29nLnN0eWxlLmdldEJhY2tncm91bmRDb2xvciA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdvb2cuc3R5bGUuZ2V0U3R5bGVfKGVsZW1lbnQsICdiYWNrZ3JvdW5kQ29sb3InKTtcbn07XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGNvbXB1dGVkIHZhbHVlIG9mIHRoZSBvdmVyZmxvdy14IENTUyBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBvdmVyZmxvdy14IG9mLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgY29tcHV0ZWQgc3RyaW5nIHZhbHVlIG9mIHRoZSBvdmVyZmxvdy14IGF0dHJpYnV0ZS5cbiAqL1xuZ29vZy5zdHlsZS5nZXRDb21wdXRlZE92ZXJmbG93WCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdvb2cuc3R5bGUuZ2V0U3R5bGVfKGVsZW1lbnQsICdvdmVyZmxvd1gnKTtcbn07XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGNvbXB1dGVkIHZhbHVlIG9mIHRoZSBvdmVyZmxvdy15IENTUyBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBvdmVyZmxvdy15IG9mLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgY29tcHV0ZWQgc3RyaW5nIHZhbHVlIG9mIHRoZSBvdmVyZmxvdy15IGF0dHJpYnV0ZS5cbiAqL1xuZ29vZy5zdHlsZS5nZXRDb21wdXRlZE92ZXJmbG93WSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdvb2cuc3R5bGUuZ2V0U3R5bGVfKGVsZW1lbnQsICdvdmVyZmxvd1knKTtcbn07XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGNvbXB1dGVkIHZhbHVlIG9mIHRoZSB6LWluZGV4IENTUyBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSB6LWluZGV4IG9mLlxuICogQHJldHVybiB7c3RyaW5nfG51bWJlcn0gVGhlIGNvbXB1dGVkIHZhbHVlIG9mIHRoZSB6LWluZGV4IGF0dHJpYnV0ZS5cbiAqL1xuZ29vZy5zdHlsZS5nZXRDb21wdXRlZFpJbmRleCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdvb2cuc3R5bGUuZ2V0U3R5bGVfKGVsZW1lbnQsICd6SW5kZXgnKTtcbn07XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGNvbXB1dGVkIHZhbHVlIG9mIHRoZSB0ZXh0LWFsaWduIENTUyBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSB0ZXh0LWFsaWduIG9mLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgY29tcHV0ZWQgc3RyaW5nIHZhbHVlIG9mIHRoZSB0ZXh0LWFsaWduIGF0dHJpYnV0ZS5cbiAqL1xuZ29vZy5zdHlsZS5nZXRDb21wdXRlZFRleHRBbGlnbiA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdvb2cuc3R5bGUuZ2V0U3R5bGVfKGVsZW1lbnQsICd0ZXh0QWxpZ24nKTtcbn07XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGNvbXB1dGVkIHZhbHVlIG9mIHRoZSBjdXJzb3IgQ1NTIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBnZXQgdGhlIGN1cnNvciBvZi5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNvbXB1dGVkIHN0cmluZyB2YWx1ZSBvZiB0aGUgY3Vyc29yIGF0dHJpYnV0ZS5cbiAqL1xuZ29vZy5zdHlsZS5nZXRDb21wdXRlZEN1cnNvciA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdvb2cuc3R5bGUuZ2V0U3R5bGVfKGVsZW1lbnQsICdjdXJzb3InKTtcbn07XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGNvbXB1dGVkIHZhbHVlIG9mIHRoZSBDU1MgdHJhbnNmb3JtIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBnZXQgdGhlIHRyYW5zZm9ybSBvZi5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNvbXB1dGVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdHJhbnNmb3JtIG1hdHJpeC5cbiAqL1xuZ29vZy5zdHlsZS5nZXRDb21wdXRlZFRyYW5zZm9ybSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgdmFyIHByb3BlcnR5ID0gZ29vZy5zdHlsZS5nZXRWZW5kb3JTdHlsZU5hbWVfKGVsZW1lbnQsICd0cmFuc2Zvcm0nKTtcbiAgcmV0dXJuIGdvb2cuc3R5bGUuZ2V0U3R5bGVfKGVsZW1lbnQsIHByb3BlcnR5KSB8fFxuICAgICAgZ29vZy5zdHlsZS5nZXRTdHlsZV8oZWxlbWVudCwgJ3RyYW5zZm9ybScpO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIHRvcC9sZWZ0IHZhbHVlcyBvZiBhbiBlbGVtZW50LiAgSWYgbm8gdW5pdCBpcyBzcGVjaWZpZWQgaW4gdGhlXG4gKiBhcmd1bWVudCB0aGVuIGl0IHdpbGwgYWRkIHB4LiBUaGUgc2Vjb25kIGFyZ3VtZW50IGlzIHJlcXVpcmVkIGlmIHRoZSBmaXJzdFxuICogYXJndW1lbnQgaXMgYSBzdHJpbmcgb3IgbnVtYmVyIGFuZCBpcyBpZ25vcmVkIGlmIHRoZSBmaXJzdCBhcmd1bWVudFxuICogaXMgYSBjb29yZGluYXRlLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbCBFbGVtZW50IHRvIG1vdmUuXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8Z29vZy5tYXRoLkNvb3JkaW5hdGV9IGFyZzEgTGVmdCBwb3NpdGlvbiBvciBjb29yZGluYXRlLlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyPX0gb3B0X2FyZzIgVG9wIHBvc2l0aW9uLlxuICovXG5nb29nLnN0eWxlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24oZWwsIGFyZzEsIG9wdF9hcmcyKSB7XG4gIHZhciB4LCB5O1xuXG4gIGlmIChhcmcxIGluc3RhbmNlb2YgZ29vZy5tYXRoLkNvb3JkaW5hdGUpIHtcbiAgICB4ID0gYXJnMS54O1xuICAgIHkgPSBhcmcxLnk7XG4gIH0gZWxzZSB7XG4gICAgeCA9IGFyZzE7XG4gICAgeSA9IG9wdF9hcmcyO1xuICB9XG5cbiAgZWwuc3R5bGUubGVmdCA9IGdvb2cuc3R5bGUuZ2V0UGl4ZWxTdHlsZVZhbHVlXyhcbiAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfHN0cmluZ30gKi8gKHgpLCBmYWxzZSk7XG4gIGVsLnN0eWxlLnRvcCA9IGdvb2cuc3R5bGUuZ2V0UGl4ZWxTdHlsZVZhbHVlXyhcbiAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfHN0cmluZ30gKi8gKHkpLCBmYWxzZSk7XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgb2Zmc2V0TGVmdCBhbmQgb2Zmc2V0VG9wIHByb3BlcnRpZXMgb2YgYW4gZWxlbWVudCBhbmQgcmV0dXJucyB0aGVtXG4gKiBpbiBhIENvb3JkaW5hdGUgb2JqZWN0XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudC5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguQ29vcmRpbmF0ZX0gVGhlIHBvc2l0aW9uLlxuICovXG5nb29nLnN0eWxlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICByZXR1cm4gbmV3IGdvb2cubWF0aC5Db29yZGluYXRlKFxuICAgICAgLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovIChlbGVtZW50KS5vZmZzZXRMZWZ0LFxuICAgICAgLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovIChlbGVtZW50KS5vZmZzZXRUb3ApO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHZpZXdwb3J0IGVsZW1lbnQgZm9yIGEgcGFydGljdWxhciBkb2N1bWVudFxuICogQHBhcmFtIHtOb2RlPX0gb3B0X25vZGUgRE9NIG5vZGUgKERvY3VtZW50IGlzIE9LKSB0byBnZXQgdGhlIHZpZXdwb3J0IGVsZW1lbnRcbiAqICAgICBvZi5cbiAqIEByZXR1cm4ge0VsZW1lbnR9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCBvciBkb2N1bWVudC5ib2R5LlxuICovXG5nb29nLnN0eWxlLmdldENsaWVudFZpZXdwb3J0RWxlbWVudCA9IGZ1bmN0aW9uKG9wdF9ub2RlKSB7XG4gIHZhciBkb2M7XG4gIGlmIChvcHRfbm9kZSkge1xuICAgIGRvYyA9IGdvb2cuZG9tLmdldE93bmVyRG9jdW1lbnQob3B0X25vZGUpO1xuICB9IGVsc2Uge1xuICAgIGRvYyA9IGdvb2cuZG9tLmdldERvY3VtZW50KCk7XG4gIH1cblxuICAvLyBJbiBvbGQgSUUgdmVyc2lvbnMgdGhlIGRvY3VtZW50LmJvZHkgcmVwcmVzZW50ZWQgdGhlIHZpZXdwb3J0XG4gIGlmIChnb29nLnVzZXJBZ2VudC5JRSAmJiAhZ29vZy51c2VyQWdlbnQuaXNEb2N1bWVudE1vZGVPckhpZ2hlcig5KSAmJlxuICAgICAgIWdvb2cuZG9tLmdldERvbUhlbHBlcihkb2MpLmlzQ3NzMUNvbXBhdE1vZGUoKSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxuICByZXR1cm4gZG9jLmRvY3VtZW50RWxlbWVudDtcbn07XG5cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSB2aWV3cG9ydCBjb29yZGluYXRlcyByZWxhdGl2ZSB0byB0aGUgcGFnZS9kb2N1bWVudFxuICogY29udGFpbmluZyB0aGUgbm9kZS4gVGhlIHZpZXdwb3J0IG1heSBiZSB0aGUgYnJvd3NlciB2aWV3cG9ydCBmb3JcbiAqIG5vbi1pZnJhbWUgZG9jdW1lbnQsIG9yIHRoZSBpZnJhbWUgY29udGFpbmVyIGZvciBpZnJhbWUnZCBkb2N1bWVudC5cbiAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2MgVGhlIGRvY3VtZW50IHRvIHVzZSBhcyB0aGUgcmVmZXJlbmNlIHBvaW50LlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBUaGUgcGFnZSBvZmZzZXQgb2YgdGhlIHZpZXdwb3J0LlxuICovXG5nb29nLnN0eWxlLmdldFZpZXdwb3J0UGFnZU9mZnNldCA9IGZ1bmN0aW9uKGRvYykge1xuICB2YXIgYm9keSA9IGRvYy5ib2R5O1xuICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHNjcm9sbExlZnQgPSBib2R5LnNjcm9sbExlZnQgfHwgZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ7XG4gIHZhciBzY3JvbGxUb3AgPSBib2R5LnNjcm9sbFRvcCB8fCBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICByZXR1cm4gbmV3IGdvb2cubWF0aC5Db29yZGluYXRlKHNjcm9sbExlZnQsIHNjcm9sbFRvcCk7XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgY2xpZW50IHJlY3RhbmdsZSBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gKlxuICogZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHBhcnQgb2YgYSBuZXcgQ1NTIG9iamVjdCBtb2RlbCBkcmFmdCAod2l0aCBhXG4gKiBsb25nLXRpbWUgcHJlc2VuY2UgaW4gSUUpLCByZXBsYWNpbmcgdGhlIGVycm9yLXByb25lIHBhcmVudCBvZmZzZXRcbiAqIGNvbXB1dGF0aW9uIGFuZCB0aGUgbm93LWRlcHJlY2F0ZWQgR2Vja28gZ2V0Qm94T2JqZWN0Rm9yLlxuICpcbiAqIFRoaXMgdXRpbGl0eSBwYXRjaGVzIGNvbW1vbiBicm93c2VyIGJ1Z3MgaW4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0LiBJdFxuICogd2lsbCBmYWlsIGlmIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB1bnN1cHBvcnRlZC5cbiAqXG4gKiBJZiB0aGUgZWxlbWVudCBpcyBub3QgaW4gdGhlIERPTSwgdGhlIHJlc3VsdCBpcyB1bmRlZmluZWQsIGFuZCBhbiBlcnJvciBtYXlcbiAqIGJlIHRocm93biBkZXBlbmRpbmcgb24gdXNlciBhZ2VudC5cbiAqXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbCBUaGUgZWxlbWVudCB3aG9zZSBib3VuZGluZyByZWN0YW5nbGUgaXMgYmVpbmcgcXVlcmllZC5cbiAqIEByZXR1cm4ge09iamVjdH0gQSBuYXRpdmUgYm91bmRpbmcgcmVjdGFuZ2xlIHdpdGggbnVtZXJpY2FsIGxlZnQsIHRvcCxcbiAqICAgICByaWdodCwgYW5kIGJvdHRvbS4gIFJlcG9ydGVkIGJ5IEZpcmVmb3ggdG8gYmUgb2Ygb2JqZWN0IHR5cGUgQ2xpZW50UmVjdC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3R5bGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XyA9IGZ1bmN0aW9uKGVsKSB7XG4gIHZhciByZWN0O1xuICB0cnkge1xuICAgIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIEluIElFIDwgOSwgY2FsbGluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYW4gb3JwaGFuIGVsZW1lbnQgcmFpc2VzIGFuXG4gICAgLy8gXCJVbnNwZWNpZmllZCBFcnJvclwiLiBBbGwgb3RoZXIgYnJvd3NlcnMgcmV0dXJuIHplcm9zLlxuICAgIHJldHVybiB7J2xlZnQnOiAwLCAndG9wJzogMCwgJ3JpZ2h0JzogMCwgJ2JvdHRvbSc6IDB9O1xuICB9XG5cbiAgLy8gUGF0Y2ggdGhlIHJlc3VsdCBpbiBJRSBvbmx5LCBzbyB0aGF0IHRoaXMgZnVuY3Rpb24gY2FuIGJlIGlubGluZWQgaWZcbiAgLy8gY29tcGlsZWQgZm9yIG5vbi1JRS5cbiAgaWYgKGdvb2cudXNlckFnZW50LklFICYmIGVsLm93bmVyRG9jdW1lbnQuYm9keSkge1xuXG4gICAgLy8gSW4gSUUsIG1vc3Qgb2YgdGhlIHRpbWUsIDIgZXh0cmEgcGl4ZWxzIGFyZSBhZGRlZCB0byB0aGUgdG9wIGFuZCBsZWZ0XG4gICAgLy8gZHVlIHRvIHRoZSBpbXBsaWNpdCAyLXBpeGVsIGluc2V0IGJvcmRlci4gIEluIElFNi83IHF1aXJrcyBtb2RlIGFuZFxuICAgIC8vIElFNiBzdGFuZGFyZHMgbW9kZSwgdGhpcyBib3JkZXIgY2FuIGJlIG92ZXJyaWRkZW4gYnkgc2V0dGluZyB0aGVcbiAgICAvLyBkb2N1bWVudCBlbGVtZW50J3MgYm9yZGVyIHRvIHplcm8gLS0gdGh1cywgd2UgY2Fubm90IHJlbHkgb24gdGhlXG4gICAgLy8gb2Zmc2V0IGFsd2F5cyBiZWluZyAyIHBpeGVscy5cblxuICAgIC8vIEluIHF1aXJrcyBtb2RlLCB0aGUgb2Zmc2V0IGNhbiBiZSBkZXRlcm1pbmVkIGJ5IHF1ZXJ5aW5nIHRoZSBib2R5J3NcbiAgICAvLyBjbGllbnRMZWZ0L2NsaWVudFRvcCwgYnV0IGluIHN0YW5kYXJkcyBtb2RlLCBpdCBpcyBmb3VuZCBieSBxdWVyeWluZ1xuICAgIC8vIHRoZSBkb2N1bWVudCBlbGVtZW50J3MgY2xpZW50TGVmdC9jbGllbnRUb3AuICBTaW5jZSB3ZSBhbHJlYWR5IGNhbGxlZFxuICAgIC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCB3ZSBoYXZlIGFscmVhZHkgZm9yY2VkIGEgcmVmbG93LCBzbyBpdCBpcyBub3RcbiAgICAvLyB0b28gZXhwZW5zaXZlIGp1c3QgdG8gcXVlcnkgdGhlbSBhbGwuXG5cbiAgICAvLyBTZWU6IGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQzMyhWUy44NSkuYXNweFxuICAgIHZhciBkb2MgPSBlbC5vd25lckRvY3VtZW50O1xuICAgIHJlY3QubGVmdCAtPSBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudExlZnQgKyBkb2MuYm9keS5jbGllbnRMZWZ0O1xuICAgIHJlY3QudG9wIC09IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50VG9wICsgZG9jLmJvZHkuY2xpZW50VG9wO1xuICB9XG4gIHJldHVybiByZWN0O1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IHBhcmVudCB0aGF0IGNvdWxkIGFmZmVjdCB0aGUgcG9zaXRpb24gb2YgYSBnaXZlbiBlbGVtZW50LlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGdldCB0aGUgb2Zmc2V0IHBhcmVudCBmb3IuXG4gKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgZmlyc3Qgb2Zmc2V0IHBhcmVudCBvciBudWxsIGlmIG9uZSBjYW5ub3QgYmUgZm91bmQuXG4gKi9cbmdvb2cuc3R5bGUuZ2V0T2Zmc2V0UGFyZW50ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAvLyBlbGVtZW50Lm9mZnNldFBhcmVudCBkb2VzIHRoZSByaWdodCB0aGluZyBpbiBJRTcgYW5kIGJlbG93LiAgSW4gb3RoZXJcbiAgLy8gYnJvd3NlcnMgaXQgb25seSBpbmNsdWRlcyBlbGVtZW50cyB3aXRoIHBvc2l0aW9uIGFic29sdXRlLCByZWxhdGl2ZSBvclxuICAvLyBmaXhlZCwgbm90IGVsZW1lbnRzIHdpdGggb3ZlcmZsb3cgc2V0IHRvIGF1dG8gb3Igc2Nyb2xsLlxuICBpZiAoZ29vZy51c2VyQWdlbnQuSUUgJiYgIWdvb2cudXNlckFnZW50LmlzRG9jdW1lbnRNb2RlT3JIaWdoZXIoOCkpIHtcbiAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICB2YXIgZG9jID0gZ29vZy5kb20uZ2V0T3duZXJEb2N1bWVudChlbGVtZW50KTtcbiAgdmFyIHBvc2l0aW9uU3R5bGUgPSBnb29nLnN0eWxlLmdldFN0eWxlXyhlbGVtZW50LCAncG9zaXRpb24nKTtcbiAgdmFyIHNraXBTdGF0aWMgPSBwb3NpdGlvblN0eWxlID09ICdmaXhlZCcgfHwgcG9zaXRpb25TdHlsZSA9PSAnYWJzb2x1dGUnO1xuICBmb3IgKHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7IHBhcmVudCAmJiBwYXJlbnQgIT0gZG9jO1xuICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlKSB7XG4gICAgLy8gU2tpcCBzaGFkb3dET00gcm9vdHMuXG4gICAgaWYgKHBhcmVudC5ub2RlVHlwZSA9PSBnb29nLmRvbS5Ob2RlVHlwZS5ET0NVTUVOVF9GUkFHTUVOVCAmJlxuICAgICAgICBwYXJlbnQuaG9zdCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50Lmhvc3Q7XG4gICAgfVxuICAgIHBvc2l0aW9uU3R5bGUgPVxuICAgICAgICBnb29nLnN0eWxlLmdldFN0eWxlXygvKiogQHR5cGUgeyFFbGVtZW50fSAqLyAocGFyZW50KSwgJ3Bvc2l0aW9uJyk7XG4gICAgc2tpcFN0YXRpYyA9IHNraXBTdGF0aWMgJiYgcG9zaXRpb25TdHlsZSA9PSAnc3RhdGljJyAmJlxuICAgICAgICAgICAgICAgICBwYXJlbnQgIT0gZG9jLmRvY3VtZW50RWxlbWVudCAmJiBwYXJlbnQgIT0gZG9jLmJvZHk7XG4gICAgaWYgKCFza2lwU3RhdGljICYmIChwYXJlbnQuc2Nyb2xsV2lkdGggPiBwYXJlbnQuY2xpZW50V2lkdGggfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5zY3JvbGxIZWlnaHQgPiBwYXJlbnQuY2xpZW50SGVpZ2h0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblN0eWxlID09ICdmaXhlZCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uU3R5bGUgPT0gJ2Fic29sdXRlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25TdHlsZSA9PSAncmVsYXRpdmUnKSkge1xuICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7IUVsZW1lbnR9ICovIChwYXJlbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBDYWxjdWxhdGVzIGFuZCByZXR1cm5zIHRoZSB2aXNpYmxlIHJlY3RhbmdsZSBmb3IgYSBnaXZlbiBlbGVtZW50LiBSZXR1cm5zIGFcbiAqIGJveCBkZXNjcmliaW5nIHRoZSB2aXNpYmxlIHBvcnRpb24gb2YgdGhlIG5lYXJlc3Qgc2Nyb2xsYWJsZSBvZmZzZXQgYW5jZXN0b3IuXG4gKiBDb29yZGluYXRlcyBhcmUgZ2l2ZW4gcmVsYXRpdmUgdG8gdGhlIGRvY3VtZW50LlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGdldCB0aGUgdmlzaWJsZSByZWN0IGZvci5cbiAqIEByZXR1cm4ge2dvb2cubWF0aC5Cb3h9IEJvdW5kaW5nIGVsZW1lbnRCb3ggZGVzY3JpYmluZyB0aGUgdmlzaWJsZSByZWN0IG9yXG4gKiAgICAgbnVsbCBpZiBzY3JvbGxhYmxlIGFuY2VzdG9yIGlzbid0IGluc2lkZSB0aGUgdmlzaWJsZSB2aWV3cG9ydC5cbiAqL1xuZ29vZy5zdHlsZS5nZXRWaXNpYmxlUmVjdEZvckVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIHZhciB2aXNpYmxlUmVjdCA9IG5ldyBnb29nLm1hdGguQm94KDAsIEluZmluaXR5LCBJbmZpbml0eSwgMCk7XG4gIHZhciBkb20gPSBnb29nLmRvbS5nZXREb21IZWxwZXIoZWxlbWVudCk7XG4gIHZhciBib2R5ID0gZG9tLmdldERvY3VtZW50KCkuYm9keTtcbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGRvbS5nZXREb2N1bWVudCgpLmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHNjcm9sbEVsID0gZG9tLmdldERvY3VtZW50U2Nyb2xsRWxlbWVudCgpO1xuXG4gIC8vIERldGVybWluZSB0aGUgc2l6ZSBvZiB0aGUgdmlzaWJsZSByZWN0IGJ5IGNsaW1iaW5nIHRoZSBkb20gYWNjb3VudGluZyBmb3JcbiAgLy8gYWxsIHNjcm9sbGFibGUgY29udGFpbmVycy5cbiAgZm9yICh2YXIgZWwgPSBlbGVtZW50OyBlbCA9IGdvb2cuc3R5bGUuZ2V0T2Zmc2V0UGFyZW50KGVsKTsgKSB7XG4gICAgLy8gY2xpZW50V2lkdGggaXMgemVybyBmb3IgaW5saW5lIGJsb2NrIGVsZW1lbnRzIGluIElFLlxuICAgIC8vIG9uIFdFQktJVCwgYm9keSBlbGVtZW50IGNhbiBoYXZlIGNsaWVudEhlaWdodCA9IDAgYW5kIHNjcm9sbEhlaWdodCA+IDBcbiAgICBpZiAoKCFnb29nLnVzZXJBZ2VudC5JRSB8fCBlbC5jbGllbnRXaWR0aCAhPSAwKSAmJlxuICAgICAgICAoIWdvb2cudXNlckFnZW50LldFQktJVCB8fCBlbC5jbGllbnRIZWlnaHQgIT0gMCB8fCBlbCAhPSBib2R5KSAmJlxuICAgICAgICAvLyBib2R5IG1heSBoYXZlIG92ZXJmbG93IHNldCBvbiBpdCwgeWV0IHdlIHN0aWxsIGdldCB0aGUgZW50aXJlXG4gICAgICAgIC8vIHZpZXdwb3J0LiBJbiBzb21lIGJyb3dzZXJzLCBlbC5vZmZzZXRQYXJlbnQgbWF5IGJlXG4gICAgICAgIC8vIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgc28gY2hlY2sgZm9yIHRoYXQgdG9vLlxuICAgICAgICAoZWwgIT0gYm9keSAmJiBlbCAhPSBkb2N1bWVudEVsZW1lbnQgJiZcbiAgICAgICAgICAgIGdvb2cuc3R5bGUuZ2V0U3R5bGVfKGVsLCAnb3ZlcmZsb3cnKSAhPSAndmlzaWJsZScpKSB7XG4gICAgICB2YXIgcG9zID0gZ29vZy5zdHlsZS5nZXRQYWdlT2Zmc2V0KGVsKTtcbiAgICAgIHZhciBjbGllbnQgPSBnb29nLnN0eWxlLmdldENsaWVudExlZnRUb3AoZWwpO1xuICAgICAgcG9zLnggKz0gY2xpZW50Lng7XG4gICAgICBwb3MueSArPSBjbGllbnQueTtcblxuICAgICAgdmlzaWJsZVJlY3QudG9wID0gTWF0aC5tYXgodmlzaWJsZVJlY3QudG9wLCBwb3MueSk7XG4gICAgICB2aXNpYmxlUmVjdC5yaWdodCA9IE1hdGgubWluKHZpc2libGVSZWN0LnJpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MueCArIGVsLmNsaWVudFdpZHRoKTtcbiAgICAgIHZpc2libGVSZWN0LmJvdHRvbSA9IE1hdGgubWluKHZpc2libGVSZWN0LmJvdHRvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcy55ICsgZWwuY2xpZW50SGVpZ2h0KTtcbiAgICAgIHZpc2libGVSZWN0LmxlZnQgPSBNYXRoLm1heCh2aXNpYmxlUmVjdC5sZWZ0LCBwb3MueCk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2xpcCBieSB3aW5kb3cncyB2aWV3cG9ydC5cbiAgdmFyIHNjcm9sbFggPSBzY3JvbGxFbC5zY3JvbGxMZWZ0LCBzY3JvbGxZID0gc2Nyb2xsRWwuc2Nyb2xsVG9wO1xuICB2aXNpYmxlUmVjdC5sZWZ0ID0gTWF0aC5tYXgodmlzaWJsZVJlY3QubGVmdCwgc2Nyb2xsWCk7XG4gIHZpc2libGVSZWN0LnRvcCA9IE1hdGgubWF4KHZpc2libGVSZWN0LnRvcCwgc2Nyb2xsWSk7XG4gIHZhciB3aW5TaXplID0gZG9tLmdldFZpZXdwb3J0U2l6ZSgpO1xuICB2aXNpYmxlUmVjdC5yaWdodCA9IE1hdGgubWluKHZpc2libGVSZWN0LnJpZ2h0LCBzY3JvbGxYICsgd2luU2l6ZS53aWR0aCk7XG4gIHZpc2libGVSZWN0LmJvdHRvbSA9IE1hdGgubWluKHZpc2libGVSZWN0LmJvdHRvbSwgc2Nyb2xsWSArIHdpblNpemUuaGVpZ2h0KTtcbiAgcmV0dXJuIHZpc2libGVSZWN0LnRvcCA+PSAwICYmIHZpc2libGVSZWN0LmxlZnQgPj0gMCAmJlxuICAgICAgICAgdmlzaWJsZVJlY3QuYm90dG9tID4gdmlzaWJsZVJlY3QudG9wICYmXG4gICAgICAgICB2aXNpYmxlUmVjdC5yaWdodCA+IHZpc2libGVSZWN0LmxlZnQgP1xuICAgICAgICAgdmlzaWJsZVJlY3QgOiBudWxsO1xufTtcblxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHtAY29kZSBjb250YWluZXJ9IHdpdGggdGhlIG1pbmltdW0gYW1vdW50IHNvXG4gKiB0aGF0IHRoZSBjb250ZW50IGFuZCB0aGUgYm9yZGVycyBvZiB0aGUgZ2l2ZW4ge0Bjb2RlIGVsZW1lbnR9IGJlY29tZSB2aXNpYmxlLlxuICogSWYgdGhlIGVsZW1lbnQgaXMgYmlnZ2VyIHRoYW4gdGhlIGNvbnRhaW5lciwgaXRzIHRvcCBsZWZ0IGNvcm5lciB3aWxsIGJlXG4gKiBhbGlnbmVkIGFzIGNsb3NlIHRvIHRoZSBjb250YWluZXIncyB0b3AgbGVmdCBjb3JuZXIgYXMgcG9zc2libGUuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIG1ha2UgdmlzaWJsZS5cbiAqIEBwYXJhbSB7RWxlbWVudD19IG9wdF9jb250YWluZXIgVGhlIGNvbnRhaW5lciB0byBzY3JvbGwuIElmIG5vdCBzZXQsIHRoZW4gdGhlXG4gKiAgICAgZG9jdW1lbnQgc2Nyb2xsIGVsZW1lbnQgd2lsbCBiZSB1c2VkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NlbnRlciBXaGV0aGVyIHRvIGNlbnRlciB0aGUgZWxlbWVudCBpbiB0aGUgY29udGFpbmVyLlxuICogICAgIERlZmF1bHRzIHRvIGZhbHNlLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBUaGUgbmV3IHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgY29udGFpbmVyLFxuICogICAgIGluIGZvcm0gb2YgZ29vZy5tYXRoLkNvb3JkaW5hdGUoc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wKS5cbiAqL1xuZ29vZy5zdHlsZS5nZXRDb250YWluZXJPZmZzZXRUb1Njcm9sbEludG8gPVxuICAgIGZ1bmN0aW9uKGVsZW1lbnQsIG9wdF9jb250YWluZXIsIG9wdF9jZW50ZXIpIHtcbiAgdmFyIGNvbnRhaW5lciA9IG9wdF9jb250YWluZXIgfHwgZ29vZy5kb20uZ2V0RG9jdW1lbnRTY3JvbGxFbGVtZW50KCk7XG4gIC8vIEFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50J3MgYm9yZGVyJ3MgdG9wIGxlZnQgY29ybmVyLlxuICB2YXIgZWxlbWVudFBvcyA9IGdvb2cuc3R5bGUuZ2V0UGFnZU9mZnNldChlbGVtZW50KTtcbiAgLy8gQWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGNvbnRhaW5lcidzIGJvcmRlcidzIHRvcCBsZWZ0IGNvcm5lci5cbiAgdmFyIGNvbnRhaW5lclBvcyA9IGdvb2cuc3R5bGUuZ2V0UGFnZU9mZnNldChjb250YWluZXIpO1xuICB2YXIgY29udGFpbmVyQm9yZGVyID0gZ29vZy5zdHlsZS5nZXRCb3JkZXJCb3goY29udGFpbmVyKTtcbiAgaWYgKGNvbnRhaW5lciA9PSBnb29nLmRvbS5nZXREb2N1bWVudFNjcm9sbEVsZW1lbnQoKSkge1xuICAgIC8vIFRoZSBlbGVtZW50IHBvc2l0aW9uIGlzIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIHBhZ2Ugb2Zmc2V0LCBhbmQgdGhlXG4gICAgLy8gZG9jdW1lbnQgc2Nyb2xsIGVsZW1lbnQgaG9sZHMgdGhlIHNjcm9sbCBwb3NpdGlvbiB3aXRoaW4gdGhlIHBhZ2UuIFdlIGNhblxuICAgIC8vIHVzZSB0aGUgc2Nyb2xsIHBvc2l0aW9uIHRvIGNhbGN1bGF0ZSB0aGUgcmVsYXRpdmUgcG9zaXRpb24gZnJvbSB0aGVcbiAgICAvLyBlbGVtZW50LlxuICAgIHZhciByZWxYID0gZWxlbWVudFBvcy54IC0gY29udGFpbmVyLnNjcm9sbExlZnQ7XG4gICAgdmFyIHJlbFkgPSBlbGVtZW50UG9zLnkgLSBjb250YWluZXIuc2Nyb2xsVG9wO1xuICAgIGlmIChnb29nLnVzZXJBZ2VudC5JRSAmJiAhZ29vZy51c2VyQWdlbnQuaXNEb2N1bWVudE1vZGVPckhpZ2hlcigxMCkpIHtcbiAgICAgIC8vIEluIG9sZGVyIHZlcnNpb25zIG9mIElFIGdldFBhZ2VPZmZzZXQoZWxlbWVudCkgZG9lcyBub3QgaW5jbHVkZSB0aGVcbiAgICAgIC8vIGNvbnRhaW5lciBib3JkZXIgc28gaXQgaGFzIHRvIGJlIGFkZGVkIHRvIGFjY29tb2RhdGUuXG4gICAgICByZWxYICs9IGNvbnRhaW5lckJvcmRlci5sZWZ0O1xuICAgICAgcmVsWSArPSBjb250YWluZXJCb3JkZXIudG9wO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBSZWxhdGl2ZSBwb3MuIG9mIHRoZSBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgY29udGFpbmVyJ3MgY29udGVudCBib3guXG4gICAgdmFyIHJlbFggPSBlbGVtZW50UG9zLnggLSBjb250YWluZXJQb3MueCAtIGNvbnRhaW5lckJvcmRlci5sZWZ0O1xuICAgIHZhciByZWxZID0gZWxlbWVudFBvcy55IC0gY29udGFpbmVyUG9zLnkgLSBjb250YWluZXJCb3JkZXIudG9wO1xuICB9XG4gIC8vIEhvdyBtdWNoIHRoZSBlbGVtZW50IGNhbiBtb3ZlIGluIHRoZSBjb250YWluZXIsIGkuZS4gdGhlIGRpZmZlcmVuY2UgYmV0d2VlblxuICAvLyB0aGUgZWxlbWVudCdzIGJvdHRvbS1yaWdodC1tb3N0IGFuZCB0b3AtbGVmdC1tb3N0IHBvc2l0aW9uIHdoZXJlIGl0J3NcbiAgLy8gZnVsbHkgdmlzaWJsZS5cbiAgdmFyIHNwYWNlWCA9IGNvbnRhaW5lci5jbGllbnRXaWR0aCAtXG4gICAgICAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyAoZWxlbWVudCkub2Zmc2V0V2lkdGg7XG4gIHZhciBzcGFjZVkgPSBjb250YWluZXIuY2xpZW50SGVpZ2h0IC1cbiAgICAgIC8qKiBAdHlwZSB7SFRNTEVsZW1lbnR9ICovIChlbGVtZW50KS5vZmZzZXRIZWlnaHQ7XG5cbiAgdmFyIHNjcm9sbExlZnQgPSBjb250YWluZXIuc2Nyb2xsTGVmdDtcbiAgdmFyIHNjcm9sbFRvcCA9IGNvbnRhaW5lci5zY3JvbGxUb3A7XG4gIGlmIChvcHRfY2VudGVyKSB7XG4gICAgLy8gQWxsIGJyb3dzZXJzIHJvdW5kIG5vbi1pbnRlZ2VyIHNjcm9sbCBwb3NpdGlvbnMgZG93bi5cbiAgICBzY3JvbGxMZWZ0ICs9IHJlbFggLSBzcGFjZVggLyAyO1xuICAgIHNjcm9sbFRvcCArPSByZWxZIC0gc3BhY2VZIC8gMjtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIGZvcm11bGEgd2FzIGRlc2lnbmVkIHRvIGdpdmUgdGhlIGNvcnJlY3Qgc2Nyb2xsIHZhbHVlcyBpbiB0aGVcbiAgICAvLyBmb2xsb3dpbmcgY2FzZXM6XG4gICAgLy8gLSBlbGVtZW50IGlzIGhpZ2hlciB0aGFuIGNvbnRhaW5lciAoc3BhY2VZIDwgMCkgPT4gc2Nyb2xsIGRvd24gYnkgcmVsWVxuICAgIC8vIC0gZWxlbWVudCBpcyBub3QgaGlnaGVyIHRoYXQgY29udGFpbmVyIChzcGFjZVkgPj0gMCk6XG4gICAgLy8gICAtIGl0IGlzIGFib3ZlIGNvbnRhaW5lciAocmVsWSA8IDApID0+IHNjcm9sbCB1cCBieSBhYnMocmVsWSlcbiAgICAvLyAgIC0gaXQgaXMgYmVsb3cgY29udGFpbmVyIChyZWxZID4gc3BhY2VZKSA9PiBzY3JvbGwgZG93biBieSByZWxZIC0gc3BhY2VZXG4gICAgLy8gICAtIGl0IGlzIGluIHRoZSBjb250YWluZXIgPT4gZG9uJ3Qgc2Nyb2xsXG4gICAgc2Nyb2xsTGVmdCArPSBNYXRoLm1pbihyZWxYLCBNYXRoLm1heChyZWxYIC0gc3BhY2VYLCAwKSk7XG4gICAgc2Nyb2xsVG9wICs9IE1hdGgubWluKHJlbFksIE1hdGgubWF4KHJlbFkgLSBzcGFjZVksIDApKTtcbiAgfVxuICByZXR1cm4gbmV3IGdvb2cubWF0aC5Db29yZGluYXRlKHNjcm9sbExlZnQsIHNjcm9sbFRvcCk7XG59O1xuXG5cbi8qKlxuICogQ2hhbmdlcyB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHtAY29kZSBjb250YWluZXJ9IHdpdGggdGhlIG1pbmltdW0gYW1vdW50IHNvXG4gKiB0aGF0IHRoZSBjb250ZW50IGFuZCB0aGUgYm9yZGVycyBvZiB0aGUgZ2l2ZW4ge0Bjb2RlIGVsZW1lbnR9IGJlY29tZSB2aXNpYmxlLlxuICogSWYgdGhlIGVsZW1lbnQgaXMgYmlnZ2VyIHRoYW4gdGhlIGNvbnRhaW5lciwgaXRzIHRvcCBsZWZ0IGNvcm5lciB3aWxsIGJlXG4gKiBhbGlnbmVkIGFzIGNsb3NlIHRvIHRoZSBjb250YWluZXIncyB0b3AgbGVmdCBjb3JuZXIgYXMgcG9zc2libGUuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIG1ha2UgdmlzaWJsZS5cbiAqIEBwYXJhbSB7RWxlbWVudD19IG9wdF9jb250YWluZXIgVGhlIGNvbnRhaW5lciB0byBzY3JvbGwuIElmIG5vdCBzZXQsIHRoZW4gdGhlXG4gKiAgICAgZG9jdW1lbnQgc2Nyb2xsIGVsZW1lbnQgd2lsbCBiZSB1c2VkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NlbnRlciBXaGV0aGVyIHRvIGNlbnRlciB0aGUgZWxlbWVudCBpbiB0aGUgY29udGFpbmVyLlxuICogICAgIERlZmF1bHRzIHRvIGZhbHNlLlxuICovXG5nb29nLnN0eWxlLnNjcm9sbEludG9Db250YWluZXJWaWV3ID1cbiAgICBmdW5jdGlvbihlbGVtZW50LCBvcHRfY29udGFpbmVyLCBvcHRfY2VudGVyKSB7XG4gIHZhciBjb250YWluZXIgPSBvcHRfY29udGFpbmVyIHx8IGdvb2cuZG9tLmdldERvY3VtZW50U2Nyb2xsRWxlbWVudCgpO1xuICB2YXIgb2Zmc2V0ID1cbiAgICAgIGdvb2cuc3R5bGUuZ2V0Q29udGFpbmVyT2Zmc2V0VG9TY3JvbGxJbnRvKGVsZW1lbnQsIGNvbnRhaW5lciwgb3B0X2NlbnRlcik7XG4gIGNvbnRhaW5lci5zY3JvbGxMZWZ0ID0gb2Zmc2V0Lng7XG4gIGNvbnRhaW5lci5zY3JvbGxUb3AgPSBvZmZzZXQueTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGNsaWVudExlZnQgKHdpZHRoIG9mIHRoZSBsZWZ0IGJvcmRlciBhbmQsIGlmIHRoZSBkaXJlY3Rpb25hbGl0eSBpc1xuICogcmlnaHQgdG8gbGVmdCwgdGhlIHZlcnRpY2FsIHNjcm9sbGJhcikgYW5kIGNsaWVudFRvcCBhcyBhIGNvb3JkaW5hdGUgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgRWxlbWVudCB0byBnZXQgY2xpZW50TGVmdCBmb3IuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkNvb3JkaW5hdGV9IENsaWVudCBsZWZ0IGFuZCB0b3AuXG4gKi9cbmdvb2cuc3R5bGUuZ2V0Q2xpZW50TGVmdFRvcCA9IGZ1bmN0aW9uKGVsKSB7XG4gIHJldHVybiBuZXcgZ29vZy5tYXRoLkNvb3JkaW5hdGUoZWwuY2xpZW50TGVmdCwgZWwuY2xpZW50VG9wKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgQ29vcmRpbmF0ZSBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIHRvcC1sZWZ0IG9mIHRoZSBIVE1MIGRvY3VtZW50LlxuICogSW1wbGVtZW50ZWQgYXMgYSBzaW5nbGUgZnVuY3Rpb24gdG8gc2F2ZSBoYXZpbmcgdG8gZG8gdHdvIHJlY3Vyc2l2ZSBsb29wcyBpblxuICogb3BlcmEgYW5kIHNhZmFyaSBqdXN0IHRvIGdldCBib3RoIGNvb3JkaW5hdGVzLiAgSWYgeW91IGp1c3Qgd2FudCBvbmUgdmFsdWUgZG9cbiAqIHVzZSBnb29nLnN0eWxlLmdldFBhZ2VPZmZzZXRMZWZ0KCkgYW5kIGdvb2cuc3R5bGUuZ2V0UGFnZU9mZnNldFRvcCgpLCBidXRcbiAqIG5vdGUgaWYgeW91IGNhbGwgYm90aCB0aG9zZSBtZXRob2RzIHRoZSB0cmVlIHdpbGwgYmUgYW5hbHlzZWQgdHdpY2UuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbCBFbGVtZW50IHRvIGdldCB0aGUgcGFnZSBvZmZzZXQgZm9yLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBUaGUgcGFnZSBvZmZzZXQuXG4gKi9cbmdvb2cuc3R5bGUuZ2V0UGFnZU9mZnNldCA9IGZ1bmN0aW9uKGVsKSB7XG4gIHZhciBkb2MgPSBnb29nLmRvbS5nZXRPd25lckRvY3VtZW50KGVsKTtcbiAgLy8gVE9ETyhnYm95ZXIpOiBVcGRhdGUgdGhlIGpzZG9jIGluIGEgd2F5IHRoYXQgZG9lc24ndCBicmVhayB0aGUgdW5pdmVyc2UuXG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnRPYmplY3QoZWwsICdQYXJhbWV0ZXIgaXMgcmVxdWlyZWQnKTtcblxuICAvLyBOT1RFKGFydik6IElmIGVsZW1lbnQgaXMgaGlkZGVuIChkaXNwbGF5IG5vbmUgb3IgZGlzY29ubmVjdGVkIG9yIGFueSB0aGVcbiAgLy8gYW5jZXN0b3JzIGFyZSBoaWRkZW4pIHdlIGdldCAoMCwwKSBieSBkZWZhdWx0IGJ1dCB3ZSBzdGlsbCBkbyB0aGVcbiAgLy8gYWNjdW11bGF0aW9uIG9mIHNjcm9sbCBwb3NpdGlvbi5cblxuICAvLyBUT0RPKGFydik6IFNob3VsZCB3ZSBjaGVjayBpZiB0aGUgbm9kZSBpcyBkaXNjb25uZWN0ZWQgYW5kIGluIHRoYXQgY2FzZVxuICAvLyAgICAgICAgICAgIHJldHVybiAoMCwwKT9cblxuICB2YXIgcG9zID0gbmV3IGdvb2cubWF0aC5Db29yZGluYXRlKDAsIDApO1xuICB2YXIgdmlld3BvcnRFbGVtZW50ID0gZ29vZy5zdHlsZS5nZXRDbGllbnRWaWV3cG9ydEVsZW1lbnQoZG9jKTtcbiAgaWYgKGVsID09IHZpZXdwb3J0RWxlbWVudCkge1xuICAgIC8vIHZpZXdwb3J0IGlzIGFsd2F5cyBhdCAwLDAgYXMgdGhhdCBkZWZpbmVkIHRoZSBjb29yZGluYXRlIHN5c3RlbSBmb3IgdGhpc1xuICAgIC8vIGZ1bmN0aW9uIC0gdGhpcyBhdm9pZHMgc3BlY2lhbCBjYXNlIGNoZWNrcyBpbiB0aGUgY29kZSBiZWxvd1xuICAgIHJldHVybiBwb3M7XG4gIH1cblxuICB2YXIgYm94ID0gZ29vZy5zdHlsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3RfKGVsKTtcbiAgLy8gTXVzdCBhZGQgdGhlIHNjcm9sbCBjb29yZGluYXRlcyBpbiB0byBnZXQgdGhlIGFic29sdXRlIHBhZ2Ugb2Zmc2V0XG4gIC8vIG9mIGVsZW1lbnQgc2luY2UgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IHJldHVybnMgcmVsYXRpdmUgY29vcmRpbmF0ZXMgdG9cbiAgLy8gdGhlIHZpZXdwb3J0LlxuICB2YXIgc2Nyb2xsQ29vcmQgPSBnb29nLmRvbS5nZXREb21IZWxwZXIoZG9jKS5nZXREb2N1bWVudFNjcm9sbCgpO1xuICBwb3MueCA9IGJveC5sZWZ0ICsgc2Nyb2xsQ29vcmQueDtcbiAgcG9zLnkgPSBib3gudG9wICsgc2Nyb2xsQ29vcmQueTtcblxuICByZXR1cm4gcG9zO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxlZnQgY29vcmRpbmF0ZSBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIHRoZSBIVE1MIGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsIEVsZW1lbnRzLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbGVmdCBjb29yZGluYXRlLlxuICovXG5nb29nLnN0eWxlLmdldFBhZ2VPZmZzZXRMZWZ0ID0gZnVuY3Rpb24oZWwpIHtcbiAgcmV0dXJuIGdvb2cuc3R5bGUuZ2V0UGFnZU9mZnNldChlbCkueDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0b3AgY29vcmRpbmF0ZSBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIHRoZSBIVE1MIGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsIEVsZW1lbnRzLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgdG9wIGNvb3JkaW5hdGUuXG4gKi9cbmdvb2cuc3R5bGUuZ2V0UGFnZU9mZnNldFRvcCA9IGZ1bmN0aW9uKGVsKSB7XG4gIHJldHVybiBnb29nLnN0eWxlLmdldFBhZ2VPZmZzZXQoZWwpLnk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhIENvb3JkaW5hdGUgb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSB0b3AtbGVmdCBvZiBhbiBIVE1MIGRvY3VtZW50XG4gKiBpbiBhbiBhbmNlc3RvciBmcmFtZSBvZiB0aGlzIGVsZW1lbnQuIFVzZWQgZm9yIG1lYXN1cmluZyB0aGUgcG9zaXRpb24gb2ZcbiAqIGFuIGVsZW1lbnQgaW5zaWRlIGEgZnJhbWUgcmVsYXRpdmUgdG8gYSBjb250YWluaW5nIGZyYW1lLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgRWxlbWVudCB0byBnZXQgdGhlIHBhZ2Ugb2Zmc2V0IGZvci5cbiAqIEBwYXJhbSB7V2luZG93fSByZWxhdGl2ZVdpbiBUaGUgd2luZG93IHRvIG1lYXN1cmUgcmVsYXRpdmUgdG8uIElmIHJlbGF0aXZlV2luXG4gKiAgICAgaXMgbm90IGluIHRoZSBhbmNlc3RvciBmcmFtZSBjaGFpbiBvZiB0aGUgZWxlbWVudCwgd2UgbWVhc3VyZSByZWxhdGl2ZSB0b1xuICogICAgIHRoZSB0b3AtbW9zdCB3aW5kb3cuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkNvb3JkaW5hdGV9IFRoZSBwYWdlIG9mZnNldC5cbiAqL1xuZ29vZy5zdHlsZS5nZXRGcmFtZWRQYWdlT2Zmc2V0ID0gZnVuY3Rpb24oZWwsIHJlbGF0aXZlV2luKSB7XG4gIHZhciBwb3NpdGlvbiA9IG5ldyBnb29nLm1hdGguQ29vcmRpbmF0ZSgwLCAwKTtcblxuICAvLyBJdGVyYXRlIHVwIHRoZSBhbmNlc3RvciBmcmFtZSBjaGFpbiwga2VlcGluZyB0cmFjayBvZiB0aGUgY3VycmVudCB3aW5kb3dcbiAgLy8gYW5kIHRoZSBjdXJyZW50IGVsZW1lbnQgaW4gdGhhdCB3aW5kb3cuXG4gIHZhciBjdXJyZW50V2luID0gZ29vZy5kb20uZ2V0V2luZG93KGdvb2cuZG9tLmdldE93bmVyRG9jdW1lbnQoZWwpKTtcbiAgdmFyIGN1cnJlbnRFbCA9IGVsO1xuICBkbyB7XG4gICAgLy8gaWYgd2UncmUgYXQgdGhlIHRvcCB3aW5kb3csIHdlIHdhbnQgdG8gZ2V0IHRoZSBwYWdlIG9mZnNldC5cbiAgICAvLyBpZiB3ZSdyZSBhdCBhbiBpbm5lciBmcmFtZSwgd2Ugb25seSB3YW50IHRvIGdldCB0aGUgd2luZG93IHBvc2l0aW9uXG4gICAgLy8gc28gdGhhdCB3ZSBjYW4gZGV0ZXJtaW5lIHRoZSBhY3R1YWwgcGFnZSBvZmZzZXQgaW4gdGhlIGNvbnRleHQgb2ZcbiAgICAvLyB0aGUgb3V0ZXIgd2luZG93LlxuICAgIHZhciBvZmZzZXQgPSBjdXJyZW50V2luID09IHJlbGF0aXZlV2luID9cbiAgICAgICAgZ29vZy5zdHlsZS5nZXRQYWdlT2Zmc2V0KGN1cnJlbnRFbCkgOlxuICAgICAgICBnb29nLnN0eWxlLmdldENsaWVudFBvc2l0aW9uRm9yRWxlbWVudF8oXG4gICAgICAgICAgICBnb29nLmFzc2VydHMuYXNzZXJ0KGN1cnJlbnRFbCkpO1xuXG4gICAgcG9zaXRpb24ueCArPSBvZmZzZXQueDtcbiAgICBwb3NpdGlvbi55ICs9IG9mZnNldC55O1xuICB9IHdoaWxlIChjdXJyZW50V2luICYmIGN1cnJlbnRXaW4gIT0gcmVsYXRpdmVXaW4gJiZcbiAgICAgIGN1cnJlbnRXaW4gIT0gY3VycmVudFdpbi5wYXJlbnQgJiZcbiAgICAgIChjdXJyZW50RWwgPSBjdXJyZW50V2luLmZyYW1lRWxlbWVudCkgJiZcbiAgICAgIChjdXJyZW50V2luID0gY3VycmVudFdpbi5wYXJlbnQpKTtcblxuICByZXR1cm4gcG9zaXRpb247XG59O1xuXG5cbi8qKlxuICogVHJhbnNsYXRlcyB0aGUgc3BlY2lmaWVkIHJlY3QgcmVsYXRpdmUgdG8gb3JpZ0Jhc2UgcGFnZSwgZm9yIG5ld0Jhc2UgcGFnZS5cbiAqIElmIG9yaWdCYXNlIGFuZCBuZXdCYXNlIGFyZSB0aGUgc2FtZSwgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdGhpbmcuXG4gKlxuICogQHBhcmFtIHtnb29nLm1hdGguUmVjdH0gcmVjdCBUaGUgc291cmNlIHJlY3RhbmdsZSByZWxhdGl2ZSB0byBvcmlnQmFzZSBwYWdlLFxuICogICAgIGFuZCBpdCB3aWxsIGhhdmUgdGhlIHRyYW5zbGF0ZWQgcmVzdWx0LlxuICogQHBhcmFtIHtnb29nLmRvbS5Eb21IZWxwZXJ9IG9yaWdCYXNlIFRoZSBEb21IZWxwZXIgZm9yIHRoZSBpbnB1dCByZWN0YW5nbGUuXG4gKiBAcGFyYW0ge2dvb2cuZG9tLkRvbUhlbHBlcn0gbmV3QmFzZSBUaGUgRG9tSGVscGVyIGZvciB0aGUgcmVzdWx0YW50XG4gKiAgICAgY29vcmRpbmF0ZS4gIFRoaXMgbXVzdCBiZSBhIERPTSBmb3IgYW4gYW5jZXN0b3IgZnJhbWUgb2Ygb3JpZ0Jhc2VcbiAqICAgICBvciB0aGUgc2FtZSBhcyBvcmlnQmFzZS5cbiAqL1xuZ29vZy5zdHlsZS50cmFuc2xhdGVSZWN0Rm9yQW5vdGhlckZyYW1lID0gZnVuY3Rpb24ocmVjdCwgb3JpZ0Jhc2UsIG5ld0Jhc2UpIHtcbiAgaWYgKG9yaWdCYXNlLmdldERvY3VtZW50KCkgIT0gbmV3QmFzZS5nZXREb2N1bWVudCgpKSB7XG4gICAgdmFyIGJvZHkgPSBvcmlnQmFzZS5nZXREb2N1bWVudCgpLmJvZHk7XG4gICAgdmFyIHBvcyA9IGdvb2cuc3R5bGUuZ2V0RnJhbWVkUGFnZU9mZnNldChib2R5LCBuZXdCYXNlLmdldFdpbmRvdygpKTtcblxuICAgIC8vIEFkanVzdCBCb2R5J3MgbWFyZ2luLlxuICAgIHBvcyA9IGdvb2cubWF0aC5Db29yZGluYXRlLmRpZmZlcmVuY2UocG9zLCBnb29nLnN0eWxlLmdldFBhZ2VPZmZzZXQoYm9keSkpO1xuXG4gICAgaWYgKGdvb2cudXNlckFnZW50LklFICYmICFnb29nLnVzZXJBZ2VudC5pc0RvY3VtZW50TW9kZU9ySGlnaGVyKDkpICYmXG4gICAgICAgICFvcmlnQmFzZS5pc0NzczFDb21wYXRNb2RlKCkpIHtcbiAgICAgIHBvcyA9IGdvb2cubWF0aC5Db29yZGluYXRlLmRpZmZlcmVuY2UocG9zLCBvcmlnQmFzZS5nZXREb2N1bWVudFNjcm9sbCgpKTtcbiAgICB9XG5cbiAgICByZWN0LmxlZnQgKz0gcG9zLng7XG4gICAgcmVjdC50b3AgKz0gcG9zLnk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGFub3RoZXIgZWxlbWVudCBpbiB0aGVcbiAqIGRvY3VtZW50LiAgQSByZWxhdGl2ZSB0byBCXG4gKiBAcGFyYW0ge0VsZW1lbnR8RXZlbnR8Z29vZy5ldmVudHMuRXZlbnR9IGEgRWxlbWVudCBvciBtb3VzZSBldmVudCB3aG9zZVxuICogICAgIHBvc2l0aW9uIHdlJ3JlIGNhbGN1bGF0aW5nLlxuICogQHBhcmFtIHtFbGVtZW50fEV2ZW50fGdvb2cuZXZlbnRzLkV2ZW50fSBiIEVsZW1lbnQgb3IgbW91c2UgZXZlbnQgcG9zaXRpb25cbiAqICAgICBpcyByZWxhdGl2ZSB0by5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguQ29vcmRpbmF0ZX0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uLlxuICovXG5nb29nLnN0eWxlLmdldFJlbGF0aXZlUG9zaXRpb24gPSBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBhcCA9IGdvb2cuc3R5bGUuZ2V0Q2xpZW50UG9zaXRpb24oYSk7XG4gIHZhciBicCA9IGdvb2cuc3R5bGUuZ2V0Q2xpZW50UG9zaXRpb24oYik7XG4gIHJldHVybiBuZXcgZ29vZy5tYXRoLkNvb3JkaW5hdGUoYXAueCAtIGJwLngsIGFwLnkgLSBicC55KTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgb3IgdGhlIGVsZW1lbnQncyBib3JkZXIgYm94IHJlbGF0aXZlIHRvXG4gKiB0aGUgY2xpZW50IHZpZXdwb3J0LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWwgRWxlbWVudCB3aG9zZSBwb3NpdGlvbiB0byBnZXQuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkNvb3JkaW5hdGV9IFRoZSBwb3NpdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3R5bGUuZ2V0Q2xpZW50UG9zaXRpb25Gb3JFbGVtZW50XyA9IGZ1bmN0aW9uKGVsKSB7XG4gIHZhciBib3ggPSBnb29nLnN0eWxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdF8oZWwpO1xuICByZXR1cm4gbmV3IGdvb2cubWF0aC5Db29yZGluYXRlKGJveC5sZWZ0LCBib3gudG9wKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgb3IgdGhlIGVsZW1lbnQncyBib3JkZXIgYm94IHJlbGF0aXZlIHRvXG4gKiB0aGUgY2xpZW50IHZpZXdwb3J0LiBJZiBhbiBldmVudCBpcyBwYXNzZWQsIGFuZCBpZiB0aGlzIGV2ZW50IGlzIGEgXCJ0b3VjaFwiXG4gKiBldmVudCwgdGhlbiB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IGNoYW5nZWRUb3VjaGVzIHdpbGwgYmUgcmV0dXJuZWQuXG4gKiBAcGFyYW0ge0VsZW1lbnR8RXZlbnR8Z29vZy5ldmVudHMuRXZlbnR9IGVsIEVsZW1lbnQgb3IgYSBtb3VzZSAvIHRvdWNoIGV2ZW50LlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Db29yZGluYXRlfSBUaGUgcG9zaXRpb24uXG4gKi9cbmdvb2cuc3R5bGUuZ2V0Q2xpZW50UG9zaXRpb24gPSBmdW5jdGlvbihlbCkge1xuICBnb29nLmFzc2VydHMuYXNzZXJ0KGVsKTtcbiAgaWYgKGVsLm5vZGVUeXBlID09IGdvb2cuZG9tLk5vZGVUeXBlLkVMRU1FTlQpIHtcbiAgICByZXR1cm4gZ29vZy5zdHlsZS5nZXRDbGllbnRQb3NpdGlvbkZvckVsZW1lbnRfKFxuICAgICAgICAvKiogQHR5cGUgeyFFbGVtZW50fSAqLyAoZWwpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0RXZlbnQgPSBlbC5jaGFuZ2VkVG91Y2hlcyA/IGVsLmNoYW5nZWRUb3VjaGVzWzBdIDogZWw7XG4gICAgcmV0dXJuIG5ldyBnb29nLm1hdGguQ29vcmRpbmF0ZShcbiAgICAgICAgdGFyZ2V0RXZlbnQuY2xpZW50WCxcbiAgICAgICAgdGFyZ2V0RXZlbnQuY2xpZW50WSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBNb3ZlcyBhbiBlbGVtZW50IHRvIHRoZSBnaXZlbiBjb29yZGluYXRlcyByZWxhdGl2ZSB0byB0aGUgY2xpZW50IHZpZXdwb3J0LlxuICogQHBhcmFtIHtFbGVtZW50fSBlbCBBYnNvbHV0ZWx5IHBvc2l0aW9uZWQgZWxlbWVudCB0byBzZXQgcGFnZSBvZmZzZXQgZm9yLlxuICogICAgIEl0IG11c3QgYmUgaW4gdGhlIGRvY3VtZW50LlxuICogQHBhcmFtIHtudW1iZXJ8Z29vZy5tYXRoLkNvb3JkaW5hdGV9IHggTGVmdCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCdzIG1hcmdpblxuICogICAgIGJveCBvciBhIGNvb3JkaW5hdGUgb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfeSBUb3AgcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQncyBtYXJnaW4gYm94LlxuICovXG5nb29nLnN0eWxlLnNldFBhZ2VPZmZzZXQgPSBmdW5jdGlvbihlbCwgeCwgb3B0X3kpIHtcbiAgLy8gR2V0IGN1cnJlbnQgcGFnZW9mZnNldFxuICB2YXIgY3VyID0gZ29vZy5zdHlsZS5nZXRQYWdlT2Zmc2V0KGVsKTtcblxuICBpZiAoeCBpbnN0YW5jZW9mIGdvb2cubWF0aC5Db29yZGluYXRlKSB7XG4gICAgb3B0X3kgPSB4Lnk7XG4gICAgeCA9IHgueDtcbiAgfVxuXG4gIC8vIE5PVEUoYXJ2KTogV2UgY2Fubm90IGFsbG93IHN0cmluZ3MgZm9yIHggYW5kIHkuIFdlIGNvdWxkIGJ1dCB0aGF0IHdvdWxkXG4gIC8vIHJlcXVpcmUgdXMgdG8gbWFudWFsbHkgdHJhbnNmb3JtIGJldHdlZW4gZGlmZmVyZW50IHVuaXRzXG5cbiAgLy8gV29yayBvdXQgZGVsdGFzXG4gIHZhciBkeCA9IHggLSBjdXIueDtcbiAgdmFyIGR5ID0gb3B0X3kgLSBjdXIueTtcblxuICAvLyBTZXQgcG9zaXRpb24gdG8gY3VycmVudCBsZWZ0L3RvcCArIGRlbHRhXG4gIGdvb2cuc3R5bGUuc2V0UG9zaXRpb24oZWwsIC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyAoZWwpLm9mZnNldExlZnQgKyBkeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8gKGVsKS5vZmZzZXRUb3AgKyBkeSk7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgd2lkdGgvaGVpZ2h0IHZhbHVlcyBvZiBhbiBlbGVtZW50LiAgSWYgYW4gYXJndW1lbnQgaXMgbnVtZXJpYyxcbiAqIG9yIGEgZ29vZy5tYXRoLlNpemUgaXMgcGFzc2VkLCBpdCBpcyBhc3N1bWVkIHRvIGJlIHBpeGVscyBhbmQgd2lsbCBhZGRcbiAqICdweCcgYWZ0ZXIgY29udmVydGluZyBpdCB0byBhbiBpbnRlZ2VyIGluIHN0cmluZyBmb3JtLiAoVGhpcyBqdXN0IHNldHMgdGhlXG4gKiBDU1Mgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzIHNvIGl0IG1pZ2h0IHNldCBjb250ZW50LWJveCBvciBib3JkZXItYm94XG4gKiBzaXplIGRlcGVuZGluZyBvbiB0aGUgYm94IG1vZGVsIHRoZSBicm93c2VyIGlzIHVzaW5nLilcbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBzZXQgdGhlIHNpemUgb2YuXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8Z29vZy5tYXRoLlNpemV9IHcgV2lkdGggb2YgdGhlIGVsZW1lbnQsIG9yIGFcbiAqICAgICBzaXplIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcj19IG9wdF9oIEhlaWdodCBvZiB0aGUgZWxlbWVudC4gUmVxdWlyZWQgaWYgdyBpcyBub3QgYVxuICogICAgIHNpemUgb2JqZWN0LlxuICovXG5nb29nLnN0eWxlLnNldFNpemUgPSBmdW5jdGlvbihlbGVtZW50LCB3LCBvcHRfaCkge1xuICB2YXIgaDtcbiAgaWYgKHcgaW5zdGFuY2VvZiBnb29nLm1hdGguU2l6ZSkge1xuICAgIGggPSB3LmhlaWdodDtcbiAgICB3ID0gdy53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICBpZiAob3B0X2ggPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBFcnJvcignbWlzc2luZyBoZWlnaHQgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaCA9IG9wdF9oO1xuICB9XG5cbiAgZ29vZy5zdHlsZS5zZXRXaWR0aChlbGVtZW50LCAvKiogQHR5cGUge3N0cmluZ3xudW1iZXJ9ICovICh3KSk7XG4gIGdvb2cuc3R5bGUuc2V0SGVpZ2h0KGVsZW1lbnQsIGgpO1xufTtcblxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgYSBzdHJpbmcgdG8gYmUgc2V0IGludG8gYSBwaXhlbC12YWx1ZSBzdHlsZVxuICogcHJvcGVydHkgb2YgYW4gZWxlbWVudC4gQ2FuIHJvdW5kIHRvIHRoZSBuZWFyZXN0IGludGVnZXIgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2YWx1ZSBUaGUgc3R5bGUgdmFsdWUgdG8gYmUgdXNlZC4gSWYgYSBudW1iZXIsXG4gKiAgICAgJ3B4JyB3aWxsIGJlIGFwcGVuZGVkLCBvdGhlcndpc2UgdGhlIHZhbHVlIHdpbGwgYmUgYXBwbGllZCBkaXJlY3RseS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcm91bmQgV2hldGhlciB0byByb3VuZCB0aGUgbmVhcmVzdCBpbnRlZ2VyIChpZiBwcm9wZXJ0eVxuICogICAgIGlzIGEgbnVtYmVyKS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyB2YWx1ZSBmb3IgdGhlIHByb3BlcnR5LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHlsZS5nZXRQaXhlbFN0eWxlVmFsdWVfID0gZnVuY3Rpb24odmFsdWUsIHJvdW5kKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICB2YWx1ZSA9IChyb3VuZCA/IE1hdGgucm91bmQodmFsdWUpIDogdmFsdWUpICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cblxuLyoqXG4gKiBTZXQgdGhlIGhlaWdodCBvZiBhbiBlbGVtZW50LiAgU2V0cyB0aGUgZWxlbWVudCdzIHN0eWxlIHByb3BlcnR5LlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gc2V0IHRoZSBoZWlnaHQgb2YuXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGhlaWdodCBUaGUgaGVpZ2h0IHZhbHVlIHRvIHNldC4gIElmIGEgbnVtYmVyLCAncHgnXG4gKiAgICAgd2lsbCBiZSBhcHBlbmRlZCwgb3RoZXJ3aXNlIHRoZSB2YWx1ZSB3aWxsIGJlIGFwcGxpZWQgZGlyZWN0bHkuXG4gKi9cbmdvb2cuc3R5bGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24oZWxlbWVudCwgaGVpZ2h0KSB7XG4gIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gZ29vZy5zdHlsZS5nZXRQaXhlbFN0eWxlVmFsdWVfKGhlaWdodCwgdHJ1ZSk7XG59O1xuXG5cbi8qKlxuICogU2V0IHRoZSB3aWR0aCBvZiBhbiBlbGVtZW50LiAgU2V0cyB0aGUgZWxlbWVudCdzIHN0eWxlIHByb3BlcnR5LlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gc2V0IHRoZSB3aWR0aCBvZi5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gd2lkdGggVGhlIHdpZHRoIHZhbHVlIHRvIHNldC4gIElmIGEgbnVtYmVyLCAncHgnXG4gKiAgICAgd2lsbCBiZSBhcHBlbmRlZCwgb3RoZXJ3aXNlIHRoZSB2YWx1ZSB3aWxsIGJlIGFwcGxpZWQgZGlyZWN0bHkuXG4gKi9cbmdvb2cuc3R5bGUuc2V0V2lkdGggPSBmdW5jdGlvbihlbGVtZW50LCB3aWR0aCkge1xuICBlbGVtZW50LnN0eWxlLndpZHRoID0gZ29vZy5zdHlsZS5nZXRQaXhlbFN0eWxlVmFsdWVfKHdpZHRoLCB0cnVlKTtcbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBoZWlnaHQgYW5kIHdpZHRoIG9mIGFuIGVsZW1lbnQsIGV2ZW4gaWYgaXRzIGRpc3BsYXkgaXMgbm9uZS5cbiAqXG4gKiBTcGVjaWZpY2FsbHksIHRoaXMgcmV0dXJucyB0aGUgaGVpZ2h0IGFuZCB3aWR0aCBvZiB0aGUgYm9yZGVyIGJveCxcbiAqIGlycmVzcGVjdGl2ZSBvZiB0aGUgYm94IG1vZGVsIGluIGVmZmVjdC5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB0YWtlIENTUyB0cmFuc2Zvcm1zIGludG8gYWNjb3VudC4gUGxlYXNlIHNlZVxuICoge0Bjb2RlIGdvb2cuc3R5bGUuZ2V0VHJhbnNmb3JtZWRTaXplfS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGdldCBzaXplIG9mLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5TaXplfSBPYmplY3Qgd2l0aCB3aWR0aC9oZWlnaHQgcHJvcGVydGllcy5cbiAqL1xuZ29vZy5zdHlsZS5nZXRTaXplID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICByZXR1cm4gZ29vZy5zdHlsZS5ldmFsdWF0ZVdpdGhUZW1wb3JhcnlEaXNwbGF5XyhcbiAgICAgIGdvb2cuc3R5bGUuZ2V0U2l6ZVdpdGhEaXNwbGF5XywgLyoqIEB0eXBlIHshRWxlbWVudH0gKi8gKGVsZW1lbnQpKTtcbn07XG5cblxuLyoqXG4gKiBDYWxsIHtAY29kZSBmbn0gb24ge0Bjb2RlIGVsZW1lbnR9IHN1Y2ggdGhhdCB7QGNvZGUgZWxlbWVudH0ncyBkaW1lbnNpb25zIGFyZVxuICogYWNjdXJhdGUgd2hlbiBpdCdzIHBhc3NlZCB0byB7QGNvZGUgZm59LlxuICogQHBhcmFtIHtmdW5jdGlvbighRWxlbWVudCk6IFR9IGZuIEZ1bmN0aW9uIHRvIGNhbGwgd2l0aCB7QGNvZGUgZWxlbWVudH0gYXNcbiAqICAgICBhbiBhcmd1bWVudCBhZnRlciB0ZW1wb3JhcmlseSBjaGFuZ2luZyB7QGNvZGUgZWxlbWVudH0ncyBkaXNwbGF5IHN1Y2hcbiAqICAgICB0aGF0IGl0cyBkaW1lbnNpb25zIGFyZSBhY2N1cmF0ZS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCAod2hpY2ggbWF5IGhhdmUgZGlzcGxheSBub25lKSB0byB1c2UgYXNcbiAqICAgICBhcmd1bWVudCB0byB7QGNvZGUgZm59LlxuICogQHJldHVybiB7VH0gVmFsdWUgcmV0dXJuZWQgYnkgY2FsbGluZyB7QGNvZGUgZm59IHdpdGgge0Bjb2RlIGVsZW1lbnR9LlxuICogQHRlbXBsYXRlIFRcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3R5bGUuZXZhbHVhdGVXaXRoVGVtcG9yYXJ5RGlzcGxheV8gPSBmdW5jdGlvbihmbiwgZWxlbWVudCkge1xuICBpZiAoZ29vZy5zdHlsZS5nZXRTdHlsZV8oZWxlbWVudCwgJ2Rpc3BsYXknKSAhPSAnbm9uZScpIHtcbiAgICByZXR1cm4gZm4oZWxlbWVudCk7XG4gIH1cblxuICB2YXIgc3R5bGUgPSBlbGVtZW50LnN0eWxlO1xuICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcbiAgdmFyIG9yaWdpbmFsVmlzaWJpbGl0eSA9IHN0eWxlLnZpc2liaWxpdHk7XG4gIHZhciBvcmlnaW5hbFBvc2l0aW9uID0gc3R5bGUucG9zaXRpb247XG5cbiAgc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICBzdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHN0eWxlLmRpc3BsYXkgPSAnaW5saW5lJztcblxuICB2YXIgcmV0VmFsID0gZm4oZWxlbWVudCk7XG5cbiAgc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgc3R5bGUucG9zaXRpb24gPSBvcmlnaW5hbFBvc2l0aW9uO1xuICBzdHlsZS52aXNpYmlsaXR5ID0gb3JpZ2luYWxWaXNpYmlsaXR5O1xuXG4gIHJldHVybiByZXRWYWw7XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgaGVpZ2h0IGFuZCB3aWR0aCBvZiBhbiBlbGVtZW50IHdoZW4gdGhlIGRpc3BsYXkgaXMgbm90IG5vbmUuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBnZXQgc2l6ZSBvZi5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguU2l6ZX0gT2JqZWN0IHdpdGggd2lkdGgvaGVpZ2h0IHByb3BlcnRpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0eWxlLmdldFNpemVXaXRoRGlzcGxheV8gPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIHZhciBvZmZzZXRXaWR0aCA9IC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyAoZWxlbWVudCkub2Zmc2V0V2lkdGg7XG4gIHZhciBvZmZzZXRIZWlnaHQgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8gKGVsZW1lbnQpLm9mZnNldEhlaWdodDtcbiAgdmFyIHdlYmtpdE9mZnNldHNaZXJvID1cbiAgICAgIGdvb2cudXNlckFnZW50LldFQktJVCAmJiAhb2Zmc2V0V2lkdGggJiYgIW9mZnNldEhlaWdodDtcbiAgaWYgKCghZ29vZy5pc0RlZihvZmZzZXRXaWR0aCkgfHwgd2Via2l0T2Zmc2V0c1plcm8pICYmXG4gICAgICBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCkge1xuICAgIC8vIEZhbGwgYmFjayB0byBjYWxsaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCB3aGVuIG9mZnNldFdpZHRoIG9yXG4gICAgLy8gb2Zmc2V0SGVpZ2h0IGFyZSBub3QgZGVmaW5lZCwgb3Igd2hlbiB0aGV5IGFyZSB6ZXJvIGluIFdlYktpdCBicm93c2Vycy5cbiAgICAvLyBUaGlzIG1ha2VzIHN1cmUgdGhhdCB3ZSByZXR1cm4gZm9yIHRoZSBjb3JyZWN0IHNpemUgZm9yIFNWRyBlbGVtZW50cywgYnV0XG4gICAgLy8gd2lsbCBzdGlsbCByZXR1cm4gMCBvbiBXZWJraXQgcHJpb3IgdG8gNTM0LjgsIHNlZVxuICAgIC8vIGh0dHA6Ly90cmFjLndlYmtpdC5vcmcvY2hhbmdlc2V0LzY3MjUyLlxuICAgIHZhciBjbGllbnRSZWN0ID0gZ29vZy5zdHlsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3RfKGVsZW1lbnQpO1xuICAgIHJldHVybiBuZXcgZ29vZy5tYXRoLlNpemUoY2xpZW50UmVjdC5yaWdodCAtIGNsaWVudFJlY3QubGVmdCxcbiAgICAgICAgY2xpZW50UmVjdC5ib3R0b20gLSBjbGllbnRSZWN0LnRvcCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBnb29nLm1hdGguU2l6ZShvZmZzZXRXaWR0aCwgb2Zmc2V0SGVpZ2h0KTtcbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBoZWlnaHQgYW5kIHdpZHRoIG9mIGFuIGVsZW1lbnQsIHBvc3QgdHJhbnNmb3JtLCBldmVuIGlmIGl0cyBkaXNwbGF5XG4gKiBpcyBub25lLlxuICpcbiAqIFRoaXMgaXMgbGlrZSB7QGNvZGUgZ29vZy5zdHlsZS5nZXRTaXplfSwgZXhjZXB0OlxuICogPG9sPlxuICogPGxpPlRha2VzIHdlYmtpdFRyYW5zZm9ybXMgc3VjaCBhcyByb3RhdGUgYW5kIHNjYWxlIGludG8gYWNjb3VudC5cbiAqIDxsaT5XaWxsIHJldHVybiBudWxsIGlmIHtAY29kZSBlbGVtZW50fSBkb2Vzbid0IHJlc3BvbmQgdG9cbiAqICAgICB7QGNvZGUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0fS5cbiAqIDxsaT5DdXJyZW50bHkgZG9lc24ndCBtYWtlIHNlbnNlIG9uIG5vbi1XZWJLaXQgYnJvd3NlcnMgd2hpY2ggZG9uJ3Qgc3VwcG9ydFxuICogICAgd2Via2l0VHJhbnNmb3Jtcy5cbiAqIDwvb2w+XG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gZ2V0IHNpemUgb2YuXG4gKiBAcmV0dXJuIHtnb29nLm1hdGguU2l6ZX0gT2JqZWN0IHdpdGggd2lkdGgvaGVpZ2h0IHByb3BlcnRpZXMuXG4gKi9cbmdvb2cuc3R5bGUuZ2V0VHJhbnNmb3JtZWRTaXplID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgY2xpZW50UmVjdCA9IGdvb2cuc3R5bGUuZXZhbHVhdGVXaXRoVGVtcG9yYXJ5RGlzcGxheV8oXG4gICAgICBnb29nLnN0eWxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdF8sIGVsZW1lbnQpO1xuICByZXR1cm4gbmV3IGdvb2cubWF0aC5TaXplKGNsaWVudFJlY3QucmlnaHQgLSBjbGllbnRSZWN0LmxlZnQsXG4gICAgICBjbGllbnRSZWN0LmJvdHRvbSAtIGNsaWVudFJlY3QudG9wKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgYm91bmRpbmcgcmVjdGFuZ2xlIGZvciBhIGdpdmVuIGVsZW1lbnQgaW4gcGFnZSBzcGFjZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGdldCBib3VuZHMgb2YuIE11c3Qgbm90IGJlIGRpc3BsYXkgbm9uZS5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguUmVjdH0gQm91bmRpbmcgcmVjdGFuZ2xlIGZvciB0aGUgZWxlbWVudC5cbiAqL1xuZ29vZy5zdHlsZS5nZXRCb3VuZHMgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIHZhciBvID0gZ29vZy5zdHlsZS5nZXRQYWdlT2Zmc2V0KGVsZW1lbnQpO1xuICB2YXIgcyA9IGdvb2cuc3R5bGUuZ2V0U2l6ZShlbGVtZW50KTtcbiAgcmV0dXJuIG5ldyBnb29nLm1hdGguUmVjdChvLngsIG8ueSwgcy53aWR0aCwgcy5oZWlnaHQpO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIGEgQ1NTIHNlbGVjdG9yIGluIHRoZSBmb3JtIHN0eWxlLXByb3BlcnR5IHRvIHN0eWxlUHJvcGVydHkuXG4gKiBAcGFyYW0geyp9IHNlbGVjdG9yIENTUyBTZWxlY3Rvci5cbiAqIEByZXR1cm4ge3N0cmluZ30gQ2FtZWwgY2FzZSBzZWxlY3Rvci5cbiAqIEBkZXByZWNhdGVkIFVzZSBnb29nLnN0cmluZy50b0NhbWVsQ2FzZSBpbnN0ZWFkLlxuICovXG5nb29nLnN0eWxlLnRvQ2FtZWxDYXNlID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGdvb2cuc3RyaW5nLnRvQ2FtZWxDYXNlKFN0cmluZyhzZWxlY3RvcikpO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIGEgQ1NTIHNlbGVjdG9yIGluIHRoZSBmb3JtIHN0eWxlUHJvcGVydHkgdG8gc3R5bGUtcHJvcGVydHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgQ2FtZWwgY2FzZSBzZWxlY3Rvci5cbiAqIEByZXR1cm4ge3N0cmluZ30gU2VsZWN0b3IgY2FzZWQuXG4gKiBAZGVwcmVjYXRlZCBVc2UgZ29vZy5zdHJpbmcudG9TZWxlY3RvckNhc2UgaW5zdGVhZC5cbiAqL1xuZ29vZy5zdHlsZS50b1NlbGVjdG9yQ2FzZSA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBnb29nLnN0cmluZy50b1NlbGVjdG9yQ2FzZShzZWxlY3Rvcik7XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgb3BhY2l0eSBvZiBhIG5vZGUgKHgtYnJvd3NlcikuIFRoaXMgZ2V0cyB0aGUgaW5saW5lIHN0eWxlIG9wYWNpdHlcbiAqIG9mIHRoZSBub2RlLCBhbmQgZG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgdGhlIGNhc2NhZGVkIG9yIHRoZSBjb21wdXRlZFxuICogc3R5bGUgZm9yIHRoaXMgbm9kZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgRWxlbWVudCB3aG9zZSBvcGFjaXR5IGhhcyB0byBiZSBmb3VuZC5cbiAqIEByZXR1cm4ge251bWJlcnxzdHJpbmd9IE9wYWNpdHkgYmV0d2VlbiAwIGFuZCAxIG9yIGFuIGVtcHR5IHN0cmluZyB7QGNvZGUgJyd9XG4gKiAgICAgaWYgdGhlIG9wYWNpdHkgaXMgbm90IHNldC5cbiAqL1xuZ29vZy5zdHlsZS5nZXRPcGFjaXR5ID0gZnVuY3Rpb24oZWwpIHtcbiAgdmFyIHN0eWxlID0gZWwuc3R5bGU7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKCdvcGFjaXR5JyBpbiBzdHlsZSkge1xuICAgIHJlc3VsdCA9IHN0eWxlLm9wYWNpdHk7XG4gIH0gZWxzZSBpZiAoJ01vek9wYWNpdHknIGluIHN0eWxlKSB7XG4gICAgcmVzdWx0ID0gc3R5bGUuTW96T3BhY2l0eTtcbiAgfSBlbHNlIGlmICgnZmlsdGVyJyBpbiBzdHlsZSkge1xuICAgIHZhciBtYXRjaCA9IHN0eWxlLmZpbHRlci5tYXRjaCgvYWxwaGFcXChvcGFjaXR5PShbXFxkLl0rKVxcKS8pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgcmVzdWx0ID0gU3RyaW5nKG1hdGNoWzFdIC8gMTAwKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdCA9PSAnJyA/IHJlc3VsdCA6IE51bWJlcihyZXN1bHQpO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIG9wYWNpdHkgb2YgYSBub2RlICh4LWJyb3dzZXIpLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbCBFbGVtZW50cyB3aG9zZSBvcGFjaXR5IGhhcyB0byBiZSBzZXQuXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IGFscGhhIE9wYWNpdHkgYmV0d2VlbiAwIGFuZCAxIG9yIGFuIGVtcHR5IHN0cmluZ1xuICogICAgIHtAY29kZSAnJ30gdG8gY2xlYXIgdGhlIG9wYWNpdHkuXG4gKi9cbmdvb2cuc3R5bGUuc2V0T3BhY2l0eSA9IGZ1bmN0aW9uKGVsLCBhbHBoYSkge1xuICB2YXIgc3R5bGUgPSBlbC5zdHlsZTtcbiAgaWYgKCdvcGFjaXR5JyBpbiBzdHlsZSkge1xuICAgIHN0eWxlLm9wYWNpdHkgPSBhbHBoYTtcbiAgfSBlbHNlIGlmICgnTW96T3BhY2l0eScgaW4gc3R5bGUpIHtcbiAgICBzdHlsZS5Nb3pPcGFjaXR5ID0gYWxwaGE7XG4gIH0gZWxzZSBpZiAoJ2ZpbHRlcicgaW4gc3R5bGUpIHtcbiAgICAvLyBUT0RPKGFydik6IE92ZXJ3cml0aW5nIHRoZSBmaWx0ZXIgbWlnaHQgaGF2ZSB1bmRlc2lyZWQgc2lkZSBlZmZlY3RzLlxuICAgIGlmIChhbHBoYSA9PT0gJycpIHtcbiAgICAgIHN0eWxlLmZpbHRlciA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5maWx0ZXIgPSAnYWxwaGEob3BhY2l0eT0nICsgYWxwaGEgKiAxMDAgKyAnKSc7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgYmFja2dyb3VuZCBvZiBhbiBlbGVtZW50IHRvIGEgdHJhbnNwYXJlbnQgaW1hZ2UgaW4gYSBicm93c2VyLVxuICogaW5kZXBlbmRlbnQgbWFubmVyLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3Qgc3VwcG9ydCByZXBlYXRpbmcgYmFja2dyb3VuZHMgb3IgYWx0ZXJuYXRlIGJhY2tncm91bmRcbiAqIHBvc2l0aW9ucyB0byBtYXRjaCB0aGUgYmVoYXZpb3Igb2YgSW50ZXJuZXQgRXhwbG9yZXIuIEl0IGFsc28gZG9lcyBub3RcbiAqIHN1cHBvcnQgc2l6aW5nTWV0aG9kcyBvdGhlciB0aGFuIGNyb3Agc2luY2UgdGhleSBjYW5ub3QgYmUgcmVwbGljYXRlZCBpblxuICogYnJvd3NlcnMgb3RoZXIgdGhhbiBJbnRlcm5ldCBFeHBsb3Jlci5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsIFRoZSBlbGVtZW50IHRvIHNldCBiYWNrZ3JvdW5kIG9uLlxuICogQHBhcmFtIHtzdHJpbmd9IHNyYyBUaGUgaW1hZ2Ugc291cmNlIFVSTC5cbiAqL1xuZ29vZy5zdHlsZS5zZXRUcmFuc3BhcmVudEJhY2tncm91bmRJbWFnZSA9IGZ1bmN0aW9uKGVsLCBzcmMpIHtcbiAgdmFyIHN0eWxlID0gZWwuc3R5bGU7XG4gIC8vIEl0IGlzIHNhZmUgdG8gdXNlIHRoZSBzdHlsZS5maWx0ZXIgaW4gSUUgb25seS4gSW4gU2FmYXJpICdmaWx0ZXInIGlzIGluXG4gIC8vIHN0eWxlIG9iamVjdCBidXQgYWNjZXNzIHRvIHN0eWxlLmZpbHRlciBjYXVzZXMgaXQgdG8gdGhyb3cgYW4gZXhjZXB0aW9uLlxuICAvLyBOb3RlOiBJRTggc3VwcG9ydHMgaW1hZ2VzIHdpdGggYW4gYWxwaGEgY2hhbm5lbC5cbiAgaWYgKGdvb2cudXNlckFnZW50LklFICYmICFnb29nLnVzZXJBZ2VudC5pc1ZlcnNpb25PckhpZ2hlcignOCcpKSB7XG4gICAgLy8gU2VlIFRPRE8gaW4gc2V0T3BhY2l0eS5cbiAgICBzdHlsZS5maWx0ZXIgPSAncHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhSW1hZ2VMb2FkZXIoJyArXG4gICAgICAgICdzcmM9XCInICsgc3JjICsgJ1wiLCBzaXppbmdNZXRob2Q9XCJjcm9wXCIpJztcbiAgfSBlbHNlIHtcbiAgICAvLyBTZXQgc3R5bGUgcHJvcGVydGllcyBpbmRpdmlkdWFsbHkgaW5zdGVhZCBvZiB1c2luZyBiYWNrZ3JvdW5kIHNob3J0aGFuZFxuICAgIC8vIHRvIHByZXZlbnQgb3ZlcndyaXRpbmcgYSBwcmUtZXhpc3RpbmcgYmFja2dyb3VuZCBjb2xvci5cbiAgICBzdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSAndXJsKCcgKyBzcmMgKyAnKSc7XG4gICAgc3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uID0gJ3RvcCBsZWZ0JztcbiAgICBzdHlsZS5iYWNrZ3JvdW5kUmVwZWF0ID0gJ25vLXJlcGVhdCc7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGJhY2tncm91bmQgaW1hZ2Ugb2YgYW4gZWxlbWVudCBpbiBhIGJyb3dzZXIgaW5kZXBlbmRlbnQgbWFubmVyLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbCBUaGUgZWxlbWVudCB0byBjbGVhciBiYWNrZ3JvdW5kIGltYWdlIGZvci5cbiAqL1xuZ29vZy5zdHlsZS5jbGVhclRyYW5zcGFyZW50QmFja2dyb3VuZEltYWdlID0gZnVuY3Rpb24oZWwpIHtcbiAgdmFyIHN0eWxlID0gZWwuc3R5bGU7XG4gIGlmICgnZmlsdGVyJyBpbiBzdHlsZSkge1xuICAgIC8vIFNlZSBUT0RPIGluIHNldE9wYWNpdHkuXG4gICAgc3R5bGUuZmlsdGVyID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2V0IHN0eWxlIHByb3BlcnRpZXMgaW5kaXZpZHVhbGx5IGluc3RlYWQgb2YgdXNpbmcgYmFja2dyb3VuZCBzaG9ydGhhbmRcbiAgICAvLyB0byBwcmV2ZW50IG92ZXJ3cml0aW5nIGEgcHJlLWV4aXN0aW5nIGJhY2tncm91bmQgY29sb3IuXG4gICAgc3R5bGUuYmFja2dyb3VuZEltYWdlID0gJ25vbmUnO1xuICB9XG59O1xuXG5cbi8qKlxuICogU2hvd3Mgb3IgaGlkZXMgYW4gZWxlbWVudCBmcm9tIHRoZSBwYWdlLiBIaWRpbmcgdGhlIGVsZW1lbnQgaXMgZG9uZSBieVxuICogc2V0dGluZyB0aGUgZGlzcGxheSBwcm9wZXJ0eSB0byBcIm5vbmVcIiwgcmVtb3ZpbmcgdGhlIGVsZW1lbnQgZnJvbSB0aGVcbiAqIHJlbmRlcmluZyBoaWVyYXJjaHkgc28gaXQgdGFrZXMgdXAgbm8gc3BhY2UuIFRvIHNob3cgdGhlIGVsZW1lbnQsIHRoZSBkZWZhdWx0XG4gKiBpbmhlcml0ZWQgZGlzcGxheSBwcm9wZXJ0eSBpcyByZXN0b3JlZCAoZGVmaW5lZCBlaXRoZXIgaW4gc3R5bGVzaGVldHMgb3IgYnlcbiAqIHRoZSBicm93c2VyJ3MgZGVmYXVsdCBzdHlsZSBydWxlcy4pXG4gKlxuICogQ2F2ZWF0IDE6IGlmIHRoZSBpbmhlcml0ZWQgZGlzcGxheSBwcm9wZXJ0eSBmb3IgdGhlIGVsZW1lbnQgaXMgc2V0IHRvIFwibm9uZVwiXG4gKiBieSB0aGUgc3R5bGVzaGVldHMsIHRoYXQgaXMgdGhlIHByb3BlcnR5IHRoYXQgd2lsbCBiZSByZXN0b3JlZCBieSBhIGNhbGwgdG9cbiAqIHNob3dFbGVtZW50KCksIGVmZmVjdGl2ZWx5IHRvZ2dsaW5nIHRoZSBkaXNwbGF5IGJldHdlZW4gXCJub25lXCIgYW5kIFwibm9uZVwiLlxuICpcbiAqIENhdmVhdCAyOiBpZiB0aGUgZWxlbWVudCBkaXNwbGF5IHN0eWxlIGlzIHNldCBpbmxpbmUgKGJ5IHNldHRpbmcgZWl0aGVyXG4gKiBlbGVtZW50LnN0eWxlLmRpc3BsYXkgb3IgYSBzdHlsZSBhdHRyaWJ1dGUgaW4gdGhlIEhUTUwpLCBhIGNhbGwgdG9cbiAqIHNob3dFbGVtZW50IHdpbGwgY2xlYXIgdGhhdCBzZXR0aW5nIGFuZCBkZWZlciB0byB0aGUgaW5oZXJpdGVkIHN0eWxlIGluIHRoZVxuICogc3R5bGVzaGVldC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgRWxlbWVudCB0byBzaG93IG9yIGhpZGUuXG4gKiBAcGFyYW0geyp9IGRpc3BsYXkgVHJ1ZSB0byByZW5kZXIgdGhlIGVsZW1lbnQgaW4gaXRzIGRlZmF1bHQgc3R5bGUsXG4gKiAgICAgZmFsc2UgdG8gZGlzYWJsZSByZW5kZXJpbmcgdGhlIGVsZW1lbnQuXG4gKiBAZGVwcmVjYXRlZCBVc2UgZ29vZy5zdHlsZS5zZXRFbGVtZW50U2hvd24gaW5zdGVhZC5cbiAqL1xuZ29vZy5zdHlsZS5zaG93RWxlbWVudCA9IGZ1bmN0aW9uKGVsLCBkaXNwbGF5KSB7XG4gIGdvb2cuc3R5bGUuc2V0RWxlbWVudFNob3duKGVsLCBkaXNwbGF5KTtcbn07XG5cblxuLyoqXG4gKiBTaG93cyBvciBoaWRlcyBhbiBlbGVtZW50IGZyb20gdGhlIHBhZ2UuIEhpZGluZyB0aGUgZWxlbWVudCBpcyBkb25lIGJ5XG4gKiBzZXR0aW5nIHRoZSBkaXNwbGF5IHByb3BlcnR5IHRvIFwibm9uZVwiLCByZW1vdmluZyB0aGUgZWxlbWVudCBmcm9tIHRoZVxuICogcmVuZGVyaW5nIGhpZXJhcmNoeSBzbyBpdCB0YWtlcyB1cCBubyBzcGFjZS4gVG8gc2hvdyB0aGUgZWxlbWVudCwgdGhlIGRlZmF1bHRcbiAqIGluaGVyaXRlZCBkaXNwbGF5IHByb3BlcnR5IGlzIHJlc3RvcmVkIChkZWZpbmVkIGVpdGhlciBpbiBzdHlsZXNoZWV0cyBvciBieVxuICogdGhlIGJyb3dzZXIncyBkZWZhdWx0IHN0eWxlIHJ1bGVzKS5cbiAqXG4gKiBDYXZlYXQgMTogaWYgdGhlIGluaGVyaXRlZCBkaXNwbGF5IHByb3BlcnR5IGZvciB0aGUgZWxlbWVudCBpcyBzZXQgdG8gXCJub25lXCJcbiAqIGJ5IHRoZSBzdHlsZXNoZWV0cywgdGhhdCBpcyB0aGUgcHJvcGVydHkgdGhhdCB3aWxsIGJlIHJlc3RvcmVkIGJ5IGEgY2FsbCB0b1xuICogc2V0RWxlbWVudFNob3duKCksIGVmZmVjdGl2ZWx5IHRvZ2dsaW5nIHRoZSBkaXNwbGF5IGJldHdlZW4gXCJub25lXCIgYW5kXG4gKiBcIm5vbmVcIi5cbiAqXG4gKiBDYXZlYXQgMjogaWYgdGhlIGVsZW1lbnQgZGlzcGxheSBzdHlsZSBpcyBzZXQgaW5saW5lIChieSBzZXR0aW5nIGVpdGhlclxuICogZWxlbWVudC5zdHlsZS5kaXNwbGF5IG9yIGEgc3R5bGUgYXR0cmlidXRlIGluIHRoZSBIVE1MKSwgYSBjYWxsIHRvXG4gKiBzZXRFbGVtZW50U2hvd24gd2lsbCBjbGVhciB0aGF0IHNldHRpbmcgYW5kIGRlZmVyIHRvIHRoZSBpbmhlcml0ZWQgc3R5bGUgaW5cbiAqIHRoZSBzdHlsZXNoZWV0LlxuICogQHBhcmFtIHtFbGVtZW50fSBlbCBFbGVtZW50IHRvIHNob3cgb3IgaGlkZS5cbiAqIEBwYXJhbSB7Kn0gaXNTaG93biBUcnVlIHRvIHJlbmRlciB0aGUgZWxlbWVudCBpbiBpdHMgZGVmYXVsdCBzdHlsZSxcbiAqICAgICBmYWxzZSB0byBkaXNhYmxlIHJlbmRlcmluZyB0aGUgZWxlbWVudC5cbiAqL1xuZ29vZy5zdHlsZS5zZXRFbGVtZW50U2hvd24gPSBmdW5jdGlvbihlbCwgaXNTaG93bikge1xuICBlbC5zdHlsZS5kaXNwbGF5ID0gaXNTaG93biA/ICcnIDogJ25vbmUnO1xufTtcblxuXG4vKipcbiAqIFRlc3Qgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBoYXMgYmVlbiBzaG93biBvciBoaWRkZW4gdmlhIGEgY2FsbCB0b1xuICoge0BsaW5rICNzZXRFbGVtZW50U2hvd259LlxuICpcbiAqIE5vdGUgdGhpcyBpcyBzdHJpY3RseSBhIGNvbXBhbmlvbiBtZXRob2QgZm9yIGEgY2FsbFxuICogdG8ge0BsaW5rICNzZXRFbGVtZW50U2hvd259IGFuZCB0aGUgc2FtZSBjYXZlYXRzIGFwcGx5OyBpbiBwYXJ0aWN1bGFyLCB0aGlzXG4gKiBtZXRob2QgZG9lcyBub3QgZ3VhcmFudGVlIHRoYXQgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGJlIGNvbnNpc3RlbnQgd2l0aFxuICogd2hldGhlciBvciBub3QgdGhlIGVsZW1lbnQgaXMgYWN0dWFsbHkgdmlzaWJsZS5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsIFRoZSBlbGVtZW50IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBlbGVtZW50IGhhcyBiZWVuIHNob3duLlxuICogQHNlZSAjc2V0RWxlbWVudFNob3duXG4gKi9cbmdvb2cuc3R5bGUuaXNFbGVtZW50U2hvd24gPSBmdW5jdGlvbihlbCkge1xuICByZXR1cm4gZWwuc3R5bGUuZGlzcGxheSAhPSAnbm9uZSc7XG59O1xuXG5cbi8qKlxuICogSW5zdGFsbHMgdGhlIHN0eWxlcyBzdHJpbmcgaW50byB0aGUgd2luZG93IHRoYXQgY29udGFpbnMgb3B0X2VsZW1lbnQuICBJZlxuICogb3B0X2VsZW1lbnQgaXMgbnVsbCwgdGhlIG1haW4gd2luZG93IGlzIHVzZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVzU3RyaW5nIFRoZSBzdHlsZSBzdHJpbmcgdG8gaW5zdGFsbC5cbiAqIEBwYXJhbSB7Tm9kZT19IG9wdF9ub2RlIE5vZGUgd2hvc2UgcGFyZW50IGRvY3VtZW50IHNob3VsZCBoYXZlIHRoZVxuICogICAgIHN0eWxlcyBpbnN0YWxsZWQuXG4gKiBAcmV0dXJuIHtFbGVtZW50fFN0eWxlU2hlZXR9IFRoZSBzdHlsZSBlbGVtZW50IGNyZWF0ZWQuXG4gKi9cbmdvb2cuc3R5bGUuaW5zdGFsbFN0eWxlcyA9IGZ1bmN0aW9uKHN0eWxlc1N0cmluZywgb3B0X25vZGUpIHtcbiAgdmFyIGRoID0gZ29vZy5kb20uZ2V0RG9tSGVscGVyKG9wdF9ub2RlKTtcbiAgdmFyIHN0eWxlU2hlZXQgPSBudWxsO1xuXG4gIC8vIElFIDwgMTEgcmVxdWlyZXMgY3JlYXRlU3R5bGVTaGVldC4gTm90ZSB0aGF0IGRvYy5jcmVhdGVTdHlsZVNoZWV0IHdpbGwgYmVcbiAgLy8gdW5kZWZpbmVkIGFzIG9mIElFIDExLlxuICB2YXIgZG9jID0gZGguZ2V0RG9jdW1lbnQoKTtcbiAgaWYgKGdvb2cudXNlckFnZW50LklFICYmIGRvYy5jcmVhdGVTdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVTaGVldCA9IGRvYy5jcmVhdGVTdHlsZVNoZWV0KCk7XG4gICAgZ29vZy5zdHlsZS5zZXRTdHlsZXMoc3R5bGVTaGVldCwgc3R5bGVzU3RyaW5nKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaGVhZCA9IGRoLmdldEVsZW1lbnRzQnlUYWdOYW1lQW5kQ2xhc3MoZ29vZy5kb20uVGFnTmFtZS5IRUFEKVswXTtcblxuICAgIC8vIEluIG9wZXJhIGRvY3VtZW50cyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gaGF2ZSBhIGhlYWQgZWxlbWVudCwgdGh1cyB3ZVxuICAgIC8vIGhhdmUgdG8gbWFrZSBzdXJlIG9uZSBleGlzdHMgYmVmb3JlIHVzaW5nIGl0LlxuICAgIGlmICghaGVhZCkge1xuICAgICAgdmFyIGJvZHkgPSBkaC5nZXRFbGVtZW50c0J5VGFnTmFtZUFuZENsYXNzKGdvb2cuZG9tLlRhZ05hbWUuQk9EWSlbMF07XG4gICAgICBoZWFkID0gZGguY3JlYXRlRG9tKGdvb2cuZG9tLlRhZ05hbWUuSEVBRCk7XG4gICAgICBib2R5LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGhlYWQsIGJvZHkpO1xuICAgIH1cbiAgICBzdHlsZVNoZWV0ID0gZGguY3JlYXRlRG9tKGdvb2cuZG9tLlRhZ05hbWUuU1RZTEUpO1xuICAgIC8vIE5PVEUodXNlcik6IFNldHRpbmcgc3R5bGVzIGFmdGVyIHRoZSBzdHlsZSBlbGVtZW50IGhhcyBiZWVuIGFwcGVuZGVkXG4gICAgLy8gdG8gdGhlIGhlYWQgcmVzdWx0cyBpbiBhIG5hc3R5IFdlYmtpdCBidWcgaW4gY2VydGFpbiBzY2VuYXJpb3MuIFBsZWFzZVxuICAgIC8vIHJlZmVyIHRvIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yNjMwNyBmb3IgYWRkaXRpb25hbFxuICAgIC8vIGRldGFpbHMuXG4gICAgZ29vZy5zdHlsZS5zZXRTdHlsZXMoc3R5bGVTaGVldCwgc3R5bGVzU3RyaW5nKTtcbiAgICBkaC5hcHBlbmRDaGlsZChoZWFkLCBzdHlsZVNoZWV0KTtcbiAgfVxuICByZXR1cm4gc3R5bGVTaGVldDtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBzdHlsZXMgYWRkZWQgYnkge0BsaW5rICNpbnN0YWxsU3R5bGVzfS5cbiAqIEBwYXJhbSB7RWxlbWVudHxTdHlsZVNoZWV0fSBzdHlsZVNoZWV0IFRoZSB2YWx1ZSByZXR1cm5lZCBieVxuICogICAgIHtAbGluayAjaW5zdGFsbFN0eWxlc30uXG4gKi9cbmdvb2cuc3R5bGUudW5pbnN0YWxsU3R5bGVzID0gZnVuY3Rpb24oc3R5bGVTaGVldCkge1xuICB2YXIgbm9kZSA9IHN0eWxlU2hlZXQub3duZXJOb2RlIHx8IHN0eWxlU2hlZXQub3duaW5nRWxlbWVudCB8fFxuICAgICAgLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAoc3R5bGVTaGVldCk7XG4gIGdvb2cuZG9tLnJlbW92ZU5vZGUobm9kZSk7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgY29udGVudCBvZiBhIHN0eWxlIGVsZW1lbnQuICBUaGUgc3R5bGUgZWxlbWVudCBjYW4gYmUgYW55IHZhbGlkXG4gKiBzdHlsZSBlbGVtZW50LiAgVGhpcyBlbGVtZW50IHdpbGwgaGF2ZSBpdHMgY29udGVudCBjb21wbGV0ZWx5IHJlcGxhY2VkIGJ5XG4gKiB0aGUgbmV3IHN0eWxlc1N0cmluZy5cbiAqIEBwYXJhbSB7RWxlbWVudHxTdHlsZVNoZWV0fSBlbGVtZW50IEEgc3R5bGVzaGVldCBlbGVtZW50IGFzIHJldHVybmVkIGJ5XG4gKiAgICAgaW5zdGFsbFN0eWxlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHlsZXNTdHJpbmcgVGhlIG5ldyBjb250ZW50IG9mIHRoZSBzdHlsZXNoZWV0LlxuICovXG5nb29nLnN0eWxlLnNldFN0eWxlcyA9IGZ1bmN0aW9uKGVsZW1lbnQsIHN0eWxlc1N0cmluZykge1xuICBpZiAoZ29vZy51c2VyQWdlbnQuSUUgJiYgZ29vZy5pc0RlZihlbGVtZW50LmNzc1RleHQpKSB7XG4gICAgLy8gQWRkaW5nIHRoZSBzZWxlY3RvcnMgaW5kaXZpZHVhbGx5IGNhdXNlZCB0aGUgYnJvd3NlciB0byBoYW5nIGlmIHRoZVxuICAgIC8vIHNlbGVjdG9yIHdhcyBpbnZhbGlkIG9yIHRoZXJlIHdlcmUgQ1NTIGNvbW1lbnRzLiAgU2V0dGluZyB0aGUgY3NzVGV4dCBvZlxuICAgIC8vIHRoZSBzdHlsZSBub2RlIHdvcmtzIGZpbmUgYW5kIGlnbm9yZXMgQ1NTIHRoYXQgSUUgZG9lc24ndCB1bmRlcnN0YW5kLlxuICAgIC8vIEhvd2V2ZXIgSUUgPj0gMTEgZG9lc24ndCBzdXBwb3J0IGNzc1RleHQgYW55IG1vcmUsIHNvIHdlIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gY3NzVGV4dCBpcyBhIGRlZmluZWQgcHJvcGVydHkgYW5kIG90aGVyd2lzZSBmYWxsIGJhY2sgdG8gaW5uZXJIVE1MLlxuICAgIGVsZW1lbnQuY3NzVGV4dCA9IHN0eWxlc1N0cmluZztcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IHN0eWxlc1N0cmluZztcbiAgfVxufTtcblxuXG4vKipcbiAqIFNldHMgJ3doaXRlLXNwYWNlOiBwcmUtd3JhcCcgZm9yIGEgbm9kZSAoeC1icm93c2VyKS5cbiAqXG4gKiBUaGVyZSBhcmUgYXMgbWFueSB3YXlzIG9mIHNwZWNpZnlpbmcgcHJlLXdyYXAgYXMgdGhlcmUgYXJlIGJyb3dzZXJzLlxuICpcbiAqIENTUzMvSUU4OiB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG4gKiBNb3ppbGxhOiAgd2hpdGUtc3BhY2U6IC1tb3otcHJlLXdyYXA7XG4gKiBPcGVyYTogICAgd2hpdGUtc3BhY2U6IC1vLXByZS13cmFwO1xuICogSUU2Lzc6ICAgIHdoaXRlLXNwYWNlOiBwcmU7IHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsIEVsZW1lbnQgdG8gZW5hYmxlIHByZS13cmFwIGZvci5cbiAqL1xuZ29vZy5zdHlsZS5zZXRQcmVXcmFwID0gZnVuY3Rpb24oZWwpIHtcbiAgdmFyIHN0eWxlID0gZWwuc3R5bGU7XG4gIGlmIChnb29nLnVzZXJBZ2VudC5JRSAmJiAhZ29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXIoJzgnKSkge1xuICAgIHN0eWxlLndoaXRlU3BhY2UgPSAncHJlJztcbiAgICBzdHlsZS53b3JkV3JhcCA9ICdicmVhay13b3JkJztcbiAgfSBlbHNlIGlmIChnb29nLnVzZXJBZ2VudC5HRUNLTykge1xuICAgIHN0eWxlLndoaXRlU3BhY2UgPSAnLW1vei1wcmUtd3JhcCc7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUud2hpdGVTcGFjZSA9ICdwcmUtd3JhcCc7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTZXRzICdkaXNwbGF5OiBpbmxpbmUtYmxvY2snIGZvciBhbiBlbGVtZW50IChjcm9zcy1icm93c2VyKS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgRWxlbWVudCB0byB3aGljaCB0aGUgaW5saW5lLWJsb2NrIGRpc3BsYXkgc3R5bGUgaXMgdG8gYmVcbiAqICAgIGFwcGxpZWQuXG4gKiBAc2VlIC4uL2RlbW9zL2lubGluZV9ibG9ja19xdWlya3MuaHRtbFxuICogQHNlZSAuLi9kZW1vcy9pbmxpbmVfYmxvY2tfc3RhbmRhcmRzLmh0bWxcbiAqL1xuZ29vZy5zdHlsZS5zZXRJbmxpbmVCbG9jayA9IGZ1bmN0aW9uKGVsKSB7XG4gIHZhciBzdHlsZSA9IGVsLnN0eWxlO1xuICAvLyBXaXRob3V0IHBvc2l0aW9uOnJlbGF0aXZlLCB3ZWlyZG5lc3MgZW5zdWVzLiAgSnVzdCBhY2NlcHQgaXQgYW5kIG1vdmUgb24uXG4gIHN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcblxuICBpZiAoZ29vZy51c2VyQWdlbnQuSUUgJiYgIWdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyKCc4JykpIHtcbiAgICAvLyBJRTggc3VwcG9ydHMgaW5saW5lLWJsb2NrIHNvIGZhbGwgdGhyb3VnaCB0byB0aGUgZWxzZVxuICAgIC8vIFpvb206MSBmb3JjZXMgaGFzTGF5b3V0LCBkaXNwbGF5OmlubGluZSBnaXZlcyBpbmxpbmUgYmVoYXZpb3IuXG4gICAgc3R5bGUuem9vbSA9ICcxJztcbiAgICBzdHlsZS5kaXNwbGF5ID0gJ2lubGluZSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gT3BlcmEsIFdlYmtpdCwgYW5kIFNhZmFyaSBzZWVtIHRvIGRvIE9LIHdpdGggdGhlIHN0YW5kYXJkIGlubGluZS1ibG9ja1xuICAgIC8vIHN0eWxlLlxuICAgIHN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcbiAgfVxufTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZWxlbWVudCBpcyB1c2luZyByaWdodCB0byBsZWZ0IChydGwpIGRpcmVjdGlvbi5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgIFRoZSBlbGVtZW50IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGZvciByaWdodCB0byBsZWZ0LCBmYWxzZSBmb3IgbGVmdCB0byByaWdodC5cbiAqL1xuZ29vZy5zdHlsZS5pc1JpZ2h0VG9MZWZ0ID0gZnVuY3Rpb24oZWwpIHtcbiAgcmV0dXJuICdydGwnID09IGdvb2cuc3R5bGUuZ2V0U3R5bGVfKGVsLCAnZGlyZWN0aW9uJyk7XG59O1xuXG5cbi8qKlxuICogVGhlIENTUyBzdHlsZSBwcm9wZXJ0eSBjb3JyZXNwb25kaW5nIHRvIGFuIGVsZW1lbnQgYmVpbmdcbiAqIHVuc2VsZWN0YWJsZSBvbiB0aGUgY3VycmVudCBicm93c2VyIHBsYXRmb3JtIChudWxsIGlmIG5vbmUpLlxuICogT3BlcmEgYW5kIElFIGluc3RlYWQgdXNlIGEgRE9NIGF0dHJpYnV0ZSAndW5zZWxlY3RhYmxlJy5cbiAqIEB0eXBlIHs/c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHlsZS51bnNlbGVjdGFibGVTdHlsZV8gPVxuICAgIGdvb2cudXNlckFnZW50LkdFQ0tPID8gJ01velVzZXJTZWxlY3QnIDpcbiAgICBnb29nLnVzZXJBZ2VudC5XRUJLSVQgPyAnV2Via2l0VXNlclNlbGVjdCcgOlxuICAgIG51bGw7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGVsZW1lbnQgaXMgc2V0IHRvIGJlIHVuc2VsZWN0YWJsZSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICogTm90ZSB0aGF0IG9uIHNvbWUgcGxhdGZvcm1zIChlLmcuIE1vemlsbGEpLCBldmVuIGlmIGFuIGVsZW1lbnQgaXNuJ3Qgc2V0XG4gKiB0byBiZSB1bnNlbGVjdGFibGUsIGl0IHdpbGwgYmVoYXZlIGFzIHN1Y2ggaWYgYW55IG9mIGl0cyBhbmNlc3RvcnMgaXNcbiAqIHVuc2VsZWN0YWJsZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgIEVsZW1lbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSAgV2hldGhlciB0aGUgZWxlbWVudCBpcyBzZXQgdG8gYmUgdW5zZWxlY3RhYmxlLlxuICovXG5nb29nLnN0eWxlLmlzVW5zZWxlY3RhYmxlID0gZnVuY3Rpb24oZWwpIHtcbiAgaWYgKGdvb2cuc3R5bGUudW5zZWxlY3RhYmxlU3R5bGVfKSB7XG4gICAgcmV0dXJuIGVsLnN0eWxlW2dvb2cuc3R5bGUudW5zZWxlY3RhYmxlU3R5bGVfXS50b0xvd2VyQ2FzZSgpID09ICdub25lJztcbiAgfSBlbHNlIGlmIChnb29nLnVzZXJBZ2VudC5JRSB8fCBnb29nLnVzZXJBZ2VudC5PUEVSQSkge1xuICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoJ3Vuc2VsZWN0YWJsZScpID09ICdvbic7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIE1ha2VzIHRoZSBlbGVtZW50IGFuZCBpdHMgZGVzY2VuZGFudHMgc2VsZWN0YWJsZSBvciB1bnNlbGVjdGFibGUuICBOb3RlXG4gKiB0aGF0IG9uIHNvbWUgcGxhdGZvcm1zIChlLmcuIE1vemlsbGEpLCBldmVuIGlmIGFuIGVsZW1lbnQgaXNuJ3Qgc2V0IHRvXG4gKiBiZSB1bnNlbGVjdGFibGUsIGl0IHdpbGwgYmVoYXZlIGFzIHN1Y2ggaWYgYW55IG9mIGl0cyBhbmNlc3RvcnMgaXNcbiAqIHVuc2VsZWN0YWJsZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgIFRoZSBlbGVtZW50IHRvIGFsdGVyLlxuICogQHBhcmFtIHtib29sZWFufSB1bnNlbGVjdGFibGUgIFdoZXRoZXIgdGhlIGVsZW1lbnQgYW5kIGl0cyBkZXNjZW5kYW50c1xuICogICAgIHNob3VsZCBiZSBtYWRlIHVuc2VsZWN0YWJsZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9ub1JlY3Vyc2UgIFdoZXRoZXIgdG8gb25seSBhbHRlciB0aGUgZWxlbWVudCdzIG93blxuICogICAgIHNlbGVjdGFibGUgc3RhdGUsIGFuZCBsZWF2ZSBpdHMgZGVzY2VuZGFudHMgYWxvbmU7IGRlZmF1bHRzIHRvIGZhbHNlLlxuICovXG5nb29nLnN0eWxlLnNldFVuc2VsZWN0YWJsZSA9IGZ1bmN0aW9uKGVsLCB1bnNlbGVjdGFibGUsIG9wdF9ub1JlY3Vyc2UpIHtcbiAgLy8gVE9ETyhhdHRpbGEpOiBEbyB3ZSBuZWVkIGFsbCBvZiBUUl9Eb21VdGlsLm1ha2VVbnNlbGVjdGFibGUoKSBpbiBDbG9zdXJlP1xuICB2YXIgZGVzY2VuZGFudHMgPSAhb3B0X25vUmVjdXJzZSA/IGVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJykgOiBudWxsO1xuICB2YXIgbmFtZSA9IGdvb2cuc3R5bGUudW5zZWxlY3RhYmxlU3R5bGVfO1xuICBpZiAobmFtZSkge1xuICAgIC8vIEFkZC9yZW1vdmUgdGhlIGFwcHJvcHJpYXRlIENTUyBzdHlsZSB0by9mcm9tIHRoZSBlbGVtZW50IGFuZCBpdHNcbiAgICAvLyBkZXNjZW5kYW50cy5cbiAgICB2YXIgdmFsdWUgPSB1bnNlbGVjdGFibGUgPyAnbm9uZScgOiAnJztcbiAgICAvLyBNYXRoTUwgZWxlbWVudHMgZG8gbm90IGhhdmUgYSBzdHlsZSBwcm9wZXJ0eS4gVmVyaWZ5IGJlZm9yZSBzZXR0aW5nLlxuICAgIGlmIChlbC5zdHlsZSkge1xuICAgICAgZWwuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGRlc2NlbmRhbnRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgZGVzY2VuZGFudDsgZGVzY2VuZGFudCA9IGRlc2NlbmRhbnRzW2ldOyBpKyspIHtcbiAgICAgICAgaWYgKGRlc2NlbmRhbnQuc3R5bGUpIHtcbiAgICAgICAgICBkZXNjZW5kYW50LnN0eWxlW25hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZ29vZy51c2VyQWdlbnQuSUUgfHwgZ29vZy51c2VyQWdlbnQuT1BFUkEpIHtcbiAgICAvLyBUb2dnbGUgdGhlICd1bnNlbGVjdGFibGUnIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBhbmQgaXRzIGRlc2NlbmRhbnRzLlxuICAgIHZhciB2YWx1ZSA9IHVuc2VsZWN0YWJsZSA/ICdvbicgOiAnJztcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3Vuc2VsZWN0YWJsZScsIHZhbHVlKTtcbiAgICBpZiAoZGVzY2VuZGFudHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBkZXNjZW5kYW50OyBkZXNjZW5kYW50ID0gZGVzY2VuZGFudHNbaV07IGkrKykge1xuICAgICAgICBkZXNjZW5kYW50LnNldEF0dHJpYnV0ZSgndW5zZWxlY3RhYmxlJywgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIGJvcmRlciBib3ggc2l6ZSBmb3IgYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAgVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBzaXplIGZvci5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguU2l6ZX0gVGhlIGJvcmRlciBib3ggc2l6ZS5cbiAqL1xuZ29vZy5zdHlsZS5nZXRCb3JkZXJCb3hTaXplID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICByZXR1cm4gbmV3IGdvb2cubWF0aC5TaXplKFxuICAgICAgLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovIChlbGVtZW50KS5vZmZzZXRXaWR0aCxcbiAgICAgIC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyAoZWxlbWVudCkub2Zmc2V0SGVpZ2h0KTtcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBib3JkZXIgYm94IHNpemUgb2YgYW4gZWxlbWVudC4gVGhpcyBpcyBwb3RlbnRpYWxseSBleHBlbnNpdmUgaW4gSUVcbiAqIGlmIHRoZSBkb2N1bWVudCBpcyBDU1MxQ29tcGF0IG1vZGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAgVGhlIGVsZW1lbnQgdG8gc2V0IHRoZSBzaXplIG9uLlxuICogQHBhcmFtIHtnb29nLm1hdGguU2l6ZX0gc2l6ZSAgVGhlIG5ldyBzaXplLlxuICovXG5nb29nLnN0eWxlLnNldEJvcmRlckJveFNpemUgPSBmdW5jdGlvbihlbGVtZW50LCBzaXplKSB7XG4gIHZhciBkb2MgPSBnb29nLmRvbS5nZXRPd25lckRvY3VtZW50KGVsZW1lbnQpO1xuICB2YXIgaXNDc3MxQ29tcGF0TW9kZSA9IGdvb2cuZG9tLmdldERvbUhlbHBlcihkb2MpLmlzQ3NzMUNvbXBhdE1vZGUoKTtcblxuICBpZiAoZ29vZy51c2VyQWdlbnQuSUUgJiZcbiAgICAgICFnb29nLnVzZXJBZ2VudC5pc1ZlcnNpb25PckhpZ2hlcignMTAnKSAmJlxuICAgICAgKCFpc0NzczFDb21wYXRNb2RlIHx8ICFnb29nLnVzZXJBZ2VudC5pc1ZlcnNpb25PckhpZ2hlcignOCcpKSkge1xuICAgIHZhciBzdHlsZSA9IGVsZW1lbnQuc3R5bGU7XG4gICAgaWYgKGlzQ3NzMUNvbXBhdE1vZGUpIHtcbiAgICAgIHZhciBwYWRkaW5nQm94ID0gZ29vZy5zdHlsZS5nZXRQYWRkaW5nQm94KGVsZW1lbnQpO1xuICAgICAgdmFyIGJvcmRlckJveCA9IGdvb2cuc3R5bGUuZ2V0Qm9yZGVyQm94KGVsZW1lbnQpO1xuICAgICAgc3R5bGUucGl4ZWxXaWR0aCA9IHNpemUud2lkdGggLSBib3JkZXJCb3gubGVmdCAtIHBhZGRpbmdCb3gubGVmdCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZ0JveC5yaWdodCAtIGJvcmRlckJveC5yaWdodDtcbiAgICAgIHN0eWxlLnBpeGVsSGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSBib3JkZXJCb3gudG9wIC0gcGFkZGluZ0JveC50b3AgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nQm94LmJvdHRvbSAtIGJvcmRlckJveC5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLnBpeGVsV2lkdGggPSBzaXplLndpZHRoO1xuICAgICAgc3R5bGUucGl4ZWxIZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZ29vZy5zdHlsZS5zZXRCb3hTaXppbmdTaXplXyhlbGVtZW50LCBzaXplLCAnYm9yZGVyLWJveCcpO1xuICB9XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgY29udGVudCBib3ggc2l6ZSBmb3IgYW4gZWxlbWVudC4gIFRoaXMgaXMgcG90ZW50aWFsbHkgZXhwZW5zaXZlIGluXG4gKiBhbGwgYnJvd3NlcnMuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgc2l6ZSBmb3IuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLlNpemV9IFRoZSBjb250ZW50IGJveCBzaXplLlxuICovXG5nb29nLnN0eWxlLmdldENvbnRlbnRCb3hTaXplID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICB2YXIgZG9jID0gZ29vZy5kb20uZ2V0T3duZXJEb2N1bWVudChlbGVtZW50KTtcbiAgdmFyIGllQ3VycmVudFN0eWxlID0gZ29vZy51c2VyQWdlbnQuSUUgJiYgZWxlbWVudC5jdXJyZW50U3R5bGU7XG4gIGlmIChpZUN1cnJlbnRTdHlsZSAmJlxuICAgICAgZ29vZy5kb20uZ2V0RG9tSGVscGVyKGRvYykuaXNDc3MxQ29tcGF0TW9kZSgpICYmXG4gICAgICBpZUN1cnJlbnRTdHlsZS53aWR0aCAhPSAnYXV0bycgJiYgaWVDdXJyZW50U3R5bGUuaGVpZ2h0ICE9ICdhdXRvJyAmJlxuICAgICAgIWllQ3VycmVudFN0eWxlLmJveFNpemluZykge1xuICAgIC8vIElmIElFIGluIENTUzFDb21wYXQgbW9kZSB0aGFuIGp1c3QgdXNlIHRoZSB3aWR0aCBhbmQgaGVpZ2h0LlxuICAgIC8vIElmIHdlIGhhdmUgYSBib3hTaXppbmcgdGhlbiBmYWxsIGJhY2sgb24gbWVhc3VyaW5nIHRoZSBib3JkZXJzIGV0Yy5cbiAgICB2YXIgd2lkdGggPSBnb29nLnN0eWxlLmdldEllUGl4ZWxWYWx1ZV8oZWxlbWVudCwgaWVDdXJyZW50U3R5bGUud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCcsICdwaXhlbFdpZHRoJyk7XG4gICAgdmFyIGhlaWdodCA9IGdvb2cuc3R5bGUuZ2V0SWVQaXhlbFZhbHVlXyhlbGVtZW50LCBpZUN1cnJlbnRTdHlsZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JywgJ3BpeGVsSGVpZ2h0Jyk7XG4gICAgcmV0dXJuIG5ldyBnb29nLm1hdGguU2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgYm9yZGVyQm94U2l6ZSA9IGdvb2cuc3R5bGUuZ2V0Qm9yZGVyQm94U2l6ZShlbGVtZW50KTtcbiAgICB2YXIgcGFkZGluZ0JveCA9IGdvb2cuc3R5bGUuZ2V0UGFkZGluZ0JveChlbGVtZW50KTtcbiAgICB2YXIgYm9yZGVyQm94ID0gZ29vZy5zdHlsZS5nZXRCb3JkZXJCb3goZWxlbWVudCk7XG4gICAgcmV0dXJuIG5ldyBnb29nLm1hdGguU2l6ZShib3JkZXJCb3hTaXplLndpZHRoIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckJveC5sZWZ0IC0gcGFkZGluZ0JveC5sZWZ0IC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdCb3gucmlnaHQgLSBib3JkZXJCb3gucmlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJCb3hTaXplLmhlaWdodCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJCb3gudG9wIC0gcGFkZGluZ0JveC50b3AgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZ0JveC5ib3R0b20gLSBib3JkZXJCb3guYm90dG9tKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIGNvbnRlbnQgYm94IHNpemUgb2YgYW4gZWxlbWVudC4gVGhpcyBpcyBwb3RlbnRpYWxseSBleHBlbnNpdmUgaW4gSUVcbiAqIGlmIHRoZSBkb2N1bWVudCBpcyBCYWNrQ29tcGF0IG1vZGUuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgIFRoZSBlbGVtZW50IHRvIHNldCB0aGUgc2l6ZSBvbi5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLlNpemV9IHNpemUgIFRoZSBuZXcgc2l6ZS5cbiAqL1xuZ29vZy5zdHlsZS5zZXRDb250ZW50Qm94U2l6ZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIHNpemUpIHtcbiAgdmFyIGRvYyA9IGdvb2cuZG9tLmdldE93bmVyRG9jdW1lbnQoZWxlbWVudCk7XG4gIHZhciBpc0NzczFDb21wYXRNb2RlID0gZ29vZy5kb20uZ2V0RG9tSGVscGVyKGRvYykuaXNDc3MxQ29tcGF0TW9kZSgpO1xuICBpZiAoZ29vZy51c2VyQWdlbnQuSUUgJiZcbiAgICAgICFnb29nLnVzZXJBZ2VudC5pc1ZlcnNpb25PckhpZ2hlcignMTAnKSAmJlxuICAgICAgKCFpc0NzczFDb21wYXRNb2RlIHx8ICFnb29nLnVzZXJBZ2VudC5pc1ZlcnNpb25PckhpZ2hlcignOCcpKSkge1xuICAgIHZhciBzdHlsZSA9IGVsZW1lbnQuc3R5bGU7XG4gICAgaWYgKGlzQ3NzMUNvbXBhdE1vZGUpIHtcbiAgICAgIHN0eWxlLnBpeGVsV2lkdGggPSBzaXplLndpZHRoO1xuICAgICAgc3R5bGUucGl4ZWxIZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhZGRpbmdCb3ggPSBnb29nLnN0eWxlLmdldFBhZGRpbmdCb3goZWxlbWVudCk7XG4gICAgICB2YXIgYm9yZGVyQm94ID0gZ29vZy5zdHlsZS5nZXRCb3JkZXJCb3goZWxlbWVudCk7XG4gICAgICBzdHlsZS5waXhlbFdpZHRoID0gc2l6ZS53aWR0aCArIGJvcmRlckJveC5sZWZ0ICsgcGFkZGluZ0JveC5sZWZ0ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nQm94LnJpZ2h0ICsgYm9yZGVyQm94LnJpZ2h0O1xuICAgICAgc3R5bGUucGl4ZWxIZWlnaHQgPSBzaXplLmhlaWdodCArIGJvcmRlckJveC50b3AgKyBwYWRkaW5nQm94LnRvcCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdCb3guYm90dG9tICsgYm9yZGVyQm94LmJvdHRvbTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZ29vZy5zdHlsZS5zZXRCb3hTaXppbmdTaXplXyhlbGVtZW50LCBzaXplLCAnY29udGVudC1ib3gnKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IHNldHMgdGhlIGJveCBzaXppbmcgYXMgd2VsbCBhcyB0aGUgd2lkdGggYW5kIGhlaWdodFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50ICBUaGUgZWxlbWVudCB0byBzZXQgdGhlIHNpemUgb24uXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5TaXplfSBzaXplICBUaGUgbmV3IHNpemUgdG8gc2V0LlxuICogQHBhcmFtIHtzdHJpbmd9IGJveFNpemluZyAgVGhlIGJveC1zaXppbmcgdmFsdWUuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0eWxlLnNldEJveFNpemluZ1NpemVfID0gZnVuY3Rpb24oZWxlbWVudCwgc2l6ZSwgYm94U2l6aW5nKSB7XG4gIHZhciBzdHlsZSA9IGVsZW1lbnQuc3R5bGU7XG4gIGlmIChnb29nLnVzZXJBZ2VudC5HRUNLTykge1xuICAgIHN0eWxlLk1vekJveFNpemluZyA9IGJveFNpemluZztcbiAgfSBlbHNlIGlmIChnb29nLnVzZXJBZ2VudC5XRUJLSVQpIHtcbiAgICBzdHlsZS5XZWJraXRCb3hTaXppbmcgPSBib3hTaXppbmc7XG4gIH0gZWxzZSB7XG4gICAgLy8gSW5jbHVkZXMgSUU4IGFuZCBPcGVyYSA5LjUwK1xuICAgIHN0eWxlLmJveFNpemluZyA9IGJveFNpemluZztcbiAgfVxuXG4gIC8vIFNldHRpbmcgdGhpcyB0byBhIG5lZ2F0aXZlIHZhbHVlIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIG9uIElFXG4gIC8vIChhbmQgZG9lc24ndCBkbyBhbnl0aGluZyBkaWZmZXJlbnQgdGhhbiBzZXR0aW5nIGl0IHRvIDApLlxuICBzdHlsZS53aWR0aCA9IE1hdGgubWF4KHNpemUud2lkdGgsIDApICsgJ3B4JztcbiAgc3R5bGUuaGVpZ2h0ID0gTWF0aC5tYXgoc2l6ZS5oZWlnaHQsIDApICsgJ3B4Jztcbn07XG5cblxuLyoqXG4gKiBJRSBzcGVjaWZpYyBmdW5jdGlvbiB0aGF0IGNvbnZlcnRzIGEgbm9uIHBpeGVsIHVuaXQgdG8gcGl4ZWxzLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50ICBUaGUgZWxlbWVudCB0byBjb252ZXJ0IHRoZSB2YWx1ZSBmb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgIFRoZSBjdXJyZW50IHZhbHVlIGFzIGEgc3RyaW5nLiBUaGUgdmFsdWUgbXVzdCBub3QgYmVcbiAqICAgICAnJy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICBUaGUgQ1NTIHByb3BlcnR5IG5hbWUgdG8gdXNlIGZvciB0aGUgY29udmVyc3Rpb24uIFRoaXNcbiAqICAgICBzaG91bGQgYmUgJ2xlZnQnLCAndG9wJywgJ3dpZHRoJyBvciAnaGVpZ2h0Jy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwaXhlbE5hbWUgIFRoZSBDU1MgcGl4ZWwgcHJvcGVydHkgbmFtZSB0byB1c2UgdG8gZ2V0IHRoZVxuICogICAgIHZhbHVlIGluIHBpeGVscy5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHZhbHVlIGluIHBpeGVscy5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3R5bGUuZ2V0SWVQaXhlbFZhbHVlXyA9IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlLCBuYW1lLCBwaXhlbE5hbWUpIHtcbiAgLy8gVHJ5IGlmIHdlIGFscmVhZHkgaGF2ZSBhIHBpeGVsIHZhbHVlLiBJRSBkb2VzIG5vdCBkbyBoYWxmIHBpeGVscyBzbyB3ZVxuICAvLyBvbmx5IGNoZWNrIGlmIGl0IG1hdGNoZXMgYSBudW1iZXIgZm9sbG93ZWQgYnkgJ3B4Jy5cbiAgaWYgKC9eXFxkK3B4PyQvLnRlc3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG9sZFN0eWxlVmFsdWUgPSBlbGVtZW50LnN0eWxlW25hbWVdO1xuICAgIHZhciBvbGRSdW50aW1lVmFsdWUgPSBlbGVtZW50LnJ1bnRpbWVTdHlsZVtuYW1lXTtcbiAgICAvLyBzZXQgcnVudGltZSBzdHlsZSB0byBwcmV2ZW50IGNoYW5nZXNcbiAgICBlbGVtZW50LnJ1bnRpbWVTdHlsZVtuYW1lXSA9IGVsZW1lbnQuY3VycmVudFN0eWxlW25hbWVdO1xuICAgIGVsZW1lbnQuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICB2YXIgcGl4ZWxWYWx1ZSA9IGVsZW1lbnQuc3R5bGVbcGl4ZWxOYW1lXTtcbiAgICAvLyByZXN0b3JlXG4gICAgZWxlbWVudC5zdHlsZVtuYW1lXSA9IG9sZFN0eWxlVmFsdWU7XG4gICAgZWxlbWVudC5ydW50aW1lU3R5bGVbbmFtZV0gPSBvbGRSdW50aW1lVmFsdWU7XG4gICAgcmV0dXJuIHBpeGVsVmFsdWU7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIHBpeGVsIHBhZGRpbmcgb3IgbWFyZ2luIGZvciBJRS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAgVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBwYWRkaW5nIGZvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wTmFtZSAgVGhlIHByb3BlcnR5IG5hbWUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBwaXhlbCBwYWRkaW5nLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHlsZS5nZXRJZVBpeGVsRGlzdGFuY2VfID0gZnVuY3Rpb24oZWxlbWVudCwgcHJvcE5hbWUpIHtcbiAgdmFyIHZhbHVlID0gZ29vZy5zdHlsZS5nZXRDYXNjYWRlZFN0eWxlKGVsZW1lbnQsIHByb3BOYW1lKTtcbiAgcmV0dXJuIHZhbHVlID9cbiAgICAgIGdvb2cuc3R5bGUuZ2V0SWVQaXhlbFZhbHVlXyhlbGVtZW50LCB2YWx1ZSwgJ2xlZnQnLCAncGl4ZWxMZWZ0JykgOiAwO1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIGNvbXB1dGVkIHBhZGRpbmdzIG9yIG1hcmdpbnMgKG9uIGFsbCBzaWRlcykgaW4gcGl4ZWxzLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50ICBUaGUgZWxlbWVudCB0byBnZXQgdGhlIHBhZGRpbmcgZm9yLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlUHJlZml4ICBQYXNzICdwYWRkaW5nJyB0byByZXRyaWV2ZSB0aGUgcGFkZGluZyBib3gsXG4gKiAgICAgb3IgJ21hcmdpbicgdG8gcmV0cmlldmUgdGhlIG1hcmdpbiBib3guXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkJveH0gVGhlIGNvbXB1dGVkIHBhZGRpbmdzIG9yIG1hcmdpbnMuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0eWxlLmdldEJveF8gPSBmdW5jdGlvbihlbGVtZW50LCBzdHlsZVByZWZpeCkge1xuICBpZiAoZ29vZy51c2VyQWdlbnQuSUUpIHtcbiAgICB2YXIgbGVmdCA9IGdvb2cuc3R5bGUuZ2V0SWVQaXhlbERpc3RhbmNlXyhlbGVtZW50LCBzdHlsZVByZWZpeCArICdMZWZ0Jyk7XG4gICAgdmFyIHJpZ2h0ID0gZ29vZy5zdHlsZS5nZXRJZVBpeGVsRGlzdGFuY2VfKGVsZW1lbnQsIHN0eWxlUHJlZml4ICsgJ1JpZ2h0Jyk7XG4gICAgdmFyIHRvcCA9IGdvb2cuc3R5bGUuZ2V0SWVQaXhlbERpc3RhbmNlXyhlbGVtZW50LCBzdHlsZVByZWZpeCArICdUb3AnKTtcbiAgICB2YXIgYm90dG9tID0gZ29vZy5zdHlsZS5nZXRJZVBpeGVsRGlzdGFuY2VfKFxuICAgICAgICBlbGVtZW50LCBzdHlsZVByZWZpeCArICdCb3R0b20nKTtcbiAgICByZXR1cm4gbmV3IGdvb2cubWF0aC5Cb3godG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbiBub24tSUUgYnJvd3NlcnMsIGdldENvbXB1dGVkU3R5bGUgaXMgYWx3YXlzIG5vbi1udWxsLlxuICAgIHZhciBsZWZ0ID0gZ29vZy5zdHlsZS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIHN0eWxlUHJlZml4ICsgJ0xlZnQnKTtcbiAgICB2YXIgcmlnaHQgPSBnb29nLnN0eWxlLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgc3R5bGVQcmVmaXggKyAnUmlnaHQnKTtcbiAgICB2YXIgdG9wID0gZ29vZy5zdHlsZS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIHN0eWxlUHJlZml4ICsgJ1RvcCcpO1xuICAgIHZhciBib3R0b20gPSBnb29nLnN0eWxlLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgc3R5bGVQcmVmaXggKyAnQm90dG9tJyk7XG5cbiAgICAvLyBOT1RFKGFydik6IEdlY2tvIGNhbiByZXR1cm4gZmxvYXRpbmcgcG9pbnQgbnVtYmVycyBmb3IgdGhlIGNvbXB1dGVkXG4gICAgLy8gc3R5bGUgdmFsdWVzLlxuICAgIHJldHVybiBuZXcgZ29vZy5tYXRoLkJveChwYXJzZUZsb2F0KHRvcCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQocmlnaHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KGJvdHRvbSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQobGVmdCkpO1xuICB9XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgY29tcHV0ZWQgcGFkZGluZ3MgKG9uIGFsbCBzaWRlcykgaW4gcGl4ZWxzLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50ICBUaGUgZWxlbWVudCB0byBnZXQgdGhlIHBhZGRpbmcgZm9yLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5Cb3h9IFRoZSBjb21wdXRlZCBwYWRkaW5ncy5cbiAqL1xuZ29vZy5zdHlsZS5nZXRQYWRkaW5nQm94ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICByZXR1cm4gZ29vZy5zdHlsZS5nZXRCb3hfKGVsZW1lbnQsICdwYWRkaW5nJyk7XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgY29tcHV0ZWQgbWFyZ2lucyAob24gYWxsIHNpZGVzKSBpbiBwaXhlbHMuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgbWFyZ2lucyBmb3IuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkJveH0gVGhlIGNvbXB1dGVkIG1hcmdpbnMuXG4gKi9cbmdvb2cuc3R5bGUuZ2V0TWFyZ2luQm94ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICByZXR1cm4gZ29vZy5zdHlsZS5nZXRCb3hfKGVsZW1lbnQsICdtYXJnaW4nKTtcbn07XG5cblxuLyoqXG4gKiBBIG1hcCB1c2VkIHRvIG1hcCB0aGUgYm9yZGVyIHdpZHRoIGtleXdvcmRzIHRvIGEgcGl4ZWwgd2lkdGguXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHlsZS5pZUJvcmRlcldpZHRoS2V5d29yZHNfID0ge1xuICAndGhpbic6IDIsXG4gICdtZWRpdW0nOiA0LFxuICAndGhpY2snOiA2XG59O1xuXG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIGZvciBJRSB0byBnZXQgdGhlIHBpeGVsIGJvcmRlci5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAgVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBwaXhlbCBib3JkZXIgZm9yLlxuICogQHBhcmFtIHtzdHJpbmd9IHByb3AgIFRoZSBwYXJ0IG9mIHRoZSBwcm9wZXJ0eSBuYW1lLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgdmFsdWUgaW4gcGl4ZWxzLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHlsZS5nZXRJZVBpeGVsQm9yZGVyXyA9IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3ApIHtcbiAgaWYgKGdvb2cuc3R5bGUuZ2V0Q2FzY2FkZWRTdHlsZShlbGVtZW50LCBwcm9wICsgJ1N0eWxlJykgPT0gJ25vbmUnKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgdmFyIHdpZHRoID0gZ29vZy5zdHlsZS5nZXRDYXNjYWRlZFN0eWxlKGVsZW1lbnQsIHByb3AgKyAnV2lkdGgnKTtcbiAgaWYgKHdpZHRoIGluIGdvb2cuc3R5bGUuaWVCb3JkZXJXaWR0aEtleXdvcmRzXykge1xuICAgIHJldHVybiBnb29nLnN0eWxlLmllQm9yZGVyV2lkdGhLZXl3b3Jkc19bd2lkdGhdO1xuICB9XG4gIHJldHVybiBnb29nLnN0eWxlLmdldEllUGl4ZWxWYWx1ZV8oZWxlbWVudCwgd2lkdGgsICdsZWZ0JywgJ3BpeGVsTGVmdCcpO1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIGNvbXB1dGVkIGJvcmRlciB3aWR0aHMgKG9uIGFsbCBzaWRlcykgaW4gcGl4ZWxzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgYm9yZGVyIHdpZHRocyBmb3IuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkJveH0gVGhlIGNvbXB1dGVkIGJvcmRlciB3aWR0aHMuXG4gKi9cbmdvb2cuc3R5bGUuZ2V0Qm9yZGVyQm94ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICBpZiAoZ29vZy51c2VyQWdlbnQuSUUgJiYgIWdvb2cudXNlckFnZW50LmlzRG9jdW1lbnRNb2RlT3JIaWdoZXIoOSkpIHtcbiAgICB2YXIgbGVmdCA9IGdvb2cuc3R5bGUuZ2V0SWVQaXhlbEJvcmRlcl8oZWxlbWVudCwgJ2JvcmRlckxlZnQnKTtcbiAgICB2YXIgcmlnaHQgPSBnb29nLnN0eWxlLmdldEllUGl4ZWxCb3JkZXJfKGVsZW1lbnQsICdib3JkZXJSaWdodCcpO1xuICAgIHZhciB0b3AgPSBnb29nLnN0eWxlLmdldEllUGl4ZWxCb3JkZXJfKGVsZW1lbnQsICdib3JkZXJUb3AnKTtcbiAgICB2YXIgYm90dG9tID0gZ29vZy5zdHlsZS5nZXRJZVBpeGVsQm9yZGVyXyhlbGVtZW50LCAnYm9yZGVyQm90dG9tJyk7XG4gICAgcmV0dXJuIG5ldyBnb29nLm1hdGguQm94KHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gT24gbm9uLUlFIGJyb3dzZXJzLCBnZXRDb21wdXRlZFN0eWxlIGlzIGFsd2F5cyBub24tbnVsbC5cbiAgICB2YXIgbGVmdCA9IGdvb2cuc3R5bGUuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCAnYm9yZGVyTGVmdFdpZHRoJyk7XG4gICAgdmFyIHJpZ2h0ID0gZ29vZy5zdHlsZS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsICdib3JkZXJSaWdodFdpZHRoJyk7XG4gICAgdmFyIHRvcCA9IGdvb2cuc3R5bGUuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCAnYm9yZGVyVG9wV2lkdGgnKTtcbiAgICB2YXIgYm90dG9tID0gZ29vZy5zdHlsZS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsICdib3JkZXJCb3R0b21XaWR0aCcpO1xuXG4gICAgcmV0dXJuIG5ldyBnb29nLm1hdGguQm94KHBhcnNlRmxvYXQodG9wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdChyaWdodCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoYm90dG9tKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdChsZWZ0KSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmb250IGZhY2UgYXBwbGllZCB0byBhIGdpdmVuIG5vZGUuIE9wZXJhIGFuZCBJRSBzaG91bGQgcmV0dXJuXG4gKiB0aGUgZm9udCBhY3R1YWxseSBkaXNwbGF5ZWQuIEZpcmVmb3ggcmV0dXJucyB0aGUgYXV0aG9yJ3MgbW9zdC1wcmVmZXJyZWRcbiAqIGZvbnQgKHdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgY2FwYWJsZSBvZiBkaXNwbGF5aW5nIGl0IG9yIG5vdC4pXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsICBUaGUgZWxlbWVudCB3aG9zZSBmb250IGZhbWlseSBpcyByZXR1cm5lZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvbnQgZmFtaWx5IGFwcGxpZWQgdG8gZWwuXG4gKi9cbmdvb2cuc3R5bGUuZ2V0Rm9udEZhbWlseSA9IGZ1bmN0aW9uKGVsKSB7XG4gIHZhciBkb2MgPSBnb29nLmRvbS5nZXRPd25lckRvY3VtZW50KGVsKTtcbiAgdmFyIGZvbnQgPSAnJztcbiAgLy8gVGhlIG1vdmVUb0VsZW1lbnRUZXh0IG1ldGhvZCBmcm9tIHRoZSBUZXh0UmFuZ2Ugb25seSB3b3JrcyBpZiB0aGUgZWxlbWVudFxuICAvLyBpcyBhdHRhY2hlZCB0byB0aGUgb3duZXIgZG9jdW1lbnQuXG4gIGlmIChkb2MuYm9keS5jcmVhdGVUZXh0UmFuZ2UgJiYgZ29vZy5kb20uY29udGFpbnMoZG9jLCBlbCkpIHtcbiAgICB2YXIgcmFuZ2UgPSBkb2MuYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICByYW5nZS5tb3ZlVG9FbGVtZW50VGV4dChlbCk7XG4gICAgLyoqIEBwcmVzZXJ2ZVRyeSAqL1xuICAgIHRyeSB7XG4gICAgICBmb250ID0gcmFuZ2UucXVlcnlDb21tYW5kVmFsdWUoJ0ZvbnROYW1lJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIGEgYXdrd2FyZCBleGNlcHRpb24uXG4gICAgICAvLyBPbiBzb21lIElFLCB0aGVyZSBpcyBhbiBleGNlcHRpb24gY29taW5nIGZyb20gaXQuXG4gICAgICAvLyBUaGUgZXJyb3IgZGVzY3JpcHRpb24gZnJvbSB0aGlzIGV4Y2VwdGlvbiBpczpcbiAgICAgIC8vIFRoaXMgd2luZG93IGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCBhcyBhIGRyb3AgdGFyZ2V0XG4gICAgICAvLyBUaGlzIGlzIGJvZ3VzIGRlc2NyaXB0aW9uLCBsaWtlbHkgZHVlIHRvIGEgYnVnIGluIGllLlxuICAgICAgZm9udCA9ICcnO1xuICAgIH1cbiAgfVxuICBpZiAoIWZvbnQpIHtcbiAgICAvLyBOb3RlIGlmIGZvciBzb21lIHJlYXNvbiBJRSBjYW4ndCBkZXJpdmUgRm9udE5hbWUgd2l0aCBhIFRleHRSYW5nZSwgd2VcbiAgICAvLyBmYWxsYmFjayB0byB1c2luZyBjdXJyZW50U3R5bGVcbiAgICBmb250ID0gZ29vZy5zdHlsZS5nZXRTdHlsZV8oZWwsICdmb250RmFtaWx5Jyk7XG4gIH1cblxuICAvLyBGaXJlZm94IHJldHVybnMgdGhlIGFwcGxpZWQgZm9udC1mYW1pbHkgc3RyaW5nIChhdXRob3IncyBsaXN0IG9mXG4gIC8vIHByZWZlcnJlZCBmb250cy4pIFdlIHdhbnQgdG8gcmV0dXJuIHRoZSBtb3N0LXByZWZlcnJlZCBmb250LCBpbiBsaWV1IG9mXG4gIC8vIHRoZSAqYWN0dWFsbHkqIGFwcGxpZWQgZm9udC5cbiAgdmFyIGZvbnRzQXJyYXkgPSBmb250LnNwbGl0KCcsJyk7XG4gIGlmIChmb250c0FycmF5Lmxlbmd0aCA+IDEpIGZvbnQgPSBmb250c0FycmF5WzBdO1xuXG4gIC8vIFNhbml0aXplIGZvciB4LWJyb3dzZXIgY29uc2lzdGVuY3k6XG4gIC8vIFN0cmlwIHF1b3RlcyBiZWNhdXNlIGJyb3dzZXJzIGFyZW4ndCBjb25zaXN0ZW50IHdpdGggaG93IHRoZXkncmVcbiAgLy8gYXBwbGllZDsgT3BlcmEgYWx3YXlzIGVuY2xvc2VzLCBGaXJlZm94IHNvbWV0aW1lcywgYW5kIElFIG5ldmVyLlxuICByZXR1cm4gZ29vZy5zdHJpbmcuc3RyaXBRdW90ZXMoZm9udCwgJ1wiXFwnJyk7XG59O1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHVzZWQgZm9yIGdldExlbmd0aFVuaXRzLlxuICogQHR5cGUge1JlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3R5bGUubGVuZ3RoVW5pdFJlZ2V4XyA9IC9bXlxcZF0rJC87XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB1bml0cyB1c2VkIGZvciBhIENTUyBsZW5ndGggbWVhc3VyZW1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgIEEgQ1NTIGxlbmd0aCBxdWFudGl0eS5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSB1bml0cyBvZiBtZWFzdXJlbWVudC5cbiAqL1xuZ29vZy5zdHlsZS5nZXRMZW5ndGhVbml0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciB1bml0cyA9IHZhbHVlLm1hdGNoKGdvb2cuc3R5bGUubGVuZ3RoVW5pdFJlZ2V4Xyk7XG4gIHJldHVybiB1bml0cyAmJiB1bml0c1swXSB8fCBudWxsO1xufTtcblxuXG4vKipcbiAqIE1hcCBvZiBhYnNvbHV0ZSBDU1MgbGVuZ3RoIHVuaXRzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHlsZS5BQlNPTFVURV9DU1NfTEVOR1RIX1VOSVRTXyA9IHtcbiAgJ2NtJyA6IDEsXG4gICdpbicgOiAxLFxuICAnbW0nIDogMSxcbiAgJ3BjJyA6IDEsXG4gICdwdCcgOiAxXG59O1xuXG5cbi8qKlxuICogTWFwIG9mIHJlbGF0aXZlIENTUyBsZW5ndGggdW5pdHMgdGhhdCBjYW4gYmUgYWNjdXJhdGVseSBjb252ZXJ0ZWQgdG8gcHhcbiAqIGZvbnQtc2l6ZSB2YWx1ZXMgdXNpbmcgZ2V0SWVQaXhlbFZhbHVlXy4gT25seSB1bml0cyB0aGF0IGFyZSBkZWZpbmVkIGluXG4gKiByZWxhdGlvbiB0byBhIGZvbnQgc2l6ZSBhcmUgY29udmVydGlibGUgKCUsIHNtYWxsLCBldGMuIGFyZSBub3QpLlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3R5bGUuQ09OVkVSVElCTEVfUkVMQVRJVkVfQ1NTX1VOSVRTXyA9IHtcbiAgJ2VtJyA6IDEsXG4gICdleCcgOiAxXG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZm9udCBzaXplLCBpbiBwaXhlbHMsIG9mIHRleHQgaW4gYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgIFRoZSBlbGVtZW50IHdob3NlIGZvbnQgc2l6ZSBpcyByZXR1cm5lZC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGZvbnQgc2l6ZSAoaW4gcGl4ZWxzKS5cbiAqL1xuZ29vZy5zdHlsZS5nZXRGb250U2l6ZSA9IGZ1bmN0aW9uKGVsKSB7XG4gIHZhciBmb250U2l6ZSA9IGdvb2cuc3R5bGUuZ2V0U3R5bGVfKGVsLCAnZm9udFNpemUnKTtcbiAgdmFyIHNpemVVbml0cyA9IGdvb2cuc3R5bGUuZ2V0TGVuZ3RoVW5pdHMoZm9udFNpemUpO1xuICBpZiAoZm9udFNpemUgJiYgJ3B4JyA9PSBzaXplVW5pdHMpIHtcbiAgICAvLyBOT1RFKHVzZXIpOiBUaGlzIGNvdWxkIGJlIHBhcnNlRmxvYXQgaW5zdGVhZCwgYnV0IElFIGRvZXNuJ3QgcmV0dXJuXG4gICAgLy8gZGVjaW1hbCBmcmFjdGlvbnMgaW4gZ2V0U3R5bGVfIGFuZCBGaXJlZm94IHJlcG9ydHMgdGhlIGZyYWN0aW9ucywgYnV0XG4gICAgLy8gaWdub3JlcyB0aGVtIHdoZW4gcmVuZGVyaW5nLiBJbnRlcmVzdGluZ2x5IGVub3VnaCwgd2hlbiB3ZSBmb3JjZSB0aGVcbiAgICAvLyBpc3N1ZSBhbmQgc2l6ZSBzb21ldGhpbmcgdG8gZS5nLiwgNTAlIG9mIDI1cHgsIHRoZSBicm93c2VycyByb3VuZCBpblxuICAgIC8vIG9wcG9zaXRlIGRpcmVjdGlvbnMgd2l0aCBGaXJlZm94IHJlcG9ydGluZyAxMnB4IGFuZCBJRSAxM3B4LiBJIHB1bnQuXG4gICAgcmV0dXJuIHBhcnNlSW50KGZvbnRTaXplLCAxMCk7XG4gIH1cblxuICAvLyBJbiBJRSwgd2UgY2FuIGNvbnZlcnQgYWJzb2x1dGUgbGVuZ3RoIHVuaXRzIHRvIGEgcHggdmFsdWUgdXNpbmdcbiAgLy8gZ29vZy5zdHlsZS5nZXRJZVBpeGVsVmFsdWVfLiBVbml0cyBkZWZpbmVkIGluIHJlbGF0aW9uIHRvIGEgZm9udCBzaXplXG4gIC8vIChlbSwgZXgpIGFyZSBhcHBsaWVkIHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50J3MgcGFyZW50Tm9kZSBhbmQgY2FuIGFsc29cbiAgLy8gYmUgY29udmVydGVkLlxuICBpZiAoZ29vZy51c2VyQWdlbnQuSUUpIHtcbiAgICBpZiAoc2l6ZVVuaXRzIGluIGdvb2cuc3R5bGUuQUJTT0xVVEVfQ1NTX0xFTkdUSF9VTklUU18pIHtcbiAgICAgIHJldHVybiBnb29nLnN0eWxlLmdldEllUGl4ZWxWYWx1ZV8oZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwaXhlbExlZnQnKTtcbiAgICB9IGVsc2UgaWYgKGVsLnBhcmVudE5vZGUgJiZcbiAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUubm9kZVR5cGUgPT0gZ29vZy5kb20uTm9kZVR5cGUuRUxFTUVOVCAmJlxuICAgICAgICAgICAgICAgc2l6ZVVuaXRzIGluIGdvb2cuc3R5bGUuQ09OVkVSVElCTEVfUkVMQVRJVkVfQ1NTX1VOSVRTXykge1xuICAgICAgLy8gQ2hlY2sgdGhlIHBhcmVudCBzaXplIC0gaWYgaXQgaXMgdGhlIHNhbWUgaXQgbWVhbnMgdGhlIHJlbGF0aXZlIHNpemVcbiAgICAgIC8vIHZhbHVlIGlzIGluaGVyaXRlZCBhbmQgd2UgdGhlcmVmb3JlIGRvbid0IHdhbnQgdG8gY291bnQgaXQgdHdpY2UuICBJZlxuICAgICAgLy8gaXQgaXMgZGlmZmVyZW50LCB0aGlzIGVsZW1lbnQgZWl0aGVyIGhhcyBleHBsaWNpdCBzdHlsZSBvciBoYXMgYSBDU1NcbiAgICAgIC8vIHJ1bGUgYXBwbHlpbmcgdG8gaXQuXG4gICAgICB2YXIgcGFyZW50RWxlbWVudCA9IC8qKiBAdHlwZSB7IUVsZW1lbnR9ICovIChlbC5wYXJlbnROb2RlKTtcbiAgICAgIHZhciBwYXJlbnRTaXplID0gZ29vZy5zdHlsZS5nZXRTdHlsZV8ocGFyZW50RWxlbWVudCwgJ2ZvbnRTaXplJyk7XG4gICAgICByZXR1cm4gZ29vZy5zdHlsZS5nZXRJZVBpeGVsVmFsdWVfKHBhcmVudEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplID09IHBhcmVudFNpemUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzFlbScgOiBmb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGl4ZWxMZWZ0Jyk7XG4gICAgfVxuICB9XG5cbiAgLy8gU29tZXRpbWVzIHdlIGNhbid0IGNsZWFubHkgZmluZCB0aGUgZm9udCBzaXplIChzb21lIHVuaXRzIHJlbGF0aXZlIHRvIGFcbiAgLy8gbm9kZSdzIHBhcmVudCdzIGZvbnQgc2l6ZSBhcmUgZGlmZmljdWx0OiAlLCBzbWFsbGVyIGV0IGFsKSwgc28gd2UgY3JlYXRlXG4gIC8vIGFuIGludmlzaWJsZSwgYWJzb2x1dGVseS1wb3NpdGlvbmVkIHNwYW4gc2l6ZWQgdG8gYmUgdGhlIGhlaWdodCBvZiBhbiAnTSdcbiAgLy8gcmVuZGVyZWQgaW4gaXRzIHBhcmVudCdzIChpLmUuLCBvdXIgdGFyZ2V0IGVsZW1lbnQncykgZm9udCBzaXplLiBUaGlzIGlzXG4gIC8vIHRoZSBkZWZpbml0aW9uIG9mIENTUydzIGZvbnQgc2l6ZSBhdHRyaWJ1dGUuXG4gIHZhciBzaXplRWxlbWVudCA9IGdvb2cuZG9tLmNyZWF0ZURvbShcbiAgICAgIGdvb2cuZG9tLlRhZ05hbWUuU1BBTixcbiAgICAgIHsnc3R5bGUnOiAndmlzaWJpbGl0eTpoaWRkZW47cG9zaXRpb246YWJzb2x1dGU7JyArXG4gICAgICAgICAgICAnbGluZS1oZWlnaHQ6MDtwYWRkaW5nOjA7bWFyZ2luOjA7Ym9yZGVyOjA7aGVpZ2h0OjFlbTsnfSk7XG4gIGdvb2cuZG9tLmFwcGVuZENoaWxkKGVsLCBzaXplRWxlbWVudCk7XG4gIGZvbnRTaXplID0gc2l6ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICBnb29nLmRvbS5yZW1vdmVOb2RlKHNpemVFbGVtZW50KTtcblxuICByZXR1cm4gZm9udFNpemU7XG59O1xuXG5cbi8qKlxuICogUGFyc2VzIGEgc3R5bGUgYXR0cmlidXRlIHZhbHVlLiAgQ29udmVydHMgQ1NTIHByb3BlcnR5IG5hbWVzIHRvIGNhbWVsIGNhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHN0eWxlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqIEByZXR1cm4geyFPYmplY3R9IE1hcCBvZiBDU1MgcHJvcGVydGllcyB0byBzdHJpbmcgdmFsdWVzLlxuICovXG5nb29nLnN0eWxlLnBhcnNlU3R5bGVBdHRyaWJ1dGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGdvb2cuYXJyYXkuZm9yRWFjaCh2YWx1ZS5zcGxpdCgvXFxzKjtcXHMqLyksIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICB2YXIga2V5VmFsdWUgPSBwYWlyLm1hdGNoKC9cXHMqKFtcXHctXSspXFxzKlxcOiguKykvKTtcbiAgICBpZiAoa2V5VmFsdWUpIHtcbiAgICAgIHZhciBzdHlsZU5hbWUgPSBrZXlWYWx1ZVsxXTtcbiAgICAgIHZhciBzdHlsZVZhbHVlID0gZ29vZy5zdHJpbmcudHJpbShrZXlWYWx1ZVsyXSk7XG4gICAgICByZXN1bHRbZ29vZy5zdHJpbmcudG9DYW1lbENhc2Uoc3R5bGVOYW1lLnRvTG93ZXJDYXNlKCkpXSA9IHN0eWxlVmFsdWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqXG4gKiBSZXZlcnNlIG9mIHBhcnNlU3R5bGVBdHRyaWJ1dGU7IHRoYXQgaXMsIHRha2VzIGEgc3R5bGUgb2JqZWN0IGFuZCByZXR1cm5zIHRoZVxuICogY29ycmVzcG9uZGluZyBhdHRyaWJ1dGUgdmFsdWUuICBDb252ZXJ0cyBjYW1lbCBjYXNlIHByb3BlcnR5IG5hbWVzIHRvIHByb3BlclxuICogQ1NTIHNlbGVjdG9yIG5hbWVzLlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBNYXAgb2YgQ1NTIHByb3BlcnRpZXMgdG8gdmFsdWVzLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3R5bGUgYXR0cmlidXRlIHZhbHVlLlxuICovXG5nb29nLnN0eWxlLnRvU3R5bGVBdHRyaWJ1dGUgPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIGJ1ZmZlciA9IFtdO1xuICBnb29nLm9iamVjdC5mb3JFYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIGJ1ZmZlci5wdXNoKGdvb2cuc3RyaW5nLnRvU2VsZWN0b3JDYXNlKGtleSksICc6JywgdmFsdWUsICc7Jyk7XG4gIH0pO1xuICByZXR1cm4gYnVmZmVyLmpvaW4oJycpO1xufTtcblxuXG4vKipcbiAqIFNldHMgQ1NTIGZsb2F0IHByb3BlcnR5IG9uIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsIFRoZSBlbGVtZW50IHRvIHNldCBmbG9hdCBwcm9wZXJ0eSBvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgb2YgZmxvYXQgQ1NTIHByb3BlcnR5IHRvIHNldCBvbiB0aGlzIGVsZW1lbnQuXG4gKi9cbmdvb2cuc3R5bGUuc2V0RmxvYXQgPSBmdW5jdGlvbihlbCwgdmFsdWUpIHtcbiAgZWwuc3R5bGVbZ29vZy51c2VyQWdlbnQuSUUgPyAnc3R5bGVGbG9hdCcgOiAnY3NzRmxvYXQnXSA9IHZhbHVlO1xufTtcblxuXG4vKipcbiAqIEdldHMgdmFsdWUgb2YgZXhwbGljaXRseS1zZXQgZmxvYXQgQ1NTIHByb3BlcnR5IG9uIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsIFRoZSBlbGVtZW50IHRvIGdldCBmbG9hdCBwcm9wZXJ0eSBvZi5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHZhbHVlIG9mIGV4cGxpY2l0bHktc2V0IGZsb2F0IENTUyBwcm9wZXJ0eSBvbiB0aGlzXG4gKiAgICAgZWxlbWVudC5cbiAqL1xuZ29vZy5zdHlsZS5nZXRGbG9hdCA9IGZ1bmN0aW9uKGVsKSB7XG4gIHJldHVybiBlbC5zdHlsZVtnb29nLnVzZXJBZ2VudC5JRSA/ICdzdHlsZUZsb2F0JyA6ICdjc3NGbG9hdCddIHx8ICcnO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbCBiYXIgd2lkdGggKHJlcHJlc2VudHMgdGhlIHdpZHRoIG9mIGJvdGggaG9yaXpvbnRhbFxuICogYW5kIHZlcnRpY2FsIHNjcm9sbCkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfY2xhc3NOYW1lIEFuIG9wdGlvbmFsIGNsYXNzIG5hbWUgKG9yIG5hbWVzKSB0byBhcHBseVxuICogICAgIHRvIHRoZSBpbnZpc2libGUgZGl2IGNyZWF0ZWQgdG8gbWVhc3VyZSB0aGUgc2Nyb2xsYmFyLiBUaGlzIGlzIG5lY2Vzc2FyeVxuICogICAgIGlmIHNvbWUgc2Nyb2xsYmFycyBhcmUgc3R5bGVkIGRpZmZlcmVudGx5IHRoYW4gb3RoZXJzLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgc2Nyb2xsIGJhciB3aWR0aCBpbiBweC5cbiAqL1xuZ29vZy5zdHlsZS5nZXRTY3JvbGxiYXJXaWR0aCA9IGZ1bmN0aW9uKG9wdF9jbGFzc05hbWUpIHtcbiAgLy8gQWRkIHR3byBoaWRkZW4gZGl2cy4gIFRoZSBjaGlsZCBkaXYgaXMgbGFyZ2VyIHRoYW4gdGhlIHBhcmVudCBhbmRcbiAgLy8gZm9yY2VzIHNjcm9sbGJhcnMgdG8gYXBwZWFyIG9uIGl0LlxuICAvLyBVc2luZyBvdmVyZmxvdzpzY3JvbGwgZG9lcyBub3Qgd29yayBjb25zaXN0ZW50bHkgd2l0aCBzY3JvbGxiYXJzIHRoYXRcbiAgLy8gYXJlIHN0eWxlZCB3aXRoIDo6LXdlYmtpdC1zY3JvbGxiYXIuXG4gIHZhciBvdXRlckRpdiA9IGdvb2cuZG9tLmNyZWF0ZUVsZW1lbnQoZ29vZy5kb20uVGFnTmFtZS5ESVYpO1xuICBpZiAob3B0X2NsYXNzTmFtZSkge1xuICAgIG91dGVyRGl2LmNsYXNzTmFtZSA9IG9wdF9jbGFzc05hbWU7XG4gIH1cbiAgb3V0ZXJEaXYuc3R5bGUuY3NzVGV4dCA9ICdvdmVyZmxvdzphdXRvOycgK1xuICAgICAgJ3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3dpZHRoOjEwMHB4O2hlaWdodDoxMDBweCc7XG4gIHZhciBpbm5lckRpdiA9IGdvb2cuZG9tLmNyZWF0ZUVsZW1lbnQoZ29vZy5kb20uVGFnTmFtZS5ESVYpO1xuICBnb29nLnN0eWxlLnNldFNpemUoaW5uZXJEaXYsICcyMDBweCcsICcyMDBweCcpO1xuICBvdXRlckRpdi5hcHBlbmRDaGlsZChpbm5lckRpdik7XG4gIGdvb2cuZG9tLmFwcGVuZENoaWxkKGdvb2cuZG9tLmdldERvY3VtZW50KCkuYm9keSwgb3V0ZXJEaXYpO1xuICB2YXIgd2lkdGggPSBvdXRlckRpdi5vZmZzZXRXaWR0aCAtIG91dGVyRGl2LmNsaWVudFdpZHRoO1xuICBnb29nLmRvbS5yZW1vdmVOb2RlKG91dGVyRGl2KTtcbiAgcmV0dXJuIHdpZHRoO1xufTtcblxuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBleHRyYWN0IHggYW5kIHkgdHJhbnNsYXRpb24gY29tcG9uZW50cyBmcm9tIGEgQ1NTXG4gKiB0cmFuc2Zvcm0gTWF0cml4IHJlcHJlc2VudGF0aW9uLlxuICpcbiAqIEB0eXBlIHshUmVnRXhwfVxuICogQGNvbnN0XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0eWxlLk1BVFJJWF9UUkFOU0xBVElPTl9SRUdFWF8gPVxuICAgIG5ldyBSZWdFeHAoJ21hdHJpeFxcXFwoWzAtOVxcXFwuXFxcXC1dKywgWzAtOVxcXFwuXFxcXC1dKywgJyArXG4gICAgICAgICAgICAgICAnWzAtOVxcXFwuXFxcXC1dKywgWzAtOVxcXFwuXFxcXC1dKywgJyArXG4gICAgICAgICAgICAgICAnKFswLTlcXFxcLlxcXFwtXSspcD94PywgKFswLTlcXFxcLlxcXFwtXSspcD94P1xcXFwpJyk7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB4LHkgdHJhbnNsYXRpb24gY29tcG9uZW50IG9mIGFueSBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkIHRvIHRoZVxuICogZWxlbWVudCwgaW4gcGl4ZWxzLlxuICpcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSB0cmFuc2xhdGlvbiBvZi5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguQ29vcmRpbmF0ZX0gVGhlIENTUyB0cmFuc2xhdGlvbiBvZiB0aGUgZWxlbWVudCBpbiBweC5cbiAqL1xuZ29vZy5zdHlsZS5nZXRDc3NUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgdmFyIHRyYW5zZm9ybSA9IGdvb2cuc3R5bGUuZ2V0Q29tcHV0ZWRUcmFuc2Zvcm0oZWxlbWVudCk7XG4gIGlmICghdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIG5ldyBnb29nLm1hdGguQ29vcmRpbmF0ZSgwLCAwKTtcbiAgfVxuICB2YXIgbWF0Y2hlcyA9IHRyYW5zZm9ybS5tYXRjaChnb29nLnN0eWxlLk1BVFJJWF9UUkFOU0xBVElPTl9SRUdFWF8pO1xuICBpZiAoIW1hdGNoZXMpIHtcbiAgICByZXR1cm4gbmV3IGdvb2cubWF0aC5Db29yZGluYXRlKDAsIDApO1xuICB9XG4gIHJldHVybiBuZXcgZ29vZy5tYXRoLkNvb3JkaW5hdGUocGFyc2VGbG9hdChtYXRjaGVzWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KG1hdGNoZXNbMl0pKTtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAwNSBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IENsYXNzIHRvIGNyZWF0ZSBvYmplY3RzIHdoaWNoIHdhbnQgdG8gaGFuZGxlIG11bHRpcGxlIGV2ZW50c1xuICogYW5kIGhhdmUgdGhlaXIgbGlzdGVuZXJzIGVhc2lseSBjbGVhbmVkIHVwIHZpYSBhIGRpc3Bvc2UgbWV0aG9kLlxuICpcbiAqIEV4YW1wbGU6XG4gKiA8cHJlPlxuICogZnVuY3Rpb24gU29tZXRoaW5nKCkge1xuICogICBTb21ldGhpbmcuYmFzZSh0aGlzKTtcbiAqXG4gKiAgIC4uLiBzZXQgdXAgb2JqZWN0IC4uLlxuICpcbiAqICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyc1xuICogICB0aGlzLmxpc3Rlbih0aGlzLnN0YXJFbCwgZ29vZy5ldmVudHMuRXZlbnRUeXBlLkNMSUNLLCB0aGlzLmhhbmRsZVN0YXIpO1xuICogICB0aGlzLmxpc3Rlbih0aGlzLmhlYWRlckVsLCBnb29nLmV2ZW50cy5FdmVudFR5cGUuQ0xJQ0ssIHRoaXMuZXhwYW5kKTtcbiAqICAgdGhpcy5saXN0ZW4odGhpcy5jb2xsYXBzZUVsLCBnb29nLmV2ZW50cy5FdmVudFR5cGUuQ0xJQ0ssIHRoaXMuY29sbGFwc2UpO1xuICogICB0aGlzLmxpc3Rlbih0aGlzLmluZm9FbCwgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFT1ZFUiwgdGhpcy5zaG93SG92ZXIpO1xuICogICB0aGlzLmxpc3Rlbih0aGlzLmluZm9FbCwgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFT1VULCB0aGlzLmhpZGVIb3Zlcik7XG4gKiB9XG4gKiBnb29nLmluaGVyaXRzKFNvbWV0aGluZywgZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyKTtcbiAqXG4gKiBTb21ldGhpbmcucHJvdG90eXBlLmRpc3Bvc2VJbnRlcm5hbCA9IGZ1bmN0aW9uKCkge1xuICogICBTb21ldGhpbmcuYmFzZSh0aGlzLCAnZGlzcG9zZUludGVybmFsJyk7XG4gKiAgIGdvb2cuZG9tLnJlbW92ZU5vZGUodGhpcy5jb250YWluZXIpO1xuICogfTtcbiAqXG4gKlxuICogLy8gVGhlbiBlbHNld2hlcmU6XG4gKlxuICogdmFyIGFjdGl2ZVNvbWV0aGluZyA9IG51bGw7XG4gKiBmdW5jdGlvbiBvcGVuU29tZXRoaW5nKCkge1xuICogICBhY3RpdmVTb21ldGhpbmcgPSBuZXcgU29tZXRoaW5nKCk7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gY2xvc2VTb21ldGhpbmcoKSB7XG4gKiAgIGlmIChhY3RpdmVTb21ldGhpbmcpIHtcbiAqICAgICBhY3RpdmVTb21ldGhpbmcuZGlzcG9zZSgpOyAgLy8gUmVtb3ZlIGV2ZW50IGxpc3RlbmVyc1xuICogICAgIGFjdGl2ZVNvbWV0aGluZyA9IG51bGw7XG4gKiAgIH1cbiAqIH1cbiAqIDwvcHJlPlxuICpcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkV2ZW50SGFuZGxlcicpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuRGlzcG9zYWJsZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm9iamVjdCcpO1xuXG5nb29nLmZvcndhcmREZWNsYXJlKCdnb29nLmV2ZW50cy5FdmVudFdyYXBwZXInKTtcblxuXG5cbi8qKlxuICogU3VwZXIgY2xhc3MgZm9yIG9iamVjdHMgdGhhdCB3YW50IHRvIGVhc2lseSBtYW5hZ2UgYSBudW1iZXIgb2YgZXZlbnRcbiAqIGxpc3RlbmVycy4gIEl0IGFsbG93cyBhIHNob3J0IGN1dCB0byBsaXN0ZW4gYW5kIGFsc28gcHJvdmlkZXMgYSBxdWljayB3YXlcbiAqIHRvIHJlbW92ZSBhbGwgZXZlbnRzIGxpc3RlbmVycyBiZWxvbmdpbmcgdG8gdGhpcyBvYmplY3QuXG4gKiBAcGFyYW0ge1NDT1BFPX0gb3B0X3Njb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lcnMuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtnb29nLkRpc3Bvc2FibGV9XG4gKiBAdGVtcGxhdGUgU0NPUEVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyID0gZnVuY3Rpb24ob3B0X3Njb3BlKSB7XG4gIGdvb2cuRGlzcG9zYWJsZS5jYWxsKHRoaXMpO1xuICAvLyBUT0RPKG1rbmljaGVsKTogUmVuYW1lIHRoaXMgdG8gdGhpcy5zY29wZV8gYW5kIGZpeCB0aGUgY2xhc3NlcyBpbiBnb29nbGUzXG4gIC8vIHRoYXQgYWNjZXNzIHRoaXMgcHJpdmF0ZSB2YXJpYWJsZS4gOihcbiAgdGhpcy5oYW5kbGVyXyA9IG9wdF9zY29wZTtcblxuICAvKipcbiAgICogS2V5cyBmb3IgZXZlbnRzIHRoYXQgYXJlIGJlaW5nIGxpc3RlbmVkIHRvLlxuICAgKiBAdHlwZSB7IU9iamVjdDwhZ29vZy5ldmVudHMuS2V5Pn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMua2V5c18gPSB7fTtcbn07XG5nb29nLmluaGVyaXRzKGdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlciwgZ29vZy5EaXNwb3NhYmxlKTtcblxuXG4vKipcbiAqIFV0aWxpdHkgYXJyYXkgdXNlZCB0byB1bmlmeSB0aGUgY2FzZXMgb2YgbGlzdGVuaW5nIGZvciBhbiBhcnJheSBvZiB0eXBlc1xuICogYW5kIGxpc3RlbmluZyBmb3IgYSBzaW5nbGUgZXZlbnQsIHdpdGhvdXQgdXNpbmcgcmVjdXJzaW9uIG9yIGFsbG9jYXRpbmdcbiAqIGFuIGFycmF5IGVhY2ggdGltZS5cbiAqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn1cbiAqIEBjb25zdFxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnR5cGVBcnJheV8gPSBbXTtcblxuXG4vKipcbiAqIExpc3RlbiB0byBhbiBldmVudCBvbiBhIExpc3RlbmFibGUuICBJZiB0aGUgZnVuY3Rpb24gaXMgb21pdHRlZCB0aGVuIHRoZVxuICogRXZlbnRIYW5kbGVyJ3MgaGFuZGxlRXZlbnQgbWV0aG9kIHdpbGwgYmUgdXNlZC5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZVR5cGV9IHNyYyBFdmVudCBzb3VyY2UuXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fFxuICogICAgICFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPnwhQXJyYXk8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+Pn1cbiAqICAgICB0eXBlIEV2ZW50IHR5cGUgdG8gbGlzdGVuIGZvciBvciBhcnJheSBvZiBldmVudCB0eXBlcy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTQ09QRSwgRVZFTlRPQkopOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGw9fVxuICogICAgIG9wdF9mbiBPcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSB1c2VkIGFzIHRoZSBsaXN0ZW5lciBvciBhbiBvYmplY3RcbiAqICAgICB3aXRoIGhhbmRsZUV2ZW50IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NhcHR1cmUgT3B0aW9uYWwgd2hldGhlciB0byB1c2UgY2FwdHVyZSBwaGFzZS5cbiAqIEByZXR1cm4geyFnb29nLmV2ZW50cy5FdmVudEhhbmRsZXI8U0NPUEU+fSBUaGlzIG9iamVjdCwgYWxsb3dpbmcgZm9yXG4gKiAgICAgY2hhaW5pbmcgb2YgY2FsbHMuXG4gKiBAdGVtcGxhdGUgRVZFTlRPQkpcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbihcbiAgICBzcmMsIHR5cGUsIG9wdF9mbiwgb3B0X2NhcHR1cmUpIHtcbiAgcmV0dXJuIHRoaXMubGlzdGVuXyhzcmMsIHR5cGUsIG9wdF9mbiwgb3B0X2NhcHR1cmUpO1xufTtcblxuXG4vKipcbiAqIExpc3RlbiB0byBhbiBldmVudCBvbiBhIExpc3RlbmFibGUuICBJZiB0aGUgZnVuY3Rpb24gaXMgb21pdHRlZCB0aGVuIHRoZVxuICogRXZlbnRIYW5kbGVyJ3MgaGFuZGxlRXZlbnQgbWV0aG9kIHdpbGwgYmUgdXNlZC5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZVR5cGV9IHNyYyBFdmVudCBzb3VyY2UuXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fFxuICogICAgICFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPnwhQXJyYXk8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+Pn1cbiAqICAgICB0eXBlIEV2ZW50IHR5cGUgdG8gbGlzdGVuIGZvciBvciBhcnJheSBvZiBldmVudCB0eXBlcy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpULCBFVkVOVE9CSik6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24odGhpczpULCA/KTo/fXxcbiAqICAgICBudWxsfHVuZGVmaW5lZH0gZm4gT3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgdXNlZCBhcyB0aGVcbiAqICAgICBsaXN0ZW5lciBvciBhbiBvYmplY3Qgd2l0aCBoYW5kbGVFdmVudCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGNhcHR1cmUgT3B0aW9uYWwgd2hldGhlciB0byB1c2UgY2FwdHVyZSBwaGFzZS5cbiAqIEBwYXJhbSB7VH0gc2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7IWdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlcjxTQ09QRT59IFRoaXMgb2JqZWN0LCBhbGxvd2luZyBmb3JcbiAqICAgICBjaGFpbmluZyBvZiBjYWxscy5cbiAqIEB0ZW1wbGF0ZSBULEVWRU5UT0JKXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUubGlzdGVuV2l0aFNjb3BlID0gZnVuY3Rpb24oXG4gICAgc3JjLCB0eXBlLCBmbiwgY2FwdHVyZSwgc2NvcGUpIHtcbiAgLy8gVE9ETyhta25pY2hlbCk6IERlcHJlY2F0ZSB0aGlzIGZ1bmN0aW9uLlxuICByZXR1cm4gdGhpcy5saXN0ZW5fKHNyYywgdHlwZSwgZm4sIGNhcHR1cmUsIHNjb3BlKTtcbn07XG5cblxuLyoqXG4gKiBMaXN0ZW4gdG8gYW4gZXZlbnQgb24gYSBMaXN0ZW5hYmxlLiAgSWYgdGhlIGZ1bmN0aW9uIGlzIG9taXR0ZWQgdGhlbiB0aGVcbiAqIEV2ZW50SGFuZGxlcidzIGhhbmRsZUV2ZW50IG1ldGhvZCB3aWxsIGJlIHVzZWQuXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkxpc3RlbmFibGVUeXBlfSBzcmMgRXZlbnQgc291cmNlLlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8c3RyaW5nPnxcbiAqICAgICAhZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj58IUFycmF5PCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPj59XG4gKiAgICAgdHlwZSBFdmVudCB0eXBlIHRvIGxpc3RlbiBmb3Igb3IgYXJyYXkgb2YgZXZlbnQgdHlwZXMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEVWRU5UT0JKKTo/fHtoYW5kbGVFdmVudDpmdW5jdGlvbig/KTo/fXxudWxsPX0gb3B0X2ZuXG4gKiAgICAgT3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgdXNlZCBhcyB0aGUgbGlzdGVuZXIgb3IgYW4gb2JqZWN0IHdpdGhcbiAqICAgICBoYW5kbGVFdmVudCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9jYXB0dXJlIE9wdGlvbmFsIHdoZXRoZXIgdG8gdXNlIGNhcHR1cmUgcGhhc2UuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9zY29wZSBPYmplY3QgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGUgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHshZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyPFNDT1BFPn0gVGhpcyBvYmplY3QsIGFsbG93aW5nIGZvclxuICogICAgIGNoYWluaW5nIG9mIGNhbGxzLlxuICogQHRlbXBsYXRlIEVWRU5UT0JKXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5FdmVudEhhbmRsZXIucHJvdG90eXBlLmxpc3Rlbl8gPSBmdW5jdGlvbihzcmMsIHR5cGUsIG9wdF9mbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdF9jYXB0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0X3Njb3BlKSB7XG4gIGlmICghZ29vZy5pc0FycmF5KHR5cGUpKSB7XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIGdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci50eXBlQXJyYXlfWzBdID0gdHlwZS50b1N0cmluZygpO1xuICAgIH1cbiAgICB0eXBlID0gZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnR5cGVBcnJheV87XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGxpc3RlbmVyT2JqID0gZ29vZy5ldmVudHMubGlzdGVuKFxuICAgICAgICBzcmMsIHR5cGVbaV0sIG9wdF9mbiB8fCB0aGlzLmhhbmRsZUV2ZW50LFxuICAgICAgICBvcHRfY2FwdHVyZSB8fCBmYWxzZSxcbiAgICAgICAgb3B0X3Njb3BlIHx8IHRoaXMuaGFuZGxlcl8gfHwgdGhpcyk7XG5cbiAgICBpZiAoIWxpc3RlbmVyT2JqKSB7XG4gICAgICAvLyBXaGVuIGdvb2cuZXZlbnRzLmxpc3RlbiBydW4gb24gT0ZGX0FORF9GQUlMIG9yIE9GRl9BTkRfU0lMRU5UXG4gICAgICAvLyAoZ29vZy5ldmVudHMuQ2FwdHVyZVNpbXVsYXRpb25Nb2RlKSBpbiBJRTgtLCBpdCB3aWxsIHJldHVybiBudWxsXG4gICAgICAvLyB2YWx1ZS5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBrZXkgPSBsaXN0ZW5lck9iai5rZXk7XG4gICAgdGhpcy5rZXlzX1trZXldID0gbGlzdGVuZXJPYmo7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBMaXN0ZW4gdG8gYW4gZXZlbnQgb24gYSBMaXN0ZW5hYmxlLiAgSWYgdGhlIGZ1bmN0aW9uIGlzIG9taXR0ZWQsIHRoZW4gdGhlXG4gKiBFdmVudEhhbmRsZXIncyBoYW5kbGVFdmVudCBtZXRob2Qgd2lsbCBiZSB1c2VkLiBBZnRlciB0aGUgZXZlbnQgaGFzIGZpcmVkIHRoZVxuICogZXZlbnQgbGlzdGVuZXIgaXMgcmVtb3ZlZCBmcm9tIHRoZSB0YXJnZXQuIElmIGFuIGFycmF5IG9mIGV2ZW50IHR5cGVzIGlzXG4gKiBwcm92aWRlZCwgZWFjaCBldmVudCB0eXBlIHdpbGwgYmUgbGlzdGVuZWQgdG8gb25jZS5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZVR5cGV9IHNyYyBFdmVudCBzb3VyY2UuXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fFxuICogICAgICFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPnwhQXJyYXk8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+Pn1cbiAqICAgICB0eXBlIEV2ZW50IHR5cGUgdG8gbGlzdGVuIGZvciBvciBhcnJheSBvZiBldmVudCB0eXBlcy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTQ09QRSwgRVZFTlRPQkopOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGw9fSBvcHRfZm5cbiAqICAgIE9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIHVzZWQgYXMgdGhlIGxpc3RlbmVyIG9yIGFuIG9iamVjdCB3aXRoXG4gKiAgICBoYW5kbGVFdmVudCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9jYXB0dXJlIE9wdGlvbmFsIHdoZXRoZXIgdG8gdXNlIGNhcHR1cmUgcGhhc2UuXG4gKiBAcmV0dXJuIHshZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyPFNDT1BFPn0gVGhpcyBvYmplY3QsIGFsbG93aW5nIGZvclxuICogICAgIGNoYWluaW5nIG9mIGNhbGxzLlxuICogQHRlbXBsYXRlIEVWRU5UT0JKXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUubGlzdGVuT25jZSA9IGZ1bmN0aW9uKFxuICAgIHNyYywgdHlwZSwgb3B0X2ZuLCBvcHRfY2FwdHVyZSkge1xuICByZXR1cm4gdGhpcy5saXN0ZW5PbmNlXyhzcmMsIHR5cGUsIG9wdF9mbiwgb3B0X2NhcHR1cmUpO1xufTtcblxuXG4vKipcbiAqIExpc3RlbiB0byBhbiBldmVudCBvbiBhIExpc3RlbmFibGUuICBJZiB0aGUgZnVuY3Rpb24gaXMgb21pdHRlZCwgdGhlbiB0aGVcbiAqIEV2ZW50SGFuZGxlcidzIGhhbmRsZUV2ZW50IG1ldGhvZCB3aWxsIGJlIHVzZWQuIEFmdGVyIHRoZSBldmVudCBoYXMgZmlyZWQgdGhlXG4gKiBldmVudCBsaXN0ZW5lciBpcyByZW1vdmVkIGZyb20gdGhlIHRhcmdldC4gSWYgYW4gYXJyYXkgb2YgZXZlbnQgdHlwZXMgaXNcbiAqIHByb3ZpZGVkLCBlYWNoIGV2ZW50IHR5cGUgd2lsbCBiZSBsaXN0ZW5lZCB0byBvbmNlLlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5MaXN0ZW5hYmxlVHlwZX0gc3JjIEV2ZW50IHNvdXJjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PHN0cmluZz58XG4gKiAgICAgIWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+fCFBcnJheTwhZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj4+fVxuICogICAgIHR5cGUgRXZlbnQgdHlwZSB0byBsaXN0ZW4gZm9yIG9yIGFycmF5IG9mIGV2ZW50IHR5cGVzLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsIEVWRU5UT0JKKTo/fHtoYW5kbGVFdmVudDpmdW5jdGlvbih0aGlzOlQsID8pOj99fFxuICogICAgIG51bGx8dW5kZWZpbmVkfSBmbiBPcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSB1c2VkIGFzIHRoZVxuICogICAgIGxpc3RlbmVyIG9yIGFuIG9iamVjdCB3aXRoIGhhbmRsZUV2ZW50IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gY2FwdHVyZSBPcHRpb25hbCB3aGV0aGVyIHRvIHVzZSBjYXB0dXJlIHBoYXNlLlxuICogQHBhcmFtIHtUfSBzY29wZSBPYmplY3QgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGUgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHshZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyPFNDT1BFPn0gVGhpcyBvYmplY3QsIGFsbG93aW5nIGZvclxuICogICAgIGNoYWluaW5nIG9mIGNhbGxzLlxuICogQHRlbXBsYXRlIFQsRVZFTlRPQkpcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5saXN0ZW5PbmNlV2l0aFNjb3BlID0gZnVuY3Rpb24oXG4gICAgc3JjLCB0eXBlLCBmbiwgY2FwdHVyZSwgc2NvcGUpIHtcbiAgLy8gVE9ETyhta25pY2hlbCk6IERlcHJlY2F0ZSB0aGlzIGZ1bmN0aW9uLlxuICByZXR1cm4gdGhpcy5saXN0ZW5PbmNlXyhzcmMsIHR5cGUsIGZuLCBjYXB0dXJlLCBzY29wZSk7XG59O1xuXG5cbi8qKlxuICogTGlzdGVuIHRvIGFuIGV2ZW50IG9uIGEgTGlzdGVuYWJsZS4gIElmIHRoZSBmdW5jdGlvbiBpcyBvbWl0dGVkLCB0aGVuIHRoZVxuICogRXZlbnRIYW5kbGVyJ3MgaGFuZGxlRXZlbnQgbWV0aG9kIHdpbGwgYmUgdXNlZC4gQWZ0ZXIgdGhlIGV2ZW50IGhhcyBmaXJlZFxuICogdGhlIGV2ZW50IGxpc3RlbmVyIGlzIHJlbW92ZWQgZnJvbSB0aGUgdGFyZ2V0LiBJZiBhbiBhcnJheSBvZiBldmVudCB0eXBlcyBpc1xuICogcHJvdmlkZWQsIGVhY2ggZXZlbnQgdHlwZSB3aWxsIGJlIGxpc3RlbmVkIHRvIG9uY2UuXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkxpc3RlbmFibGVUeXBlfSBzcmMgRXZlbnQgc291cmNlLlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8c3RyaW5nPnxcbiAqICAgICAhZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj58IUFycmF5PCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPj59XG4gKiAgICAgdHlwZSBFdmVudCB0eXBlIHRvIGxpc3RlbiBmb3Igb3IgYXJyYXkgb2YgZXZlbnQgdHlwZXMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEVWRU5UT0JKKTo/fHtoYW5kbGVFdmVudDpmdW5jdGlvbig/KTo/fXxudWxsPX0gb3B0X2ZuXG4gKiAgICBPcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSB1c2VkIGFzIHRoZSBsaXN0ZW5lciBvciBhbiBvYmplY3Qgd2l0aFxuICogICAgaGFuZGxlRXZlbnQgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfY2FwdHVyZSBPcHRpb25hbCB3aGV0aGVyIHRvIHVzZSBjYXB0dXJlIHBoYXNlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfc2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7IWdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlcjxTQ09QRT59IFRoaXMgb2JqZWN0LCBhbGxvd2luZyBmb3JcbiAqICAgICBjaGFpbmluZyBvZiBjYWxscy5cbiAqIEB0ZW1wbGF0ZSBFVkVOVE9CSlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5saXN0ZW5PbmNlXyA9IGZ1bmN0aW9uKFxuICAgIHNyYywgdHlwZSwgb3B0X2ZuLCBvcHRfY2FwdHVyZSwgb3B0X3Njb3BlKSB7XG4gIGlmIChnb29nLmlzQXJyYXkodHlwZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMubGlzdGVuT25jZV8oc3JjLCB0eXBlW2ldLCBvcHRfZm4sIG9wdF9jYXB0dXJlLCBvcHRfc2NvcGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgbGlzdGVuZXJPYmogPSBnb29nLmV2ZW50cy5saXN0ZW5PbmNlKFxuICAgICAgICBzcmMsIHR5cGUsIG9wdF9mbiB8fCB0aGlzLmhhbmRsZUV2ZW50LCBvcHRfY2FwdHVyZSxcbiAgICAgICAgb3B0X3Njb3BlIHx8IHRoaXMuaGFuZGxlcl8gfHwgdGhpcyk7XG4gICAgaWYgKCFsaXN0ZW5lck9iaikge1xuICAgICAgLy8gV2hlbiBnb29nLmV2ZW50cy5saXN0ZW4gcnVuIG9uIE9GRl9BTkRfRkFJTCBvciBPRkZfQU5EX1NJTEVOVFxuICAgICAgLy8gKGdvb2cuZXZlbnRzLkNhcHR1cmVTaW11bGF0aW9uTW9kZSkgaW4gSUU4LSwgaXQgd2lsbCByZXR1cm4gbnVsbFxuICAgICAgLy8gdmFsdWUuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gbGlzdGVuZXJPYmoua2V5O1xuICAgIHRoaXMua2V5c19ba2V5XSA9IGxpc3RlbmVyT2JqO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB3aXRoIGEgc3BlY2lmaWMgZXZlbnQgd3JhcHBlciBvbiBhIERPTSBOb2RlIG9yIGFuXG4gKiBvYmplY3QgdGhhdCBoYXMgaW1wbGVtZW50ZWQge0BsaW5rIGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fS4gQSBsaXN0ZW5lciBjYW5cbiAqIG9ubHkgYmUgYWRkZWQgb25jZSB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldHxnb29nLmV2ZW50cy5FdmVudFRhcmdldH0gc3JjIFRoZSBub2RlIHRvIGxpc3RlbiB0b1xuICogICAgIGV2ZW50cyBvbi5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuRXZlbnRXcmFwcGVyfSB3cmFwcGVyIEV2ZW50IHdyYXBwZXIgdG8gdXNlLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlNDT1BFLCA/KTo/fHtoYW5kbGVFdmVudDpmdW5jdGlvbig/KTo/fXxudWxsfSBsaXN0ZW5lclxuICogICAgIENhbGxiYWNrIG1ldGhvZCwgb3IgYW4gb2JqZWN0IHdpdGggYSBoYW5kbGVFdmVudCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9jYXB0IFdoZXRoZXIgdG8gZmlyZSBpbiBjYXB0dXJlIHBoYXNlIChkZWZhdWx0cyB0b1xuICogICAgIGZhbHNlKS5cbiAqIEByZXR1cm4geyFnb29nLmV2ZW50cy5FdmVudEhhbmRsZXI8U0NPUEU+fSBUaGlzIG9iamVjdCwgYWxsb3dpbmcgZm9yXG4gKiAgICAgY2hhaW5pbmcgb2YgY2FsbHMuXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUubGlzdGVuV2l0aFdyYXBwZXIgPSBmdW5jdGlvbihcbiAgICBzcmMsIHdyYXBwZXIsIGxpc3RlbmVyLCBvcHRfY2FwdCkge1xuICAvLyBUT0RPKG1rbmljaGVsKTogUmVtb3ZlIHRoZSBvcHRfc2NvcGUgZnJvbSB0aGlzIGZ1bmN0aW9uIGFuZCB0aGVuXG4gIC8vIHRlbXBsYXRpemUgaXQuXG4gIHJldHVybiB0aGlzLmxpc3RlbldpdGhXcmFwcGVyXyhzcmMsIHdyYXBwZXIsIGxpc3RlbmVyLCBvcHRfY2FwdCk7XG59O1xuXG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB3aXRoIGEgc3BlY2lmaWMgZXZlbnQgd3JhcHBlciBvbiBhIERPTSBOb2RlIG9yIGFuXG4gKiBvYmplY3QgdGhhdCBoYXMgaW1wbGVtZW50ZWQge0BsaW5rIGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fS4gQSBsaXN0ZW5lciBjYW5cbiAqIG9ubHkgYmUgYWRkZWQgb25jZSB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldHxnb29nLmV2ZW50cy5FdmVudFRhcmdldH0gc3JjIFRoZSBub2RlIHRvIGxpc3RlbiB0b1xuICogICAgIGV2ZW50cyBvbi5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuRXZlbnRXcmFwcGVyfSB3cmFwcGVyIEV2ZW50IHdyYXBwZXIgdG8gdXNlLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsID8pOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKHRoaXM6VCwgPyk6P318bnVsbH1cbiAqICAgICBsaXN0ZW5lciBPcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSB1c2VkIGFzIHRoZVxuICogICAgIGxpc3RlbmVyIG9yIGFuIG9iamVjdCB3aXRoIGhhbmRsZUV2ZW50IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gY2FwdHVyZSBPcHRpb25hbCB3aGV0aGVyIHRvIHVzZSBjYXB0dXJlIHBoYXNlLlxuICogQHBhcmFtIHtUfSBzY29wZSBPYmplY3QgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGUgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHshZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyPFNDT1BFPn0gVGhpcyBvYmplY3QsIGFsbG93aW5nIGZvclxuICogICAgIGNoYWluaW5nIG9mIGNhbGxzLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5saXN0ZW5XaXRoV3JhcHBlckFuZFNjb3BlID0gZnVuY3Rpb24oXG4gICAgc3JjLCB3cmFwcGVyLCBsaXN0ZW5lciwgY2FwdHVyZSwgc2NvcGUpIHtcbiAgLy8gVE9ETyhta25pY2hlbCk6IERlcHJlY2F0ZSB0aGlzIGZ1bmN0aW9uLlxuICByZXR1cm4gdGhpcy5saXN0ZW5XaXRoV3JhcHBlcl8oc3JjLCB3cmFwcGVyLCBsaXN0ZW5lciwgY2FwdHVyZSwgc2NvcGUpO1xufTtcblxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgd2l0aCBhIHNwZWNpZmljIGV2ZW50IHdyYXBwZXIgb24gYSBET00gTm9kZSBvciBhblxuICogb2JqZWN0IHRoYXQgaGFzIGltcGxlbWVudGVkIHtAbGluayBnb29nLmV2ZW50cy5FdmVudFRhcmdldH0uIEEgbGlzdGVuZXIgY2FuXG4gKiBvbmx5IGJlIGFkZGVkIG9uY2UgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8Z29vZy5ldmVudHMuRXZlbnRUYXJnZXR9IHNyYyBUaGUgbm9kZSB0byBsaXN0ZW4gdG9cbiAqICAgICBldmVudHMgb24uXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkV2ZW50V3JhcHBlcn0gd3JhcHBlciBFdmVudCB3cmFwcGVyIHRvIHVzZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24oPyk6P318bnVsbH0gbGlzdGVuZXIgQ2FsbGJhY2tcbiAqICAgICBtZXRob2QsIG9yIGFuIG9iamVjdCB3aXRoIGEgaGFuZGxlRXZlbnQgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfY2FwdCBXaGV0aGVyIHRvIGZpcmUgaW4gY2FwdHVyZSBwaGFzZSAoZGVmYXVsdHMgdG9cbiAqICAgICBmYWxzZSkuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9zY29wZSBFbGVtZW50IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7IWdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlcjxTQ09QRT59IFRoaXMgb2JqZWN0LCBhbGxvd2luZyBmb3JcbiAqICAgICBjaGFpbmluZyBvZiBjYWxscy5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUubGlzdGVuV2l0aFdyYXBwZXJfID0gZnVuY3Rpb24oXG4gICAgc3JjLCB3cmFwcGVyLCBsaXN0ZW5lciwgb3B0X2NhcHQsIG9wdF9zY29wZSkge1xuICB3cmFwcGVyLmxpc3RlbihzcmMsIGxpc3RlbmVyLCBvcHRfY2FwdCwgb3B0X3Njb3BlIHx8IHRoaXMuaGFuZGxlcl8gfHwgdGhpcyxcbiAgICAgICAgICAgICAgICAgdGhpcyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn0gTnVtYmVyIG9mIGxpc3RlbmVycyByZWdpc3RlcmVkIGJ5IHRoaXMgaGFuZGxlci5cbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5nZXRMaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb3VudCA9IDA7XG4gIGZvciAodmFyIGtleSBpbiB0aGlzLmtleXNfKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmtleXNfLCBrZXkpKSB7XG4gICAgICBjb3VudCsrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY291bnQ7XG59O1xuXG5cbi8qKlxuICogVW5saXN0ZW5zIG9uIGFuIGV2ZW50LlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5MaXN0ZW5hYmxlVHlwZX0gc3JjIEV2ZW50IHNvdXJjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PHN0cmluZz58XG4gKiAgICAgIWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+fCFBcnJheTwhZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj4+fVxuICogICAgIHR5cGUgRXZlbnQgdHlwZSBvciBhcnJheSBvZiBldmVudCB0eXBlcyB0byB1bmxpc3RlbiB0by5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRVZFTlRPQkopOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGw9fSBvcHRfZm5cbiAqICAgICBPcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSB1c2VkIGFzIHRoZSBsaXN0ZW5lciBvciBhbiBvYmplY3Qgd2l0aFxuICogICAgIGhhbmRsZUV2ZW50IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NhcHR1cmUgT3B0aW9uYWwgd2hldGhlciB0byB1c2UgY2FwdHVyZSBwaGFzZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3Njb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lci5cbiAqIEByZXR1cm4geyFnb29nLmV2ZW50cy5FdmVudEhhbmRsZXJ9IFRoaXMgb2JqZWN0LCBhbGxvd2luZyBmb3IgY2hhaW5pbmcgb2ZcbiAqICAgICBjYWxscy5cbiAqIEB0ZW1wbGF0ZSBFVkVOVE9CSlxuICovXG5nb29nLmV2ZW50cy5FdmVudEhhbmRsZXIucHJvdG90eXBlLnVubGlzdGVuID0gZnVuY3Rpb24oc3JjLCB0eXBlLCBvcHRfZm4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0X2NhcHR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0X3Njb3BlKSB7XG4gIGlmIChnb29nLmlzQXJyYXkodHlwZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMudW5saXN0ZW4oc3JjLCB0eXBlW2ldLCBvcHRfZm4sIG9wdF9jYXB0dXJlLCBvcHRfc2NvcGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgbGlzdGVuZXIgPSBnb29nLmV2ZW50cy5nZXRMaXN0ZW5lcihzcmMsIHR5cGUsXG4gICAgICAgIG9wdF9mbiB8fCB0aGlzLmhhbmRsZUV2ZW50LFxuICAgICAgICBvcHRfY2FwdHVyZSwgb3B0X3Njb3BlIHx8IHRoaXMuaGFuZGxlcl8gfHwgdGhpcyk7XG5cbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGdvb2cuZXZlbnRzLnVubGlzdGVuQnlLZXkobGlzdGVuZXIpO1xuICAgICAgZGVsZXRlIHRoaXMua2V5c19bbGlzdGVuZXIua2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyIHdoaWNoIHdhcyBhZGRlZCB3aXRoIGxpc3RlbldpdGhXcmFwcGVyKCkuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldHxnb29nLmV2ZW50cy5FdmVudFRhcmdldH0gc3JjIFRoZSB0YXJnZXQgdG8gc3RvcFxuICogICAgIGxpc3RlbmluZyB0byBldmVudHMgb24uXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkV2ZW50V3JhcHBlcn0gd3JhcHBlciBFdmVudCB3cmFwcGVyIHRvIHVzZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24oPyk6P318bnVsbH0gbGlzdGVuZXIgVGhlXG4gKiAgICAgbGlzdGVuZXIgZnVuY3Rpb24gdG8gcmVtb3ZlLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NhcHQgSW4gRE9NLWNvbXBsaWFudCBicm93c2VycywgdGhpcyBkZXRlcm1pbmVzXG4gKiAgICAgd2hldGhlciB0aGUgbGlzdGVuZXIgaXMgZmlyZWQgZHVyaW5nIHRoZSBjYXB0dXJlIG9yIGJ1YmJsZSBwaGFzZSBvZiB0aGVcbiAqICAgICBldmVudC5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3Njb3BlIEVsZW1lbnQgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGUgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHshZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyfSBUaGlzIG9iamVjdCwgYWxsb3dpbmcgZm9yIGNoYWluaW5nIG9mXG4gKiAgICAgY2FsbHMuXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUudW5saXN0ZW5XaXRoV3JhcHBlciA9IGZ1bmN0aW9uKHNyYywgd3JhcHBlcixcbiAgICBsaXN0ZW5lciwgb3B0X2NhcHQsIG9wdF9zY29wZSkge1xuICB3cmFwcGVyLnVubGlzdGVuKHNyYywgbGlzdGVuZXIsIG9wdF9jYXB0LFxuICAgICAgICAgICAgICAgICAgIG9wdF9zY29wZSB8fCB0aGlzLmhhbmRsZXJfIHx8IHRoaXMsIHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBVbmxpc3RlbnMgdG8gYWxsIGV2ZW50cy5cbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5yZW1vdmVBbGwgPSBmdW5jdGlvbigpIHtcbiAgZ29vZy5vYmplY3QuZm9yRWFjaCh0aGlzLmtleXNfLCBmdW5jdGlvbihsaXN0ZW5lck9iaiwga2V5KSB7XG4gICAgaWYgKHRoaXMua2V5c18uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgZ29vZy5ldmVudHMudW5saXN0ZW5CeUtleShsaXN0ZW5lck9iaik7XG4gICAgfVxuICB9LCB0aGlzKTtcblxuICB0aGlzLmtleXNfID0ge307XG59O1xuXG5cbi8qKlxuICogRGlzcG9zZXMgb2YgdGhpcyBFdmVudEhhbmRsZXIgYW5kIHJlbW92ZXMgYWxsIGxpc3RlbmVycyB0aGF0IGl0IHJlZ2lzdGVyZWQuXG4gKiBAb3ZlcnJpZGVcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5kaXNwb3NlSW50ZXJuYWwgPSBmdW5jdGlvbigpIHtcbiAgZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnN1cGVyQ2xhc3NfLmRpc3Bvc2VJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICB0aGlzLnJlbW92ZUFsbCgpO1xufTtcblxuXG4vKipcbiAqIERlZmF1bHQgZXZlbnQgaGFuZGxlclxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5FdmVudH0gZSBFdmVudCBvYmplY3QuXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbihlKSB7XG4gIHRocm93IEVycm9yKCdFdmVudEhhbmRsZXIuaGFuZGxlRXZlbnQgbm90IGltcGxlbWVudGVkJyk7XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMDUgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBBIGRpc3Bvc2FibGUgaW1wbGVtZW50YXRpb24gb2YgYSBjdXN0b21cbiAqIGxpc3RlbmFibGUvZXZlbnQgdGFyZ2V0LiBTZWUgYWxzbzogZG9jdW1lbnRhdGlvbiBmb3JcbiAqIHtAY29kZSBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfS5cbiAqXG4gKiBAYXV0aG9yIGFydkBnb29nbGUuY29tIChFcmlrIEFydmlkc3NvbikgW09yaWdpbmFsIGltcGxlbWVudGF0aW9uXVxuICogQHNlZSAuLi9kZW1vcy9ldmVudHRhcmdldC5odG1sXG4gKiBAc2VlIGdvb2cuZXZlbnRzLkxpc3RlbmFibGVcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0Jyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5EaXNwb3NhYmxlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cy5FdmVudCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cy5MaXN0ZW5hYmxlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkxpc3RlbmVyTWFwJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cub2JqZWN0Jyk7XG5cblxuXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIHtAY29kZSBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfSB3aXRoIGZ1bGwgVzNDXG4gKiBFdmVudFRhcmdldC1saWtlIHN1cHBvcnQgKGNhcHR1cmUvYnViYmxlIG1lY2hhbmlzbSwgc3RvcHBpbmcgZXZlbnRcbiAqIHByb3BhZ2F0aW9uLCBwcmV2ZW50aW5nIGRlZmF1bHQgYWN0aW9ucykuXG4gKlxuICogWW91IG1heSBzdWJjbGFzcyB0aGlzIGNsYXNzIHRvIHR1cm4geW91ciBjbGFzcyBpbnRvIGEgTGlzdGVuYWJsZS5cbiAqXG4gKiBVbmxlc3MgcHJvcGFnYXRpb24gaXMgc3RvcHBlZCwgYW4gZXZlbnQgZGlzcGF0Y2hlZCBieSBhblxuICogRXZlbnRUYXJnZXQgd2lsbCBidWJibGUgdG8gdGhlIHBhcmVudCByZXR1cm5lZCBieVxuICoge0Bjb2RlIGdldFBhcmVudEV2ZW50VGFyZ2V0fS4gVG8gc2V0IHRoZSBwYXJlbnQsIGNhbGxcbiAqIHtAY29kZSBzZXRQYXJlbnRFdmVudFRhcmdldH0uIFN1YmNsYXNzZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gKiBjaGFuZ2luZyB0aGUgcGFyZW50IGNhbiBvdmVycmlkZSB0aGUgc2V0dGVyIHRvIHRocm93IGFuIGVycm9yLlxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKiA8cHJlPlxuICogICB2YXIgc291cmNlID0gbmV3IGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0KCk7XG4gKiAgIGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGUpIHtcbiAqICAgICBhbGVydCgnVHlwZTogJyArIGUudHlwZSArICc7IFRhcmdldDogJyArIGUudGFyZ2V0KTtcbiAqICAgfVxuICogICBzb3VyY2UubGlzdGVuKCdmb28nLCBoYW5kbGVFdmVudCk7XG4gKiAgIC8vIE9yOiBnb29nLmV2ZW50cy5saXN0ZW4oc291cmNlLCAnZm9vJywgaGFuZGxlRXZlbnQpO1xuICogICAuLi5cbiAqICAgc291cmNlLmRpc3BhdGNoRXZlbnQoJ2ZvbycpOyAgLy8gd2lsbCBjYWxsIGhhbmRsZUV2ZW50XG4gKiAgIC4uLlxuICogICBzb3VyY2UudW5saXN0ZW4oJ2ZvbycsIGhhbmRsZUV2ZW50KTtcbiAqICAgLy8gT3I6IGdvb2cuZXZlbnRzLnVubGlzdGVuKHNvdXJjZSwgJ2ZvbycsIGhhbmRsZUV2ZW50KTtcbiAqIDwvcHJlPlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge2dvb2cuRGlzcG9zYWJsZX1cbiAqIEBpbXBsZW1lbnRzIHtnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfVxuICovXG5nb29nLmV2ZW50cy5FdmVudFRhcmdldCA9IGZ1bmN0aW9uKCkge1xuICBnb29nLkRpc3Bvc2FibGUuY2FsbCh0aGlzKTtcblxuICAvKipcbiAgICogTWFwcyBvZiBldmVudCB0eXBlIHRvIGFuIGFycmF5IG9mIGxpc3RlbmVycy5cbiAgICogQHByaXZhdGUgeyFnb29nLmV2ZW50cy5MaXN0ZW5lck1hcH1cbiAgICovXG4gIHRoaXMuZXZlbnRUYXJnZXRMaXN0ZW5lcnNfID0gbmV3IGdvb2cuZXZlbnRzLkxpc3RlbmVyTWFwKHRoaXMpO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHRvIHVzZSBmb3IgZXZlbnQudGFyZ2V0LiBVc2VmdWwgd2hlbiBtaXhpbmcgaW4gYW5cbiAgICogRXZlbnRUYXJnZXQgdG8gYW5vdGhlciBvYmplY3QuXG4gICAqIEBwcml2YXRlIHshT2JqZWN0fVxuICAgKi9cbiAgdGhpcy5hY3R1YWxFdmVudFRhcmdldF8gPSB0aGlzO1xuXG4gIC8qKlxuICAgKiBQYXJlbnQgZXZlbnQgdGFyZ2V0LCB1c2VkIGR1cmluZyBldmVudCBidWJibGluZy5cbiAgICpcbiAgICogVE9ETyhjaHJpc2hlbnJ5KTogQ2hhbmdlIHRoaXMgdG8gZ29vZy5ldmVudHMuTGlzdGVuYWJsZS4gVGhpc1xuICAgKiBjdXJyZW50bHkgYnJlYWtzIHBlb3BsZSB3aG8gZXhwZWN0IGdldFBhcmVudEV2ZW50VGFyZ2V0IHRvIHJldHVyblxuICAgKiBnb29nLmV2ZW50cy5FdmVudFRhcmdldC5cbiAgICpcbiAgICogQHByaXZhdGUge2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fVxuICAgKi9cbiAgdGhpcy5wYXJlbnRFdmVudFRhcmdldF8gPSBudWxsO1xufTtcbmdvb2cuaW5oZXJpdHMoZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQsIGdvb2cuRGlzcG9zYWJsZSk7XG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlLmFkZEltcGxlbWVudGF0aW9uKGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0KTtcblxuXG4vKipcbiAqIEFuIGFydGlmaWNpYWwgY2FwIG9uIHRoZSBudW1iZXIgb2YgYW5jZXN0b3JzIHlvdSBjYW4gaGF2ZS4gVGhpcyBpcyBtYWlubHlcbiAqIGZvciBsb29wIGRldGVjdGlvbi5cbiAqIEBjb25zdCB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQuTUFYX0FOQ0VTVE9SU18gPSAxMDAwO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50IG9mIHRoaXMgZXZlbnQgdGFyZ2V0IHRvIHVzZSBmb3IgYnViYmxpbmcuXG4gKlxuICogQHJldHVybiB7Z29vZy5ldmVudHMuRXZlbnRUYXJnZXR9IFRoZSBwYXJlbnQgRXZlbnRUYXJnZXQgb3IgbnVsbCBpZlxuICogICAgIHRoZXJlIGlzIG5vIHBhcmVudC5cbiAqIEBvdmVycmlkZVxuICovXG5nb29nLmV2ZW50cy5FdmVudFRhcmdldC5wcm90b3R5cGUuZ2V0UGFyZW50RXZlbnRUYXJnZXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50RXZlbnRUYXJnZXRfO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIHBhcmVudCBvZiB0aGlzIGV2ZW50IHRhcmdldCB0byB1c2UgZm9yIGNhcHR1cmUvYnViYmxlXG4gKiBtZWNoYW5pc20uXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fSBwYXJlbnQgUGFyZW50IGxpc3RlbmFibGUgKG51bGwgaWYgbm9uZSkuXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5zZXRQYXJlbnRFdmVudFRhcmdldCA9IGZ1bmN0aW9uKHBhcmVudCkge1xuICB0aGlzLnBhcmVudEV2ZW50VGFyZ2V0XyA9IHBhcmVudDtcbn07XG5cblxuLyoqXG4gKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBldmVudCB0YXJnZXQuIFRoZSBzYW1lIGhhbmRsZXIgY2FuIG9ubHkgYmVcbiAqIGFkZGVkIG9uY2UgcGVyIHRoZSB0eXBlLiBFdmVuIGlmIHlvdSBhZGQgdGhlIHNhbWUgaGFuZGxlciBtdWx0aXBsZSB0aW1lc1xuICogdXNpbmcgdGhlIHNhbWUgdHlwZSB0aGVuIGl0IHdpbGwgb25seSBiZSBjYWxsZWQgb25jZSB3aGVuIHRoZSBldmVudCBpc1xuICogZGlzcGF0Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiB0aGUgZXZlbnQgdG8gbGlzdGVuIGZvci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24oPyk6P318bnVsbH0gaGFuZGxlciBUaGUgZnVuY3Rpb25cbiAqICAgICB0byBoYW5kbGUgdGhlIGV2ZW50LiBUaGUgaGFuZGxlciBjYW4gYWxzbyBiZSBhbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzXG4gKiAgICAgdGhlIGhhbmRsZUV2ZW50IG1ldGhvZCB3aGljaCB0YWtlcyB0aGUgZXZlbnQgb2JqZWN0IGFzIGFyZ3VtZW50LlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NhcHR1cmUgSW4gRE9NLWNvbXBsaWFudCBicm93c2VycywgdGhpcyBkZXRlcm1pbmVzXG4gKiAgICAgd2hldGhlciB0aGUgbGlzdGVuZXIgaXMgZmlyZWQgZHVyaW5nIHRoZSBjYXB0dXJlIG9yIGJ1YmJsZSBwaGFzZVxuICogICAgIG9mIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2hhbmRsZXJTY29wZSBPYmplY3QgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbFxuICogICAgIHRoZSBsaXN0ZW5lci5cbiAqIEBkZXByZWNhdGVkIFVzZSB7QGNvZGUgI2xpc3Rlbn0gaW5zdGVhZCwgd2hlbiBwb3NzaWJsZS4gT3RoZXJ3aXNlLCB1c2VcbiAqICAgICB7QGNvZGUgZ29vZy5ldmVudHMubGlzdGVufSBpZiB5b3UgYXJlIHBhc3NpbmcgT2JqZWN0XG4gKiAgICAgKGluc3RlYWQgb2YgRnVuY3Rpb24pIGFzIGhhbmRsZXIuXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oXG4gICAgdHlwZSwgaGFuZGxlciwgb3B0X2NhcHR1cmUsIG9wdF9oYW5kbGVyU2NvcGUpIHtcbiAgZ29vZy5ldmVudHMubGlzdGVuKHRoaXMsIHR5cGUsIGhhbmRsZXIsIG9wdF9jYXB0dXJlLCBvcHRfaGFuZGxlclNjb3BlKTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyIGZyb20gdGhlIGV2ZW50IHRhcmdldC4gVGhlIGhhbmRsZXIgbXVzdCBiZSB0aGVcbiAqIHNhbWUgb2JqZWN0IGFzIHRoZSBvbmUgYWRkZWQuIElmIHRoZSBoYW5kbGVyIGhhcyBub3QgYmVlbiBhZGRlZCB0aGVuXG4gKiBub3RoaW5nIGlzIGRvbmUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgdGhlIGV2ZW50IHRvIGxpc3RlbiBmb3IuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGx9IGhhbmRsZXIgVGhlIGZ1bmN0aW9uXG4gKiAgICAgdG8gaGFuZGxlIHRoZSBldmVudC4gVGhlIGhhbmRsZXIgY2FuIGFsc28gYmUgYW4gb2JqZWN0IHRoYXQgaW1wbGVtZW50c1xuICogICAgIHRoZSBoYW5kbGVFdmVudCBtZXRob2Qgd2hpY2ggdGFrZXMgdGhlIGV2ZW50IG9iamVjdCBhcyBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9jYXB0dXJlIEluIERPTS1jb21wbGlhbnQgYnJvd3NlcnMsIHRoaXMgZGV0ZXJtaW5lc1xuICogICAgIHdoZXRoZXIgdGhlIGxpc3RlbmVyIGlzIGZpcmVkIGR1cmluZyB0aGUgY2FwdHVyZSBvciBidWJibGUgcGhhc2VcbiAqICAgICBvZiB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9oYW5kbGVyU2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGxcbiAqICAgICB0aGUgbGlzdGVuZXIuXG4gKiBAZGVwcmVjYXRlZCBVc2Uge0Bjb2RlICN1bmxpc3Rlbn0gaW5zdGVhZCwgd2hlbiBwb3NzaWJsZS4gT3RoZXJ3aXNlLCB1c2VcbiAqICAgICB7QGNvZGUgZ29vZy5ldmVudHMudW5saXN0ZW59IGlmIHlvdSBhcmUgcGFzc2luZyBPYmplY3RcbiAqICAgICAoaW5zdGVhZCBvZiBGdW5jdGlvbikgYXMgaGFuZGxlci5cbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihcbiAgICB0eXBlLCBoYW5kbGVyLCBvcHRfY2FwdHVyZSwgb3B0X2hhbmRsZXJTY29wZSkge1xuICBnb29nLmV2ZW50cy51bmxpc3Rlbih0aGlzLCB0eXBlLCBoYW5kbGVyLCBvcHRfY2FwdHVyZSwgb3B0X2hhbmRsZXJTY29wZSk7XG59O1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oZSkge1xuICB0aGlzLmFzc2VydEluaXRpYWxpemVkXygpO1xuXG4gIHZhciBhbmNlc3RvcnNUcmVlLCBhbmNlc3RvciA9IHRoaXMuZ2V0UGFyZW50RXZlbnRUYXJnZXQoKTtcbiAgaWYgKGFuY2VzdG9yKSB7XG4gICAgYW5jZXN0b3JzVHJlZSA9IFtdO1xuICAgIHZhciBhbmNlc3RvckNvdW50ID0gMTtcbiAgICBmb3IgKDsgYW5jZXN0b3I7IGFuY2VzdG9yID0gYW5jZXN0b3IuZ2V0UGFyZW50RXZlbnRUYXJnZXQoKSkge1xuICAgICAgYW5jZXN0b3JzVHJlZS5wdXNoKGFuY2VzdG9yKTtcbiAgICAgIGdvb2cuYXNzZXJ0cy5hc3NlcnQoXG4gICAgICAgICAgKCsrYW5jZXN0b3JDb3VudCA8IGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0Lk1BWF9BTkNFU1RPUlNfKSxcbiAgICAgICAgICAnaW5maW5pdGUgbG9vcCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnb29nLmV2ZW50cy5FdmVudFRhcmdldC5kaXNwYXRjaEV2ZW50SW50ZXJuYWxfKFxuICAgICAgdGhpcy5hY3R1YWxFdmVudFRhcmdldF8sIGUsIGFuY2VzdG9yc1RyZWUpO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgbGlzdGVuZXJzIGZyb20gdGhpcyBvYmplY3QuICBDbGFzc2VzIHRoYXQgZXh0ZW5kIEV2ZW50VGFyZ2V0IG1heVxuICogbmVlZCB0byBvdmVycmlkZSB0aGlzIG1ldGhvZCBpbiBvcmRlciB0byByZW1vdmUgcmVmZXJlbmNlcyB0byBET00gRWxlbWVudHNcbiAqIGFuZCBhZGRpdGlvbmFsIGxpc3RlbmVycy5cbiAqIEBvdmVycmlkZVxuICovXG5nb29nLmV2ZW50cy5FdmVudFRhcmdldC5wcm90b3R5cGUuZGlzcG9zZUludGVybmFsID0gZnVuY3Rpb24oKSB7XG4gIGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnN1cGVyQ2xhc3NfLmRpc3Bvc2VJbnRlcm5hbC5jYWxsKHRoaXMpO1xuXG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMucGFyZW50RXZlbnRUYXJnZXRfID0gbnVsbDtcbn07XG5cblxuLyoqIEBvdmVycmlkZSAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uKFxuICAgIHR5cGUsIGxpc3RlbmVyLCBvcHRfdXNlQ2FwdHVyZSwgb3B0X2xpc3RlbmVyU2NvcGUpIHtcbiAgdGhpcy5hc3NlcnRJbml0aWFsaXplZF8oKTtcbiAgcmV0dXJuIHRoaXMuZXZlbnRUYXJnZXRMaXN0ZW5lcnNfLmFkZChcbiAgICAgIFN0cmluZyh0eXBlKSwgbGlzdGVuZXIsIGZhbHNlIC8qIGNhbGxPbmNlICovLCBvcHRfdXNlQ2FwdHVyZSxcbiAgICAgIG9wdF9saXN0ZW5lclNjb3BlKTtcbn07XG5cblxuLyoqIEBvdmVycmlkZSAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQucHJvdG90eXBlLmxpc3Rlbk9uY2UgPSBmdW5jdGlvbihcbiAgICB0eXBlLCBsaXN0ZW5lciwgb3B0X3VzZUNhcHR1cmUsIG9wdF9saXN0ZW5lclNjb3BlKSB7XG4gIHJldHVybiB0aGlzLmV2ZW50VGFyZ2V0TGlzdGVuZXJzXy5hZGQoXG4gICAgICBTdHJpbmcodHlwZSksIGxpc3RlbmVyLCB0cnVlIC8qIGNhbGxPbmNlICovLCBvcHRfdXNlQ2FwdHVyZSxcbiAgICAgIG9wdF9saXN0ZW5lclNjb3BlKTtcbn07XG5cblxuLyoqIEBvdmVycmlkZSAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQucHJvdG90eXBlLnVubGlzdGVuID0gZnVuY3Rpb24oXG4gICAgdHlwZSwgbGlzdGVuZXIsIG9wdF91c2VDYXB0dXJlLCBvcHRfbGlzdGVuZXJTY29wZSkge1xuICByZXR1cm4gdGhpcy5ldmVudFRhcmdldExpc3RlbmVyc18ucmVtb3ZlKFxuICAgICAgU3RyaW5nKHR5cGUpLCBsaXN0ZW5lciwgb3B0X3VzZUNhcHR1cmUsIG9wdF9saXN0ZW5lclNjb3BlKTtcbn07XG5cblxuLyoqIEBvdmVycmlkZSAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQucHJvdG90eXBlLnVubGlzdGVuQnlLZXkgPSBmdW5jdGlvbihrZXkpIHtcbiAgcmV0dXJuIHRoaXMuZXZlbnRUYXJnZXRMaXN0ZW5lcnNfLnJlbW92ZUJ5S2V5KGtleSk7XG59O1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbihvcHRfdHlwZSkge1xuICAvLyBUT0RPKGNocmlzaGVucnkpOiBQcmV2aW91c2x5LCByZW1vdmVBbGxMaXN0ZW5lcnMgY2FuIGJlIGNhbGxlZCBvblxuICAvLyB1bmluaXRpYWxpemVkIEV2ZW50VGFyZ2V0LCBzbyB3ZSBwcmVzZXJ2ZSB0aGF0IGJlaGF2aW9yLiBXZVxuICAvLyBzaG91bGQgcmVtb3ZlIHRoaXMgd2hlbiB1c2FnZXMgdGhhdCByZWx5IG9uIHRoYXQgZmFjdCBhcmUgcHVyZ2VkLlxuICBpZiAoIXRoaXMuZXZlbnRUYXJnZXRMaXN0ZW5lcnNfKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIHRoaXMuZXZlbnRUYXJnZXRMaXN0ZW5lcnNfLnJlbW92ZUFsbChvcHRfdHlwZSk7XG59O1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5maXJlTGlzdGVuZXJzID0gZnVuY3Rpb24oXG4gICAgdHlwZSwgY2FwdHVyZSwgZXZlbnRPYmplY3QpIHtcbiAgLy8gVE9ETyhjaHJpc2hlbnJ5KTogT3JpZ2luYWwgY29kZSBhdm9pZHMgYXJyYXkgY3JlYXRpb24gd2hlbiB0aGVyZVxuICAvLyBpcyBubyBsaXN0ZW5lciwgc28gd2UgZG8gdGhlIHNhbWUuIElmIHRoaXMgb3B0aW1pemF0aW9uIHR1cm5zXG4gIC8vIG91dCB0byBiZSBub3QgcmVxdWlyZWQsIHdlIGNhbiByZXBsYWNlIHRoaXMgd2l0aFxuICAvLyBnZXRMaXN0ZW5lcnModHlwZSwgY2FwdHVyZSkgaW5zdGVhZCwgd2hpY2ggaXMgc2ltcGxlci5cbiAgdmFyIGxpc3RlbmVyQXJyYXkgPSB0aGlzLmV2ZW50VGFyZ2V0TGlzdGVuZXJzXy5saXN0ZW5lcnNbU3RyaW5nKHR5cGUpXTtcbiAgaWYgKCFsaXN0ZW5lckFycmF5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyQXJyYXkuY29uY2F0KCk7XG5cbiAgdmFyIHJ2ID0gdHJ1ZTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lckFycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJBcnJheVtpXTtcbiAgICAvLyBXZSBtaWdodCBub3QgaGF2ZSBhIGxpc3RlbmVyIGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbiAgICBpZiAobGlzdGVuZXIgJiYgIWxpc3RlbmVyLnJlbW92ZWQgJiYgbGlzdGVuZXIuY2FwdHVyZSA9PSBjYXB0dXJlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJGbiA9IGxpc3RlbmVyLmxpc3RlbmVyO1xuICAgICAgdmFyIGxpc3RlbmVySGFuZGxlciA9IGxpc3RlbmVyLmhhbmRsZXIgfHwgbGlzdGVuZXIuc3JjO1xuXG4gICAgICBpZiAobGlzdGVuZXIuY2FsbE9uY2UpIHtcbiAgICAgICAgdGhpcy51bmxpc3RlbkJ5S2V5KGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJ2ID0gbGlzdGVuZXJGbi5jYWxsKGxpc3RlbmVySGFuZGxlciwgZXZlbnRPYmplY3QpICE9PSBmYWxzZSAmJiBydjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcnYgJiYgZXZlbnRPYmplY3QucmV0dXJuVmFsdWVfICE9IGZhbHNlO1xufTtcblxuXG4vKiogQG92ZXJyaWRlICovXG5nb29nLmV2ZW50cy5FdmVudFRhcmdldC5wcm90b3R5cGUuZ2V0TGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSwgY2FwdHVyZSkge1xuICByZXR1cm4gdGhpcy5ldmVudFRhcmdldExpc3RlbmVyc18uZ2V0TGlzdGVuZXJzKFN0cmluZyh0eXBlKSwgY2FwdHVyZSk7XG59O1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5nZXRMaXN0ZW5lciA9IGZ1bmN0aW9uKFxuICAgIHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlLCBvcHRfbGlzdGVuZXJTY29wZSkge1xuICByZXR1cm4gdGhpcy5ldmVudFRhcmdldExpc3RlbmVyc18uZ2V0TGlzdGVuZXIoXG4gICAgICBTdHJpbmcodHlwZSksIGxpc3RlbmVyLCBjYXB0dXJlLCBvcHRfbGlzdGVuZXJTY29wZSk7XG59O1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5oYXNMaXN0ZW5lciA9IGZ1bmN0aW9uKFxuICAgIG9wdF90eXBlLCBvcHRfY2FwdHVyZSkge1xuICB2YXIgaWQgPSBnb29nLmlzRGVmKG9wdF90eXBlKSA/IFN0cmluZyhvcHRfdHlwZSkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiB0aGlzLmV2ZW50VGFyZ2V0TGlzdGVuZXJzXy5oYXNMaXN0ZW5lcihpZCwgb3B0X2NhcHR1cmUpO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIHRhcmdldCB0byBiZSB1c2VkIGZvciB7QGNvZGUgZXZlbnQudGFyZ2V0fSB3aGVuIGZpcmluZ1xuICogZXZlbnQuIE1haW5seSB1c2VkIGZvciB0ZXN0aW5nLiBGb3IgZXhhbXBsZSwgc2VlXG4gKiB7QGNvZGUgZ29vZy50ZXN0aW5nLmV2ZW50cy5taXhpbkxpc3RlbmFibGV9LlxuICogQHBhcmFtIHshT2JqZWN0fSB0YXJnZXQgVGhlIHRhcmdldC5cbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQucHJvdG90eXBlLnNldFRhcmdldEZvclRlc3RpbmcgPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgdGhpcy5hY3R1YWxFdmVudFRhcmdldF8gPSB0YXJnZXQ7XG59O1xuXG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IHRoZSBldmVudCB0YXJnZXQgaW5zdGFuY2UgaXMgaW5pdGlhbGl6ZWQgcHJvcGVybHkuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5FdmVudFRhcmdldC5wcm90b3R5cGUuYXNzZXJ0SW5pdGlhbGl6ZWRfID0gZnVuY3Rpb24oKSB7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoXG4gICAgICB0aGlzLmV2ZW50VGFyZ2V0TGlzdGVuZXJzXyxcbiAgICAgICdFdmVudCB0YXJnZXQgaXMgbm90IGluaXRpYWxpemVkLiBEaWQgeW91IGNhbGwgdGhlIHN1cGVyY2xhc3MgJyArXG4gICAgICAnKGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0KSBjb25zdHJ1Y3Rvcj8nKTtcbn07XG5cblxuLyoqXG4gKiBEaXNwYXRjaGVzIHRoZSBnaXZlbiBldmVudCBvbiB0aGUgYW5jZXN0b3JzVHJlZS5cbiAqXG4gKiBAcGFyYW0geyFPYmplY3R9IHRhcmdldCBUaGUgdGFyZ2V0IHRvIGRpc3BhdGNoIG9uLlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5FdmVudHxPYmplY3R8c3RyaW5nfSBlIFRoZSBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge0FycmF5PGdvb2cuZXZlbnRzLkxpc3RlbmFibGU+PX0gb3B0X2FuY2VzdG9yc1RyZWUgVGhlIGFuY2VzdG9yc1xuICogICAgIHRyZWUgb2YgdGhlIHRhcmdldCwgaW4gcmV2ZXJzZSBvcmRlciBmcm9tIHRoZSBjbG9zZXN0IGFuY2VzdG9yXG4gKiAgICAgdG8gdGhlIHJvb3QgZXZlbnQgdGFyZ2V0LiBNYXkgYmUgbnVsbCBpZiB0aGUgdGFyZ2V0IGhhcyBubyBhbmNlc3Rvci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IElmIGFueW9uZSBjYWxsZWQgcHJldmVudERlZmF1bHQgb24gdGhlIGV2ZW50IG9iamVjdCAob3JcbiAqICAgICBpZiBhbnkgb2YgdGhlIGxpc3RlbmVycyByZXR1cm5zIGZhbHNlKSB0aGlzIHdpbGwgYWxzbyByZXR1cm4gZmFsc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5FdmVudFRhcmdldC5kaXNwYXRjaEV2ZW50SW50ZXJuYWxfID0gZnVuY3Rpb24oXG4gICAgdGFyZ2V0LCBlLCBvcHRfYW5jZXN0b3JzVHJlZSkge1xuICB2YXIgdHlwZSA9IGUudHlwZSB8fCAvKiogQHR5cGUge3N0cmluZ30gKi8gKGUpO1xuXG4gIC8vIElmIGFjY2VwdGluZyBhIHN0cmluZyBvciBvYmplY3QsIGNyZWF0ZSBhIGN1c3RvbSBldmVudCBvYmplY3Qgc28gdGhhdFxuICAvLyBwcmV2ZW50RGVmYXVsdCBhbmQgc3RvcFByb3BhZ2F0aW9uIHdvcmsgd2l0aCB0aGUgZXZlbnQuXG4gIGlmIChnb29nLmlzU3RyaW5nKGUpKSB7XG4gICAgZSA9IG5ldyBnb29nLmV2ZW50cy5FdmVudChlLCB0YXJnZXQpO1xuICB9IGVsc2UgaWYgKCEoZSBpbnN0YW5jZW9mIGdvb2cuZXZlbnRzLkV2ZW50KSkge1xuICAgIHZhciBvbGRFdmVudCA9IGU7XG4gICAgZSA9IG5ldyBnb29nLmV2ZW50cy5FdmVudCh0eXBlLCB0YXJnZXQpO1xuICAgIGdvb2cub2JqZWN0LmV4dGVuZChlLCBvbGRFdmVudCk7XG4gIH0gZWxzZSB7XG4gICAgZS50YXJnZXQgPSBlLnRhcmdldCB8fCB0YXJnZXQ7XG4gIH1cblxuICB2YXIgcnYgPSB0cnVlLCBjdXJyZW50VGFyZ2V0O1xuXG4gIC8vIEV4ZWN1dGVzIGFsbCBjYXB0dXJlIGxpc3RlbmVycyBvbiB0aGUgYW5jZXN0b3JzLCBpZiBhbnkuXG4gIGlmIChvcHRfYW5jZXN0b3JzVHJlZSkge1xuICAgIGZvciAodmFyIGkgPSBvcHRfYW5jZXN0b3JzVHJlZS5sZW5ndGggLSAxOyAhZS5wcm9wYWdhdGlvblN0b3BwZWRfICYmIGkgPj0gMDtcbiAgICAgICAgIGktLSkge1xuICAgICAgY3VycmVudFRhcmdldCA9IGUuY3VycmVudFRhcmdldCA9IG9wdF9hbmNlc3RvcnNUcmVlW2ldO1xuICAgICAgcnYgPSBjdXJyZW50VGFyZ2V0LmZpcmVMaXN0ZW5lcnModHlwZSwgdHJ1ZSwgZSkgJiYgcnY7XG4gICAgfVxuICB9XG5cbiAgLy8gRXhlY3V0ZXMgY2FwdHVyZSBhbmQgYnViYmxlIGxpc3RlbmVycyBvbiB0aGUgdGFyZ2V0LlxuICBpZiAoIWUucHJvcGFnYXRpb25TdG9wcGVkXykge1xuICAgIGN1cnJlbnRUYXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgPSB0YXJnZXQ7XG4gICAgcnYgPSBjdXJyZW50VGFyZ2V0LmZpcmVMaXN0ZW5lcnModHlwZSwgdHJ1ZSwgZSkgJiYgcnY7XG4gICAgaWYgKCFlLnByb3BhZ2F0aW9uU3RvcHBlZF8pIHtcbiAgICAgIHJ2ID0gY3VycmVudFRhcmdldC5maXJlTGlzdGVuZXJzKHR5cGUsIGZhbHNlLCBlKSAmJiBydjtcbiAgICB9XG4gIH1cblxuICAvLyBFeGVjdXRlcyBhbGwgYnViYmxlIGxpc3RlbmVycyBvbiB0aGUgYW5jZXN0b3JzLCBpZiBhbnkuXG4gIGlmIChvcHRfYW5jZXN0b3JzVHJlZSkge1xuICAgIGZvciAoaSA9IDA7ICFlLnByb3BhZ2F0aW9uU3RvcHBlZF8gJiYgaSA8IG9wdF9hbmNlc3RvcnNUcmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0ID0gb3B0X2FuY2VzdG9yc1RyZWVbaV07XG4gICAgICBydiA9IGN1cnJlbnRUYXJnZXQuZmlyZUxpc3RlbmVycyh0eXBlLCBmYWxzZSwgZSkgJiYgcnY7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJ2O1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDA4IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgR2VuZXJhdG9yIGZvciB1bmlxdWUgZWxlbWVudCBJRHMuXG4gKlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy51aS5JZEdlbmVyYXRvcicpO1xuXG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGlkIGdlbmVyYXRvci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGZpbmFsXG4gKi9cbmdvb2cudWkuSWRHZW5lcmF0b3IgPSBmdW5jdGlvbigpIHtcbn07XG5nb29nLmFkZFNpbmdsZXRvbkdldHRlcihnb29nLnVpLklkR2VuZXJhdG9yKTtcblxuXG4vKipcbiAqIE5leHQgdW5pcXVlIElEIHRvIHVzZVxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudWkuSWRHZW5lcmF0b3IucHJvdG90eXBlLm5leHRJZF8gPSAwO1xuXG5cbi8qKlxuICogR2V0cyB0aGUgbmV4dCB1bmlxdWUgSUQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBuZXh0IHVuaXF1ZSBpZGVudGlmaWVyLlxuICovXG5nb29nLnVpLklkR2VuZXJhdG9yLnByb3RvdHlwZS5nZXROZXh0VW5pcXVlSWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICc6JyArICh0aGlzLm5leHRJZF8rKykudG9TdHJpbmcoMzYpO1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDA3IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQWJzdHJhY3QgY2xhc3MgZm9yIGFsbCBVSSBjb21wb25lbnRzLiBUaGlzIGRlZmluZXMgdGhlIHN0YW5kYXJkXG4gKiBkZXNpZ24gcGF0dGVybiB0aGF0IGFsbCBVSSBjb21wb25lbnRzIHNob3VsZCBmb2xsb3cuXG4gKlxuICogQGF1dGhvciBhdHRpbGFAZ29vZ2xlLmNvbSAoQXR0aWxhIEJvZGlzKVxuICogQHNlZSAuLi9kZW1vcy9zYW1wbGVjb21wb25lbnQuaHRtbFxuICogQHNlZSBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvY2xvc3VyZS1saWJyYXJ5L3dpa2kvSW50cm9Ub0NvbXBvbmVudHNcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cudWkuQ29tcG9uZW50Jyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cudWkuQ29tcG9uZW50LkVycm9yJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cudWkuQ29tcG9uZW50LkV2ZW50VHlwZScpO1xuZ29vZy5wcm92aWRlKCdnb29nLnVpLkNvbXBvbmVudC5TdGF0ZScpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuYXJyYXknKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZG9tJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZG9tLk5vZGVUeXBlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZG9tLlRhZ05hbWUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cub2JqZWN0Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuc3R5bGUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy51aS5JZEdlbmVyYXRvcicpO1xuXG5cblxuLyoqXG4gKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIFVJIGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0ge2dvb2cuZG9tLkRvbUhlbHBlcj19IG9wdF9kb21IZWxwZXIgT3B0aW9uYWwgRE9NIGhlbHBlci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fVxuICovXG5nb29nLnVpLkNvbXBvbmVudCA9IGZ1bmN0aW9uKG9wdF9kb21IZWxwZXIpIHtcbiAgZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQuY2FsbCh0aGlzKTtcbiAgLyoqXG4gICAqIERvbUhlbHBlciB1c2VkIHRvIGludGVyYWN0IHdpdGggdGhlIGRvY3VtZW50LCBhbGxvd2luZyBjb21wb25lbnRzIHRvIGJlXG4gICAqIGNyZWF0ZWQgaW4gYSBkaWZmZXJlbnQgd2luZG93LlxuICAgKiBAcHJvdGVjdGVkIHshZ29vZy5kb20uRG9tSGVscGVyfVxuICAgKiBAc3VwcHJlc3Mge3VuZGVyc2NvcmV8dmlzaWJpbGl0eX1cbiAgICovXG4gIHRoaXMuZG9tXyA9IG9wdF9kb21IZWxwZXIgfHwgZ29vZy5kb20uZ2V0RG9tSGVscGVyKCk7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGNvbXBvbmVudCBpcyByZW5kZXJlZCByaWdodC10by1sZWZ0LiAgUmlnaHQtdG8tbGVmdCBpcyBzZXRcbiAgICogbGF6aWx5IHdoZW4ge0BsaW5rICNpc1JpZ2h0VG9MZWZ0fSBpcyBjYWxsZWQgdGhlIGZpcnN0IHRpbWUsIHVubGVzcyBpdCBoYXNcbiAgICogYmVlbiBzZXQgYnkgY2FsbGluZyB7QGxpbmsgI3NldFJpZ2h0VG9MZWZ0fSBleHBsaWNpdGx5LlxuICAgKiBAcHJpdmF0ZSB7P2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLnJpZ2h0VG9MZWZ0XyA9IGdvb2cudWkuQ29tcG9uZW50LmRlZmF1bHRSaWdodFRvTGVmdF87XG5cbiAgLyoqXG4gICAqIFVuaXF1ZSBJRCBvZiB0aGUgY29tcG9uZW50LCBsYXppbHkgaW5pdGlhbGl6ZWQgaW4ge0BsaW5rXG4gICAqIGdvb2cudWkuQ29tcG9uZW50I2dldElkfSBpZiBuZWVkZWQuICBUaGlzIHByb3BlcnR5IGlzIHN0cmljdGx5IHByaXZhdGUgYW5kXG4gICAqIG11c3Qgbm90IGJlIGFjY2Vzc2VkIGRpcmVjdGx5IG91dHNpZGUgb2YgdGhpcyBjbGFzcyFcbiAgICogQHByaXZhdGUgez9zdHJpbmd9XG4gICAqL1xuICB0aGlzLmlkXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGNvbXBvbmVudCBpcyBpbiB0aGUgZG9jdW1lbnQuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5pbkRvY3VtZW50XyA9IGZhbHNlO1xuXG4gIC8vIFRPRE8oYXR0aWxhKTogU3RvcCByZWZlcnJpbmcgdG8gdGhpcyBwcml2YXRlIGZpZWxkIGluIHN1YmNsYXNzZXMuXG4gIC8qKlxuICAgKiBUaGUgRE9NIGVsZW1lbnQgZm9yIHRoZSBjb21wb25lbnQuXG4gICAqIEBwcml2YXRlIHtFbGVtZW50fVxuICAgKi9cbiAgdGhpcy5lbGVtZW50XyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIuXG4gICAqIFRPRE8odXNlcik6IHJlbmFtZSBpdCB0byBoYW5kbGVyXyBhZnRlciBhbGwgY29tcG9uZW50IHN1YmNsYXNzZXMgaW5cbiAgICogaW5zaWRlIEdvb2dsZSBoYXZlIGJlZW4gY2xlYW5lZCB1cC5cbiAgICogQ29kZSBzZWFyY2g6IGh0dHA6Ly9nby9jb21wb25lbnRfY29kZV9zZWFyY2hcbiAgICogQHByaXZhdGUge2dvb2cuZXZlbnRzLkV2ZW50SGFuZGxlcnx1bmRlZmluZWR9XG4gICAqL1xuICB0aGlzLmdvb2dVaUNvbXBvbmVudEhhbmRsZXJfID0gdm9pZCAwO1xuXG4gIC8qKlxuICAgKiBBcmJpdHJhcnkgZGF0YSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb21wb25lbnQuICBTdWNoIGFzIG1ldGEtZGF0YS5cbiAgICogQHByaXZhdGUgeyp9XG4gICAqL1xuICB0aGlzLm1vZGVsXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFBhcmVudCBjb21wb25lbnQgdG8gd2hpY2ggZXZlbnRzIHdpbGwgYmUgcHJvcGFnYXRlZC4gIFRoaXMgcHJvcGVydHkgaXNcbiAgICogc3RyaWN0bHkgcHJpdmF0ZSBhbmQgbXVzdCBub3QgYmUgYWNjZXNzZWQgZGlyZWN0bHkgb3V0c2lkZSBvZiB0aGlzIGNsYXNzIVxuICAgKiBAcHJpdmF0ZSB7Z29vZy51aS5Db21wb25lbnQ/fVxuICAgKi9cbiAgdGhpcy5wYXJlbnRfID0gbnVsbDtcblxuICAvKipcbiAgICogQXJyYXkgb2YgY2hpbGQgY29tcG9uZW50cy4gIExhemlseSBpbml0aWFsaXplZCBvbiBmaXJzdCB1c2UuICBNdXN0IGJlIGtlcHRcbiAgICogaW4gc3luYyB3aXRoIHtAY29kZSBjaGlsZEluZGV4X30uICBUaGlzIHByb3BlcnR5IGlzIHN0cmljdGx5IHByaXZhdGUgYW5kXG4gICAqIG11c3Qgbm90IGJlIGFjY2Vzc2VkIGRpcmVjdGx5IG91dHNpZGUgb2YgdGhpcyBjbGFzcyFcbiAgICogQHByaXZhdGUge0FycmF5PGdvb2cudWkuQ29tcG9uZW50Pj99XG4gICAqL1xuICB0aGlzLmNoaWxkcmVuXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIE1hcCBvZiBjaGlsZCBjb21wb25lbnQgSURzIHRvIGNoaWxkIGNvbXBvbmVudHMuICBVc2VkIGZvciBjb25zdGFudC10aW1lXG4gICAqIHJhbmRvbSBhY2Nlc3MgdG8gY2hpbGQgY29tcG9uZW50cyBieSBJRC4gIExhemlseSBpbml0aWFsaXplZCBvbiBmaXJzdCB1c2UuXG4gICAqIE11c3QgYmUga2VwdCBpbiBzeW5jIHdpdGgge0Bjb2RlIGNoaWxkcmVuX30uICBUaGlzIHByb3BlcnR5IGlzIHN0cmljdGx5XG4gICAqIHByaXZhdGUgYW5kIG11c3Qgbm90IGJlIGFjY2Vzc2VkIGRpcmVjdGx5IG91dHNpZGUgb2YgdGhpcyBjbGFzcyFcbiAgICpcbiAgICogV2UgdXNlIGEgcGxhaW4gT2JqZWN0LCBub3QgYSB7QGxpbmsgZ29vZy5zdHJ1Y3RzLk1hcH0sIGZvciBzaW1wbGljaXR5LlxuICAgKiBUaGlzIG1lYW5zIGNvbXBvbmVudHMgY2FuJ3QgaGF2ZSBjaGlsZHJlbiB3aXRoIElEcyBzdWNoIGFzICdjb25zdHJ1Y3Rvcicgb3JcbiAgICogJ3ZhbHVlT2YnLCBidXQgdGhpcyBzaG91bGRuJ3QgcmVhbGx5IGJlIGFuIGlzc3VlIGluIHByYWN0aWNlLCBhbmQgaWYgaXQgaXMsXG4gICAqIHdlIGNhbiBhbHdheXMgZml4IGl0IGxhdGVyIHdpdGhvdXQgY2hhbmdpbmcgdGhlIEFQSS5cbiAgICpcbiAgICogQHByaXZhdGUge09iamVjdH1cbiAgICovXG4gIHRoaXMuY2hpbGRJbmRleF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBGbGFnIHVzZWQgdG8ga2VlcCB0cmFjayBvZiB3aGV0aGVyIGEgY29tcG9uZW50IGRlY29yYXRlZCBhbiBhbHJlYWR5XG4gICAqIGV4aXN0aW5nIGVsZW1lbnQgb3Igd2hldGhlciBpdCBjcmVhdGVkIHRoZSBET00gaXRzZWxmLlxuICAgKlxuICAgKiBJZiBhbiBlbGVtZW50IGlzIGRlY29yYXRlZCwgZGlzcG9zZSB3aWxsIGxlYXZlIHRoZSBub2RlIGluIHRoZSBkb2N1bWVudC5cbiAgICogSXQgaXMgdXAgdG8gdGhlIGFwcCB0byByZW1vdmUgdGhlIG5vZGUuXG4gICAqXG4gICAqIElmIGFuIGVsZW1lbnQgd2FzIHJlbmRlcmVkLCBkaXNwb3NlIHdpbGwgcmVtb3ZlIHRoZSBub2RlIGF1dG9tYXRpY2FsbHkuXG4gICAqXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy53YXNEZWNvcmF0ZWRfID0gZmFsc2U7XG59O1xuZ29vZy5pbmhlcml0cyhnb29nLnVpLkNvbXBvbmVudCwgZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0byBzdXBwb3J0IGNhbGxpbmcgZGVjb3JhdGUgd2l0aCBhbiBlbGVtZW50IHRoYXQgaXNcbiAqICAgICBub3QgeWV0IGluIHRoZSBkb2N1bWVudC4gSWYgdHJ1ZSwgd2UgY2hlY2sgaWYgdGhlIGVsZW1lbnQgaXMgaW4gdGhlXG4gKiAgICAgZG9jdW1lbnQsIGFuZCBhdm9pZCBjYWxsaW5nIGVudGVyRG9jdW1lbnQgaWYgaXQgaXNuJ3QuIElmIGZhbHNlLCB3ZVxuICogICAgIG1haW50YWluIGxlZ2FjeSBiZWhhdmlvciAoYWx3YXlzIGNhbGwgZW50ZXJEb2N1bWVudCBmcm9tIGRlY29yYXRlKS5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cudWkuQ29tcG9uZW50LkFMTE9XX0RFVEFDSEVEX0RFQ09SQVRJT04nLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBHZW5lcmF0b3IgZm9yIHVuaXF1ZSBJRHMuXG4gKiBAdHlwZSB7Z29vZy51aS5JZEdlbmVyYXRvcn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5pZEdlbmVyYXRvcl8gPSBnb29nLnVpLklkR2VuZXJhdG9yLmdldEluc3RhbmNlKCk7XG5cblxuLy8gVE9ETyhnYm95ZXIpOiBTZWUgaWYgd2UgY2FuIHJlbW92ZSB0aGlzIGFuZCBqdXN0IGNoZWNrIGdvb2cuaTE4bi5iaWRpLklTX1JUTC5cbi8qKlxuICogQGRlZmluZSB7bnVtYmVyfSBEZWZpbmVzIHRoZSBkZWZhdWx0IEJJREkgZGlyZWN0aW9uYWxpdHkuXG4gKiAgICAgMDogVW5rbm93bi5cbiAqICAgICAxOiBMZWZ0LXRvLXJpZ2h0LlxuICogICAgIC0xOiBSaWdodC10by1sZWZ0LlxuICovXG5nb29nLmRlZmluZSgnZ29vZy51aS5Db21wb25lbnQuREVGQVVMVF9CSURJX0RJUicsIDApO1xuXG5cbi8qKlxuICogVGhlIGRlZmF1bHQgcmlnaHQgdG8gbGVmdCB2YWx1ZS5cbiAqIEB0eXBlIHs/Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LmRlZmF1bHRSaWdodFRvTGVmdF8gPVxuICAgIChnb29nLnVpLkNvbXBvbmVudC5ERUZBVUxUX0JJRElfRElSID09IDEpID8gZmFsc2UgOlxuICAgIChnb29nLnVpLkNvbXBvbmVudC5ERUZBVUxUX0JJRElfRElSID09IC0xKSA/IHRydWUgOiBudWxsO1xuXG5cbi8qKlxuICogQ29tbW9uIGV2ZW50cyBmaXJlZCBieSBjb21wb25lbnRzIHNvIHRoYXQgZXZlbnQgcHJvcGFnYXRpb24gaXMgdXNlZnVsLiAgTm90XG4gKiBhbGwgY29tcG9uZW50cyBhcmUgZXhwZWN0ZWQgdG8gZGlzcGF0Y2ggb3IgbGlzdGVuIGZvciBhbGwgZXZlbnQgdHlwZXMuXG4gKiBFdmVudHMgZGlzcGF0Y2hlZCBiZWZvcmUgYSBzdGF0ZSB0cmFuc2l0aW9uIHNob3VsZCBiZSBjYW5jZWxhYmxlIHRvIHByZXZlbnRcbiAqIHRoZSBjb3JyZXNwb25kaW5nIHN0YXRlIGNoYW5nZS5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LkV2ZW50VHlwZSA9IHtcbiAgLyoqIERpc3BhdGNoZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgYmVjb21lcyB2aXNpYmxlLiAqL1xuICBCRUZPUkVfU0hPVzogJ2JlZm9yZXNob3cnLFxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVkIGFmdGVyIHRoZSBjb21wb25lbnQgYmVjb21lcyB2aXNpYmxlLlxuICAgKiBOT1RFKHVzZXIpOiBGb3IgZ29vZy51aS5Db250YWluZXIsIHRoaXMgYWN0dWFsbHkgZmlyZXMgYmVmb3JlIGNvbnRhaW5lcnNcbiAgICogYXJlIHNob3duLiAgVXNlIGdvb2cudWkuQ29udGFpbmVyLkV2ZW50VHlwZS5BRlRFUl9TSE9XIGlmIHlvdSB3YW50IGFuIGV2ZW50XG4gICAqIHRoYXQgZmlyZXMgYWZ0ZXIgYSBnb29nLnVpLkNvbnRhaW5lciBpcyBzaG93bi5cbiAgICovXG4gIFNIT1c6ICdzaG93JyxcblxuICAvKiogRGlzcGF0Y2hlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBiZWNvbWVzIGhpZGRlbi4gKi9cbiAgSElERTogJ2hpZGUnLFxuXG4gIC8qKiBEaXNwYXRjaGVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGJlY29tZXMgZGlzYWJsZWQuICovXG4gIERJU0FCTEU6ICdkaXNhYmxlJyxcblxuICAvKiogRGlzcGF0Y2hlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBiZWNvbWVzIGVuYWJsZWQuICovXG4gIEVOQUJMRTogJ2VuYWJsZScsXG5cbiAgLyoqIERpc3BhdGNoZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgYmVjb21lcyBoaWdobGlnaHRlZC4gKi9cbiAgSElHSExJR0hUOiAnaGlnaGxpZ2h0JyxcblxuICAvKiogRGlzcGF0Y2hlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBiZWNvbWVzIHVuLWhpZ2hsaWdodGVkLiAqL1xuICBVTkhJR0hMSUdIVDogJ3VuaGlnaGxpZ2h0JyxcblxuICAvKiogRGlzcGF0Y2hlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBiZWNvbWVzIGFjdGl2YXRlZC4gKi9cbiAgQUNUSVZBVEU6ICdhY3RpdmF0ZScsXG5cbiAgLyoqIERpc3BhdGNoZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgYmVjb21lcyBkZWFjdGl2YXRlZC4gKi9cbiAgREVBQ1RJVkFURTogJ2RlYWN0aXZhdGUnLFxuXG4gIC8qKiBEaXNwYXRjaGVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGJlY29tZXMgc2VsZWN0ZWQuICovXG4gIFNFTEVDVDogJ3NlbGVjdCcsXG5cbiAgLyoqIERpc3BhdGNoZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgYmVjb21lcyB1bi1zZWxlY3RlZC4gKi9cbiAgVU5TRUxFQ1Q6ICd1bnNlbGVjdCcsXG5cbiAgLyoqIERpc3BhdGNoZWQgYmVmb3JlIGEgY29tcG9uZW50IGJlY29tZXMgY2hlY2tlZC4gKi9cbiAgQ0hFQ0s6ICdjaGVjaycsXG5cbiAgLyoqIERpc3BhdGNoZWQgYmVmb3JlIGEgY29tcG9uZW50IGJlY29tZXMgdW4tY2hlY2tlZC4gKi9cbiAgVU5DSEVDSzogJ3VuY2hlY2snLFxuXG4gIC8qKiBEaXNwYXRjaGVkIGJlZm9yZSBhIGNvbXBvbmVudCBiZWNvbWVzIGZvY3VzZWQuICovXG4gIEZPQ1VTOiAnZm9jdXMnLFxuXG4gIC8qKiBEaXNwYXRjaGVkIGJlZm9yZSBhIGNvbXBvbmVudCBiZWNvbWVzIGJsdXJyZWQuICovXG4gIEJMVVI6ICdibHVyJyxcblxuICAvKiogRGlzcGF0Y2hlZCBiZWZvcmUgYSBjb21wb25lbnQgaXMgb3BlbmVkIChleHBhbmRlZCkuICovXG4gIE9QRU46ICdvcGVuJyxcblxuICAvKiogRGlzcGF0Y2hlZCBiZWZvcmUgYSBjb21wb25lbnQgaXMgY2xvc2VkIChjb2xsYXBzZWQpLiAqL1xuICBDTE9TRTogJ2Nsb3NlJyxcblxuICAvKiogRGlzcGF0Y2hlZCBhZnRlciBhIGNvbXBvbmVudCBpcyBtb3VzZWQgb3Zlci4gKi9cbiAgRU5URVI6ICdlbnRlcicsXG5cbiAgLyoqIERpc3BhdGNoZWQgYWZ0ZXIgYSBjb21wb25lbnQgaXMgbW91c2VkIG91dCBvZi4gKi9cbiAgTEVBVkU6ICdsZWF2ZScsXG5cbiAgLyoqIERpc3BhdGNoZWQgYWZ0ZXIgdGhlIHVzZXIgYWN0aXZhdGVzIHRoZSBjb21wb25lbnQuICovXG4gIEFDVElPTjogJ2FjdGlvbicsXG5cbiAgLyoqIERpc3BhdGNoZWQgYWZ0ZXIgdGhlIGV4dGVybmFsLWZhY2luZyBzdGF0ZSBvZiBhIGNvbXBvbmVudCBpcyBjaGFuZ2VkLiAqL1xuICBDSEFOR0U6ICdjaGFuZ2UnXG59O1xuXG5cbi8qKlxuICogRXJyb3JzIHRocm93biBieSB0aGUgY29tcG9uZW50LlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZ29vZy51aS5Db21wb25lbnQuRXJyb3IgPSB7XG4gIC8qKlxuICAgKiBFcnJvciB3aGVuIGEgbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQuXG4gICAqL1xuICBOT1RfU1VQUE9SVEVEOiAnTWV0aG9kIG5vdCBzdXBwb3J0ZWQnLFxuXG4gIC8qKlxuICAgKiBFcnJvciB3aGVuIHRoZSBnaXZlbiBlbGVtZW50IGNhbiBub3QgYmUgZGVjb3JhdGVkLlxuICAgKi9cbiAgREVDT1JBVEVfSU5WQUxJRDogJ0ludmFsaWQgZWxlbWVudCB0byBkZWNvcmF0ZScsXG5cbiAgLyoqXG4gICAqIEVycm9yIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBhbHJlYWR5IHJlbmRlcmVkIGFuZCBhbm90aGVyIHJlbmRlciBhdHRlbXB0IGlzXG4gICAqIG1hZGUuXG4gICAqL1xuICBBTFJFQURZX1JFTkRFUkVEOiAnQ29tcG9uZW50IGFscmVhZHkgcmVuZGVyZWQnLFxuXG4gIC8qKlxuICAgKiBFcnJvciB3aGVuIGFuIGF0dGVtcHQgaXMgbWFkZSB0byBzZXQgdGhlIHBhcmVudCBvZiBhIGNvbXBvbmVudCBpbiBhIHdheVxuICAgKiB0aGF0IHdvdWxkIHJlc3VsdCBpbiBhbiBpbmNvbnNpc3RlbnQgb2JqZWN0IGdyYXBoLlxuICAgKi9cbiAgUEFSRU5UX1VOQUJMRV9UT19CRV9TRVQ6ICdVbmFibGUgdG8gc2V0IHBhcmVudCBjb21wb25lbnQnLFxuXG4gIC8qKlxuICAgKiBFcnJvciB3aGVuIGFuIGF0dGVtcHQgaXMgbWFkZSB0byBhZGQgYSBjaGlsZCBjb21wb25lbnQgYXQgYW4gb3V0LW9mLWJvdW5kc1xuICAgKiBpbmRleC4gIFdlIGRvbid0IHN1cHBvcnQgc3BhcnNlIGNoaWxkIGFycmF5cy5cbiAgICovXG4gIENISUxEX0lOREVYX09VVF9PRl9CT1VORFM6ICdDaGlsZCBjb21wb25lbnQgaW5kZXggb3V0IG9mIGJvdW5kcycsXG5cbiAgLyoqXG4gICAqIEVycm9yIHdoZW4gYW4gYXR0ZW1wdCBpcyBtYWRlIHRvIHJlbW92ZSBhIGNoaWxkIGNvbXBvbmVudCBmcm9tIGEgY29tcG9uZW50XG4gICAqIG90aGVyIHRoYW4gaXRzIHBhcmVudC5cbiAgICovXG4gIE5PVF9PVVJfQ0hJTEQ6ICdDaGlsZCBpcyBub3QgaW4gcGFyZW50IGNvbXBvbmVudCcsXG5cbiAgLyoqXG4gICAqIEVycm9yIHdoZW4gYW4gb3BlcmF0aW9uIHJlcXVpcmluZyBET00gaW50ZXJhY3Rpb24gaXMgbWFkZSB3aGVuIHRoZVxuICAgKiBjb21wb25lbnQgaXMgbm90IGluIHRoZSBkb2N1bWVudFxuICAgKi9cbiAgTk9UX0lOX0RPQ1VNRU5UOiAnT3BlcmF0aW9uIG5vdCBzdXBwb3J0ZWQgd2hpbGUgY29tcG9uZW50IGlzIG5vdCBpbiBkb2N1bWVudCcsXG5cbiAgLyoqXG4gICAqIEVycm9yIHdoZW4gYW4gaW52YWxpZCBjb21wb25lbnQgc3RhdGUgaXMgZW5jb3VudGVyZWQuXG4gICAqL1xuICBTVEFURV9JTlZBTElEOiAnSW52YWxpZCBjb21wb25lbnQgc3RhdGUnXG59O1xuXG5cbi8qKlxuICogQ29tbW9uIGNvbXBvbmVudCBzdGF0ZXMuICBDb21wb25lbnRzIG1heSBoYXZlIGRpc3RpbmN0IGFwcGVhcmFuY2UgZGVwZW5kaW5nXG4gKiBvbiB3aGF0IHN0YXRlKHMpIGFwcGx5IHRvIHRoZW0uICBOb3QgYWxsIGNvbXBvbmVudHMgYXJlIGV4cGVjdGVkIHRvIHN1cHBvcnRcbiAqIGFsbCBzdGF0ZXMuXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5nb29nLnVpLkNvbXBvbmVudC5TdGF0ZSA9IHtcbiAgLyoqXG4gICAqIFVuaW9uIG9mIGFsbCBzdXBwb3J0ZWQgY29tcG9uZW50IHN0YXRlcy5cbiAgICovXG4gIEFMTDogMHhGRixcblxuICAvKipcbiAgICogQ29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAc2VlIGdvb2cudWkuQ29tcG9uZW50LkV2ZW50VHlwZS5ESVNBQkxFXG4gICAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQuRXZlbnRUeXBlLkVOQUJMRVxuICAgKi9cbiAgRElTQUJMRUQ6IDB4MDEsXG5cbiAgLyoqXG4gICAqIENvbXBvbmVudCBpcyBoaWdobGlnaHRlZC5cbiAgICogQHNlZSBnb29nLnVpLkNvbXBvbmVudC5FdmVudFR5cGUuSElHSExJR0hUXG4gICAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQuRXZlbnRUeXBlLlVOSElHSExJR0hUXG4gICAqL1xuICBIT1ZFUjogMHgwMixcblxuICAvKipcbiAgICogQ29tcG9uZW50IGlzIGFjdGl2ZSAob3IgXCJwcmVzc2VkXCIpLlxuICAgKiBAc2VlIGdvb2cudWkuQ29tcG9uZW50LkV2ZW50VHlwZS5BQ1RJVkFURVxuICAgKiBAc2VlIGdvb2cudWkuQ29tcG9uZW50LkV2ZW50VHlwZS5ERUFDVElWQVRFXG4gICAqL1xuICBBQ1RJVkU6IDB4MDQsXG5cbiAgLyoqXG4gICAqIENvbXBvbmVudCBpcyBzZWxlY3RlZC5cbiAgICogQHNlZSBnb29nLnVpLkNvbXBvbmVudC5FdmVudFR5cGUuU0VMRUNUXG4gICAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQuRXZlbnRUeXBlLlVOU0VMRUNUXG4gICAqL1xuICBTRUxFQ1RFRDogMHgwOCxcblxuICAvKipcbiAgICogQ29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQuRXZlbnRUeXBlLkNIRUNLXG4gICAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQuRXZlbnRUeXBlLlVOQ0hFQ0tcbiAgICovXG4gIENIRUNLRUQ6IDB4MTAsXG5cbiAgLyoqXG4gICAqIENvbXBvbmVudCBoYXMgZm9jdXMuXG4gICAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQuRXZlbnRUeXBlLkZPQ1VTXG4gICAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQuRXZlbnRUeXBlLkJMVVJcbiAgICovXG4gIEZPQ1VTRUQ6IDB4MjAsXG5cbiAgLyoqXG4gICAqIENvbXBvbmVudCBpcyBvcGVuZWQgKGV4cGFuZGVkKS4gIEFwcGxpZXMgdG8gdHJlZSBub2RlcywgbWVudSBidXR0b25zLFxuICAgKiBzdWJtZW51cywgemlwcHlzICh6aXBwaWVzPyksIGV0Yy5cbiAgICogQHNlZSBnb29nLnVpLkNvbXBvbmVudC5FdmVudFR5cGUuT1BFTlxuICAgKiBAc2VlIGdvb2cudWkuQ29tcG9uZW50LkV2ZW50VHlwZS5DTE9TRVxuICAgKi9cbiAgT1BFTkVEOiAweDQwXG59O1xuXG5cbi8qKlxuICogU3RhdGljIGhlbHBlciBtZXRob2Q7IHJldHVybnMgdGhlIHR5cGUgb2YgZXZlbnQgY29tcG9uZW50cyBhcmUgZXhwZWN0ZWQgdG9cbiAqIGRpc3BhdGNoIHdoZW4gdHJhbnNpdGlvbmluZyB0byBvciBmcm9tIHRoZSBnaXZlbiBzdGF0ZS5cbiAqIEBwYXJhbSB7Z29vZy51aS5Db21wb25lbnQuU3RhdGV9IHN0YXRlIFN0YXRlIHRvL2Zyb20gd2hpY2ggdGhlIGNvbXBvbmVudFxuICogICAgIGlzIHRyYW5zaXRpb25pbmcuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzRW50ZXJpbmcgV2hldGhlciB0aGUgY29tcG9uZW50IGlzIGVudGVyaW5nIG9yIGxlYXZpbmcgdGhlXG4gKiAgICAgc3RhdGUuXG4gKiBAcmV0dXJuIHtnb29nLnVpLkNvbXBvbmVudC5FdmVudFR5cGV9IEV2ZW50IHR5cGUgdG8gZGlzcGF0Y2guXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LmdldFN0YXRlVHJhbnNpdGlvbkV2ZW50ID0gZnVuY3Rpb24oc3RhdGUsIGlzRW50ZXJpbmcpIHtcbiAgc3dpdGNoIChzdGF0ZSkge1xuICAgIGNhc2UgZ29vZy51aS5Db21wb25lbnQuU3RhdGUuRElTQUJMRUQ6XG4gICAgICByZXR1cm4gaXNFbnRlcmluZyA/IGdvb2cudWkuQ29tcG9uZW50LkV2ZW50VHlwZS5ESVNBQkxFIDpcbiAgICAgICAgICBnb29nLnVpLkNvbXBvbmVudC5FdmVudFR5cGUuRU5BQkxFO1xuICAgIGNhc2UgZ29vZy51aS5Db21wb25lbnQuU3RhdGUuSE9WRVI6XG4gICAgICByZXR1cm4gaXNFbnRlcmluZyA/IGdvb2cudWkuQ29tcG9uZW50LkV2ZW50VHlwZS5ISUdITElHSFQgOlxuICAgICAgICAgIGdvb2cudWkuQ29tcG9uZW50LkV2ZW50VHlwZS5VTkhJR0hMSUdIVDtcbiAgICBjYXNlIGdvb2cudWkuQ29tcG9uZW50LlN0YXRlLkFDVElWRTpcbiAgICAgIHJldHVybiBpc0VudGVyaW5nID8gZ29vZy51aS5Db21wb25lbnQuRXZlbnRUeXBlLkFDVElWQVRFIDpcbiAgICAgICAgICBnb29nLnVpLkNvbXBvbmVudC5FdmVudFR5cGUuREVBQ1RJVkFURTtcbiAgICBjYXNlIGdvb2cudWkuQ29tcG9uZW50LlN0YXRlLlNFTEVDVEVEOlxuICAgICAgcmV0dXJuIGlzRW50ZXJpbmcgPyBnb29nLnVpLkNvbXBvbmVudC5FdmVudFR5cGUuU0VMRUNUIDpcbiAgICAgICAgICBnb29nLnVpLkNvbXBvbmVudC5FdmVudFR5cGUuVU5TRUxFQ1Q7XG4gICAgY2FzZSBnb29nLnVpLkNvbXBvbmVudC5TdGF0ZS5DSEVDS0VEOlxuICAgICAgcmV0dXJuIGlzRW50ZXJpbmcgPyBnb29nLnVpLkNvbXBvbmVudC5FdmVudFR5cGUuQ0hFQ0sgOlxuICAgICAgICAgIGdvb2cudWkuQ29tcG9uZW50LkV2ZW50VHlwZS5VTkNIRUNLO1xuICAgIGNhc2UgZ29vZy51aS5Db21wb25lbnQuU3RhdGUuRk9DVVNFRDpcbiAgICAgIHJldHVybiBpc0VudGVyaW5nID8gZ29vZy51aS5Db21wb25lbnQuRXZlbnRUeXBlLkZPQ1VTIDpcbiAgICAgICAgICBnb29nLnVpLkNvbXBvbmVudC5FdmVudFR5cGUuQkxVUjtcbiAgICBjYXNlIGdvb2cudWkuQ29tcG9uZW50LlN0YXRlLk9QRU5FRDpcbiAgICAgIHJldHVybiBpc0VudGVyaW5nID8gZ29vZy51aS5Db21wb25lbnQuRXZlbnRUeXBlLk9QRU4gOlxuICAgICAgICAgIGdvb2cudWkuQ29tcG9uZW50LkV2ZW50VHlwZS5DTE9TRTtcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gRmFsbCB0aHJvdWdoLlxuICB9XG5cbiAgLy8gSW52YWxpZCBzdGF0ZS5cbiAgdGhyb3cgRXJyb3IoZ29vZy51aS5Db21wb25lbnQuRXJyb3IuU1RBVEVfSU5WQUxJRCk7XG59O1xuXG5cbi8qKlxuICogU2V0IHRoZSBkZWZhdWx0IHJpZ2h0LXRvLWxlZnQgdmFsdWUuIFRoaXMgY2F1c2VzIGFsbCBjb21wb25lbnQncyBjcmVhdGVkIGZyb21cbiAqIHRoaXMgcG9pbnQgZm93YXJkIHRvIGhhdmUgdGhlIGdpdmVuIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgY2FzZXMgd2hlcmVcbiAqIGEgZ2l2ZW4gcGFnZSBpcyBhbHdheXMgaW4gb25lIGRpcmVjdGlvbmFsaXR5LCBhdm9pZGluZyB1bm5lY2Vzc2FyeVxuICogcmlnaHQgdG8gbGVmdCBkZXRlcm1pbmF0aW9ucy5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IHJpZ2h0VG9MZWZ0IFdoZXRoZXIgdGhlIGNvbXBvbmVudHMgc2hvdWxkIGJlIHJlbmRlcmVkXG4gKiAgICAgcmlnaHQtdG8tbGVmdC4gTnVsbCBpZmYgY29tcG9uZW50cyBzaG91bGQgZGV0ZXJtaW5lIHRoZWlyIGRpcmVjdGlvbmFsaXR5LlxuICovXG5nb29nLnVpLkNvbXBvbmVudC5zZXREZWZhdWx0UmlnaHRUb0xlZnQgPSBmdW5jdGlvbihyaWdodFRvTGVmdCkge1xuICBnb29nLnVpLkNvbXBvbmVudC5kZWZhdWx0UmlnaHRUb0xlZnRfID0gcmlnaHRUb0xlZnQ7XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgdW5pcXVlIElEIGZvciB0aGUgaW5zdGFuY2Ugb2YgdGhpcyBjb21wb25lbnQuICBJZiB0aGUgaW5zdGFuY2VcbiAqIGRvZXNuJ3QgYWxyZWFkeSBoYXZlIGFuIElELCBnZW5lcmF0ZXMgb25lIG9uIHRoZSBmbHkuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFVuaXF1ZSBjb21wb25lbnQgSUQuXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5nZXRJZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5pZF8gfHwgKHRoaXMuaWRfID0gdGhpcy5pZEdlbmVyYXRvcl8uZ2V0TmV4dFVuaXF1ZUlkKCkpO1xufTtcblxuXG4vKipcbiAqIEFzc2lnbnMgYW4gSUQgdG8gdGhpcyBjb21wb25lbnQgaW5zdGFuY2UuICBJdCBpcyB0aGUgY2FsbGVyJ3MgcmVzcG9uc2liaWxpdHlcbiAqIHRvIGd1YXJhbnRlZSB0aGF0IHRoZSBJRCBpcyB1bmlxdWUuICBJZiB0aGUgY29tcG9uZW50IGlzIGEgY2hpbGQgb2YgYSBwYXJlbnRcbiAqIGNvbXBvbmVudCwgdGhlbiB0aGUgcGFyZW50IGNvbXBvbmVudCdzIGNoaWxkIGluZGV4IGlzIHVwZGF0ZWQgdG8gcmVmbGVjdCB0aGVcbiAqIG5ldyBJRDsgdGhpcyBtYXkgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIHBhcmVudCBhbHJlYWR5IGhhcyBhIGNoaWxkIHdpdGggYW4gSURcbiAqIHRoYXQgY29uZmxpY3RzIHdpdGggdGhlIG5ldyBJRC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBVbmlxdWUgY29tcG9uZW50IElELlxuICovXG5nb29nLnVpLkNvbXBvbmVudC5wcm90b3R5cGUuc2V0SWQgPSBmdW5jdGlvbihpZCkge1xuICBpZiAodGhpcy5wYXJlbnRfICYmIHRoaXMucGFyZW50Xy5jaGlsZEluZGV4Xykge1xuICAgIC8vIFVwZGF0ZSB0aGUgcGFyZW50J3MgY2hpbGQgaW5kZXguXG4gICAgZ29vZy5vYmplY3QucmVtb3ZlKHRoaXMucGFyZW50Xy5jaGlsZEluZGV4XywgdGhpcy5pZF8pO1xuICAgIGdvb2cub2JqZWN0LmFkZCh0aGlzLnBhcmVudF8uY2hpbGRJbmRleF8sIGlkLCB0aGlzKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSB0aGUgY29tcG9uZW50IElELlxuICB0aGlzLmlkXyA9IGlkO1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIGNvbXBvbmVudCdzIGVsZW1lbnQuXG4gKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgZWxlbWVudCBmb3IgdGhlIGNvbXBvbmVudC5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLmdldEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWxlbWVudF87XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgY29tcG9uZW50J3MgZWxlbWVudC4gVGhpcyBkaWZmZXJzIGZyb20gZ2V0RWxlbWVudCBpbiB0aGF0XG4gKiBpdCBhc3N1bWVzIHRoYXQgdGhlIGVsZW1lbnQgZXhpc3RzIChpLmUuIHRoZSBjb21wb25lbnQgaGFzIGJlZW5cbiAqIHJlbmRlcmVkL2RlY29yYXRlZCkgYW5kIHdpbGwgY2F1c2UgYW4gYXNzZXJ0aW9uIGVycm9yIG90aGVyd2lzZSAoaWZcbiAqIGFzc2VydGlvbiBpcyBlbmFibGVkKS5cbiAqIEByZXR1cm4geyFFbGVtZW50fSBUaGUgZWxlbWVudCBmb3IgdGhlIGNvbXBvbmVudC5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLmdldEVsZW1lbnRTdHJpY3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGVsID0gdGhpcy5lbGVtZW50XztcbiAgZ29vZy5hc3NlcnRzLmFzc2VydChcbiAgICAgIGVsLCAnQ2FuIG5vdCBjYWxsIGdldEVsZW1lbnRTdHJpY3QgYmVmb3JlIHJlbmRlcmluZy9kZWNvcmF0aW5nLicpO1xuICByZXR1cm4gZWw7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgY29tcG9uZW50J3Mgcm9vdCBlbGVtZW50IHRvIHRoZSBnaXZlbiBlbGVtZW50LiAgQ29uc2lkZXJlZFxuICogcHJvdGVjdGVkIGFuZCBmaW5hbC5cbiAqXG4gKiBUaGlzIHNob3VsZCBnZW5lcmFsbHkgb25seSBiZSBjYWxsZWQgZHVyaW5nIGNyZWF0ZURvbS4gU2V0dGluZyB0aGUgZWxlbWVudFxuICogZG9lcyBub3QgYWN0dWFsbHkgY2hhbmdlIHdoaWNoIGVsZW1lbnQgaXMgcmVuZGVyZWQsIG9ubHkgdGhlIGVsZW1lbnQgdGhhdCBpc1xuICogYXNzb2NpYXRlZCB3aXRoIHRoaXMgVUkgY29tcG9uZW50LlxuICpcbiAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCBieSBzdWJjbGFzc2VzIGFuZCBpdHMgYXNzb2NpYXRlZCByZW5kZXJlcnMuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFJvb3QgZWxlbWVudCBmb3IgdGhlIGNvbXBvbmVudC5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLnNldEVsZW1lbnRJbnRlcm5hbCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgdGhpcy5lbGVtZW50XyA9IGVsZW1lbnQ7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBhbGwgdGhlIGVsZW1lbnRzIGluIHRoaXMgY29tcG9uZW50J3MgRE9NIHdpdGggdGhlXG4gKiBwcm92aWRlZCBjbGFzc05hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIFRoZSBuYW1lIG9mIHRoZSBjbGFzcyB0byBsb29rIGZvci5cbiAqIEByZXR1cm4geyFnb29nLmFycmF5LkFycmF5TGlrZX0gVGhlIGl0ZW1zIGZvdW5kIHdpdGggdGhlIGNsYXNzIG5hbWUgcHJvdmlkZWQuXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5Q2xhc3MgPSBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWxlbWVudF8gP1xuICAgICAgdGhpcy5kb21fLmdldEVsZW1lbnRzQnlDbGFzcyhjbGFzc05hbWUsIHRoaXMuZWxlbWVudF8pIDogW107XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGlzIGNvbXBvbmVudCdzIERPTSB3aXRoIHRoZSBwcm92aWRlZFxuICogY2xhc3NOYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBUaGUgbmFtZSBvZiB0aGUgY2xhc3MgdG8gbG9vayBmb3IuXG4gKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgZmlyc3QgaXRlbSB3aXRoIHRoZSBjbGFzcyBuYW1lIHByb3ZpZGVkLlxuICovXG5nb29nLnVpLkNvbXBvbmVudC5wcm90b3R5cGUuZ2V0RWxlbWVudEJ5Q2xhc3MgPSBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWxlbWVudF8gP1xuICAgICAgdGhpcy5kb21fLmdldEVsZW1lbnRCeUNsYXNzKGNsYXNzTmFtZSwgdGhpcy5lbGVtZW50XykgOiBudWxsO1xufTtcblxuXG4vKipcbiAqIFNpbWlsYXIgdG8ge0Bjb2RlIGdldEVsZW1lbnRCeUNsYXNzfSBleGNlcHQgdGhhdCBpdCBleHBlY3RzIHRoZVxuICogZWxlbWVudCB0byBiZSBwcmVzZW50IGluIHRoZSBkb20gdGh1cyByZXR1cm5pbmcgYSByZXF1aXJlZCB2YWx1ZS4gT3RoZXJ3aXNlLFxuICogd2lsbCBhc3NlcnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIFRoZSBuYW1lIG9mIHRoZSBjbGFzcyB0byBsb29rIGZvci5cbiAqIEByZXR1cm4geyFFbGVtZW50fSBUaGUgZmlyc3QgaXRlbSB3aXRoIHRoZSBjbGFzcyBuYW1lIHByb3ZpZGVkLlxuICovXG5nb29nLnVpLkNvbXBvbmVudC5wcm90b3R5cGUuZ2V0UmVxdWlyZWRFbGVtZW50QnlDbGFzcyA9IGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICB2YXIgZWwgPSB0aGlzLmdldEVsZW1lbnRCeUNsYXNzKGNsYXNzTmFtZSk7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoZWwsICdFeHBlY3RlZCBlbGVtZW50IGluIGNvbXBvbmVudCB3aXRoIGNsYXNzOiAlcycsXG4gICAgICBjbGFzc05hbWUpO1xuICByZXR1cm4gZWw7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXZlbnQgaGFuZGxlciBmb3IgdGhpcyBjb21wb25lbnQsIGxhemlseSBjcmVhdGVkIHRoZSBmaXJzdCB0aW1lXG4gKiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQuXG4gKiBAcmV0dXJuIHshZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyPFQ+fSBFdmVudCBoYW5kbGVyIGZvciB0aGlzIGNvbXBvbmVudC5cbiAqIEBwcm90ZWN0ZWRcbiAqIEB0aGlzIHtUfVxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLmdldEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgLy8gVE9ETyh1c2VyKTogdGVtcGxhdGVkIFwidGhpc1wiIHZhbHVlcyBjdXJyZW50bHkgcmVzdWx0IGluIFwidGhpc1wiIGJlaW5nXG4gIC8vIFwidW5rbm93blwiIGluIHRoZSBib2R5IG9mIHRoZSBmdW5jdGlvbi5cbiAgdmFyIHNlbGYgPSAvKiogQHR5cGUge2dvb2cudWkuQ29tcG9uZW50fSAqLyAodGhpcyk7XG4gIGlmICghc2VsZi5nb29nVWlDb21wb25lbnRIYW5kbGVyXykge1xuICAgIHNlbGYuZ29vZ1VpQ29tcG9uZW50SGFuZGxlcl8gPSBuZXcgZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyKHNlbGYpO1xuICB9XG4gIHJldHVybiBzZWxmLmdvb2dVaUNvbXBvbmVudEhhbmRsZXJfO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIHBhcmVudCBvZiB0aGlzIGNvbXBvbmVudCB0byB1c2UgZm9yIGV2ZW50IGJ1YmJsaW5nLiAgVGhyb3dzIGFuIGVycm9yXG4gKiBpZiB0aGUgY29tcG9uZW50IGFscmVhZHkgaGFzIGEgcGFyZW50IG9yIGlmIGFuIGF0dGVtcHQgaXMgbWFkZSB0byBhZGQgYVxuICogY29tcG9uZW50IHRvIGl0c2VsZiBhcyBhIGNoaWxkLiAgQ2FsbGVycyBtdXN0IHVzZSB7QGNvZGUgcmVtb3ZlQ2hpbGR9XG4gKiBvciB7QGNvZGUgcmVtb3ZlQ2hpbGRBdH0gdG8gcmVtb3ZlIGNvbXBvbmVudHMgZnJvbSB0aGVpciBjb250YWluZXJzIGJlZm9yZVxuICogY2FsbGluZyB0aGlzIG1ldGhvZC5cbiAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQjcmVtb3ZlQ2hpbGRcbiAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQjcmVtb3ZlQ2hpbGRBdFxuICogQHBhcmFtIHtnb29nLnVpLkNvbXBvbmVudH0gcGFyZW50IFRoZSBwYXJlbnQgY29tcG9uZW50LlxuICovXG5nb29nLnVpLkNvbXBvbmVudC5wcm90b3R5cGUuc2V0UGFyZW50ID0gZnVuY3Rpb24ocGFyZW50KSB7XG4gIGlmICh0aGlzID09IHBhcmVudCkge1xuICAgIC8vIEF0dGVtcHRpbmcgdG8gYWRkIGEgY2hpbGQgdG8gaXRzZWxmIGlzIGFuIGVycm9yLlxuICAgIHRocm93IEVycm9yKGdvb2cudWkuQ29tcG9uZW50LkVycm9yLlBBUkVOVF9VTkFCTEVfVE9fQkVfU0VUKTtcbiAgfVxuXG4gIGlmIChwYXJlbnQgJiYgdGhpcy5wYXJlbnRfICYmIHRoaXMuaWRfICYmIHRoaXMucGFyZW50Xy5nZXRDaGlsZCh0aGlzLmlkXykgJiZcbiAgICAgIHRoaXMucGFyZW50XyAhPSBwYXJlbnQpIHtcbiAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBhbHJlYWR5IHRoZSBjaGlsZCBvZiBzb21lIHBhcmVudCwgc28gaXQgc2hvdWxkIGJlXG4gICAgLy8gcmVtb3ZlZCB1c2luZyByZW1vdmVDaGlsZC9yZW1vdmVDaGlsZEF0IGZpcnN0LlxuICAgIHRocm93IEVycm9yKGdvb2cudWkuQ29tcG9uZW50LkVycm9yLlBBUkVOVF9VTkFCTEVfVE9fQkVfU0VUKTtcbiAgfVxuXG4gIHRoaXMucGFyZW50XyA9IHBhcmVudDtcbiAgZ29vZy51aS5Db21wb25lbnQuc3VwZXJDbGFzc18uc2V0UGFyZW50RXZlbnRUYXJnZXQuY2FsbCh0aGlzLCBwYXJlbnQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvbXBvbmVudCdzIHBhcmVudCwgaWYgYW55LlxuICogQHJldHVybiB7Z29vZy51aS5Db21wb25lbnQ/fSBUaGUgcGFyZW50IGNvbXBvbmVudC5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLmdldFBhcmVudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnRfO1xufTtcblxuXG4vKipcbiAqIE92ZXJyaWRlcyB7QGxpbmsgZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQjc2V0UGFyZW50RXZlbnRUYXJnZXR9IHRvIHRocm93IGFuXG4gKiBlcnJvciBpZiB0aGUgcGFyZW50IGNvbXBvbmVudCBpcyBzZXQsIGFuZCB0aGUgYXJndW1lbnQgaXMgbm90IHRoZSBwYXJlbnQuXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLnNldFBhcmVudEV2ZW50VGFyZ2V0ID0gZnVuY3Rpb24ocGFyZW50KSB7XG4gIGlmICh0aGlzLnBhcmVudF8gJiYgdGhpcy5wYXJlbnRfICE9IHBhcmVudCkge1xuICAgIHRocm93IEVycm9yKGdvb2cudWkuQ29tcG9uZW50LkVycm9yLk5PVF9TVVBQT1JURUQpO1xuICB9XG4gIGdvb2cudWkuQ29tcG9uZW50LnN1cGVyQ2xhc3NfLnNldFBhcmVudEV2ZW50VGFyZ2V0LmNhbGwodGhpcywgcGFyZW50KTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkb20gaGVscGVyIHRoYXQgaXMgYmVpbmcgdXNlZCBvbiB0aGlzIGNvbXBvbmVudC5cbiAqIEByZXR1cm4geyFnb29nLmRvbS5Eb21IZWxwZXJ9IFRoZSBkb20gaGVscGVyIHVzZWQgb24gdGhpcyBjb21wb25lbnQuXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5nZXREb21IZWxwZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZG9tXztcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBhZGRlZCB0byB0aGUgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUUlVFIGlmIHJlbmRlcmVkLiBPdGhlcndpc2UsIEZBTFNFLlxuICovXG5nb29nLnVpLkNvbXBvbmVudC5wcm90b3R5cGUuaXNJbkRvY3VtZW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmluRG9jdW1lbnRfO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGluaXRpYWwgRE9NIHJlcHJlc2VudGF0aW9uIGZvciB0aGUgY29tcG9uZW50LiAgVGhlIGRlZmF1bHRcbiAqIGltcGxlbWVudGF0aW9uIGlzIHRvIHNldCB0aGlzLmVsZW1lbnRfID0gZGl2LlxuICovXG5nb29nLnVpLkNvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRG9tID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudF8gPSB0aGlzLmRvbV8uY3JlYXRlRWxlbWVudChnb29nLmRvbS5UYWdOYW1lLkRJVik7XG59O1xuXG5cbi8qKlxuICogUmVuZGVycyB0aGUgY29tcG9uZW50LiAgSWYgYSBwYXJlbnQgZWxlbWVudCBpcyBzdXBwbGllZCwgdGhlIGNvbXBvbmVudCdzXG4gKiBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWQgdG8gaXQuICBJZiB0aGVyZSBpcyBubyBvcHRpb25hbCBwYXJlbnQgZWxlbWVudCBhbmRcbiAqIHRoZSBlbGVtZW50IGRvZXNuJ3QgaGF2ZSBhIHBhcmVudE5vZGUgdGhlbiBpdCB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZVxuICogZG9jdW1lbnQgYm9keS5cbiAqXG4gKiBJZiB0aGlzIGNvbXBvbmVudCBoYXMgYSBwYXJlbnQgY29tcG9uZW50LCBhbmQgdGhlIHBhcmVudCBjb21wb25lbnQgaXNcbiAqIG5vdCBpbiB0aGUgZG9jdW1lbnQgYWxyZWFkeSwgdGhlbiB0aGlzIHdpbGwgbm90IGNhbGwge0Bjb2RlIGVudGVyRG9jdW1lbnR9XG4gKiBvbiB0aGlzIGNvbXBvbmVudC5cbiAqXG4gKiBUaHJvd3MgYW4gRXJyb3IgaWYgdGhlIGNvbXBvbmVudCBpcyBhbHJlYWR5IHJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudD19IG9wdF9wYXJlbnRFbGVtZW50IE9wdGlvbmFsIHBhcmVudCBlbGVtZW50IHRvIHJlbmRlciB0aGVcbiAqICAgIGNvbXBvbmVudCBpbnRvLlxuICovXG5nb29nLnVpLkNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24ob3B0X3BhcmVudEVsZW1lbnQpIHtcbiAgdGhpcy5yZW5kZXJfKG9wdF9wYXJlbnRFbGVtZW50KTtcbn07XG5cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBjb21wb25lbnQgYmVmb3JlIGFub3RoZXIgZWxlbWVudC4gVGhlIG90aGVyIGVsZW1lbnQgc2hvdWxkIGJlIGluXG4gKiB0aGUgZG9jdW1lbnQgYWxyZWFkeS5cbiAqXG4gKiBUaHJvd3MgYW4gRXJyb3IgaWYgdGhlIGNvbXBvbmVudCBpcyBhbHJlYWR5IHJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7Tm9kZX0gc2libGluZyBOb2RlIHRvIHJlbmRlciB0aGUgY29tcG9uZW50IGJlZm9yZS5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLnJlbmRlckJlZm9yZSA9IGZ1bmN0aW9uKHNpYmxpbmcpIHtcbiAgdGhpcy5yZW5kZXJfKC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKHNpYmxpbmcucGFyZW50Tm9kZSksXG4gICAgICAgICAgICAgICBzaWJsaW5nKTtcbn07XG5cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBjb21wb25lbnQuICBJZiBhIHBhcmVudCBlbGVtZW50IGlzIHN1cHBsaWVkLCB0aGUgY29tcG9uZW50J3NcbiAqIGVsZW1lbnQgd2lsbCBiZSBhcHBlbmRlZCB0byBpdC4gIElmIHRoZXJlIGlzIG5vIG9wdGlvbmFsIHBhcmVudCBlbGVtZW50IGFuZFxuICogdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGEgcGFyZW50Tm9kZSB0aGVuIGl0IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlXG4gKiBkb2N1bWVudCBib2R5LlxuICpcbiAqIElmIHRoaXMgY29tcG9uZW50IGhhcyBhIHBhcmVudCBjb21wb25lbnQsIGFuZCB0aGUgcGFyZW50IGNvbXBvbmVudCBpc1xuICogbm90IGluIHRoZSBkb2N1bWVudCBhbHJlYWR5LCB0aGVuIHRoaXMgd2lsbCBub3QgY2FsbCB7QGNvZGUgZW50ZXJEb2N1bWVudH1cbiAqIG9uIHRoaXMgY29tcG9uZW50LlxuICpcbiAqIFRocm93cyBhbiBFcnJvciBpZiB0aGUgY29tcG9uZW50IGlzIGFscmVhZHkgcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50PX0gb3B0X3BhcmVudEVsZW1lbnQgT3B0aW9uYWwgcGFyZW50IGVsZW1lbnQgdG8gcmVuZGVyIHRoZVxuICogICAgY29tcG9uZW50IGludG8uXG4gKiBAcGFyYW0ge05vZGU9fSBvcHRfYmVmb3JlTm9kZSBOb2RlIGJlZm9yZSB3aGljaCB0aGUgY29tcG9uZW50IGlzIHRvXG4gKiAgICBiZSByZW5kZXJlZC4gIElmIGxlZnQgb3V0IHRoZSBub2RlIGlzIGFwcGVuZGVkIHRvIHRoZSBwYXJlbnQgZWxlbWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXJfID0gZnVuY3Rpb24ob3B0X3BhcmVudEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdF9iZWZvcmVOb2RlKSB7XG4gIGlmICh0aGlzLmluRG9jdW1lbnRfKSB7XG4gICAgdGhyb3cgRXJyb3IoZ29vZy51aS5Db21wb25lbnQuRXJyb3IuQUxSRUFEWV9SRU5ERVJFRCk7XG4gIH1cblxuICBpZiAoIXRoaXMuZWxlbWVudF8pIHtcbiAgICB0aGlzLmNyZWF0ZURvbSgpO1xuICB9XG5cbiAgaWYgKG9wdF9wYXJlbnRFbGVtZW50KSB7XG4gICAgb3B0X3BhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRoaXMuZWxlbWVudF8sIG9wdF9iZWZvcmVOb2RlIHx8IG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZG9tXy5nZXREb2N1bWVudCgpLmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50Xyk7XG4gIH1cblxuICAvLyBJZiB0aGlzIGNvbXBvbmVudCBoYXMgYSBwYXJlbnQgY29tcG9uZW50IHRoYXQgaXNuJ3QgaW4gdGhlIGRvY3VtZW50IHlldCxcbiAgLy8gd2UgZG9uJ3QgY2FsbCBlbnRlckRvY3VtZW50KCkgaGVyZS4gIEluc3RlYWQsIHdoZW4gdGhlIHBhcmVudCBjb21wb25lbnRcbiAgLy8gZW50ZXJzIHRoZSBkb2N1bWVudCwgdGhlIGVudGVyRG9jdW1lbnQoKSBjYWxsIHdpbGwgcHJvcGFnYXRlIHRvIGl0c1xuICAvLyBjaGlsZHJlbiwgaW5jbHVkaW5nIHRoaXMgb25lLiAgSWYgdGhlIGNvbXBvbmVudCBkb2Vzbid0IGhhdmUgYSBwYXJlbnRcbiAgLy8gb3IgaWYgdGhlIHBhcmVudCBpcyBhbHJlYWR5IGluIHRoZSBkb2N1bWVudCwgd2UgY2FsbCBlbnRlckRvY3VtZW50KCkuXG4gIGlmICghdGhpcy5wYXJlbnRfIHx8IHRoaXMucGFyZW50Xy5pc0luRG9jdW1lbnQoKSkge1xuICAgIHRoaXMuZW50ZXJEb2N1bWVudCgpO1xuICB9XG59O1xuXG5cbi8qKlxuICogRGVjb3JhdGVzIHRoZSBlbGVtZW50IGZvciB0aGUgVUkgY29tcG9uZW50LiBJZiB0aGUgZWxlbWVudCBpcyBpbiB0aGVcbiAqIGRvY3VtZW50LCB0aGUgZW50ZXJEb2N1bWVudCBtZXRob2Qgd2lsbCBiZSBjYWxsZWQuXG4gKlxuICogSWYgZ29vZy51aS5Db21wb25lbnQuQUxMT1dfREVUQUNIRURfREVDT1JBVElPTiBpcyBmYWxzZSwgdGhlIGNhbGxlciBtdXN0XG4gKiBwYXNzIGFuIGVsZW1lbnQgdGhhdCBpcyBpbiB0aGUgZG9jdW1lbnQuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gZGVjb3JhdGUuXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5kZWNvcmF0ZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgaWYgKHRoaXMuaW5Eb2N1bWVudF8pIHtcbiAgICB0aHJvdyBFcnJvcihnb29nLnVpLkNvbXBvbmVudC5FcnJvci5BTFJFQURZX1JFTkRFUkVEKTtcbiAgfSBlbHNlIGlmIChlbGVtZW50ICYmIHRoaXMuY2FuRGVjb3JhdGUoZWxlbWVudCkpIHtcbiAgICB0aGlzLndhc0RlY29yYXRlZF8gPSB0cnVlO1xuXG4gICAgLy8gU2V0IHRoZSBET00gaGVscGVyIG9mIHRoZSBjb21wb25lbnQgdG8gbWF0Y2ggdGhlIGRlY29yYXRlZCBlbGVtZW50LlxuICAgIHZhciBkb2MgPSBnb29nLmRvbS5nZXRPd25lckRvY3VtZW50KGVsZW1lbnQpO1xuICAgIGlmICghdGhpcy5kb21fIHx8IHRoaXMuZG9tXy5nZXREb2N1bWVudCgpICE9IGRvYykge1xuICAgICAgdGhpcy5kb21fID0gZ29vZy5kb20uZ2V0RG9tSGVscGVyKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIENhbGwgc3BlY2lmaWMgY29tcG9uZW50IGRlY29yYXRlIGxvZ2ljLlxuICAgIHRoaXMuZGVjb3JhdGVJbnRlcm5hbChlbGVtZW50KTtcblxuICAgIC8vIElmIHN1cHBvcnRpbmcgZGV0YWNoZWQgZGVjb3JhdGlvbiwgY2hlY2sgdGhhdCBlbGVtZW50IGlzIGluIGRvYy5cbiAgICBpZiAoIWdvb2cudWkuQ29tcG9uZW50LkFMTE9XX0RFVEFDSEVEX0RFQ09SQVRJT04gfHxcbiAgICAgICAgZ29vZy5kb20uY29udGFpbnMoZG9jLCBlbGVtZW50KSkge1xuICAgICAgdGhpcy5lbnRlckRvY3VtZW50KCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IEVycm9yKGdvb2cudWkuQ29tcG9uZW50LkVycm9yLkRFQ09SQVRFX0lOVkFMSUQpO1xuICB9XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIGdpdmVuIGVsZW1lbnQgY2FuIGJlIGRlY29yYXRlZCBieSB0aGlzIHR5cGUgb2YgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIG92ZXJyaWRkZW4gYnkgaW5oZXJpdGluZyBvYmplY3RzLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gZGVjb3JhdGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBlbGVtZW50IGNhbiBiZSBkZWNvcmF0ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLmNhbkRlY29yYXRlID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjb21wb25lbnQgd2FzIGRlY29yYXRlZC5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLndhc0RlY29yYXRlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy53YXNEZWNvcmF0ZWRfO1xufTtcblxuXG4vKipcbiAqIEFjdHVhbGx5IGRlY29yYXRlcyB0aGUgZWxlbWVudC4gU2hvdWxkIGJlIG92ZXJyaWRkZW4gYnkgaW5oZXJpdGluZyBvYmplY3RzLlxuICogVGhpcyBtZXRob2QgY2FuIGFzc3VtZSB0aGVyZSBhcmUgY2hlY2tzIHRvIGVuc3VyZSB0aGUgY29tcG9uZW50IGhhcyBub3RcbiAqIGFscmVhZHkgYmVlbiByZW5kZXJlZCBoYXZlIG9jY3VycmVkIGFuZCB0aGF0IGVudGVyIGRvY3VtZW50IHdpbGwgYmUgY2FsbGVkXG4gKiBhZnRlcndhcmRzLiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmVkIHByb3RlY3RlZC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGRlY29yYXRlLlxuICogQHByb3RlY3RlZFxuICovXG5nb29nLnVpLkNvbXBvbmVudC5wcm90b3R5cGUuZGVjb3JhdGVJbnRlcm5hbCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgdGhpcy5lbGVtZW50XyA9IGVsZW1lbnQ7XG59O1xuXG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCdzIGVsZW1lbnQgaXMga25vd24gdG8gYmUgaW4gdGhlIGRvY3VtZW50LiBBbnl0aGluZ1xuICogdXNpbmcgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgZXRjLiBzaG91bGQgYmUgZG9uZSBhdCB0aGlzIHN0YWdlLlxuICpcbiAqIElmIHRoZSBjb21wb25lbnQgY29udGFpbnMgY2hpbGQgY29tcG9uZW50cywgdGhpcyBjYWxsIGlzIHByb3BhZ2F0ZWQgdG8gaXRzXG4gKiBjaGlsZHJlbi5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLmVudGVyRG9jdW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbkRvY3VtZW50XyA9IHRydWU7XG5cbiAgLy8gUHJvcGFnYXRlIGVudGVyRG9jdW1lbnQgdG8gY2hpbGQgY29tcG9uZW50cyB0aGF0IGhhdmUgYSBET00sIGlmIGFueS5cbiAgLy8gSWYgYSBjaGlsZCB3YXMgZGVjb3JhdGVkIGJlZm9yZSBlbnRlcmluZyB0aGUgZG9jdW1lbnQgKHBlcm1pdHRlZCB3aGVuXG4gIC8vIGdvb2cudWkuQ29tcG9uZW50LkFMTE9XX0RFVEFDSEVEX0RFQ09SQVRJT04gaXMgdHJ1ZSksIGl0cyBlbnRlckRvY3VtZW50XG4gIC8vIHdpbGwgYmUgY2FsbGVkIGhlcmUuXG4gIHRoaXMuZm9yRWFjaENoaWxkKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgaWYgKCFjaGlsZC5pc0luRG9jdW1lbnQoKSAmJiBjaGlsZC5nZXRFbGVtZW50KCkpIHtcbiAgICAgIGNoaWxkLmVudGVyRG9jdW1lbnQoKTtcbiAgICB9XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIENhbGxlZCBieSBkaXNwb3NlIHRvIGNsZWFuIHVwIHRoZSBlbGVtZW50cyBhbmQgbGlzdGVuZXJzIGNyZWF0ZWQgYnkgYVxuICogY29tcG9uZW50LCBvciBieSBhIHBhcmVudCBjb21wb25lbnQvYXBwbGljYXRpb24gd2hvIGhhcyByZW1vdmVkIHRoZVxuICogY29tcG9uZW50IGZyb20gdGhlIGRvY3VtZW50IGJ1dCB3YW50cyB0byByZXVzZSBpdCBsYXRlci5cbiAqXG4gKiBJZiB0aGUgY29tcG9uZW50IGNvbnRhaW5zIGNoaWxkIGNvbXBvbmVudHMsIHRoaXMgY2FsbCBpcyBwcm9wYWdhdGVkIHRvIGl0c1xuICogY2hpbGRyZW4uXG4gKlxuICogSXQgc2hvdWxkIGJlIHBvc3NpYmxlIGZvciB0aGUgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkIGFnYWluIG9uY2UgdGhpcyBtZXRob2RcbiAqIGhhcyBiZWVuIGNhbGxlZC5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLmV4aXREb2N1bWVudCA9IGZ1bmN0aW9uKCkge1xuICAvLyBQcm9wYWdhdGUgZXhpdERvY3VtZW50IHRvIGNoaWxkIGNvbXBvbmVudHMgdGhhdCBoYXZlIGJlZW4gcmVuZGVyZWQsIGlmIGFueS5cbiAgdGhpcy5mb3JFYWNoQ2hpbGQoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQuaXNJbkRvY3VtZW50KCkpIHtcbiAgICAgIGNoaWxkLmV4aXREb2N1bWVudCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHRoaXMuZ29vZ1VpQ29tcG9uZW50SGFuZGxlcl8pIHtcbiAgICB0aGlzLmdvb2dVaUNvbXBvbmVudEhhbmRsZXJfLnJlbW92ZUFsbCgpO1xuICB9XG5cbiAgdGhpcy5pbkRvY3VtZW50XyA9IGZhbHNlO1xufTtcblxuXG4vKipcbiAqIERpc3Bvc2VzIG9mIHRoZSBjb21wb25lbnQuICBDYWxscyB7QGNvZGUgZXhpdERvY3VtZW50fSwgd2hpY2ggaXMgZXhwZWN0ZWQgdG9cbiAqIHJlbW92ZSBldmVudCBoYW5kbGVycyBhbmQgY2xlYW4gdXAgdGhlIGNvbXBvbmVudC4gIFByb3BhZ2F0ZXMgdGhlIGNhbGwgdG9cbiAqIHRoZSBjb21wb25lbnQncyBjaGlsZHJlbiwgaWYgYW55LiBSZW1vdmVzIHRoZSBjb21wb25lbnQncyBET00gZnJvbSB0aGVcbiAqIGRvY3VtZW50IHVubGVzcyBpdCB3YXMgZGVjb3JhdGVkLlxuICogQG92ZXJyaWRlXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwb3NlSW50ZXJuYWwgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaW5Eb2N1bWVudF8pIHtcbiAgICB0aGlzLmV4aXREb2N1bWVudCgpO1xuICB9XG5cbiAgaWYgKHRoaXMuZ29vZ1VpQ29tcG9uZW50SGFuZGxlcl8pIHtcbiAgICB0aGlzLmdvb2dVaUNvbXBvbmVudEhhbmRsZXJfLmRpc3Bvc2UoKTtcbiAgICBkZWxldGUgdGhpcy5nb29nVWlDb21wb25lbnRIYW5kbGVyXztcbiAgfVxuXG4gIC8vIERpc3Bvc2VzIG9mIHRoZSBjb21wb25lbnQncyBjaGlsZHJlbiwgaWYgYW55LlxuICB0aGlzLmZvckVhY2hDaGlsZChmdW5jdGlvbihjaGlsZCkge1xuICAgIGNoaWxkLmRpc3Bvc2UoKTtcbiAgfSk7XG5cbiAgLy8gRGV0YWNoIHRoZSBjb21wb25lbnQncyBlbGVtZW50IGZyb20gdGhlIERPTSwgdW5sZXNzIGl0IHdhcyBkZWNvcmF0ZWQuXG4gIGlmICghdGhpcy53YXNEZWNvcmF0ZWRfICYmIHRoaXMuZWxlbWVudF8pIHtcbiAgICBnb29nLmRvbS5yZW1vdmVOb2RlKHRoaXMuZWxlbWVudF8pO1xuICB9XG5cbiAgdGhpcy5jaGlsZHJlbl8gPSBudWxsO1xuICB0aGlzLmNoaWxkSW5kZXhfID0gbnVsbDtcbiAgdGhpcy5lbGVtZW50XyA9IG51bGw7XG4gIHRoaXMubW9kZWxfID0gbnVsbDtcbiAgdGhpcy5wYXJlbnRfID0gbnVsbDtcblxuICBnb29nLnVpLkNvbXBvbmVudC5zdXBlckNsYXNzXy5kaXNwb3NlSW50ZXJuYWwuY2FsbCh0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIHN1YmNsYXNzZXMgdGhhdCBnZXRzIGEgdW5pcXVlIGlkIGZvciBhIGdpdmVuIGZyYWdtZW50LFxuICogdGhpcyBjYW4gYmUgdXNlZCBieSBjb21wb25lbnRzIHRvIGdlbmVyYXRlIHVuaXF1ZSBzdHJpbmcgaWRzIGZvciBET01cbiAqIGVsZW1lbnRzLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkRnJhZ21lbnQgQSBwYXJ0aWFsIGlkLlxuICogQHJldHVybiB7c3RyaW5nfSBVbmlxdWUgZWxlbWVudCBpZC5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLm1ha2VJZCA9IGZ1bmN0aW9uKGlkRnJhZ21lbnQpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0SWQoKSArICcuJyArIGlkRnJhZ21lbnQ7XG59O1xuXG5cbi8qKlxuICogTWFrZXMgYSBjb2xsZWN0aW9uIG9mIGlkcy4gIFRoaXMgaXMgYSBjb252ZW5pZW5jZSBtZXRob2QgZm9yIG1ha2VJZC4gIFRoZVxuICogb2JqZWN0J3MgdmFsdWVzIGFyZSB0aGUgaWQgZnJhZ21lbnRzIGFuZCB0aGUgbmV3IHZhbHVlcyBhcmUgdGhlIGdlbmVyYXRlZFxuICogaWRzLiAgVGhlIGtleSB3aWxsIHJlbWFpbiB0aGUgc2FtZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0aGF0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgdGhlIGlkcy5cbiAqIEByZXR1cm4geyFPYmplY3R9IEFuIG9iamVjdCBvZiBpZCBrZXlzIHRvIGdlbmVyYXRlZCBpZHMuXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5tYWtlSWRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gIHZhciBpZHMgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlkc1trZXldID0gdGhpcy5tYWtlSWQob2JqZWN0W2tleV0pO1xuICB9XG4gIHJldHVybiBpZHM7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgbW9kZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBVSSBjb21wb25lbnQuXG4gKiBAcmV0dXJuIHsqfSBUaGUgbW9kZWwuXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5nZXRNb2RlbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5tb2RlbF87XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgbW9kZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBVSSBjb21wb25lbnQuXG4gKiBAcGFyYW0geyp9IG9iaiBUaGUgbW9kZWwuXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5zZXRNb2RlbCA9IGZ1bmN0aW9uKG9iaikge1xuICB0aGlzLm1vZGVsXyA9IG9iajtcbn07XG5cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIHJldHVybmluZyB0aGUgZnJhZ21lbnQgcG9ydGlvbiBvZiBhbiBpZCBnZW5lcmF0ZWQgdXNpbmdcbiAqIG1ha2VJZCgpLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIElkIGdlbmVyYXRlZCB3aXRoIG1ha2VJZCgpLlxuICogQHJldHVybiB7c3RyaW5nfSBGcmFnbWVudC5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLmdldEZyYWdtZW50RnJvbUlkID0gZnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIGlkLnN1YnN0cmluZyh0aGlzLmdldElkKCkubGVuZ3RoICsgMSk7XG59O1xuXG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIGZvciByZXR1cm5pbmcgYW4gZWxlbWVudCBpbiB0aGUgZG9jdW1lbnQgd2l0aCBhIHVuaXF1ZSBpZFxuICogZ2VuZXJhdGVkIHVzaW5nIG1ha2VJZCgpLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkRnJhZ21lbnQgVGhlIHBhcnRpYWwgaWQuXG4gKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgZWxlbWVudCB3aXRoIHRoZSB1bmlxdWUgaWQsIG9yIG51bGwgaWYgaXQgY2Fubm90IGJlXG4gKiAgICAgZm91bmQuXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5nZXRFbGVtZW50QnlGcmFnbWVudCA9IGZ1bmN0aW9uKGlkRnJhZ21lbnQpIHtcbiAgaWYgKCF0aGlzLmluRG9jdW1lbnRfKSB7XG4gICAgdGhyb3cgRXJyb3IoZ29vZy51aS5Db21wb25lbnQuRXJyb3IuTk9UX0lOX0RPQ1VNRU5UKTtcbiAgfVxuICByZXR1cm4gdGhpcy5kb21fLmdldEVsZW1lbnQodGhpcy5tYWtlSWQoaWRGcmFnbWVudCkpO1xufTtcblxuXG4vKipcbiAqIEFkZHMgdGhlIHNwZWNpZmllZCBjb21wb25lbnQgYXMgdGhlIGxhc3QgY2hpbGQgb2YgdGhpcyBjb21wb25lbnQuICBTZWVcbiAqIHtAbGluayBnb29nLnVpLkNvbXBvbmVudCNhZGRDaGlsZEF0fSBmb3IgZGV0YWlsZWQgc2VtYW50aWNzLlxuICpcbiAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQjYWRkQ2hpbGRBdFxuICogQHBhcmFtIHtnb29nLnVpLkNvbXBvbmVudH0gY2hpbGQgVGhlIG5ldyBjaGlsZCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfcmVuZGVyIElmIHRydWUsIHRoZSBjaGlsZCBjb21wb25lbnQgd2lsbCBiZSByZW5kZXJlZFxuICogICAgaW50byB0aGUgcGFyZW50LlxuICovXG5nb29nLnVpLkNvbXBvbmVudC5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbihjaGlsZCwgb3B0X3JlbmRlcikge1xuICAvLyBUT0RPKGdib3llcik6IGFkZENoaWxkQXQoY2hpbGQsIHRoaXMuZ2V0Q2hpbGRDb3VudCgpLCBmYWxzZSkgd2lsbFxuICAvLyByZXBvc2l0aW9uIGFueSBhbHJlYWR5LXJlbmRlcmVkIGNoaWxkIHRvIHRoZSBlbmQuICBJbnN0ZWFkLCBwZXJoYXBzXG4gIC8vIGFkZENoaWxkKGNoaWxkLCBmYWxzZSkgc2hvdWxkIG5ldmVyIHJlcG9zaXRpb24gdGhlIGNoaWxkOyBpbnN0ZWFkLCBjbGllbnRzXG4gIC8vIHRoYXQgbmVlZCB0aGUgcmVwb3NpdGlvbmluZyB3aWxsIHVzZSBhZGRDaGlsZEF0IGV4cGxpY2l0bHkuICBSaWdodCBub3csXG4gIC8vIGNsaWVudHMgY2FuIGdldCBhcm91bmQgdGhpcyBieSBjYWxsaW5nIGFkZENoaWxkIGJlZm9yZSBjYWxsaW5nIGRlY29yYXRlLlxuICB0aGlzLmFkZENoaWxkQXQoY2hpbGQsIHRoaXMuZ2V0Q2hpbGRDb3VudCgpLCBvcHRfcmVuZGVyKTtcbn07XG5cblxuLyoqXG4gKiBBZGRzIHRoZSBzcGVjaWZpZWQgY29tcG9uZW50IGFzIGEgY2hpbGQgb2YgdGhpcyBjb21wb25lbnQgYXQgdGhlIGdpdmVuXG4gKiAwLWJhc2VkIGluZGV4LlxuICpcbiAqIEJvdGgge0Bjb2RlIGFkZENoaWxkfSBhbmQge0Bjb2RlIGFkZENoaWxkQXR9IGFzc3VtZSB0aGUgZm9sbG93aW5nIGNvbnRyYWN0XG4gKiBiZXR3ZWVuIHBhcmVudCBhbmQgY2hpbGQgY29tcG9uZW50czpcbiAqICA8dWw+XG4gKiAgICA8bGk+dGhlIGNoaWxkIGNvbXBvbmVudCdzIGVsZW1lbnQgbXVzdCBiZSBhIGRlc2NlbmRhbnQgb2YgdGhlIHBhcmVudFxuICogICAgICAgIGNvbXBvbmVudCdzIGVsZW1lbnQsIGFuZFxuICogICAgPGxpPnRoZSBET00gc3RhdGUgb2YgdGhlIGNoaWxkIGNvbXBvbmVudCBtdXN0IGJlIGNvbnNpc3RlbnQgd2l0aCB0aGUgRE9NXG4gKiAgICAgICAgc3RhdGUgb2YgdGhlIHBhcmVudCBjb21wb25lbnQgKHNlZSB7QGNvZGUgaXNJbkRvY3VtZW50fSkgaW4gdGhlXG4gKiAgICAgICAgc3RlYWR5IHN0YXRlIC0tIHRoZSBleGNlcHRpb24gaXMgdG8gYWRkQ2hpbGRBdChjaGlsZCwgaSwgZmFsc2UpIGFuZFxuICogICAgICAgIHRoZW4gaW1tZWRpYXRlbHkgZGVjb3JhdGUvcmVuZGVyIHRoZSBjaGlsZC5cbiAqICA8L3VsPlxuICpcbiAqIEluIHBhcnRpY3VsYXIsIHtAY29kZSBwYXJlbnQuYWRkQ2hpbGQoY2hpbGQpfSB3aWxsIHRocm93IGFuIGVycm9yIGlmIHRoZVxuICogY2hpbGQgY29tcG9uZW50IGlzIGFscmVhZHkgaW4gdGhlIGRvY3VtZW50LCBidXQgdGhlIHBhcmVudCBpc24ndC5cbiAqXG4gKiBDbGllbnRzIG9mIHRoaXMgQVBJIG1heSBjYWxsIHtAY29kZSBhZGRDaGlsZH0gYW5kIHtAY29kZSBhZGRDaGlsZEF0fSB3aXRoXG4gKiB7QGNvZGUgb3B0X3JlbmRlcn0gc2V0IHRvIHRydWUuICBJZiB7QGNvZGUgb3B0X3JlbmRlcn0gaXMgdHJ1ZSwgY2FsbGluZyB0aGVzZVxuICogbWV0aG9kcyB3aWxsIGF1dG9tYXRpY2FsbHkgcmVuZGVyIHRoZSBjaGlsZCBjb21wb25lbnQncyBlbGVtZW50IGludG8gdGhlXG4gKiBwYXJlbnQgY29tcG9uZW50J3MgZWxlbWVudC4gSWYgdGhlIHBhcmVudCBkb2VzIG5vdCB5ZXQgaGF2ZSBhbiBlbGVtZW50LCB0aGVuXG4gKiB7QGNvZGUgY3JlYXRlRG9tfSB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgaW52b2tlZCBvbiB0aGUgcGFyZW50IGJlZm9yZVxuICogcmVuZGVyaW5nIHRoZSBjaGlsZC5cbiAqXG4gKiBJbnZva2luZyB7QGNvZGUgcGFyZW50LmFkZENoaWxkKGNoaWxkLCB0cnVlKX0gd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB0aGVcbiAqIGNoaWxkIGNvbXBvbmVudCBpcyBhbHJlYWR5IGluIHRoZSBkb2N1bWVudCwgcmVnYXJkbGVzcyBvZiB0aGUgcGFyZW50J3MgRE9NXG4gKiBzdGF0ZS5cbiAqXG4gKiBJZiB7QGNvZGUgb3B0X3JlbmRlcn0gaXMgdHJ1ZSBhbmQgdGhlIHBhcmVudCBjb21wb25lbnQgaXMgbm90IGFscmVhZHlcbiAqIGluIHRoZSBkb2N1bWVudCwge0Bjb2RlIGVudGVyRG9jdW1lbnR9IHdpbGwgbm90IGJlIGNhbGxlZCBvbiB0aGlzIGNvbXBvbmVudFxuICogYXQgdGhpcyBwb2ludC5cbiAqXG4gKiBGaW5hbGx5LCB0aGlzIG1ldGhvZCBhbHNvIHRocm93cyBhbiBlcnJvciBpZiB0aGUgbmV3IGNoaWxkIGFscmVhZHkgaGFzIGFcbiAqIGRpZmZlcmVudCBwYXJlbnQsIG9yIHRoZSBnaXZlbiBpbmRleCBpcyBvdXQgb2YgYm91bmRzLlxuICpcbiAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQjYWRkQ2hpbGRcbiAqIEBwYXJhbSB7Z29vZy51aS5Db21wb25lbnR9IGNoaWxkIFRoZSBuZXcgY2hpbGQgY29tcG9uZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IDAtYmFzZWQgaW5kZXggYXQgd2hpY2ggdGhlIG5ldyBjaGlsZCBjb21wb25lbnQgaXMgdG8gYmVcbiAqICAgIGFkZGVkOyBtdXN0IGJlIGJldHdlZW4gMCBhbmQgdGhlIGN1cnJlbnQgY2hpbGQgY291bnQgKGluY2x1c2l2ZSkuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfcmVuZGVyIElmIHRydWUsIHRoZSBjaGlsZCBjb21wb25lbnQgd2lsbCBiZSByZW5kZXJlZFxuICogICAgaW50byB0aGUgcGFyZW50LlxuICogQHJldHVybiB7dm9pZH0gTmFkYS5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLmFkZENoaWxkQXQgPSBmdW5jdGlvbihjaGlsZCwgaW5kZXgsIG9wdF9yZW5kZXIpIHtcbiAgZ29vZy5hc3NlcnRzLmFzc2VydCghIWNoaWxkLCAnUHJvdmlkZWQgZWxlbWVudCBtdXN0IG5vdCBiZSBudWxsLicpO1xuXG4gIGlmIChjaGlsZC5pbkRvY3VtZW50XyAmJiAob3B0X3JlbmRlciB8fCAhdGhpcy5pbkRvY3VtZW50XykpIHtcbiAgICAvLyBBZGRpbmcgYSBjaGlsZCB0aGF0J3MgYWxyZWFkeSBpbiB0aGUgZG9jdW1lbnQgaXMgYW4gZXJyb3IsIGV4Y2VwdCBpZiB0aGVcbiAgICAvLyBwYXJlbnQgaXMgYWxzbyBpbiB0aGUgZG9jdW1lbnQgYW5kIG9wdF9yZW5kZXIgaXMgZmFsc2UgKGUuZy4gZGVjb3JhdGUoKSkuXG4gICAgdGhyb3cgRXJyb3IoZ29vZy51aS5Db21wb25lbnQuRXJyb3IuQUxSRUFEWV9SRU5ERVJFRCk7XG4gIH1cblxuICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGhpcy5nZXRDaGlsZENvdW50KCkpIHtcbiAgICAvLyBBbGxvd2luZyBzcGFyc2UgY2hpbGQgYXJyYXlzIHdvdWxkIGxlYWQgdG8gc3RyYW5nZSBiZWhhdmlvciwgc28gd2UgZG9uJ3QuXG4gICAgdGhyb3cgRXJyb3IoZ29vZy51aS5Db21wb25lbnQuRXJyb3IuQ0hJTERfSU5ERVhfT1VUX09GX0JPVU5EUyk7XG4gIH1cblxuICAvLyBDcmVhdGUgdGhlIGluZGV4IGFuZCB0aGUgY2hpbGQgYXJyYXkgb24gZmlyc3QgdXNlLlxuICBpZiAoIXRoaXMuY2hpbGRJbmRleF8gfHwgIXRoaXMuY2hpbGRyZW5fKSB7XG4gICAgdGhpcy5jaGlsZEluZGV4XyA9IHt9O1xuICAgIHRoaXMuY2hpbGRyZW5fID0gW107XG4gIH1cblxuICAvLyBNb3ZpbmcgY2hpbGQgd2l0aGluIGNvbXBvbmVudCwgcmVtb3ZlIG9sZCByZWZlcmVuY2UuXG4gIGlmIChjaGlsZC5nZXRQYXJlbnQoKSA9PSB0aGlzKSB7XG4gICAgZ29vZy5vYmplY3Quc2V0KHRoaXMuY2hpbGRJbmRleF8sIGNoaWxkLmdldElkKCksIGNoaWxkKTtcbiAgICBnb29nLmFycmF5LnJlbW92ZSh0aGlzLmNoaWxkcmVuXywgY2hpbGQpO1xuXG4gIC8vIEFkZCB0aGUgY2hpbGQgdG8gdGhpcyBjb21wb25lbnQuICBnb29nLm9iamVjdC5hZGQoKSB0aHJvd3MgYW4gZXJyb3IgaWZcbiAgLy8gYSBjaGlsZCB3aXRoIHRoZSBzYW1lIElEIGFscmVhZHkgZXhpc3RzLlxuICB9IGVsc2Uge1xuICAgIGdvb2cub2JqZWN0LmFkZCh0aGlzLmNoaWxkSW5kZXhfLCBjaGlsZC5nZXRJZCgpLCBjaGlsZCk7XG4gIH1cblxuICAvLyBTZXQgdGhlIHBhcmVudCBvZiB0aGUgY2hpbGQgdG8gdGhpcyBjb21wb25lbnQuICBUaGlzIHRocm93cyBhbiBlcnJvciBpZlxuICAvLyB0aGUgY2hpbGQgaXMgYWxyZWFkeSBjb250YWluZWQgYnkgYW5vdGhlciBjb21wb25lbnQuXG4gIGNoaWxkLnNldFBhcmVudCh0aGlzKTtcbiAgZ29vZy5hcnJheS5pbnNlcnRBdCh0aGlzLmNoaWxkcmVuXywgY2hpbGQsIGluZGV4KTtcblxuICBpZiAoY2hpbGQuaW5Eb2N1bWVudF8gJiYgdGhpcy5pbkRvY3VtZW50XyAmJiBjaGlsZC5nZXRQYXJlbnQoKSA9PSB0aGlzKSB7XG4gICAgLy8gQ2hhbmdpbmcgdGhlIHBvc2l0aW9uIG9mIGFuIGV4aXN0aW5nIGNoaWxkLCBtb3ZlIHRoZSBET00gbm9kZSAoaWZcbiAgICAvLyBuZWNlc3NhcnkpLlxuICAgIHZhciBjb250ZW50RWxlbWVudCA9IHRoaXMuZ2V0Q29udGVudEVsZW1lbnQoKTtcbiAgICB2YXIgaW5zZXJ0QmVmb3JlRWxlbWVudCA9IGNvbnRlbnRFbGVtZW50LmNoaWxkTm9kZXNbaW5kZXhdIHx8IG51bGw7XG4gICAgaWYgKGluc2VydEJlZm9yZUVsZW1lbnQgIT0gY2hpbGQuZ2V0RWxlbWVudCgpKSB7XG4gICAgICBjb250ZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoY2hpbGQuZ2V0RWxlbWVudCgpLCBpbnNlcnRCZWZvcmVFbGVtZW50KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0X3JlbmRlcikge1xuICAgIC8vIElmIHRoaXMgKHBhcmVudCkgY29tcG9uZW50IGRvZXNuJ3QgaGF2ZSBhIERPTSB5ZXQsIGNhbGwgY3JlYXRlRG9tIG5vd1xuICAgIC8vIHRvIG1ha2Ugc3VyZSB3ZSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudCdzIGVsZW1lbnQgaW50byB0aGUgY29ycmVjdFxuICAgIC8vIHBhcmVudCBlbGVtZW50IChvdGhlcndpc2UgcmVuZGVyXyB3aXRoIGEgbnVsbCBmaXJzdCBhcmd1bWVudCB3b3VsZFxuICAgIC8vIHJlbmRlciB0aGUgY2hpbGQgaW50byB0aGUgZG9jdW1lbnQgYm9keSwgd2hpY2ggaXMgYWxtb3N0IGNlcnRhaW5seSBub3RcbiAgICAvLyB3aGF0IHdlIHdhbnQpLlxuICAgIGlmICghdGhpcy5lbGVtZW50Xykge1xuICAgICAgdGhpcy5jcmVhdGVEb20oKTtcbiAgICB9XG4gICAgLy8gUmVuZGVyIHRoZSBjaGlsZCBpbnRvIHRoZSBwYXJlbnQgYXQgdGhlIGFwcHJvcHJpYXRlIGxvY2F0aW9uLiAgTm90ZSB0aGF0XG4gICAgLy8gZ2V0Q2hpbGRBdChpbmRleCArIDEpIHJldHVybnMgdW5kZWZpbmVkIGlmIGluc2VydGluZyBhdCB0aGUgZW5kLlxuICAgIC8vIFRPRE8oYXR0aWxhKTogV2Ugc2hvdWxkIGhhdmUgYSByZW5kZXJlciB3aXRoIGEgcmVuZGVyQ2hpbGRBdCBBUEkuXG4gICAgdmFyIHNpYmxpbmcgPSB0aGlzLmdldENoaWxkQXQoaW5kZXggKyAxKTtcbiAgICAvLyByZW5kZXJfKCkgY2FsbHMgZW50ZXJEb2N1bWVudCgpIGlmIHRoZSBwYXJlbnQgaXMgYWxyZWFkeSBpbiB0aGUgZG9jdW1lbnQuXG4gICAgY2hpbGQucmVuZGVyXyh0aGlzLmdldENvbnRlbnRFbGVtZW50KCksIHNpYmxpbmcgPyBzaWJsaW5nLmVsZW1lbnRfIDogbnVsbCk7XG4gIH0gZWxzZSBpZiAodGhpcy5pbkRvY3VtZW50XyAmJiAhY2hpbGQuaW5Eb2N1bWVudF8gJiYgY2hpbGQuZWxlbWVudF8gJiZcbiAgICAgIGNoaWxkLmVsZW1lbnRfLnBhcmVudE5vZGUgJiZcbiAgICAgIC8vIFVuZGVyIHNvbWUgY2lyY3Vtc3RhbmNlcywgSUU4IGltcGxpY2l0bHkgY3JlYXRlcyBhIERvY3VtZW50IEZyYWdtZW50XG4gICAgICAvLyBmb3IgZGV0YWNoZWQgbm9kZXMsIHNvIGVuc3VyZSB0aGUgcGFyZW50IGlzIGFuIEVsZW1lbnQgYXMgaXQgc2hvdWxkIGJlLlxuICAgICAgY2hpbGQuZWxlbWVudF8ucGFyZW50Tm9kZS5ub2RlVHlwZSA9PSBnb29nLmRvbS5Ob2RlVHlwZS5FTEVNRU5UKSB7XG4gICAgLy8gV2UgZG9uJ3QgdG91Y2ggdGhlIERPTSwgYnV0IGlmIHRoZSBwYXJlbnQgaXMgaW4gdGhlIGRvY3VtZW50LCBhbmQgdGhlXG4gICAgLy8gY2hpbGQgZWxlbWVudCBpcyBpbiB0aGUgZG9jdW1lbnQgYnV0IG5vdCBtYXJrZWQgYXMgc3VjaCwgdGhlbiB3ZSBjYWxsXG4gICAgLy8gZW50ZXJEb2N1bWVudCBvbiB0aGUgY2hpbGQuXG4gICAgLy8gVE9ETyhnYm95ZXIpOiBJdCB3b3VsZCBiZSBuaWNlIHRvIG1vdmUgdGhpcyBjb25kaXRpb24gZW50aXJlbHksIGJ1dFxuICAgIC8vIHRoZXJlJ3MgYSBsYXJnZSByaXNrIG9mIGJyZWFraW5nIGV4aXN0aW5nIGFwcGxpY2F0aW9ucyB0aGF0IG1hbnVhbGx5XG4gICAgLy8gYXBwZW5kIHRoZSBjaGlsZCB0byB0aGUgRE9NIGFuZCB0aGVuIGNhbGwgYWRkQ2hpbGQuXG4gICAgY2hpbGQuZW50ZXJEb2N1bWVudCgpO1xuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgRE9NIGVsZW1lbnQgaW50byB3aGljaCBjaGlsZCBjb21wb25lbnRzIGFyZSB0byBiZSByZW5kZXJlZCxcbiAqIG9yIG51bGwgaWYgdGhlIGNvbXBvbmVudCBpdHNlbGYgaGFzbid0IGJlZW4gcmVuZGVyZWQgeWV0LiAgVGhpcyBkZWZhdWx0XG4gKiBpbXBsZW1lbnRhdGlvbiByZXR1cm5zIHRoZSBjb21wb25lbnQncyByb290IGVsZW1lbnQuICBTdWJjbGFzc2VzIHdpdGhcbiAqIGNvbXBsZXggRE9NIHN0cnVjdHVyZXMgbXVzdCBvdmVycmlkZSB0aGlzIG1ldGhvZC5cbiAqIEByZXR1cm4ge0VsZW1lbnR9IEVsZW1lbnQgdG8gY29udGFpbiBjaGlsZCBlbGVtZW50cyAobnVsbCBpZiBub25lKS5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLmdldENvbnRlbnRFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVsZW1lbnRfO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY29tcG9uZW50IGlzIHJlbmRlcmVkIHJpZ2h0LXRvLWxlZnQsIGZhbHNlIG90aGVyd2lzZS5cbiAqIFRoZSBmaXJzdCB0aW1lIHRoaXMgZnVuY3Rpb24gaXMgaW52b2tlZCwgdGhlIHJpZ2h0LXRvLWxlZnQgcmVuZGVyaW5nIHByb3BlcnR5XG4gKiBpcyBzZXQgaWYgaXQgaGFzIG5vdCBiZWVuIGFscmVhZHkuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjb250cm9sIGlzIHJlbmRlcmVkIHJpZ2h0LXRvLWxlZnQuXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5pc1JpZ2h0VG9MZWZ0ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnJpZ2h0VG9MZWZ0XyA9PSBudWxsKSB7XG4gICAgdGhpcy5yaWdodFRvTGVmdF8gPSBnb29nLnN0eWxlLmlzUmlnaHRUb0xlZnQodGhpcy5pbkRvY3VtZW50XyA/XG4gICAgICAgIHRoaXMuZWxlbWVudF8gOiB0aGlzLmRvbV8uZ2V0RG9jdW1lbnQoKS5ib2R5KTtcbiAgfVxuICByZXR1cm4gdGhpcy5yaWdodFRvTGVmdF87XG59O1xuXG5cbi8qKlxuICogU2V0IGlzIHJpZ2h0LXRvLWxlZnQuIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIHVzZWQgaWYgdGhlIGNvbXBvbmVudCBuZWVkc1xuICogdG8ga25vdyB0aGUgcmVuZGVyaW5nIGRpcmVjdGlvbiBkdXJpbmcgZG9tIGNyZWF0aW9uIChpLmUuIGJlZm9yZVxuICoge0BsaW5rICNlbnRlckRvY3VtZW50fSBpcyBjYWxsZWQgYW5kIGlzIHJpZ2h0LXRvLWxlZnQgaXMgc2V0KS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcmlnaHRUb0xlZnQgV2hldGhlciB0aGUgY29tcG9uZW50IGlzIHJlbmRlcmVkXG4gKiAgICAgcmlnaHQtdG8tbGVmdC5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLnNldFJpZ2h0VG9MZWZ0ID0gZnVuY3Rpb24ocmlnaHRUb0xlZnQpIHtcbiAgaWYgKHRoaXMuaW5Eb2N1bWVudF8pIHtcbiAgICB0aHJvdyBFcnJvcihnb29nLnVpLkNvbXBvbmVudC5FcnJvci5BTFJFQURZX1JFTkRFUkVEKTtcbiAgfVxuICB0aGlzLnJpZ2h0VG9MZWZ0XyA9IHJpZ2h0VG9MZWZ0O1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY29tcG9uZW50IGhhcyBjaGlsZHJlbi5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbXBvbmVudCBoYXMgY2hpbGRyZW4uXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5oYXNDaGlsZHJlbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gISF0aGlzLmNoaWxkcmVuXyAmJiB0aGlzLmNoaWxkcmVuXy5sZW5ndGggIT0gMDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gb2YgdGhpcyBjb21wb25lbnQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4uXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5nZXRDaGlsZENvdW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNoaWxkcmVuXyA/IHRoaXMuY2hpbGRyZW5fLmxlbmd0aCA6IDA7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBJRHMgb2YgdGhlIGNoaWxkcmVuIG9mIHRoaXMgY29tcG9uZW50LCBvciBhblxuICogZW1wdHkgYXJyYXkgaWYgdGhlIGNvbXBvbmVudCBoYXMgbm8gY2hpbGRyZW4uXG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn0gQ2hpbGQgY29tcG9uZW50IElEcy5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLmdldENoaWxkSWRzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpZHMgPSBbXTtcblxuICAvLyBXZSBkb24ndCB1c2UgZ29vZy5vYmplY3QuZ2V0S2V5cyh0aGlzLmNoaWxkSW5kZXhfKSBiZWNhdXNlIHdlIHdhbnQgdG9cbiAgLy8gcmV0dXJuIHRoZSBJRHMgaW4gdGhlIGNvcnJlY3Qgb3JkZXIgYXMgZGV0ZXJtaW5lZCBieSB0aGlzLmNoaWxkcmVuXy5cbiAgdGhpcy5mb3JFYWNoQ2hpbGQoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAvLyBhZGRDaGlsZCgpL2FkZENoaWxkQXQoKSBndWFyYW50ZWUgdGhhdCB0aGUgY2hpbGQgYXJyYXkgaXNuJ3Qgc3BhcnNlLlxuICAgIGlkcy5wdXNoKGNoaWxkLmdldElkKCkpO1xuICB9KTtcblxuICByZXR1cm4gaWRzO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGNoaWxkIHdpdGggdGhlIGdpdmVuIElELCBvciBudWxsIGlmIG5vIHN1Y2ggY2hpbGQgZXhpc3RzLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENoaWxkIGNvbXBvbmVudCBJRC5cbiAqIEByZXR1cm4ge2dvb2cudWkuQ29tcG9uZW50P30gVGhlIGNoaWxkIHdpdGggdGhlIGdpdmVuIElEOyBudWxsIGlmIG5vbmUuXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5nZXRDaGlsZCA9IGZ1bmN0aW9uKGlkKSB7XG4gIC8vIFVzZSBjaGlsZEluZGV4XyBmb3IgTygxKSBhY2Nlc3MgYnkgSUQuXG4gIHJldHVybiAodGhpcy5jaGlsZEluZGV4XyAmJiBpZCkgPyAvKiogQHR5cGUge2dvb2cudWkuQ29tcG9uZW50fSAqLyAoXG4gICAgICBnb29nLm9iamVjdC5nZXQodGhpcy5jaGlsZEluZGV4XywgaWQpKSB8fCBudWxsIDogbnVsbDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjaGlsZCBhdCB0aGUgZ2l2ZW4gaW5kZXgsIG9yIG51bGwgaWYgdGhlIGluZGV4IGlzIG91dCBvZiBib3VuZHMuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggMC1iYXNlZCBpbmRleC5cbiAqIEByZXR1cm4ge2dvb2cudWkuQ29tcG9uZW50P30gVGhlIGNoaWxkIGF0IHRoZSBnaXZlbiBpbmRleDsgbnVsbCBpZiBub25lLlxuICovXG5nb29nLnVpLkNvbXBvbmVudC5wcm90b3R5cGUuZ2V0Q2hpbGRBdCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gIC8vIFVzZSBjaGlsZHJlbl8gZm9yIGFjY2VzcyBieSBpbmRleC5cbiAgcmV0dXJuIHRoaXMuY2hpbGRyZW5fID8gdGhpcy5jaGlsZHJlbl9baW5kZXhdIHx8IG51bGwgOiBudWxsO1xufTtcblxuXG4vKipcbiAqIENhbGxzIHRoZSBnaXZlbiBmdW5jdGlvbiBvbiBlYWNoIG9mIHRoaXMgY29tcG9uZW50J3MgY2hpbGRyZW4gaW4gb3JkZXIuICBJZlxuICoge0Bjb2RlIG9wdF9vYmp9IGlzIHByb3ZpZGVkLCBpdCB3aWxsIGJlIHVzZWQgYXMgdGhlICd0aGlzJyBvYmplY3QgaW4gdGhlXG4gKiBmdW5jdGlvbiB3aGVuIGNhbGxlZC4gIFRoZSBmdW5jdGlvbiBzaG91bGQgdGFrZSB0d28gYXJndW1lbnRzOiAgdGhlIGNoaWxkXG4gKiBjb21wb25lbnQgYW5kIGl0cyAwLWJhc2VkIGluZGV4LiAgVGhlIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsPyxudW1iZXIpOj99IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGV2ZXJ5XG4gKiBjaGlsZCBjb21wb25lbnQ7IHNob3VsZCB0YWtlIDIgYXJndW1lbnRzICh0aGUgY2hpbGQgYW5kIGl0cyBpbmRleCkuXG4gKiBAcGFyYW0ge1Q9fSBvcHRfb2JqIFVzZWQgYXMgdGhlICd0aGlzJyBvYmplY3QgaW4gZiB3aGVuIGNhbGxlZC5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5mb3JFYWNoQ2hpbGQgPSBmdW5jdGlvbihmLCBvcHRfb2JqKSB7XG4gIGlmICh0aGlzLmNoaWxkcmVuXykge1xuICAgIGdvb2cuYXJyYXkuZm9yRWFjaCh0aGlzLmNoaWxkcmVuXywgZiwgb3B0X29iaik7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSAwLWJhc2VkIGluZGV4IG9mIHRoZSBnaXZlbiBjaGlsZCBjb21wb25lbnQsIG9yIC0xIGlmIG5vIHN1Y2hcbiAqIGNoaWxkIGlzIGZvdW5kLlxuICogQHBhcmFtIHtnb29nLnVpLkNvbXBvbmVudD99IGNoaWxkIFRoZSBjaGlsZCBjb21wb25lbnQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IDAtYmFzZWQgaW5kZXggb2YgdGhlIGNoaWxkIGNvbXBvbmVudDsgLTEgaWYgbm90IGZvdW5kLlxuICovXG5nb29nLnVpLkNvbXBvbmVudC5wcm90b3R5cGUuaW5kZXhPZkNoaWxkID0gZnVuY3Rpb24oY2hpbGQpIHtcbiAgcmV0dXJuICh0aGlzLmNoaWxkcmVuXyAmJiBjaGlsZCkgPyBnb29nLmFycmF5LmluZGV4T2YodGhpcy5jaGlsZHJlbl8sIGNoaWxkKSA6XG4gICAgICAtMTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBnaXZlbiBjaGlsZCBmcm9tIHRoaXMgY29tcG9uZW50LCBhbmQgcmV0dXJucyBpdC4gIFRocm93cyBhbiBlcnJvclxuICogaWYgdGhlIGFyZ3VtZW50IGlzIGludmFsaWQgb3IgaWYgdGhlIHNwZWNpZmllZCBjaGlsZCBpc24ndCBmb3VuZCBpbiB0aGVcbiAqIHBhcmVudCBjb21wb25lbnQuICBUaGUgYXJndW1lbnQgY2FuIGVpdGhlciBiZSBhIHN0cmluZyAoaW50ZXJwcmV0ZWQgYXMgdGhlXG4gKiBJRCBvZiB0aGUgY2hpbGQgY29tcG9uZW50IHRvIHJlbW92ZSkgb3IgdGhlIGNoaWxkIGNvbXBvbmVudCBpdHNlbGYuXG4gKlxuICogSWYge0Bjb2RlIG9wdF91bnJlbmRlcn0gaXMgdHJ1ZSwgY2FsbHMge0BsaW5rIGdvb2cudWkuY29tcG9uZW50I2V4aXREb2N1bWVudH1cbiAqIG9uIHRoZSByZW1vdmVkIGNoaWxkLCBhbmQgc3Vic2VxdWVudGx5IGRldGFjaGVzIHRoZSBjaGlsZCdzIERPTSBmcm9tIHRoZVxuICogZG9jdW1lbnQuICBPdGhlcndpc2UgaXQgaXMgdGhlIGNhbGxlcidzIHJlc3BvbnNpYmlsaXR5IHRvIGNsZWFuIHVwIHRoZSBjaGlsZFxuICogY29tcG9uZW50J3MgRE9NLlxuICpcbiAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQjcmVtb3ZlQ2hpbGRBdFxuICogQHBhcmFtIHtzdHJpbmd8Z29vZy51aS5Db21wb25lbnR8bnVsbH0gY2hpbGQgVGhlIElEIG9mIHRoZSBjaGlsZCB0byByZW1vdmUsXG4gKiAgICBvciB0aGUgY2hpbGQgY29tcG9uZW50IGl0c2VsZi5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF91bnJlbmRlciBJZiB0cnVlLCBjYWxscyB7QGNvZGUgZXhpdERvY3VtZW50fSBvbiB0aGVcbiAqICAgIHJlbW92ZWQgY2hpbGQgY29tcG9uZW50LCBhbmQgZGV0YWNoZXMgaXRzIERPTSBmcm9tIHRoZSBkb2N1bWVudC5cbiAqIEByZXR1cm4ge2dvb2cudWkuQ29tcG9uZW50fSBUaGUgcmVtb3ZlZCBjb21wb25lbnQsIGlmIGFueS5cbiAqL1xuZ29vZy51aS5Db21wb25lbnQucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24oY2hpbGQsIG9wdF91bnJlbmRlcikge1xuICBpZiAoY2hpbGQpIHtcbiAgICAvLyBOb3JtYWxpemUgY2hpbGQgdG8gYmUgdGhlIG9iamVjdCBhbmQgaWQgdG8gYmUgdGhlIElEIHN0cmluZy4gIFRoaXMgYWxzb1xuICAgIC8vIGVuc3VyZXMgdGhhdCB0aGUgY2hpbGQgaXMgcmVhbGx5IG91cnMuXG4gICAgdmFyIGlkID0gZ29vZy5pc1N0cmluZyhjaGlsZCkgPyBjaGlsZCA6IGNoaWxkLmdldElkKCk7XG4gICAgY2hpbGQgPSB0aGlzLmdldENoaWxkKGlkKTtcblxuICAgIGlmIChpZCAmJiBjaGlsZCkge1xuICAgICAgZ29vZy5vYmplY3QucmVtb3ZlKHRoaXMuY2hpbGRJbmRleF8sIGlkKTtcbiAgICAgIGdvb2cuYXJyYXkucmVtb3ZlKHRoaXMuY2hpbGRyZW5fLCBjaGlsZCk7XG5cbiAgICAgIGlmIChvcHRfdW5yZW5kZXIpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBjaGlsZCBjb21wb25lbnQncyBET00gZnJvbSB0aGUgZG9jdW1lbnQuICBXZSBoYXZlIHRvIGNhbGxcbiAgICAgICAgLy8gZXhpdERvY3VtZW50IGZpcnN0IChzZWUgZG9jdW1lbnRhdGlvbikuXG4gICAgICAgIGNoaWxkLmV4aXREb2N1bWVudCgpO1xuICAgICAgICBpZiAoY2hpbGQuZWxlbWVudF8pIHtcbiAgICAgICAgICBnb29nLmRvbS5yZW1vdmVOb2RlKGNoaWxkLmVsZW1lbnRfKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDaGlsZCdzIHBhcmVudCBtdXN0IGJlIHNldCB0byBudWxsIGFmdGVyIGV4aXREb2N1bWVudCBpcyBjYWxsZWRcbiAgICAgIC8vIHNvIHRoYXQgdGhlIGNoaWxkIGNhbiB1bmxpc3RlbiB0byBpdHMgcGFyZW50IGlmIHJlcXVpcmVkLlxuICAgICAgY2hpbGQuc2V0UGFyZW50KG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY2hpbGQpIHtcbiAgICB0aHJvdyBFcnJvcihnb29nLnVpLkNvbXBvbmVudC5FcnJvci5OT1RfT1VSX0NISUxEKTtcbiAgfVxuXG4gIHJldHVybiAvKiogQHR5cGUgeyFnb29nLnVpLkNvbXBvbmVudH0gKi8oY2hpbGQpO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGNoaWxkIGF0IHRoZSBnaXZlbiBpbmRleCBmcm9tIHRoaXMgY29tcG9uZW50LCBhbmQgcmV0dXJucyBpdC5cbiAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcywgb3IgaWYgdGhlIHNwZWNpZmllZCBjaGlsZFxuICogaXNuJ3QgZm91bmQgaW4gdGhlIHBhcmVudC4gIFNlZSB7QGxpbmsgZ29vZy51aS5Db21wb25lbnQjcmVtb3ZlQ2hpbGR9IGZvclxuICogZGV0YWlsZWQgc2VtYW50aWNzLlxuICpcbiAqIEBzZWUgZ29vZy51aS5Db21wb25lbnQjcmVtb3ZlQ2hpbGRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAwLWJhc2VkIGluZGV4IG9mIHRoZSBjaGlsZCB0byByZW1vdmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfdW5yZW5kZXIgSWYgdHJ1ZSwgY2FsbHMge0Bjb2RlIGV4aXREb2N1bWVudH0gb24gdGhlXG4gKiAgICByZW1vdmVkIGNoaWxkIGNvbXBvbmVudCwgYW5kIGRldGFjaGVzIGl0cyBET00gZnJvbSB0aGUgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHtnb29nLnVpLkNvbXBvbmVudH0gVGhlIHJlbW92ZWQgY29tcG9uZW50LCBpZiBhbnkuXG4gKi9cbmdvb2cudWkuQ29tcG9uZW50LnByb3RvdHlwZS5yZW1vdmVDaGlsZEF0ID0gZnVuY3Rpb24oaW5kZXgsIG9wdF91bnJlbmRlcikge1xuICAvLyByZW1vdmVDaGlsZChudWxsKSB3aWxsIHRocm93IGVycm9yLlxuICByZXR1cm4gdGhpcy5yZW1vdmVDaGlsZCh0aGlzLmdldENoaWxkQXQoaW5kZXgpLCBvcHRfdW5yZW5kZXIpO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgZXZlcnkgY2hpbGQgY29tcG9uZW50IGF0dGFjaGVkIHRvIHRoaXMgb25lIGFuZCByZXR1cm5zIHRoZW0uXG4gKlxuICogQHNlZSBnb29nLnVpLkNvbXBvbmVudCNyZW1vdmVDaGlsZFxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3VucmVuZGVyIElmIHRydWUsIGNhbGxzIHtAbGluayAjZXhpdERvY3VtZW50fSBvbiB0aGVcbiAqICAgIHJlbW92ZWQgY2hpbGQgY29tcG9uZW50cywgYW5kIGRldGFjaGVzIHRoZWlyIERPTSBmcm9tIHRoZSBkb2N1bWVudC5cbiAqIEByZXR1cm4geyFBcnJheTxnb29nLnVpLkNvbXBvbmVudD59IFRoZSByZW1vdmVkIGNvbXBvbmVudHMgaWYgYW55LlxuICovXG5nb29nLnVpLkNvbXBvbmVudC5wcm90b3R5cGUucmVtb3ZlQ2hpbGRyZW4gPSBmdW5jdGlvbihvcHRfdW5yZW5kZXIpIHtcbiAgdmFyIHJlbW92ZWRDaGlsZHJlbiA9IFtdO1xuICB3aGlsZSAodGhpcy5oYXNDaGlsZHJlbigpKSB7XG4gICAgcmVtb3ZlZENoaWxkcmVuLnB1c2godGhpcy5yZW1vdmVDaGlsZEF0KDAsIG9wdF91bnJlbmRlcikpO1xuICB9XG4gIHJldHVybiByZW1vdmVkQ2hpbGRyZW47XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMDggVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEZXRlY3RzIHRoZSBzcGVjaWZpYyBicm93c2VyIGFuZCBub3QganVzdCB0aGUgcmVuZGVyaW5nIGVuZ2luZS5cbiAqXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLnVzZXJBZ2VudC5wcm9kdWN0Jyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0nKTtcbmdvb2cucmVxdWlyZSgnZ29vZy51c2VyQWdlbnQnKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGNvZGUgaXMgcnVubmluZyBvbiB0aGUgRmlyZWZveCB3ZWIgYnJvd3Nlci5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0ZJUkVGT1gnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHdlIGtub3cgYXQgY29tcGlsZS10aW1lIHRoYXQgdGhlIHByb2R1Y3QgaXMgYW5cbiAqICAgICBpUGhvbmUuXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9JUEhPTkUnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHdlIGtub3cgYXQgY29tcGlsZS10aW1lIHRoYXQgdGhlIHByb2R1Y3QgaXMgYW5cbiAqICAgICBpUGFkLlxuICovXG5nb29nLmRlZmluZSgnZ29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfSVBBRCcsIGZhbHNlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgd2Uga25vdyBhdCBjb21waWxlLXRpbWUgdGhhdCB0aGUgcHJvZHVjdCBpcyBhblxuICogICAgIEFPU1AgYnJvd3NlciBvciBXZWJWaWV3IGluc2lkZSBhIHByZSBLaXRLYXQgQW5kcm9pZCBwaG9uZSBvciB0YWJsZXQuXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9BTkRST0lEJywgZmFsc2UpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGUgY29kZSBpcyBydW5uaW5nIG9uIHRoZSBDaHJvbWUgd2ViIGJyb3dzZXIgb25cbiAqIGFueSBwbGF0Zm9ybSBvciBBT1NQIGJyb3dzZXIgb3IgV2ViVmlldyBpbiBhIEtpdEthdCsgQW5kcm9pZCBwaG9uZSBvciB0YWJsZXQuXG4gKi9cbmdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9DSFJPTUUnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoZSBjb2RlIGlzIHJ1bm5pbmcgb24gdGhlIFNhZmFyaSB3ZWIgYnJvd3Nlci5cbiAqL1xuZ29vZy5kZWZpbmUoJ2dvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX1NBRkFSSScsIGZhbHNlKTtcblxuXG4vKipcbiAqIFdoZXRoZXIgd2Uga25vdyB0aGUgcHJvZHVjdCB0eXBlIGF0IGNvbXBpbGUtdGltZS5cbiAqIEB0eXBlIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51c2VyQWdlbnQucHJvZHVjdC5QUk9EVUNUX0tOT1dOXyA9XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX0lFIHx8XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX09QRVJBIHx8XG4gICAgZ29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfRklSRUZPWCB8fFxuICAgIGdvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0lQSE9ORSB8fFxuICAgIGdvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0lQQUQgfHxcbiAgICBnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9BTkRST0lEIHx8XG4gICAgZ29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfQ0hST01FIHx8XG4gICAgZ29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfU0FGQVJJO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgY29kZSBpcyBydW5uaW5nIG9uIHRoZSBPcGVyYSB3ZWIgYnJvd3Nlci5cbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnVzZXJBZ2VudC5wcm9kdWN0Lk9QRVJBID0gZ29vZy51c2VyQWdlbnQuT1BFUkE7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBjb2RlIGlzIHJ1bm5pbmcgb24gYW4gSUUgd2ViIGJyb3dzZXIuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQucHJvZHVjdC5JRSA9IGdvb2cudXNlckFnZW50LklFO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgY29kZSBpcyBydW5uaW5nIG9uIHRoZSBGaXJlZm94IHdlYiBicm93c2VyLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LnByb2R1Y3QuRklSRUZPWCA9IGdvb2cudXNlckFnZW50LnByb2R1Y3QuUFJPRFVDVF9LTk9XTl8gP1xuICAgIGdvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0ZJUkVGT1ggOlxuICAgIGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0ZpcmVmb3goKTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgYW4gaVBob25lIG9yIGlQb2QgKGFzIGluIGlQb2QgdG91Y2gpLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudXNlckFnZW50LnByb2R1Y3QuaXNJcGhvbmVPcklwb2RfID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBob25lKCkgfHxcbiAgICAgIGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNJcG9kKCk7XG59O1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgY29kZSBpcyBydW5uaW5nIG9uIGFuIGlQaG9uZSBvciBpUG9kIHRvdWNoLlxuICpcbiAqIGlQb2QgdG91Y2ggaXMgY29uc2lkZXJlZCBhbiBpUGhvbmUgZm9yIGxlZ2FjeSByZWFzb25zLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LnByb2R1Y3QuSVBIT05FID0gZ29vZy51c2VyQWdlbnQucHJvZHVjdC5QUk9EVUNUX0tOT1dOXyA/XG4gICAgZ29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfSVBIT05FIDpcbiAgICBnb29nLnVzZXJBZ2VudC5wcm9kdWN0LmlzSXBob25lT3JJcG9kXygpO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgY29kZSBpcyBydW5uaW5nIG9uIGFuIGlQYWQuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQucHJvZHVjdC5JUEFEID0gZ29vZy51c2VyQWdlbnQucHJvZHVjdC5QUk9EVUNUX0tOT1dOXyA/XG4gICAgZ29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfSVBBRCA6XG4gICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwYWQoKTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGNvZGUgaXMgcnVubmluZyBvbiBBT1NQIGJyb3dzZXIgb3IgV2ViVmlldyBpbnNpZGVcbiAqIGEgcHJlIEtpdEthdCBBbmRyb2lkIHBob25lIG9yIHRhYmxldC5cbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFORFJPSUQgPSBnb29nLnVzZXJBZ2VudC5wcm9kdWN0LlBST0RVQ1RfS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9BTkRST0lEIDpcbiAgICBnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNBbmRyb2lkQnJvd3NlcigpO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgY29kZSBpcyBydW5uaW5nIG9uIHRoZSBDaHJvbWUgd2ViIGJyb3dzZXIgb24gYW55IHBsYXRmb3JtXG4gKiBvciBBT1NQIGJyb3dzZXIgb3IgV2ViVmlldyBpbiBhIEtpdEthdCsgQW5kcm9pZCBwaG9uZSBvciB0YWJsZXQuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQucHJvZHVjdC5DSFJPTUUgPSBnb29nLnVzZXJBZ2VudC5wcm9kdWN0LlBST0RVQ1RfS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9DSFJPTUUgOlxuICAgIGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0Nocm9tZSgpO1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYnJvd3NlciBpcyBTYWZhcmkgb24gZGVza3RvcC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudXNlckFnZW50LnByb2R1Y3QuaXNTYWZhcmlEZXNrdG9wXyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzU2FmYXJpKCkgJiZcbiAgICAgICFnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSW9zKCk7XG59O1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgY29kZSBpcyBydW5uaW5nIG9uIHRoZSBkZXNrdG9wIFNhZmFyaSB3ZWIgYnJvd3Nlci5cbiAqIE5vdGU6IHRoZSBsZWdhY3kgYmVoYXZpb3IgaGVyZSBpcyBvbmx5IHRydWUgZm9yIFNhZmFyaSBub3QgcnVubmluZ1xuICogb24gaU9TLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LnByb2R1Y3QuU0FGQVJJID0gZ29vZy51c2VyQWdlbnQucHJvZHVjdC5QUk9EVUNUX0tOT1dOXyA/XG4gICAgZ29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfU0FGQVJJIDpcbiAgICBnb29nLnVzZXJBZ2VudC5wcm9kdWN0LmlzU2FmYXJpRGVza3RvcF8oKTtcbiIsIi8vIChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG5nb29nLnByb3ZpZGUoJ3c2OWIucXIudWkuQ29udGludW91c1NjYW5uZXInKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5tYXRoLlNpemUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5vYmplY3QnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHlsZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnVpLkNvbXBvbmVudCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnVzZXJBZ2VudCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnVzZXJBZ2VudC5wcm9kdWN0Jyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuTG9jYWxWaWRlb0NhcHR1cmVyJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIuaW1ndG9vbHMnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5EZWNvZGVJbldvcmtlckhlbHBlcicpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLldvcmtlck1lc3NhZ2VUeXBlJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIuaW1hZ2VkZWNvZGluZycpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuICB2YXIgaW1ndG9vbHMgPSB3NjliLmltZ3Rvb2xzO1xuICB2YXIgU2l6ZSA9IGdvb2cubWF0aC5TaXplO1xuICB2YXIgV29ya2VyTWVzc2FnZVR5cGUgPSB3NjliLnFyLldvcmtlck1lc3NhZ2VUeXBlO1xuICB2YXIgb2JqZWN0ID0gZ29vZy5vYmplY3Q7XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHggcG9zLlxuICAgKiBAcGFyYW0ge251bWJlcn0geSB5IHBvcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHNpemUgcGF0dGVybiBzaXplLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIHc2OWIucXIudWkuUGF0dGVyblBvaW50ID0gZnVuY3Rpb24oeCwgeSwgc2l6ZSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLnNpemUgPSBzaXplIHx8IDQ7XG4gICAgdGhpcy5iaXJ0aFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfTtcbiAgdmFyIFBhdHRlcm5Qb2ludCA9IHc2OWIucXIudWkuUGF0dGVyblBvaW50O1xuICAvLyBQYXR0ZXJuUG9pbnQucHJvdG90eXBlLlxuICAvKipcbiAgICogQ29tcG9uZW50IHRoYXQgc2hvd3MgdmlzdWFsaXphdGlvbiBvZiBjb250aW51b3VzIHNjYW5uaW5nLlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMge2dvb2cudWkuQ29tcG9uZW50fVxuICAgKiBAZXhwb3J0XG4gICAqL1xuICB3NjliLnFyLnVpLkNvbnRpbnVvdXNTY2FubmVyID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGdvb2cuYmFzZSh0aGlzKTtcbiAgICB2YXIgb3B0ID0ge1xuICAgICAgJ3dlYmdsJzogdHJ1ZVxuICAgIH07XG4gICAgb2JqZWN0LmV4dGVuZChvcHQsIG9wdGlvbnMgfHwge30pO1xuICAgIHRoaXMuY2FwdHVyZXJfID0gbmV3IHc2OWIuTG9jYWxWaWRlb0NhcHR1cmVyKCk7XG4gICAgdGhpcy53b3JrZXJfID0gbmV3IHc2OWIucXIuRGVjb2RlSW5Xb3JrZXJIZWxwZXIoKTtcbiAgICB0aGlzLndvcmtlcl8uZW5hYmxlV2ViR2wob3B0Wyd3ZWJnbCddKTtcbiAgICB0aGlzLndvcmtlcl8uaW5pdCgpO1xuICAgIHRoaXMuZm91bmRQYXR0ZXJuc18gPSBbXTtcbiAgICB0aGlzLmxhc3RGcmFtZVRpbWVfID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBTaXplIG9mIHZpc3VhbGl6YXRpb24uXG4gICAgICogQHR5cGUge1NpemV9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLnNpemVfID0gbmV3IFNpemUoMjAwLCAyMDApO1xuICAgIC8qKlxuICAgICAqIFNpemUgb2YgZGVjb2RpbmcgaW1hZ2UuXG4gICAgICogQHR5cGUge1NpemV9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmRlY29kZVNpemVfID0gbmV3IFNpemUoMjAwLCAyMDApO1xuXG4gICAgLyoqXG4gICAgICogV2UgdXNlIGEgc2ltcGxlIGNhbGxiYWNrIGluc3RlYWQgb2YgZXZlbnRzIHRvIGJlIGluZGVwZW5kZW5kIG9mXG4gICAgICogY2xvc3VyZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuZGVjb2RlZENhbGxiYWNrXyA9IGdvb2cubnVsbEZ1bmN0aW9uO1xuICB9O1xuICB2YXIgQ29udGludW91c1NjYW5uZXIgPSB3NjliLnFyLnVpLkNvbnRpbnVvdXNTY2FubmVyO1xuICBnb29nLmluaGVyaXRzKENvbnRpbnVvdXNTY2FubmVyLCBnb29nLnVpLkNvbXBvbmVudCk7XG4gIHZhciBwcm8gPSBDb250aW51b3VzU2Nhbm5lci5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IGlmIGdldFVzZXJNZWRpYSAoYW5kIHNvIGNvbnRpdW91cyBzY2FubmluZylcbiAgICogaXMgc3VwcG9ydGVkLlxuICAgKiBAZXhwb3J0XG4gICAqL1xuICBDb250aW51b3VzU2Nhbm5lci5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIElmIGFwaSBpcyBub3QgcHJlc3NlbnQgaXQncyBjbGVhcmx5IG5vdCBzdXBwb3J0ZWQuXG4gICAgaWYgKCF3NjliLkxvY2FsVmlkZW9DYXB0dXJlci5nZXRNZWRpYSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyBCdXQgZmVhdHVyZSBkZXRlY3Rpb24gZG9lcyBub3Qgd29yayBhcyBicm93c2VycyBsaWUgYWJvdXQgdGhlaXJcbiAgICAvLyBjYXBhYmlsaXRpZXMsIHNvIHNuaWZmIHZlcnNpb25zIGFuZCBibGFja2xpc3Qgc29tZS5cbiAgICAvLyBJdCBpcyBzdXBwb3J0ZWQgZm9yIENocm9tZSA+PSAyMSwgT3BlcmEgPT4gMTIsIEZGID49IDIwLCBGRk9TIDEuNFxuICAgIC8vIChGRiBtb2JpbGUgMzApXG4gICAgdmFyIHVhID0gZ29vZy51c2VyQWdlbnQuZ2V0VXNlckFnZW50U3RyaW5nKCkgfHwgJyc7XG4gICAgdmFyIG1hdGNoID0gL0Nocm9tZVxcLyhcXGQrKS8uZXhlYyh1YSk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdIDwgMjEpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgbWF0Y2ggPSAvRmlyZWZveFxcLyhcXGQrKS8uZXhlYyh1YSk7XG4gICAgaWYgKG1hdGNoICYmIChtYXRjaFsxXSA8IDIwIHx8XG4gICAgICAobWF0Y2hbMV0gPCAyOSAmJiAoXG4gICAgICAgIGdvb2cuc3RyaW5nLmNvbnRhaW5zKHVhLCAnTW9iaWxlJykgfHxcbiAgICAgICAgZ29vZy5zdHJpbmcuY29udGFpbnModWEsICdBbmRyb2lkJykgfHxcbiAgICAgICAgZ29vZy5zdHJpbmcuY29udGFpbnModWEsICdpUGhvbmUnKSB8fFxuICAgICAgICBnb29nLnN0cmluZy5jb250YWlucyh1YSwgJ2lQYWQnKVxuICAgICAgKSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYW52YXMgZWxlbWVudCB1c2VkIGZvciB2aXN1YWxpemF0aW9uLlxuICAgKiBAdHlwZSB7SFRNTENhbnZhc0VsZW1lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8udmlzdWFsaXphdGlvbkNhbnZhc18gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBSZW5kZXJpbmcgY29udGV4dCBvZiB2aXN1YWxpemF0aW9uIGNhbnZhcy5cbiAgICogQHR5cGUge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByby52aXN1YWxpemF0aW9uQ29udGV4dF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUdXBsZXMgb2YgZm91bmQgcGF0dGVybiBwb3NpdGlvbnMuXG4gICAqIEB0eXBlIHtBcnJheS48UGF0dGVyblBvaW50Pn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByby5mb3VuZFBhdHRlcm5zXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZGVjb2RlciBpcyBjdXJyZW50bHkgZGVjb2RpbmcuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvLmlzRGVjb2RpbmdfID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIE1heCByZXNvbHV0aW9uIChtYXggZGltZW5zaW9uKSB1c2VkIGZvciB2aXN1YWxpemF0aW9uLiBBbGxvd3MgdG8gcmVkdWNlXG4gICAqIHJlc29sdXRpb24gdG8gaG9wZWZ1bGx5IGdldCBhIGhpZ2hlciBwZXJmb3JtYW5jZS4gSWYgc2V0IHRvIDAsIHRoZSBmdWxsXG4gICAqIGVsZW1lbnQgc2l6ZSBpcyB1c2VkLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgcHJvLm1heFZpc3VhbGl6YXRpb25SZXNvbHV0aW9uXyA9IDA7XG5cbiAgLyoqXG4gICAqIE1heGltYWwgcmVzb2x1dGlvbiB1c2VkIGZvciBkZWNvZGluZy4gSWYgc2V0IHRvIDAsIHZpc3VhbGl6YXRpb25cbiAgICogcmVzb2x1dGlvbiBpcyB1c2VkLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvLm1heERlY29kZVJlc29sdXRpb25fID0gNTAwO1xuXG4gIC8qKlxuICAgKiBNYXhpbWFsIGFnZSAoaW4gbXMpIG9mIHBhdHRlcm4gdmlzdWFsaXphdGlvbiBkb3RzLlxuICAgKiByZXNvbHV0aW9uIGlzIHVzZWQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8ubWF4UGF0dGVybkFnZV8gPSA1MDA7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8uYW5pbUZyYW1lUmVxdWVzdElkXyA9IDA7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8udGltZXJSZXF1ZXN0SWRfID0gMDtcblxuICAvKipcbiAgICpcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8uc3RvcHBlZF8gPSBmYWxzZTtcblxuICAvKipcbiAgICogU2V0IGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSB0ZXh0IHdhcyBkZWNvZGVkLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyl9IGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIGRlY29kZWRcbiAgICogc3RyaW5nIGFzIGFyZ3VtZW50LlxuICAgKiBAZXhwb3J0XG4gICAqL1xuICBwcm8uc2V0RGVjb2RlZENhbGxiYWNrID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB0aGlzLmRlY29kZWRDYWxsYmFja18gPSBjYWxsYmFjaztcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIHZpc3VhbGl6YXRpb24gd2lkdGguXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgdmlzdWFsaXphdGlvbiBoZWlnaHQuXG4gICAqL1xuICBwcm8uc2V0U2l6ZSA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLnNpemVfLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5zaXplXy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5kZWNvZGVTaXplXyA9IHRoaXMuc2l6ZV8uY2xvbmUoKTtcbiAgICB0aGlzLmVuc3VyZU1heFJlc29sdXRpb25zXygpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgc2l6ZSBmcm9tIGNsaWVudFdpZHRoL0hlaWdodC5cbiAgICogQGV4cG9ydFxuICAgKi9cbiAgcHJvLnVwZGF0ZVNpemVGcm9tQ2xpZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJhdGlvID0gd2luZG93WydkZXZpY2VQaXhlbFJhdGlvJ10gfHwgMTtcbiAgICAvLyBkb250IGRvIHRoaXMgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgZm9yIG5vdy5cbiAgICByYXRpbyA9IDE7XG4gICAgdmFyIGVsID0gdGhpcy5nZXRFbGVtZW50KCk7XG4gICAgdGhpcy5zaXplXy53aWR0aCA9IGVsLmNsaWVudFdpZHRoICogcmF0aW87XG4gICAgdGhpcy5zaXplXy5oZWlnaHQgPSBlbC5jbGllbnRIZWlnaHQgKiByYXRpbztcbiAgICB0aGlzLmRlY29kZVNpemVfID0gdGhpcy5zaXplXy5jbG9uZSgpO1xuICAgIHRoaXMuZW5zdXJlTWF4UmVzb2x1dGlvbnNfKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1heCByZXNvbHV0aW9uIChtYXggZGltZW5zaW9uKSB1c2VkIGZvciB2aXN1YWxpemF0aW9uLiBBbGxvd3MgdG8gcmVkdWNlXG4gICAqIHJlc29sdXRpb24gdG8gaG9wZWZ1bGx5IGdldCBhIGhpZ2hlciBwZXJmb3JtYW5jZS4gSWYgc2V0IHRvIDAsIHRoZSBmdWxsXG4gICAqIGVsZW1lbnQgc2l6ZSBpcyB1c2VkLlxuICAgKiBAcGFyYW0ge251bWJlcn0gcGl4ZWwgcmVzb2x1dGlvbi5cbiAgICogQGV4cG9ydFxuICAgKi9cbiAgcHJvLnNldE1heFZpc3VhbGl6YXRpb25SZXNvbHV0aW9uID0gZnVuY3Rpb24ocGl4ZWwpIHtcbiAgICB0aGlzLm1heFZpc3VhbGl6YXRpb25SZXNvbHV0aW9uXyA9IHBpeGVsO1xuICAgIHRoaXMuZW5zdXJlTWF4UmVzb2x1dGlvbnNfKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1heGltYWwgcmVzb2x1dGlvbiB1c2VkIGZvciBkZWNvZGluZy4gSWYgc2V0IHRvIDAsIHZpc3VhbGl6YXRpb25cbiAgICogcmVzb2x1dGlvbiBpcyB1c2VkLlxuICAgKiBAcGFyYW0ge251bWJlcn0gcGl4ZWwgcmVzb2x1dGlvbi5cbiAgICogQGV4cG9ydFxuICAgKi9cbiAgcHJvLnNldE1heERlY29kaW5nUmVzb2x1dGlvbiA9IGZ1bmN0aW9uKHBpeGVsKSB7XG4gICAgdGhpcy5tYXhEZWNvZGVSZXNvbHV0aW9uXyA9IHBpeGVsO1xuICAgIHRoaXMuZW5zdXJlTWF4UmVzb2x1dGlvbnNfKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFdoZW4gY29tcG9uZW50IGlzIHN0b3BwZWQgbm8gbW9yZSBzY3JlZW4gdXBkYXRlcyBhcmUgZHJhd24gYW5kIG5vIG1vcmVcbiAgICogZGVjb2RpbmcgaGFwcGVucy5cbiAgICogSXQgZG9lcyBub3Qgc3RvcCB0aGUgdmlkZW8gc3RyZWFtICh1c2UgZGlzcG9zZSgpIGZvciB0aGF0KS4gU28geW91IGNhbiB1c2UgdGhpcyBmb3JcbiAgICogcGF1c2luZy9yZXN1bWluZyBzY2FubmluZy5cbiAgICogQHBhcmFtIHtib29sZWFufSBzdG9wcGVkIHN0YXRlLlxuICAgKiBAZXhwb3J0XG4gICAqL1xuICBwcm8uc2V0U3RvcHBlZCA9IGZ1bmN0aW9uKHN0b3BwZWQpIHtcbiAgICBzdG9wcGVkID0gISFzdG9wcGVkO1xuICAgIHZhciB3YXNTdG9wcGVkID0gdGhpcy5zdG9wcGVkXztcbiAgICBpZiAoc3RvcHBlZCA9PSB3YXNTdG9wcGVkKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuc3RvcHBlZF8gPSBzdG9wcGVkO1xuICAgIGlmICghc3RvcHBlZCkge1xuICAgICAgdGhpcy5zY2hlZHVsZU5leHRGcmFtZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByby5jcmVhdGVEb20gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9tID0gdGhpcy5nZXREb21IZWxwZXIoKTtcbiAgICB0aGlzLnZpc3VhbGl6YXRpb25DYW52YXNfID0gLyoqIEB0eXBlIHtIVE1MQ2FudmFzRWxlbWVudH0gKi8gKFxuICAgICAgZG9tLmNyZWF0ZURvbSgnY2FudmFzJykpO1xuICAgIGdvb2cuc3R5bGUuc2V0U3R5bGUodGhpcy52aXN1YWxpemF0aW9uQ2FudmFzXywgeyd3aWR0aCc6ICcxMDAlJywgJ2hlaWdodCc6ICcxMDAlJ30pO1xuICAgIHRoaXMudmlzdWFsaXphdGlvbkNvbnRleHRfID0gLyoqIEB0eXBlIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9ICovIChcbiAgICAgIHRoaXMudmlzdWFsaXphdGlvbkNhbnZhc18uZ2V0Q29udGV4dCgnMmQnKSk7XG4gICAgLy8gV2UgY3VycmVudGx5IGp1c3QgcmVuZGVyIHRoZSBjYW52YXMuXG4gICAgdGhpcy5zZXRFbGVtZW50SW50ZXJuYWwodGhpcy52aXN1YWxpemF0aW9uQ2FudmFzXyk7XG4gICAgdGhpcy5jYXB0dXJlcl8uc3RhcnQodGhpcy5vbkFuaW1hdGlvbkZyYW1lLmJpbmQodGhpcykpO1xuICB9O1xuXG4gIHByby5vbkFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuc3RvcHBlZF8pXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5kcmF3VmlzdWFsaXphdGlvbl8oKTtcbiAgICB0aGlzLmxhc3RGcmFtZVRpbWVfID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgLy8gVGhpcyBkcmF3cyB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGZyYW1lIG9uIHRoZSBjdXJyZW50IGZyYW1lIHdoaWNoXG4gICAgLy8gaXMgbmFzdHkgYnV0IGFzIHdlIGhhdmUgc2VudCB0aGUgbGFzdCBpbWFnZSB0byB0aGUgd29ya2VyLCB3ZVxuICAgIC8vIGNhbm5vdCBkcmF3IGl0IGFueW1vcmUgd2l0aG91dCBjb3B5aW5nIChhdCBsZWFzdCBpbiBGRikuXG5cbiAgICBpZiAoIXRoaXMuaXNEZWNvZGluZ18pIHtcbiAgICAgIHRoaXMud29ya2VyXy5kZWNvZGUoXG4gICAgICAgIC8qKiBAdHlwZSB7IUhUTUxWaWRlb0VsZW1lbnR9ICovICh0aGlzLmNhcHR1cmVyXy5nZXRWaWRlbygpKSxcbiAgICAgICAgLyoqIEB0eXBlIHshZ29vZy5tYXRoLlNpemV9ICovICh0aGlzLmRlY29kZVNpemVfKSxcbiAgICAgICAgdGhpcy5vbkRlY29kZU1lc3NhZ2VfLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5pc0RlY29kaW5nXyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuc2NoZWR1bGVOZXh0RnJhbWUoKTtcbiAgfTtcblxuICAvKipcbiAgICogU2NhbGVzIHNpemUgaWYgbGFyZ2VyIHRoYW4gbWF4IHJlc29sdXRpb24uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm8uZW5zdXJlTWF4UmVzb2x1dGlvbnNfID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMubWF4VmlzdWFsaXphdGlvblJlc29sdXRpb25fKVxuICAgICAgaW1ndG9vbHMuc2NhbGVJZkxhcmdlcih0aGlzLnNpemVfLCB0aGlzLm1heFZpc3VhbGl6YXRpb25SZXNvbHV0aW9uXyk7XG4gICAgaWYgKHRoaXMubWF4RGVjb2RlUmVzb2x1dGlvbl8pXG4gICAgICBpbWd0b29scy5zY2FsZUlmTGFyZ2VyKHRoaXMuZGVjb2RlU2l6ZV8sIHRoaXMubWF4RGVjb2RlUmVzb2x1dGlvbl8pO1xuXG4gIH07XG4gIC8qKlxuICAgKiBEcmF3cyB2aXN1YWxpemF0aW9uIG9mIHNjYW5uaW5nIHRvIGNhbnZhcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByby5kcmF3VmlzdWFsaXphdGlvbl8gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZV87XG4gICAgdmFyIGNhbnZhcyA9IHRoaXMudmlzdWFsaXphdGlvbkNhbnZhc187XG4gICAgLy8gUmVzY2FsZSBjYW52YXMgaWYgbmVlZGVkLlxuICAgIGlmIChjYW52YXMud2lkdGggIT0gc2l6ZS53aWR0aCB8fCBjYW52YXMuaGVpZ2h0ICE9IHNpemUuaGVpZ2h0KSB7XG4gICAgICBjYW52YXMud2lkdGggPSBzaXplLndpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuICAgIH1cblxuICAgIHZhciBjb250ZXh0ID0gdGhpcy52aXN1YWxpemF0aW9uQ29udGV4dF87XG4gICAgdGhpcy5jYXB0dXJlcl8uZHJhd09uQ2FudmFzKGNhbnZhcywgY29udGV4dCk7XG4gICAgLy8gY29udGV4dC5maWxsU3R5bGUgPSAncmdiKDIwMCwwLDApJztcbiAgICAvLyBjb250ZXh0LmZpbGxUZXh0KHRoaXMubGFzdFJlc3VsdF8sIDEwLCAxMCk7XG4gICAgdmFyIHNjYWxlID0gdGhpcy5zaXplXy53aWR0aCAvIHRoaXMuZGVjb2RlU2l6ZV8ud2lkdGg7XG4gICAgdmFyIG1heEFnZSA9IHRoaXMubWF4UGF0dGVybkFnZV87XG4gICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5mb3VuZFBhdHRlcm5zXy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHBhdHRlcm4gPSB0aGlzLmZvdW5kUGF0dGVybnNfW2ldO1xuICAgICAgdmFyIGFnZSA9IG5vdyAtIHBhdHRlcm4uYmlydGhUaW1lO1xuICAgICAgaWYgKGFnZSA+PSBtYXhBZ2UpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgdmFyIGFscGhhID0gKG1heEFnZSAtIGFnZSkgLyBtYXhBZ2U7XG4gICAgICB2YXIgeCA9IHBhdHRlcm4ueCAqIHNjYWxlO1xuICAgICAgdmFyIHkgPSBwYXR0ZXJuLnkgKiBzY2FsZTtcbiAgICAgIHZhciByYWRpdXMgPSBwYXR0ZXJuLnNpemUgKiBzY2FsZSAqIGFscGhhO1xuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgyMDAsMjU1LDUwLCcgKyBhbHBoYSArICcpJztcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICBjb250ZXh0LmFyYyh4LCB5LCByYWRpdXMsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XG4gICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgYW5pbWF0aW9uIGZyYW1lLlxuICAgKi9cbiAgcHJvLnNjaGVkdWxlTmV4dEZyYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFuaW1GcmFtZSA9ICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgIHdpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lKTtcbiAgICBpZiAoYW5pbUZyYW1lKSB7XG4gICAgICB0aGlzLmFuaW1GcmFtZVJlcXVlc3RJZF8gPSBhbmltRnJhbWUuY2FsbChcbiAgICAgICAgd2luZG93LCB0aGlzLm9uQW5pbWF0aW9uRnJhbWUuYmluZCh0aGlzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0aW1lU2luY2VMYXN0RnJhbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMubGFzdEZyYW1lVGltZV87XG4gICAgICB2YXIgd2FpdFRpbWUgPSAwO1xuICAgICAgLy8gRHJhdyBhdCAyNSBmcHMgbWF4XG4gICAgICBpZiAodGltZVNpbmNlTGFzdEZyYW1lIDwgNDApIHtcbiAgICAgICAgd2FpdFRpbWUgPSA0MCAtIHRpbWVTaW5jZUxhc3RGcmFtZTtcbiAgICAgIH1cbiAgICAgIHRoaXMudGltZXJSZXF1ZXN0SWRfID0gd2luZG93LnNldFRpbWVvdXQoXG4gICAgICAgIHRoaXMub25BbmltYXRpb25GcmFtZS5iaW5kKHRoaXMpLCB3YWl0VGltZSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBEZWNvZGVkIG1lc3NhZ2UgZnJvbSB3b3JrZXIuXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIGZyb20gd29ya2VyLlxuICAgKiBAcGFyYW0geyo9fSB2YWx1ZSBmcm9tIHdvcmtlci5cbiAgICovXG4gIHByby5vbkRlY29kZU1lc3NhZ2VfID0gZnVuY3Rpb24odHlwZSwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy5zdG9wcGVkXykge1xuICAgICAgLy8gZG9uJ3QgZGlzcGF0Y2ggcGVuZGluZyBkZWNvZGluZyBldmVudHMgd2hlbiBzdG9wcGVkLlxuICAgICAgdGhpcy5pc0RlY29kaW5nXyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgV29ya2VyTWVzc2FnZVR5cGUuREVDT0RFRDpcbiAgICAgICAgLy8gdGhpcy5sYXN0UmVzdWx0XyA9IHZhbHVlWyd0ZXh0J107XG4gICAgICAgIC8vIHRoaXMuZm91bmRQYXR0ZXJuc18gPSBbXTtcbiAgICAgICAgdmFsdWVbJ3BhdHRlcm5zJ10uZm9yRWFjaCh0aGlzLmFkZFBhdHRlcm5fLCB0aGlzKTtcbiAgICAgICAgdGhpcy5vbkRlY29kZWQodmFsdWVbJ3RleHQnXSk7XG4gICAgICAgIHRoaXMuaXNEZWNvZGluZ18gPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFdvcmtlck1lc3NhZ2VUeXBlLk5PVEZPVU5EOlxuICAgICAgICB0aGlzLmlzRGVjb2RpbmdfID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBXb3JrZXJNZXNzYWdlVHlwZS5QQVRURVJOOlxuICAgICAgICB0aGlzLmFkZFBhdHRlcm5fKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBGb3VuZCBhbmQgZGVjb2RlZCBxciBjb2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBkZWNvZGVkIHRleHQuXG4gICAqL1xuICBwcm8ub25EZWNvZGVkID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHRoaXMuZGVjb2RlZENhbGxiYWNrXyh0ZXh0KTtcbiAgfTtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByby5hZGRQYXR0ZXJuXyA9IGZ1bmN0aW9uKHBhdHRlcm4pIHtcbiAgICB0aGlzLmZvdW5kUGF0dGVybnNfLnVuc2hpZnQobmV3IFBhdHRlcm5Qb2ludChwYXR0ZXJuWyd4J10sIHBhdHRlcm5bJ3knXSxcbiAgICAgIHBhdHRlcm5bJ3NpemUnXSkpO1xuICAgIHZhciBtYXggPSAxMDtcbiAgICB0aGlzLmZvdW5kUGF0dGVybnNfLnNwbGljZShtYXggLSAxLCB0aGlzLmZvdW5kUGF0dGVybnNfLmxlbmd0aCAtIG1heCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvLmVudGVyRG9jdW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICBnb29nLmJhc2UodGhpcywgJ2VudGVyRG9jdW1lbnQnKTtcbiAgICB0aGlzLnVwZGF0ZVNpemVGcm9tQ2xpZW50KCk7XG4gICAgdGhpcy5nZXRIYW5kbGVyKCkubGlzdGVuKHdpbmRvdywgZ29vZy5ldmVudHMuRXZlbnRUeXBlLlJFU0laRSxcbiAgICAgIHRoaXMudXBkYXRlU2l6ZUZyb21DbGllbnQpO1xuICAgIHRoaXMuZ2V0SGFuZGxlcigpLmxpc3Rlbih3aW5kb3csICdvcmllbnRhdGlvbmNoYW5nZScsXG4gICAgICB0aGlzLnVwZGF0ZVNpemVGcm9tQ2xpZW50KTtcbiAgfTtcblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm8uZGlzcG9zZUludGVybmFsID0gZnVuY3Rpb24oKSB7XG4gICAgZ29vZy5iYXNlKHRoaXMsICdkaXNwb3NlSW50ZXJuYWwnKTtcbiAgICB0aGlzLnN0b3BwZWRfID0gdHJ1ZTtcbiAgICB0aGlzLmNhcHR1cmVyXy5kaXNwb3NlKCk7XG4gICAgdGhpcy53b3JrZXJfLmRpc3Bvc2UoKTtcbiAgICBpZiAodGhpcy5hbmltRnJhbWVSZXF1ZXN0SWRfKSB7XG4gICAgICB2YXIgY2FuY2VsID0gKHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93Lm1vekNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93Lm9DYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUpO1xuICAgICAgaWYgKGNhbmNlbClcbiAgICAgICAgY2FuY2VsLmNhbGwod2luZG93LCB0aGlzLmFuaW1GcmFtZVJlcXVlc3RJZF8pO1xuICAgIH1cbiAgICBpZiAodGhpcy50aW1lclJlcXVlc3RJZF8pIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy50aW1lclJlcXVlc3RJZF8pO1xuICAgIH1cbiAgfTtcblxuXG4gIC8vIGV4cG9ydHNcbiAgZ29vZy5leHBvcnRTeW1ib2woJ3c2OWIucXIudWkuQ29udGludW91c1NjYW5uZXIucHJvdG90eXBlLnJlbmRlcicsIHByby5yZW5kZXIpO1xuICBnb29nLmV4cG9ydFN5bWJvbCgndzY5Yi5xci51aS5Db250aW51b3VzU2Nhbm5lci5wcm90b3R5cGUuZGlzcG9zZScsIHByby5kaXNwb3NlKTtcbn0pO1xuXG5cbiIsIi8vIChjKSAyMDEzIE1hbnVlbCBCcmF1biAobWJAdzY5Yi5jb20pXG5nb29nLnByb3ZpZGUoJ21haW4nKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5GaWxlU2F2ZXInKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5Mb2NhbFZpZGVvQ2FwdHVyZXInKTsgIC8vIG5vIGNvbXBpbGVkIGV4cG9ydHMsIGRlYnVnIG9ubHlcbmdvb2cucmVxdWlyZSgndzY5Yi5pbWcuV2ViR0xCaW5hcml6ZXInKTsgIC8vIG5vIGNvbXBpbGVkIGV4cG9ydHMsIGRlYnVnIG9ubHlcbmdvb2cucmVxdWlyZSgndzY5Yi5xci5kZWNvZGluZycpO1xuZ29vZy5yZXF1aXJlKCd3NjliLnFyLmVuY29kaW5nJyk7XG5nb29nLnJlcXVpcmUoJ3c2OWIucXIubGljZW5zZXMnKTtcbmdvb2cucmVxdWlyZSgndzY5Yi5xci51aS5Db250aW51b3VzU2Nhbm5lcicpO1xuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
